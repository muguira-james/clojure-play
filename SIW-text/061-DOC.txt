An Architecture for Tailoring Synthetic Natural Environments within the JSIMS FrameworkRonald F Fournier Steve O. OuztsJames J. FoxPeter S. DaileyLitton-TASC55 Walkers Brook DriveReading, MA 01867-3297781-942-2000, Ext 2393781-942-2000, Ext 3126781-942-2000, Ext 2423781-942-2000, Ext 3106 HYPERLINK mailto:rffournier@tasc.com rffournier@tasc.com,  HYPERLINK mailto:soouzts@tasc.com soouzts@tasc.com,  HYPERLINK mailto:jjfox@tasc.com jjfox@tasc.com, psdailey@tasc.comKeywords:Synthetic Natural Environment (SNE), SNE Tailoring, JETS ArchitectureABSTRACT: An important objective of the Joint Simulation System (JSIMS) program is to provide a physically consistent synthetic natural environment (SNE) (atmosphere-ocean-space-terrain) that will yield new levels of realism and consistency across heterogeneous simulations. This paper presents an architecture for employing a toolkit within the broader JSIMS architecture to provide both a prior and run-time SNE tailoring capabilities to simulation planners and directors.  The JSIMS Environmental Tailoring Services (JETS) project sponsored by DARPA has developed a framework for an environmental tailoring tool bench, allowing the simulation community to tailor an authoritative SNE to ensure a physically consistent scenario to promote effective training exercises, while ensuring a fair fight. One of the potential tools for inclusion in this toolkit is the Pressure Field Modification (PFM) algorithm discussed in a separate paper.  This paper will present a prototype of the proposed JETS Tool Bench that incorporates effects on simulations and the manner in which environmental editing tools are integrated to enable exercise controllers to better steer a simulation to the desired training objectives. 1. IntroductionThis paper proposes a process flow envisioned for the JSIMS Environmental Tailoring Software (JETS). The primary capability JETS provides involves the visualization and modification of JSIMS Synthetic Natural Environments (SNEs) used by the modeling and simulation community during training exercises. This paper describes the processes that collaboratively yield JETS SNE tailoring capabilities.Figure 1 illustrates the relationship between the JETS architectural concept with respect to the JSIMS High Level Design (HLD) [1] components. Central to the JETS architectural concept depicted in Figure 1 is the simulation community's desire, through an SNE Director, to tailor an SNE with the primary objective to promote a positive training exercise experience by participants. As depicted in Figure 2 the SNE Director, using the available JETS Tailoring Tools, is able to modify the exercise SNE prior to SNE distribution, subsequent to SNE distribution but prior to exercise execution, or subsequent to exercise commencement. Figure 2 illustrates where in the training exercise preparation and execution that the modeling and simulation community may Figure  SEQ Figure \* ARABIC 1: JETS relationship with JSIMS High-Level Design (HLD) Components.envision JETS SNE tailoring capabilities as beneficial. The JETS Tailoring Tools depicted in Figure 1 are supported by the JSIMS HDL Data Engine and Environmental Brokers, and Infrastructure components. Figure 1 illustrates that JETS access to SNE data element values leverages upon existing JSIMS Environmental Broker, Data Engine Broker and Infrastructure technologies. A very important aspect of this architectural concept is that JETS for the most part, as well as Figure  SEQ Figure \* ARABIC 2: The SNE Life Cycle Where JETS Tailoring Capabilities Are Most Beneficial.most JSIMS models, are insulated from the specifics of the SNE domains (i.e., Atmosphere, Ocean, Space and Terrain) implementations.  Furthermore, JETS is simply envisioned to modify data that resides in the SNE domains prior to distribution, after distribution or during a training exercise. 2. Major JETS Processing ElementsFigure 3 depicts the high-level processing elements of the proposed JETS architecture at any point in the SNE life cycle (See Figure 2). Note that the major JETS elements consist of  JETS GUI, JETS Tools and JETS SNE Access. The Retrieved SNE Data flow for the JETS SNE Access processing element in Figure 3 is provided by existing Environmental and Data Engine Brokers, which in turn rely on the JSIMS HLD Infrastructure components depicted in Figure 1. This architectural approach ensures JETS remains insensitive to SNE data storage formats and its geographic distribution throughout the its life cycle. The JETS architectural approach also allows for the incremental addition of SNE domains for editing, along with additional SNE tailoring functionality.  It is important to note that the JETS Edited SNE Data To Store flow from the JETS SNE Access processing element represents local and remote SNE updates (i.e., a distributed SNE) supported by the JSIMS HLD Environmental/Data Engine Brokers and Infrastructure components. The JETS processing elements depicted in Figure 3 are envisioned for use by the appropriate exercise director to modify the SNE, whether the SNE is within the Generation, Evaluation or Exercise Run Time (see Figure 2) portions of its life cycle. The JETS GUI and JETS Tools processing elements depicted in Figure 3 are conceived to exist as two separate processing elements. The separation of these two JETS elements into two processing components promotes future distribution of JETS computations (i.e., JETS Tools), and also provides remote tailoring of the training exercise SNE (i.e., JETS GUI). The JETS capabilities provided by JETS GUI and JETS Tools processes are enumerated in Sections 2.1 and 2.2, respectively in this paper.The JETS SNE Access process differs from JETS GUI and JETS Tools in that it is a single, multi-threaded control point process encapsulating requests to retrieve or insert SNE data. The JETS SNE Access process isolates the other JETS processing elements from needing to be cognizant and making allowances for the SNE data formats (e.g., JSIMS Data Interchange Model [2]) present within the SNE Data Store. Therefore, the multi-threaded JETS SNE Access process is responsible for the retrieval of requested SNE data, or insertion of JETS modified SNE data. In addition, this processing element is also responsible for the reformatting of retrieved SNE data from that present within the SNE Data Store for subsequent JETS Tools processing, and the reformatting of JETS Tools modified data into the SNE Data Store format. Therefore, it is conceivable that separate JETS SNE Access processes exist for each variant of an SNE format (e.g., SEDRIS, WSG, and TAOS).Figure  SEQ Figure \* ARABIC 3: JETS architecture processing elements.The capabilities provided by the JETS SNE Access process are further described in Section 2.3 of this document.If the SNE is distributed (i.e., also known as "published" in some exercise simulation communities) to exercise participants as a simulation progresses, then the JETS processing elements depicted in Figure 3 are sufficient. The JETS architecture illustrated in Figure 3 remains viable even if the SNE is distributed to exercise participants prior to commencement of an exercise. In this operational scenario the network supporting the exercise would require sufficient bandwidth to re-distribute portions of the SNE that were changed by the exercise director. In a worst case scenario, nearly the entire SNE may be re-distributed. This can place an enormous burden on current exercise network resources. In order to remedy this network-burdening situation the proposed JETS architecture would contain the processing elements depicted in Figure 4 present at each exercise participant's node on the simulation network. Note that the JETS processing elements illustrated in Figure 4 for modification of the SNE by the exercise director during the run-time exercise are identical to the pre-exercise JETS processes except for the substitution of the JETS GUI process with a JETS WatchDog process. Figure 3 illustrates the proposed JETS architecture from the exercise director perspective, while Fig. 4 depicts the JETS architecture from the exercise participant's perspective. Note in Figure 4 that the JETS processing elements for modification of the participants SNE are identical to the pre-exercise JETS processes except for the substitution of the JETS WatchDog process for the JETS GUI process. In the JETS operational scenario depicted in Figure 4 the exercise director identifies the SNE changes and the edit instructions are forwarded from the exercise director's JETS GUI to exercise participant's JETS WatchDog process. The JETS WatchDog process initiates the JETS SNE Access and JETS Tools processes just as the JETS GUI does, however to the exercise participants, they are not necessarily aware their SNE is being modified. SNE modifications are made by the exercise participant's system to the SNE present on their local system, thereby reducing the simulation network burden by trading off exercise participants processor's cycles. Further investigation is required to assess the computational load added by the JETS processes in this scenario. The capabilities provided by the JETS WatchDog process are further described in Section 2.4 of this document.2.1 JETS GUIThe JETS GUI depicted in Figure 3 is initially envisioned to consist of one or more processes as illustrated in Figure 5. An initial JETS GUI process is initiated when a user selects and activates the JETS application. The initial JETS GUI process that is activated by the user is responsible for retrieving JETS configuration Figure  SEQ Figure \* ARABIC 4: JETS Architecture for Distributed SNE Tailoring.information, the selection of the SNE the JETS exercise director (i.e., JETS user) intends to edit, and the sequenced initiation of the subsequent JETS processes. The JETS GUI processes collectively are also responsible for the visualization of the retrieved SNE and the selection of user SNE editing information. JETS GUI processes leverage capability present in the Presentation Layer of the JSIMS HLD Complex and Software Components Models [1] and acts as the JETS Handler of JETS related events. The initial JETS GUI process is the JETS main process. Although the JETS GUI processes provide the Graphical User Interfaces (GUIs) through which the JETS user may view and specify edits to the SNE data, the JETS GUI process is also responsible for the retrieval of JETS configuration data (see Figure 5) and initiating JETS processes in the following sequence:Figure  SEQ Figure \* ARABIC 5: JETS GUI processes are responsible for SNE visualization and edit definition.Initiation of the JETS SNE Access process based on the retrieved configuration data, user supplied exercise simulation information and user supplied SNE data store mechanism selected from the initial GUI. SNE Access Format returns its process identification information back to JETS GUI (see Figure 5).When the user commands JETS to modify SNE data, JETS GUI initiates the appropriate (depending on the nature of the user requested data modification(s)) JETS Tools process(es). The JETS Tool process(es) returns its process identification information back to JETS GUI (see Figure 5)The JETS configuration information depicted in Figure 5 include, but are not limited to the following:The default JETS SNE Access process supported by JETS to initiate.Which specific JETS Tools the user is allowed to perform on the SNE data.JETS software defaults.JETS user defaults (editable by JETS user from JETS GUI).The JETS GUI process is also responsible for rendering retrieved/edited (automatically render upon edit completion) SNE data as specified by the JETS user with combination of the following information:Exercise Game Space: Map, area/point(s) edit selectionAnalysis method (e.g. scene visualization, time series contour, etc.)Date/time edit intervalAs depicted in Figures 3 and 4, note that in rendering SNE data the JETS GUI process retrieves SNE data (original or edited) through the JETS SNE Access process which acts as the JETS Data Engine. JETS GUI may consist of a number of processes, where a JETS user has opened multiple windows with analyses rendered in each of them. Finally, JETS GUI is responsible for accepting user actions to edit the SNE data and initiating the appropriate JETS Tools process to accomplish the editing specified by the JETS user (i.e., exercise director). User editing actions consists of, but are not limited to the following:Grid point(s) selection (horizontal and vertical dimensions)SNE variable selection for editingEdit algorithm specificationChange to specific valueAdd/Subtract by aPercentageConstantPFMChange to a specific valueAdd/Subtract by a PercentageConstantBlendingSpatial (horizontal and vertical)Temporal (if date/time range was specified)Commit edits (queries user as to whether they are certain they want to perform the edit)Undo (allows user to undo previous edit(s))One and only one JETS GUI window is responsible for initiating an SNE edit (See Section 2.2). The JETS GUI process initiates the editing algorithm and forwards Editing Commands (See Figures 3 and 4) to the editing algorithm process(es) (i.e., JETS Tools). The JETS GUI responsible for initiating the editing algorithm process and sends its identifying information as part of the Editing Commands information flow. Once the editing algorithm (i.e., JETS Tools process(es)) has successfully completed modifications to the SNE data and the JETS GUI process is still executing, the JETS GUI is notified of the editing algorithm completion status. If the JETS GUI process responsible for initiating the JETS Tools process is no longer active, the JETS GUI Tool leaves the edited SNE in the SNE Data Store and terminates. At this point, the JETS Tools editing algorithm process is no longer executing. If the edit was successful, then the JETS GUI process re-renders the SNE variable for JETS user inspection. At this time, an Undo widget is activated that would allow the JETS user to reverse the edit prior to when the edit commenced. This is the purpose of the Retrieval/Removal command flow between JETS GUI and JETS SNE Access in Figures 3, 4 and 5. If the edit was not successful, the editing algorithm process is responsible for displaying a dialogue box stating the reason for the edit failure. The JETS exercise director must click on an OK button, where SNE edits inserted into the SNE are rolled back before the editing algorithm process terminates. There is also a provision for the user to terminate an on-going edit, where SNE edits are automatically rolled back.JETS GUI windows must conform to the JSIMS Graphical User Interface (GUI) Style Guide, Version 2.0 [3]. This style guide defines a Java Metal look and feel (see  HYPERLINK "http://java.sun.com/products/jfc/swingdoc-api-1.1/javax/swing/plaf/basic/BasicLookAndFeel.html"  http://java.sun.com/products/jfc/swingdoc-api-1.1/javax/swing/plaf/metal/MetalLookAndFeel.html), using the Java swing component tool set (see  HYPERLINK "http://java.sun.com/products/jfc/index.html" http://java.sun.com/products/jfc/index.html). 2.2 JETS ToolsThe JETS Tools processes depicted in Figures 3, 4 and 5 represent the various editing algorithms that may be applied to the SNE data. This means that separate processes are envisioned for each editing algorithm and for each SNE domain (i.e., atmosphere-ocean-space-terrain). Depending on the nature and computing resource consumption of the various SNE editing algorithms (e.g., Pressure Field Modification (PFM) because all basic state variables may also be modified), the JETS user may have to wait until the editing algorithm has completed the SNE modifications. However, a progress window owned by the JETS Tool editing algorithm keeps the JETS user apprised of the editing progress.As depicted in Figure 3, the JETS editing algorithm process selected by the JETS user is initiated by the JETS GUI process for pre-exercise SNE edits. JETS Tools processes rely on the Background Broker of the HLD Infrastructure to manage computational and connectivity resource consumption from impacting run-time training exercise simulation events. At exercise commencement an exercise participants' system is instructed to starts up the JETS WatchDog process (if run-time edits are permitted by the exercise director), which replaces the JETS GUI for SNE run-time edits performed on the participants SNE. As illustrated in Figures 3 through 5, The Editing Instructions flow contains information pertinent to the edit requested by the JETS user. The Editing Instructions also contains JETS GUI (JETS WatchDog) process identification information such that the editing algorithm process can notify the JETS GUI (or JETS WatchDog) process of its completion status (i.e., Editing Status flow in Figures 3 through 5). If, during the initiation process JETS Tools detects erroneous conditions, JETS Tools returns a failure condition to JETS GUI (or JETS WatchDog) so long as the JETS GUI (or JETS WatchDog) process is still active. If the JETS GUI (or JETS WatchDog) process is no longer active (user can log-off for extended editing runs), then the JETS Tool process does not send the Editing Status information flow, and merely terminates.The JETS Tools editing algorithm process retrieves and inserts SNE data through the JETS SNE Access process (See Retrieval/Insertion Commands flow in Figure 3). This retrieval/insertion by the JETS SNE Access process is done to isolate the JETS Tools algorithms from having to deal with differing SNE data formats so as to encapsulate the JSIMS DIM [2]. The JETS SNE Access process may need to reformat some of the SNE data specifically for modification by the editing algorithm (i.e., retrieval), or realigns the modified JETS Tools SNE data for subsequent reformatting and insertion into the SNE Data Store by the SNE Access process. Should an error occur during modification of SNE data by the editing algorithm, it is the responsibility of the JETS Tools editing algorithm to list the nature of the problem in a dialogue box to the JETS user. The JETS user must confirm one of the behaviors presented in the dialogue box created by the JETS Tools process. Whatever ensuing behavior is confirmed by the JETS user, the JETS Tools editing algorithm process must remove SNE edits made to the SNE Data Store through the JETS SNE Access process, the JET GUI process responsible for initiating the JETS Tools editing algorithm process is notified of the failure, and the editing algorithm process terminates. If the JETS Tools editing algorithm process has successfully completed its modification of the SNE data, then the process first saves the edited SNE data through the JETS SNE Access process and notifies the JETS GUI process. Then the editing algorithm process terminates normally.When a JETS Tools process is initiated it opens a GUI window containing a progress widget. The editing algorithm process owns the progress GUI window and updates the progress widget. This GUI window during pre-exercise SNE modification (i.e., not during exercise run-time) also contains a “Cancel” widget that would allow the JETS user to terminate the editing algorithm process. The editing algorithm process should confirm a cancellation action selected by the user. If the cancellation is voided, editing continues. If the JETS user confirms the cancellation, then a message is sent to the JETS GUI processes that initiated the editing algorithm that the user has terminated the edit. Then the JETS Tool process has the JETS SNE Access process roll back all SNE edits inserted into the SNE Data Store.2.3 JETS SNE AccessThe JETS SNE Access process illustrated in Figures 3 through 5 isolates JETS Tools editing algorithms from details of SNE retrieval/insertion and/or formats (i.e., JSIMS DIM). The JETS SNE Access process relies on the Data Engine Broker of the Models Component HLD for providing access and manipulation services of SNE data. Furthermore, JETS SNE Access understands the specific data reformatting needs of each JETS Tools editing algorithm. This JETS Tools process(es) are also responsible for conversion of the SNE variable units of measure, coordinate transformations, etc., because the JETS Tools editing algorithms may operate in a reference system that differs from the SNE. Figures 3 through 5 illustrate that the JET GUI (or JETS WatchDog at run-time) process initiates the JETS SNE Access process. If, during the initiation process JETS SNE Access detects erroneous conditions, JETS SNE Access returns a failure condition to JETS GUI (or JETS WatchDog). The JETS SNE Access process receives retrieval commands from JETS GUI and JETS Tools. JETS SNE Access may also receive requests to insert SNE data from the JETS Tools process(es). For rollback situations, the JETS SNE Access process may also receive removal requests from either JETS GUI or JET Tools.As previously stated the JETS SNE Access process is responsible for transforming SNE data obtained from the SNE Data Store to the form expected by the JETS Tools editing algorithm or display rendering (pre and post edit), and transforming results from the editing algorithm to the SNE format. This may include coordinate transformations between the SNE coordinate reference frame to the reference frame used by the JETS Tools editing algorithms (for PFM the atmospheric domain latitude/longitude/pressure is the reference system). As currently envisioned, JETS Tools treats the SNE data as a time series of volumetric (defined by latitude, longitude and pressure ranges for the atmospheric domain) or point (e.g., observation or uniform field) data. JETS SNE Access is also responsible for conversion of the SNE variable units of measure.The precise nature on how the SNE data is retrieved or inserted is currently an engineering effort for data volumetric constraints need to be considered if the entire scenario SNE is to undergo editing. More than likely the JETS SNE Access process will not retrieve the entire scenario SNE, but would buffer the data as requested by the JETS Tools process. When a JETS user terminates the JETS application, JETS GUI sends an exit message to the JETS Tools and JETS SNE Access processes so that JETS tools and JETS SNE Access may also synchronize termination from the active process list of system(s) cooperating in the edit. If there is no editing support being provided to a JETS Tools process, the JETS SNE Access process terminates. No JETS Tools process (es) should be active in this case. However, should there be an on-going edit by JETS Tools process(es), then JETS Tools and JETS SNE Access will continue to support the edit. For time and resource consuming SNE edits this approach would allow a JETS user to log-off the system as edits to the SNE continue to be performed. However, if the JETS SNE Access process receives a message from the JETS Tools editing processes that the user has terminated the edit, then JETS SNE Access process will role back all edits inserted by the JETS Tools editing process from the SNE Data Store. Then both the JETS Tools and JETS SNE Access processes terminate. With no editing being performed, if a JETS GUI termination message was sent, then JETS SNE Access also terminates. Otherwise, the JETS SNE Access process continues execution to support potential visualizations by the JETS user through JETS GUI.2.4 JETS WatchDogThe JETS WatchDog process depicted in Figure 5 is initiated on the exercise participant's system when they initiate their exercise simulation. The JETS WatchDog process is only needed during exercise run-time when the exercise's SNE is distributed prior to exercise commencement, and re-distribution during exercise run-time is not feasible. Once the exercise director identifies the SNE edits, the JETS GUI process executing on their system forwards the Edit Instructions to the JETS WatchDog process on each exercise participant's system. The JETS WatchDog process behaves in a manner analogous to the JETS GUI process (i.e., initiates the appropriate JETS SNE Access and JETS Tools processes). This means that a window is opened on the exercise participant's system to notify them an edit is taking place and the progress bar indicates the progress of the edit on their system. When the edit is completed the JETS WatchDog process waits for additional Editing Instructions from the exercise director. 2.5 JETS PrototypeA Visual Basic prototype of the JETS application in the context of the proposed architecture summarized in this paper is currently under development. Human factors engineering in so far as to incorporate JETS usability from the exercise director's perspective is also factored into the JETS prototype.ReferencesThe following references were cited in this paper:Valle, Tony (Team Chair); Byrum, Jim; Berggren, Peter; Knox, Bob; Kropp, Carol; Cat, Khang; Smith, Roger; DiVecchia, Tim; Kline, Patty: "JSIMS High Level Design (HLD), Version 0.2", November 2, 1998Butler, Paul (Team Chair); Bryan, Beth; Clavio, Don; Felder, Sam; Finnerty, Colleen; Glaize, Jack; Gryder, Tom; Hunnell, Steve; Knapp, Gordan; Keating, Donna; Kelly, June; Kropp, Carol; Leavitt, Rob; McDonald, Robert; Merlet, Pat; Mullarney, Alasdar; Nimmo, Bill; Sellers, Duane; Shen, Ed; Stubbs, Keith; Weigle, Geoff: "JSIMS Data Interchange Model (DIM) Document", Version 1.1, March 5, 1999TRW CONTRACT NO: F19628-97-C-0014: "Graphical User Interface (GUI) Style Guide, Version 2.0", October 27, 1998Author BiographiesRonald F. Fournier is a Principal Engineer at TASC, Inc., Reading, MA. He is the lead engineer for the JETS architecture development and design/developer of the JETS prototype.Steve O. Ouzts is Manager of the Applied Technology Section at TASC, Inc., Reading, MA. He is the JETS project manager.James J. Fox is a Member of the Technical Staff at TASC, Inc., Reading, MA. He is the JETS prototype developer.Peter S. Dailey is a Senior Member of the Technical Staff at TASC, Inc., Reading, Ma. He is the scientific lead on the JETS project and has served as the lead meteorologist on several other M&S efforts including the STOW program.