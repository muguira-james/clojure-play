Simulating the Commander’s Decision Process:Proactive Planning in Command ModulesDr. Joseph G. Kovalchik, Mr. Jonathan W. Labin and Mr. Eric R. RosenlofJohns Hopkins University Applied Physics Laboratory11100 Johns Hopkins RoadLaurel, MD 20723-6099240-228-6264HYPERLINK "mailto:joseph.kovalchik@jhuapl.edu"joseph.kovalchik@jhuapl.edu, HYPERLINK "mailto:jonathan.labin@jhuapl.edu"jonathan.labin@jhuapl.edu, HYPERLINK "mailto:eric.rosenloff@jhuapl.edu"eric.rosenlof@jhuapl.eduKeywords:HLA, FEDEP, integrated warfare analysis, multi-mission warfare, federation, conflict resolution, expert system, transfer of ownership, fuzzy logic, plannerABSTRACT: This paper presents the details of the Commander Federate, a federate within the APL Integrated Multi-warfare Simulation (AIMS), which addresses the growing interest in the Defense community in the ability to perform simulations that incorporate the Commander’s decision process in warfare tactical situations. As reported in an earlier paper, the Johns Hopkins University Applied Physics Laboratory (JHU/APL) has developed the Commander Federate that uses an expert system to: set warfare priorities either by time or event; provide inter-warfare area conflict resolution for asset allocation; and direct the transfer of ownership of assets from one simulation to another. In its latest version, the Commander Federate uses its Common Operational Picture (COP) and fuzzy expert system to employ a planner to programmatically formulate the warfare commander’s proactive planning process. Once the plan is constructed, the Commander Federate proactively issues appropriate orders to other federates. A specific example is discussed wherein a contact report on a threat submarine results in the Commander Federate invoking the planner to formulate a plan to dispatch a submarine attack unit from the existing formation, alter the formation course and speed and alter the arrangement of remaining ships in the formation. This work continues to refine a process and an analytical tool prototype to simulate the commander’s decision process in integrated or stand-alone warfare areas.IntroductionThis paper presents implemented changes to the APL Integrated Multi-warfare Simulation (AIMS) Commander Federate that occurred over the last year of a four year project. These changes address the growing interest in the Defense community in the ability to perform simulations that incorporate the Commander’s decision process in warfare tactical situations. The following sections provide background information on previously completed work, highlights the new features of the project and presents the current architecture used in the implementation. After providing details on the newly implemented technologies, an example is given to demonstrate the new functionality. The last section presents suggestions for future work.Background Previous papers [ REF siw2003 \h 1,  REF siw2006 \h 2] presented details on the AIMS federation in which AIMS addressed the growing interest in the Defense community in the ability to perform multi-warfare analysis – analysis that crosses the domains of multiple mission areas. There was an emerging need for analysis to be performed at the “multi-warfare” level, motivated by transition to “capabilities-based” acquisition, creation of multi-mission structures (e.g., Sea Shield), and the need to assess performance/effectiveness of multi-mission platforms. The general solution added a new multi-mission layer as illustrated in  REF _Ref113183985 \h  \* MERGEFORMAT Figure 1.Figure  SEQ Figure \* ARABIC 1: Multi-Mission Layer As described in [ REF siw2006 \h 2], AIMS provides the capability to:Incorporate simulations of choice based on the analysis task at handConsider the effects of competing resources across multi-warfare areas and the dependencies of one warfare area on another Provide a Single Point of Entry (SPE) for scenario dataCoordinate the execution of scenario runs and data collectionVisualize the scenario interactions, andAssist in post-run analysisProject OverviewThe Johns Hopkins University Applied Physics Laboratory (JHU/APL) recently augmented the Commander Federate to include a fuzzy logic expert system [ REF Jess \h 3,  REF FuzzyJess \h 4] and a hierarchical ordered planner [ REF Planners \h 5,  REF JSHOP \h 6]. The Commander Federate uses its Common Operational Picture (COP) and fuzzy expert system to employ a planner to programmatically formulate the commander’s decision making process. Once the plan is devised, the Commander Federate proactively issues appropriate order to other federates. A specific example is discussed wherein a contact report on a threat submarine results in invoking the planner to formulate a plan to dispatch a submarine attack unit (SAU) from the existing formation if deemed necessary, alter the formation course and speed, and determine a new formation if the SAU was dispatched. This work continues to refine a technique and an analytical tool prototype to simulate the human decision process in integrated or stand-alone warfare areas. AIMS ArchitectureThe architecture development began by examining a scenario drawn from an ongoing study that involved several mission areas.  REF _Ref113271565 \h Figure 2 shows the overall architecture of the federation. The new additions such as the planner and the fuzzy expert system added to the architecture over the last year are drawn in red. AIMS federates the Extended Air Defense Simulation (EADSIM), the Naval Simulation System (NSS), and three APL-developed simulations: the Surface AAW Multi-Ship Simulation (SAMS), the Battle Force Engagement Model (BFEM), and Orbis. Descriptions of the participating federates can be found in [ REF siw2006 \h 2]. In order to capture the data from simulations runs, we selected hlaResults.  The data from the simulation runs is viewable using Microsoft Access. Figure  SEQ Figure \* ARABIC 2: AIMS ArchitectureCommander Federate DetailsIn the AIMS federation the Commander Federate plays the role of the Maritime Component Commander. The federation command structure can be seen in  REF _Ref113184188 \h Figure 3. Each of the warfare area commanders is mapped to one or more simulations. Figure  SEQ Figure \* ARABIC 3: Federation Command StructureAt the center of the federation command structure is the Commander Federate. Its logical components are shown in  REF _Ref113331717 \h Figure 4. The Commander Federate, utilizing a fuzzy expert system, sets warfare priorities either by time or event, provides inter-warfare area conflict resolution for asset allocation, and directs the transfer of ownership of assets from one simulation to another. For information on the working of Federation Management, Damage Assessment, Servicing of requests, and the Common Operational Picture see [ REF siw2006 \h 2]. Details of the newly added FuzzyJess Expert System and the Java Simple Hierarchical Ordered Planner (JSHOP) are given in this section.Figure  SEQ Figure \* ARABIC 4: Commander Federate ComponentsFuzzyJess Engine and Fuzzy Rule SetsThe Commander Federate’s Expert System (Jess) was augmented with the Fuzzy Java Expert System Shell (FuzzyJess) engine to initiate fuzzy logic rules generated by subject matter experts. Conversion from the Jess engine to the FuzzyJess engine proved to be relatively simple. With the FuzzyJess engine in place, the capability to read a text file containing a set of Jess rules defining behavior and the ability to update information about the state of the scenario (based on information from the Commander Federate’s HLA wrapper via JavaBean technology) remained. Additionally, several upgrades were realized that allowed the ability to initiate rules calling native and user defined Java methods to invoke the planner, execute the plan by issuing issued commands and employ the use of fuzzy logic in the reasoning process.Set Warfare PrioritiesThe fuzzy rules for setting warfare priority have replaced the conventional or crisp rules for doing so. Here is an example of the one of the fuzzy rules implemented to set the ASW priority. If the range is short and the time since the event is short then set the ASW priority to Very HighThe antecedents (the if part of the if-then rule) of range and time since can be seen in  REF _Ref143058139 \h Figure 5 and  REF _Ref143058164 \h Figure 6, respectively. The fuzzy set for the consequent part (the then part of the if-then rule) of the of warfare priority rule is shown in  REF _Ref143058229 \h Figure 7. Figure  SEQ Figure \* ARABIC 5: Range Fuzzy VariableFigure  SEQ Figure \* ARABIC 6: Time Since Fuzzy VariableFigure  SEQ Figure \* ARABIC 7: Warfare Priority Fuzzy Variable Last year, the most threatening single event was chosen to set the warfare priorities. Today, when each event associated with a particular warfare area is processed, the contributions for a given warfare area are summed. All of these totals for each warfare area priority are then normalized before the relative ranking is set. The Commander ranks each warfare area priority based on the normalized value. This method results in reduced cycling between the highest priority warfare areas and accounts for the weight of each individual event. Once the warfare areas are set, the Commander’s intent can be promulgated (see  REF _Ref114974582 \h Figure 8). The rules engine was configured to use the Mamdani rule executor, the minimum antecedent combine operator and the sum global contribution operator.Figure  SEQ Figure \* ARABIC 8: Set Warfare PrioritiesJava Simple Hierarchical Ordered Planner (JSHOP)JSHOP features a domain-dependent automated-planning system based on ordered task decomposition. The planning system begins execution given an initial state of the world and a desired task to achieve. A method is a schema for decomposing a particular kind of task into a set of subtasks (provided that some set of preconditions is satisfied). Methods are employed to recursively decompose tasks into subtasks, stopping when the decomposition reaches primitive tasks that will be performed directly by planning operators. The objective of the planning system is to create a plan (sequence of steps) to perform tasks in the same order that they will be executed [ REF Planners \h 5]. JSHOP is a compiler of its domain description, meaning that it compiles a given domain description to a domain-specific planner, and then runs that planner to solve the planning problems in that domain.  REF _Ref143076242 \h  \* MERGEFORMAT Figure 9 directly taken from [ REF JSHOP \h 6] shows this process. Figure  SEQ Figure \* ARABIC 9: JSHOP Compilation-Execution Process The way JSHOP is used in the Commander Federate is illustrated in  REF _Ref114975622 \h  \* MERGEFORMAT Figure 10. Files containing separate domain information are compiled beforehand. At runtime, a contact report is sent to the commander by another federate, triggering the FuzzyJess rules to begin the planning sequence. The attributes of the current simulation state that are applicable to the planning problem at hand and the task to be achieved are written to a text file called a problem file. This problem file is then compiled and the JSHOP engine is invoked in a separate planning execution process. This architecture allows for the ability to spawn separate processes for each planning problem in one or more domains. When the plan is returned, the Commander Federate then issues appropriate interactions to other federates to execute the plan.Figure  SEQ Figure \* ARABIC 10: Planning Sequence DiagramExample: Planning Formation AdjustmentsConsider as an example a Battle Group Formation in transit. See  REF _Ref143078135 \h  \* MERGEFORMAT Figure 11. There is a high value unit (HVU -blue diamond) surrounded by a protective screen of surface combatants (blue triangles). Each screening surface combatant is assigned a patrol sector (the area shown in black outline). The dashed blue arrow represents the motion vector (course and speed) of the entire formation. Once a participating federate (such as BFEM, representing the USWC in Figure 3 above), detects and reports a threat submarine (shown in red on Figure 11 below), it issues a contact report. Figure  SEQ Figure \* ARABIC 11: Initial FormationAs shown in  REF _Ref114978332 \h Figure 12, the Jess engine is updated with the contents of the contact report and then initiates the planning process.Figure  SEQ Figure \* ARABIC 12: Triggering the PlannerThe planning task hierarchy specific to this example formation change domain is illustrated graphically in  REF _Ref145319279 \h Figure 13.Figure  SEQ Figure \* ARABIC 13: Formation Change Task DecompositionEach blue block represents a method that can be decomposed into smaller tasks. Yellow boxes represent the primitive operations that become steps in the plan. When viewing the figure, keep in mind that it shows how higher horizontal level tasks of the diagram are decomposed into subtasks below it at the lower horizontal levels of the diagram. A description of the action taken by the planning process follows. First, the Commander Federate evaluates submarine contact report and simulates a command decision as to whether or not the submarine is a threat to the formation. If the threat submarine is indeed a threat (i.e., can be expected to get into position to conduct an attack), the planner first calculates the new formation speed (usually faster) and/or course (usually a bold turn) to place the submarine in a less threatening position (i.e., one from which it cannot attack the formation). Next, the planner determines whether a submarine attack unit (SAU) should be detached to prosecute the threat submarine and, if so, determines the composition of the SAU. If/when the SAU is dispatched, the planner makes the required adjustments to the formation, given the detached assets.  REF _Ref144027136 \h Figure 14 shows that in the illustrated example, two surface combatants are assigned to the SAU and detached. Subsequent to the detachment of the SAU, the remaining surface combatants in formation need to be reassigned to sectors that will afford the HVU the most protection given the remaining assets assigned to protect the HVU. In the operational example, it was stipulated that neither the HVU, nor its closest escort would be assigned to the SAU, but this is consistent with command decision making in similar situations.  REF _Ref143324146 \h  \* MERGEFORMAT Figure 15 shows both the resultant new formation sectors in green and the new formation motion vector (course and speed) in blue. The planning process is completed when it returns a sequence of steps to the Commander Federate.Figure  SEQ Figure \* ARABIC 14: Submarine Attack Unit AssignedFigure  SEQ Figure \* ARABIC 15: Resultant Formation Note: Regarding the operational formation example in figures 11-15 above; Sector assignments, spacing, ranges, speeds, and other values are provided for conceptual understanding only. No conclusions or inferences should be drawn about actual operations or capabilities. Mapping Plan Output to InteractionsPlan execution is carried out through orders (interactions) issued by the Commander. The Commander Federate receives the plan as a sequence of steps. Plan steps are then mapped to interactions that are issued by the Commander Federate to other federates to carry out. Since the AIMS federation included NSS, we adopted several interactions from an existing FOM that NSS was designed to accept. An example of the mapping of plan steps to interactions is shown in  REF _Ref143325380 \h Table 1.Plan StepInteractionNew formation course and speedPIM_Track (Name, Category, Num_Waypoints, Leg(s))SAU assignmentsPIM_Track (Name, Category, Num_Waypoints, Leg(s))New formation sectors and assignmentsScreen_Kilo (Name, Number_Units, CenterRange, CenterBearing, Screen_Kilo_Unit)Table  SEQ Table \* ARABIC 1: Plan to Interaction MappingFuture WorkOur future work will involve the addition of other Commander Federate responsibilities involving warfare analysis capabilities such as general force motion, motion plans for sensor usage optimization, and/or producing other water/air management assignments. In doing so, we will investigate other intelligent technologies including case-based reasoning, Bayesian networks, and genetic algorithms. Adaptive control algorithms will also be examined for use in setting parameters such as the aggressiveness of the Commander Federates actions from one run to the next. Usage improvements with regard to the Single Point of Entry for scenario information will expanded to other simulations besides those existing for BFEM and NSS. Last, performance optimizations will also be investigated.Summary This paper presented implemented changes to the APL Integrated Multi-warfare Simulation (AIMS) Commander Federate that occurred over the last year of a four year project. The Commander Federate simulates the commander’s decision process by employing an expert system and intelligent planner in integrated or stand-alone warfare areas to proactively construct a plan based on observed simulation events.AIMS provides a flexible architecture to conduct analysis on the execution of integrated warfare in multiple mission areas. AIMS continues to offers several advantages. First, it eliminates sequential, time-consuming data transfers between “stove-piped” single-warfare analysis simulations when conducting multi-warfare studies. Second, it enhances integrated warfare analysis through selective use of appropriate simulations which have been used in individual warfare area analyses. Third, it focuses several warfare areas to a common scenario selection across all warfare areas. Fourth, it preserves the ability for each model to be used in a stand-alone mode. Fifth, it streamlines development of three-dimensional visualization of common OPSITs/TACSITs. Last, the Single Point of Entry reduces duplication of effort and data entry errors by using a single interface for scenario creation.AcknowledgementsThe authors would like to thank the management of the National Security Analysis Department, The Johns Hopkins University / Applied Physics Laboratory for their support in funding this research.References[1]	Dr. Joseph Kovalchik, et. al., An Interoperable Multi-Mission Warfare Federation for Analysis, Proceedings of the Fall 2003 Simulation Interoperability Workshop, October 2003  [2]	Dr. Joseph Kovalchik and Mr. Jonathan W. Labin, APL Integrated Multi-warfare Simulation (AIMS): Providing Resource Conflict Resolution in Multi-Warfare Analyses, Proceedings of the Spring 2006 Simulation Interoperability Workshop, April 2006. [3]	Jess, The Rule Engine for the Java Platform,      HYPERLINK "http://herzberg.ca.sandia.gov/jess" http://herzberg.ca.sandia.gov/jess, Ernest J. Friedman-Hill, Distributed Computing Systems, Sandia National Laboratories, Livermore, CA, Version 6.1p8 (23 March 2005).[4]	NRC FuzzyJ Toolkit for the Java(tm) Platform, User's Guide, Version 1.5a, Integrated Reasoning Institute for Information Technology, National Research Council Canada, R. A. Orchard , May 23, 2003.[5]	O. Ilghami and D. S. Nau. A general approach to synthesize problem-specific planners. Tech. Rep. CS-TR-4597, UMIACS-TR-2004-40, University of Maryland, October 2003. [6]	Okhtay Ilghami, Documentation for JSHOP2, Technical Report CS-TR-4694, University of Maryland, February 10, 2005Author BiographiesDR. JOSEPH G. KOVALCHIK is a Principal Professional at the Johns Hopkins University Applied Physics Laboratory. His experience spans both academia as Chairman of the Computer Science Department, U.S. Naval Academy and industry, as Director of Software Development. While at JHU/APL, he has been involved in the development of automated reasoning systems and is currently a member of the Modeling and Simulation Group. Dr. Kovalchik received a B.S. degree in Mathematics from the U.S. Naval Academy and an M.S. and Ph.D. degree in Computer Science from the Naval Postgraduate School, Monterey, CA.MR. JONATHAN W. LABIN is a Software Engineer at the Johns Hopkins University Applied Physics Laboratory. Mr. Labin has developed several HLA federations including the Human Exercise Federation. In addition, he has evaluated several commercial RTIs with respect to their compliance with regard to both HLA 1.3 and HLA IEEE 1516 standards. In 2003, he received a degree Magna Cum Laude in Computer Science at the University of Maryland Baltimore County.MR. ERIC R. ROSENLOF is a Senior Professional at the Johns Hopkins University Applied Physics Laboratory. He is a retired naval officer with command at sea experience. At JHU/APL, Mr. Rosenlof is an undersea warfare analyst assigned to the Assured Access Group within the National Security Analysis Department. Mr. Rosenlof received a B.S. degree in Oceanography from the U.S. Naval Academy, Annapolis, MD., a M.S. degree in Oceanography & Meteorology from the Naval Postgraduate School, Monterey, CA., and a M.A. degree in National Security and Strategic Studies from the U.S. Naval War College in Newport, RI.Approved for Public Release: Distribution is Unlimited