Fielding an Extensible After Action Review System To Support JCOS and STOWLizann MesserschmidtKeven RingThe MITRE Corporation1820 Dolley Madison Blvd.McLean, VA 22102lizann@mitre.org, keven@mitre.orgKeywords:AARS, Data Collection, Java, LDIF FOM, RTIABSTRACT:  The After Action Review System (AARS) that was used to support analysis of simulated excursions conducted during the Synthetic Theater of War (STOW) 98 Event was an extension of the AARS developed for the Joint Countermine Operational Simulation (JCOS). In JCOS, the AARS was used to process simulation run excursions that were conducted using DIS in support of the Joint Countermine (JCM) ACTD.  In STOW, the same AARS was used to process federation excursions that were run using RTI_S.  There are two aspects of the AARS that contribute to its extensibility.  First, the infrastructure is based on a three-tiered architecture that supports accessing the data from a simulation neutral object based format. The three-tiered architecture includes a repository, agent and application layer.  The AARS  processes data, represented in an object model(FOM/SOM), using a common logger data interchange format (LDIF).  Once in LDIF, the data is loaded into the repository in a simulation neutral object based format that abstracts the simulation specific details from the agent and application layers.  Secondly, the AARS has been developed using web-based technology with most of the source code developed in Java.  This enables the run-time environment of the AARS to be extensible across multiple platforms. This paper will address the extensibility aspects of the three-tiered architecture that were fundamental to the success of supporting both the STOW and JCM ACTD programs.  It will also address efforts to support a portable run-time environment across multiple platforms.1. OverviewThe Joint Countermine Operational Simulation (JCOS) After Action Review System (AARS) provides post-execution analysis of simulation data.  It was developed in support of the Joint Countermine (JCM) Advanced Concept Technology Demonstration (ACTD) and has supported after action review of  mine/countermine operations, as simulated using the Semi-Automated Forces (SAF) suite of simulations (ArmySAF, NavySAF, MCSF, AirSF).  During fiscal year 1998, the JCOS AARS was adapted and used to support analysis of the Synthetic Theater of War (STOW) 1998 Event.  The AARS includes components that support the after action review process from exercise planning to battle outcome assessment and playback.Early in fiscal year 1998 plans commenced to re-engineer the JCOS AARS to support assessment of data collected from either a Distributed Interactive Simulation (DIS) or High Level Architecture (HLA) run-time environment.  At that time, it was uncertain whether the JCOS SAF suite of simulations would be run in DIS or HLA.  In preparation to accommodate analysis requirements for either run-time mode of operation, the AARS architecture was re-engineered with a  focus on providing a generic and flexible solution [1]. The re-engineering effort was based on adopting a three-tiered architecture. The three tiers include a repository, agent, and application layer (Figure 1).  The data is stored in the repository in an object based, simulation neutral format. It is populated through a translation process that reads the archived simulation/federation data, which has been stored according to a standard Logger Data Interchange Format (LDIF) [2].   The specification for the LDIF provides a common means to allow transfer of recorded data, independent of the federation, to the analytic repository.Figure 1.  AARS Three Tiered ArchitectureThe agent layer has visibility to the objects and attributes in the repository and acts as the broker to request and return data to the application layer.  Agents can be more easily constructed since simulation specific details have been incorporated as attributes/parameters of the objects/interactions in the repository.  For instance, a simulation specific function to get the “name” of an entity is no longer necessary since “name” can be included as an attribute of the entity object.   The suite of agents currently implemented provides analysis products such as killer-victim scoreboards, losses over time charts, firing accuracy tables, countermine measures of effectiveness and mine detection and neutralization tables.The application layer provides the user interface to spawn the agents that access the repository. The application layer is implemented through a web browser and includes five functional components that provide the interface to the agent layer.  These five components include: Exercise Preparation and Planning, Data Preparation and Extraction, Performance Evaluation, Data Analysis and Plan View Display (PVD).The supporting infrastructure that comprises the three tiers has been primarily developed in Java (the repository and agent layers are 100% Java and the application layer is a series of Java Applets, HTML pages, shell scripts, and Common Gateway Interface (CGI scripts).  As a result, it can be hosted on any platform with a Java Virtual Machine (JVM).  This provides a platform independent run-time environment.The re-engineering of the JCOS AARS during Fiscal Year 1998 provided a robust, simulation neutral, platform analysis tool.  The end result is an infrastructure that can used by other simulations/federations to support after action review.  In fact the JCOS AARS was used to support assessment of the STOW 98 Event.  This paper will address the specific factors that supported the extensibility of the JCOS AARS architecture and run-time environment to enable reuse between JCOS and STOW.    2.  Infrastructure ExtensibilityInitially, the JCOS AARS three-tiered architecture was used to support analysis of JCM ACTD simulation runs.  The JCOS simulation runs were executed in a DIS environment.  DIS logger files generated using the ModSAF logger, were translated into LDIF and loaded into the repository.  Analytic agents were executed and analysis products reviewed.  Shortly after completing support for the JCM ACTD and within a few months, the JCOS AARS was adapted to support after action review for the STOW 98 Event.  The STOW Event was executed using the STOW Run-time Infrastructure (RTI-S).  For STOW, RTI-S translated LDIF files were used to load the repository.  The same analytic agents were executed and analysis products reviewed.  There were several factors that contributed to the  success of leveraging the existing JCOS AARS to support STOW.  These factors included:The capability to load the repository from a logged simulation data file that had been recorded according to a standard format, LDIF, and was simulation neutral. Once the data was represented in a simulation neutral form, LDIF, the three-tiered architecture provided a framework that was easily re-used to support simulation neutral analysis.  For JCOS and STOW analysis objectives were similar, which meant that existing agents could be used with only minor modifications required.  Modifications were localized primarily to the simulation specific components.  These included the LDIF translator and the mapserver, which supports 2-D playback. Application of LDIFThe LDIF specification was developed to provide a standard, generic format that could be used to populate the repository with federation and non-federation data. Non-federation data can include simulation data not shared in the federation but privately exchanged within the federate and required to support analysis.  The LDIF specification provides a format to identify the mapping of an object model representation of the data, specified in an Object Model Template (OMT) Data Interchange Format (DIF) [3], with data collected during the federation run.  The LDIF can then be used to support data interpretation in a post-processing mode.  It does not mandate or constrain the mechanism for collection. The OMT DIF provides the common basis for parsing the data independent of RTI execution (Figure 2).  The LDIF compliant intermediate file can then be used to support generic importation of the repository.Figure 2.  Generic LDIF ExportationA key to successfully supporting interpretation of the LDIF independent of simulation/federation details includes the requirement that all data types in the object model be clearly specified.  Opaque data types such as “any” will prohibit this capability. For JCOS, the object model that was used to support generation of the LDIF was an analysis object model (AOM).  An Object Model Development Tool (OMDT) was used to prepare the JCOS AOM and generate the AOM in OMT DIF.  It was developed to support identification of the objects and interactions that would be required to support analysis.  The JCOS AOM consists of Entity, Mines, Minefield, Breach and Area Overlay Objects and Weapons Fire, Munitions Detonation, Mine Detection, Mine Neutralization and Minefield Detection Interactions.  A DIS to LDIF translator was developed to create the LDIF that was used to populate the repository with the DIS data.  This translator interpreted a ModSAF DIS log file and used the JCOS AOM as the object model to generate the LDIF.  The resulting LDIF was simulation neutral (Figure 3).Figure 3.  JCOS DIS to LDIF ExportationFor STOW, the RTI-S logger incorporated the capability to generate an RTI-S LDIF file.  However, the STOW FOM, that was used to create the RTI-S LDIF, included some ambiguous data types. For instance, Signal Interactions included a data type of “any” for the data parameter.  The data parameter is transmitted as bits, but contains no method to specify how to interpret the bits.  This would preclude population of the repository in a generic form since simulation specific knowledge is required to interpret the Signal data.  In this case, an RTI-S to LDIF translator was developed to parse the simulation specific data and generate a pure LDIF compliant file.  The JCOS AOM was used as the object model to generate the LDIF to maximize reuse (Figure 4).  This was possible since the STOW and JCOS data were similar in structure. The resulting LDIF, generated from the RTI-S to LDIF translation, was similar to the LDIF generated from the DIS translation.  Figure 4.  STOW RTI-S to LDIF Exportation2.2  Aspects of Architecture ExtensibilityFor both JCOS and STOW, the resulting LDIF was then used to load the repository.  The repository layer serves as the data warehouse and includes the administration functions required to archive, manage and retrieve the object-based information.  The repository layer required no changes to support STOW assessment.  Once the repository was loaded, analysis agents were run and analytical products produced.  Since the SAF simulation infrastructure and analysis objectives for JCOS and STOW were similar, the basic suite of agents used to generate the analysis products and applications used to display results were completely re-useable. There were no additional modifications or adaptations to the three-tiered infrastructure required to support STOW. 2.3  Adaptations to Support STOWThere were adaptations to the simulation specific components that were required to support STOW.  These components included the LDIF translator, and the mapserver that supports PVD playback.  Additionally there were some performance modifications implemented for STOW to optimize processing speed but these changes automatically extended to JCOS as well.  Translator ModificationsThe RTI-S LDIF generated by the RTI-S logger uses  the STOW FOM as the object model.  The STOW FOM used for the STOW 98 Event included opaque data types such as ‘any’.  Simulation specific details and functions are required to parse and interpret this information. There was an additional translation process required to support translation of these opaque data types.  With the emphasis on re-use of JCOS AARS development, it was determined that the optimal design for the RTI-S LDIF to LDIF translator would be to generate an LDIF file similar if not identical to the LDIF generated during the DIS to LDIF translation.  Additional functionality was required in the translator to accommodate managing data persistence in the RTI-S case.  In the DIS case each update includes a complete set of attribute updates.  In the RTI-S case, only those attributes with current changes are included in the update. For instance, an entity update in a DIS mode includes updates of all entity attributes.  When an entity’s appearance changes, the entity location at the time of the appearance change is automatically included in the update.  In the RTI-S case if the entity appearance changes, the update will not include location if the location has not changed since the last update.  This information is used in the agent processing of the killer-victim scoreboard.  In order to maximize re-use of the existing analysis agents, this persistence was incorporated in the translation of the RTI-S LDIF to LDIF.   In the future, the repository can be updated to support a more sophisticated query process of retrieving and managing full object state reconstitution.During the STOW mode of operation it was possible that federates might need to resign and subsequently rejoin the federation.  A method to track entity uniqueness was required to insure that entities would not be double counted as federates re-joined the federation.  A process was established for STOW, to track entity uniqueness by the entity marking, country, service attributes.  The provision to manage the uniqueness was incorporated in the translator.Formerly the terrain areas used to support JCOS were single cell terrain databases.  STOW used a multi-cell terrain database.  Coordinate transformations were incorporated in the translation process to support the multi-cell terrain database conversions. Mapserver ModificationsThe other simulation specific AARS component that required modifications to support STOW included the mapserver.  The mapserver is the component of the AARS that generates the display of the terrain area to support the 2-D playback.  The mapserver required extensions to support generation of a multi-cell terrain database. The extensions to the mapserver accommodated generation of both multi-cell and single cell maps.  The mapserver extensions made to support STOW could also be used by JCOS. 3. Run-time PortabilityThe primary development of the AARS was implemented in Java and run on Silicon Graphics (SGI) Indigo2 hardware platforms with R10000 processors. The AARS processing for JCOS was supported solely on SGI platforms.  There were performance issues with the speed of the LDIF translation process, and repository loading and retrieving which were developed in Java.    There was a significant effort extended to investigate areas to improve performance.  Since much of the AARS was developed in Java portability to PC based platforms with faster processors was explored. On the SGI development there were improvements made to the Java translation, repository loading and retrieving.  Initially, the repository loader imported up to 3,000 events per minute on an Indigo2 R10000 processor.  For a scenario with approximately 150 entities this was equivalent to real time (e.g. a one-hour log file with approximately 150 entities would take one hour to load).  Once the performance enhancements were implemented on the repository loader, the performance was doubled.  Performance for accessing the data from the repository was improved by a factor of five.  In spite of the improvements, performance on the SGI was still a factor to be addressed.  The next option was to explore portability to a PC-based platform.It was anticipated that the data processing requirements to support processing the STOW runs would be substantially more significant.  In preparation to support processing the STOW runs, the portability of the repository infrastructure was tested. It was transitioned to a 450MHZ Windows NT platform.  Since the repository source code was written in Java, which is a platform independent  language, the transition was effortless.  The performance improvement was significant.  An additional improvement of approximately a factor of 6 was demonstrated.  For instance, the example one-hour log file referenced in the previous paragraph could now be loaded in approximately 5 minutes on the 450MHZ Windows NT platform.The remainder of the AARS web infrastructure (shell scripts, support utilities developed in “C”, and CGI scripts) is being ported to support a run-time environment on a PC platform.  This effort is nearing completion as this paper is being written.  The majority of the Java infrastructure was easily ported.  There were some differences between the SGI and PC platform with the implementation of Java Abstract Windowing Toolkit functionality.  In these cases the code was modified to implement a functionality that could be used by both the SGI and PC platforms.   During the development for JCOS, the AARS employed web-based technology and included incorporation of Unix specific functions (symbolic links, shell scripts, etc.) to provide a seamless connection to the component processes.  In order to adapt the AARS to support full implementation on a Windows NT platform, Unix specific functions are being replaced with platform independent solutions.  The two simulation specific components of the AARS, the translator and the mapserver, which are written in C and tightly coupled with the SAF libraries, will execute on a PC platform running under the Linux operating system.4.  SummaryThe re-engineering of the JCOS AARS to provide an extensible analytic tool that supports analysis in a simulation neutral object based format has proven effective.  This can be demonstrated by the application of its utility and versatility to support the analysis objectives for both JCOS and STOW.   The modifications that were required to adapt from the JCOS implementation to support STOW were localized and easily effected.  The LDIF provides a common format for data specification that would enable other simulations/federations the opportunity to re-use the JCOS AARS.  The portability of the Java run-time environment provides an opportunity to leverage a diversified set of hardware platforms.  Further developments are being pursued that include extensions of the AARS to support real-time analysis and continued development of an agent macro language that would enable analysts to configure customized queries of  the object based repository. 5. References[1] Opper, Jeff; Messerschmidt, Lizann; Ring, Keven; Van Metre, Patrick; Gates, Barbara; Bero, Brian; “A Common Object Repository For Simulation Analysis”, 1997 Fall SIW Conference, 8-12 September 1997. [2]	Ring, Keven; Messerschmidt, L.:  “A Federation-Neutral Interchange Specification for Logged Simulation Data” 1998 Fall SIW Conference, 14-18 September. [3]  “High Level Architecture Object Model Template V1.3 Draft”, IEEE, 5 February 1998. Author BiographiesLIZANN MESSERSCHMIDT is a Lead Simulation Modeling Engineer at the MITRE Corporation, Reston, VA.  She is the lead technical manager responsible for providing technical oversight to MITRE’s JCOS efforts including the AARS.KEVEN RING is a Senior Software Systems Engineer at the MITRE Corporation, Reston, VA. He is the lead software engineer responsible for the AARS development and supports other technical areas on the JCOS project. 