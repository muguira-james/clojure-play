A Low Risk Approach to Federating Legacy SystemsMatthew CalefLockheed Martin Information SystemsAdvanced Simulation Center37 North AvenueBurlington, MA 01803(781) 505-9549 HYPERLINK mailto:jbergent@lads.is.lmco.com mcalef@lads.is.lmco.comDean Ringressy    System Integration & Research, Inc.    1512 Technology Drive, Suite 101    Chesapeake, VA 23320(757) 436-0377 HYPERLINK mailto:maassel@visitech.com dringressy@sirinc.com Wayne CivinskasLockheed Martin Information SystemsAdvanced Simulation Center37 North AvenueBurlington, MA 01803(781) 505-9530wcivinsk@lads.is.lmco.com Keywords:HLA Compliance, Legacy System, Gateway, Middle ware, Native ChangesABSTRACT: Federating a legacy system can incur development risk that increases with the complexity of the system being federated.  There are three widely recognized approaches to federating a legacy system.  These are a) using a gateway b) developing middle ware and c) making native changes to the software.  The benefit of each of these approaches is proportional to the risk incurred.  However, by using a combination of these approaches, risk can be greatly reduced while the benefits of having a federated system can be fully realized.This paper examines this thesis within the context of the Navy's effort to federate the Battle Force Tactical Training (BFTT) system. The BFTT system consists of many different subsystems connected via a DIS network.  Federating the BFTT system starts by installing a gateway, which recognizes the entire DIS network as a single federate. This non-intrusive, low risk, first step achieves HLA compliance and provides an environment where the subsystems can be federated incrementally.  By embedding middle ware into a component that is common to all the BFTT subsystems, each of the subsystems can then be recognized as a federate.  Once every subsystem has been recognized as a federate via middle ware, native changes to subsystems can be made.This method of using multiple approaches eliminates the scenario where multiple disparate systems need to be federated before HLA compliance can be achieved, while at the same time, takes full advantage of HLA compliance.1. Statement of the General ProblemThe Department of Defense (DoD) has mandated that all DoD simulation systems become compliant with the High Level Architecture (HLA) within the next few years.  This mandate means that simulations systems must satisfy the following three requirements.  First, that the simulation system conforms to the HLA rules.  Second, that the simulation system documents the way in which it performs its simulation and interacts with other simulations by using the Object Model Template (OMT).  The document that describes how a simulation system represents the world is the Simulation Object Model (SOM).  The document that describes how the simulation system interacts with other simulation systems is called the Federation Object Model (FOM). Third, that an HLA compliant Runtime Infrastructure (RTI) is used to provide communication between simulation systems.  Once a system is compliant with the HLA it is called a federate. A collection of federates that communicate by using the same FOM is called a federation.1.1 Legacy SystemsNew simulation systems under development can be designed to take these three requirements into account.  Existing systems that are already in place (legacy systems), on the other hand, must be changed to conform to these requirements.  It can be hard to figure out exactly what changes need to be made, and harder still to bring these changes about.  This paper will discuss how to make legacy systems HLA compliant by making gradual changes that do not incur large development risks.1.2 Ideas of FederationsThere is more than one path to HLA compliance.  What gives rise to these multiple paths is a freedom in recognizing federates.  A given simulation system can be recognized as a federate as a whole, or it can be broken into subsystems and each subsystem can be recognized as a federate.  The classic example is a distributed simulation system implemented as different subsystems communicating over a network.  One can recognize the entire system as one single federate or one can recognize each subsystem as a federate.  If each federate, whatever it may be, conforms to the HLA rules, is documented in accordance with the OMT, and uses an HLA compliant RTI then HLA compliance for that simulation system has been achieved.1.3 Existing SolutionsThis freedom has given rise to several different widely recognized solutions for achieving HLA compliance. These different methods apply primarily to distributed systems connected via a network, and correspond to the different ways a simulation system can be recognized as a federate.  These methods are, first, using a gateway, second, using middle ware, and third making native changes.1.3.1 GatewayA gateway achieves HLA compliance by recognizing the entire simulation system as a single federate.  One a practical level a gateway is oftentimes a single computer that is hooked into the simulation network.  It listens to traffic on the network and retransmits that information using the RTI.  It also receives information from the RTI and transmits it to the network.1.3.1.1 BenefitsThe primary benefit of a gateway is that it does not require any modifications to the simulation system that is already in place, nor does it require an understanding of the subsystems that make up the simulation system.  All it requires is an understanding of the network protocol used by the different subsystems to communicate with each other and the FOM that the legacy system will use to communicate with other HLA compliant systems.  Gateways are the easiest of the three options to develop.  And, if a gateway is built well, can often be used with other legacy systems and other FOMs with minimal changes.1.3.1.2 DrawbacksA gateway also has some drawbacks.  First it is a single point of failure.  If the gateway stops functioning due to a software crash, a hardware failure or a power loss.  The legacy system is completely cut off from the rest of the federation.  Second it can be a bottleneck.  All the information about the simulation needs to pass through this gateway. This can place large performance requirements on the gateway.  Third, because the entire simulation system is recognized as a single federate, some of the interest management services an RTI provides cannot be used to full effectiveness.  Two of these interest management services are Data Distribution Management (DDM) and Declaration Management (DM).DDM works by selecting certain variables that are relevant to the simulation in a general way and creating a Cartesian space with these variables as dimensions.  Regions are created in this space.  These regions are used to publish to or subscribe to certain classes of objects in the simulation.  As an example a federation can have a space that consists of latitude and longitude.  Each federate can publish or subscribe to regions in this space, thus selecting what sections of terrain contain interesting information.  In more concrete terms a federate can request to be informed about ground entities in Kansas while another can publish information about Air entities in Alaska.  This provides a powerful way to route information directly to federates that care while not bogging down federates that do not with information that is not needed.  DM works by selecting only certain classes of vehicles that the simulation can publish or subscribe to.  Like DDM, DM provides a way for each federate to be specify what sort of information is desired and not receive information that is not desired.These two services are problematic when using a gateway for two reasons.  First, Interest management cannot be performed per subsystem it must be performed for the simulation system as a whole.  If one subsystem needs certain information then the gateway will subscribe to it using interest management.  Because the gateway and not the subsystem did the subscription the entire network is exposed to this information.  This result is that every subsystem has to process all the information that any subsystem requested.  The second reason that interest management can be difficult with a gateway is that the gateway has to know the subscription interests of the simulation system.  Many legacy systems were not built with the notion of interest management in mind and do not transmit this information to the network that the gateway is connected to.  In this case one of two things must happen. First the legacy system must be changed to transmit subscription interests to the network. Second the gateway must intuit the subscription interests of the simulation system based on the information that legacy system does transmit to the network and any data files that that gateway can read in as it is running.  Both of these options make a gateway more complicated to implement.Another drawback to a gateway is that, because it recognizes the entire network as a single federate, the SOM must include all the subsystems on the network. Every time a component on the network is added or removed the SOM must be changed to reflect this. 1.3.2 Middle wareMiddle ware achieves HLA compliance by re-implementing a well-defined interface that the simulation system or subsystems are using for communication with software that uses the RTI.  This approach allows for each subsystem that is using this interface to be recognized as a federate.1.3.2.1 BenefitsOne of the benefits of middle ware is that it can take advantage of a interest management more fully than a gateway.  This is possible because each subsystem that is a federate has its own RTI and is capable of performing interest management on its own.  The problem of a single system performing interest management for an entire simulation system is gone. The next benefit is that the middle ware only needs to understand the simulation system at the level of the interface that it is re-implementing.  If that interface is fairly simple than the middle ware can be fairly simple.  Lastly if this interface is common to many different subsystems then performing this change once allows all subsystems that use this interface to become federates.  This allows a single solution to be used effectively for many problems.1.3.2.2 DrawbacksThe most notable drawback to middle ware is that the legacy system has to be changed.  This intrusion into an existing software system incurs risk.  Any development project that modifies an existing and complicated piece of software has the risk of introducing new bugs, or in a worst case scenario failing to produce a working piece of software.  Another drawback to middle ware is that finding this interface that allows the existing legacy system to communicate is not always easy.  Many legacy systems have multiple interfaces that are used to communicate.  Some legacy systems are written poorly and do not have well defined interfaces, making the job of implementing a middle ware solution difficult.  Lastly middle ware provides benefits that are tied to the effectiveness of the interface or interfaces being re-implemented.  Like a gateway, middle ware is only going to be aware of the simulation systems interest management needs to the extent that they are expressed through the interface being re-implemented.1.3.3 Native changesMaking extensive changes to the legacy system so that the RTI and concepts of the HLA are embraced by the legacy system also achieves HLA compliance.  This called making native changes1.3.3.1 BenefitsThe immediate benefit is that the legacy system is HLA compliant and there are no networking or interface issues to work out.  Performance is only limited by the speed of the legacy system and the RTI.  The resulting system takes full advantage of every service that the RTI has to offer1.3.3.2 DrawbacksThis approach is the most risky of the three.  The changes that need to be made to the legacy system are very intrusive.  Much of the legacy system needs to be changed to work around the concepts and interfaces that the RTI provides.  The feasibility of making these changes needs to be seriously examined.  Starting a project of this size will assuredly introduce new bugs and problems.  Another drawback is that native changes also require that the internals of the legacy system be tightly bound to the HLA.  There is no longer a boundary between what is code to handle HLA related issues and what is legacy code.  For many projects it is wise to maintain an existing interface that isolates the RTI from the rest of the legacy system.1.4 Relationship Between Benefit and RiskWith these approaches there is a clear correlation between the risks and the benefits involved.  The gateway is a very low risk approach to achieving HLA compliance, however it only allows minimal access to the benefits the HLA offers, and it can act as a single point of failure or a bottleneck.  Middle ware provides more access to the benefits of the HLA, but it is intrusive, and incurs some development risk.  It is also limited by the interface that it is re-implementing.  Native changes to the legacy system take full advantage of all that the HLA has to offer but at the cost or re-architecting large sections of the system, which can incur considerable risk.1.5 A General Solution to the ProblemFaced with this correlation between risk and benefit, choosing a path towards HLA compliance can seem difficult.  However, by using a combination of these approaches one can de-couple the risk and benefit in the path towards HLA compliance.  By using a low risk approach initially HLA compliance can be achieved quickly.  This removes the time constraints on HLA compliance and allows other higher risk approaches to be explored gradually at a later point.  This also eliminates the scenario where HLA compliance is only achieved after an intrusive and large-scale effort is completed. 1.6 ExampleHere is an example of how this approach could be used make a legacy distributed simulation system HLA compliant. 1.6.1 Phase 1: Using a GatewayInitially one would install a gateway and label the entire distributed simulation system a system-wide federate.  One would develop a SOM for this one large federate.  Minimal concern would be paid to the interest management services the RTI provides. Once this task is completed the system is HLA compliant.  The HLA mandate has been satisfied and no further effort needs to be made.1.6.2 Phase 2: Using Middle wareIf this system is required to interact with other HLA compliant systems then there could be a need to make better use of the RTI interest management services.  At this point some analysis would be done to evaluate where best to insert the RTI.  As the RTI is inserted into different subsystems, these subsystems becomes federates with their own SOMs.  The system-wide federate that was developed in the initial phase of the effort would still exist but would be modified as subsystems are removed to become their own federates.  The SOM for the system-wide federate would be changed accordingly.  When each subsystem is finally recognized as its own federate, most of the benefits of the HLA would be realized.1.6.3 Phase 3: Making the System HLA NativeIf, at a later point, the legacy system was being re engineered and the interfaces and concepts of the HLA were selected as the basis for the architecture then the legacy system could become natively HLA compliant.  By the time this effort has begun, there would be considerable experience working with the HLA.1.7 Risk – Benefit AnalysisThis method of combining different approaches offers several benefits. First it reduces risk by achieving HLA compliance initially and then allowing incremental changes.  Second it is extremely flexible.  After an initial HLA compliance has been achieved, any further effort is a useful and an end in itself.  Third it offers an iterative development model.  The HLA provides many new concepts that are not familiar or easy to grasp at the outset.  By iteratively solving this problem, familiarity with the RTI and the concepts of the HLA are gained and experimented with, lessons learned while developing a gateway are applicable to developing middle ware of making native changes. 2. BFTTThe Navy’s Battle Force Tactical Training (BFTT) system is undergoing an improvement effort.  Part of this improvement effort is to make BFTT HLA compliant.  The method of using multiple approaches to achieve HLA compliance is the basis of a plan to bring BFTT into compliance with the HLA.   2.1 Goals of BFTTThe goal of the BFTT program is to provide an embedded system for navy personnel to train in the environment they work in.  The training is accomplished by generating a synthetic battlespace and hooking the ship’s sensors into this synthetic battlespace.  As a scenario in the battle space evolves the sensors (radar, sonar, ESM) are stimulated such that the entities in the synthetic battle space appear real to the sensor systems.  The consoles attached to the sensor systems will then present information about the entities in the virtual world just as if the ship were involved in a real combat situation. The training goals are to generate scenarios that contain up to 2000 entities, integrate several ships into an exercise and provide minimal down time.  The system goals are to integrate the different existing systems into a coherent whole and provide a system architecture that allows new systems to be added. 2.2 BFTT subsystems BFTT consists of many different subsystems that were developed at different points in time by different programs.  The program office that is engaged in the BFTT improvement effort controls some of these subsystems, but not others.  Those that are not under the control of the program office cannot be changed during the BFTT improvement effort.  Each of these subsystems differs in what aspects of the simulation it engages in and how it interacts with the simulation.  Here is a partial listing of the subsystems that make up BFTT.GNSS: Genereic Sim/Stim, currently provides simulation/stimulation for 13 different systems. BEWT: BFTT Electronic Warfare TrainerRESS: Radar Enviromental Simulator SystemSSDS MK I: Ship Self Defense SystemTWCS: Tomahawk Weapons Control SystemHET: Harpoon Embedded Trainer SQQ-89 ASW OBT: Anti-Submarine Warfare On Board Trainer	CTA: Cooperative Engagement Capability Trainer AdjunctLink 11 Sim/Stim	: Naval tactical communication systemLink 4a Sim: Naval tactical communication systemSMMTT	N: Submarine Multi-mission team trainerAMN: Air Management Node, provides detailed FWA behaviors.GFCP: Generic Front-end Communications  processorJMCIS: Joint Maritime Command Information SystemJSAF: Joint Semi-Automated Forces, provides engine that drives the synthetic battle space.BOPC: BFTT Operator Processor Control, provides the controls for BFTT2.3 Current BFTT ConnectivityThere are three main networks that connect the BFTT subsystems together.  These are the client/server LAN which is used for system initialization and control, the Data Collection Module (DCM) LAN which is used to monitor performance during an exercise and the BFTT STOW LAN which is used to convey simulation information between different BFTT subsystems.  The BFTT STOW LAN currently uses the DIS protocol.2.4 A Solution for BFTTAny plan to make BFTT become HLA compliant must take into account the complexity and variety of the subsystems that make up BFTT.  For this reason the initial plan to make BFTT HLA compliant is based on the method of using multiple approaches as outlined above. 2.4.1 Phase 1: Use a GatewayThe JSAF simulation engine that is being used with BFTT currently uses the RTI and the FOM from DARPA’s STOW program.  The rest of the BFTT subsystems are communicating via DIS on the BFTT STOW LAN.  Getting these two systems to communicate initially will be done via a gateway.  JSAF, which is already HLA compliant will be a federate and the BFTT STOW LAN along with the gateway will become another federate.  Each of the two federates will have their own SOM.  These two federates will form the beginning of the BFTT federation.  At this point the BFTT system will have achieved HLA compliance and no further effort will need to be made.The motivation to continue comes from the requirement that BFTT support 2000 entities.  An entity count that high requires the use of interest management.  Unless the gateway is constructed so as to intuit the subscription interests of the BFTT subsystems or the subsystems are changed to transmit their subscription interests, interest management will not be possible.2.4.2 Phase 2: Use Middle wareThe need for interest management drives the next step in the HLA compliance plan, which is to embed middle ware into some of the BFTT subsystems.  Many of these subsystems use a common module to connect to the DIS network.  This module is the Training Data Link (TDL) and because it is common to many subsystems it is a good candidate to host the middle ware.  The interface to the TDL will remain unchanged.  This allows the subsystems using the TDL to be unchanged as well.  The implementation underneath the TDL interface will be modified to use the RTI.The Generic Naval Simulator/Stimulator GNSS has been nominated as the test system.  The modified TDL will be tested and debugged within GNSS.  Once this has been completed the modified TDL can be propagated to other subsystems.Completing this phase will accomplish two things.  First it will allow each subsystem that uses the TDL to become a federate.  Second it allows each of these new federates to perform their own interest management, thus decreasing the amount of unwanted information that needs to be processed.  After this phase is completed most of the BFTT subsystems will be recognized as individual federates.  Those that aren’t will still communicate with the DIS network, which is connected to the gateway.  At this point BFTT will be a diverse federation that effectively takes advantage of the benefits of the HLA.  2.4.3 Phase 3: Make Native ChangesMany of the BFTT systems are aging and may require replacement in the future.  At that point it will be possible to evaluate the fitness of the HLA as focus for the architecture of the new system.  If it is decided that the HLA is a good way to develop these new systems then they can be rebuilt around the requirements of HLA compliance.  At this point there will be considerable expertise in developing HLA compliant applications.  However this task does not need to be undertaken, and would only be done so because there is some benefit other than just HLA compliance, which was achieved far earlier in the life of BFTT.3. ConclusionHLA compliance makes several requirements of a simulation system.  There are three widely recognized methods for making a legacy simulation system HLA compliant.  These are using a gateway, using middle ware, or making native changes.  The benefits associated with each of these correlates with the risk involved.  However, by using a combination of these three methods the risk can be minimized and the process of achieving HLA compliance can be made gradually over time. The BFTT system is a legacy system that is going to become HLA compliant.  By using this approach of multiple methods towards HLA compliance, an effective low risk plan has been developed that will allow BFTT to take full advantage of the HLA. 4. Author BiographiesMATTHEW CALEF is a software engineer at Lockheed Martin Information Systems Advanced Simulation Center (LMIS-ASC).  Matt is currently working on the BFTT program helping to develop and implement changes associated with the current BFTT improvement effort.  Prior to this work Matt helped develop a prototype system that tested the effectiveness of proposed changes to the DDM service within the HLA.  Matt was also involved in ModSAF development for DARPA STOW and STRICOM programs.DEAN RINGRESSY works at System Integration & Research, Inc.  Dean has been involved with the BFTT program for many years.WAYNE CIVINSKAS is the Manager of Systems Engineering at Lockheed Martin Information Systems Advanced Simulation Center (LMIS-ASC).  His responsibilities include research and development of architectures and technologies that support distributed simulation.  Wayne’s current focus is on transition of distributed simulation technologies from the prototype stage to the full-scale engineering development and production programs. HLA compliance for an RTI is different for HLA compliance for a simulation system.  Put simply an HLA compliant RTI must support the services defined in the RTI interface specification