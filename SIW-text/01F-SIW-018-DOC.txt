D-OMAR Simulation for the AMBR Experiment in Native- and HLA-ModeStephen DeutschBrett BenyoBBN Technologies, LLC10 Moulton StreetCambridge, MA 02138617-873-3168, 617-873-3869sdeutsch@bbn.com, bbenyo@bbn.com Keywords:distributed simulation, human performance modeling, human participant experimentsABSTRACT: Within the Agent-based Modeling and Behavior Representation (AMBR) project, D-OMAR provided the simulation environment and scenarios with which to collect human performance data that was then provided to four human performance modeling teams to be used in the development of their respective human performance models. When the models were complete, D-OMAR was used as the simulation environment to run the models on the same scenarios. The AMBR experiments took place in a simplified air traffic control environment where the participant played the role of an air traffic controller working at a radar-based console. The focus for the experiments was the multi-tasking behaviors that the models must exhibit to faithfully represent the behaviors of an air traffic controller. During the Phase 1 trials, native-mode D-OMAR connectivity was used to link the D-OMAR simulation environment and the human performance models. For Phase 2, native mode connectivity was replaced by the HLA RTI and a related series of human participant and human performance model trials was conducted. In this paper we describe distributed simulation as conducted in D-OMAR native mode and D-OMAR support for distributed simulation using the HLA RTI. System configurations for real-time human participant and fast-time human performance model trials are described and observations related to system performance are presented.IntroductionThe Distributed Operator Model Architecture (D-OMAR) served as the distributed simulation environment for the Agent-based Modeling and Behavior Representation (AMBR) experiments [1] [2]. It was used to provide the simulation environment for both the real-time human participant trials and the fast-time human performance model runs. In the Phase 1 experiments, native-mode connectivity linked the D-OMAR simulator to the human performance models. In the Phase 2 experiments, native-mode connectivity was replaced by the HLA RTI. The human performance model trials were conducted with each of four human performance models: the Air Force Research Laboratory’s DCOG [3], Carnegie Mellon University’s ACT-R [4], CHI Systems’ COGNET/iGEN [5], and Soar Technology’s EPIC-Soar [6]. The experiment trials were based on a simplified air traffic control environment where the human participant or human performance model played the role of an air traffic controller managing the aircraft in the sector and the transfer of aircraft to and from adjacent sectors. The modeling teams were challenged to build human performance models that reflected the management of multiple tasks and attention sharing as evidenced by the human participants.The AMBR ScenariosThe ATC Workplace The ATC workplace for the AMBR experiment trials is shown in Figure 1. It includes a synthetic radar display and a message system to support communication among the players in the airspace—the air traffic controllers and the flight crews of the aircraft in the sectors.The radar portion of the display includes icons for the aircraft and the neighboring controllers. The icons for the aircraft identify their direction of flight and are labeled with flight designators (e.g., NW301). The icons for the neighboring controllers are labeled with their names (e.g., EAST). The aircraft and ATC icons are mouse sensitive and are used to provide arguments when generating messages. The sector boundaries for the air traffic control regions are painted in yellow. The notification boundary, painted in green, just inside the boundary for the center sector, marks the beginning of the region in which to initiate the transfer of aircraft to an adjacent sector. The message system supported communication among air traffic controllers and between air traffic controllers and aircraft. A prompt line above the radar screen displayed the current state of the message being prepared (see Figure 1). Screen buttons were available for message selection by type (e.g., the button labeled “ACCEPTING AC” in the upper right hand panel of Figure 1 initiated the message shown in the prompt line). Message arguments were filled in via aircraft or ATC icon selects from the radar screen. In the prompt line, the icons for the EAST controller and the aircraft AFR431 were selected. Selecting the “Send” button initiated the transmission of the message to the designated recipient. A message could be canceled explicitly using the “Cancel” button or implicitly by selecting another message type.For the AMBR experiments, messages were sorted to separate screen panels by category (see Figure 1): those related to outbound aircraft (the right-hand message panel), those related to inbound aircraft (the left-hand message panel), and those related to aircraft requesting speed changes (the lower message panel). Messages requiring a response from the local controller (e.g., an incoming transfer aircraft request) were left justified within the panel, those that did not require a response (e.g., an outgoing transfer aircraft request) were indented. The experiment trials took two treatment conditions, the “text” condition and the “color” condition. In the text trials, participants had to watch for outbound aircraft approaching the notification boundary as well as monitor the message screens to determine when actions were required. In the color condition, when a specific aircraft action was required, that aircraft’s icon was painted in a color coded to indicate the action required. When the correct action was taken the aircraft icon became white again. As expected, the text case proved significantly more challenging than the color case. Model’s View of the WorkplaceAn application-programming interface (API) was developed that defined the interface between the ATC workplace and the human performance models. Information on the evolving content of the workplace screen was provided, the form of “viewing” of the screen was determined by the model. On the one hand, the models were provided with information on each item when it appeared on the screen, while on the other, the models had access to the same operations as were provided to human participants.Basic static information such as scaling, sector, and notification boundaries, was made available off-line. On-line updates took several forms. The appearance of new aircraft was noted and aircraft positions were subsequently updated once per second. During the color trials, the models were notified of aircraft color changes as they occurred. Information on incoming messages included message content and the panel on which the message appeared. As out-going messages were constructed, information on the updating of the prompt line above the radar display was conveyed. Workplace inputs consisted exclusively of message construction. Message type was determined by a button select (e.g., “ACCEPTING AC”). Arguments to complete the message were filled in by icon selects to identify an ATC (e.g., “EAST”) and an aircraft (e.g., “NW301”). Selection of the “Send” button initiated the transfer of the message to its designated recipient. The Active Scenario EntitiesThe principal scenario entity was the air traffic controller for the center sector, the experiment subject, a role played by either a human participant or one of the four human performance models. When a human participant was acting as the center sector controller, a lightweight agent was used to track and record the actions of the human player. The remaining air traffic controllers, those for the adjacent sectors, were played by D-OMAR human performance models. Aircraft transiting the sector were important active scenario entities, as were the radar systems provided for each of the sector controllers. The messaging system was the last major scenario element. Air traffic controller models tracking aircraft used their radar systems and made use of the messaging system to handle communication with adjacent controllers and the aircraft in their sectors. Aircraft used the messaging system in communicating with the air traffic controllers.D-OMAR OverviewThe basic elements of the D-OMAR simulation environment are the simulation engines, the user interface elements, the network connectivity linking the simulation engines, and the user interface elements. Architecturally, the simulation engine, Core-OMAR is configured as a peer in a distributed computing environment. A D-OMAR simulation environment can be configured with a single Core-OMAR node for the entire environment, with multiple Core-OMAR peers in a distributed simulation environment, or for operation with one or more heterogeneous simulators. The two principal elements of Core-OMAR, implemented in Lisp, are the simulator and the representation languages used in developing the code that the simulator executes. The Core-OMAR simulator is an event-based simulator that can be run in either real-time or fast-time modes. The representation languages include a frame language, a rule language, and a procedural language. The Simple Frame Language (SFL) is a classical frame language derived from KL-ONE [7]. In addition to its representational role as a frame language, it is used to provide object-oriented definitions for the entities of a simulation. The rule language, one of the several versions of Flavors Expert (FLEX) [8], is a forward chaining rule language with collections of rules segregated into individual rule sets. The procedure language, the Simulation Core (SCORE) language, is used to define the behaviors of all scenario entities. It includes forms for defining proactive behaviors as goals and procedures and reactive behaviors initialed by impinging events. Multiple task behavior is mediated via priority-based procedure conflict resolution.A publish-subscribe protocol forms an important component of the SCORE language. Signal-event and signal-event-external are the basic forms for publish, the former broadcasts a message within a node, while the later broadcasts a message locally and to remote nodes. The message is in the form of a list where the first element of the list is the message type. One or more agents may subscribe to a signal by type in one or more procedures. The individual elements of the message may be tested before deciding to accept the message for further processing. The subscription to a message type expires when a message is accepted for processing and must be renewed if further messages of that type are to be processed. In a distributed simulation environment, simulator-to-simulator communication is required in addition to agent-to-agent communication. The form signal-event-simulator-external is provided to support this functionality. It is used primarily for time management in distributed simulation.Data recording forms an important subsystem within the Core-OMAR simulator. The SCORE language includes language extensions to support data recording. The objects recorded are event objects defined using the defevent form. Two built-in event types, stimulus events and response events, were used to capture the timing of the events that reflected human or model performance. Additional event types were defined to record scoring data. At the end of a simulation run, data relevant to the run, including stimulus-response event data and scoring data were recorded to disk.In addition to its role as a peer in a network of homogeneous or heterogeneous simulators, Core-OMAR acts as a server supporting several clients used to complete the simulation environment. These include the application user interface and the simulation control panel. The application interface served the ATC Workplace (Figure 1) is operable either by a human participant or by a human performance model. The simulation control panel provided for the selection of the scenario to be executed and the starting of a experiment trial. The application and simulation control interfaces were implemented in Java.D-OMAR Native-ModeThe AMBR Phase 1 trials were run using D-OMAR native mode connectivity. For human participant trials, the D-OMAR simulator was run in real-time mode. The exercise controller selected and initiated a scenario using the control panel and the human participant interacted with the ATC workplace as required by the unfolding events.For human performance model trials, the D-OMAR simulator was run in fast-time mode. System configurations for the four human performance models were each slightly different. The D-COG model was developed as a D-OMAR model. As such, it operated as a D-OMAR agent in the same Lisp image as the rest of the scenario entities. The ACT-R and EPIC-Soar models were also Lisp models, but each operated in its own simulator. Hence, each was configured as a two-node network. The ACT-R model was run in the same Lisp image as the D-OMAR simulator. The EPIC-Soar model ran under Linux. It ran on a single machine with the Linux version of D-OMAR. D-OMAR and EPIC-Soar each operated in its own Lisp image connected via a socket. Lastly, the COGNET/iGEN model, a C++ model, ran in its own simulator and used the D-OMAR CORBA interface to support connectivity.Native-Mode Time ManagementFor the DCOG model, time management was not an issue, it simply ran in the D-OMAR simulator along side the standard AMBR scenario entities. Each of the other three models ran in its own simulator interacting with the D-OMAR simulator. From the perspective of the D-OMAR simulator, the basic cycle was to complete a time-step in which an update of the ATC workplace took place and then grant the model’s simulator the opportunity to respond to the new screen events or take any actions that were then due. The grant included notification of the time at which the D-OMAR simulator required control again. The model simulator was free to run up to the grant time or such time as it generated an input to the workplace. At this point, the model’s simulator would issue a symmetrical grant specifying the current time and the time at which it next needed control.In addition to the basic time grant, the API included start-of-run and end-of-run notifications. On the D-OMAR side, the API was implemented using the standard publish-subscribe protocol with the signal-event-simulator-external form used to generate outbound messages and received messages arriving as inbound signal-event-simulator-external messages. The ACT-R and EPIC-Soar teams using Lisp were provided code to support these exchanges. D-OMAR and COGNET/iGEN handled these exchanges using CORBA.Native-Mode Data ExchangeData exchange between D-OMAR and the human performance model simulator included: (1) information that was presented at the workplace to be viewed by the model; and (2) actions that the model could take to construct messages to adjacent controllers and to aircraft in the sector. D-OMAR provided information on what was presented on the screen, it was the responsibility of the model simulator to determine how the model “saw” the data. D-OMAR provided the models with updates of aircraft positions and in the color case, the aircraft were color-coded to specify when actions were pending on them.Actions taken by the models emulated the mouse object selects used to construct messages to adjacent controllers and sector aircraft. As outlined above, the messages included a message type and the arguments necessary to complete the message, an aircraft select or an aircraft and an ATC select. A mouse select of the “Send” button initiated the transmission of the message. As messages were constructed the model was notified of updates to the prompt panel above the radar screen, first with the template for the message type and then with the arguments are as they were entered. When a message was transmitted, the model was notified of its appearance in the appropriate message panel and the clearing of the prompt panel. The models were also notified of the appearance of messages from adjacent controllers and sector aircraft. The API for data exchange was implemented much like that for time management. The signal-event-external form was used to generate the messages notifying the model of new or updated information appearing at the ATC workplace. Messages arriving from the model that detailed mouse selects arrived as inbound signal-event-external messages. D-OMAR HLA-ModeFor AMBR Phase 1, the central focus was the conduct of the experiment itself. For AMBR Phase 2, the focus was on replicating the Phase 1 results in an HLA [9] simulation environment. Earlier work in D-OMAR included a primitive HLA interface that was upgraded to address fast-time time-management and the attribute-value model for data exchange. The DMSO provided RTI 1.3 NG V3.2 was used. MITRE [10] provided guidance in making the transition to the HLA simulation environment.Implicit in the HLA architecture is the provision for the separation of a workplace from the entities reflected in that workplace. In moving to the HLA implementation, two federates were developed. The first federate, the “workplace” federate, provided the ATC workplace, operated either by a human participant or a human performance model. The second federate, the “world” federate, included models for the aircraft transiting the airspace and the human performance models for the controllers at the adjacent sectors.When running with a human participant, the simulation environment included just two federates (not including the HLA federation tools) with the human participant operating at the workplace federate. When running with a human performance model, the model became the third federate interacting solely with the workplace federate.HLA-Mode Time ManagementTime management in an HLA federation is handled by the HLA Run Time Interface (RTI). Federates send requests to the RTI to advance their local clocks, either to a specified time, or to the time of the next incoming event. The RTI keeps all the federates synchronized by granting these time advances appropriately.  When running with a human performance model, the world and workplace federates used the RTI’s next-event-request command with a time-out value in order to advance their clock. The RTI would grant the request and allow the federate to advance its logical clock if either a new event for the federate was generated, or if no such event occurred before the specified time-out. When a federate advances its logical clock, its lookahead value determines the next possible time at which it could generate an event. We used a lookahead value of zero, since we wanted federates to be able to generate events immediately, such as the workplace federate updating the screen position of the aircraft icon at the same time as the world simulation causes the aircraft to change its world position. The D-OMAR native-mode time-grant message mapped directly onto this next-event-request command. For the human participant trials, no time management protocols were used at all, since the human interaction must occur in real time. In this case, the RTI acted as a message passing system, forwarding events to other federates as soon as possible. Since there is no mechanism to guarantee hard real time performance, the hardware had to be fast enough to ensure that all messages were processed in time.HLA-Mode Data ExchangeIn order to handle the data exchange in the HLA federation, we created a one-to-one mapping from the D-OMAR native mode API onto a mix of HLA interactions and attribute-value updates. We created HLA objects to represent the aircraft and ATC regions. Updates of aircraft positions were transmitted from the world simulation federate to the workstation federate and the human performance model federate through the HLA attribute-value update function. Other data exchanges such as communication messages from an ATC to an airplane, or button presses at the ATC workplace either by a human participant or human performance model, were transmitted through HLA interactions. Additional interactions were needed for the HLA federation since the world-simulation and the workplace were implemented as two separate federates. In addition to the standard aircraft position-change messages, the world-simulation federate needed to inform the workstation whenever an aircraft crossed the notification boundary. This allowed the workstation to accurately record the stimulus event and thus pair it with the appropriate button-press response event.HLA Federate Compliance TestingThe world-simulation federate and the workstation federate both completed the DMSO sponsored HLA compliance testing on March 22, 2001. This certifies that the two federates are fully compliant with HLA version 1.3, and potentially makes them available to other researchers. The world simulation federate is quite domain specific, useful only for simulating aircraft and ATCs in this simplified air traffic control environment. The workstation, however, is far more generic. The buttons that the workplace displays, and the messages attached to each button are all fully customizable. This specific workstation display has been used in a combat air patrol scenario, unrelated to the AMBR project, and could easily be extended to additional related domains.Network Impact on Model PerformanceAn important goal for AMBR Phase 2 was to demonstrate that the HLA provided a simulation environment in which it was reasonable conduct human performance experiments and that human performance models could reasonably interact with a simulated workplace. The HLA implementation met these goals, but was found to require significantly more computer power for the human participant trials. It was also found to have a significant negative impact on most human performance model run-times. For the human participant trials, additional computer power was required to assure adequate real-time system response. For Phase 1, experiment control and the simulation were run on a 200 MHz Pentium desktop machine. The workplace display operated on a 500 MHz Pentium laptop machine. For Phase 2, an additional 500 MHz Pentium laptop machine was required. The world federate ran on a 266 MHz Pentium laptop, the workplace federate and the HLA RTI ran on a 500 MHz Pentium laptop, and the workplace display ran on a second 500 MHz Pentium laptop. The experiment was controlled from the laptop running the workplace federate. The Phase 2 HLA implementation required the replacement of the 200 MHz machine with a 266 MHz machine and an additional 500 MHz machine. For human performance model runs there was a price to pay for distributed computation. Table 1 provides data on run times relative to real-time (e.g., the DCOG model ran more than 14 times faster than real-time in native-mode and two-thirds real-time in HLA-mode). The data in the table reflects DCOG, ACT-R, and COGNET/iGEN trials that were run on 950 MHz Pentium with 512 Mbytes of memory operating under Windows NT. The EPIC-Soar trials were run on a 400 MHz Pentium with 256 Mbytes of memory operating under Linux, hence the data is not directly comparable with the data for the other models. The relative speeds of native-mode and HLA-modes for the EPIC-Soar runs are relevant. 950 MHz512 MbytesNT400 MHz256 MbytesLinuxAFRLDCOGCMUACT-RCHI SysCOGNETSoar TechEPIC-SoarNativeMode0.070.111.302.27HLAMode1.480.860.945.55Table  SEQ Table \* ARABIC 1 Run-time as a Multiple of Real-time in Native-Mode and HLA-Mode AMBR TrialsThe human performance models that ran very fast (see  REF _Ref518267158 \h  \* MERGEFORMAT Table 1) in native-mode lost this advantage in HLA-mode. The dominant performance factor was not in the models themselves, but rather the mode of connectivity between the model’s simulator and the D-OMAR simulator. Socket connections, the HLA RTI, and particularly the CORBA implementation had a high cost associated with their use. A second factor impacting performance was the choice to implement the scenario as two federates, a world federate and a workplace federate, for the HLA implementation. Message traffic that was local to a single simulator became message traffic moving between two federates in the HLA implementation. It was important to demonstrate a generic workplace readily adaptable to operate with a broad range of vehicle federates, but this did have an unfavorable impact on performance.Operating in D-OMAR native-mode, the DCOG and ACT-R model trials were dramatically faster than real-time. This is clearly the regime in which one would prefer to operate. Short run-times facilitated model development and model trials by compressing AMBR experiment trials of six and a half, nine, and eleven and a half minutes to a minute or less. The DCOG model ran internal to D-OMAR and did not require a socket connection. The ACT-R model ran in the same Lisp image as D-OMAR. Native-mode D-OMAR code recognized the shared image and bypassed the socket connection required between Lisp images or between nodes. The COGNET/iGEN model used CORBA to connect to D-OMAR. EPIC-Soar ran in a separate Lisp image and required a socket connection to D-OMAR. ConclusionsD-OMAR successfully provided the simulation environment in which to conduct the AMBR human performance model comparisons. For Phase 1, it was used as a real-time simulator operating using native-mode connectivity to collect human participant data that formed the basis for model development and evaluation. It then provided the fast-time test-bed for running the four human performance models: the Air Force Research Laboratory’s DCOG, Carnegie Mellon University’s ACT-R, CHI Systems’ COGNET/iGEN, and Soar Technology’s EPIC-Soar. To support the AMBR Phase 2 experiments, the D-OMAR simulator and the human performance models were adapted to use the HLA RTI. The results of the Phase 1 trials were reproduced in the HLA environment, but were found to require significantly more computer power to maintain adequate system response for the human participant trials. For three of the four human performance models, trial run-times were significantly longer in HLA-mode than in D-OMAR native-mode. When computer resource utilization is a concern in an HLA simulation environment, consideration should be given to implementing the workplace and the human performance model as a single federate. The efficiency of within-simulator communication can be used to efficiently accommodate the demand for high frequency data exchange between the workplace and the model. References[1] Gluck, K. A. & Pew, R. W. (2001). Overview of the agent-based modeling and behavior representation (AMBR) Model comparison project. Proceedings of the 10th Conference on Computer Generated Forces and Behavior Representation, Norfolk, VA.[2] Tenney, Y. J., & Spector, S. L. (2001). Comparisons of HBR models with human-in-the-loop performance in a simplified air traffic control simulation with and without HLA protocols: Task simulation, human data and results. Proceedings of the 10th Conference on Computer Generated Forces and Behavior Representation, Norfolk, VA.[3] Eggleston, R. G., Young, M. J., & McCreight, K. L. (2001). Modeling human work through distributed cognition. Proceedings of the 10th Conference on Computer Generated Forces and Behavior Representation, Norfolk, VA.[4] Lebiere, C., Anderson, J. R., & Bothell, D. (2001). Multi-tasking and cognitive workload in an ACT-R model of a simplified air traffic control task. Proceedings of the 10th Conference on Computer Generated Forces and Behavior Representation, Norfolk, VA.[5] Zachary, W., Santarelli, T., Ryder, J., Stokes, J. & Scolaro, D. (2001). Developing a multi-tasking cognitive agent using the COGNET/iGEN integrative architecture. Proceedings of the 10th Conference on Computer Generated Forces and Behavior Representation, Norfolk, VA.[6] Chong, R. (2001). Low-level behavioral modeling and the HLA: An EPIC-Soar model of an enroute air-traffic control task. Proceedings of the 10th Conference on Computer Generated Forces and Behavior Representation, Norfolk, VA.[7] Brachman, R. J. & Schmolze, J. G. (1985). An overview of the KL-ONE knowledge representation system. Cognitive Science, 9, 171-216.[8] Shapiro, R. (1984). FLEX: A tool for rule-based programming. BBN Report No. 5843. BBNT Solutions, LLC. Cambridge, MA. [9] Kuhl, F., Weatherly, R., & Dahmann, J. (1999). Creating computer simulation systems: An introduction to the High Level Architecture. Upper Saddle River, NJ: Prentice Hall PTR.[10] Feinerman, L. E., Prochnow, D. L. & King, R. A. (2001). Icarus: An HLA federation for HBR models. Proceedings of the 10th Conference on Computer Generated Forces and Behavior Representation, Norfolk, VA.Author BiographiesSTEPHEN DEUTSCH is a Division Scientist at BBN Technologies in Cambridge, MA. His principal area of research is human performance modeling with related interests in agent-based systems and simulation.BRETT BENYO is an Associate Software Engineer at BBN Technologies in Cambridge, MA. His area of interest is in multi-agent systems with a focus on human to agent system interaction and adaptability.  Detailed information on D-OMAR is available at http://omar.bbn.com.Figure 1 The ATC Workplace