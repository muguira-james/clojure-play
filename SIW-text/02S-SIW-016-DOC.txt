THE DEVELOPMENT OF AN HLA COMPLIANT HIGH PERFORMANCE COMPUTING RUN TIME INFRASTRUCTURE Joseph ClarkSebastian CapellaChris Bailey Dr Jeff SteinmanRAM Laboratories, Inc.6540 Lusk Blvd, Suite C200San Diego, CA 92121858-677-9207 HYPERLINK "mailto:joeclark@ramlabs.com" joeclark@ramlabs.com,  HYPERLINK "mailto:seb@ramlabs.com" seb@ramlabs.com,  HYPERLINK "mailto:cbailey@spawar.navy.mil" cbailey@spawar.navy.mil, steinman@spawar.navy.mil Dr. Larry PetersonSPAWARSYSCEN D4420253140 Systems StreetSan Diego CA 92152619-553-4070ljp@spawar.navy.milKeywords:Distributed Simulation, HLA, Parallel Simulation, High Performance Computing, SPEEDES, Data Distribution ManagementABSTRACT: This paper discusses the development of an HLA compliant High Performance Computing (HPC) Run-time Infrastructure (RTI) in support of the CHSSI program and the High Performance Computing and Modernization Program. This HPC-RTI  executes on high-performance multiprocessor computers and networks of workstations/PCs and is based on the government-owned SPEEDES (Synchronous Parallel Environment for Emulation and Discrete Event Simulation) software package. The HPC-HLA-RTI allows HLA federations to execute on networks of high-performance computers and workstations. One additional benefit of this effort is that any existing HLA-compliant simulation has the potential to achieve computational speedup by decomposing into multiple federates using the HPC-HLA-RTI to coordinate parallel simulation services.The design approach for this HPC-RTI is presented including the software architecture and design decisions and tradeoffs. This approach includes the use of SPEEDES to integrate logical time and real-time synchronization with all HLA services (including Ownership Management and Data Distribution Management) in order to fully support mixed logical time and real time execution of HLA federations. In addition, benchmark simulation data is presented to illustrate the scalability of the Beta implementation. A review of the Beta software demonstrated at the previous SIW will also be discussed.The HLA compliant HPC-RTI can completely interoperate with all SPEEDES simulation applications including JSIMS, JMASS, Wargame 2000, and EADTB.1. IntroductionThis paper discusses the development of a High Performance Computing (HPC), High Level Architecture (HLA)-compliant Run-time Infrastructure (RTI) based on the Synchronous Parallel Environment for Emulation and Discrete Event Simulation (SPEEDES) simulation engine and framework. The development of this HPC-RTI provides the HLA simulation community with an RTI architecture that can improve simulation performance through execution over parallel platforms. The first section of this paper discusses the goals and objectives for the development of the HPC-RTI. The second section of this paper discusses the SPEEDES simulation framework on which the HPC-RTI is based. The third section of this paper discusses enhancements made to the SPEEDES architecture for the purpose of making this RTI HLA-compliant. The fourth section discusses some preliminary performance results obtained from using the HPC-RTI over a variety of high performance computing platforms. The fifth section presents a strategy for using the HPC-RTI as a means to port legacy HLA simulations to parallel platforms. The sixth section summarizes the work to date and presents some ideas for future direction for the development effort. 1.1 BackgroundThe objective of this effort was to develop a RTI that exploits high performance computing architectures. Current HLA-compliant RTIs do not exploit high performance computing architectures for a variety of reasons. This HPC-RTI addresses the needs of the HLA community in terms of parallel simulation by focusing on three areas of development: fast communications, support for rigorous time management algorithms, and support for scalable data distribution management. The HPC-RTI addresses fast communications by focusing on algorithms that provide reliable communications via shared memory. In addition, the HPC-RTI development focuses on global synchronizations and reductions – two areas that are key to parallel simulation. The HPC-RTI also addresses time management issues by focusing on providing time managed declaration management (DM), data distribution management (DDM), and ownership management (OWM) services. This HPC-RTI development effort provides these services by developing the RTI on top of a HPC Sim Engine known as SPEEDES that automatically coordinates all operations on logical time.2. SPEEDESSPEEDES supports HPC applications inherently through its shared memory communications structures and advanced time management algorithms. SPEEDES, started in 1990 by NASA under DoD contracts by the Jet Propulsion Laboratory [1], is a HPC simulation framework that supports parallel and distributed simulation for computationally intense problems. Currently, several mainstream DoD projects are looking at SPEEDES to combine interoperability and high-performance by using a common simulation engine. These projects include: JSIMS, Wargame 2000 through the Joint National Test Facility (JNTF), Space and Naval Warfare (SPAWAR) Systems Command, the Extended Air Defense Test Bed (EADTB). Figure 1: The SPEEDES Architecture.2.1 SPEEDES ArchitectureFrom its inception, SPEEDES has evolved using software-layering principles and the spiral process model. Figure 1 shows the various layers of the SPEEDES architecture. The layered approach isolates critical functionality, while extending capability through higher-level abstractions. These layers are described in the following subsections.Internal and External CommunicationsSPEEDES supports communications via its internal and external communications libraries. The SPEEDES Internal Communications Library [2] achieves interoperability between different operating systems, networks, and inter-process communication mechanisms through a common interface that supports all the major types of parallel and distributed computing environments including shared memory multiprocessor machines, networks of computers, and/or large scale message-passing supercomputers. SPEEDES External Communications Library facilitates message passing with external module through a process that decouples its internal message-passing infrastructure from its external message passing system. External communications are transmitted through distributed network environments. Event Management LayerSPEEDES event-management layer supports time management schemes and persistence. The event-management layer uses an optimistic, rollback-based scheme that can be used to support multiple time management schemes [3][4] that range from conservative to optimistic.Persistence, the ability to save the state of a simulation to a disk, is also supported by SPEEDES [2]. Whenever a SPEEDES simulation dynamically creates a rollbackable object, SPEEDES records its address and block size in a default persistent database that it manages directly in high-speed memory. Similarly, whenever the simulation sets a rollbackable pointer, SPEEDES records the linkage between memory blocks in the database.Time Management LayerSPEEDES supports multiple time management schemes to guarantee logically correct time management in a distributed computing environment. Supported schemes utilize look-aheads, limits that determine how tightly in time objects can interact, and rollbacks, capabilities that restore state variables and retract events generated during the synchronization process. SPEEDES uses these look-aheads and rollbacks in various schemes to provide various forms of optimistic time management,  the most popular of which is called Time Warp[5].SPEEDES also supports an optimistic, but more stable form of time management known as Breathing Time Warp (BTW) [6][1]. This algorithm provides the flow control necessary to ensure stable simulation execution. BTW achieves such flow control by releasing event messages only when they are likely to be valid. Events that have a high probability of being rolled back hold onto their messages initially. This strategy results in higher stability by significantly reducing both anti-message traffic and rollbacks.The SPEEDES Modeling Framework LayerThe SPEEDES modeling framework uses four fundamental abstractions as building blocks for the rest of the framework. These abstractions, shown in Figure 2 using an extended Unified Modeling Language (UML), are (1) object managers, (2) simulation objects, (3) events, and (4) messages [1] Simulation objects represent the simulated entities. Their state variables must be comprised of rollbackable data types. All event management responsibilities for individual entities reside in the base class simulation object where SPEEDES maintains pending unprocessed events as well as uncommitted processed events. One object manager instance for each kind of simulation object resides on each node. Object Managers group different kinds of simulation objects together into subsets in a distributed manner. An object manager decomposes its simulation objects to SPEEDES nodes and remembers their locations when responding to requests for simulation object handles.  EMBED Word.Picture.8  Figure 2: UML diagram of the fundamental classes in the SPEEDES Modeling Framework.Time-tagged events are C++ objects that are managed by simulation objects. Unprocessed events with future time tags are stored in a pending event queue. Processed events with time tags in the past are stored in an uncommitted event queue until SPEEDES commits them. When processing an event, SPEEDES stores state variable changes in the event object. This allows SPEEDES to rollback uncommitted events when necessary. An event may associate with only one simulation object at a time because (1) simulation objects may be on different nodes, (2) simulation objects may be at different logical times, and (3) rollback dependencies are coordinated by simulation objects.SPEEDES provides another way to schedule and process events. Users can define methods in their simulation objects to be invoked as events. Applications can schedule these event methods using a type-checked event-scheduling interface provided by SPEEDES. The macro, DEFINE_EVENT_METHOD, generates this specialized event-scheduling function in addition to an event object and a message. This macro relieves users from the necessity of writing event objects and messages.HLA Interoperability and Federation ObjectsSPEEDES maintains several HLA-oriented features. HLA features that are implemented in SPEEDES include:HLA federations through a gateway that can “talk to” any RTI meeting the HLA standardExternal HLA federates operating in a computer network environmentHLA federates represented as SPEEDES nodes that execute on high-performance computersSPEEDES HLA capability is implemented through the use of Federation Objects (FOs). FOs provide applications with an automated framework for SPEEDES to distribute the exportable attributes of a SimObj to (1) subscribing SimObjs within a SPEEDES-based federate, (2) external modules, or (3) other federates within an HLA federation. Each FO provides a well-documented set of exportable attributes that collectively characterize the public state of an application’s Simulation Object Model (SOM).FO attributes are normally declared within SimObjs as exportable state variables that are mapped into FOs through pointer references. FO attributes are then used as normal data types in application code. Through operator overloading, FO attributes detect when they are modified. Events are automatically scheduled to reflect the changes of these attributes to all subscribers.3. HPC-RTI DevelopmentAs stated in Section 1, the HPC-RTI development leveraged SPEEDES for its development. SPEEDES already had most of the HLA functionality including the following services.Internal coordination for processing using time-tagged eventsAdvanced time management algorithmsFully functional declaration management servicesDistributed interest managementAutomated Federation Object (FO) servicesInteraction between HLA entitiesAttribute enhancement supports two-way updating of attributes (OWM)3.1 Requirements for Time Managed Services A major part of the HPC-RTI development was supporting time managed HLA services DM, DDM, and OWM. As part of this development, several requirements for HPC-RTI time management were derived in order to properly support HLA over parallel platforms. These requirements are:Requirement #1: Federates must coordinate their own time management and event processing with HPC-RTI. This includes using federate logical time stamps to coordinate time advances; Having real time modes shall use the wall clock for time-stamping events; and requiring that federates process conservatively while HPC-RTI processes optimistically.Requirement #2: All messages flowing between the federate and HPC-RTI are always coordinated in logical time. This includes storing messages from the federate in the RTI Ambassador; Processing those messages by the HPC-RTI using a special out-of-band SPEEDES event; Storing messages from HPC-RTI in the Fed Ambassador when SPEEDES events are committed; and, Processing those events when possible.Requirement #3: No time creeping between HPC-RTI and Federate. This allows zero lookahead values to not cause the HPC-RTI to deadlock and allows non-zero lookahead values to improve parallel performance.Requirement #4: Federates only see HLA interfaces and have no back-door hooks into SPEEDESRequirement #5: HPC-RTI Federates will interoperate with SPEEDES-based federates and network-based HLA Federates using RTI-NG through the SPEEDES HLA gateway. Thus providing complete HLA interoperability between different kinds of systems.These requirements were used to guide the implementation of the time managed HLA services using SPEEDES as a basis.Figure 3: Data flow ArchitectureFigure 4: Processing CycleFigure 5: Processing Loop3.2 Architecture and Processing CycleA second major part of the HPC-RTI development effort was defining the architecture and processing cycle for the HPC-RTI. The HPC-RTI data flow architecture, shown in Figure 3, supports communications between federates and the HPC-RTI. Federates can send operations to the HPC-RTI using the RTI-Ambassador. Likewise, the HPC-RTI can send operations to a given federate using the Federate Ambassador. SPEEDES events are used to coordinate both ambassadors for objects using the HPC-RTI.The basic processing loop for federates using the HPC-RTI is depicted in Figures 4 and 5. The main tick processing loop is used until the next event request service is invoked on the RTI. The tick processing loop is used to coordinate time barriers in SPEEDES with time grants to the federate. The tick loop is used to process at most one SPEEDES GVT cycle. During the tick loop, the FedAmbassador will eventually (1) pass a message to the federate if a queued message has a time tag less than or equal to the requested time(2) allow multiple messages with the same time tag to be returned to the federate and (3) grant time to the federate using either the requested time or the time tag of the message returned to the federate. The tick method is continued until the time advance grant is received. Once time advance has been granted, the grant flag is reset and events are processed in the federate up until the granted time.Figure 6: Phases of Execution for SPEEDES Reentrace3.3 SPEEDES ReentranceA third major part of the development effort was to make SPEEDES re-entrant in order to support dynamic join and resign capability for HLA. Previously, SPEEDES retained the thread of control by having the ExecuteFederate() function return the thread of control when the simulation reached its end time. The HPC-RTI design allows SPEEDES to be re-entrant by decomposing the ExecuteFederate() function into three functions: Initialize(), ProcessCycle(), and Terminate(double tend). The Initialization function is performed when RtiAmbassador is created. ProcessCycle is invoked during Tick when there is no work for the federate. Terminate is invoked when the federate resigns. These functions are illustrated in Figure 6. 4. The Beta HPC-RTI and Performance ResultsThe HPC-RTI Beta version was completed in August of 2001 and demonstrated at the Fall 2001 SIW in Orlando. The Beta version of the HPC-RTI supported various HLA time managed services including Federation Management, Time Management, Declaration Management and Object Management Services. The Federation Management services support included implementation of create/destroy federation, join/resign, sync points, and tick services. The time management services included support for next event request, next event request available, time advance request, time advance request available, and time advance grant services. The Declaration Management services implemented included publish/subscribe and unpublish/unsubscribe services for objects and interactions. Additionally the Object Management services implemented included register/discover object, unregister/remove object, update/reflect object attributes, request class/object attributed update, and send/receive interactions.Benchmark performance tests were performed for the HPC-RTI Beta implementation over parallel platforms accessing up to 16 parallel nodes. Seven benchmark tests were performed looking at scalability in terms of execution time versus lookahead values with respect to events, interactions, and federation objects (attributes). Another scalability test was conducted in order to observe execution time versus the number of nodes with respect to creating, registering, and updating Ten Thousand objects.  The tests run included the following:Random Internal EventsInteractions with (N-1) Federates sending and 1 Federate receivingInteractions with 1 Federate sending and (N-1) Federates receivingInteractions with all N Federates sending and receivingFederation Objects with (N-1) Federates publishing and 1 Federate SubscribingFederation Objects with 1 Federate publishing and (N-1) Federates subscribingFederation Objects with all N Federates publishing and subscribing.Ten Thousand Object Test.The benchmark tests were run over a variety of platforms including HP-UX and SUN.Figures 7-15 illustrate the benchmark tests performed for 1-16 nodes on the HP-UX platform.  The figures illustrate the scalability of the HPC-RTI Beta implementation for up to 16 nodes. Figure 7: Performance for Random Internal Events  Figure 8: Performance for Interactions with 1 Sender and (N-1) ReceiversFigure 9: Performance for Interactions with (N-1) Senders and 1 Receiver Figure 10: Performance for Interactions with AllFederates Sending and ReceivingFigure 11: Performance for Federation Objects with (N-1) Subscribing and 1 PublishingFigure 12: Performance for Federation Objects with (N-1) Publishing and 1 SubscribingFigure 13: Performance for Federation Objects with all N Federates Publishing and SubscribingFigure 14: Performance for registering and updating federation objects on single node.Figure 15: Performance for registering and updating federation objects on multiple nodes.5. Porting of Legacy SimulationsOne of the key features of the HPC-RTI is its ability to port HLA-compliant legacy simulations to parallel platforms. Figure 16 illustrates this concept. Due to its HLA compliance, legacy federates using their own simulation engines can “speak” HLA to the HPC-RTI. The HPC-RTI can then interoperate with SPEEDES in order to execute on parallel platforms. Events can be Figure 16: Porting of Legacy Simulationsprocessed by both the federate’s own simulation engine (using conservative time management) and SPEEDES (using optimistic time management). Federates using the HPC-RTI can communicate using shared memory on the parallel platforms through SPEEDES communications. As such, new simulations and models can be constructed in SPEEDES, while legacy models and simulations can be utilized by interfacing with the HPC-RTI.6. Summary and Future WorkThis paper has presented the development of an HLA-compliant HPC-RTI based on the SPEEDES simulation engine and framework. Design decisions and requirements were presented within the context of the High Level Architecture. In addition, performance results from benchmark tests of the Beta version of the HPC-RTI were presented and showed scalability for federation objects and interactions for up to 16 nodes.Future development for the HPC-RTI includes integrating with checkpoint/restart save/restore capabilities being developed by the JSIMS Common Component Simulation Engine (CCSE) development, building on existing SPEEDES Interest Management and providing further optimizations for parallel performance. 7. AcknowledgmentsThis work was performed under the contracts for N66001-96-D-0001 Delivery Order 96 and N66001-00-D5025 for SPAWAR System Center. The authors would like to thank the Common High Performance Computing Software Support Initiative (CHSSI) Program for their support  for this effort.8. References[1] Steinman J. 1998, “Scalable Distributed Military Simulations Using the SPEEDES Object-Oriented Simulation Framework.” In Proceedings of the Object Oriented Simulation Conference (OOS'98), Pages 3-23.[2] Van Iwaarden R., et. al. 1999, “Persistence Memory Management for Checkpoint and Restart of SPEEDES.” In Proceedings of the 1999 Fall Simulation Interoperability Workshop. Paper 99F-SIW-109.[3] Fujimoto R. 1990, “Parallel Discrete Event Simulation.” Communications of the ACM, Vol. 33, No. 10, Pages 30-53.[4] Steinman J., Wieland F. 1994, “Parallel Proximity Detection and the Distribution List Algorithm.” In Proceedings of the 1994 Parallel And Distributed Simulation Conference (PADS’94), Pages 3-11[5] Jefferson D. 1985, “Virtual Time.” ACM Transactions on Programming Languages and Systems, Vol. 7, No. 3, pages 404-425.[6] Steinman J., et. al. 1995, “Global Virtual Time and Distributed Synchronization.” In Proceedings of the 1995 Parallel And Distributed Simulation Conference, Pages 139-148.Mr. Joseph E. Clark received a Bachelor of Science in Mathematics from Ohio University in 1998.  Upon completion of his degree work, Mr. Clark began teaching Mathematics and Computer courses at South Western College of Business in Dayton, Ohio and then moved on to the simulation community as a mathematician/software engineer for Simulation Technologies Inc. based in Dayton.  He joined RAM Laboratories in late 2000 as a software engineer and has played a key role in the development of the HPC-RTI.  His duties for this project include development of HPC-RTI relating to all seven categories of the HLA RTI 1.3 specification. Mr. Clark is also responsible for the implementation of other projects such as JSIMS interest management and research, implementation, and analysis of Model Abstraction Techniques for Engineering and Engagement Simulations.Mr. Sebastian Capella is a senior engineer at RAM Laboratories Inc. working on the SPEEDES simulation engine.  He is on the JSIMS Common Component Simulation Engine (CCSE) performance team, and is currently developing algorithms for computing ranges between complex motion types.  He has a B.S. in Computer Engineering from the University of California, San Diego.  He has been involved with software engineering projects ranging from high end, graphical simulation visualization engines, to low level, operating system internals and device driver implementations.Mr. Christopher A. Bailey is a senior engineer at RAM Laboratories working on the SPEEDES simulation engine, JSIMS CCSE, and HPC-RTI development efforts. Mr. Bailey is responsible for implementing the checkpoint/restart and persistence schemes for all SPEEDES-based efforts. Prior to joining RAM Laboratories, Mr. Bailey was involved in implementing massively parallel distributed databases for the NCR Corporation. Mr. Bailey received his B.S. in Computer Science from the University of South Carolina.Dr. Jeffrey S. Steinman is the Vice-President and Director of Technology at RAM Laboratories in San Diego, CA.  In this role, Dr. Steinman is the principal investigator for a number of parallel and distributed simulation tasks including overseeing RAM’s JSIMS Common Component Simulation Engine Development program and RAM’s HPC-RTI development project that is sponsored by the High Performance Computing Modernization Program (HPCMP). Additionally, Dr. Steinman is the technical architect at the Space and Naval Warfare Center (SPAWAR) System Center (SSC) for DoD users of the Synchronous Parallel Environment for Emulation and Discrete-Event Simulation (SPEEDES) framework. Dr. Steinman was the originator of the SPEEDES Simulation Framework since its inception in 1990 while working at the Jet Propulsion Laboratory. Dr. Steinman received his B.S. in Physics from Cal-State Northridge, and his M.S. and Ph.D. in Computer Science from the University of California at Los Angeles.Dr. Larry Peterson has been involved with research and development in the area of high performance computing and modeling and simulation for the past 12 years.  He is employed by the Space and Naval Warfare Systems Center in San Diego.  He received a Masters and Ph. D. in Computer Science from the University of Illinois, and a BSE Math degree from the University of Michigan.  He currently leads the Forces Modeling and Simulation Computer Technology Area in the DoD High Performance Computing Modernization Program. EMBED Word.Picture.8  