The Euclid RTP11.13 SE Management ToolKeith FordThales Training & Simulation Ltd.Gatwick Road, CrawleyWest Sussex, RH10 9RLEnglandkeith.ford@thales-tts.comMarko JokipiiInstrumentointi OySarankulmankatu 20, 33900 TampereFinlandmarko.jokipii@insta.fiKeywords:Euclid RTP 11.13, Synthetic Environments, SE Management Tool, Development EnvironmentABSTRACT: Euclid RTP 11.13 is a major European initiative to promote the use of Synthetic Environments (SEs). The title of the programme ‘Realising the Potential of Networked Simulations in Europe’ reflects the fact that although SEs are currently being used to support defence programmes in Europe, their full potential is not currently being realised. The RTP11.13 team is led by Thales Training & Simulation (UK) and comprises of 22 European companies across 13 Nations. The programme spans November 2000 to October 2003 and is the largest European Defence Research & Technology activity undertaken by the WEAG (Western European Armament Group). The aim of the project is to 'overcome the obstacles that prevent SEs being exploited in Europe by developing a process and an integrated set of prototype tools that will reduce the cost and timescale of specifying, creating and utilising SEs for collective training, mission rehearsal and simulation based acquisition'. One of the main results from the programme is the concept of the SE Development Environment (SEDE) for creating and utilising SEs, which is analogous to an Integrated Development Environment (IDE) for developing software applications. The purpose of the SEDE is to provide a facility that will assist the different types of SE users i.e. Problem setters, Problem Solvers, and SE Implementers, so that SEs can be delivered faster, better and cheaper. The SEDE comprises of five main components; the SE Development & Exploitation Process (SEDEP), Repository, SE Management Tool (SEMT), SE Tools (both COTS and those being developed in Euclid 11.13) and a Knowledge Base.        The paper describes the SE Management Tool, which is an overarching tool that integrates the SE tools and repository into an IDE. It also provides the functionality for managing SE projects and for guiding the user through the process (nominally the SEDEP but can be configured to other processes e.g. FEDEP). The SEMT is relevant to both SE Users and developers.IntroductionEuclid is an acronym of European Co-operation for the Long-term In Defence. It provides a funding mechanism for European industry to collaborate on common defence problems and is managed by the Western European Armaments Group’s (WEAG) Research Cell. Each Euclid Research and Technology Programme (RTP) is managed by a Management Group that comprises of representatives from each nation contributing funds to the programme. The chair is from the nation that proposes the research study.The Euclid 11.13 team is led by Thales Training & Simulation (UK) and comprises of 22 European companies from 13 Nations. The programme started in November 2000 and will run for 36 months. It is the largest European Defence Research & Technology activity undertaken by the WEAG, with a budget in excess of €17 million. The aim of the project is ‘to overcome the obstacles that prevent SEs being exploited in Europe by developing a process and an integrated set of prototype tools, which will reduce the cost and timescale of specifying, creating and utilising SEs for collective training, mission rehearsal and simulation based acquisition'.The aim will be met by achieving the following objectives:Determine and mitigate obstacles that prevent networked simulations being exploited in Europe.Provide a process and prototype tools which will reduce the life-cycle of synthetic environment production, execution and evaluation.Develop software required to set-up a European repository containing information about SE assets.An overview of the Euclid 11.13 programme is given in [1]. This paper describes the SE Management Tool, which is one of the components of the SE Development Environment (SEDE).TerminologyIn this paper, the abbreviation SE refers to ‘Synthetic Environment’ rather than ‘System Engineering’. The term ‘Synthetic Environment’ has many different meanings and there is often confusion about what is meant by an SE. Some people use the term SE to mean the instantiation of a networked simulation whereas other people take a broader view and use it to describe a framework for integrating and reusing modelling and simulation technologies to solve a range of related problems. For the purpose of Euclid 11.13, an SE is considered to be the instantiation of a heterogeneous networked simulation and the supporting framework is referred to as the SE Development Environment.The term ‘Knowledge Base’ is used in its general sense i.e. to refer to a collection of data, information and knowledge, rather than the connotation associated with the Artificial Intelligence (AI) community.A Repository entry is the name given to the atomic information storage unit managed by the repository. Every Repository entry is an instance of a specific Repository entry type.SE Development EnvironmentOne of the main deliverables from Euclid 11.13 is the development of a prototype SE Development Environment (SEDE). The SEDE concept will achieve the programme’s aim of reducing the cost and timescales of creating and utilising SEs by:Introducing efficient working practices in consortia by providing a common shared data environmentProviding facilities for managing the data and information generated by SE projectsHaving a repository to promote the re-use of existing SE assetsMaking information about best practices available to inexperienced SE users.The SEDE is intended to support the whole range of people who are involved over the lifecycle of an SE.  These can be grouped into:Problem setters – the individuals or group that pose the question to be answered in the SE. i.e. the customer who is responsible for defining the problem and for funding  the means to obtain the solution. Problem solvers – the individuals or group that investigates the SE solution to the problem i.e. the System Engineers that define the SE architecture. SE Implementers – the individuals or group that develop and integrate the various elements of an SE i.e. the Specialist Engineers who provide an operational and fully tested SE.Figure 1 shows the conceptual framework for the SE Development Environment. It comprises of five main components:SE Process (known as the SEDEP) – defines the activities and tasks for creating and utilising an SE.SE Management Tool (SEMT) – provides capability for the management and configuration control of the SE project’s data.SE Tools – provides support for a specific activity or task defined by the SE process. These tools can be prototype tools developed in Euclid 11.13 or third party Commercial of the Shelf (COTS) tools.Repository – provides facility for exchanging data between the SE tools and for storing data so that it can be re-used on other SE projects.SE Knowledge Base – provides information for informing users about available SE assets and best practices for creating and utilising SEs.An important aspect of the SEDE concept is that it is scalable. For small SE programmes, it can be run on a single computer or Local Area Network (LAN), whereas for large multi-national programmes, it can be distributed over many sites.Further information about the SEDE is given in [2], the process in [3] the repository in [4] and the SE Tools in [5]. Figure 1	SEDE Conceptual FrameworkRationale for SE Management ToolAlthough there are tool vendors that market IDEs for supporting SE activities, the tools usually only support a limited range of activities. If additional tools are required, it is not usually possible to integrate them into the same environment since proprietary interfaces are used. What is required is an open standard for creating configurable working environments.Unfortunately, previous initiatives for defining open standards for integrating tools such as the Computer Aided Federation Development Environment (CAFDE) have not been successful [6]. The objective of the CAFDE initiative, sponsored by DMSO, was to support the development of HLA federations by providing a framework for integrating HLA tools from different tool vendors. It is thought that one of the reasons CAFDE did not take-off was that it required tool vendors to modify their software in order to make their tools CAFDE compliant.The SEDE provides an open framework for producing an IDE, which doesn’t require any code changes to the SE Tools. The rationale for the SEMT is to provide an overarching tool to integrate the SE tools that support the SE process and to orgainse and manage the data stored in the repository as SE projects. SE Management Tool High-Level Requirements The following high-level requirements have been generated for the SEMT. The SEMT shall:Be platform independent.Provide password protection for restricting access to the SEDE.Be configurable so that it can be used to support projects using different processes e.g. FEDEP, SEDEP etc.Create and maintain SE projects.Display the names of all the repository entries that are associated with an SE project.Provide configuration and versioning control for repository entries associated with an SE project.Enable users to browse though linked repository entries or search for specific repository entries.Enable users to display the contents of repository entries.Select files on the local file system and store them as repository entries (complete with header information) in the repository (and vice versa).Be configurable so that different tools can be specified for supporting different SE projects.Be able to integrate SE tools without any modification to the tool’s code.Be able to specify the input and output repository entries that an SE tool should use when launched.Display and provide capability to configure checklists (checklists are provided as part of the FEDEP and SEDEP and give the status of what tasks have been completed. Because the scope of SE projects vary enormously, the SEMT should enable the standard checklists to be edited to satisfy the requirements of a particular project).SEMT User RolesThere are two different user roles for the SEMT; Project Administrator and User. The SEMT exposes different functionalities depending on which user role is being supported. The project Administrator configures the SEMT to meet the requirements of a specific project and the access rights of the users. There is always at least one Project Administrator for each project. The Project Administrator can use all the functions of the SEMT.The users can be Problem Setters, Problem Solvers or SE Implementers. There can be an unlimited number of Users in the project. However, they are restricted to using only the functions necessary to complete their task.The SEDE concept assumes that each user will have the SEMT and a sub-set of the SE tools available on their computer to enable them to perform their role.SE Management Tool DescriptionThe operation of the SEMT will be described in relation to its GUI. When the SEMT is launched and a project loaded, a window similar to the one in figure 2 is displayed. The main parts of the GUI are the Title Bar, Menu Bar, Tool Bar, Project Tree, Main Display Area and the Status Bar. These are explained in more detail in the following sections.Figure 2	SE Management Tool GUITitle BarDisplays the name of the currently opened project.Menu BarThe menu bar provides access to the main functions of the SEMT. File MenuThe file menu provides access to the functions associated with opening and closing an SE project. It comprises of the following options:New - Create a new SE projectOpen  - Open an existing SE projectClose - Close currently open SE projectSave - Saves state of currently opened SE projectSave As - Enables currently opened SE project to be saved under a different name (copies all repository entries associated with current project and makes this the currently opened project).Delete – Enables an SE project to be selected and deleted (provided the user has the correct access rights). Projects - Lists the name and location of the four most recently opened SE projects.Exit - Shutdown SEMTProject MenuThe project menu enables information about the currently opened project (which is stored in the SEMTProject entry in the repository) to be displayed/edited. It provides the following menu options:Project Properties – displays the general project properties, which contains information such as contact details of project administrator, description of project, name of repository node where data is held, version number etc.Edit Project Properties – This can only be accessed by the project administrator and enables the SEMT to be configured to meet the requirements of a particular SE project. Parameters that can be edited are General Project Properties, Project Checklist, Project Users, and Project SE Tools i.e. defines which SE tools can be used to support particular activities.Create Snapshot – saves the current status of the project entry in the repository.Restore Snapshot – enables previous snapshot of project entry to be re-installed.Insert Entry – enables a repository entry to be assigned to the project.Remove entry – enables a repository entry to be removed from the project.View MenuThis menu provides options for selecting what data should be displayed. It comprises of the following menu items:Process – this displays the process to be used on the SE project (section 7.7.1).Overlays – this enables the user to display one of the overlays associated with the project (section 7.7.2).Checklist – this enables the user to edit the status of the checklist items. Valid states are Not Started, Started, Finished.Project Tree – this determines whether the project tree is displayed or not (section 7.6).Utilities MenuThe Utilities menu provides access to core tools required by every project. It contains the following sub-menu items:Configure Tools – configures SEMT so that it can launch SE tool(s) installed on a user’s computer.Repository Maintenance – launches repository maintenance client, which basic repository functions e.g. edit repository access rights.Search – enables repository to be searched for particular repository entries.Data Distribution – launches data distribution tool that enables files to be down/up loaded from/to the repository.Asset Characterisation – launches the asset characterisation tool that enables SE assets to be characterised and stored in the repository.Help MenuThe Help menu provides access to the various help topics supported by the SEMTTool BarThe project toolbar contains icons for quickly launching commonly used tasks. This won’t be implemented in the prototype SEMT since experience with using the tool is required to determine what functions should be launched from here.Status BarThe status area is used to display information about what the SEMT is currently doing e.g. ‘Retrieving data from the repository’, ‘Saving data to the repository’, etc.Project TreeThe project tree displays all the repository entries associated with a project and comprises of two parts; a tree containing the data types relating to the process being supported and a tree containing other files e.g. schedules, management plans etc. The Project Trees can be expanded or collapsed as required. A plus sign next to an entry shows that further information is available for display. The Project Administrator defines the repository entries associated with an SE project by using insert/remove functions. It should be noted that it is possible to specify the repository entry in the project tree before it exists in the repository. The repository entries displayed in the project tree are colour coded as follows:Red – entry doesn’t yet exist in the repositoryAmber - entry exists but is not finished i.e. it is still being worked on.Green – entry stable and ready for use by the next activity in the process.The Project Trees provides a way of accessing the repository entries since they can be accessed by left--clicking the appropriate entry. The repository entries associated with the process are categorised according to the process steps and activities in which they are created. The top-level lists the different Steps of the process e.g. Define Federation System Requirements, and under each Step, all the activities in that step are shown e.g. Develop Scenario. For each activity, the different inputs and outputs for that activity are shown. Different versions of a particular entry are displayed as separate leaves. When a repository entry is selected by double-clicking the left mouse button, the entry browser is launched and the contents of the entry are displayed (section 7.6.1). Right-clicking the mouse over the project tree displays a menu that provides the following functions for creating and editing the tree. Insert Entry  - enables an existing repository entry to be added to the tree.  The entry can be referenced or copied.Remove Entry – repository entry removed from project tree (though not removed from the repository).Delete Entry – marks entry for deletion in the repository.Open in Browser – displays contents of repository entry (see section 7.6.1).Properties – displays the properties of the repository entry e.g. description, node name, who created it etc.Update Status – enables colour of entry to be changed in the tree to reflect its current status.Open in BrowserIf the Open in Browser function is selected, the SEMT launches a browser, which displays the contents of the entry. The entry data is displayed in the browser in two ways. If the repository entry is in XML format and has one or more style sheets associated with it, the data can be displayed in a meaningful and structured way. In addition, the raw XML data can be displayed. If the Open in Browser functions is used on a file entry i.e. data that is stored in native format rather than XML, only the header information for the repository entry will be displayed e.g. keywords, filename. Point of Contact etc.Main Display AreaThe Main display is used to display either a data flow diagram of the process activities or overlays associated with the process. Tabs at the bottom of the panel enable the different process steps or overlays to be displayed. Process ViewThe process view shows the activities associated with each step of the process along with their inputs and outputs.Left clicking an activity enables the tools associated with the activity to be launched and double clicking an input/output enables information about the corresponding repository entries to be displayed. Next to each activity is a progress bar that shows how much of the activity has been completed.  This is determined from the number of entries on the checklist that have been completed. Right clicking an activity brings up a menu with the following items:Activity Help – displays a window that gives information about how to perform the activity and what tools are available to support it.Activity Checklist – enables status of the checklist for the activity to be modified. Overlay ViewThe overlay view displays all the overlays that have been defined for the process. Different overlays are displayed by selecting the appropriate tabs at the bottom of the pane. The purpose of an overlay is to display all the activities associated with a particular theme that spans several process steps in one data flow diagram. Typical overlays that may be included are for Verification & Validation (V&V) and security.  The overlay view functions in a similar way as for the process view.SE Management Tool ImplementationThe prototype SEMT is programmed in Java so that it can be run on different platforms and makes extensive use of XML for configuring the tool. This enables the tool to be configured without modifying the SEMT’s code. The configuration information is stored in an SEMTProject repository entry and a new entry is created for each SE project. All the people working with the project share this information.Different templates for the SEMTProject entry have been provided to support different processes e.g. FEDEP, SEDEP. When an SE project is initiated, the project administrator copies the required template and this is used to store additional project related information e.g. user access rights.SEMT Interface with SE ToolsThe SEMT interface with the SE Tools represents one of the big challenges for the SEMT. The following top-level requirements were defined for this interface:The amount of data transmitted between the SEMT and SE Tool should be kept to a minimum.The SEMT shall be able to start tools and exchange the necessary data on all major operating systems e.g. Windows, Unix, Linux.The SEMT shall pass information about which repository entries should be used as the tool’s input and output. The SEMT shall not have any knowledge of the specific Data Models that are defined for the Repository entries (since these may change over time).Taking these requirements into account, a simple API has been defined for interfacing the SE tools with the SEMT. The prototype Euclid 11.13 tools support this API and can connect directly to the repository as shown in Figure 3.Since there is a requirement to also integrate COTS tools into the SEDE that will not necessarily support this API, a method has been devised to provide the interfaces to the SE Management Tool and Repository by incorporating them in a software wrapper.Figure 3         Tool Interfaces with the SEMT and RepositoryThe function of the tool wrapper is to take care of the interfaces with the SEMT and repository. This means that from the SEMT point of view, a COTS tool with a Wrapper can be treated exactly like any other SE tool that has implemented the interface. Before the wrapper launches the COTS tool, it reads the ToolInfo entry and transfers the data from the repository to a specified location on the file system. The COTS tool is then launched and obtains its data in the normal way. When the COTS tool is exited, control is passed back to the wrapper, which uploads the data from the file system back into the repository. The advantage of integrating COTS tools in this way is that it enables the data to be shared with other  (possibly remote) users and the same configuration control procedures can be applied.The data to be passed between the SEMT and SE Tool e.g. input is exchanged via the repository. The information is stored in a ToolInfo entry, which is a Repository entry type that tool developers must provide along with the tools to be integrated into the SEMT.  A specific ToolInfo entry type is required to handle the particular data structures for each SE tool. Different instances of the ToolInfo can be created to enable different combinations of repository entries to be stored as default values. This means that different users can define their own particular combination of inputs/outputs so that they don’t have to select repository entries for the input/outputs each time they use the tool. When a user wants to run an SE tool, the SEMT first interrogates a text file installed on users computer to determine the location of the SE tools executable file. If the tool is not referenced in this file e.g. when it is run for the first time, the user is prompted for the location, and the information is saved for subsequent use. Before launching the SE tool, the user is also able to specify any command line parameters required by the tool. The SE tool initially retrieves the ToolInfo entry from the Repository and parses it to get the information it needs (where to find the input entries, where to put the output entries, etc.). The tool then loads the input data into its memory space. When processing is complete, the SE tool updates the ToolInfo entry with information that the SEMT should be aware of and writes it back to the Repository. Finally, the SEMT retrieves the ToolInfo entry and parses it to get the information that was written by the tool.Some fields in the ToolInfo entry are reserved for the SEMT to write to (and for the tool to read). These are denoted ‘read’ fields, and are used to pass information from the SEMT to the tool. Other fields are reserved for the tool to write to (and the SEMT to read). These are denoted ”write” fields, and are used to pass information in the other direction. Finally, there are some fields that can be written to by both the SEMT and the tool (”read/write fields”). ConclusionsA prototype version of the SEMT has been produced and its ability to support SE projects has been demonstrated during the programme.One of the advantages provided by the SEDE concept over proprietary solutions is that it has been produced by a number of different European industries and it is not owned by any one organisation. However, its long-term success depends on the efforts of the sponsoring nations in promoting and exploiting its use after Euclid 11.13 finishes.AcknowledgementsThe authors would like to acknowledge the help of our colleagues in the Euclid consortium with the preparation of this paper; in particular Marco Fabbri (ALENIA), Peter Hall (EADS), Tero Karppinen (INSTA), and Andreas Nyberg (SAAB).References[1]	K. J. Ford, Euclid RTP11.13 Realising the Potential of Networked Simulation in EuropeEuropean SIW, June 01, Paper 01E-SIW-011.[2]	K.J. Ford, The Euclid RTP11.13 SE Development Environment, Euro SIW June 02,                     Paper 02E-SIW-007[3] K. J. Ford, Pascal Peyronnet, The Euclid RTP 11.13 Synthetic Environment Development & Exploitation Process, Fall SIW, September 01, Paper 01F-SIW-124.[4]	Marco Fabbri, Rui Nunes, Roger Davies, Erik De Koster, The Repository in support of the Synthetic Environment Development & Exploitation Process (SEDEP), ITEC 2003.[5]	K.J. Ford, The Euclid RTP11.13 Tool Suite, ITEC Paper No. 49, April 2003.[6]	J. Bachman, S. Goss, M. McAuliffe, CAFDE TDK: Facilitating Tool Interoperability and FEDEP Automation, Spring SIW , March 1999, Paper 99S-SIW-031.PAGE  PAGE  1PAGE \# "'Page: '#''"   May not be requiredTool BarTitle BarStatus BarMain Display WindowProject TreeMenu Bar