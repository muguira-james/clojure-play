A One-To-Many / Many-To-One Transformation in an HLA Gateway Between the DIS Electromagnetic Emissions PDU and the RPR FOMDouglas D. WoodInstitute for Simulation and Training3280 Progress DriveOrlando, FL 32826-0544Dwood@ist.ucf.eduKeywords:Electromagnetic Emissions; HLA; DIS; RPR-FOM; Gateway; Protocol TranslationABSTRACTABSTRACT: The DIS Electromagnetic Emissions (EE) PDU contains the information for representing an entity's electromagnetic emissions (excluding those specifically represented by other PDUs, e.g., radio, laser designator, IFF, etc.).  The EE PDU contains variable records that describe an entity's emitter systems and the emitter beams emanating from those systems.  The Real-Time Platform Reference (RPR) FOM is an HLA equivalent of the DIS standards.  The RPR FOM has broken down the representation of electromagnetic emissions into object classes for emitter systems and emitter beams. This decomposed representation results in the creation of a separate federation object for each emitter system and emitter beam.  The result is that the electromagnetic emission information for a particular entity is now associated with multiple sources (individual emitter system and beam objects) instead of just one (the EE PDU).  The differences between the EE PDU and this decomposed representation scheme and their effects on the HLA Gateway are the topic of this paper.IntroductionThe advent of the High Level Architecture (HLA) within the Distributed Interactive Simulation (DIS) community has many ramifications.  One significant concern is continuing the interoperability that currently exists under the DIS standards.  In response to this concern and to support transitioning legacy DIS simulations to HLA, the Simulation Interoperability Standards Organization (SISO) has formed a Standard Development Group (SDG) to create the Real-Time Platform Reference Federation Object Model (RPR-FOM, pronounced as “reaper fom”). The general approach is to define an object or interaction class for each DIS protocol data unit (PDU) specification.  In some cases (most prominently the Entity State PDU), a PDU specification is spread across a class derivation hierarchy (e.g., BaseEntity, PhysicalEntity, MilitaryEntity, MilitaryPlatform…).  The notion of a reference FOM introduced by this effort and an explanation of the overall RPR FOM approach is given in [1, 2].While the standardization of the RPR FOM provides a stable and familiar path for the transition of legacy DIS applications into HLA, there are many legacy applications that require a gateway approach for HLA interoperability [3]. In the gateway approach, a stand-alone interface node connects the DIS network to an HLA federation execution (see  REF _Ref455545512 \h Figure 1.1).  On the protocol side of the gateway, PDUs are formatted, sent, and received according to the DIS protocol.  The gateway receives the packets and translates them at two levels:  (1) the data in the packets is converted into the data formats defined in the FOM, and (2) the sequence of packets are translated into corresponding HLA Run Time Infrastructure (RTI) service invocations.  The gateway performs a similar conversion for data received from the HLA federation execution.  The gateway approach provides HLA interoperability to legacy DIS applications with no change to the legacy application.  The HLA Gateway implements this approach between DIS and the RPR FOM [4, 5]. EMBED Word.Picture.6  Figure  STYLEREF 1 \s 1. SEQ Figure \* ARABIC \s 1 1 Gateway InteroperabilityThis paper will examine the specific translation between the DIS Electromagnetic Emission (EE) PDU and the RPR FOM EE object classes.  First, a review of the DIS EE PDU specification is given.  This review is followed by a breakdown of how the RPR FOM approach was applied to the EE PDU.  The paper will then cover how the HLA Gateway implements the translation between the EE PDU and RPR FOM EE objects.  The paper then concludes by describing some of the issues involved with the RPR FOM EE representation.DIS Electromagnetic EmissionsThe specification of the DIS Electromagnetic Emission PDU reflects the Distributed Emission Regeneration (DER) approach.   The DER approach is based on the general principles of DIS that1) “Changes in the state of an entity are communicated by its controlling simulation application.”2) “Perception of events or other entities is determined by the receiving application.” [6] Using this approach, the DIS EE PDU specifies the state of the emissions (i.e., type of system, location of system, beam frequency, beam power, beam angles, etc.) that emanate from an entity (see  REF _Ref455394074 \h Table 6.4).  Receiving applications must then determine whether the emissions can be detected (i.e., scan patterns, beam propagation, received power, etc.).  The use of beam target lists in the EE PDU is a short cut that a sender provides when simulating narrow beam tracking or jamming emissions.  The target lists overcome correlation errors between the sending and receiving applications.An EE PDU may contain a state update or a change data (delta) update.  A state update is sent whenever an entity transitions from not emitting to emitting and subsequently one is sent after a predetermined time has elapsed since issuing the last state update.  The state update contains all active emitting systems and beams for an entity.  A delta update is sent when data changes within an emitter’s operational parameters, beam centers, or the track/jam fields.  The delta update allows for changes of emitter-state to be communicated between state updates.The layout of the EE PDU is fully variable.  The PDU may have one or more emitter systems with each system including one or more emitter beams and each beam including one or more targets (see  REF _Ref458909914 \h Table 6.4).RPR FOM Electromagnetic EmissionsThe RPR FOM has broken down the representation of EE PDU into separate object classes for emitter systems and emitter beams (see  REF _Ref455310026 \* MERGEFORMAT Table 6.1). This decomposed representation results in the creation of a separate federation object for each emitter system and emitter beam.  The result is that the EE information for a particular entity is now associated with multiple sources (individual emitter system and beam objects) instead of just one (the EE PDU).  In addition, the RPR FOM has no notion of a state update for an entity’s EE information.EmitterSystem Object ClassThe DIS protocols have several cases where a PDU describes a system that is a component of another vehicle or system (e.g., transmitter, receiver, and radar/jammer emitters).  This notion of embedded systems is represented in the RPR FOM by a generic EmbeddedSystem object class.  The EmbeddedSystem object class has a HostObjectIdentifier attribute to identify the object to which the system is attached and a RelativePosition attribute to specify where on the host object the embedded system is located (see  REF _Ref458910989 \h Table 6.2).  A redundant EntityIdentifier attribute supports the transition of DIS legacy systems and SIMAN addressing.  These attributes represent the emitting entity ID and location fields of the DIS EE PDU (see  REF _Ref455312417 \* MERGEFORMAT Table 6.5).The EmitterSystem object class is derived from the EmbeddedSystem object class and inherits its attributes.  The EmitterSystem further defines the EE specific attributes associated with emitter systems.  The EmitterSystem object class defines the EmitterFunctionCode, EmitterType, EmitterIndex, and EventIdentifier attributes (see  REF _Ref458910989 \h Table 6.2).  These attributes represent the emitter name, emitter function, emitter ID number, and event ID fields of the DIS EE PDU (see  REF _Ref455312417 \* MERGEFORMAT Table 6.5).  The emitter ID number was used in DIS to distinguish between multiple emitter systems on a single entity.  The emitting entity and emitter ID create a unique emitter system identifier.  Since the RTI associates a unique object name with every federate object, the emitter ID number is redundant as an emitter system identifier.  However, the emitter ID number is also used in data base lookups.  Thus, it is retained as an EmitterSystem attribute to support legacy DIS applications.Since each emitter system is a separate object and does not contain the beam information, there is no need for the fields: number of systems, system data length, number of beams, and beam data length.  Padding fields are similarly unnecessary since practically each of the EE PDU fields is a separate attribute.  The RTI handles the packing and unpacking of attributes into and out of packets transmitted over the network.EmitterBeam Object ClassThe EmitterBeam object class defines the primary attributes that represent the electromagnetic emission characteristics of an emitter beam.  These “fundamental parameter data” fields from the EE PDU are defined as separate attributes, allowing them to be modified and transmitted independently.  The EmitterBeam object class also defines attributes for the EE fields: beam ID number, beam function, and beam parameter index (see  REF _Ref455556961 \h Table 6.3).  The beam ID and parameter index are used for data base lookups.Regeneration of the emission from the EmitterBeam attributes requires data from the EmitterSystem object (system type and location wrt emitting entity) and emitting entity object (world location).  The EmitterBeam object defines an EmitterSystemIdentifier attribute in order to reference the EmitterSystem from which the beam emanates.  The EmitterSystemIdentifier along with the HostObjectIdentifier attribute from the EmitterSystem supports the synthesis of the data from the three objects.   The EmitterBeam also defines an EventIdentifier that can associate changes across the EmitterSystem and any other beams from that emitter.RadarBeam and JammerBeam Object ClassesThe RadarBeam and JammerBeam object classes are derived from the EmitterBeam object class and inherit its attributes.  The JammerBeam represents beams emanating from a jamming emitter. The RadarBeam represents all other emitter beams.  Both of these object classes define an attribute to represent the EE PDU beam target list.  The JammerBeam JammedObjectIdentifiers is restricted to containing object identifiers that represent emitter beams.  The RadarBeam TrackObjectIdentifiers is restricted to containing object identifiers that represent subclasses of the PhysicalEntity object class.  Both classes also define an attribute for the EE PDU high-density track/jam field.   The JammerBeam defines an additional attribute for the EE PDU jamming mode sequence (see  REF _Ref455556961 \h Table 6.3).HLA Gateway TranslationThe HLA Gateway performs data translation using the concept of FOM actors [7].  A FOM actor class is defined for each object and interaction class in the FOM.  The FOM actor class implements the data translation between the associated PDU and those attributes or parameters specified by the FOM class.  The derivation of a FOM actor class mirrors the FOM class derivation.  The data translation begins with the instantiated FOM actor class.  A process of percolating the data through the actor class hierarchy is then performed.  Each actor class in the hierarchy translates only the data that is associated with its FOM class. EMBED Word.Picture.6  Figure  STYLEREF 1 \s 4. SEQ Figure \* ARABIC \s 1 1 Entity-Actor RelationshipAn instance of a FOM object actor class is created for each object registered or discovered by the Gateway federate (see  REF _Ref390856459 \h Figure 4.1).  When registering objects (i.e., data coming from DIS to HLA), the instantiated object actor class is based on the PDU data content (e.g., entity type, emitter beam function).  When discovering objects (i.e., data coming from HLA to DIS), the instantiated object actor class is based on the discovered object's FOM object class.EE TranslationThe HLA Gateway's translation between the DIS Electromagnetic Emission (EE) PDU and the RPR FOM emission object classes requires a mapping between a single DIS PDU and multiple RPR FOM objects.  This mapping is considerably more difficult than the mapping of the Entity State PDU into the various entity object classes in the RPR FOM. A particular entity's Entity State PDU may be mapped into one of several RPR FOM object classes; however, the resulting mapping generates a single federation object and consequently a single FOM actor.  The same FOM actor thereafter handles translating the Entity State PDUs from that entity.  Similarly, an entity federate object (e.g., MilitaryGroundVehicle) generates a single FOM actor in the Gateway that translates the FOM data into Entity State PDUs.In contrast to the Entity State mapping, a single EE PDU must be mapped into a separate federate object and FOM actor for each emitter system and emitter beam contained in the PDU (see  REF _Ref458910854 \h Figure 4.2and  REF _Ref455549210 \h Figure 4.3).  Even more challenging is synthesizing the multiple EE federation objects into a single EE PDU. EMBED Word.Picture.6  Figure  STYLEREF 1 \s 4. SEQ Figure \* ARABIC \s 1 2 EE PDU and associated RPR FOM ObjectsThe EE mapping could not be implemented using the HLA Gateway standard FOM actor approach.  EmitterSystem, EmitterBeam, RadarBeam, and JammerBeam FOM actors were defined to translate the emitter system and emitter beam data similar to other FOM actors. However, unlike other FOM actors, the PDU data supplied and generated was not a complete PDU.  An additional emission "facilitator" class, not associated with any FOM class, was defined at the EE PDU level to decompose and compose the emission PDU data.When translating from DIS, the emission facilitator partitions the data at the emitter system level.  For each emitter system in the EE PDU, the facilitator creates an EmitterSystem FOM actor and registers an EmitterSystem federate object.  The facilitator then sets the emitting entity identifier in the EmitterSystem FOM actor, since this data is not part of the emitter system data.  The facilitator then passes the emitter system data (including beam data) to the EmitterSystem FOM actor.  The EmitterSystem actor processes the emitter system PDU data and submits it to the RTI.  After processing its system data, the EmitterSystem processes the beam data.  Similar to the facilitator, the EmitterSystem FOM actor partitions the emitter system data at the beam level, creating and registering RadarBeam or JammerBeam (based on beam function) FOM actors and federate objects.  Again, the EmitterSystem actor must first set the emitter system identifier in the beam actor.  The EmitterSystem FOM actor passes the beam data to the beam FOM actors to complete the translation processing. EMBED Word.Picture.6  Figure  STYLEREF 1 \s 4. SEQ Figure \* ARABIC \s 1 3 EE-Actor RelationshipThe HLA Gateway does not delete inactive EE federate objects it has created from DIS data (see section  REF _Ref455470399 \r \h 5).  They are maintained in the federation in anticipation of becoming active again at some later point.  However, the EE federate objects will be timed out and deleted from the federation, if the emitting entity has been deleted (via deactivate or time out).When translating from HLA, the HLA Gateway will discover and create EmitterSystem, RadarBeam, and JammerBeam FOM actors based on the object class submitted by the federate ambassador Discover service.  The HLA Gateway uses the object handle given in the discover service to maintain a list of these federate objects.  When the federate ambassador invokes the reflect-attribute-value service, the attributes are passed to the FOM actor designated by the submitted object handle.The EmitterSystem actor translates received attributes into DIS emitter system data types.  It then checks for a reference to an emission facilitator using an emitting entity identifier (taken from EntityIdentifier attribute directly or mapped from the HostObjectIdentifier).  If it does not exist, the EmitterSystem actor requests that one be created.  A reference to the EmitterSystem actor is then passed to the emission facilitator.  The emission facilitator adds the EmitterSystem actor to its list of emitter systems.  It then constructs an EE PDU using data from this specific EmitterSystem actor and transmits it on the DIS network.  However, the EmitterSystem data must contain beam data from at least one reflected emitter beam.  If no beam data exits, a PDU will not be sent.The EmitterBeam actor (really RadarBeam or JammerBeam) translates received attributes into DIS emitter beam data types.  It then checks for a reference to an EmitterSystem actor using the EmitterSystemIdentifier.   If one does not exist, no further processing is performed.  The EmitterBeam data can not be sent without the EmitterSystem and the federate ambassador must generate the EmitterSystem.  If an EmitterSystem actor does exist, it is given a reference to the EmitterBeam actor.  The EmitterSystem actor adds the EmitterBeam actor to its list of beams.  It then constructs a data buffer containing the DIS emitter system data including the emitter beam data from this specific EmitterBeam actor.  This emitter system data is then passed to the emission facilitator. It then constructs a PDU and transmits it on the DIS network.When an EmitterBeam object is removed from the federation, the Gateway will remove all references to its EmitterBeam actor representation.  The removal of an EmitterSystem object from the federation similarly causes all EmitterSystem actor references to be removed. In addition, the Gateway will remove all of the EmitterBeams associated with the EmitterSystem actor.  Subsequent attribute reflections of these orphaned EmitterBeams will be dropped.In addition to transmitting reflected data from the EmitterSystem and EmitterBeam actors, the emission facilitator must also produce the EE state update PDUs.  It generates these PDUs by walking through its list of EmitterSystem actors and appending the emitter system data onto the EE PDU.  In this process, each EmitterSystem similarly walks through its list of EmitterBeams and appends the emitter beam data to its emitter system data.  The result is a complete list of active emitter systems and emitter beams for the entity associated with the emission facilitator.DIS / RPR FOM / Gateway ISSUESThe implementation of the EE translation in the HLA Gateway brought up several issues.  Some of these issues are strictly related to the gateway approach. Some of the issues effect any federate using the RPR FOM EE object classes.Both in DIS and the RPR FOM, there is no standard method for specifying when an emitter beam is inactive.  In DIS, inactive systems and beams can only be inferred by the requirement that all active systems and beams are included in the state updates (i.e., if a system or beam is absent from a state update, it has become inactive).  The author is aware of two methods that have been used to indicate inactive emitter beams. One method is by setting the beam parameter index (mode and database lookup index) to zero. Another method is to set the effective radiated power to zero, thereby, making the emitter undetectable.  In HLA, a federate can simply delete inactive EmitterBeam objects from the federation; however, there is significant overhead associated with the HLA services for register and delete.  This method also brings up the issue of whether it is correct to allow a specific simulation object to enter, leave, and then reenter a federation. Unless specifically accounted for, this type of behavior can cause problems.  Because the current RPR FOM is targeting the DIS protocol, for the most part warts and all, it has not specified any guidance on this issue.The current HLA Gateway does not delete any EE federate object.  If a DIS emitter beam becomes inactive (i.e., omitted from the EE PDU or no additional EE PDUs received), the Gateway will maintain the associated EmitterBeam object with the last received state.  This situation can lead to invalid states if there is no established mechanism for specifying inactive beams using attribute values as described above.  The HLA Gateway is more proactive when processing data coming from HLA to DIS.  It uses the two methods described above to indicate inactive beams and filters any data from these beams.  It does this in order to prevent transmission of inactive beams in the state updates. The use of this method is under review.The order in which EmitterSystem and EmitterBeam objects are registered and updated is significant.  Because an EmitterBeam references the EmitterSystem, the EmitterSystem must be registered before the EmitterBeam can update. Otherwise, the EmitterBeam would not have a valid EmitterSystemIdentifier.  It follows that the EmitterSystem should perform an update before any of its beams so that receiving federates will have a complete system state when the beam data is received. Otherwise, the beam can not be regenerated because it would lack the emitter type and location.The fact that an EmitterSystem and its EmitterBeams are separate objects can result in invalid states.  An emitter system mode change may result in more than one beam changing its state.  Because these state changes are reflected separately, a receiving federate can temporarily have mixed state data.  The EmitterSystem and EmitterBeam have an EventIdentifier that can tie these state changes together.  A standard method of sending EmitterSystem and EmitterBeam changes with matching EventIdentifiers might be needed to coordinate these emitter state updates.The HLA Gateway does not transmit a state update when an entity transitions from not emitting to emitting as required by the DIS standard.  Since the Gateway receives EE data from separate EmitterSytem and EmitterBeam objects, there is no clear mechanism to enable the HLA Gateway to handle this requirement.  Further, any attempt to satisfy this requirement would add latency to the data translation.  As a result, the Gateway sends data as soon as it is received using the delta update.  The state update follows after the update threshold.Each EE object reflection from HLA is transmitted as a separate EE PDU. Simultaneous changes to a system and its beams will generate multiple and separate EE PDU transmissions.  Also, changes to the system function that relate to changes in the beam are reflected separately.  The resulting PDUs may have system and beam data that conflict with each other (i.e., a new system function with old beam data).Unlike other PDU translation that generate a single RTI service call, a single EE PDU can create multiple update attribute service calls. Multiple service calls for a single translation decreases the throughput of the Gateway.TablesTable  STYLEREF 1 \s 6. SEQ Table \* ARABIC \s 1 1 EE Object ClassesBase Class1st SubclassEmbeddedSystemEmitterSystemEmitterBeamRadarBeamJammerBeamTable  STYLEREF 1 \s 6. SEQ Table \* ARABIC \s 1 2 EmitterSystem Object ClassObjectAttributeDatatypeEmbeddedSystemEntityIdentifierEntityIdentifierStructHostObjectIdentifierRTIObjectIdStructRelativePositionRelativePositionStructEmitterSystemEmitterFunctionCodeEmitterFunctionEnumEmitterTypeEmitterTypeEnumEmitterIndexoctetEventIdentifierEventIdentifierStructTable  STYLEREF 1 \s 6. SEQ Table \* ARABIC \s 1 3 EmitterBeam Object ClassesObjectAttributeDatatypeEmitterBeamBeamAzimuthCenterfloatBeamAzimuthSweepfloatBeamElevationCenterfloatBeamElevationSweepfloatBeamFunctionCodeBeamFunctionCodeEnumBeamIdentifieroctetBeamParameterIndexunsigned shortEffectiveRadiatedPowerfloatEmissionFrequencyfloatEmitterSystemIdentifierRTIObjectIdStructEventIdentifierEventIdentifierStructFrequencyRangefloatPulseRepetetionFrequencyfloatPulseWidthfloatSweepSyncfloatRadarBeamHighDensityTrackBooleanTrackObjectIdentifiersRTIObjectIdArrayStructJammerBeamHighDensityJamBooleanJammingModeSequenceUnsigned longJammedObjectIdentifiersRTIObjectIdArrayStructTable  STYLEREF 1 \s 6. SEQ Table \* ARABIC \s 1 4 DIS Electromagnetic Emission PDU [6]Electromagnetic Emissions PDU FieldsProtocol Version(8-bit enumerationExercise ID(8-bit unsigned integerPDU Type(8-bit enumerationPDU HeaderProtocol Family(8-bit enumerationTime Stamp(32-bit unsigned integerLength(16-bit unsigned integerPadding(16 bits unusedEmittingSite(16-bit unsigned integerEntityApplication(16-bit unsigned integerIDEntity(16-bit unsigned integerSite(16-bit unsigned integerEvent IDApplication(16-bit unsigned integerEvent Number(16-bit unsigned integerState Update Indicator8-bit enumerationNumber of Systems (N)8-bit unsigned integerPadding16 bits unusedSystem Data Length8-bit unsigned integerNumber of Beams (M)8-bit unsigned integerPadding16 bits unusedEmitter Name(16-bit enumerationEmitter SystemFunction(8-bit enumerationEmitter ID Number(8-bit unsigned integerLocationx-Component(32-bit floating point(with respecty-Component(32-bit floating pointto entity)z-Component(32-bit floating pointBeam Data Length8-bit unsigned integerBeam ID Number8-bit unsigned integerBeam Parameter Index16-bit unsigned integerFrequency(32-bit floating pointFrequency Range(32-bit floating pointERP(32-bit floating pointFundamentalPRF(32-bit floating pointParameterPulse Width(32-bit floating pointDataBeam Azimuth Center(32-bit floating pointBeam Azimuth Sweep(32-bit floating pointBeam Elevation Center(32-bit floating pointBeam Elevation Sweep(32-bit floating pointBeam Sweep SYNC(32-bit floating pointBeam Function8-bit enumerationNumber of Targets in the Track/Jam Field8-bit unsigned integerHigh Density Track/Jam8-bit enumerationPadding8 bits unusedJamming Mode Sequence32-bit unsigned integerSite(16-bit unsigned integerApplication(16-bit unsigned integerTrack/JamEntity(16-bit unsigned integerEmitter ID(8-bit unsigned integerBeam ID(8-bit unsigned integerTable  STYLEREF 1 \s 6. SEQ Table \* ARABIC \s 1 5 DIS/RPR FOM EE Mapping [1]DIS FieldFOM ClassFOM AttributesPDU HeaderN.A.Emitting Entity IDEmbeddedSystemHostObjectIdentifierEvent IDN.A.State Update IndicatorN.A.Number of SystemsN.A.System Data LengthN.A.Number of BeamsN.A.Emitter System: Emitter nameEmitterSystemEmitterTypeEmitter System: FunctionEmitterSystemEmitterFunctionCodeEmitter System:Emitter ID numberEmitterSystemEmitterIndexLocation (with respect to entity)EmbeddedSystemRelativeLocationBeam Data LengthN.A.Beam ID NumberEmitterBeamBeamIdentifierBeam Parameter IndexEmitterBeamBeamParameterIndexFundamental Parameter Data: FrequencyEmitterBeamEmissionFrequencyFundamental Parameter Data: Frequency RangeEmitterBeamFrequencyRangeFundamental Parameter Data: Effective Radiated PowerEmitterBeamEffectiveRadiatedPowerFundamental Parameter Data: Pulse Repetition FrequencyEmitterBeam PulseRepetitionFrequencyFundamental Parameter Data: Pulse WidthEmitterBeamPulseWidthFundamental Parameter Data: Beam Azimuth CenterEmitterBeamBeamAzimuthCenterFundamental Parameter Data: Beam Azimuth SweepEmitterBeamBeamAzimuthSweepFundamental Parameter Data: Beam Elevation CenterEmitterBeamBeamElevationCenterFundamental Parameter Data: Beam Elevation SweepEmitterBeamBeamElevationSweepFundamental Parameter Data: Beam Sweep SyncEmitterBeamSweepSynchBeam FunctionEmitterBeamBeamFunctionCodeNumber of Targets in the Track/Jam FieldTrackBeam, JammerBeamNumberOfTrackObjects, NumberOfJamObjectsHigh Density Track/JamTrackBeam, JammerBeamHighDensityTrackInUse, HighDensityJamInUseJamming Mode SequenceJammerBeamJammingModeSequenceTrack/Jam: Site/Applic/EntityJammerBeamJammmedObjectIdentifiersTrack/Jam: Emitter IDEmitterBeamEmitterIndex (of emitter targeted by jammer)Track/Jam: Beam IDEmitter BeamBeamIdentifier (of beam targeted by jammer)References[1]	RPR FOM Standard Development Group,  http://www.sisostds.org/stdsdev/rpr-fom/index.htm and  http://confs.sc.ist.ucf.edu/listprocedu/index.cfm [2]	Shanks, Graham C., "The PnP FOM A Reference Federation Object Model to Promote Simulation Interoperability", 1997 Spring Simulation Interoperability Workshop, March 3-7, 1997[3]	Petty, M. D. and Harkrider, S. M.: "HLA Interoperability for Existing Simulations", Proceedings of the 1997 Summer Computer Simulation Conference, Arlington VA, July 13-17 1997.[4]	Wood, D. D., Petty, M. D., Cox, A.: “An HLA Gateway for DIS Applications”, Proceedings of the 19th Interservice/Industry Training Systems and Education Conference, Orlando FL, December 1997.[5]	Wood D. D., Petty, M.D., "HLA Gateway 1999," Proceedings of the 1999 Spring Simulation Interoperability Workshop, Orlando FL, March 14-19, 1999. [6]	IEEE (1995), Standard for Distributed Interactive Simulation—Application Protocols, IEEE Standards Department, Piscataway, NJ, 1995[7]	Wood, Douglas D., "An Object-Oriented RTI Interface", 1997 Fall Simulation Interoperability Workshop, September 8-12, 1997Author BiographiesDOUGLAS D. WOOD is a Research Computer Scientist at the Institute for Simulation and Training. Mr. Wood has performed research primarily in the area of distributed simulation, including HLA experiments, electronic warfare protocols, emergency management training, and algorithms for computer generated forces.  Mr. Wood received an MS and BS in Computer Science from the University of Central Florida.  His research interests are in simulation and distributed systems.