The Distributed Simulation Repository (DSR):Realizing Collaboration and Reuse through P2P CommunitiesShawn Parr, Anthony JonesCalytrix Technologies Pty LtdTechnology Park, Bentley, WA 6102Australia+61 8 9362 5300 (GMT +8 hours)shawn.parr@calytrix.comanthony.jones@calytrix.comKeywords:Simulation Repository, Peer-to-Peer Architecture, JSAF, FOM-Agility, and MDA.ABSTRACT: One of the key challenges facing any large project or organisation is its ability to develop and maintain effective collaboration between its members. This challenge is particularly an issue when considering highly distributed organisations; where skills, resources and knowledge are spread across a wide range of groups and geographic locations.One of the major impediments to realizing collaboration across technology groups is their inability to effectively manage, locate and share artifacts. These artifacts take the form of project specifications, requirements and source code packaged as reusable components. In order to facilitate improved collaboration and reuse, the Australian Defence Simulation Office (ADSO) and the Australian Defence Sciences Technology Organisation (DSTO), in conjunction with Calytrix Technologies, have been developing a proof-of-concept Distributed Simulation Repository (DSR).This paper will look at the DSR architecture, discussing such issues as peer-to-peer (P2P) storage versus more traditional centralized approaches; the use of metadata to allow sophisticated searching; and the development of intelligent plug-ins to enable ‘round-trip-storage’ of simulation component between applications. This paper will close with an example of a unified simulation environment, which uses the DSR to integrate HLA (1.3 and 1516), JSAF and SIMplicity artifacts in a holistic way across a number of geographically distributed teams.IntroductionThe Australian Defence Simulation Office (ADSO), the Defence Science and Technology Organisation (DSTO) and Calytrix Technologies established the Distributed Simulation Repository (DSR) project to investigate the application of a peer-to-peer (P2P) architecture to the challenges of creating a non-centralized, organization-wide data repository solution. In particular, the DSR attempts to provide a mechanism within the DSTO’s simulation community to encourage and enable collaboration and reuse between its geographically distributed working groups.The DSR provides a virtually centralized but physically distributed repository service - artifact storage and retrieval – over a computer network (corporate LAN, WAN or the Internet) based on a P2P architecture. The initial scope of the DSR project was limited to the technology aspects of building a P2P repository, and demonstrated the following core capabilities:A distributed virtual storage system built on a P2P architecture;An ability to create ad-hoc repositories or communities without requiring administrative IT support or dedicated server hardware (no centralized servers or equipment);Basic artifact redundancy and fail-over strategies;Version control and configuration management;The application of XML meta-resource descriptors for describing and locating digital artifacts across a physically distributed network; andThe ability to integrate disparate simulation environments in a unified manner, namely SIMplicity and JSAF, through the DSR.This paper examines the motivation for developing the DSR as opposed to using existing centralized approaches; summarizes the concepts, features and architecture of the DSR prototype; provides a summary of the demonstration conducted; and provides a direction forward for this type of initiative.Motivations for Building the DSRIf Napster [ REF _Ref77412958 \n \h 1], arguably the world’s first global peer-to-peer file sharing applications, taught us just one thing, it was that P2P works. At its peak Napster recorded more than 38 million users worldwide, with over one million users logging on each day [ REF _Ref77412476 \n \h  \* MERGEFORMAT 2]. While the legal ramifications of the first iteration of Napster have been called into question; from a technology perspective Napster was able to bring literally millions of online users togeather to share files in a very flexible, efficient and low cost manner. While from an implementation perspective Napster did require a central server to provide filename look-up services (newer P2P file exchange systems like Kazza [ REF _Ref77732933 \r \h 3] and EDonkey/OverNet [ REF _Ref77732943 \r \h 4] do not have such dependencies), from a user’s perspective there was little if any overhead in joining and exchanging files over the Napster P2P framework.These ‘ease of use’ and low cost of entry characteristics are not generally reflected in the commercial repository sector; which typically requires considerably more resources and effort to develop and maintain. While the scope of these two domains is different, there are clearly lessons to be learnt from the P2P file sharing experience. Against this background, the motivations for the DSR prototype can be summarized as follows:To develop a general-purpose repository service layer that sits above an existing open-source P2P architecture (e.g. Sun’s JXTA [ REF _Ref77492273 \r \h 5]) that requires no centralized server or dedicated hardware requirements.Rather than creating one large single distributed repository (i.e. the Napster model), the DSR needs to explore how ad-hoc repositories or communities could be easily and rapidly created in order to encourage collaboration between groups of related users, while still maintaining the knowledge pooling benefits that are possible with a coordinated research effort.To explore the application of such a framework beyond file sharing. This point encompasses the:Ability to package related files into reusable artifacts. For example, an artifact may be a single Microsoft Word document, a collection of Microsoft Office files, or a simulation component, such as an HLA federate, encapsulating all of its source, interface (SOM, FOM), system and help files.Application of flexible metadata descriptors to concisely describe artifacts. This was seen as a crucial success factor in determining if the DSR could in fact be successfully used for storing and retrieving artifacts across a distributed network; andIntegration of version control, workflow and configuration services to help manage distributed artifacts. The goal was not to replace existing services like CVS or Rational ClearCase™, but rather to integrate with such services, as well as to provide artifact level control.Examine the concept of “round-trip-storage”. Underpinning this concept is the notion that for a repository to be truly useful it needs to integrate at some level with existing environments. In the context of simulation, ideally the DSR would provide integration with existing simulation frameworks to demonstrate how different systems could be unified through the ability to export and import artifacts between products. This ability directly addresses collaboration, reuse and interoperability of simulation artifacts/components.Finally, we wanted to understand where a repository service like the DSR would fit into a ‘unified simulation infrastructure’ based on the Object Managements Group’s (OMG) Model Driven Architecture (MDA) approach [ REF _Ref77489731 \r \h 7]. Based on these broad areas of interest a DSR prototype was developed and demonstrated. The following section will outline the basic architecture and concepts of the DSR.DSR OverviewThe DSR is a set of repository services built on top of Sun Microsystems’s open-source JXTA™ P2P architecture [ REF _Ref77492273 \r \h 5,  REF _Ref77492283 \r \h 6]. The DSR delivers virtually centralized but physically distributed artifact storage facilities over an Intranet or the Internet. Unlike existing centralized and web-based repository solutions, the DSR allows any distributed user (simulation developer) to create ad-hoc repositories and then invite other team members to collaborate, all without the assistance of a systems administrator or the need for any dedicated server hardware.Core Repository ConceptsThe DSR can broadly be split into two key concepts, namely: Artifacts; and Repositories.ArtifactsThe DSR is populated with digital artifacts, where an artifact is a collection of one or more related files. In many respects an artifact is like a component package in the software industry as it contains all the files, manifest lists and metadata descriptions required to make it useful in its own right.For example, an artifact may be a single Microsoft Word document, a collection of related Microsoft Office files, or a software component, such as an HLA federate, encapsulating all of its source, interface (SOM, FOM), system and help files. Intrinsically there are no limits to the types of artifacts that can be created and stored in a repository.RepositoryThe DSR provides an easily accessible repository mechanism for storing and retrieving artifacts across a computer network. While from a user’s perspective a repository is presented as a single virtual file-store (a collection of artifacts) that can be accessed and searched from any location, it is physically comprised of loosely coupled nodes (computer devices) distributed across an organization’s Intranet or over the World Wide Web in a peer-to-peer configuration. Figure 1 shows the relationship between the various computers in a network, the repositories that exist, and the physical versus virtual storage of artifacts. It is worth noting that the physical arrangement of artifacts on a network can be based on a traditional central-server model, a completely distributed P2P arrangement or a hybrid of the two models, depending on how the system is going to be used and the reliability characteristics required.DSR ArchitectureFigure 2 provides a high-level architectural overview of the DSR prototype.The core components of this architecture can be summarized as follows:User Interface Layer The architecture diagram starts with the User Interface Layer at the top. This layer provides a set of open APIs for the implementation of User Interfaces (UI) based on a model-view-controller pattern. The initial prototype shipped with a Java client and a web interface running Servlets on a Tomcat server.  This layer and API could potentially allow tighter integration between the DSR and third-party applications. A command-line interface to the DSR is also seen as a desirable feature.Repository Services LayerThis layer provides all the core services of the DSR, including:Creating and managing repositories;Storing and retrieving artifacts; andArtifact searching.Artifact Plug-In Layer The Artifact Plug-In layer provides a flexible way to expand the way the DSR uses and interacts with different types of artifacts and environments. For example, the Microsoft Office Artifact Plug-In automatically extracts metadata from Office files (e.g. .doc, .xls, and .ppt files) when the artifact is imported into the DSR, and automatically launches the appropriate Office application (e.g. Word, Excel or PowerPoint) when the artifact is extracted. The Artifact Plug-In provides an open API to extend the DSR capabilities, delivering: A mechanism to package related files into artifacts;An ability to extract existing metadata to describe the artifact; A mechanism to unpack an artifact when it is retrieved from a repository; andA launch service to open/compile/execute an artifact in its target environment.The Artifact Plug-In layer allows the DSR to explore the concept of round-trip-storage for artifact usage. As part of the DSR prototype we developed JSAF and SIMplicity plug-ins to demonstrate the concept of a unified simulation development environment based on common repository services (see section  REF _Ref77734783 \r \h 4.2  REF _Ref77734783 \h  \* MERGEFORMAT DSR integration with JSAF and SIMplicity).Metadata Plug-In LayerFor a repository service to be successful, it is crucial that adequate metadata can be provided to describe the stored artifacts. While the DSR’s standard metadata schemas maintain core information on an artifact such as the author, owner, date, description etc, the Metadata Plug-In layer allows DSR user to add additional XML schemas to extend the information maintained for a particular artifact type, or to comply with an organization’s specific naming convention.Data Storage Layer This layer manages all the physical storage and configuration management of artifacts.  There is an open API plug-in layer within the Data Store layer to allow additional databases (MySQL, Oracle etc.) and potentially configuration management systems (CVS, Rational ClearCase etc.) to be added.Network LayerThis layer provides a general purpose API to all the DSR network services, including discovery, search requests, and artifact transfers across the network.Peer to Peer LayerUnderneath the Network layer are the P2P services. It is this layer that provides the physical networking layer and services to the system, including firewall management and other physical services. The DSR uses Sun Microsystems’s JXTA™ open-source P2P framework; but again this layer could be extended to incorporate additional networking protocols, including proprietary networking requirements. NetworkThis is the physical LAN or WAN network connection. DSR Prototype Features SummaryThe DSR prototype was developed and trialled over a six-month period. The core features of the final release can be summarized as follows:The ability to create and share repositories across a distributed network;The ability to store and retrieve artifacts from a repository;Check-in and check-out services to manage artifact versioning;Support for Microsoft Office, JSAF and SIMplicity artifacts through the Artifact-Plug-In layer;The use of customisable XML metadata resource descriptors to describe artifacts; andBasic redundancy services to ensure that artifacts remain available even if parts of the network are unavailable.DSR InterfaceA core consideration of this work was the design of the User Interface. Given the wide acceptance and ‘ease of use’ characteristics of ‘Google’, a similar web metaphor and look and feel was adopted by the DSR for the development of the main searching interface. Two user interfaces where developed for the DSR prototype. The first was a Java 1.4 application; the second was a web-based client using Java Servlets that provided limited capabilities (search and extraction only).This section has provided an overview of the DSR architecture and features, as well as describing the development progress to date. The following section will describe trials of the DSR prototype and how these have started to address some of the explore the project motivations outlined earlier.DSR DemonstrationAs part of the DSR project a demonstration of the core concepts was conducted at DSTO facilities in Canberra, Australia, in June 2004.  The trial involved three distributed sites across Australia and investigated the integration of the DSR with the Joint Semi-Automated Forces (JSAF) [ REF _Ref77576157 \r \h 8] environment and the COTS simulation development environment Calytrix SIMplicity [ REF _Ref77576167 \r \h 9]. This section will outline the reasons for selecting JSAF for the DSR demonstration; detail how the various Artifact Plug-Ins were developed; and outline the various aspects of the demonstrated and how the related to the projects original motivations.JSAFJSAF is a Semi-Automated Force environment used for populating a synthetic battlefield with friendly and opposing entities, as required, to meet the objectives of a simulation [ REF _Ref77576157 \r \h 8]. For the purposes of the demonstration it was decided to examine the benefits the DSR might be able bring to a localized version of the JSAF environment. While JSAF is well established and used by several different groups across the Australian Defence Forces, a number of issues relating to the development and documentation processes were identified that made JSAF a suitable candidate for the DSR demonstration, namely:There is currently no common repository service in operation between the various JSAF development groups, resulting in duplicated effort and incompatibility issues;There is no easy mechanism for users to document and describe their JSAF environments and the various representations, entities and federates that where being used or developed; Similarly, there is no easy way for developers to find and reuse existing JSAF assets between groups;It is time consuming and difficult to manually package and distribute localized JSAF representations between developers (e.g. there are approximately 11 files or part-files that need to be identified and shipped for a simple JSAF representation to be reused successfully);There are various Federation Object Models (FOM) and RTIs in use across the various groups, in particular the DMSO RTI-S, NG6 and NG6.4.1 RTIs for HLA 1.3. Both of these issues were introducing interoperability and reuse problems between JSAF versions and between different HLA simulations; andMerging and recompiling localized JSAF representations and federates is performed manually, which is proving time consuming and problematic.In addition to representing a real problem, these issues provided an opportunity to test the DSR against the original motivations setout for the DSR prototype (see Section  REF _Ref77578069 \w \h 2 -  REF _Ref77578069 \h  \* MERGEFORMAT Motivations for Building the DSR).DSR integration with JSAF and SIMplicity In order to provide a solution for JSAF and address the motivations in section  REF _Ref77578069 \w \h 2, the DSR trials demonstrated the following:The application of a JSAF Artifact Plug-In to address the issues outlined above (section  REF _Ref77678157 \r \h 4.1).Integration with Calytrix SIMplicity to provide an HLA development environment to support JSAF Federate creation.The DSR’s ability to manage generic simulation components based on the Model Driven Architecture (MDA). This item explored how generic simulation components stored in the DSR could be transitioned between the various simulation standards (e.g. DIS, HLA, 1516) using MDA based tools to improve reuse and interoperability [ REF _Ref77489731 \n \h 7,  REF _Ref77581180 \n \h 10,  REF _Ref77589144 \n \h 11,  REF _Ref77581361 \n \h 12]. The use of a data transformation service [ REF _Ref77581215 \n \h 13] to manage FOM agility issues between HLA Federates and the various JSAF FOMs.While the last two points go beyond the immediate scope of the DSR in regards to its functionality, they are nevertheless seen as crucial factors in realizing the full potential for reuse and interoperability.JSAF Artifact Plug-InArtifact Plug-Ins are developed in Java and comply with the DSR’s open API. There are no intrinsic limitations on what a developer can do inside a plug-in’s code.  Nor are there any limitations on the number of available plug-ins.Working with a domain expert, a JSAF Artifact Plug-In was developed to allow JSAF representations to be:Packaged: This involved writing code to identify the various files and part-files that needed to be maintained in the JSAF artifact to allow it to be a reused by anther developer;Described: An XML based metadata descriptor was created to describe additional information about the JSAF representation, including the entity id, entity description, entity type, FOM and JSAF versions, and various other specifics; andUnpacked and compiled: An unpackaging script was written which extracted all the various files from the artifact, and where necessary merged the representation changes into existing JSAF files (checking for redundancy and errors) and then automatically recompiling JSAF as required. This Artifact Plug-In allowed a JSAF developer to easily identify the localized JSAF representation they were working on and import them into the DSR as self-contained artifacts. These artifacts could then be located in a repository through the DSR interface and automatically merged and recompiled back into JSAF as part of the export process.SIMplicity Plug-InCalytrix SIMplicity is an integrated simulation development environment (IDE) that enables developers and scientists to rapidly assemble component-based simulations from new and pre-existing components in a visual environment. SIMplicity provides the developer with an MDA based software modeling environment and code generation engine for simulation development. SIMplicity version 3.2 supports a number of HLA 1.3 and 1516 implementations, including the various RTIs supported by JSAF, with DIS generation and gateway services currently under development. SIMplicity also has built in support for the JSAF marshalling model and execution requirements [ REF _Ref77576167 \r \h 9,  REF _Ref77581215 \r \h 13].In a similar fashion to the JSAF support, an Artifact Plug-In was developed for SIMplicity to allow rapid packaging and unpackaging of SIMplicity Federates into the IDE, including the ability to recompile federates for the target RTI as part of the export facility. This task was significantly simplified as SIMplicity already generated self-contained component packages and ships with a similar component repository (much of which formed the basis for the DSR work).Addressing Reuse at the Simulation Behavior LevelOne of the challenges facing the various JSAF groups was the interoperability issues between the various RTIs they were using, as well as reuse issues with other HLA simulation projects. For example, a Federate compiled for RTI-S (JSAF’s internal RTI) would not directly run with the DMSO 1.3 NG6 RTI.  In addition, any Federate development investment made against DMSO 1.3 NG 6.4.1 for JSAF could not be reused easily in a newer HLA 1516 environment despite the existence of supplementary gateway products. These issues raise the broader question of how to facilitate interoperability and reuse between different environments, and how systems can be transitioned as standards and platforms change. This is a crucial factor in the reuse cycle, and therefore the broader application of technologies like the DSR.  To address these types of issues there has been a lot of recent discussions into the application of the Object Management Group’s (OMG) Model Driven Architecture for simulation development [ REF _Ref77489731 \n \h 7,  REF _Ref77581180 \r \h 10,  REF _Ref77589144 \n \h 11,  REF _Ref77581361 \n \h 12]. One of the key aspects of this approach is the separation of the behavioral aspects of a simulation component at a platform independent level from the integration aspects of component at the platform specific level. In conjunction with a concise simulation component model and code generation engine, the MDA approach allows the isolated behavior logic to become the reusable asset, not the whole component.  Figure 4 provides an overview of the various parts of a suitable component model for simulation.From a DSR perspective this means that the behavior logic, and its related model and supporting files, now becomes the reusable artifact. Figure 5 describes the relationship between the component model (step 1), the MDA code generation tools (steps 2 and 3) and the DSR (step 4).By focusing the reuse effort at the behavior level the DSR trial was able to demonstrate how behavior developed for a JSAF supported RTI (e.g. DMSO RTI 1.3 NG6) could easily be transitioned to another environment (e.g. to HLA 1516) using the existing SIMplicity Artifact Plug-In; and in the process demonstrating significantly improved reuse and interoperability both within the various JSAF systems and between different environments, standards and platforms.Data Transformations ServiceThe other key aspect for realizing reuse and interoperability is the ability to perform data transformations between semantically equivalent but syntactically different components. In HLA this issue is often referred to as FOM-Agility. FOM-Agility was a particular issue for the DSR JSAF demonstration, as different versions of JSAF use different FOMs (e.g. the RPR FOM vs. the MNE3 FOM).  In addition, there was also a potential need to integrate existing HLA federates into JSAF that again used different FOMs.While a number of commercial gateway tools exist for the scope of this demonstration we used the FOM-Agility services in SIMplicity [ REF _Ref77576167 \r \h 9,  REF _Ref77581215 \r \h 13] to demonstrate how data transformations could be delivered via the DSR. Figure 6 shows a snapshot of a data transformation diagram in SIMplicity. This figure shows data coming in from the right, passing through a reusable toolkit transformation component in the middle (e.g. to change a FOMs Object Class name or to provide a conversion algorithm such as Celsius to Fahrenheit), resulting in a syntactically equivalent data object on the left. As SIMplicity toolkits are also maintained as separate components in code they become reusable artifacts in the DSR. Extensions to the Artifact Plug-In would allow toolkits to be stored in the DSR, with additional metadata describing the components or FOMs they have been used with. Ultimately it should be possible for the DSR to automatically identify and extract any toolkit conversations needed to integrate different systems.Final DeliverableThe final demonstration tied JSAF, HLA, SIMplicity and MDA concepts into a single environment, demonstrating the ability to: Package JSAF representations and HLA federates into easily distributable self-contained artifacts; Locate JSAF and HLA artifacts across a distributed network using customized XML metadata descriptors;Extract the various artifacts in a useful manner, including unpackaging the files to physical storage, source code merging and compilation, and execution; Data transformation services to help manage FOM-Agility issues; andTransition developed behavior logic between systems and standards using the Model Driven Architecture.Together these features have started to demonstrate how a common repository system like the DSR, in conjunction with MDA and transition tools, could be used to create a unified simulation development environment (see Figure 5) that ties new and legacy systems togeather. Cultural ConsiderationsBeyond the technical aspects of the DSR addressed in the previous sections, consideration also needs to be given to some of the cultural issues associated with reuse and interoperability across an organization. These issues include: Understanding the entrenched cultural and behavioural issues of the user-base towards collaboration and reuse.  These issues will impact how a common repository should be implemented and the ultimate success of the project; Developing a good understanding of the ‘buy versus build’ equation in relation to reuse, including the decision processes around determining an acceptable level of feature compromise when considering reuse; Implementing a verification and accreditation process for stored artefacts; andEstablishing a mechanism or a rewards program to encourage reuse.The answers to these questions will vary between organizations, but will ultimately determine the long-term successes of any repository solution.  ConclusionWhile still undergoing development, the DSR prototype has already shown its potential for improved collaboration, reuse and interoperability between distributed simulation developers. Key to this has been: The application of a P2P architecture, removing the DSR’s reliance on dedicated hardware or central IT support;The ability for users to easily create ad-hoc repositories, which in turn encourage collaboration between small groups while still maintaining the knowledge pooling benefits of a centralized approach; The implementation of specialized XML schemas for describing and locating artifacts across a distributed network; The ability to transition simulation behaviour code stored in the DSR to different platforms through the MDA process; andA mechanism within the DSR to integrate existing systems like JSAF and SIMplicity into a unified environment. Underlying the goals of the DSR and the ‘unified simulation environment’ created to demonstrate the prototypes core features is the potential to better leverage simulation investment in order to deliver greater interoperability and reuse within and between organizations, ultimately leading to faster, better and more cost effective simulation development.AcknowledgmentsThe authors would like to acknowledge the support and technical assistance provided by the Australian Defence Simulation Office (ADSO) and the Australian Defence Sciences Technology Organization (DSTO) throughout the development of the Distributed Simulation Repository prototype and subsequent trials. References[ LISTNUM "Ref"]	Napster, “Napster™ Home Page”,  HYPERLINK "http://www.napster.com" http://www.napster.com, accessed July 2004[ LISTNUM "Ref"]	“Napster”, San Jose Mercury News, November 1, 2000, pg.1, 20A[ LISTNUM "Ref"]	Kazza, “Kazza Home Page”,  HYPERLINK "http:// www.kazaa.com/" http:// www.kazaa.com/, accessed July 2004[ LISTNUM "Ref"]	MetaMachine, “eDonkey2000 - OverNet”, http://www.edonkey2000.com, 2003[ LISTNUM "Ref"]	Sun Microsystems, “Project JXTA”,  HYPERLINK "http:// wwws.sun.com/software/jxta" http:// wwws.sun.com/software/jxta, accessed July 2004[ LISTNUM "Ref"]	JXTA Home Page, “JXTA, Find it, Get it, Use it”,  HYPERLINK "http://www.jxta.org/" http://www.jxta.org/, accessed July 2004[ LISTNUM "Ref"]	Object Management Group, “OMG Model Driven Architecture - The Architecture of Choice for a Changing World®”, http://www.omg.org/mda, March 2002[ LISTNUM "Ref"]	United States Joint Forces Command, “Joint Semi-Automated Forces (JSAF) User’s Guide”, 17 June, 2003[ LISTNUM "Ref"]	Calytrix Technologies, “Calytrix SIMplicity Home”,  HYPERLINK "http://www.simplicity.calytrix.com" http://www.simplicity.calytrix.com, assessed July 2004[ LISTNUM "Ref"]	Radeski, A., & Parr, S. “Towards a Simulation Component Model for HLA”. Proceedings of the 2002 Fall Simulation Interoperability Workshop (SISO Fall 2002). Paper ID 02F-SIW-079. September 2002.[ LISTNUM "Ref"]	Tolk, A., “Avoiding another Green Elephant - A Proposal for the Next Generation HLA based of the Model Driven Architecture”, Proceedings of the 2002 Fall Simulation Interoperability Workshop (SISO Fall 2002). Paper ID 02F-SIW-004, November 2002.[ LISTNUM "Ref"]	Parr, S. & Keith-Magee, R, “Making the Case for MDA”, Proceedings of the 2003 Spring Simulation Interoperability Workshop (SISO Fall 2003). Paper ID 03F-SIW-026. September 2003.[ LISTNUM "Ref"]	Parr, S. “A Visual Tool for Simplifying the Building of Distributed Simulations in HLA”, The International Journal for Information and Security, Volume 12, November 2003, page 151.Figure 1. P2P Architecture in DSRRepositoryRepositoryServer based  RepositoryFigure 6. Data transformation diagram in SIMplicity [ REF _Ref77576167 \r \h 9,  REF _Ref77581215 \r \h 13]Reusable component behavior  JSAFSTEP 3: Generate/deploy the reusable business logic to any simulation architecture [ REF _Ref77581361 \r \h 12].  1516STEP 4: Store reusable components in a Distributed Repository (e.g. DSR).STEP 1: Develop a Component Model [ REF _Ref77581180 \r \h 10] to support simulation development (e.g. DIS, HLA, 1516, JSAF)STEP 2: Model simulations independent of the architecture using MDA based tools (e.g. Calytrix SIMplicity [ REF _Ref77576167 \r \h 9])Figure 5. Unified simulation development environment incorporating a component model, MDA tool set and a distributed repositoryShared Storage  Personal RepositoryVirtual StoragePhysical Artifact on DiskFigure 3. DSR InterfaceFigure 4. Simulation Component Model [ REF _Ref77581180 \r \h 10]Figure 2. DSR ArchitectureComputer