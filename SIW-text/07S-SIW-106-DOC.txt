Graphical Abstract Representation of Design (GARD): Better M&S Through Earlier Visualization & Better Design Through M&SBen SissonSimVentions, Incorporated1964 Oak Grove Chase DrOrlando, FL 32820407-401-9113 HYPERLINK "mailto:bsisson@simventions.com" bsisson@simventions.comPaul GustavsonSimVentions, Incorporated11905 Bowman Drive, Suite 502Fredericksburg, VA 22408540-372-7727 HYPERLINK "mailto:pgustavson@simventions.com" pgustavson@simventions.comTram ChaseSimVentions, Incorporated11905 Bowman Drive, Suite 502Fredericksburg, VA 22408540-372-7727 HYPERLINK "mailto:tchase@simventions.com" tchase@simventions.comKeywords:Visualization, Validation, Conceptual Analysis, Conceptual Modeling, Object Modeling, BOM, Process (FEDEP)ABSTRACT: Within the Modeling and Simulation (M&S) community, we have grown to expect the use of visualization as a means to monitor and reflect a simulation exercise. Such visualization provides a rich and powerful window revealing the entities, events and aspects being portrayed within a virtual environment by the models and simulations that are at play. However, this type of visualization does not need to be restricted to just exercise execution and after action review. Technology now affords us the means to use visualization much earlier in the process – specifically as part of design -- allowing stakeholders to better understand the intended behavior that a software or simulation module may have upon other modules being developed and integrated. This paper examines the use of emerging visualization techniques, and explores their potential benefit for overcoming common software engineering challenges. Using the recently standardized Base Object Model (BOM) as a component framework for conceptualization, we examine how potential visualization techniques can be used to better understand, experiment, and analyze designs beginning with the conceptual model. We will explore how through the Graphical Abstract Representation of Design (GARD) an intuitive and immersive environment can be offered allowing a user the ability to interact within a visual representation of a software system under design such as a distributed simulation. Finally, we will discuss how GARD can be used as an effective means for supporting model composability within the conceptual and implementation space. 1. IntroductionToday’s increasing software demands which result in complex and dynamic systems can be a yoke to those software designers and architects that have been entrusted with the responsibility of creating and maintaining them.   Even with a full suite of Unified Modeling Language (UML) diagrams and design tools, the complexity of the system is merely transferred from the code to a series of diagrams used as aids to responsible with designing, developing and maintaining the system.  These traditional methods, though very efficient at specific tasks within the design process, fail to address a number of the underlying challenges that are found in today’s design process.   Many of these challenges that software engineers face are identified in Figure 1.Figure 1 –  Software Engineering ChallengesRegardless of the domain, the challenges software engineers face today manifest themselves throughout the development process and may take on lives of their own resulting in additional hurdles.  Many of these issues are not self evident in the beginning but still exist by the very nature of the product itself.   SHAPE  \* MERGEFORMAT 1.1 The ChallengesAs with many modern software systems the scope of a project often grows beyond any reasonable level of manageability through the mere size and complexity of the system.  Without the appropriate tools to maintain a coherent design which reflects a clear picture of the final product, inefficiencies and errors are sure to creep into the design, development and support of any modern software system.Stakeholders of large and complex software under development or lifecycle support are often the first to notice these inefficiencies and, unfortunately, this often occurs well into the design and development process.  As is typical with most large systems there may be a number of stakeholders that are responsible for a portion of the overall final product.  These stakeholders may develop complex capabilities that appear to meet all of their requirements but, when integrated with other portions of the system, fail to meet the requirements of the final product.  The failure of interoperability between stakeholders and team developed assets can often be traced to communication issues and the lack of a unified vision between stakeholders of what the final product should be.The lack of a unified vision and the complexities often related to both small and large software projects tend to inspire an ad-hoc development approach, and, as a consequence,  a failure to adhere to a proven and/or defined process.  This typically results in repeated efforts to address incompatibilities, shortfalls, gaps and deficiencies, which are not identified until later. For instance when a change is made to a specific component or a new component is added, it is only then that the impact upon other components is then discovered and perhaps understood.   While such issues are a consequence related to the overall design, what likely impairs the architect, developer and other stakeholders from being able to recognize issues sooner is the result of insufficient tools.  The limited set of tools that we have today provide tunnel vision of a specific aspect of the overall design and often lack the ability to show how the relationships between a particular view and the rest of the design co-exist.  If such a Complete Picture view could be exposed early in the process, then issues could be address much sooner.  Part of the problem may also be a result of a Not Invented Here (NIH) mentality that is prevalent in the software engineering community.  This issue makes supporting the development of a large system such a substantial task that, in many circumstances, no one wants to take ownership or responsibility.  This is often evidenced by frustration and pointing fingers.  Furthermore, individuals and teams can become so bogged down in the maintenance through these inefficiencies that progress yields to status quo as time becomes a luxury and enhancements a casualty. 1.2 The OpportunityWhat’s needed is the ability to manage and properly reflect information related to large and complex software designs. This information needs to be reflected to the user in such a way that the triad of objectives, design and functional capability can be clearly understood. This understanding includes insight into the dynamic relationship of the overall design, and how one piece affects another. 1.2.1 A Complete Picture ViewA Complete Picture view such as this would be critical to overcoming some of the shortfalls of today’s designer toolsets.  The key to this process is the proper management and reflection of information, more specifically the cataloging and presentation of information related to the overall design without placing specific emphasis on a particular design capability.  Technology now affords us the means to use visualization much earlier in the process – specifically as part of design -- allowing stakeholders to better understand the intended behavior that a software or simulation module may have upon other modules being developed and integrated.   This paper explores various ways that we can begin to achieve this Complete Picture view. 1.2.2 Simulation Driven DevelopmentAdditionally the opportunity exists to utilize simulation as means to define and explore the dynamic aspects of design. This idea of using simulation as a means to derive design (and programming) is actually not new.  Consider the comments of Bass and Ellis in 1976: “…simulation is a technique/tool which can be applied to the discipline of software development.”[1]At that time of this comment, these two gentlemen were addressing the issues pertaining to software engineering discipline.   It seems that many of the challenges and issues of today, regarding complexity of software, were also prevalent thirty years ago.   The appealing aspect of their vision though was that simulation driven development could lead to improved software engineering – essentially better Design.  The opportunity exists therefore to leverage existing standards, techniques and technologies to provide a Complete Picture perspective where design can be proved out early using simulation.  SHAPE  \* MERGEFORMAT 2. Getting the Complete PictureThe first question to be asked in support of the opportunity to provide the Complete Picture is simply: What information, if it could be visualized, would allow stakeholders the comprehension and understanding that is so desperately needed? The key to cracking this puzzle is to recognize that the foundation for success or failure is developed early.   Consider that the success of a football team is often dependent upon how prepared the team was at the start of the season.   If the team works hard to understand the playbook and to understand each other’s roles and responsibilities then they have a good chance at being successful and make a deep playoff run.  Otherwise, if the team places little importance in learning the playbook and executing plays prior to the start of the season, they are bound to struggle.   Likewise, in software development, success is best achieved if all the stakeholders are on the same page early.  That the requirements are not only well understood, but a strategy identifying how to achieve the requirements has been identified.    This can’t be done midseason, it must be done early. Examination of the prototypical development process as illustrated in Figure 2 reveals what must be done.  Figure 2 – Early Activities of a Common Development Process [2]Notice that not only do the objectives need to be defined, but conceptual analysis needs to also be performed.  Unfortunately this is often a missed step.  It’s been our experience that many software shops, such as game development studios, that are responsible for developing complex software and models, simply disregard conceptual analysis and fall prey to ad-hoc development temptation.2.1 Common Software Developer MisstepsBrian Upton, lead engineer of Red Storm's Rainbow Six, which was a commercially successful video game, shared some of the frustrations that his development team experienced and how they missed this step.“We never had a proper design document, which meant that we generated a lot of code and art that we later had to scrap. What’s worse, because we didn’t have a detailed outline of what we were trying to build, we had no way to measure our progress (or lack thereof) accurately. We only realized that we were in trouble when it became glaringly obvious. If we’d been about the design rigorous up front, we would have known that we were slipping much sooner.”[3]It could be said that Brian and his team missed an important step in the process.  The missed performing the conceptual analysis.  Brian has since learned from this experience as reflected in the following commend.“Our current focus is on getting solid designs done up front and solid testing done on the back end — and on making great games, of course.”Brian’s initial struggles, however, have been echoed by many other software game development studios -- in particular those studios whose end product, the game, never met their high expectations for success.  Consider the comments of Richard Wyckoff, lead software engineer for Dreamwork’s  Jurassic Park: Trespasser, who’s game never quite matched the hype that everyone expected.“The biggest indication that Trespasser had game design problems was the fact that it never had a proper design spec….  Trespasser started and finished weak in the game design, and this affected every other part of the project.” [4]Needless to say, despite its marketable name, Jurassic Park: Trespasser did not fair as well as the studio would have liked within the commercial market.  Critics gave this game low marks as illustrated in Figure 3.Figure 3 – Trespasser RatingIf you look at all the experiences of various software development teams, such as a game development studio, close examination reveals that the Number One most common issue prevalent is inadequate requirements and design.   This issue is illustrated in Figure 4. Figure 4 – Common Development Issues in the Software Development IndustryWe learn that this issue impacts the majority of stakeholders, which includes artists, developers, testers, and users, leading to miscommunication, misunderstanding, and lack of clarity.  However, as we learned from Brian if more time was taken to perform conceptual analysis and properly reflect the design, success can be much more attainable.  This thought can be best summarized by Abraham Lincoln, who once made the following comment:  “Give me six hours to chop down a tree and I will spend the first four sharpening the axe.” For software development, there are perhaps no words that could more true.  Conceptual Analysis helps developers sharpen their axe thereby increasing their chance for success!  The question to be asked is “what can be done to compel engineers to spend time sharpening the axe?2.2 Conceptual Model FocusBest Practices, such as the Federation Development and Execution Process, IEEE 1516.3, encourage the production of a conceptual model during the conceptual analysis step.  Additionally the conceptual model should be leveraged throughout the development process.  The experiences we shared from Brian and Richard highlight this need to focus on the conceptual model.   But to be able focus on the conceptual model, it’s important to understand what it is.  “The Conceptual Model identifies what will be represented, the assumptions limiting those representations, and other capabilities needed to satisfy the user’s requirements.” [5] Through the capturing of conceptual model information today’s designers would be capable of having at their disposal the information that reflects the overall design picture and the relationships that exists at the various levels of the design (aka The Complete Picture).  In addition, conceptual model information provides a means for tying together all information related to the design, including that which is contained within modern day toolsets.  Those with access to the conceptual model information can then leverage it to reflect the design in a manner and level of detail that meets their current needs while having the capability to see the relationships between their current interest and the overall design.  2.3 Complete Picture NeedsThis leads us to another challenge that is addressed by the following question:How can the conceptual model information best be represented to the user so that the Complete Picture can be properly conveyed?This question can best be addressed by understanding our Complete Picture needs:We understand that the information must be represented in a manner that is easily understood.  Essentially, the conceptual model information that is used to paint the Complete Picture should be a reflection of the entire system broken into components and the relationships between those components.  The Complete Picture needs to be able to reflect the spanning of these components in the conceptual space and how it maps with implementation space.The Complete Picture must also provide the level of detail needed so that the user can explore and gain deeper knowledge.  Specifically, the user should be able drill down on any component and traverse through varying levels of detail resulting in a multi-tier view of the information.  This type of navigation will allow the user to explore the aspects of the system that meet their interest while venturing through tributaries of information that descend from the main idea.  Both of these needs could best be achieved through enhanced graphical representation of the conceptual model information to the user.  The remainder of this paper shares our research and findings pertaining to an SBIR effort focused on the Graphical Abstract Representation of Design (GARD).  Our GARD activities have explored how visualization of conceptual models can help to expose design to improve the quality of software, simulations, and systems.    Our findings thus far are shared with the intent to address the following: How we can capture the conceptual model?  This is identified as the Need for Better Conceptualization (see Section 3)What technologies and visual techniques can best be employed in producing a functional Complete Picture of the conceptual space, a framework for the implementation space?  This is identified as Need for Earlier Visualization (see Section 4)Figure 4 and Figure 5 represent some of the visual capabilities that can be used and portrayed within the visual space.Figure 4 – Visual CharacteristicsFigure 5 – Items That Can Be Conveyed Visually3. Need for Better ConceptualizationIn our GARD effort we recognized four aspects related to design:Software design is often reflected in the code and little place else.  This has lead to limited understanding among stakeholders, including other developers.Conceptual Models should be used to reflect the design, but what has been lacking until now is a common standard. The use of Patterns appear to provide a key aspect of the Conceptual Model, which help unlock and expose key aspects of design, and help to facilitate reuse.Conceptual Model attributes should be mappable to the implementation space, allowing the conceptual model to be carried forward through the development process.The subsections that follow explore each of these aspects.3.1 The Code is the Design?For most programmers the code is the design. [6] Think about this for a moment.   Isn’t it true?  All the pre-game activities and hype that lead up to development often have very little carry over affect in what actually goes into the code -- at least not in a clear, succinct way.   Sure, a decent programmer will embed comments in their code that refer to a requirement, and outline the design strategy within their comments, but the truth is that the design is better reflected in their code than in their comments.  It would be easy enough to go into a debate as to whether this is good, or bad.  More important though is to recognize and acknowledge there is some “truth” in this – the code is the design – and that, in this case, the truth may hurt a little.   Consider that understanding design by examining one’s code is a complex, completely subjective, and often controversial matter – especially for code that’s not part of an open source initiative.  How can one ever determine how good the design really is?  Consider that the best we have to explore the design of code is either through tedious source code examination, the use of profile tools that report on source code execution, or through tools that can reverse engineer the code and present aspects of it using UML diagrams.  But even those views are simply a reflection of the code, and lack integration with the original requirements and conceptual analysis.So if the code is the design, does this mean all those pre-game activities of requirements capturing, specification documentation, design reviews were of little value?  Not at all!  Those steps are very important.  Consider the value in not only giving guidance to the developer but also in helping identify the appropriate test criteria.  The real problem, though, is in the hand off - when a programmer transitions from the passing on of the requirements to design.   How can we be sure that all that was done early has properly transitioned into the code?  Why must we wait until after a product is developed, tested and deployed to determine if the objectives were met?What if, though, there was a formal way to help that baton transition?  A mechanism that helped to lay out the functional capabilities required, which could then be mapped with what is being coded such as the classes and their attributes?  Wouldn’t that provide a clearer mechanism to understanding design?That answer, is absolutely YES, but only as long as the mechanism chosen is used commonly by everyone else.  This implies that the mechanism must be based on a standard, and the standard that seems to make the most sense, and provide the best chance for conveying design in the form of a conceptual model, which can be forwarded into the code (i.e., mapped to implementations), is none other than the Base Object Model (BOM) standard, SISO-STD-003-2006.  BOMs are used to represent piece parts of a conceptual model, or simulation that can be used as a building block in the development and/or extension of a software application, simulation or federation. Essentially BOM provides a candidate standard that can help convey system and software architectures at the conceptual level. [7]  3.2 BOMs – A Standard for Conceptual Modeling?The BOM is a SISO standard developed initially to support the complex simulation interoperability community, but it has been designed with the agility to support the reflection of conceptual modeling for both system engineering and software engineering.  Specifically, it provides a formal mechanism to reflect the conceptual model, map to an architecture implementation, and provide well tagged information (i.e. metadata), which encourages discovery and reuse. Despite the ties to simulation community, BOM’s utility for serving the software engineering community is well grounded.  Consider the capabilities offered by the BOM are illustrated in Figure 6.Figure 6 –BOM ElementsExamination of the BOM structure reveals that there are four key elements to a BOM:  Metadata (prescribed by the Model Id)Conceptual Model DefinitionModel Mapping, andObject Model DefinitionThe heart of what we want to focus on within this paper is the Conceptual Model Definition, and the support provided by Model Mapping.  The Conceptual Model information that can be stored within a BOM is intended to be used to represent attributes, behaviors and characteristics intended of a system.  Additionally, the representation of an entire system can be made up by the composition of loosely coupled BOMs, with each representing specific system behaviors.  In addition, what may also be contained within a BOM are the relationships among other BOMs.  It is both the composition of BOMs and the relationship of one BOM to another that could be used to navigate the overall software design and to reflect the design to the user in the detail that is most useful.The BOM is a well-suited container for conceptual model information.  The attributes of the conceptual model, as represented in Figure 7, show how they map naturally to the BOM.  As a container the BOM can then be used to organize and show relationships between conceptual entities.  Figure 7 –BOM Conceptual Model AttributesFor the purposes of this paper, we will focus on how we can begin to collect these conceptual model attributes, and how we can begin to map (via the Model Mapping) our conceptual model with the code or architecture that is being implemented.  BOMs can be developed two ways.  One is the top-down approach.  Essentially you begin with an idea, and build on that idea until you convey your conceptual model.  This is sometimes referred to as the from-scratch approach.  The other approach is the bottom-up-approach, which we often refer to as decomposition.  In this approach, you would start with an existing design, and then try to reflect it conceptually using BOMs.  This decomposition can be though of as a pseudo reverse engineering method.   For those familiar with the HLA implementation space, this is becoming a common practice to reflect the essential modules of an HLA FOM – and derive useful FOM modules.  For the context of this paper, however we focus on the top-down approach so that you, the reader, can have a better understanding the attributes of the conceptual model.The first step in top-down conceptual modeling is to understand the context of the problem being solved. This often begins with a simple statement of the problem or need. Following this initial effort, you should then be able to add more detail. The detail embodies and supports the necessary requirements – stating what needs to occur. Stating what needs to occur then drives us toward identifying those relationships, which ultimately leads us to design. It’s the relationships, by the way, that we want clearly portrayed in the Complete Picture. Using this iterative and incremental approach for conceptual modeling allows one to not have to wait until the entire system has been finished to begin to see what functionality is being provided.  It provides (1) an early look and early validation of what will be developed in future iterations, and (2) a common framework for the development of future capabilities. As new requirements are added to the software design additional conceptual model information that reflects the new capabilities can be easily created.  In addition, any relationships between new and existing conceptual model information can be established and captured at the same time.  In other words, through conceptual analysis we can see what functionality exists or intends to be contained within the software, and the impact each component has on other components.  It allows us to sharpen our axe, and proceed with confidence in our design -- thereby allowing us to meet and exceed our objectives! 3.4 Patterns - What Might Matter Most?Now that we have discussed the aspects of conceptual modeling that leads us to some other logical questions:What matters most about the Conceptual Model?  What is it that we want to convey and understand?What really matters most about Design?To answer these questions, let’s explore further into the Conceptual Model Definition of a BOM.  The BOM identifies four conceptual model elements: Pattern of Interplay, State Machine, Entities, and EventsIn order to minimize the risk of obfuscation we will focus solely on the Pattern of Interplay, for everything else, Entities, Events, and State Machines, really falls out of this.The idea of Patterns, specifically Patterns of Interplay, is crucial to understanding and conveying Design.   Christopher Alexander, an architect and author, recognized that common design elements that he called patterns exist in architecture that, if identified, would simplify and advance the process of building. He describes it as follows: “A pattern describes a problem which occurs over and over again in our environment, and then describes the core of the solution to that problem in such a way that you can use this solution a million times over, without ever doing it the same way twice.” [8]    The two key things to draw from his definition are the following:Patterns describe a problem (features, characteristics, or behavior) that occurs with repetitionPatterns identify the core of the solutionLet’s look at the first of these attributes pertaining to a pattern by simply considering what goes into the software design for any project.   Invariably what exists for most applications is common functionality that is needed to achieve one or more objectives.    In fact, the heart of any good programmer is to look for opportunities to modularize common aspects of behavior – of things that occur with repetition.   When experienced developers begin to code, they will look for common repetitive actions and then code a function or a method of a class to support those repetitive elements.  Consider how this approach meshes with noted author Martin Fowler’s definition of a pattern.A Pattern is an idea that has been useful in one practical context and will probably be useful in others.” [9]  Sounds familiar doesn’t it?   Essentially the approach developer’s take to coding is the approach that should be first taken during conceptual analysis.  Consider that once a programmer identifies common patterns, they will look for a way to affect the design of the software so that a single module can perform the functionality for this repetition. This discovery analysis, which is quite common for experienced developers, meshes with Fowlers view regarding patterns, in which he states:Patterns are often discovered rather than invented.  In other words common problems need to be discovered, then once that happens the next step is to identify a solution that addresses these common problems.  Or it can be said that:The best way to discover a pattern is to perform a conceptual analysis on the problem space. [10]  This leads us to the second attribute of a pattern, which is that a pattern should identify the core of the solution.  In the context of this principle we state the following: A pattern identifies a set of elements used to accomplish or support a common need, capability, or purpose.The BOM Template Specification defines a pattern in the very same way, and provides a mechanism to capture and reflect the solution through the pattern of interplay.  A pattern of interplay is a “specific type of pattern characterized by a sequence of pattern actions involving one or more conceptual entities.”  The pattern of interplay that is offered by the BOM helps paint the picture of what is anticipated behaviorally! By understanding patterns of interplay, we can understand other aspects such as conceptual entities, the various state machines that a conceptual entity may exhibit, and the conceptual events that are needed to exchange information with other software components.  The key in recognizing patterns of interplay is to look for the activity of relationships among the conceptual entities.  By examining conceptual entities, patterns can be identified that expose relationships among the conceptual entities that make up the Complete Picture.  Using the common process that was identified previously in Figure 2, the evolvement of conceptual model information and patterns can be identified in two phases.  The first phase is the Define Objectives state, where requirements and objectives should be identified and analyzed.  The second phase, Conceptual Analysis, is where the conceptual model should emerge.  The patterns that have been identified can then be used to bring the conceptual model (aka the Design) to life.3. 5 Ability to Map to Architecture ImplementationsOnce we have identified our patterns of interplay, and the conceptual entities and events that are needed to carry out each pattern of interplay, we can then begin to map these conceptual models to how they will be reflected in our implementation.   This mapping is achieved within a BOM using the Model Mapping component.   The Model Mapping support provided by the BOM, which is identified in Figure 5, provides an additional mechanism to fully marry the conceptual space with that which is to be represented by software – the implementation space.  The ability to map conceptual entities and events to the actual data structures developed or being developed to support system, simulation or application is what makes BOMs unique allowing them to support reuse, composability and to facilitate interoperability.  The benefits of this type of mapping using BOMs are shared by Cutts and Gustavson at a recent conference: “the abstract things described in a Conceptual Model (entities and events) can be mapped to the actual types of things we are modeling, which are described in the Object Model Definition of a BOM.  So, if I identify that there is a firing entity at the conceptual level (in the conceptual model), my mapping tells me what system architecture classes (HLA, TENA or otherwise) can fulfill the entities and events associated to it.” [11] In addition it was shared that “a BOM does not require within itself both Conceptual Model Definitions and Object Model Definitions.  Object Model definitions can live /reside in other BOMs.   In other words, the Mapping can be made across one or more BOMs.”  This aspect of agility is extremely important in supporting the reflection of design.4. Visualization of Design BOMs appear to provide the right fit for capturing the conceptual model and the right mechanism to support team development (both for localized teams and distributed teams), but what would be most compelling to users is for them to be provided a way to define the conceptual space without having to know the intricacy of the BOM standard. That is to say, BOMs are important, but it use almost needs to be ubiquitous to the user, otherwise training on how to build and compose BOMs would need to be learned.   Most users can ill afford such a learning curve, even though BOMs are easier to understand than other conventional mechanisms.A better and more compelling approach is to provide a visual environment for defining and expositing the conceptual space, and laying out the ground work for the implementation space. In this regard, BOMs are used but not necessarily seen. In our GARD effort we recognized three aspects related to the visualization of design to support this concept:Traditional visual capabilities provide limited insight into exposing the Complete PictureThe use of intuitive and immersive visualization could be used to help better convey design through exposure of the conceptual space and its mapping to the implementation spaceThe application of human machine interfaces (HMI) help augment and equip stakeholders thereby improving understanding and developer performance.The subsections that follow explore each of these aspects.4.1 Traditional Visual CapabilitiesTo date we are capable of visually portraying the BOM Conceptual Model in several ways as identified in Table 1.Table 1 – Views used to reflect BOM ElementsBOM elementViewsPattern of InterplayUML Sequence Diagrams, UML Activity DiagramsUML Use Case DiagramsState MachineUML State DiagramsConceptual EntitiesUML Class DiagramsConceptual EventsUML Class DiagramsModel MappingFunctional Pin LayoutsThese views can be provided through a tool SimVentions has developed, which is called BOMworks™.The BOMworks™ tool which can be used to create BOMs and capture conceptual information currently has the capability to create three UML diagrams identified in Table 1.  Figures 9, 10, and 11 below show the generated diagrams created through BOMworks.  In each of these examples the conceptual information is completely maintained within the BOM.  Multiple BOMs are used to show different points of the conceptual information with each BOM linked together to show relationships that exist between the conceptual information.Figure 9 - Activity Diagram Figure 10 - Sequence DiagramFigure 11 - Class DiagramThe one drawback in using UML views is that the Complete Picture that is sought for representing design is limited to these static presentations.  Additionally, to date, most stakeholders identify that they are not comfortable at building and using UML.  Despite their apprehension, however, we have found that certain views, such as the ones identified in Figures 9, 10 and 11, provide a sense of comprehension for most stakeholders.  Invariably, when we have informed these stakeholders later that what was being reflected was actually a UML view, it is often met with some surprise coupled with an expression of satisfaction that they have understood something that once seemed so foreign.4.2 Intuitive and Immersive Visualization Realizing that part of the failure of current UML diagrams to the designer is their tendency to be non-user friendly – and very static.  This can be a result of their complexity, the tools used to create them or just their plain failure to be easily understood by a non-technical person or even a technical person who has not been exposed to or trained in UML.  There is also the failure to have a consistent standard for how UML diagrams are created, what should be reflected in the diagrams and to what detail the diagrams capture design information can vary.  All of this leads to an approach that must look outside of the traditional UML world to find a representation that is easily understood by all and user friendly in creating and reflecting information related to a design.4.2.1 Mind MapsOne possible method worth consideration is the idea of “Mind Mapping”.  According to Wikipedia:A Mind Map is a diagram used to represent words, ideas, tasks or other items linked to and arranged radially around a central key word or idea. It is used to generate, visualize, structure and classify ideas, and as an aid in study, organization, problem solving, and decision making.  It is an image-centered diagram that represents semantic or other connections between portions of information. [12] One of the great benefits of Mind Maps is its ability to represent ideas derived form a central idea.   Relationships among ideas can be portrayed and extended to other ideas and relationships creating a multi dimension representation of thoughts in a pattern.  It provides a Complete Picture like view that is easily understood and can be followed by the most novice of user.   Key ideas that can be drawn from a mind map are its ability to generate, visualize, structure and classify ideas which can aid in reflecting the conceptual model including patterns of interplay, the characteristics of entities and events, and the BOM Model Mappings between those entities or events and the implementation (i.e. classes) that support them.Figure 12 shows a simple example of a mind map created at a high level to represent the concept.Figure 12 – A Mind Map ViewA Mind Map consists of a set of nodes and interconnected arcs.  Any node can be selected and expanded to reveal more details and relationships.  What we have found is that this type of representation is easy to create and just as important easy to understand.   The user of such a tool can easily create an idea and then attach children or parents which represent other ideas to a central idea with a simple click of the mouse.  Related technologies that are loosely identified with the mind map concept include the following:Small-World NetworksRadial Graph ViewVizsterFlow Map LayoutsTree ViewGraph ViewFishEyeData MountainWhat’s unique about the Mind Map concept and related technologies is that we can portray the relationships of the conceptual model (provided by the BOM), which includes patterns of interplay, supporting entities, events, and related state machines much more intuitively. To expand the Mind Map concept, the distance, thickness, and color of an arc, could be used to reveal more details of the conceptual space. Arcs of a different weight could also connect to nodes within implementation space.  In addition the size, shape,  color and transparency of a node could be used to expose various aspects of the conceptual model.  For example, patterns of interplay could be depicted using a starburstpattern actions associated to a pattern of interplay could be depicted using a circle or sphere (with in the 3D space)conceptual entities could be depicted using a diamond conceptual events could be depicted using a square,state machines could be depicted using a hexagonThe selected, focused node would be filled (displayed as a solid), whereas the related nodes, that are not selected but directly associated to a node would be clear (non-filled).  The Mind Map concept can also be expanded within the 3D space, which would allow the conceptual space to be explored at varying depths – providing spatial analysis.  As illustrated in Figure 13, we have been able to take a simple Mind Map concept and demonstrate it within the 3D space to demonstrate this spatial analysis.  This test was accomplished in Java, using the Java Monkey Engine (JME).Figure 13 - Graphical 3D Visualization TestWithin this 3D space, sound can also be integrated to augment the spatial awareness.  Sound provides a compelling artifact allowing the user to hear the quality of the parts.  Like an orchestra that is composed of many instruments, if they are playing in a succinct fashion then everything sounds correct.  However, if one of the players of an instrument is not in step with the others, that will be noticed.   This same concept can applied in experiencing the Complete Picture view.  Sound can be used to tell us the quality of the design.4.2.2 Schematic Pin-Layouts While understanding the conceptual space is important, in fact it may be vital, to understanding the design, it is also imperative to understand how components interconnect, and how the conceptual space maps with the implementation space. An intuitive visualization that can be used to show the conceptual to implementation space mapping is that of a functional pin-layout view (see Figure 14).  Figure 14 – Schematic Pin-Layout conceptThis type of visualization provides a mechanism for users to test play a design early in the process, including within a collaborative framework. In fact such a view can be married with other views such as the mind map view or metaphoric theme, and allows us to get one step closer to simulation-based design!4.2.3 Metaphoric Themes With the advancement of graphical visualization, it is quite possible to portray the integration of the conceptual space and implementation space using Metaphoric Themes.  Using the Metaphoric Theme concept could allow us to visualize in a 3D immersive environment an abstract representation of our design, with, potentially, the ability to reflect how that design is married with our code, and how it would perform during an execution.  This potential to test play a design early in the process is perhaps the most intriguing aspect of all.  Additionally, such an environment, could allow alterations of the design to take place real-time using metaphoric objects, which is also compelling. One theme that we have considered is that of a road infrastructure.  Within this past year, we have recently demonstrated an activity diagram capability within BOMworks™ to help visualize conceptual models.  We recognized that a road infrastructure could be used as a metaphor for such activity diagrams – and other views providing a much broader Complete Picture view.There are many aspects of a road infrastructure that can map with the information contained within a BOM.  For example, the network of roads themselves could represent the main thread of functional capabilities (at a summary, high level view), which could be seen from an airplane, helicopter, blimp or satellite.  Specifically the composition of BOMs, which represent the integration of patterns of interplay within the conceptual space are exposed by these network of roads.  The ability to drill down (zoom-in) on roads, intersections, ramps and interchanges expose the characteristics of a pattern of interplay and related elements.  Roads that are straight or windy, wide or narrow help tell a story of how intricate our design may be.  For instance roads filled with intersections, and interchanges would identify a pattern of interplay containing connections to multiple events, and filled with various exceptions and variations.  Traffic lights and road signs associated to a road may reflect the states associated to an entity.  Entities within the conceptual space, could be represented by vehicles that would travel such roads.  Additionally the ability to monitor the ebb and flow of traffic among the road infrastructure would allow us to see the functional capability in the implementation space.  Figure 15 – Road Infrastructure MetaphorAs you can see this metaphoric theme would allow us to visualize in a new way the ability to see functional capabilities – up close and from far away.  Including what conceptual entities are involved, their states, and and related events.   Such a theme would also provide a Complete Picture view which would be not so static.  Dynamic elements of the design could be easily observed within this immersive environment.Our view of such roads can be presented in a 3D world with different types of “avatars”. Identified below are some potential “avatars” for such a world: A person, who is able to instantaneously hitch hike with an active conceptual entity being represented in an execution view, otherwise, they can simply walk around (a neighborhood for example).A construction crew, glued to a specific area, working on one or more functional models under developmentA motor cycle, which can slither and slip past obstacles and other vehicles.  Particularly useful for exploring a detailed area of a functional mapA police car, allow the design to be viewed with little restriction to trafficA helicopter, such as one that hovers over metropolitan areas to monitor traffic.A blimp, so that a particle area can be viewed much like the helicopter, but only higherA small air plane, so that areas of a specific region can be quickly explored from over head.A fast jet, so that more area of the functional map can be viewed – quicklyA satellite, so that the area can be simply monitored from afar – with little movement.In our world of roads, we could collaborate with other designers and developer “avatars” – helping to build our infrastructure of roads (i.e. functional capabilities).Additional thoughts on this road motif including their characterizations and what they might represent are further elaborated on our GARD web site ( HYPERLINK "http://www.simventions.com/gard" www.simventions.com/gard).4.3 Use of HMI Technologies for Improving Design PerformanceIn addition to these different innovative visualization approaches, Human Machine Interface (HMI) technologies such as navigational devices and head mount displays as depicted in Figure 14, could help assist stakeholders in engaging and interacting in a virtual environment allowing greater exploration and understanding.  Figure 14 – Use of HMI TechnologyFor any of the Intuitive and Immersive Visualization possibilities identified in Section 4.2, these HMI devices could be used to help integrate the user into the virtual space allowing them greater understanding and comprehension through the exploration that they are permitted to do.5. GARD Framework and Tool Considering all the aspects that we have discussed so far, we believe that what can be brought to bear is a framework that integrates much of these standards, technologies, and visualization techniques to provide a better way to improve and understand design for all stakeholders. Therefore, a key part of SimVentions SBIR effort has been on researching ways to integrate these technologies and standards to enable a framework for GARD.  The objective for the GARD framework is to help consolidate system level information and present various aspects of software system behavior in a manner that humans can readily interpret.  GARD is also being designed to provide traceability throughout the lifecycle and allow for interactive exploration of system capabilities and trade-offs.To demonstrate the capability, our effort has included the development of a prototype GARD tool, developed in Java, used to visualize software design through conceptual models captured using the BOM standard and enable simulation-driven design.  For this effort, BOMworks™ platform is being leveraged and extended to provide (1) conceptualization of software design through BOMs (2) unique visualization to view design using Mind Maps, Schematic Pin-Layouts, and Metaphoric Themes. Additionally, an HMI device such as 3Dconnexions SpaceNavigator, a 3D motion controller, is being used as a device to engage the user within these visualization worlds.  Such environment could yield in the use of simulation to facilitate design, which we identified as an opportunity earlier.  Again, consider the comments of Bass and Ellis in 1976:“…simulation is a technique/tool which can be applied to the discipline of software development.”[1]The appealing aspect of this vision is that simulation driven development could lead to improved software engineering leading to better design.  The integration of the standards, techniques, and technologies we have identified in our research provide the instruments to bring this simulation concept to life.   Need-less-to-say we are excited about this potential and look forward to helping cultivate this vision.  Simulation, we believe, is the next progression from the IDEs we see today, and can be applied at the conceptual level to help sharpen the Axe and provide a more responsive and intuitive Complete Picture view.Additionally it is envisioned that the GARD tool could also be a potential Eclipse plug-in, which would benefit a wide distribution of users who use the Eclipse environment for software development.  Based on our experience with Eclipse, we recognize the opportunity for the GARD tool to be a potential Eclipse plug-in.   The GARD tool as an Eclipse plug-in would allow developers to better convey and understand their design without ever having to leave the Eclipse environment.  These potential capabilities that we have identified would allow GARD to convey information quickly and easily to the user, providing a mechanism to explore possibilities in the design space, and to see the effectiveness of a design once it’s been realized in the implementation space. 6. SummaryBased on our experience very few software applications are more complex than a simulation – especially a simulation that must interoperate with other simulations.  Thus, we recognize that the challenges software engineers face today are especially prevalent for M&S software engineers.  Our needs include the ability to compose simulations and models and interoperate with other simulations.  Models need to be defined clearly, so that when information regarding that model is shared from one simulation to another simulation, it can be understood.  Fortunately, through SISO and other supporting organizations like DMSO, a standard has been put in place that begins to helps us define more clearly the conceptual models we need to build to, and that is the Base Object Model (BOM).  BOMs help to facilitate composability and interoperability with out restriction to a specific architecture implementation.In this paper we identified that a missing step often exists between requirements identification and program design, which is known as conceptual analysis.  Skipping this step can result in unforeseen challenges and issues.  SimVentions has been researching the use of conceptual models as a means to encourage conceptual analysis and a way to better understand, experiment and analyze designs.  It is the BOM that provides a mechanism to reflect the conceptual space, and reflect software design against software objectives.  Additionally, the use of innovative visual representation of both the conceptual space and its mapping to the implementation space, which can supported by the BOM, can bring forth a new and compelling use of simulation to help drive and convey better design.   Such visual simulation would more easily allow developers and stakeholders to engage in an immersive, exploratory environments allowing designs to be better understood, more easily validated, and producing more agile software. Finally, our research has shown that a framework such as GARD and supporting tool(s) that facilitate the conceptualization, visualization and simulation of design, can result in many great benefits.  These include the ability to:Better identify software defects / errors much earlier in the process;Offer clearer understanding of the complexity of a system, software or simulation;Improve communication among stakeholders; Enhance opportunity for software reuse;Reduce time and cost spent on development;Expedite technology integration and deployment;Expose and evaluate interoperability constraints; andAchieve greater levels of confidence in the supporting components and resulting architecture. Additional InformationAdditional information and downloadable material on GARD can be found on the GARD website at www.simventions.com/gard/. In addition, information regarding BOMs can be found at www.boms.info.AcknowledgementsSimVentions would like to thank ARL for supporting our GARD research and development effort, which has been identified in this paper.  Specifically we would like to thank Glenn Racine (ARL) who has been supportive of our Phase I efforts.References[1] 	Elwood Bass and James Ellis, Relationship of Software Engineering and Simulation, Published 1976[2] 	IEEE 1516.3, IEEE Recommended Practice for High Level Architecture (HLA) Federation Development and Execution Process (FEDEP), March 2003.[3] 	Brian Upton,“Postmortem: Red Storm's Rainbow Six”, Gamasutra, January 21, 2000[4]	Richard Wyckoff, “Postmortem: Trespasser – Jurassic Park” Gamasutra, May 14, 1999.[5]	IEEE 1516.3, IEEE Recommended Practice for High Level Architecture (HLA) Federation Development and Execution Process (FEDEP), March 2003.[6]	Paul Gustavson, “A Developer's Perspective on Patterns”, Borland Developer’s Conference 2005, San Francisco, CA.[7]	SISO, BOM Template Specification, SISO-STD-003-2006, 31 March 2006.[8]	Christopher Alexander, A Pattern Language[9]	Marin Fowler, Analysis Patterns: Reusable Object Models, Addison-Wesley, 1997[10] 	Gustavson, Morse, Lutz, Reichenthal, Applying Design Patterns for Enabling Simulation Interoperability, Spring 2004 Simulation Interoperability Workshop (SIW)[11] 	Cutts, Gustavson, Ashe, LVC Interoperability via Application of the Base Object Model (BOM), I/ITSEC 2006, Orlando, FL.[12] 	Wikipedia, Mind Map, http://en.wikipedia.org/wiki/Mind_MapAuthor BiographiesBEN SISSON is a senior systems engineer at SimVentions, Inc. (http://www.simventions.com) and is focused on the development and integration of technology for creating innovative and engaging experiences and solutions.  He has recently lead the research for the Graphical Abstract Representation of Design (GARD) tool and before that worked on the development of the BOM Aggregation Support Server (BASS) which is a Service Oriented Architecture (SOA) approach to BOM aggregation solutions. Ben is a graduate of Strayer University, with a B.S. in Computer Information Systems and is currently working on his Masters in Information Technology at Virginia Tech. He has supported a wide variety of data management engineering system efforts within the DoD as well as commercially. Ben lives in Florida with his wife and children.PAUL GUSTAVSON is a co-founder and Chief Technology Officer of SimVentions, Inc. (http://www.simventions.com) and is focused on the development and integration of technology for creating innovative and engaging experiences and solutions. Paul is a graduate of Old Dominion University, with a B.S. in Computer Engineering (1989), and has supported a wide variety of modeling and simulation, system engineering, web technology, and mobile computing efforts within the DoD and software development communities. He is a principal author of “C++ Builder 6 Developer’s Guide”; and contributor to other books and articles; and, has presented at numerous conferences. He is also a long-time advocate and pioneer of the Base Object Model (BOM) concept for enabling simulation composability, interoperability, and reuse. Paul lives in Virginia with his wife and two boys.TRAM CHASE is a software engineer at SimVentions, Inc. (http://www.simventions.com) and is focused on the development and integration of technology for creating innovative and engaging experiences and solutions. In support of BOMs, Tram has been the lead developer of BOMworks™, a tool used to build, edit and compose BOMs.  Tram is a graduate of Virginia Tech, with a B.S. in Mathematics (1994), and has supported a wide variety of modeling and simulation and system engineering efforts within the DoD. Tram lives in Virginia with his wife and son.  		Note: Our interests in these challenges are not intended to focus solely in the area of modeling and simulation (M&S).  It should be recognized that the challenges we have identified are faced in many other domains. Consider the complexity of software developed for the financial, manufacturing, avionics, medical health care, IT communication, and DoD market – just to name a few.  While it may be true that very few software applications are more complex than a Live, Virtual or Constructive (LVC) simulation  – especially one that must interoperate with other simulations, the complexities of software engineering abound throughout.  Therefore, as we explore the challenges and examine how we can overcome these barriers, which at times may be in the context of M&S, consider that much of what will be addressed and offered is equally applicable for software engineering across all domains.Note: The research and findings shared in this paper is a result of SimVentions SBIR effort sponsored by the U.S. Army Research Laboratory (ARL).  SimVentions effort, titled the Graphical Abstract Representation of Design (GARD), explores how visualization of conceptual models can help to improve the quality of software, including but not limited to M&S simulations.    Under the Phase I effort, SimVentions has been researching mechanisms to expose aspects of design using various visualization techniques, and the use of standards to convey and expose both the conceptual space and the implementation space.  We are excited about the unique ways and innovative ways to stimulate conceptual analysis and better, clearer software design.