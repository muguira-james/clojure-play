Using HLA Tools to Facilitate Compliance TestingMargaret M. HorstGeorgia Tech Research InstituteGeorgia Institute of TechnologyAtlanta, GA  30332-0832404-894-3578margaret.horst@gtri.gatech.edu Michael B. WoldtIITRI/AB Tech Group1901 North Beauregard Street, Suite 400Alexandria, VA  22311703-933-3350mwoldt@msiac.dmso.milKeywords:HLA, Federate Compliance Testing, Tools ABSTRACT: The Defense Modeling and Simulation Office (DMSO) provides a number of free tools on their web site at < http://hla.dmso.mil > to assist developers in working with the High Level Architecture (HLA). Although use of these tools is not required for HLA compliance, they can be very helpful at various stages of the Federation Development and Execution Process (FEDEP), including preparation for and conduct of HLA federate compliance testing. This paper describes some applications of these tools to HLA federate compliance testing, including the Object Model Development Tool (OMDT) for checking the Simulation Object Model (SOM) before submitting it to compliance testing, the Federation Execution Planners Workbook (FEPW) Editor for preparation of the federate’s Conformance Statement and optional scenario for run-time testing, the Federation Verification Tool (FVT) for run-time verification of the execution of the test scenario, and the Federation Management Tool (FMT) for federation management during the execution of the test scenario.IntroductionThe High Level Architecture (HLA) is completely defined by three documents: the Object Model Template (OMT) Specification (OMT Spec) [1], the Interface Specification (IF Spec) [2], and a set of Rules [3].  “HLA compliance” means that a simulation follows the architecture described in these three documents.  A “Compliance Checklist” [4] has been derived from the specifications and rules to help simulation developers assess the HLA compliance of their federate, federation, or Run-Time Infrastructure (RTI).  The Compliance Checklist does not add any new requirements not already imposed by the OMT Spec, the IF Spec or the Rules; it merely provides procedure-oriented summaries of architecture requirements that may be spread out among the three defining documents.Since HLA is an open specification, developers can label their software “HLA Compliant” based on their own assessment of its adherence to HLA specifications and rules, using the compliance checklist as a guide for their evaluation. However, this self-labeling is not without risk.  The label may lead the rest of the simulation community to have certain reasonable expectations about the capabilities of that federate.  It is even conceivable that a federate can be certified HLA compliant by DMSO and still be of little or no value in a particular federation as defined by that federation’s specific goals and objectives (AKA substantive interoperability [5] ). However, the situation is somewhat different for US Department of Defense (DoD) simulations.  In 1996, the Under-Secretary of Defense for Acquisition and Technology issued a mandate requiring all DoD simulations to be HLA compliant, with consequences for any DoD simulation that is not HLA compliant (no funding past 1 October 1998, and retirement of non-compliant simulations after 1 October 2000). [6] The DoD has established a formal compliance certification process, which is outlined below, to track implementation of the standards. This certification is also used in some federations as “the price of entry” since it demonstrates a certain level of understanding of the specification.HLA federate compliance certification is accomplished by an official Certification Agent (CA, currently AB Technologies in Alexandria, Virginia), who conducts a series of conformance tests to verify that a simulation meets detailed requirements of the HLA specifications and rules, as set forth in the Compliance Checklist.  It is this independent evaluation of HLA compliance that is the basis for official certification of a federate’s HLA compliance (as opposed to an informal self-evaluation of HLA compliance by the federate developer as mentioned above).The DMSO official HLA federate compliance test web site was inaugurated in June 1997 at < http://hlatest.msiac.dmso/mil >. Not surprisingly, official certification of HLA federate compliance has been primarily a concern of DoD simulations.  The compliance test process is open to any federate at the present time, and a few non-DoD federates have also taken advantage of the opportunity to have an external evaluation of their HLA compliance.  Of the first 100 federates certified as HLA compliant, four were submitted by private industry (not associated with a particular DoD program), six were submitted by NATO, and the remaining 90 were US DoD-related federates.The important technical issue for simulation professionals building HLA federations is not whether a particular federate is certified HLA compliant, but rather which RTI services the simulation actually implements within the architecture.  Certification is a potentially useful measure of HLA compliance, but it is not required, except in certain DoD-mandated situations.  Just as a certified simulation may be unsuitable for a particular federation, so can a non-compliant federate be found useful (although there is a greater level of risk with a federate known to be non-compliant).DMSO provides a suite of freeware tools for working with the HLA in a Software Distribution Center at its web site < http://hla.dmso.mil >.  These tools can be useful at many stages of the Federation Development and Execution Process (FEDEP) [7], including federate compliance testing by the software developer and by the CA.  The remainder of this paper describes four specific tools and illustrates their use in federate compliance testing.Object Model Development Tool (OMDT)The first item in the HLA Compliance Checklist [4] for federates says that a federate must have a Simulation Object Model (SOM) documented in accordance with the OMT Spec [1].  HLA object models are composed of a group of interrelated components specifying information about classes of objects, their attributes, and their interactions.  HLA requires that the documentation of these components be in the tabular form specified by the OMT Spec.Object models can be exchanged or shared by converting the tabular data to a Data Interchange Format (DIF).  The OMT DIF is an ASCII text file that uses the Backus Naur Form (BNF) notation to describe the syntax of the object model as defined in Ref. [1].  The OMT DIF file is the official format for submitting the federate’s SOM for compliance testing.The earliest adopters of HLA had to create the BNF for the OMT DIF describing their SOM using an ordinary text editor to manually transcribe the SOM data that was usually kept in spreadsheet tables.  Happily, one of the first HLA tools sponsored by DMSO was the Object Model Development Tool (OMDT) to provide a means of easily creating, editing and producing object models (and the corresponding DIF) for HLA. [8]The OMDT provides an interface to object models consistent with the tabular views defined in the OMT Spec.  Figure 2.1 illustrates the OMDT view of the SOM tables for the Food Fight demo federate.  As object models are constructed, the OMDT performs consistency checking to ensure that the model complies with the rules defined in the HLA OMT.Once an object model has been constructed, the OMDT can save the data in several formats, including the OMT DIF file required for federate compliance testing. The OMDT can also generate the Federation Execution Data (FED) file the Run-Time Infrastructure (RTI) requires to execute the federation. The OMDT supports the specification of additional information not defined by the HLA OMT, but required for full FED generation.Figure 2.2  OMDT Consistency CheckerThe OMDT is available from the DMSO web site Software Distribution Center at no charge.  Today, there are also several commercial Object Model editors available (see < http://hla.dmso.mil/bboard > for a sample of available products), and developers can freely choose between the DMSO sponsored product and other offerings. Regardless of which object model editor is used to create the SOM, it can be useful for the federate developer to look at the OMT DIF file with the OMDT before submitting it for compliance testing.  The OMDT Consistency Checker covers most of the SOM Conformance Test used by the CA in HLA federate compliance testing.  Figure 2.2 shows how the OMDT Consistency Checker is used to check the Food Fight SOM.After completing the application for federate compliance testing, the next step is to send the federate’s SOM to the CA as an OMT DIF file.  The file can be uploaded to the CA using the HLA compliance testing web site, or it can be emailed.  The CA will use the OMDT to open the file and run the Consistency Checker as the first step in evaluating the SOM conformance.  This exact same test can be run by the developer prior to submission of the SOM, greatly reducing the chances of problems being found with the CA’s SOM conformance test.Federation Execution Planners Workbook (FEPW) EditorThe Federation Execution (fedex) Planners Workbook (FEPW) Editor is an HLA planning tool that can be used during the design and development phase of the FEDEP.  Once a workbook is completed, the FEPW Editor then generates a FEPW DIF file that can be used to transfer information about the federation execution to other HLA applications, including federate compliance testing.On the surface, the FEPW Editor resembles the OMDT; both organize data in tabular format, automatically cross-referencing data that appears in multiple tables, and both generate ASCII DIF files to exchange data.  The crucial difference is that the SOM (in OMT DIF) is required for HLA compliance, while the FEPW (in FEPW DIF) is useful but not required by HLA.Developers, particularly those new to HLA, may resist any effort that is not specifically required for compliance, so that they may concentrate on the things that are required.  With only a little experience, however, they find tools like the FEPW beneficial because they organize information that is needed anyway to effectively execute a federation.Table 3.1 lists the data tables in the FEPW.  The RTI Services Tables and Object/Interaction Tables have direct applicability to HLA federate compliance testing, while the other tables can provide supporting information to aid in the conduct of the run-time portion of the compliance test.In the compliance test process, after the SOM has been submitted and checked for conformance to the OMT Spec, the next step is for the federate to submit a Conformance Statement (CS) listing the HLA interface services that the federate uses.  The RTI Services Tables for the federate under test (FUT) provide this information directly (see Figure 3.1 for part of the CS for the Food Fight federate), or the federate developer can fill out a form on-line at the compliance test web site to provide the data.  Once the CS is submitted, the CA evaluates it for internal consistency (much as the OMDT Consistency Checker evaluates the SOM for internal consistency), and then the SOM and CS are cross-checked against each other for consistency.  After all the documentation about the federate has been evaluated and found to be consistent, the FUT is ready for its interface test (IF test), a run-time test where the federate demonstrates the use of all the interface services asserted in its CS.Rather than requiring the FUT to demonstrate all its asserted services for all the elements in its SOM, the HLA federate compliance test relies on a representative sampling of SOM elements.  Every asserted service must be demonstrated, but no more than three SOM elements of every particular kind must be specifically demonstrated.  The Food Fight federate only has three attributes (LunchMoney, AmmoAmount, and Cleanliness) that are URAT (updateable, reflectable, acceptable and transferable), so the appropriate services (UpdateAttributeValue, ReflectAttribute Value, and the AttributeOwnership services for accepting and transferring ownership) must be demonstrated for all three.  Obviously, if the SOM contains fewer than three examples of a kind of element (e.g., Food Fight has only two interactions, Splat and Communication), then the run time test must demonstrate all (both) cases for the appropriate services (SendInteraction, ReceiveInteraction).  On the other hand, if the SOM includes more than three attributes for example, only three are required to be demonstrated for compliance testing.  The FUT is responsible for setting up and running a test scenario that includes all interface services in its CS and at least three of every type of SOM element.  The RTI Services Tables of the FEPW can be used to verify that all services in the CS are included in the test scenario.  The Object/Interactions Tables (OIT) of the FEPW, shown in Figure 3.2, can provide a quick and easy way to verify that the requirement for demonstrating three of every type of SOM element is met in the run time test described by that FEPW.  The FUT can upload a FEPW DIF to the CA as a suggested scenario for the IF test.The remaining tables in the FEPW contain data that can be useful in addressing problems encountered in the run time (IF) test.		Federation Verification Tool (FVT)In addition to listing the objects, attributes, interactions and parameters of the individual federates, the FEPW OIT also documents which attributes of which objects the federate will update, which attributes of which objects the federate will reflect, which interactions the federate will send, and which interactions the federate will receive. Once these federate responsibilities have been documented, a federation (such as the federate compliance IF test) can be monitored to verify that these responsibilities are being fulfilled. This verification is the purpose of the Federation Verification Tool (FVT). FVT is a run-time tool that joins the federation, just like any other federate. FVT reads the FED and FEPW data interchange formats and creates a responsibilities matrix in its Responsibilities View. This matrix lists the names of the federation's federates across the top and the names of the federation's objects, attributes, interactions, and parameters down the left side, as shown in Figure 4-1.  At the intersection of the matrix cells are circles representing the Update  (U), Reflect (R), Send (S), and Receive (R) capabilities. Upon reading the FED and FEPW files, the backgrounds around the circles are filled in with a colored background, to indicate whether the federate has the responsibility for this capability. Once FVT joins the federation, it begins receiving data about the federation. As it receives data, FVT updates the responsibilities matrix according to the legend. After the user resigns FVT from the federation, all of the circles in the responsibilities matrix can be filled with the appropriate color from the legend, and reports can be generated at the user’s request to document the results. The results of FVT's tests do not pass judgement on any particular federate. They are just an indicator of how well the federate satisfied its responsibilities during that test session. It is up to the tester to determine if the discrepancies found are true errors.  For example, in Figure 4.1, a discrepancy is noted in the Communication interaction.  The FEPW had indicated that the Message parameter was always to be sent by FoodFight_191 and always received by FoodFight_270, but in the execution of the federation, both federates sent and received Messages.   So, in this particular case, either the FEPW was in error about the federate’s responsibilities or the scenario was not set up properly to demonstrate Communication only from the first federate to the second.  The discrepancy does not affect HLA compliance testing.The federate developer can use FVT to monitor a federation execution of the proposed IF test scenario, as described in a FEPW DIF file, before submitting the FEPW to the CA for compliance testing.  FVT’s simple success/discrepancy display gives an immediate indication of whether the test scenario will result in a successful IF test. Editing the FEPW file can easily eliminate discrepancies such as the one seen in Figure 4.1.Similarly, FVT’s Services View shown in Figure 4.2 can immediately tell whether all services asserted in the FEPW RTI Services Table have been demonstrated for the FUT.  In this case, the discrepancy seen in FoodFight_270 is unimportant, because Food Fight_191 demonstrated the service.  Probably the second federate would also have demonstrated the service if the test run had been allowed to continue longer.Developers can use these Views of FVT to support self-evaluation of their federate’s HLA compliance, whether or not they later choose to apply for formal compliance certification. Federation Management Tool (FMT)The Federation Management Tool (FMT) is a valuable tool for use during both integration testing and compliance testing.  FMT is a tool designed to help federation developers manage a federation execution and all the participating federates.  As federations become larger and more complex, the FMT becomes an invaluable tool for maintaining control of the federation execution.During HLA Federate Compliance Testing, the FMT can be a great tool for helping solve various problems commonly encountered. The ability of the tool to control a federate and respond to specific RTI services for a federate is extremely advantageous.  It becomes even more useful when federates in the federation are distributed among various simulation sites.  Descriptions of various uses of the FMT during compliance testing are discussed below.The first case is using FMT to verify that all federates are up and running correctly.  In many cases, it is difficult to tell whether or not a federate has quit, become hung up, or is running but not sending.  In these instances, the unique FMT display lets the federation manager know in an instant what the federate is doing and when the last update occurred.  Figure 5.1 shows the Federation Monitor screen of FMT.  It shows each federate joined to the federation and some informative statistics about each.  This display will let the federation manager know with a glance what is occurring in the federation.  This tool also gives the user various other display options as shown in the upper right corner.  Figure 5.1 Federation Monitor screen of the FMTThe second case entails using the FMT to control a federate in the federation.  This function of FMT is useful when there are federates that do not respond to synchronization points, federation saves or federation restores.  There is no requirement to build these services into each federate.  So there have been instances when one or two federates in the federation were unable to respond to a synchronization point and the FMT was used to respond for them, which allowed the federation to continue past the synchronization point.  Figure 5.2 shows the Federate Details screen that can be reached from the Federation Monitor screen simply by double clicking on any federate.  From this screen, the federation manager can change federate settings, respond to services calls on behalf of the federate, and determine how the federate is currently configured, including what objects and interactions the federate is subscribing to or publishing.The third case involves using the FMT as the main controller of the federation.  In this case, the federation manager would bring FMT online first and use it to bring up the federation execution.  Then all the other federates would join the federation execution and begin the simulation exercise.  This is helpful in cases where none of the federates in the federation support the create federation execution service call.Figure 5.2  Federate Details screen of the FMTFinally, the FMT is a useful tool for determining configurations of each federate in the federation.  This includes determining if the federate is time regulating or constrained, what objects and/or interaction classes the federate is publishing or subscribing.  These examples are but a few of the functions FMT provides.FMT is a freely available tool located on the DMSO software distribution web site.  As such, it is a very good choice for helping to maintain control of a federation and completing HLA Federate Compliance Testing.Summary and ConclusionsNot every HLA federate needs compliance certification.  The HLA compliance certification process was set up primarily to serve the US DoD, although it is open to all HLA federates.  DMSO provides free software tools that can be used to assist in the compliance evaluation process, whether in preparation for formal compliance certification or simply as aids to the federate developer’s self-evaluation.  All of the tools described in this paper are freely available from < http://hla.dmso.mil >.Use of the tools is not required for HLA compliance certification, but they can provide help in preparing for and efficiently executing the compliance tests. Formal compliance testing involves submitting some required documentation (SOM, CS) and running the FUT in a test federation for the CA, so any tool that helps in the development, test and execution of the federate will aid in compliance testing.  In particular, the FEPW editor and FMT are examples of general HLA supporting tools that are useful in compliance testing.  The OMDT and FVT have additional applicability to compliance testing.  The OMDT can be used to create and check the required SOM documentation, and FVT can be used to verify the required compliance test federation execution.  Federate developers who choose not to apply for formal certification of HLA compliance can still use these tools for adequate self-evaluation of their federate compliance with the architecture. References[1]	US Department of Defense, “High Level Architecture Object Model Template Specification Version 1.3,” 20 April 1998[2]	US Department of Defense, “High Level Architecture Interface Specification Version 1.3,” 20 April 1998[3]	US Department of Defense, “High Level Architecture Rules Version 1.3,” 20 April 1998[4]	US Department of Defense, “High Level Architecture Compliance Checklist Version 1.3,” May 1998[5]	Judith Dahmann et al., “HLA and Beyond: Interoperability Challenges,” Paper 99F-SIW-073, Fall 1999 Simulation Interoperability Workshop, Orlando, Florida, September 1999[6]	Paul Kaminski, “DoD High Level Architecture (HLA) for Simulations,” memorandum, September 1996[7]	Robert Lutz, Chair, TOOLS Forum, Fall 1999 Simulation Interoperability Workshop, September 1999[8]	Aegis Research, “High Level Architecture (HLA) Object Model Development Tool (OMDT) User’s Guide, Version 1.3,” June 1998Author BiographiesMARGARET M. HORST is a Senior Research Engineer at GTRI.  She is part of the GTRI team that developed the Federate Conformance Test system for DMSO to certify federates as HLA compliant.  She is on the Planning and Review Panel for the Federation Development Process Forum (PROC) and for the RD&E User Forum.MICHAEL B. WOLDT is a Certification Agent at the HLA Federate Compliance Test Lab, Alexandria, VA.  DMSO appointed him as a Certification Agent for HLA Federate Compliance Testing.  He is on the Planning and Review Panel for the Test Forum (TEST).Figure 2.1  OMDT Tables for Food Fight SOM EMBED Word.Picture.8  Selected Table(s)Associated TablesSummary TablesExecution Summary TableFederate Summary TableFederation Objects TableFederation Interactions Summary TableFederation Notes Summary TableHost Table(none)LAN TablesLAN Descriptions TableLAN Connectivity TableRTI Services TablesFederation Management TableDeclaration Management TableObject Management TableOwnership Management TableTime Management TableData Distribution TableSupport TableObject/ Interaction TablesObjects TableInteractions TableGroups TableCross-Reference TablesObjects TableInteractions TableData Representation TablesBase Type DefinitionsComplex TypesTable 3.1  FEPW Editor TablesFigure 3.1  Object Management Table of the RTI Services Table in the Food Fight FEPW.  Similar tables are available for the other Service groups by clicking on the tabs at the bottom of the screen.  Together, the components of the RTI Services Table comprise the Conformance Statement required of the federate for compliance testing.	Figure 4.1  Responsibilities View of Food Fight Federates in FVTFigure 3.2  Object/Interaction Tables from the Food Fight FEPW.  Note that at least three objects, attributes, interactions and parameters are required in the OIT for a federate compliance test, if the SOM has more than three examples of each kind of element.Figure 4.2  Services View of Food Fight Federates in FVT