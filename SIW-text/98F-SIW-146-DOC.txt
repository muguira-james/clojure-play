The HLA Integrated Development Environment (HIDE)Christopher DeanDeanna L. NoceraKent BimsonScience Applications International Corporation12479 Research Parkway, Suite 600Orlando, FL 32826Christopher.Dean@cpmx.saic.com, Deanna.L.Nocera@cpmx.saic.comKent.D.Bimson@cpmx.saic.comBruce McQuearyModus Operandi, Inc.122 Fourth Ave.Indialantic, FL, 32903bmcqueary@modusoperandi.comBryant LafoyU.S. Army Simulation Training Instrumentation Command12350 Research PkwyOrlando, FL 32826-3224lafoyb@stricom.army.milKeywords:HLA, FEDEP, HIDE, toolsABSTRACT: The HLA Integrated Development Environment (HIDE), under the U.S. Army Simulation Training Instrumentation Command (STRICOM) sponsorship, is an integration environment based upon a Common Object Request Broker Architecture (CORBA) framework called Catalyst developed for the US Government by Modus Operandi, Inc.  HIDE supports the integration of HLA tools by providing a common data representation for information sharing among tools and allowing the integrated data to be semantically linked together. The semantic linkages allow the federation developer to browse HLA data, analyze the impact of changes, trace relationships (e.g. traceability from requirements to scenario objects to FOM objects), analyze completeness, ensure consistency, and explore decision rationale. HIDE also supplies an automated Federation Development and Execution Process (FEDEP) that allows users to access the tools from associated FEDEP tasks, access the right file at the right time, determine the status of products, assign task responsibilities, and work collaboratively with teammates.  HIDE supports the continuous evolution of tools, standards, and applications and is not limited to HLA tools. Software Engineering and COTS tools for rationale capture, design, etc., may be integrated as well, leveraging their capabilities for the HLA domain. This paper describes the HIDE environment, the tools that have currently been integrated into this environment, and their levels of integration.  Also discussed is ongoing work in the areas of automatic linking of data, semantic consistency and completeness checking, and the automatic generation of documentation from the integrated data.IntroductionOne of the key tasks when operating in the High Level Architecture (HLA) environment is the development of federations.  To aid federation developers, the Defense Modeling Simulation Office (DMSO) has provided the Federation Development and Execution Process (FEDEP) model and, along with third party developers, has developed suites of tools that span the various phases of this process.  The FEDEP represents the “best practices” from different development methodologies and approaches used in previous federations.  HLA tools are meant to facilitate these best practices.  The FEDEP implementation defined by DMSO is an expanded version of a more abstract process consisting of five basic steps [1]:Requirements DefinitionConceptual Model DevelopmentFederation DesignFederation Integration and TestExecution and Analysis of ResultsIt is important to note that different implementations of these five steps are equally valid since the process can be tailored to meet different federation needs. Federation Development RoadblocksThe current FEDEP is a paper process with tools being developed to support the various phases.  The FEDEP and the tools that support it should be inextricably linked.  Currently, this is not the case: activities, work flow, and assignments are all manual.  Tool support is also ad hoc and unstructured.  A federation developer has to know what tool to use, when to use it, and which artifact should be used with it.  Also, the federation developer has no uniform access to the products from these tools nor information regarding their status.  HLA tools have their own problems as well.  These tools are being developed in a “stovepipe” fashion with a reliance on Data Interchange Formats (DIF) to solve integration problems.  However, there is no actual integrated view of the data and thus there is no traceability among related data and products.  Because there is no traceability, there is no way to record rationale about decisions or analyze the impact of changes.  These roadblocks lead the federation developer to several kinds of unanswered questions such as:What task should I do next?How do I get to the HLA reference documentation?If requirements change, what FOM objects will be affected?What tools should I use to define my federation scenario?Why was this decision made?The HLA Integrated Development Environment (HIDE) can answer these questions.The HIDE solutionHIDE, under the U.S. Army Simulation Training Instrumentation Command (STRICOM) sponsorship, is an integration environment based upon an integration framework called Catalyst.  Catalyst is being developed by Modus Operandi Inc. under sponsorship from Rome Labs and Defense Advanced Research Project Agency’s (DARPA) Evolution Design of Complex Software (EDCS) program [2].  Using Catalyst, HIDE addresses the specific needs and questions of the federation developer in two primary areas: the integration of tools and the automation of the FEDEP model. This paper describes the HIDE environment, the tools that have currently been integrated into the environment, and their levels of integration and techniques.  Also discussed is ongoing work in the areas of automatic linking of data, semantic consistency and completeness checking, and the automatic generation of documentation from the integrated data.Integration of toolsHIDE supports the integration of HLA tools by providing a common data representation for information sharing among tools and by allowing the integrated data to be semantically linked together.  The semantic linkages allow the federation developer to browse integrated HLA data, analyze the impacts of changes, trace relationships (e.g., traceability from requirements to scenario objects to FOM objects), analyze completeness, ensure consistency, and explore decision rationale.  HIDE also supports the continuous evolution of tools, standards, and applications not limited to HLA tools. Software engineering and commercial tools for rationale capture, cost estimation, requirements definition, event monitoring, etc. can be integrated as well, leveraging their capabilities for the HLA domain.  Automated FEDEP modelHIDE supplies an automated FEDEP that allows users to access tools from appropriate tasks with the correct file, determine the status of products, assign task responsibilities, and work collaboratively with teammates. The HIDE automated FEDEP process can be tailored by the user to meet the specific needs of a federation.  This includes tailoring out work products or activities if that level of detail is not necessary.  Integrated ToolsRationale Capture ToolsRationale and requirements capture tools have been the focus of software engineering research for some time.  One such tool, WinWin developed by Barry Boehm of the University of Southern California Center for Software Engineering [3], has been integrated into the Conceptual Model Development and FOM Development activities of the HIDE FEDEP.  WinWin provides a way to capture requirements, issues, options, and rationale for federation development.Scenario Capture ToolsA Java-based Scenario Generation tool developed by Modus Operandi for the US Air Force Rome Laboratory has been integrated into HIDE.  It is useful for eliciting and capturing user requirements and rationale for training. Using this tool, high-level domain requirements may be captured and used to create specific scenarios that address those requirements. It supports the creation of multiple scenarios consisting of multiple participants and interactions. The tool has been successfully used for the construction of HLA scenarios used to drive federation development. This tool supports the FEDEP by correlating the scope of the scenario with the definition of the participant object models (i.e., what the envisioned participant objects are capable of publishing and interacting with).  Using this scenario capture tool, object models may be mapped to their corresponding roles in a scenario, and those roles mapped to specific attributes and interactions in the object model.  In this manner, scenarios are constructed that do not exceed the capabilities of the object models.   This tool also provides a mechanism to generate an ideal FOM that serves as the basis from which the actual FOM is derived. The ModSAF Plan View Display (PVD) was also integrated into HIDE.   Using a ModSAF scenario, the initial FOM hierarchy with the appropriate units is created in HIDE for use during Federation Development.   And similar to the Scenario Generation tool, this tool also supports the generation of an ideal FOM.  Both tools can be used separately or in concert to identify federation scenarios and construct the ideal FOM for the federation.FOM development ToolsAn Object Model Development Tool (OMDT) has been integrated into the HIDE FOM development stage.  DIF files are read into and out of HIDE for use with the OMDT.  Special files are used to maintain a mapping between objects in HIDE and data in the OMDT-developed SOMs and FOMs to keep both consistent.General ToolsHIDE also benefits from the tools already integrated as part of the Catalyst tool suite.  Catalyst provides an Object Browser tool that can be used to navigate and edit the integrated information by following the semantic linkages.  This tool is also used to add relationships between data.  The Process Definition tool is used to create the process that drives HIDE’s process-centric approach.  This tool is available to users to tailor the automated FEDEP process.  And the Catalyst Enactor tool is utilized by the federation developer to execute the activities within FEDEP process. HIDE also includes some commonly used tools that are available throughout the FEDEP process.  Netscape( is available within specific steps to access reference information on the HLA or FEDEP and to access the Modeling and Simulation Resource Repository (MSRR), the Object Model Library (OML), and the Object Model Data Dictionary System (OMDDS).  In addition, the developer has access to various text editors, such as Xemacs.Future ToolsFuture tools will be integrated as they become available.   Focus to this point has been on the objectives development, scenario generation, conceptual model development, federation design, and federation development phases.  For the execution phase, HIDE is viewed as being part of the exercise controller workstation, enabling the exercise manager to launch data loggers, PVDs, and federation management tools. Current HIDE efforts also include investigating what role HIDE can play in integration, testing, and feedback.  Tools under consideration for integration into HIDE include (but are not limited to):Conceptual Analysis: Conceptual Modeler (Aegis)Execution Planning  Federation Execution Planner’s Workbook Tool (VTC)Federation Development: WinWin (for FOM rationale capture), OMDT Pro (Aegis)Federation Integration and Test: Federation Test Suite (STRICOM), Federation Verification Tool (GRTI)Federation Execution: Federation Management Tool (MITRE), Federation Data Collection Tool (VTC), FedDirector (Aegis), Scenario Monitor (Aegis), Mak Technologies HLA tool suite.HIDE ExampleThe following is an example of the conceptual portion of the enactable FEDEP process as shown in Figure 1.  It uses the scenario developed for the object model development experiment sponsored by DMSO [5].  The purpose of this experiment was to analyze various approaches to FOM development and how HLA tools could be used.  For HIDE, the problem statement, objectives, environment context, equipment, facilities, and data were used to generate a new problem statement, objectives (win conditions, issues, options, and agreements), scenario information, and a FOM.Figure 1.  Sample portion of the HIDE enactable FEDEP modelObjectives and RationaleThe process begins by defining the problem statement. In this case, a text editor, Xemacs, was used by the developer to capture the problem statement.  In this example, the problem statement is defined as the determination of fair fight among different SAF systems. Next the rationale capture tool, WinWin, is launched from HIDE.  By using WinWin, the federation developer can capture all the win conditions and all of the related options, issues, along with the rationale.  As part of the HIDE environment, these artifacts can then be linked to artifacts from other tools such as scenario and FOM information.  This provides rationale and traceability beyond what any tool alone could accomplish.ScenarioBased upon agreements reached in WinWin, a scenario is laid down using the ModSAF PVD (the scenario capture tool could also have been used but it was not available at the time of this experiment).  The scenario data is then parsed by HIDE and an ideal FOM is created containing the domain hierarchy and the units specified in the scenario.  These objects are then linked to the appropriate win conditions and agreements from WinWin.FOM developmentUsing the OMDT within HIDE, the ideal FOM can then be edited with interactions, parameters, and attributes added.  With a more robust scenario tool such as the Scenario Capture tool, more initial information can be provided in the ideal FOM.  When the OMDT is run from HIDE, scripts convert the data from HIDE into a form the OMDT can use (DIF file).  The FOM is then edited with the OMDT and when the tool exits, the FOM is read back into HIDE to keep the data consistent.  Again, the data is linked to scenario and objective artifacts.Integration of Heterogeneous DataThe integration of data and tools is the foundation for HIDE.  The specifics of how heterogeneous data and tools are integrated are discussed in the following sections.CatalystHIDE utilizes Catalyst, a high performance, scaleable, distributed environment based on the open industry Common Object Request Broker Architecture (CORBA) specification.   CORBA is a specification produced by the Object Management Group (OMG), the world's largest software consortium. The CORBA specification defines a system for managing and communicating with distributed objects. Transparent distribution and scaleability are some of the benefits of this rapidly growing, vendor independent specification.Considerable benefit can be realized with each new tool integrated into Catalyst. Because Catalyst is a tool integration framework rather than a tool-to-tool integration system, integrating a tool with Catalyst immediately allows it to interact with all other tools integrated into Catalyst. The agile, CORBA-based framework allows Catalyst to take advantage of existing and developing tools through seamless integration of the underlying knowledge base.  Each data artifact in the knowledge base is defined in Catalyst as a CORBA object with a small set of interfaces that must be implemented by the tool integrator. This is a fundamentally different approach based on open interoperability standards and the high level integration of evolving technologies as they become available. Levels of IntegrationThe HIDE effort has identified four distinct levels of integration that are specific to this kind of framework.Level 1: Access to Tools and Files within a ProcessLevel 1, the simplest level of integration, involves “process integration,” in which a tool is integrated into an executable process model, from which it can be invoked. Level 1 involves no data integration, rather it provides users with access to tools and their files within the process context in which they are to be used. For example, a rationale capture tool has been linked into the objectives development activity of the FEDEP executable process model to support federation developers in capturing objectives and rationale for those objectives.  In this case, the tool can be invoked from within the executable process model and used in context to create the work product for objectives development.  In some cases, more than one tool is available to users to accomplish an activity.  This provides the developer with multiple approaches to creating the same work product.  More specifically, Level 1 is identified by the following characteristics:Organizes tool/file access for users within the FEDEP Serves to guide users through the processEnsures common tools are used across the processHelps to structure thinking about what tools are appropriate for what activitiesEnsures conditions are met for start/perform/complete work on work products Input status checkedAuthorized personnel checkedOutput status checkedLevel 2: Bi-directional Translation of Data into CORBA/CatalystLevel 2 integration is the “bi-directional translation of data” into Catalyst.  In level 2 integration, source data are converted into CORBA objects and CORBA objects back into source data.  For example, “M1A2 tank” data from a scenario file may be translated into CORBA “M1A2 tank” objects in Catalyst.  These objects might then be translated into DIF formats for OMDT tools.  Level 2 integration is characterized as follows:Data structures represented as CORBA objectsCommon GUI for browsing networked objects Data may be edited in Catalyst and exported to a tool, or vice versaImpact analysis may be performed on CORBA objects/networkCommon knowledge representation required for Level 3 integration is providedLevel 3: Linking CORBA Objects from Different Tools/DatabasesLevel 3 integration involves the linking of integrated data with data from other tools.  At this level, CORBA objects are linked to each other by semantic relations defined for the domain. For example, federation “objectives objects” can be semantically linked to Conceptual Model “requirements objects” which can be linked to “scenario objects” which can be then be semantically linked to FOM classes and interactions.  Furthermore, impact analysis can identify what FOM objects are affected when these “requirements” objects change. Level 3 is where the power of the integrated data model can be realized.  This level is identified by the following characteristics:Links related objects from multiple tools in meaningful waysSupports Catalyst browsing of integrated data as networks of objectsSupports data transfer from tool to tool (i.e., import from one, export to another):Promotes data sharing across toolsFacilitates use of different (similar) tools within common environmentSupports evolutionary migration from legacy tools (e.g., databases) to new tools (databases) without impactSupports analysis of integrated data through:BrowsingImpact analysisCustom analysis scriptsData exportation to analysis toolsServes as common knowledge representation required for Level 4 integrationLevel 4: Completeness and Consistency of Integrated DataLevel 4 involves keeping the integrated data complete and consistent as the related data changes.  If a requirement is deleted, for example, which related objects will be affected?  With complex systems this may not be obvious by inspection.Another way of describing level 4 integration is the knowledge management of enterprise information, in this case, all the integrated data associated with the FEDEP and its tools.  In order for a framework like HIDE to conform to this description and be flexible over time it must provide the following level 4 characteristics:Maintain semantic correlation of data/objects as they changeUnderstand impacts of change (robust) to correlated data/knowledge base across projects and processesIntelligent support for team members in system design, development, and maintenanceAutomated/semi-automated updating of information/ knowledge base across toolsEnsured accuracy of analyses based upon ensured consistency and completeness of data/knowledge base		As an example, if a FOM requirement is deleted, added, or modified, semantic consistency and completeness can help answer the following questions:How do I know that the FOM is consistent with this change?What products/objects will be affected and how will they be altered?How can the integrated data/knowledge base be automatically transformed to maintain consistency?What will the change affect cost?How will the change impact schedule?		Of these four levels of integration, the most important are levels 3 and 4, but the most visible are levels 1 and 2.  HIDE currently supports levels 1, 2, and 3 (albeit manually) and current work is investigating automatic level 3 integration and level 4 issues.Future workAutomatic Completeness and Consistency CheckingAs mentioned previously, the semantic consistency and completeness of integrated data is critical for a robust development environment in which project-wide information is continually changing.  As changes are made, the impacts to existing data need to be identified and, where possible, automatically corrected.  In order for this to be possible a domain meta-model and ontology/lexicon needs to be created.  This meta-model is a semantic network that includes the domain classes, as well as required and optional relations that define the linkages among the object classes.  Such relationships would include those that link federation objectives to federation requirements, and federation requirements to FOM objects.  The meta-model will also include categories of artifacts.  Requirements, for example, should be sub-classified as performance requirements, interface requirements, entity requirements, and so forth.  This sub-classification scheme will help reduce the search space when working with specific kinds of artifacts.  To facilitate the automatic assurance of semantic consistency and completeness, rule-based systems are being investigated for integration into HIDE.  Simple consistency mechanisms can be implemented without a rule-based system, but as the domain model and complexity grows, a rule-based system would be more maintainable and efficient.  Also, as the user updates the domain model, it also must be checked for consistency and completeness as well.Automatic Linking of DataThe automatic linking of data is actually one facet of semantic consistency and completeness.  The automatic linking of new objects to existing artifacts is similar to a repair situation when things have changed.  The domain meta-model describes what should be linked to what (e.g. requirements should be linked to design artifacts in the following way: “requirement-object is-a-requirement-for design-object”.) and the ontology/lexicon describes the common language for reasoning about the data.  For example, in defining requirements, the user can designate that a requirement pertains to tanks (using the ontology/lexicon).  When a new tank is added to the FOM, the systems knows that requirements are to be linked to FOM classes and it examines the current requirements and links the new tank class to any requirements containing the tank keyword.  The system should present the linking options to users for verification.  As a second step, natural language parsing techniques can be added so that the keywords can be extracted from the requirements without the user having to specify them.  The latter step is a future, more long-term effort.Documentation Generation and NavigationA key problem in any large system development effort is the generation of accurate documentation.  Since the objective of HIDE is to integrate multiple tools across different phases of the FEDEP process, and since each tool contributes to the evolving knowledge base of artifacts, the problem of generating documentation is compounded.   Some tools may define similar objects, which must be coalesced into a single view, other tools may contribute new objects that must be related to others in the evolving knowledge base.  In this integration framework, it is desirable to be able to view documentation and navigate the various semantic relationships between artifacts in an easy to understand manner (e.g., web browser).The Extensible Markup Language (XML) is being explored as the basis of a potential solution to this challenge [4].  XML is the successor to HTML, the Hyper-Text Markup Language.  XML allows schemas to be associated with documents, allows custom tags to index document parts, and provides a rich set of linkages that may be used to relate document parts to each other in meaningful ways.  To create current, consistent documentation of FEDEP artifacts, we intend to use XML to generate documents from the CORBA objects in the HIDE knowledge base.  By generating documentation directly from the FEDEP knowledge base, we can accomplish two key objectives in one approach.  The first is the generation of current, user-friendly web documentation from the FEDEP artifacts.  And the second is a web-based browsing environment that allows users to access and navigate through FEDEP artifacts in a format that they understand.  Just as the FEDEP provides a process-centric view of the enterprise, XML browsers can provide a document-centric view of the world.ConclusionUnder the HIDE effort an executable FEDEP model was created that guides the user through federation development and their use of tools.  Tools not designed to work together have been integrated into the HIDE infrastructure.  The integrated tools come from many sources and produce data in many different formats and are very useful to HLA developers.  However, these tools are more beneficial when integrated together than when they operate in a stand-alone mode.  Several tools have been integrated into HIDE at a level where the data they produce is translated into standard CORBA object representations that have the potential of being semantically linked, resulting in a seamless FEDEP knowledge base.  With semantic linkages between federation artifacts, change can be managed within the FEDEP process since the impact of change can be analyzed and made visible to all stakeholders.The HIDE prototype is currently being used by the Special Operations Forces (SOF) HLA effort to develop their SOF federation.  Feedback from this effort is being used to improve and enhance HIDE for federation developers.  Initial results have already shown that the  HLA Integrated Development Environment is feasible and is very useful for the future evolution of HLA development.References[1] Department of Defense High Level Architecture Federation Development and Execution Process (FEDEP) Model, Version 1.1., dated 9 December 1997.[2] Modus Operandi (formerly Software Productivity Solutions) Catalyst White Paper, http://www.sps.com/ company/techfocus/dds/ catalystwhitepaper.html[3] University of Southern California Center for Software Engineering WinWin Spiral Model & Groupware Support System, http://sunset.usc.edu/WinWin/winwin.html[4] XML home page, http://www.w3.org/XML/[5] Bouwens, Christina; Miller, Raymond L.; Scrudder, Roy; Lutz, Robert, “Object Model Development: Tools and Techniques”, 1998 Spring Simulation Interoperability Workshop, March  9-13, 1998.Author BiographiesCHRISTOPHER DEAN is a Senior Software Engineer/Scientist with SAIC and has been doing simulation research involving interoperability and HLA since January 1995.  Mr. Dean is currently the Project Engineer for HIDE. Mr. Dean has a Bachelors of Science in Computer Engineering from the University of Florida (1994) and a Masters in Computer Engineering from the University of Central Florida (1996). DEANNA NOCERA is a Senior Scientist and member of the Advanced Distributed Simulation Technology II (ADST II) program with SAIC.  She is the Project Director for the HIDE program.  Ms. Nocera received her M.S. in Computer Science from the University of Central Florida and has over 12 years experience in the M&S community.KENT BIMSON, Ph.D., is a Chief Scientist with SAIC.  Dr. Bimson has been actively involved in HLA and other efforts at SAIC. Dr. Bimson formerly server as Chief Scientist, Artificial Intelligence, for the Semi-Automated Forces (SAF) component of the U.S. Army’s Close Combat Tactical Trainer (CCTT) program. Dr. Bimson holds a Ph.D. in Linguistics from UCLA (1978) and a Masters in Computer Science from CSUS (1983).BRUCE MCQUEARY is a Systems Engineer with Modus Operandi Inc., in Indialantic, FL where he is currently performing research on integration frameworks, and their potential in the simulation community. Mr. McQueary has been active in the simulation community for over nine years working for the Naval Training Systems Center and Harris Corporation.  Mr. McQueary holds a BS degree in Electrical Engineering and a MS degree in Computer Engineering from University of Central Florida.	BRYANT LAFOY is currently the lead systems engineer on the Advanced Distributed Simulation Technology contract at STRICOM in Orlando, FL. He has been involved with military simulations and simulators for over 20 years working with the Navy, Army and Coast Guard simulation communities. He holds Bachelor of Science degrees from both Wake Forest University and Florida Atlantic University and a Masters of Business Administration from Florida Institute of Technology. 