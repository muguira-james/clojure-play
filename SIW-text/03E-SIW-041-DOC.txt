The Test and Training Enabling Architecture (TENA) 2002Overview and Meta-ModelEdward T. PowellScience Applications International Corporation.5400 Shawnee Road, Suite 110Alexandria VA 22312703-587-8036 HYPERLINK "mailto:edward.powell@saic.com" edward.powell@saic.comKurt LessmannAmtec Corporation500 Wynn Drive, Suite 314Huntsville AL 35816256-722-7200 HYPERLINK "mailto:klessmann@amtec-corp.com" klessmann@amtec-corp.comJason LucasUS Air Force201 West Eglin Blvd, Suite 258Eglin-AFB FL 32542850-882-8169 HYPERLINK "mailto:jason.lucas@eglin.af.mil" jason.lucas@eglin.af.milGeorge J. RumfordCentral Test and Evaluation Investment Program4850 Mark Center Drive, Suite 1000Alexandria VA 22311 703-681-4000 x138 HYPERLINK "mailto:george.rumford@osd.mil" george.rumford@osd.milKeywords:Interoperability, Reuse, Architecture, Instrumentation, Ranges, Test and Evaluation, TENA, SBA, JDEP ABSTRACT: Foundation Initiative 2010 (FI 2010) is a joint interoperability initiative of the Director, Operational Test and Evaluation.  The vision of FI 2010 is to enable interoperability among ranges, facilities, and simulations in a quick and cost-efficient manner and to foster reuse of range assets and future range system developments.  The means to interoperability is through a common architecture, called the Test and Training Enabling Architecture (TENA) 2002.  To achieve its goals, TENA specifies the development of a common meta-model, a common object model, and a common software infrastructure.  A major part of common infrastructure is the TENA Middleware which is used for high-performance, low-latency, real-time communications between applications.  The content of the communication is the "Logical Range Object Model (LROM)," a set of object definitions that are agreed to by all applications that participate in a logical range.  While the LROM may seem similar to the HLA's Federation Object Model (FOM), the nature of objects in each are strikingly different.  Objects in an HLA FOM are based on the HLA Object Model Template (OMT), while objects in the TENA LROM are based on the TENA Meta-Model.  The TENA Meta-Model defines the different features object definitions in the LROM may have.  TENA supports a wide variety of object modeling features that the HLA does not: composition, local and remote object methods, interfaces, vectors, valuetypes, distributed object references, and fundamental types.  This paper first presents an overview of the TENA 2002 architecture, including its constituent parts and the rationale for the major decisions codified by it.  It then discusses the TENA Meta-Model in more detail, provides a description of the subset that has been implemented in the current TENA Middleware prototype (IKE 2 Release 3), and contrasts the TENA Meta-Model with the HLA OMT.IntroductionThis paper summarizes the Test and Training Enabling Architecture (TENA) 2002, designed to bring affordable interoperability to America's test and training ranges and their customers.  In addition, the paper provides significant detail about the TENA meta-model, a key part of TENA’s interoperability roadmap.  TENA is designed to support the implementation of the Joint Vision 2020 by promoting integrated testing and simulation-based acquisition through the use of the concept of a “Logical Range.”  A logical range integrates existing testing, training, simulation, and high-performance computing technologies, distributed across many facilities, and ties them together using the elements of a common architecture.While highly capable, America's ranges have many “stovepipe” systems, built with different suites of sensors, networks, hardware, and software.  This situation must be changed if the military is to make the most efficient use of its current and future range resources.  Future testing and training requires the integration of systems from multiple ranges with hardware-in-the-loop-facilities and advanced simulations.  As weapon systems are becoming more sophisticated and complex, our ability to test and train with them is becoming more difficult.  A mechanism to overcome the current “stovepipe” structure is required.  This mechanism is the logical range.  In a logical range, real military assets can interact with each other and with simulated weapons and forces, no matter where these forces actually exist throughout the world.  TENA is designed to make the logical range vision a reality.TENA is a product of the Foundation Initiative 2010 (FI 2010) project, sponsored by the Central Test and Evaluation Investment Program.  The FI 2010 project performed numerous studies on other architectures, including the Defense Information Infrastructure Common Operating Environment (DII COE) and the High-level Architecture for Modeling and Simulation (HLA).  TENA builds upon the advances made by each of these architectures.The core of TENA is the TENA Common Infrastructure, including the TENA Middleware, the TENA Repository, and the TENA Logical Range Data Archive.  TENA also specifies the existence of a number of tools and utilities, including those necessary for the efficient creation of a logical range.  Range instrumentation systems (also called range resource applications) and all of the tools interact with the common infrastructure through the medium of the TENA object model.  The TENA object model encodes all of the information that is transferred between systems during a range event.  It is the common language with which all TENA applications communicate.Structure & Driving RequirementsAn architecture is a bridge from requirements to design, in which the most important, critical, or abstract requirements are used to determine a basic segmentation of the system.  These “driving requirements” dictate the structure of TENA and its content.  There are driving requirements in the technical realm (providing guidance on how TENA systems should be constructed), and in the operational realm (providing guidance on what features TENA logical ranges must have).  TENA’s driving requirements are derived from a detailed analysis, based on DoD-supplied source documents, as well as feedback from the range community itself.  The most important technical driving requirements are interoperability, reuse, and composability.  These three terms are all related, but each has a different emphasis.  Interoperability is the characteristic of an independently-developed software element that enables it to work together with other elements toward a common goal.  Interoperability is focused on what is common among these software elements.  There are many degrees of interoperability, varying on a continuum.  For the purposes of the range community, the most important degree of interoperability is termed “semantic interoperability,” interoperability built upon the foundation consisting of a common language and context for communication.Reuse is the ability to use a software element in a context for which it was not originally designed, and so is focused on the multiple uses of a single element.  Composability is the property of a collection of reusable, interoperable elements, so that systems can be built from different arrangements depending on changing needs.To achieve interoperability one must have a common architecture, an ability to meaningfully communicate (including a common language and a common communication mechanism), and a common understanding of the context (including the environment and time).  In addition to these features, reuse requires well-documented interfaces and composability requires a repository that contains the composable elements as well as metadata about how they can be assembled.The specific nature of these driving requirements dictates the structure of TENA.  TENA consists of:An operational architecture view that includes a concept of operations for how to use TENAA technical architecture view: rules and standardsA domain-specific software architecture view that contains a common meta-model, a common object model, a common infrastructure, and a common technical process.An application architecture view focused on how to build an applicationA product line, detailing many utilities, tools, and gateway applications that are necessary for TENA to operateThis structure is consistent with the “Extended C4ISR Architecture Framework,” an enhancement to the “C4ISR Architecture Framework,” based on research by DARPA on large-scale interoperable enterprise architectures.TENA’s operational driving requirements focus on supporting a logical range throughout the entire range event lifecycle, supporting testing and training in a network-centric warfare environment, supporting rapid application and logical range development, supporting integration with modeling and simulation (M&S), supporting a wide variety of range systems, and supporting the gradual deployment of TENA onto the ranges.  TENA Architecture OverviewAn overview of TENA is shown below in  REF _Ref13482307 \h Figure 1.  TENA recognizes five basic categories of software, distinguished by color in the figure:TENA Applications (Range Resource Applications and TENA Tools) (green) – Range Resource Applications are range instrumentation or processing systems built to be compliant with TENA and are the heart of any logical range.  TENA Tools are generally reusable TENA applications, made available to the community, that help facilitate the management of a logical range through the entire range event lifecycle.Non-TENA Applications (gray) – range instrumentation/processing systems, systems-under-test, simulations, and C4ISR systems not built in accordance with TENA but needed in a logical range.The TENA Common Infrastructure (red) – those software sub-systems that provide the foundation for achieving TENA’s goals and driving requirements.  These include the TENA Repository, as a means for storing applications, object models, and other information between logical ranges; the TENA Middleware, for real-time information exchange; and the Logical Range Data Archive, for storing scenario data, data collected during an event, and summary information.The TENA Object Model (yellow) – the common language used for communication between all range resources and tools.  The set of objects used in a logical range is called the “logical range object model (LROM)” and may contain TENA standard object definitions as well as non-standard (ad hoc) object definitions.TENA Utilities (blue) – applications specifically designed to address issues related to usability or management for the new TENA concept of a logical range; part of the “TENA Product Line.”This segmentation is designed specifically to address all of TENA’s driving requirements.  The common TENA Object Model, as part of a more comprehensive domain-specific software architecture, and including a common infrastructure for communication, specifically addresses interoperability.  Reusability is addressed through the use of a common infrastructure as well as through the existence of numerous gateways that can bridge a TENA logical range to other architectures, protocols, and systems.  Composability is addressed through the use of certain TENA tools and utilities that access components and object definitions stored in the TENA Repository.TENA Operational Architecture ViewThe TENA operational architecture view describes a technical concept of operations (ConOps) for planning, creating, testing, and using a logical range.  The ConOps, derived from an analysis of many ranges’ operational processes, divides the process for creating a logical range into five main phases, illustrated below in  REF _Ref15994566 \h Figure 2:  (1) the customer objectives and requirements analysis phase, (2) the event planning phase, (3) the event construction, setup, and rehearsal phase, (4) the event execution phase, and (5) the analysis and reporting phase. Note that the phases represent different types of activities, some performed simultaneously, and all performed iteratively based on the current understanding of the logical range’s objectives.  Each phase itself has a number of objectives and these must be accomplished in as streamlined a process as possible.  The TENA Tools are intended to help fully or partially automate some of the more difficult aspects of these processes.  Thus, the definition and functionality of the Tools is based on the ConOps and the needs of range users in managing a logical range.Figure  SEQ Figure \* ARABIC 2 -- Phases in the Logical Range ConOpsTENA Technical Architecture ViewTENA’s technical architecture view specifies rules for using TENA and affiliated standards that assist applications in achieving TENA’s technical requirements and broader DoD goals.  The rules are divided into three different categories, representing the three different levels of TENA compliance that an application can aspire to.  The three categories of rules (and their associated compliance levels) are paraphrased below:Level 1—Minimal Compliance:Applications must use the standard API when interacting with the TENA MiddlewareLogical ranges must have an LROM definedAll objects in the LROM must conform to the TENA meta-modelLevel 2—Extended Compliance:All execution-time communication must be via the TENA MiddlewareApplications must describe the data the produce and consumeAll applications must implement time properlyAll applications must describe the mechanism and accuracy of their time measurementsLevel 3—Full Compliance:All applications must publish an Application Management ObjectApplications may not use object definitions that conflict with the standard TENA Object ModelApplications must use the Logical Range Data Archive for all data storageA number of commercial standards are referenced in the TENA technical architecture view, but the two most important external standards that TENA addresses are compliance with the Joint Technical Architecture (JTA) and interoperation with the High Level Architecture for Modeling and Simulation (HLA).  TENA itself defines a new standard—the TENA Middleware API, to be standardized by the Range Commanders Council (RCC).TENA Domain-Specific Software ArchitectureThe TENA Domain-Specific Software Architecture (DSSA) explicitly addresses the driving requirement of interoperability by specifying four fundamental components for any interoperable collection of software elements: a common meta-model, a common object model, a common software infrastructure, and a common technical process.  Each of these aspects complements the others in supporting interoperability.  The common meta-model provides a definition of what constitutes an object in the TENA object model.  The TENA object model represents the common language and common interface definitions that all TENA application share.  The common software infrastructure supports TENA applications in their use of the TENA object model throughout the logical range process.  Finally, the common technical process provides guidance on how to create logical ranges and TENA-compliant software consistent with the overall TENA ConOps.The TENA meta-model describes the features of TENA objects, messages, and data streams.  TENA objects are called “Stateful Distributed Objects (SDOs)” because they combine the features of Common Object Reference Broker Architecture (CORBA)-like distributed objects with the features of a distributed publish-and-subscribe system into a single object construct representing range entities that have non-zero lifetimes during an event.  TENA messages represent transient information delivered from one application to potentially many recipients.  TENA data streams represent repetitive isochronous information important to the range community, such as audio, video, or telemetry.  Each of these three basic data types support a number of the most important features from object-oriented analysis and design, including inheritance, composition, basic types, complex types (structures), interfaces, remote and local methods, etc.  The most important of these features is composition, the ability to create object definitions that contain other object definitions, since this feature promotes the definition of small, common building-block objects, which can then be mixed and matched and included in larger, more semantically-complex object definitions.  More detail about the TENA Meta-Model can be found below in Section The TENA object model enables semantic interoperability among range resource applications by providing a standard “language” that all range resource applications use to communicate. The TENA object model standard will eventually encode all information communicated among range resource applications.  It can be thought of as a range community-wide set of interface and protocol definitions encapsulated in an object-oriented design.  Defining this TENA object model will not be an easy or short-term process.  It will require the work of many range engineers over many years to standardize the various types of information that is being used today.  A “bottom-up” approach, based on the definition of small reusable “building block” objects that encode the most important elements of the range community information domain, is being used to jump-start the TENA Object Model development process.  The bottom-up approach provides early standardization of many key building block objects and enables work to proceed incrementally towards range integration long before a comprehensive standard object model can be completed.The TENA object model is being developed using a prototype-based, iterative approach.  Only object definitions that have been tested at multiple ranges during many logical range executions can be advanced for standardization.  The object model used for a given logical range execution, called the Logical Range Object Model (LROM), can contain object definitions that are either custom-designed for that particular logical range or that are in the various stages of standardization.  In this way, the range community is not forced to use object definitions that may be inappropriate for their logical range, but TENA still promotes the standardization that is necessary to create interoperability.  After object definitions have been tested and used they can be put forward to the TENA Architecture Management Team (AMT) as candidates for formal standardization.  The AMT is responsible for studying these definitions and de-conflicting them with any other object definitions that have already been put forward for standardization.  When the AMT approves the object definitions, they are advanced to the range community standards body, the Range Commanders Council (RCC), for formal standardization.  When a substantial fraction of the range community information domain is standardized, interoperability between range resource applications will be greatly enhanced.The TENA object model also encodes other information necessary for the execution of an interoperable logical range.  Application Management Objects (AMOs) provide an interface to each application allowing that application to be managed during execution.  AMOs also provide status information for the application they represent to allow monitoring of application health and other critical performance parameters.  The natural environment is also represented in the TENA object model.  TENA intends to base its representation of the natural environment on the set of standards being developed as the Synthetic Environment Data Representation and Interchange Specification (SEDRIS).The TENA common infrastructure contains the three software subsystems that are necessary for managing the logical range throughout the event lifecycle: the TENA Repository, the Logical Range Data Archive, and the TENA Middleware.  The TENA Repository contains all the information relevant to TENA that is not specific to a given logical range.  It is, in essence, a large database-of-databases.  It is a single “logical” repository, a mechanism to unify the interface to the different categories of information necessary for a range to fully use TENA.  The repository contains information about the TENA object model, including some standard implementations of the TENA object definitions.  It contains meta-data about these definitions and implementations.  It also contains executable versions of all TENA utilities and tools, software libraries containing the TENA Middleware, documentation about the TENA architecture, and information archived from previous logical range executions.The Logical Range Data Archive stores and provides for the retrieval of all of the persistent information associated with a logical range execution.  Like the TENA Repository, it may not be implemented as a single database running on a single computer, but could be a federated multi-database running on many computers throughout the logical range.  The Logical Range Data Archive must provide for the collection of data at multiple locations: in data stores local to each range resource application, on data collectors running on separate computers that capture LROM information, and possibly in a unifying data store that would contain the scenario information and references to all of the information contained in the other data stores.The TENA Middleware is the high-performance, real-time, low-latency communication infrastructure used by range resource applications and tools during execution for all communication regarding objects in the LROM.  The TENA Middleware is linked into every TENA application along with the LROM object definitions.  The TENA Middleware is built to support the TENA meta-model and is thus a communication mechanism for all objects in the TENA object model.  The purpose of the TENA Middleware is to provide range users with a unified application programmers interface (API) to support SDOs, messages, data streams, and a link to the Logical Range Data Archive.  A prototype of the TENA Middleware, called IKE 2, has been described in previous papers [1] [2] [3].TENA Product LineThe TENA Product Line addresses what utilities, tools, and gateways to build.  The Product Line Architecture cuts across all aspects of architectural decision-making.  It relies on the domain analysis performed in the definition of the DSSA, but also is based on the analysis done to create the Operational Architecture and the Logical Range Concept of Operations.  A number of utilities and tools have been defined to assist the user in creating and managing a logical range as well as dealing with the elements of the TENA common infrastructure.  Utilities are designed to assist the user in making TENA work as an architecture, while Tools are general reusable applications that help the user efficiently create and manage logical ranges throughout the entire range event lifecycle.  The TENA Utilities are:Repository Manager – provides the configuration management and security of the TENA repository.Repository Browser – allows range operators to extract information, object models, and tools from the repository.Logical Range Planning Utilities – assists the user in understanding the logical range information architecture, in verifying TENA compliant applications, in application configuration, logical range check-out, etc.Logical Range Object Model Tool Suite – assists the user in creating the LROM and includes a syntax checker, a code generator, a schema generator, and the LROM verification tool.Data Archive Manager – assists the user in managing, coordinating, and ensuring the consistency of the diverse distributed data stores that make up the Logical Range Data Archive.Data Collectors – the primary means for recording public LROM information, equivalent to “data loggers” in other architectures.Replay Utility – provides for exercise playback from the Logical Range Data Archive.The categories for potential TENA Tools have been defined as follows:Event Planner Tool Suite – applications that help with event objectives analysis, scenario generation, plan creation, cost and schedule creation and monitoring, and other planning activitiesEvent Manager/Monitor – applications to help the users manage (control) and monitor logical range activities during initialization and run-time.Communications Manager – applications that help manage and monitor the communications infrastructure (networks)Event Analysis Tool Suite – applications that provide all of the analysis activities associated with a logical range, based on data collected in the Logical Range Data Archive.GatewaysGateway applications allow the integration of TENA applications with non-TENA resources.  They communicate with both a TENA logical range (using the TENA Middleware) and another set of applications using some other protocol. Gateway applications contain algorithms that specify how to subscribe intelligently to only the information needed by that particular gateway.  In larger systems, gateways might have to be federated with one another, working together to balance processing or network load.  The TENA-HLA gateway is the most important gateway specified by TENA.  Such a gateway directly addresses how to easily integrate TENA resources with modeling and simulation systems.  In addition, numerous gateways for range protocols, C4ISR systems, and operational military equipment and vehicles are required.  Each of these gateways needs to be built in a flexible fashion, to be easily adaptable to many different LROMs.  As architecture efforts in these other communities progress, TENA will monitor their efforts and adapt to make interoperability between TENA and these communities easier and of high quality.Standardizing and Evolving TENATENA is based on the real-world experience of large numbers of range operators and engineers, combined with that of advanced information system architects, designers, and developers.  All object definitions in the TENA object model and all TENA software are based on extensive real-world prototypes built and tested on America's ranges.  Some of these prototypes have already been built; others are to be built shortly.  This architecture overview is based on the results of these prototypes and is expected to evolve as more aspects of the architecture are prototyped and results are documented.TENA must be gradually deployable by the range community.  For example, it would never be possible to deploy TENA overnight.  Many important range operations occur every day, and there would never be a good time to completely replace all critical range systems at once.  TENA must be migrated onto the ranges gradually, one range resource application at a time.  TENA defines such a gradual process based on the judicious use of gateways, providing the range community a mechanism to begin to deploy TENA without disrupting current range operations.TENA is currently being developed by the Foundation Initiative 2010 project.  FI 2010 brought into existence the Architecture Management Team (AMT) as the review body for the TENA architecture.  The AMT meets every four to eight weeks to review all of the important technical aspects related to the development of TENA.  Membership in the AMT is open to all ranges, programs, and interested parties with a stake in the development, deployment, and success of TENA.  Each of the important aspects of TENA, including the TENA object model, the TENA common infrastructure, and the TENA tools will be prototyped, evolved, and eventually standardized.TENA ComplianceCompliance with any architecture is a measurement of how much a given system follows its precepts and implements its policies.  The goals of TENA can only be achieved if the range community embraces the architecture fully.  In essence, TENA compliance represents a mutual commitment by the FI 2010 project and the ranges.  FI 2010 promises the ranges that the more they embrace TENA and achieve TENA compliance, the more their systems will achieve interoperability, reuse, and the other driving requirements.  In particular, building new range systems will be less expensive and setting up range events will take less time, cost less, and provide more functionality to their customers.Broadly defined, an application is compliant with the TENA architecture if it can communicate meaningfully about some subset of the objects in the standard TENA Object Model with other range resource applications and TENA tools using the TENA common infrastructure (especially the TENA Middleware), and therefore fully participate in a TENA logical range throughout the entire logical range development and operation process.  Each facet of TENA brings certain capabilities, but not all facets need to be adopted right away.  TENA therefore seeks to bring capabilities to ranges in a gradual and controlled fashion.  The necessarily gradual nature of TENA’s adoption implies the need for a series of gradations for measuring progress toward full and complete TENA compliance.  For this reason, TENA compliance is a set of objectives along a continuum.  TENA compliance is based on the adherence to the groups of rules defined in TENA’s technical architecture view (shown in Section  REF _Ref15996309 \r \h 5, above).  Adhering to the first (simplest) group of rules defines minimal compliance, while adhering to all groups of rules defines full compliance, with one stage in between.  This graded view of compliance is dictated by the necessity of deploying TENA gradually into the range community. Details on the TENA Meta-ModelThe basis for a successful logical range is its Logical Range Object Model (LROM), which encodes all information exchanged in a logical range, and the TENA Middleware, which transports this information.  The rules that guide the creation of the objects that make up the LROM comprise the TENA Meta-Model.  This paper describes and compares the TENA Meta-Model and the HLA Object Model Template (OMT), and describes the significant advantages of the TENA Meta-Model.What is a Meta-Model and How Do You Represent It?A meta-model is a description of the features available for use in formulating an object model.  This is true whether you are defining an HLA FOM or a TENA LROM.  Each architecture has its own meta-model that describes the features that FOM objects or TENA LROM objects may have.  The meta-model concept is not unique to TENA or the HLA—all computer languages are governed by a meta-model of one sort or another, and these are all different from one another.  Defining the TENA Meta-Model is important because it is the architectural construct that specifies both the rules for defining an LROM and the requirements for the middleware.In formulating the TENA meta-model, the TENA architects studied the meta-models of the C++ programming language, the Java programming language, the CORBA Interface Definition Language (IDL), and the HLA OMT.  The TENA meta-model was defined based on the information description requirements of the test and training range communities, taking into account all lessons learned from the studies of previously-defined meta-models.The primary high-level requirements for the TENA meta-model were:It must support distributed computing,It must be rich enough in features to support the object modeling needs of the entire test and training range community,It must provide a semantic unification of information amenable to the creation of a simple, yet powerful, standard TENA Object Model for the entire test and training range community,It must be as easy to use and understand as possible given the above requirements.These requirements led to the invention of the Stateful Distributed Object concept, combining the best features of CORBA and the HLA in one easy-to-use package.It is believed that the TENA meta-model presented below can describe all of the information encoded on ranges today and in the future.  However, if as part of the TENA prototyping process it is determined that additions or changes to the TENA meta-model are needed, these will be made in as unobtrusive a fashion as possible.The rules of any computer language are usually expressed in Backus-Naur Form (BNF), a text-based representation of the structure of the language.  While useful and very precise, such a representation is almost impossible for the casual reader to understand.  Thus for the purpose of this paper (and the TENA 2002 architecture), the TENA meta-model is illustrated pictorially using a representation based on the Universal Modeling Language (UML).  This representation is illustrated in  REF _Ref30347152 \h Figure 3, below.Figure  SEQ Figure \* ARABIC 3 – Pseudo-UML used to depict meta-modelsIn this figure, the reader can see that the standard UML notation for “contains” is modified to mean “may contain.”  Similarly, the inheritance notation is modified so that it can represent the concept “may inherit from.”  Both the “contains” and “inherits” notation can be annotated with a multiplicity to indicate whether an item can contain multiple other items or multiply inherit.An Overview of the HLA Meta-ModelBefore describing the TENA Meta-Model, it is useful to describe the HLA OMT (meta-model) in equivalent terms.   REF _Ref30348267 \h Figure 4 shows the HLA Meta-Model in pictorial form using the pseudo-UML described in the previous section.Figure  SEQ Figure \* ARABIC 4 – The HLA Meta-ModelThe HLA OMT is composed of three basic concepts, the “object” which can loosely contain one or more “attributes,” and the “interaction” which may contain one or more “parameters.”  There is no semantic difference between an attribute and a parameter (other than that objects can only contain attributes and interactions can only contain parameters), thus they are shown as a single item in the figure above.  An object is said to “loosely” contain attributes because such containment is not maintained across process boundaries—different applications can “own” attributes belonging to a single HLA object.Each attribute/parameter contains a single name-value pair, a concept not exactly in the HLA meta-model, but defined in the implementation language (C++ [as shown in the figure] or Java).  The name-value pair contains a block of memory, which of course could contain any type of information; however, the actual type of this information is not available to the RTI, which treats it as the diagram represents—as a single chunk of undifferentiated memory.Both objects and interactions can inherit from other object and interactions, respectively, but cannot contain other objects or interactions.As can be seen from the figure, the HLA meta-model is very limited.  TENA has attempted to provide a much richer and more extensive set of features for object modelers to use when creating their LROMs.  We describe these TENA features in the next two sections.Services of The TENA Meta-ModelThere are three main categories of service that the TENA Object Model must support.  These services provide the underlying functionality for the different types of range information that need to be encoded and standardized.  These three services can be summarized as a) objects with definite lifetimes during the logical range (Stateful Distributed Objects), b) transient objects (Messages), and c) streaming information (Data Streams).  The TENA Meta-Model supports the constructs necessary to describe all of the information that can be transferred using these three services.  In this section we describe these services in detail, while the more formal description of the meta-model can be found in the next section.Stateful Distributed Objects are objects that have a non-zero lifetime during a range event, and have a state that evolves during the event.  They have remotely-invocable interfaces and a publication state that is disseminated to client applications.An SDO is a combination of two powerful concepts: a distributed object paradigm (like the one used in CORBA), and a distributed publish and subscribe paradigm.  “Distributed object-oriented systems and publish-subscribe systems both provide users with powerful programming abstractions.  Yet each provides something the other lacks.  A conventional distributed object-oriented system offers no direct support to the user for disseminating data from a single source to multiple destinations.  A conventional publish-subscribe system does not provide the abstraction of objects with a set of methods in their interface.  Combining this pair of powerful programming paradigms yields a new paradigm providing the strengths of each, and at the same time freeing the programmer from the common chore of explicitly storing the data that arrives as part of the publish-subscribe system.…  An SDO is an object that provides a location-transparent interface to its methods as well as the notion of publication state.  The publication state of an SDO is data that is disseminated from the creator of an instance of an SDO to all parties that have indicated their interest in that SDO's data through a subscription.  Interested subscribers receive references [proxies] to SDOs.  With an SDO reference a subscriber can invoke methods on its interface, as can be done with a CORBA reference to a distributed object. In addition, an SDO reference provides the programmer the ability read the publication state of the SDO as if it were local data, as can be done in many distributed shared memory systems.” [5]An SDO exists only in a single application, in a single process space.  This application is called the “server” or “owner” of this particular SDO.  There is only one owner application of any particular SDO instance at any one time.  The SDO instance itself is called the “servant.”  References to this servant that have a local cache of the servant's publication state (called “proxies”) may exist in any application in the logical range, including the server application.  This concept is illustrated in  REF _Ref30499968 \h Figure 5, below.Figure  SEQ Figure \* ARABIC 5 – SDO Servants and ProxiesComposition is the most important aspect of the TENA meta-model—users may construct SDOs that contain other SDOs.  This feature is critical to the creation of a standard set of reusable TENA object definitions.  Since the TENA meta-model allows composition, TENA object model developers can focus their efforts on standardizing small, reusable, “building block” objects, rather than having to define the entire object model all at once. The remotely-invocable methods on an object are intended for one-to-one communication, in which an object or application wants to communicate something to a specific single object.  Publication state, on the other hand, is intended for one-to-many communication, where one object's publication state is disseminated to many recipients.Messages are single transient “bundles” of information that are published by applications and consumed by sub-scribing applications. Messages represent single instantaneous objects that may be transmitted between publishers and subscribers.  Messages are defined in the TENA Meta-Model as valuetypes (see below), and like SDOs support single inheritance for implementation, multiple inheritance for interfaces, and composition.  Messages are intended for one-application-to-many-applications communication.  For single-application-to-single-application communication, a concept called the Application Management Object is used (see [4]).  Messages are currently being prototyped.Data Streams represent repetitive, isochronous streams of information, such as audio, video, or telemetry.  Data streams are used for both one-application-to-many-application and one-application-to-one-application communication.  They are implemented in the Meta-Model as a special StreamBuffer attribute in an SDO's publication state.  The SDO's other publication state attributes contain all of the meta-data associated with the data stream, while the StreamBuffer attribute represents the endpoint for publishing and receiving the actual data stream information.  The stream itself consists of a sequence of “frames.”  There may be many types of frames associated with a single stream.  Each frame is encoded as one or more valuetypes or vectors. The intent of a separate data stream service is to provide a very high performance, quality-of-service-managed mechanism for exchanging streaming information.  This feature is currently being prototyped..Elements of the TENA Meta-ModelThe TENA Meta-Model is shown in  REF _Ref30504590 \h  \* MERGEFORMAT Figure 4 below, which presents a UML-like diagram that describes all of the elements of the meta-model, along with their relationships. The reader is encouraged to view  REF _Ref30504590 \h  \* MERGEFORMAT Figure 4 as merely an illustration of the meta-model concepts.  Each of the concepts in the figure has a corresponding keyword in the TENA Definition Language (TDL).  Each of these concepts will now be discussed in detail.Class - A class is a Stateful Distributed Object servant.   REF _Ref30504590 \h  \* MERGEFORMAT Figure 4 illustrates a class's features:A class may inherit from zero or one other class (no multiple inheritance),A class may contain other classes (composition), as many as the user needs,A class may contain a vector that contains an arbitrary number of similarly-typed other classes, A class may implement interfaces, as many as the user needs,A class may contain a number of operations (method signatures),A class may be referred to by a reference,A class may contain a StreamBuffer, a special attribute that acts as the endpoint for the dissemination of data streams,A class contains one special valuetype, called the “Publication State,”  which is disseminated to all subscribers of this class and is cached locally in the subscribers' proxies.StreamBuffer - A StreamBuffer is a special attribute of an SDO class that provides an endpoint for disseminating a data stream.  The information in the data stream itself is divided up into frames, each of which is encoded as either a vector or a valuetype.Interface - An interface is a series of one or more operations (method signatures) intended to represent a type.  An interface may extend (inherit from) multiple other interfaces.  It may be implemented either by an SDO class or by a valuetype.  When an interface is implemented by a valuetype, the interface is called a “local interface,” and the inheritance is called “local inheritance” since the methods are executed wherever the valuetype is located, either on the server as part of a servant, or on the client as part of a proxy or message body.Operation - An operation is a method signature, containing a return type and a series of parameters. Return types and parameters can be enumerations, fundamental types, references, vectors, or valuetypes.  Operations may throw exceptions indicating that an error or unexpected circumstance has occurred.  Operations may be contained in a class, an interface, or a valuetype.  In this latter case, operations contained in valuetypes are called “local methods,” since they execute where the valuetype is located.Exception - An exception may be thrown by an operation to indicate an error or unexpected condition.  An exception can contain enumerations, fundamental types, or references to SDOs.Enumeration - An enumeration represents a user-defined type that can take one of several pre-defined values.  Enumerations can be contained in exceptions, valuetypes, or vectors.  Enumerations can be used as parameters and return values of operations.Fundamental Type - A fundamental type is a type that represents an indivisible piece of information.  Fundamental types can be contained in exceptions, valuetypes, and vectors.  Fundamental types can be used as parameters and return values of operations.  The TENA meta-model supports the following fundamental types:short - a signed 16-bit integer,unsigned short - an unsigned 16-bit integer,long - a signed 32-bit integer,unsigned long - an unsigned 32-bit integer,long long - a signed 64-bit integer,unsigned long long - an unsigned 64-bit integer,float - a 32-bit floating-point value,double - a 64-bit floating-point value,octet - an untyped, uninterpreted eight-bit value,char – 8 bits interpreted as an ASCII character,string - a sequence of characters, treated as a fundamental type,boolean - an eight-bit value that represents one of only two values: TRUE or FALSE.Reference - A reference represents a distributed “pointer” to an SDO class.  Using a reference to an SDO, a user can navigate directly to that SDO.  When a user uses (dereferences) a reference, he gets a proxy to the SDO, including the current version of the SDO's publication state.  References can be contained in valuetypes, vectors, and exceptions.  They can be used as parameters and return values of operations.  An individual reference refers to a particular type of SDO.Vector - A vector is a sequence of elements, all of the same type.  A vector consisting of other vectors is a valid construct, so vectors support composition to any level desired by the logical range developer.  A vector can be a sequence of similarly-typed valuetypes, fundamental types, enumerations, or references.  A vector of a series of similarly-typed SDO classes can be contained in another class.  Vectors can be used as parameters and return values of operations.  Vectors can be contained in valuetypes.  Vectors can be used as frames for data streams.  Since valuetypes may also contain vectors, it is possible for the logical range object model developers to create quite complex attributes; for example, a vector of a particular valuetype that contains a vector of vectors of another valuetype that contains fundamental types, enumerations, references, and another vector of a fundamental type, etc.Valuetype - a valuetype is an object that exists only locally in a given process space, but can be transmitted “by value” from one process to another.  The most important valuetype is the one that implicitly comprises the publication state of an SDO class.  Valuetypes may also be used as message bodies and as frames for data streams.  Value-types have the following properties:A valuetype may contain other valuetypes (composition),A valuetype may contain any number of enumerations,A valuetype may contain any number and type of fundamental types,A valuetype may contain any number of references to SDO classes,A valuetype may contain any number of vectors of other elements,A valuetype may be contained in a vector,A valuetype may inherit from at most one other valuetype (single inheritance for implementation),A valuetype may implement any number of interfaces; this is called “local inheritance,”A valuetype may have any number of operations; these operations are also called “local methods,”A valuetype may be used as a parameter and return value for an operation,A valuetype is used as the publication state for an SDO class.Aspects of the TENA Meta-Model Currently Available in The TENA MiddlewareNot all of the features described in  REF _Ref30504590 \h  \* MERGEFORMAT Figure 4 have been prototyped yet in the TENA Middleware.  Initial prototypes have focused on implementing and thoroughly testing the SDO concept, including the capability for unlimited composition of SDOs since this is the most important feature for future object model standardization.  The features currently available in IKE 2 Release 3 are illustrated in  REF _Ref30506396 \h Figure 7 on the next page.The most important elements present in  REF _Ref30506396 \h Figure 7 are the SDO, struct, and vector concepts.  “Structs” are used temporarily in place of the more sophisticated valuetypes. Vectors of fundamental types and arbitrary structs are allowed, so quite complicated object models are possible.  All of the objects defined as part of the LROM are marshaled and de-marshaled by efficient, type-safe, compiled code, no matter how small or complex they are.  Thus the user is not presented with a choice between either high performance on the one hand and standardizability on the other, but can achieve both at the same time.Conclusions about the HLA and TENA Meta-ModelsThe HLA meta-model has two major limitations.  First, because the attribute name-value pairs are interpreted, users are forced to choose between defining fine-grained objects with lower performance, or defining large un-marshaled structures, with higher performance but limited potential for interoperability across platforms or standardizability across programs or domains.  Second, the HLA meta-model does not support composition—the ability to contain objects of one type in definitions of objects of another type.  This deficiency prevents the standardization of small, frequently reused “building block” objects that can be contained in many other objects, and severely constrains object model developers from creating, standardizing, and easily evolving reusable object definitions.The TENA Meta-Model, by contrast, not only allows users to define extremely fine-grained objects with no performance penalty, but empowers users to create classes, structures, and vectors that can be easily reused from one logical range to the next without having to fully and formally define the entire standard TENA Object Model.  The TENA Meta-Model provides the basis for the gradual, iterative development of a standard TENA Object Model through tests performed at real ranges.In addition, when implemented, the TENA Meta-Model provides support for object modeling constructs that cannot even be imagined in the HLA, such as direct native support for data stream definitions that can be standardized across multiple user domains, seamless coordinate conversion capability built right into the object model via local methods, or support for both local and remote interfaces.The definition of the TENA Meta-Model is not set in stone.  Based on feedback from TENA users, new features may be added in the future to meet new information modeling needs.  TENA remains flexible enough to change and adapt based on the needs of the range community as a whole, while still providing substantial and increasingly powerful standards that ensure a new level of high-performance interoperability to the test and training range community and the entire US Department of Defense.TENA and the FutureFuture warfighting concepts, relying heavily on network-centric warfare capabilities, need a new technical foundation for both test and evaluation and warfighter training, based on interoperability and reuse.  The nation cannot afford to rebuild the entire test and training range capability, so a strategy must be created to ensure that needed legacy capabilities are adapted, and future investments are designed to be interoperable in support of these future warfighting scenarios.  The FI 2010 project’s TENA architecture embodies this strategy by prototyping, developing, and standardizing the software and interfaces needed to achieve a more profound interoperability throughout the range community.  TENA is based on state-of-the-art research in advanced information technology and many lessons learned in large-scale systems development and will provide the necessary foundation for developing sophisticated and powerful testing and training systems far into the future.Bibliography[1] George J. Rumford, Minh Vuong, Stephen T. Bachinsky, Dr. Edward T. Powell, “Foundation Initiative 2010: The Foundation for Test and Training Interoperability,” 01S-SIW-056, March 2001.[2] George J. Rumford, Minh Vuong, Stephen T. Bachinsky, Dr. Edward T. Powell, “Foundation Initiative 2010: The Design of the Second TENA Middleware Prototype,” 01F-SIW-110, September 2001.[3] Kurt Lessmann, Jason Lucas, Dr. Edward T. Powell, “Foundation Initiative 2010: Update on the Development and Testing of the Test and Training Enabling Architecture (TENA),” 02S-SIW-052, March 2002.[4] Edward T. Powell, Kurt Lessmann, Jason Lucas, and George J. Rumford, “The Test and Training Enabling Architecture (TENA) 2002 Overview,” 02F-SIW-074, September 2002.[5] Noseworthy, JR, “IKE 2—Implementing the Stateful Distributed Object Paradigm,” Proc. of 5th IEEE International Symposium on Object-Oriented Real-Time Distributed Computing (ISORC 2002), 29 Apr-1May 2002, pp 45-53.[6] Edward T. Powell et al., “The Advantages of the TENA Meta-Model,” 03S-SIW-045, March 2003Author BiographiesDR. EDWARD T. POWELL is a senior scientist with Science Applications International Corporation.  His interests include large-scale system architectures and designs, and the integration of simulations with C4I systems and live test and training facilities. He has served as a lead system architect for many simulation programs including JPSD, STOW, and JSIMS, and is now the TENA Architect and the lead systems engineering for the TENA 2nd Middleware Prototype (IKE 2) Development Team.KURT LESSMANN is the FI 2010 Object Model Development Team Lead.  His background includes the development and utilization of weapon system simulations to support various Army acquisition programs.  He has overseen several High Level Architecture-based distributed testing efforts that specialize in integrating simulations and Hardware-in-the-Loop facilities to support developmental testing programs.  He is currently the Vice Chair for the SISO Simulation Interoperability Workshop Test and Evaluation Planning and Review Panel.JASON LUCAS leads the FI 2010 project Development Advisory Team and is currently involved in the development of the 2nd TENA Middleware Prototype (IKE 2).  .  Mr. Lucas also supports the Flyout Model Information Center (FMIC) at Eglin AFB, FL, and is responsible for managing the development of surface-to-air missile simulations and antiaircraft artillery simulations for use in electronic countermeasures and munitions survivability testing.GEORGE RUMFORD is the Technical Project Manager for FI 2010.  With degrees in Electrical Engineering and Computer Engineering from the University of Missouri, he has worked on numerous multi-range and synthetic test and training events at the U.S. Army White Sands Missile Range (WSMR).  George is a member of the DoD Architecture Management Group (AMG) for the High Level Architecture (HLA) and is currently serving as the Deputy CTEIP Program Manager for the Director, Operational Test and Evaluation (DOT&E).Figure  SEQ Figure \* ARABIC 1 – An Overview of TENAFigure  SEQ Figure \* ARABIC 4 - The TENA Meta-Model, its features illustrated in a UML-like notation.  Stateful Distributed Objects are instances of what is shown on the diagram as a “Class,” shaded yellow.  Messages are defined as Valuetypes.  The information content of Data Streams is defined either as a series of vectors or valuetypes, while the endpoints of Data Streams are defined as a special SDO attribute, the StreamBuffer.Figure  SEQ Figure \* ARABIC 7 - The aspects of the TENA Meta-Model that are currently operational in the TENA Middleware (IKE 2 Release 3).