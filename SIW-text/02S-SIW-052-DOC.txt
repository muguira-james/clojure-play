Foundation Initiative 2010:   Update on the Development and Testing of the Test and Training ENabling ArchitectureFoundation Initiative 2010: The Design of the Second TENA Middleware Prototype The Foundation for Test and Training Interoperability George J. RumfordKurt LessmannFI 2010 Object Model Development LeadAmtec Corporation500 Wynn DrSuite 314Huntsville, AL 35816256.722.7200 HYPERLINK "klessmann@amtec-corp.com" klessmann@amtec-corp.comJason LucasU.S. Army White Sands Missile RangeATTN:  CSTE-DTC-WS-TT (FI 2010)Building 1506White Sands, NM 88002 505-678-2836 HYPERLINK "mailto:grumford@dote.osd.mil" grumford@dote.osd.milFI 2010 Development Advisory Team Lead96 CG/SCTOS201 W. Eglin Blvd. Suite 258Eglin AFB, FL 32542850.882.8169 HYPERLINK "mailto:jason.lucas@eglin.af.mil" jason.lucas@eglin.af.milMinh VuongU.S. Army Simulation, Training, and Instrumentation CommandATTN:  AMSTI-ITTS-I12350 Research ParkwayOrlando, FL  32826407-384-5238 HYPERLINK "mailto:minh_vuong@stricom.army.mil" minh_vuong@stricom.army.milStephen T. BachinskyDr. Edward T. Powell Science Applications International Corporation5400 Shawnee Road, Suite 110Alexandria, VA 22312703-333-5428 HYPERLINK "sbachinsky@dctd.saic.com" sbachinsky@dctd.saic.com,  HYPERLINK "epowell@sito.saic.com" epowell@sito.saic.comGlenn E. ConradScience Applications International Corporation22299 Exploration Drive, Suite 200Lexington Park. MD 20653(850) 882-3310 ext 6025 HYPERLINK "glenn.conrad@eglin.af.mil" glenn.conrad@eglin.af.milKeywords:Interoperability, Reuse, Architecture, Instrumentation, Ranges, Test and Evaluation, TENA, SBA, JDEPAGeorge J. RumfordU.S. Army White Sands Missile RangeATTN:  CSTE-DTC-WS-TT (FI 2010)Building 1506White Sands, NM 88002 505-678-2836 HYPERLINK "mailto:grumford@dote.osd.mil" grumford@dote.osd.milMinh VuongU.S. Army Simulation, Training, and Instrumentation CommandATTN:  AMSTI-ITTS-I12350 Research ParkwayOrlando, FL  32826407-384-5238 HYPERLINK "mailto:minh_vuong@stricom.army.mil" minh_vuong@stricom.army.milStephen T. BachinskyScience Applications International Corporation5400 Shawnee Road, Suite 110Alexandria, VA 22312703-333-5428s HYPERLINK "mailto:" bachinsky@dctd.saic.comDr. Edward T. PowellScience Applications International Corporation1100 N. Glebe Rd. Suite 1100Arlington, VA 22201703-587-8036 HYPERLINK "epowell@sito.saic.com" epowell@sito.saic.combstract:   Sponsored by the Central Test and Evaluation Investment Program (CTEIP) under the Director of Test and Evaluation (DOT&E), the FI 2010 project is focused on improving the interoperability and reuse of instrumentation and other resources at Department of Defense (DoD) test and training ranges and facilities.  To achieve this enhanced capability, FI 2010 is developing and validating a common architecture, a core set of tools, inter-range communication capabilities, interfaces to existing range assets, interfaces to weapon systems, and recommended procedures for conducting synthetic test events or training exercises.  The common architecture, referred to as the Test and Training Enabling Architecture (TENA), consists of an object model defining range resources, a software application programmers interface (or API), and a set of recommended standards, protocols, and guidance (a.k.a. rules) on how to use TENA.  Designed to function over both organic DoD wide-area networks and commercial communication services, TENA will be compatible with the DoD High Level Architecture (HLA) for simulations, addressing range requirements beyond those satisfied by HLA.  Furthermore, the FI 2010 project is developing guidelines on how to make existing range resources TENA-compliant, as well as defining TENA interfaces for tactical systems, allowing weapon systems under test to be stimulated by simulations.  The FI 2010 project is coordinating with the Range Commanders Council so that the TENA elements are reviewed and adopted by the range community as a whole.  The first release of the second TENA Middleware Prototype was completed in October 2001.  The prototype is currently being tested at several test ranges across the Services.  This paper will provide an overview of TENA as well as the test results to date.  The Foundation Initiative 2010 (FI 2010) program is a joint interoperability initiative of the Director, Operational Test and Evaluation.  The vision of FI 2010 is to enable interoperability among ranges, facilities and simulations in a quick and cost-efficient manner, and to foster reuse of range assets and future range system developments.  To achieve this vision, FI 2010 is developing and validating a common architecture, a core set of tools, inter-range communication capabilities, interfaces to existing range assets, interfaces to weapon systems, and recommended procedures for conducting synthetic test events or training exercises.  The common architecture, referred to as the Test and Training Enabling Architecture (TENA), will be compatible with the Department of Defense (DoD) High Level Architecture (HLA) for simulations.  TENA addresses test requirements not supported by HLA and improves the ability of ranges to interact with simulations.  The FI 2010 project is coordinating with the Range Commanders Council so that the TENA architecture, API, and object model are reviewed and adopted by the range community as a whole.  TENA products can function over both organic DoD wide-area networks and commercial communication services.  The FI 2010 project will develop interfaces necessary for existing range resources to become TENA-compliant.  The interfaces will cost-effectively enable current infrastructure to be adapted to this common architecture, rather than require that replacement systems be developed.  FI 2010 is also defining TENA interfaces for tactical systems, allowing weapon systems under test to be stimulated by a simulation.  During FY 99 and 00, FI 2010 developed and tested the first TENA middleware prototype.  During FY 01, the project is developing the second TENA middleware prototype with expanded functionalities  Benefits from FI 2010 products include cost effective replacement of customized data links, enhanced exchange of mission data, organic TENA-compliant capabilities at test sites to be leveraged for future test events, and instrumentation system reuse.  This paper will provide a brief overview of the FI 2010 project and related collaboration efforts as well as an update on the development of the 2nd TENA Middleware prototype.Keywords:Interoperability, Re-use, Architecture, Instrumentation, Ranges, Test and Evaluation, TENA, SBA, JDEPIntroductionABSTRACT:  Foundation Initiative 2010 (FI 2010) is a joint interoperability initiative of the Director, Operational Test and Evaluation.  The vision of FI 2010 is to enable interoperability among ranges, facilities and simulations in a quick and cost-efficient manner and to foster reuse of range assets and future range system developments.   To achieve this vision, FI 2010 is developing and validating a common architecture, a core set of tools, inter-range communication capabilities, interfaces to existing range assets, interfaces to weapon systems, and recommended procedures for conducting synthetic test events or training exercises.  During FY 01, the project is developing the 2nd Test and Training ENabling Architecture (TENA) middleware prototype with expanded functionalities.   The FI 2010 will advance a simulation-based acquisition or a ‘distributed engineering plant’ methodology to streamline weapon system acquisition.  Benefits from the FI 2010 products include cost effective replacement of customized data links, enhanced exchange of mission data, organic TENA-compliant capabilities at test sites to be leveraged for future test events, and instrumentation system reuse.  Through FI 2010, future inter-range operations, instrumentation development and sustainment will cost less and incur less risk.1. IntroductionOver the coming decades the global demands on the U.S. Military will be transformed by the continuing evolution of America’s security and economic interests coupled with the continuing revolution in information technologies.  Joint Vision 2020 (JV 2020), an evolutionary enhancement to the original Joint Vision 2010, provides a roadmap for, over the coming decades, the “creation of a force that is dominant across the full spectrum of military operations — —persuasive in peace, decisive in war, pre-eminent in any form of conflict.” [1]  As the demands on the military are being transformed by information technologies, so are its acquisition processes.  Simulation Based Acquisition (SBA) has the goal of substantially reducing the time, resources, and risk associated with the acquisition, process andwhile producing higher quality products through adoption of a “model-simulate-fix-test-iterate approach” to acquisition.While tThese transformations affect the entire military, they coalesce directly within the Test and Evaluation (T&E) community.  Test and training ranges must support implementation of the JV 2020 vision through joint testing, must serve as an enabler for SBA, must foster integration of testing and training, and must do so in a way that minimizes future costs of range operations.  To accomplish these goals, ranges must become more integrated and interoperable, allowing range assets to be procured and used efficiently, to be reused effectively and to be combined to create the scale and scope of capabilities required to meet the challenges of implementing JV 2020.  The Foundation Initiative 2010 (FI 2010) project is the range community’s mechanism for creating the infrastructure needed to meet these challenges.  Please note that this paper is an update to the paper entitled “Foundation Initiative 2010: The Design of the Second TENA Middleware Prototype” [2] presented at the Fall 2001 Simulation Interoperability Workshop (SIW).  Updates on the design, status, and test and evaluation of the TENA prototype have been provided.   2. Project DescriptionThe vision of FI 2010 is to enable interoperability among ranges, facilities, and simulations in a quick and cost-efficient manner and to foster reuse of range assets and of future range system developments.    The FI 2010 solution will includes a suite of products that will: enable affordable interoperability between test ranges and facilities as a means of sharing resources and data, thus enhancing the capabilities of the integrated test ranges and facilities, and.  provide a common architecture that will enable improvements and modernization efforts made by one range to be used by all cooperating ranges.The FI 2010 project is developing and validating a common architecture, , a common object model, a core set of tools, inter-range communication capabilities, interfaces to existing range assets, and interfaces to weapon systems, along with recommended procedures for conducting synthetic test events or training exercises.FI 2010 Common Architecture.  2.1 Common architectureThe FI 2010 common architecture, referred to as the Test and Training Enabling ENabling Architecture (TENA) (see Figure 1, below), will be while compliant compatible with the Department of Defense (DoD) High Level Architecture (HLA) for simulationsModeling and Simulation.  It , addresses test requirements beyond thosenot supported by HLA and drastically improves the ability of ranges to interact with simulations.  The FI 2010 project is coordinating with the Range Commanders Council so that TENA objects, standards, and protocols are reviewed and adopted by the range community as a whole.  The TENA Architecture enhances software interoperability and reuse throughout the Range Community by giving guidance on how to design range software applications such that they can easily interact with other TENA applications to support a range event.  The architecture also specifies a common TENA Object Model, akin to a common set of interface definitions, thawhicht enables this interoperability through a community-wide understanding of range-related information.  The primary benefit of the TENA architecture is the ability it gives exercise planners to rapidly compose TENA-compliant applications into a geographically distributed “Logical Range” for a range event.TENA applications (also called “TENA Resources”), tools, repositories, and gateways use the TENA Middleware as their means of communication.  A copy of the TENA Middleware software is linked into every TENA application and is the mechanism for all execution-time communication between TENA applications.2.2 Core set of toolsThe FI 2010 core set ofTENA  tools is a suite of key software applications to assist range engineers in planning, configuring, controlling, and analyzing synthetic and multiple range missions.  These TENA-compliant software tools will enhance the productivity of the range engineer so that planning and reconfiguring for large-scale synthetic exercises can be accomplished much faster and with higher reliability.2.3 Inter-range communication The inter-range communication capabilities will validate that the products developed can function over both organic DoD wide-area networks and commercial communication services.  They will also evaluate the necessary end equipment and encryption devices required for transferring large quantities of data between geographically dispersed locations in a TENA-compliant exercise. 2.4 Interfaces for existing range resources and tactical systemsThe FI 2010 project is developing interfaces necessary for existing range resources to become TENA-compliant.  The interfaces will cost-effectively enable current infrastructure to be adapted to this common architecture, rather than require that replacement systems be developed.  Allowing weapon systems under test to be stimulated with a simulation, the FI 2010 project is also defining TENA interfaces for tactical systems, such as C4I systems.  2.5. Recommended proceduresThe FI 2010 project is documenting recommended procedures for test missions involving simulations or across multiple ranges as well as methods for making new instrumentation systems compliant with the common architecture.2.6 Development StrategyDevelopment Strategy.  To ensure that the commonTENA architecture satisfies the needs of DoD ranges needs, TENAit is being developed with significant involvement from the major DoD ranges.  Development Test Cells (DTCs) have been established at therepresentative ranges to provide early insight to TENA performance so that the ranges can, in turn, give essential, detailed feedback on operational issues.  Furthermore, systems engineers from across the range community participate in the Common Test and Training Range Architecture (CTTRA) workshops to impartgive recommendations to the TENA development and specificationmanagers, architects, and developers.  TENA is being defined and developed in three stages, each resulting in the creation of a significant major software prototype. developments.The baseline TENA architecture was refined, and the HLA/TENA initial comparison was completed, through a series of three successful exercises in FY 98.  During FYs 99 and 00, the project developed and tested the 1st first TENA Middleware pPrototype, which both updated and validated a subset of the TENA Technical Reference  Architecture.  This software prototype was tested at six test ranges range DTCs across the three Services and is scheduled to be deployed at both a test range and a training range.    The first release of the second TENA Middleware Prototype (codenamed IKE 2 Release 1) was completed in October 2001.  The prototype is currently being tested at several test ranges across the Services. During FY 01, the FI 2010 project will beis developing the TENA 2nd Second middleware Middleware prototype Prototype (codenamed IKE 2) with expanded functionalityties.  The development contractor for IKE 2 is SAIC Distributed Computing Technology Division.  Subsequent releases of IKE 2 will occur throughout FY 02.   Using a rapid prototyping approach, the TENA development spirals of IKE 2 allow test engineers at DoD ranges and facilities to quickly evaluate and refine the common architecture.  A third middleware prototype is planned for the FY 03 time frame with the goals of increasing performance, increasing integration with persistent storage mechanisms, broadening platform support, expanding the common object model, increasing the complexity of logical ranges being tested, and increasing support for the integration of legacy systems.  In addition to the 2nd prototype, the FI 2010 project will be reviewing several commercial-off-the-shelf (COTS) software applications to serve as FI 2010 tools.  The project is on track and scheduled for Full Operational Capability (FOC) by the fourth quarter of 2004, with the ultimate goal to have TENA adopted as a Range Commanders Council (RCC) standard..3. FI 2010 and TENA ObjectivesFI 2010 is chartered with creating the technological infrastructure to implement logical ranges: integrated environments that combine test ranges and facilities, training ranges, laboratories, and modeling and simulation (M&S) assets to improve the scope, scale, and effectiveness of testing and training in a cost-effective manner.  The logical range concept extends across the full lifecycle of exercises and events.  FI 2010 will support event planning through provision of collaboration tools and reuse repositories that aid range personnel in working together to plan and assemble complex test events or training exercises.  It will support event execution by interconnecting assets within and across facilities to create a seamless virtual environment.  Finally, FI 2010 will support post-event data analysis by providing distributed access to event data.The mechanism for this integration is TENA, the FI 2010 architecture.  TENA will support interoperability between the live testing/training range domain and the larger M&S community.   TENA includes several components: a domain-specific object model that supports data and remote object control across exercise/event lifecycles, a common set of services for manipulating objects, as well as other standards, protocols, rules, and supporting software.  4. IKE 2 Technical ObjectivesThe essential problem addressed by the creation of the TENA second middleware prototype, or  (IKE 2), is interoperability between and among range information processing systems leading to tighter integration, more software reuse, increased connectivity, and a better ability to create larger, more realistic, and functional logical ranges.  Th  The IKE 2 infrastructure will facilitate interoperability throughout all phases of a test or training event, including planning and the allocation of resources, event rehearsal, event execution, and post-event analysis.  The infrastructure middleware will facilitate reuse through composable or modular solutions to range problems, and will do this primarily by providing a standards-based object-oriented Application Program Interface (API) for range software development based on existing COTS and DoD standards, such as the HLA.  The infrastructure will also allow for integration with a repository containing reusable software, data, and components that can be easily put together to perform new missions for the ranges.The IKE 2 middleware will support pre- and post-exercise requirements through the use of the Interactive Data Language (IDL) as a common object definition language, through  full integration of dynamic and persistentrange data, and through a combination of push and pullobject- and message-based data distribution mechanisms which that are applicable across run-time, management, planning, and analysis applications.  The approach will support event executionhigh-performance run-time data transfer via a high-performance real-time data distribution system derived from the Common Object Reference Broker Architecture (CORBA)-based HLA Run Time Infrastructure – Next Generation (RTI-NG) software.  The IKE 2 approach facilitates legacy integration through inclusion of  “Data InterfacesGateway Applications” (DIs) that bridge TENA and legacy other protocols.5. IKE 2 Technical ApproachThe IKE 2 architecture will be a blueprint for the next generation of TENA infrastructure design and development.  The architecture IKE 2 design will draws heavily on object technology, employing object-oriented frameworks to provide flexibility, extensibility, and modularity to allow TENA developers to tailor the infrastructure to meet their particular needs.  The IKE 2 middleware is designed to be as flexible as possible for use by the range software developer, with support for multiple programming languages and configurations, and with some IKE 2 modules capable of being tailored to meet a specific range event’s unique requirements.  The TENA vision mandates that the IKE 2 middleware be designed to embrace change, promote flexibility, and manage complexity so that the range community can work together to build interoperable and reusable systems in as efficient and cost-effective a fashion as possible.  The goal is for the IKE 2 design to be robust enough for the most demanding applications and general purpose enough to meet the requirements of future range event configurations.   5.1 System design philosophySystem Design Philosophy.  The IKE 2 softwaremiddleware architecture willis designed to be as flexible as possible for use by the range software developer, with be capable of adapting and evolving to meet the increasingly diverse and demanding needs of the range community.  It will support for multiple programming languages and configurations, and with some IKE 2 modules being capable of being tailored tailored to meet a specific range event’s particular unique requirements.  The TENA vision mandates that the IKE 2 prototype infrastructuremiddleware be designed to embrace change, promote flexibility, and manage complexity so that the range community can work together to build interoperable and reusable systems in as efficient and cost-effective a fashion as possible.  The goal is for the IKE 2 design to be robust enough for the most demanding applications and general purpose enough to meet the requirements of future range event configurations.The use of object-oriented frameworks provides the technical capability to create an infrastructure middleware that is both generic (applicable to any event) and tailorable (customizable to meet the special needs of any particular event) within a single software architecture and using the same interfaces.  An object-oriented framework is a set of classes, designed to work together, that embodies an abstract design for solutions to a family of related problems.  In the case of IKE 2, the family of related problems is the interoperability, reuse, and object distribution problems addressed by TENA.  Developers specialize framework classes to solve a specific problem.  Frameworks add structure to these problem solutions and it is this structure that enhances interoperability.  To see how frameworks help solve TENA-related problems, consider the three kinds of developers in a TENA context:Range Resource Developers: the developers throughout the range community who build new applications and interfaces to legacy systems that are resident at ranges.  Examples of Range Resources include display systems, data processors, sensors (radars, telemetry, optics, hydrophones, etc.), stimulators, and range control systems.  They are primarily concerned with the algorithmic correctness and functionality of their applications and not with the details of the distributed  federation, ; however, they are concerned with interoperability between their applications and the rest of the logical range.  Application developers will use the TENA/IKE API.Range System Integrators (a.k.a, Logical Range Builders): the developers who develop the common data definitions (the Object Model), interest management statements, and the data interfaces needed for a given event.  They will customize and tune the performance and behavior of the IKE 2 software to meet an event’s requirements.TENA Middleware Developers: the developers who actually build the IKE 2 software and frameworks and create the underlying mechanisms for implementing the TENA functional capabilities.The basic approach in designing IKE 2 is to create an architecture design that is general enough to meet the needs of the range community, interoperable enough to present a consistent API to all range systems, and flexible enough to adapt to distinct needs of a given test mission.  The architecture will be demonstrated through a modular, flexible IKE 2 prototype that will be extensible over time to meet the needs of the entire range community.   Reuse comes in two different flavors.  Design reuse means that the detailed design that is created will lead to inherently reusable software.  This type of reusability will be achieved by the inherent flexibility of the framework- and standards-based architecture.  With this type of reuse, the prototype can adapt to changing requirements and lead the way towards a commercial TENA middleware.  The second flavor of reuse is reuse of existing designs and software.  The architecture (described below) already adapts and reuses a number of features present in the current HLA RTI-NG 1.3 implementation.  Reusing a substantial amount of design work from the RTI along with a large amount of open-source COTS software used by the RTI-NG 1.3 is envisioned for the development of IKE 2.  This existing software has already been built using a framework-based architecture.  Designs, interfaces, and algorithms from the IKE 1 prototype will also be reused, where appropriate.  5.2 Critical architectural elements The approach to designing and building the  IKE 2 prototype design is based on a number of key architectural  elements, assumptions, and technologies.  This section discusses these elements.  5.2.1 Object model interaction mechanisms.Object Model Interaction Mechanisms.    There are a number of object communication modes that need to be supported by TENA (and the IKE 2 prototype) and incorporated into the TENA object model.  Each communication mechanism is important for a given aspect or time frame in an event’s history.  TheThe two primary modes are:Meta-Object Protocol (MOP).  The meta-object protocol is used by applications to gain information about an object when it needs to understand how an object is constructed.  The MOP allows for the retrieval of information about the object’s methods and attributes, and information about how objects are linked to each other (i.e., their relationships).  The MOP can be used by object repositories, object browsers, compilers, development environments, etc., to make understanding and using a class or an object easier for the various types of developers.  The TENA MOP would be used by range system integrators to understand the capabilities of the software and TENA objects resident in the repository.Location Transparent Object ProxiesStateful Distributed Objects (SDOs).  This communication mechanism represents a distributed object paradigm (such as the one used in CORBA) augmented to include dissemination and local caching of object state information.  This The distributed object aspect of this access mechanism allows an object’s methods to be accessed independently from where the actual servant object resides.  The calling objectlient application manipulates a proxy object that “stands in” for the accessed or targetservant object.  The target object may exist in the same process space as the caller, in a different process space, or on a different machine.    When the client applicationcaller invokes a method on the its proxy, the proxy invokes the method on the target servant object (wherever it is) and pulls any return information from the target servant and delivers it to the callerclient.  If the client application merely wishes to access the object’s state information, accessor methods immediately return the values of the appropriate state variables whichthat have been cached locally inside the proxy.  The combination of CORBA-like location transparency with efficient state dissemination and caching is referred to as a “Stateful Distributed Object” paradigm.For example, in the range community, a proxy object may exist for a given radar system and its methods might represent commands to be sent to the radar.  Another use may be for accessing information infrequently about an object that changes very frequently.  In such a case, a pull-based mechanism is more efficient than a push-based mechanism (discussed below).  The primary example of a location-transparent object proxy is the standard CORBA Object Request Broker (ORB) mechanism.Event Channel/Run-Time Messaging and Data Streams.  These communication modes are similar to more low-level message-based communication in that single messages and data streams can be sent between applications based on their needs.  Support for data streams is intended to provide TENA applications with native capability to efficiently send and receive audio, video, and telemetry without incurring undue encapsulation and transmission overheadThis access mechanism also uses proxies to stand in for remote objects but in this case the target object sends messages to its proxies telling them of its changes in state.  This mechanism is considered a push-based mechanism since the target objects push their information out to any other applications that have expressed interest in them.  Data delivery using this mechanism is usually through an event channel that delivers messages to those applications subscribed to that channel..  An example of this mechanism is the CORBA Event Service.Persistence / Store and Forward Messaging.  This access mechanism stores objects or their state in a persistent store, such as a database, to be retrieved at a later time by applications that need it.  This mechanism incorporates the strengths of commercial databases (such as transactions, robustness, persistence) while sacrificing the low latency of the previous two mechanisms.  Sometimes, a persistent store is used to create a reliable messaging service in which the messages are stored in the database and forwarded to the appropriate application when it comes on line.  Extremely scalable and robust, but proprietary, messaging services such as Oracle Advanced Messaging and The Information Bus by TIBCO have been created over the years using this paradigm.  Non-proprietary mechanisms based on the CORBA Asynchronous Messaging Service are beginning to appear in the marketplace.5.2.2 Pre-compiled object model.Pre-compiled Object Model.     Because frameworks are both generic and tailorable, it becomes possible to incorporate the object model into an application without losing generality or flexibility.  An object model that is pre-compiled and initialized  and linked intowith the an application yields many benefits, including increased efficiency, the ability to support strong type checking, and the ability to efficiently handle complex object relationships.  In the opposite case of loose coupling between the object model and the software, the application needs to interpret the object’s methods and attributes at run-time, causing significant performance penalties.  Similarly, rSince run-time typing of the object model can lead to difficult-to-find defects in the application, —since given that both type and value information are supplied by the range systemlogical range integrator and are not checked for consistency by the compiler—compile-time definition and typing is chosen to provide increased reliability as well as increased performance.  Such errors can manifest themselves in subtle, intermittent, and insidious ways (such as stack corruption) that can only be tracked down with extremely time-consuming troubleshooting.  Modern software engineering practices and procedures mandate the use of strongly-typed languages (such as C++ or Java) primarily to avoid the maintenance problems associated with run-time data typing.A mechanism is needed to enable a range systemlogical range integrator to create a compilable object model without impacting IKE’s generality.  The IKE 2 solution to this problem is to use auto-code generation based on defining the object model through the use of  in a variant of the the CORBA IDL Interface Definition Language (IDL) called the TENA Definition Language (TDL).  A n IDL TDL compiler will compile the object model for a given exercise or configuration into programming language code such as C++ or Java.  The compiler would will auto-code-generate (ACG)  all the software necessary for the object model information to be attached to the framework in a clean and seamless fashionseamlessly linked into the application.  The IDL was chosen as the definition language because: 1) it is fully object-oriented and is thus completely compatible with the framework design, 2) it is programming-language independent, 3) a number of free, yet fully-supported, IDL compilers exist, and 4) it is a standard that is fully compatible with the CORBA-based infrastructure already developed.5.2.3 Full event life cycle support.  Any test event or training exercise is the result of a long planning, setup, and rehearsal process.  The actual test event itself, when it occurs, may represent a small fraction of the effort and time devoted to the entire event process.  Despite this fact, almost all effort with respect to interoperability and reuse in the DoD has been focused on applications that exist during the small amount of time that an event actually takes place, while ignoring or downplaying the opportunities for enhancing the interoperability and reuse of applications used before or after an event execution.  This focus on event-execution-related applications is a lost opportunity to build an architecture and infrastructure that truly enhances interoperability and reuse throughout all of the range community’s broad efforts.  Thus, TENA (and the implementation of the IKE 2 prototype) includes mechanisms for managing information (i.e., objects) before, during, and after a given event.The IKE 2 prototype will incorporate mechanisms for managing both persistent data during and outside of run-time, as well as message and proxy-oriented information during run-time.  The IKE 2 API will try to present the range resource developers with as consistent and unified an API as possible with respect to manipulating objects throughout an event life cycle. Since there are a number of significant differences between the nature of run-time information and, for instance, planning information, it may be necessary to design the object model in such a way as to differentiate between an object’s run-time aspect and its persistent aspect.  Thus, though the IKE 2 API will have interfaces to deal with managing objects through the full event life cycle, it is incumbent on the range system integrators to create an object model that will take full advantage of the capabilities of all of the possible communication mechanisms.  In this way, IKE 2 will be pre-positioned to help the range community manage the large amount of data required to successfully plan, execute, manage, and analyze an event.5.2.4 Data interfaces.Inter-Architecture Integration Mechanism.    TENA must have a mechanism to incorporate legacy ranges systems so as to leverage the existing DoD test and training infrastructure.  Moreover, TENA must be able to interface to weapon systems to properly inject (or stimulate) and extract (or collect) data from the weapon systems under test.  Modular, specialized data interfacesgateway applications allow range systemlogical range integrators to build Logical logical Ranges ranges with existing range resources and, more importantly, incorporate weapon systems into a Logical logical Range range construct.  There is nothing inherent in the IKE 2 design Specific events can use to preclude the use of multiple protocolsgateways, or even federated gateways, or multiple DI’s in a single implementation of IKE 2, if needed to meet their requirements.  In this way, a protocol translator can be created in which certain protocols can be read and interpreted using one DI, then republished using a second DI.5.2.5 Repeatability.  The essence of repeatability for any given test or training exercise is whether individual tests comprising the larger event can be played back in the same order multiple times.  Examples of this include replay of range data to evaluate different algorithms in a hardware-in-the-loop system or injection of previously collected range data into a test.  To achieve this, a data distribution scheme that allows ordering of events is required.  The HLA RTI-NG 1.3 uses a number of techniques to preserve event ordering within a federation; these techniques will be adapted to provide IKE 2 the capability to produce synchronized, repeatable experiments.  It is important to recognize that only events that require repeatability should incur any additional performance cost with respect to event ordering.5.2.6 Performance.Performance.    The minimization optimization of certain performance parametersof latency is critical for certain some test events.  Minimal latency and jitter, combined with maximal throughput, are the goals of the IKE 2 program.  There are a number of things that can be done to create an IKE 2 prototype that will minimize latency caused by delivering data to, and receiving data from, the network.  Incorporating the object model at initialization compile time will yield significant gains, since the data that needs to be sent over the wire network can be packaged very efficiently using pre-compiled code rather than code that needs to interpret each attribute before sendingpackaaging.  In addition, a great deal of efficiency is gained using intelligent memory management that minimizes data copying and context switching.  The real time ORB TAO (The ACE ORB), used as the basis of the RTI-NG 1.3’s data distribution infrastructure, is designed to implement many of these efficiencies.  The TAO will be used as the underlying communication infrastructure for the IKE 2 prototype and thus gain all of the advantages of using this powerful open-source real-time ORB.5.2.7 Scalability.  A Logical Range’s scalability may be broadly defined as how the computing and communication overhead increases as more range systems are integrated in the particular Logical Range.  In other words, as each extra computer is added to support a given test mission, how much of that computer’s processing power is devoted to application processing, and how much is devoted to overhead (such as communication)?  In non-scalable systems, there is a size at which additional processing power will yield no extra processing capability, as all additional processing power is being used for overhead functions.  A goal of the IKE 2 development effort is to enable the creation of scalable configurations, whose size can grow without limit, or at least grow large enough to handle the expected size of the largest planned test event or training exercise.Scalability is a function of two things — the intrinsic scalability of the system configuration, and the infrastructure’s efficiency in transporting, delivering, and managing the minimum amount of data necessary to support the event.  The first aspect of scalability (intrinsic scalability) is not under the control of the TENA middleware developers.  If range system integrators create a configuration using a scenario in which all objects need information about all other objects, then as the number of objects increases, the overhead required to manage data delivery will increase until a maximum size is reached.  More realistic scenarios tend to have a much looser coupling between the objects used by the applications, leading to the possibility of being able to achieve scalability through the use of interest management or filtering (i.e., data delivery based on well-defined and declared application requirements).  If application data requirements are constant as the size of the configuration grows, the scenario is intrinsically scalable, and all that remains is the construction of a software mechanism to limit data delivery to the minimum required by the application.5.2.8 Security.Security.    Security is important in TENA since only certain authenticated users and applications will have the right to interact with certain objects.  The CORBA Security Service, defined in the CORBA Services specification Specification and implemented within the TAO Object Request Broker (ORB) ORB (see below) will be evaluated as the distributed object security mechanism used by TENA.  Since physical security for the computers and networks will be maintained based on DISA standards (e.g., separate networks, bulk and/or packet/cell encryption devices), the CORBA Security Service will provide additional object-based security within a trusted enclave.  Thus a layered approach, starting with physical security and network security, then adding object security on top, will ensure that the final systems and configurations meet the security needs of any given user community with respect to security.  Additional security features are being considered based on the detailed requirements analysis and design work during the initial iteration of the IKE 2 development.5.2.9 CORBA services.  The TAO ORB implements a number of the important CORBA Services that are required for TENA, including the Event, Asynchronous Messaging, Notification, Lifecycle, Logging, Naming, A/V Streaming, Notification, Security (portions), Time, and Trading Services.  Additional services required by TENA and not provided by TAO are being developed in conjunction with the TAO developers as additional TAO services.  Currently, the only service that TAO does not implement that may be required for TENA is the Transaction Service.5.3 StrawmanIKE 2 Design ArchitectureA high-level view of the IKE 2 architecture design is shown in Figure  5.12, below.  Each box represents a framework or an implementation derived from the frameworkpackage that defines a broad categorysegment of internal IKE functionality.    In each case, the framework may be specialized to provide new functionality.  Only major relationships between the different subcomponents are shown to keep the diagram as simple as possible.  During the detailed design portion of the IKE 2 development, a complete architecture and design is being produced and documented in Unified Modeling Language (UML) including all of the anticipated classes and subclasses, their relationships, interfaces, and encapsulated state, as well as detailed event-trace diagrams showing the interactions of each class with other classes based on use-case analyses.  A brief description of each major component package follows. Broadly speaking there are four categories of packages in the design.  The first category consists of those packages required for pre-exercise activities, primarily defining the TENA Object Model.  The second category consists of a few external run-time applications necessary for logical range integration.  The third are those packages included in the IKE 2 software itself.  Finally, the fourth category consists of those packages slated for inclusion in subsequent releases in the IKE 2 software.  For more detailed information on the categories, see the Fall 2001 SIW paper [2].  IKE 2 Test and Evaluation StrategyThe primary testers of IKE are members of the Architecture Management Team (AMT).  The AMT was designed to formalize the process of reviewing and technically managing TENA for the stakeholders (e.g., DoD Ranges, Facilities, and I&M projects) with a strong interest in using TENA as their technical solution.  The AMT members currently involved in the test and evaluation of IKE 2 are: Air Armament Center, Eglin Air Force Base, FLNaval Undersea Warfare Center, Newport, RINaval Air Warfare Center–Aircraft Division, Patuxent River, MDWhite Sands Missile Range, White Sands, NMRedstone Technical Test Center, Huntsville, ALElectronic Proving Ground, Fort Huachuca, AZNaval Air Warfare Center-Weapons Division, Point Mugu and China Lake, CAFigure 3 provides a high level illustration of capabilities that will be provided and tested with each release of IKE 2.  Each test location will tailor the test cases to fully evaluate the middleware in the environment that they tend to use it.  The IKE 2 Release 1 was made available to the testers in October 2001.  A description of the Release 1 testing follows.  Each category will be described in the subsections below.Pre-Exercise PackagesThe XML-based TDL representation gives users access to many COTS XML editors to use in designing and documenting the TENA objects that will be used in a given event.  The code generator reads the TDL files and generates the IDL, C++, and Java classes (both header files and implementations) that implement the Stateful Distributed Objects, Messages, and Data Streams used in the exercise, including all the supporting and ancillary classes that make IKE 2 work with the SDOs.External Run-Time ApplicationsThe second category of packages consists of those external software items that exist at run-time but are not linked with the user’s application.  The interface repository provides run-time access to the TDL object definitions to any application that wishes to participate in a TENA logical range but declines to compile the TENA object model directly into their application.  For these “introspective” applications, the interface repository provides all the information they need to subscribe to SDOs, interpret SDO state when it is delivered, and dynamically invoke methods on SDOs without knowing their structure beforehand.  The Naming Service provides a mechanism for SDOs to be given well-defined names in a logical range, allowing applications to find a particular SDO simply by knowing its assigned name or ID number.  Other possible services, such as a centralized unique identifier server, are being considered for implementation as CORBA objects within the TENA system at this time, but have not been completely specified.IKE 2 Middleware PackagesThe third category of packages are those in the center of Figure 2, the ones that make up the bulk of the IKE 2 software that is linked into every TENA application.  IKE 2 is based on a foundation provided by the Adaptive Communication Environment (ACE) [2] and The ACE ORB (TAO) [3].  5.3.1 ADAPTIVE Communication Environment (ACE).  ACE is a freely available, open-source object-oriented framework that implements many core design patterns for concurrent communications.  ACE provides a rich set of reusable C++ wrapper facades and framework components that perform common communication software tasks across a range of computer platforms.  The communication software tasks provided by ACE include event de-multiplexing and event handler dispatching, signal handling, service initialization, inter-process communication, shared memory management, message routing, dynamic (re)configuration of distributed services, concurrent execution and synchronization.  5.3.2 ACE ORB (TAO).  TAO is a freely available, open-source, and standards-compliant real-time implementation of CORBA (including many CORBA Services) that provides efficient, predictable, and scalable quality of service (QoS) end-to-end.Basic low-level publish and subscribe functionality used by all communication mechanisms is provided by the Distributed Interest-based Message Exchange (DIME) frameworkFigure 5.1 — Layered Architectural view of the IKE 2 framework with implementations.  In this view, each aspect of the IKE 2 implementation is specialized from a framework.  (The triangles indicate inheritance going up in this conceptual diagram).  The API itself is just a union of the interfaces presented by the various implementations below it.  The light gray boxes are COTS software.  The dark gray boxes represent those parts of the IKE 2 implementation that are auto-code-generated from the object model IDL representation.  The black box represents DI software created by the ranges.5.3.3 Data Interface (DI) framework.  The DI framework provides the base classes necessary to develop unique data interfaces to existing systems.  In reality, this framework is built in to the TAO ORB core, which allows for custom protocols and interceptors to be plugged into the ORB without affecting the standard CORBA programming model.  In this current prototyping phase, FI 2010 is developing a CORBA DI, a HLA DI, and a DI to a database system.  TENA middleware developers can specialize and extend the DI framework to create different protocols for specific legacy range systems and weapons systems, such as a tactical data link.5.3.4 Object framework.  This framework provides the base classes necessary to implement the TENA object services.  It provides relationship services, introspection, method operations and other object services defined in the TENA functional capabilities document.5.3.5 DIME..    DIME is the interest management framework that provides for the declaration of interests and the delivery of only that information to subscribers that they actually wish to receive.DIME is a real-time framework for implementing highly optimized data distribution among networked computing clients.  DIME was developed for the distributed simulation community, but is useful for a broad range of application-to-application integration tasks where efficient, reliable, controllable, and scalable data dissemination is required.  The DIME framework provides its performance by implementing a dynamic publish-subscribe data distribution paradigm on top of real-time CORBA event channels.  DIME provides for the declaration of a subscriber’s interest and the consequent delivery to subscribers of only that information they wish to receive.  The algorithms for deciding what information should be delivered to which applications can be quite complex.  Different situations may require different algorithms, depending on the number of applications, the amount of information that needs to be delivered, the “inter-connectedness” of the applications, and the underlying network capabilities.  The range community does not envision that any one single algorithm for data dissemination will be able to satisfy the diverse range activities—from open-air ranges spanning hundreds of square miles to hardware-in-the-loop facilities using specialized high-speed communication mechanisms.  DIME provides the ability for different data dissemination algorithms to be “plugged in” to the framework based on a user’s needs.  The use of DIME is thus one of the major reasons that IKE 2 will be flexible and extensible, while still remaining high-performance.Important additional functionality is provided in the packages that make up the IKE 2 Component APIs.  These packages allow users to instantiate SDOs, forward publication and subscription information to DIME, discover existing SDOs that match outstanding interests and instantiate them, and notify the application (if requested) of changes in the state of SDOs that have already been discovered.  A Callback Dispatcher package manages the facility for calling back the application in response to new events, based on an application-defined threading model.  The Interface Repository (IFR) cache gives the middleware access to class definition information so the middleware can instantiate objects for which compiled-in factories do not exist (for “introspective applications,” mentioned earlier).  Execution Management Services allow applications to create, join, synchronize with, leave, and destroy logical range executions.  Finally, a Service Configurator package manages the middleware’s instantiation of services so that those that are not needed for a given logical range execution may be omitted with consequent decrease in middleware overhead.The final collection of packages in the core IKE 2 software comprise the TENA SDO API.  These consist of those classes needed to support the management of the SDOs themselves.  TENA Object Frameworks (one for servant objects and another for proxy objects) define the base classes from which all TENA objects and their proxies derive.  Other classes are required for the management of a TENA object’s publication state information, which can be created, updated, and read by the application serving that object, and read by client applications.  DIME also implements the change notification capability defined in the TENA functional capabilities document.Pre-planned Product ImprovementsThe final category of packages being created for IKE 2 are those in the bottom right-hand corner of Figure 2, and represent functionality that will be designed, developed, and integrated in subsequent development spirals.The Health Monitor package provides the middleware and TENA applications insight into the status of all applications comprising the current logical range.  This type of monitoring can provide crucial information to support fault tolerance in application and logical range design.  The Message and Data Stream packages implement efficient transmission and reception capability for these important communication modes.  Introspection Services and Dynamic Invocation Services provide simplified access to the Interface Repository (which in the current design is the CORBA Interface Repository), allowing applications to fully participate in a logical range without compiling in the TENA Object Model.  Diagnostics provide the IKE 2 developers and the application developers the ability to measure IKE 2 performance, while also providing valuable information for debugging purposes.Finally, gateways are planned to provide an integration mechanism with HLA federations and SQL databases.  The “Database Gateway” represents a unique TENA-based logging and replay mechanism using standard interfaces to a wide range of commercial databases.IKE 2 Release 1 TestingRelease 1 testing consisted of installation tests and several focused Use Cases to concentrate on the functionality of the Release 1 software.  Although performance is very important to all of the interested users of IKE 2, the characterization of performance has been targeted for the future releases.  However, the IKE 2 Test Team has defined a series of benchmarks for several fixed configurations and benchmark applications.  The benchmarks will be used to determine ‘relevant’ performance measurements from the middleware.  They will also be used for regression testing for each new release of IKE 2.  In Releases 2 through 4, TENA Use Cases will not only be focused on exercising the functionality and performance, but will include evaluating the Measures of Effectiveness defined in the IKE 2 Test Plan.The objectives of the IKE 2 Release 1 tests were to: fully exercise and functionally test the middleware services and API; provide familiarization with the installation, middleware configuration, and applications development/modification; and to explore the middleware execution for test applications under different operating configurations.  The tests provided timely subjective feedback to the IKE 2 developers.   The testers are currently completing the final testing.  Results will be reported during the briefing at the Spring 2002 Simulation Interoperability Workshop. Figure 3.  IKE 2 Capabilities by ReleaseRelease 1Release 2TENA Object ServicesObject InstantiationObject Composition & RelationshipsPublication State DistributionData IntegrityChange NotificationMethod OperationsMultiple Platforms (Linux, Windows)TENA object ServicesCode Generation SupportBuilt-In DiagnosticsPerformance MetricsGateway SupportBasic HLA GatewayRelease 3Release 4TENA Object ServicesOwnership ManagementMessages and Data StreamsGateway SupportData Logging SupportJava Language SupportAccess ControlObject SecurityTENA Object ServicesIntrospectionAdditional Platforms (e.g., VxWorks)MethodologyThere were two phases to the test procedures for IKE 2 Release 1.  Both phases tested middleware services implemented in the release 1 software, namely Exercise Management, Publication, Subscription, Notification and Callback.  The initial object model provided with the Release 1 middleware implements a sensor (range asset) class, a platform class (root object class), and a weapon class (system under test object).  Either the platform or weapon could be considered the system under test in the object model.  The sensor, platform and weapon objects all inherit a general platform class that includes a Time, Space, Position Information (TSPI) class.  The three (platform, weapon and sensor) SDOs enabled the testers to exercise the TENA operation concepts and the initial middleware implementation.  There was considerable flexibility in the test procedures and test configurations.   Each test facility/tester was expected to select appropriate host computers and network configurations available at their facility.  Phase I TestsPhase I testing utilized an initial software test application “FunctionalityTest” and the object model.  Phase 1 functionally tested the release 1 software using multiple software platforms and configurations.  The goal of Phase I testing was to install the software and exercise the services.  Testers exercised the applications provided and documented the available TENA middleware and application outputs.  Phase II TestsPhase II tests essentially encompassed a Logical Range Execution (LRE) modified by each test facility to meet their needs.  The tests involved either original applications or tailoring of the provided “Aircraft” and Sensor” applications using the object model provided and sample applications.  Phase 2 testing began with a simple scenario and, in a structured manner, could be increased in complexity by adding object instances, behaviors/methods, intrusive software, instrumentation and probes for analysis/data collection.  This test phase allowed each test facility to examine the IKE 2 services in a manner meaningful to the testing facility and to gain experience with using the IKE 2 services in applications designed and developed by those facilities.  Phase II provided each test facility the opportunity to provide object behaviors in a manner related to that test range (as contrasted to the scenario and object behaviors given in the Phase I scenario/test).  Also, Phase II provided the opportunity to add instances objects defined in the object model and instances of range data displays/loggers etc. for the Logical Range objects’ data.  These additional TENA applications gained insight into using the middleware services provided to interface to legacy software applications.  ScenariosThe test scenarios intentionally left considerable flexibility for each individual organization to conduct the test.   One overarching goal was to have each test site evaluate the TENA software on the platforms and in the context that TENA will be used in their range/facility test operations.  The Phase II test scenarios were representative of either open-air range (OAR) test or training activities or Installed Systems Test Facilities (ISTF) activities (with some of the scenario objects provided in simulation – e.g., the weapon).  The Phase II test 1 scenario involved a sensor and sensor data display similar to that in a pre-mission sensor test (e.g., a radar slew test).  The Phase II test 2 scenario (Figure 3) involved a platform object as a shooter (such as a ship, ground vehicle or aircraft) in a “captive carry exercise” (i.e., no weapon being fired) that is being tracked by a sensor (a radar, for example).  Mapping the mission space scenario to the provider space Object Model included: representing the mission space SUT as a platform object (providing ground truth state values); representing the provider-space tracking sensor with a sensor object;and representing the sensor-track of the SUT as a sensor track object.  In the Phase II test 2 scenario, the captive carry weapon SUT could be represented by a weapon object with the weapon object’s state values  (in terms of ground truth state) associated with the platform object’s state values. In test 2, independently sensed (provider space sensor track) attributes of the weapon SUT were not provided.   The Phase II test 3 was a “hot mission scenario” with a platform shooter, a weapon launched on the range, and a sensor tracking the shooter and weapon and providing TSPI data (Figure 4).  This built on prior scenarios in that additional provider space objects (tracking sensors) may be associated with the mission space SUTs (platform and weapon) and that a single provider space sensor may provide sensor track objects representing more than one mission space SUT.  Also, the mission space weapon SUT could have behaviors/dynamics associated with the platform SUT at one phase of the scenario and independent behaviors during other phases of the scenario (after launch).  The Phase II test 4 scenario built on the test 3 scenario in that multiple mission space missions were executing concurrently.  Multiple LREs were operating concurrently and the provider space sensor objects may have provided sensor track objects representing platform and weapon objects in multiple concurrent LREs.  The Phase II test 5 objective was to use the test 4 scenario and LRE with the additional object instances to investigate the load supportable by the Release 1 software.5.3.6 TENA objects.  These are the actual objects defined by the TENA object model in IDL and auto-code-generated by the IDL compiler for implementation in the IKE 2 system.  Actual skeleton implementations of object methods associated with a given object will not be code-generated and are the responsibility of the range system integrators.5.3.7 Interests.  The interests are related to a given object model and specify the predicates necessary for deciding whether a given piece of information is desired or not.  These interests are defined in the IDL and are auto-code-generated by the IDL compiler.5.3.8 Authenticator.  This object implements the CORBA security function and mediates object access based on whether a given application is trusted to use a given object.  In principle, this authenticator may be the CORBA Security Service implemented by TAO, depending on a more thorough requirements analysis and design.5.3.9 Event scheduler.  This object determines the order of event execution within the IKE 2 framework, and implements various event-ordering schemes so that repeatability can be achieved in an IKE 2 application.  This subcomponent might be a specialization of the TAO CORBA Scheduling Service, depending on a more thorough requirements analysis and design.5.3.10 IKE 2 API.  The IKE 2 API is the union of the APIs defined by the frameworks and their derived objects that sit below the interface.  Thus, part of the interface is defined by the TENA object definition in IDL, while other parts of the interfaces are more static in nature.5.4 Object model developmentThe TENA Object Model, complete with a meta-model, unified schema, and guidance for facilitating technical integration, represents the most promising approach to large-scale architecture-based development within the heterogeneous range community.  The common meta-model and schema promote the interoperability essential to TENA’s success.  The single most important advance for the range community in creating systems that are interoperable and reusable is to create a Common Object Model.  Note that a full Meta-Model and Object Model need not – in fact cannot – be achieved a priori.  Nor can it remain static over the lifetime of TENA.  Its incremental emergence, and its continual evolution, is part of the anticipated TENA architecture maturation process.The essential advance in creating a Common Object Model is the definition of standard, reusable interfaces to different types of information.  These standard interfaces, and the standard data types behind them, are the principal mechanism for achieving and sustaining interoperability and reuse.  The interfaces should ideally be defined in a technology-neutral fashion, and then be mapped (or compiled) into any specific technology.  A common meta-model, defined across the entire range domain, has already been defined by the TENA community.It is impractical to ask that the entire range community agree on a single unified object model.  The degree to which any set of systems need to interoperate defines the level of specificity of their shared object model.  It is unnecessary for a comprehensive global object model to be shared throughout the range community, merely that the model being specialized for a specific sub-domain adheres to the model of its super-class.  Thus, there can be levels of interoperability — from systems that use a common database, to loosely interoperable message-based systems, to tightly integrated applications using the same technical component frameworks.  Each integration strategy has underlying technical features that form the basis for interoperability choices.  Interoperability is thus a matter of degree – the degree required for any given test event or training exercise.ConclusionFuture warfighting concepts, relying heavily on network network-centric warfare capabilities, cannot be adequately tested with today’s test infrastructure.  A new, interoperable foundation must be established.  The nation cannot afford to rebuild the entire infrastructure, so a strategy must be instituted to ensure that needed legacy capabilities are adapted, and future investments are designed, to be interoperable in support of these future warfighting scenarios.  The FI 2010 project, with its IKE 2 prototype, is a clear step toward developing this strategy by investigating, developing and coordinating the standards and procedures needed to achieve interoperability.  Range asset owners and acquisition program managers are the key to successful implementation, and the FI 2010 team is heavily involved in coordinating their activities among all potential stakeholders to ensure success..  7.0 References[1]	  Joint Vision 2020, U.S. Government Printing Office, Washington, DC, June 2000 [2] Rumford, George J., Vuong, Minh, Powell, Edward T., Bachinsky, Stephen T., “Foundation Initiative 2010: The Design of the Second TENA Middleware Prototype”, Paper # 01F-SIW-110 Presented at the Fall 01 SIW (Note: the paper can be viewed  HYPERLINK "at http://www.sisostds.org/" at http://www.sisostds.org/). [2] For information on ACE, see  HYPERLINK "http://www.cs.wustl.edu/~schmidt/ACE.html" http://www.cs.wustl.edu/~schmidt/ACE.html[33]  For information on TAO, see  HYPERLINK "http://www.cs.wustl.edu/~schmidt/TAO.html" http://www.cs.wustl.edu/~schmidt/TAO.htmlAuthor BiographiesGEORGE RUMFORD is the Technical Project Manager for FI 2010.  With degrees in Electrical Engineering and Computing Computer Engineering from the University of Missouri, he has worked on numerous multi-range and synthetic test and training events at the U.S. Army White Sands Missile Range (WSMR).  George is a member of the DoD Architecture Management Group (AMG) for the High Level Architecture (HLA), and he oversees the High Performance Computing Modernization Program’s Distributed Center at White Sands.MINH VUONGKURT LESSMANN is the FI 2010 Object Model Development Team Lead.  His background includes the development and utilization of weapon system simulations to support various Army acquisition programs.  He has overseen several High Level Architecture-based distributed testing efforts that specializes in integrating simulations and Hardware-in-the-Loop facilities to support developmental testing programs.  He is currently the Vice Chair for the SISO Simulation Interoperability Workshop Test and Evaluation Planning and Review Panel.  JASON LUCAS leads the FI 2010 project Development Advisory Team and is currently involved in the development of the 2nd TENA Middleware Prototype.  He is an Aerospace Engineer for the 96th Communications Group, Software Applications Support Flight, Modeling and Simulation Section at Eglin AFB, FL.  Mr. Lucas also supports the Flyout Model Information Center (FMIC) and is responsible for managing the development of surface-to-air missile simulations and antiaircraft artillery simulations for use in electronic countermeasures and munitions survivability testing.  is the Project Director of FI 2010 for the Program Manager – Instrumentation, Targets, and Threat Simulators (PM-ITTS) at the U.S. Army Simulation, Training, and Instrumentation Command (STRICOM).  Minh received a Bachelor of Science in Computer Engineering from George Mason University in Fairfax, Virginia in 1991.  As a Project Director at PM-ITTS, he has managed various T&E instrumentation acquisition programs.STEVE BACHINSKY is the project manager for the TENA 2nd Second Middleware development Prototype activity that is building a common software infrastructure for the FI 2010 program.  He is a Division Manager with Science Applications International Corporation (SAIC) in Alexandria VA.  Recently he has been working on distributed computing frameworks, and in particular, was the Program Manager for the Next Generation Run-Time Infrastructure (RTI) program in support of the HLA standard for modeling and simulation applications.DR. EDWARD T. POWELL is a senior scientist with Science Applications International Corporation. His interests include large-scale system architectures and designs, and the integration of simulations with C4I systems and live test and training facilities. He has served as a lead system architect for many simulation programs including JPSD, STOW, and JSIMS, and is now the systems engineering lead for the TENA IKE 2 Development  Team.GLENN E. CONRAD is the FI 2010 Test team lead.  He is a Senior Systems Engineer with Science Applications International Corporation.  Mr. Conrad has 15 years of experience in the test and evaluation and  modeling and simulation communities.  He has supported various Army, Navy, and Joint distributed exercises..Figure 1: TENA ArchitectureFigure 2 — Layered conceptual view of the IKE 2 internal software packages.   to incorporate legacy systemsSensorShooter platform ObjectFigure 1.  The Test 2 scenario involves a platform object as a shooter (such as a ship or aircraft) in a captive carry exercise (i.e., no weapon being fires) that is being tracked by a sensor (a radar, for example).SensorsWeaponShooter platformFigure 2 — Layered conceptual view of the IKE 2 internal software packages.   to incorporate legacy systemsSensorShooter platform ObjectFigure 31.  The Test 2 scenario involveds a platform object as a shooter (such as a ship or aircraft) in a captive carry exercise (i.e., no weapon being fireds) that is being tracked by a sensor (a radar, for example).SensorsWeaponShooter platformFigure 42.  Test 3 will featurefeatured a “hot mission scenario” with a platform shooter, a weapon maneuvering on the range, and sensors tracking the shooter and weapon-provided TSPI data.