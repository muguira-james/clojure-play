A New Design for a Sonar Environmental Effects ServerJoseph CollinsNaval Research LaboratoryCode 55804555 Overlook Ave., SWWashington, DC 20375Terry ForemanAnteon CorporationCentury Building, Suite 1250Arlington, VA 22202Dan SpeicherLockheed Martin Information Systems164 Middlesex TurnpikeBurlington, MA 01803Keywords:ocean, environment, littoral, acoustics, modeling, sonarABSTRACT: NRL is developing a federated sonar environmental acoustic effects server to support multiple sonar types. The ATLoS (Acoustic Transmission Loss Server) system is a successor to the PCSWAT (Personal Computer Shallow Water Acoustic Toolkit) server developed for mine-hunting sonars. In contrast to PCSWAT, ATLoS accommodates longer ranges and lower frequency sonars as well as the short range mine-hunting sonars of PCSWAT.  ATLoS computes the acoustic propagation for each source/receiver pair using a new range-dependent broadband underwater acoustic propagation model, called FeyRay, which was developed specifically for real-time applications such as servers. ATLoS is responsible for regularly updating the propagation loss for the longer range, lower frequency sonars. Again, in contrast to PCSWAT, ATLoS does not require the sonar entity to inform the server of the environmental information. Dynamic, environmental data required by FeyRay are retrieved by ATLoS from the OASES oceanographic data server. These data include oceanographic temperature and salinity profiles and surface condition descriptions. Bottom depth data and bottom type descriptions are obtained by interrogating static databases.1. BackgroundOver the last several years simulations such as the Semi-Automated Forces (SAF) have steadily improved their representation of the natural environment.  The improved representation of the ocean environment in particular has been due to a focused Synthetic Natural Environments effort[1]The Navy’s interest in better characterizing the natural environment lies in making accurate assessments of systems performance, some of which are keenly sensitive to seemingly minor details of the environment. [2]  Additionally, the Navy now routinely conducts simultaneous live and simulated operations during Fleet Battle Experiments.  This has engendered a requirement to obtain up-to-date site-specific environmental data in order to simulate live systems in real time.An area of concern is the effect of the ocean environment on sonar system performance.  Principal threats faced by Navy ships are the asymmetric threats posed by mines and a new generation of cheaper, quieter submarines.  It is important, therefore, to simulate accurately the response of sonar systems to these threats, especially in shallow or littoral waters where these threats are especially acute.  Unfortunately, accurate simulations are especially difficult in the littoral  environments.In previous efforts, we developed the PCSWAT (PC Shallow Water Acoustic Toolkit) server, which supported mine-hunting sonars [3].  Those sonars are specialized, short ranged (hundreds of meters), active, and relatively easy to simulate.  We also provided interim support for other more problematical sonar systems, many of them longer ranged systems.  Pending a more satisfactory solution, we used table look-up estimates of acoustic transmission loss from a source to a receiver, based on, pre run time, climatological estimates of the ocean state.Our preferred solution, which we have now undertaken to implement with the development of the ATLoS (Acoustic Transmission Loss Server) system, is to: exploit rapidly developing oceanographic data models to obtain real-time, site-specific estimates of the ocean state, and exploit a recently developed underwater acoustic propagation model that uses these data to model transmission accurately in real-time.In this context, ATLoS is an acoustic effect and ATLoS is an acoustics effects server, one of a class of servers that provides various effects to simulation/stimulation systems.2  Ocean Acoustic PropagationSound can propagate for hundreds of kilometers in seawater before being absorbed—much further than it can propagate through the atmosphere—enabling sonar systems to detect and track surfaced and subsurface objects  over great distances.  Unlike light traveling in a vacuum, however, sound does not travel a great distance in straight lines  through the ocean; rather, it refracts strongly, as shown in Figure 1.  Refraction, and reflections from the ocean surface and bottom, create multipaths—multiple paths along which sound travels from a source of sound to a receiver.  These multipaths interfere with each other, creating very complicated frequency-dependent interference patterns in the acoustic field (Figure 2). Multipath propagation and refraction complicate sonar operation by confusing range-finding and direction-finding sonars and by inducing signal waveform distortion.  Refraction, for example, can produce quasi-periodic focal zones called convergence zones that introduce uncertainties and ambiguities in distance-to-source estimates.  Refraction can also induce strong dispersion processes that distort signal waveforms in a manner that can make them very difficult to recognize after they interact with a physical object.   Neglecting to account for these processes often leads to grossly over-optimistic and unrealistic estimates of sonar system performance.Sound propagation in shallow, littoral waters is especially complicated because of the proximity of the bottom, which may be composed of many different sediment types and many rapidly varying sloping features. Another important and complicated characteristic of the littoral region is the  rapid variations in the speed of sound over short times and distances due to tidal action and fresh water flow from rivers.  Sound may propagate for long distances in deep water without interacting with the bottom but propagation in shallow water is typically characterized by multiple interactions with the bottom.  Rapid variations in the bottom depth, and rapid variations of the sound speed with depth and range, act together to complicate the propagation paths. EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 1 Mutually interfering multipaths propagate from a source (●) to a receiver (●) in a littoral environment (Barents Sea near Bear Island).  Note the complexity of the sound seed profiles (▬).Multipath propagation and refraction complicate sonar operation by confusing range-finding and direction-finding sonars and by inducing signal waveform distortion.  Refraction, for example, can produce quasi-periodic focal zones called convergence zones that introduce uncertainties and ambiguities in distance-to-source estimates.  Refraction can also induce strong dispersion processes that distort signal waveforms in a manner that can make them very difficult to recognize after they interact with a physical object.   Neglecting to account for these processes often leads to grossly over-optimistic and unrealistic estimates of sonar system performance.Figure  SEQ Figure \* ARABIC 2  Multiple surface and bottom reflections and strong refraction create intricate interference patterns in the acoustic field.3.  ATLoS ConceptThe ATLoS environmental acoustic effects server is designed to operate as an HLA federate in a distributed simulation system.  It responds to requests from sensor models to predict the effects of the environment on a sensor, i.e., the transmission loss, and it maintains a current state estimate of the environmental variables that affect the class of sensors that use the effects server. At a later date we may augment the server with additional effects, such as reverberation Figure 3  Dataflow to and from ATLoS.The objective of the ATLoS development effort was to implement and test a flexible environmental effects server which could provide data fast enough to operate in real-time in a High Level Architecture (HLA) simulated environment yet accurate enough to faithfully simulate the acoustic transmissions received by sonar systems among the federates.  This was accomplished in three parallel development efforts:a fast yet reasonably accurate acoustic propagation model, FeyRay, was integrated into the server;an interface to the OASES oceanographic data model system was integrated into the server;the server was connected to the RunTime Infrastructure (RTI) as an HLA federate.The fully integrated system is undergoing a series of tests in collaboration with the Navy Warfare Development Command (NWDC) during Fleet Battle Experiments.Flexibility was a crucial element of the ATLoS design, but without much greater accuracy in our acoustic propagation modeling, we would not have improved the fidelity of the sonar system predictions over the existing, table-based scheme.  We identified a suitable propagation model, FeyRay, that offered the required speed, fidelity, and integrability.  FeyRay (see Sec. 4.2) was originally developed for sonar operator trainers, which have acoustic modeling requirements similar to those of acoustic effects server systems.FeyRay requires oceanographic environmental acoustic data, such as sound speed derived from temperature, salinity and pressure, as input.  Some of these data, i.e., temperature and salinity as a function of depth, latitude , and longitude, are provided by the OASES environmental data server (see Sec. 5).  These data are site-specific and are updated in a timely manner.Interoperability with the rest of the federation is provided through the RTI (see Sec. 6).4.  ATLoS Ocean Acoustic ModelThe ATLoS ocean acoustic model has three major components:the FeyRay acoustic propagation model;rapid access three-dimensional data bases of environmental acoustic data such as seawater temperature profiles and ocean bottom depth;KingKong, which is the interface between FeyRay, the databases, and the ATLoS interface to the RTI, provided by libkkio (see section 6).KingKong responds to requests for transmission loss (the frequency-dependent sound level at a receiver hydrophone, expressed in decibels) by interrogating the data bases, running FeyRay to compute the transmission loss, and reporting the transmission loss back to the ATLoS RTI interface.  KingKong is thus the environmental acoustic data manager, the FeyRay driver, and the interface between FeyRay and the ATLoS RTI interface.4.1  Modeling RequirementsServers require an acoustic model that is (1) fast enough to support real-time synthetic signal generation, yet (2) accurate enough for realistic sonar performance prediction, and (3) easily integrated.  The conflicting requirements for speed and accuracy force a compromise.  Over the course of several decades, the underwater acoustics community has developed computer models that can solve the acoustic wave equation very accurately, even in shallow water.  These models are used successfully in applications such as sonar system design and performance prediction and for acoustic tomography.  They would seem to be natural candidates for inclusion in acoustic servers but they are, unfortunately, far too slow for real-time applications. On the other hand, very simple “effects” models, until recently the mainstay of real-time systems, are extremely fast but hopelessly unrealistic.  In particular, effects models are almost completely insensitive to the details of the acoustic environment, rendering them unable to make accurate site-specific transmission predictions.  Suitably modified ray models would have offered the requisite speed, sensitivity to the acoustic environment, and generally improved accuracy and realism.  But ray models are not altogether satisfactory, either; ray theory is based on an approximation that sometimes produces egregious errors, and production ray models tend to be fragile.Servers also require that the ocean acoustic model be easily embeddable; that is, it must have a relatively simple and narrow Application Programmer's Interface (API) that makes the software system integration process straightforward.4.2  FeyRay FeyRay is a broadband, range-dependent, point-to-point propagation model.  It was developed with the speed, fidelity, and API requirements of sonar operator trainers specifically in mind.  When development of FeyRay began in the mid-nineties, there simply were no models available of any kind that satisfied all the trainer requirements for speed, fidelity, and ease of use.  Servers such as ATLoS, of course, share these requirements with trainers.FeyRay is currently undergoing final development and testing. It has been installed as the propagation model kernel for the Realtime Training System prototype of the Low Cost Tactical Trainer Emulation Technology Development project [4], for a production trainer system, and, most recently, for the ATLoS realtime environmental acoustic effects server system.FeyRay, like almost all production underwater acoustic models, is a two-dimensional model; that is, it assumes that sound propagates in a vertical plane containing a source and receiver with no appreciable out-of-plane deflection of sound energy.  This seemingly unrealistic simplifying assumption is actually surprisingly well-justified for most practical purposes for reasons having to do with the nearly horizontal trajectories of the dominant multipaths.The speed versus fidelity trade-off lead to the decision to develop FeyRay using the Gaussian beam approximation.  FeyRay derives most of its speed—and incurs most of its accuracy limitations—from its underlying theoretical foundations in Gaussian beam theory.  Gaussian beam theory [5], a hybrid of wave theory and ray theory, retains the speed of ray theory while offering much improved accuracy and greater robustness, but it cannot match the accuracy of wave theory. The Gaussian beam approximation has the virtue of reducing the acoustic wave equation, a partial differential equation, to a much more tractable system of ordinary differential equations.  Moreover, these ordinary differential equations are frequency-independent, whereas the wave equation is frequency-dependent.  The wave equation is not only difficult to solve directly but would have to be solved perhaps hundreds of times for hundreds of frequencies in order to represent a broadband signal.  By contrast, the ordinary differential equations can be solved once-for-all.  In fact, the Gaussian beam formulation renders all but a small remnant of relatively simple calculations frequency independent.But by the same token, invoking the Gaussian beam approximation sacrifices accuracy compared to the very high fidelity solutions achievable by so-called wave models. FeyRay is implemented as a single C++ class, written entirely in ANSI-standard C++ to facilitate portability and to simplify the implementation of the API, making FeyRay more readily integrable into servers and trainers.  Class methods define the API.4.3  Ocean Environmental Acoustic DatabasesFeyRay requires as input data:a series of sound speed profiles along a great circle path leading from a source to a receiver, thus defining the variation in sound speed with depth and range;the ocean bottom depth (bathymetry) along the path;the surface wind speed along the path;the bottom type characteristics along the path.These are all two-dimensional data, arranged in a vertical plane containing the source and receiver.  KingKong must provide these data to FeyRay upon receiving a `Transmission Loss Request' (TL_req) from ATLoS. KingKong does this by extracting the required data along the great circle path from three-dimensional rapid access environmental acoustic databases using the latitude and longitude of the source and receiver provided in the TL_req to determine the great circle path.At start-up and at irregular update intervals typically of several hours, ATLoS provides KingKong with seawater temperature profiles (temperature at nonuniformly spaced depths) and salinity profiles. The nonuniform spacing allows an economical representation of the profiles that adequately samples the rapid variation near the surface without oversampling at great depths. These profile data are provided by the OASES system (Sec. 5). The temperature and salinity profiles are provided at the same latitude/longitude locations.  KingKong computes the speed of sound at each sample depth, given the temperature and salinity at each depth, and thus constructs sound speed profiles at each location where temperature and salinity profiles have been provided.  These sound speed profiles are saved in a quadtree-based database for later retrieval. It is important to keep the sound speed profile data up-to-date because even small diurnal fluctuations in the sound speed profiles can profoundly affect acoustic propagation and sonar system performance, especially in shallow water.  The temperature and salinity profiles are provided at the same latitude/longitude locations but these locations are rarely arranged on a uniform latitude/longitude grid; they are arranged instead on a orthogonal curvilinear grid chosen by the ECOM modelers. (Sec 5). Using a quadtree (or, more correctly and specifically, an MX quadtrie [6] in Donald Knuth's nomenclature) to store the sound speed profiles makes it possible to extract those profiles lying along a desired great circle path very efficiently without consuming excessive amounts of storage.Similarly, ATLoS provides KingKong with updates to the surface wind speed  and these data are also saved in a quadtree. Thus, time-sensitive data are kept up-to-date in ATLoS. At start-up, ATLoS provides KingKong with bathymetry data (bottom depth at designated latitude/longitude locations) and bottom type descriptor data, also at designated latitude/longitude locations, and KingKong saves these data in quadtrees. These data are static and do not require updates, although, if in-situ measurements obtained during the course of an exercise become available, they could be used to update the archival data.KingKong thus maintains quadtree databases of sound speed profiles, surface wind speed, bathymetry, and bottom type. The data used to populate the four databases are not specified at the same locations. Moreover, the data locations for any given database are typically not specified on a regular latitude/longitude grid, nor is it guaranteed in the case of the time-dependent data that the updates will be specified at the same locations as earlier data. The various MX quadtries, containing very different kinds of data (the various kinds of profile, the bottom type descriptors, the bathymetry, etc.), were all implemented using a single C++ template container class library by exploiting the polymorphism made possible by templates.Synthetic Natural EnvironmentOur team had previously developed a capability to bring a synthetic natural environment to HLA-based simulations [1].  We are using that same capability to test ATLoS.   FBE-J is taking place in an ocean environment off the coast of Camp Pendleton, CA, between Los Angeles and San Diego. We are using the Estuarine and Coastal Ocean Model (ECOM), a shallow water variant of the Princeton Ocean Model (POM), to model the shallow water environment and the Modular Ocean Data Assimilation System (MODAS) for the deeper water. ECOM runs on a curvilinear grid tailored for the experiment, and is driven at its boundaries by MODAS, North Pacific Ocean Nowcast / Forecast System (NPACNFS), and the Coupled Ocean / Atmospheric Mesoscale Prediction System (COAMPS). The output from the ECOM is ingested by the Ocean, Atmosphere and Space Environmental Services (OASES) federate, which sends out environmental over the RTI through the course of the simulation.ATLoS RTI and I/O InterfaceATLoS currently interacts with other federates in a simulation environment with Joint Semi-Automated Forces (JSAF) federates.  Since many of the libraries that comprise JSAF also support the necessary functionality of an HLA federate on the RTI, we used those libraries in creating ATLoS.  Those JSAF libraries include the Agile FOM Interface (AFI), libenv, as well as support for many of the basic data types and classes in JSAF.  In addition to these pre-existing JSAF libraries, some new ones were created, including libkkio, libkingkopng, libfeyray, libSIHAtlosRequest, and libsihatlosresponse.The architecture of the ATLoS server is based on JSAF libraries. Included in ATLoS are all of the JSAF libraries for reading and accessing the terrain database and the RTI and AFI libraries. The ATLoS specific libraries are libfeyray, libkingkong, and libkkio.Libkkio is the interface between the network layer and the libraries that perform the transmission loss calculations (libfeyray and libkingkong).  On the network side, libkkio deals with two RTI interactions: SIHAtlosRequest and SIHAtlosResponse.A SIHAtlosRequest interaction is sent by a client (currently a JSAF running a sonar model) and received and processed by libkkio.  A SIHAtlosRequest interaction contains the position and velocity of the source and the receiver, an array of frequencies at which transmission loss is desired, and a set of IDs to uniquely identify the request.A SIHAtlosReponse interaction is sent by libkkio and received by the client.  It contains the set of IDs used to uniquely identify the request and an array of the requested transmission losses.Libkkio is also responsible for collecting environmental data needed by libkingkong and libfeyray for calculating the transmission losses.  Libkkio can collect this data in two different ways. The primary way is by subscribing to Gridded and Curvilinear RTI objects produced by the OASES weather server. These objects contain Salinity, Sea Temperature, and Wind Speed in the area of interest. As a back-up, if the OASES server is not available, libkkio can read environmental information out of a netcdf-formatted file stored on the local disk.Finally, libkkio is responsible for providing all of the above information to libkingkong and libfeyray. When initialized, libkkio reads a grid of bathymetry data from the CTDB database (borrowed from JSAF) for the area of interest and passes this information to libkingkong. It then either feeds all available wind, sea temperature, and salinity information to libkingkong (if ready information from a netcdf file), or listens for OASES updates to the corresponding OASES objects, passing new information to libkingkong as it is received. Libkkio maintains a queue of SIHAtlosRequests received from the clients.  Over time, it passes these requests to libkingkong, waits for libkingkong to process the request, and then builds and sends a corresponding SIHAtlosResponse.The interface between libkkio and libkingkong is implemented as a series of callbacks, prototyped in the kkio_area class in libkkio and defined in an inherited class in libkingkong.  Whenever libkkio needs to send new bathymetry data, salinity data, temperature data, wind data, or a new transmission loss request, it simply calls the appropriate callback method.  When libkingkong has finished processing a request, it calls the appropriate method in the kkio_area class that causes libkkio to build and send a SIHAtlosResponse interaction. The queue of requests maintained by libkkio checks for and discards duplicate requests from clients.  If requests in the queue are delayed too long (due, perhaps, to a high volume of incoming requests or unusually slow performance by FeyRay), libkkio will request libkingkong to generate low fidelity transmission loss estimates using a back-up “effects” transmission loss model to ensure relatively speedy service to the clients.  Libkkio is capable of supporting multiple areas of interest at once, with the request queue picking the most appropriate kkio_area to send the request for processing.  Libkkio maintains a table of performance statistics to aid in debugging and data collection.The sonar models that use ATLoS were designed by Northrup Grumman Information Technology and currently provide native JSAF support for the following sonars: SQS-53/56, SQR-18/19, TB-16/23.  The server is designed to take in forecast data, either from file in netCDF format or from an OASES server, (Ocean, Atmosphere, and Space Environmental Services) over the RTI. This is accomplished with the new libkkio.7  ResultsATLoS has been tested in the laboratory and in multiple integration sessions leading up to the Fleet Battle Experiment-J (FBE-J), part of Millennium Challenge 02 (MC02).  ATLoS responds to requests from the JSAF native sonar models in the laboratory, returning transmission loss values with rare failures.We have been seeing extremely high volumes of requests prior to MC02, roughly 50 per second.  During integration events, simulation operators deploy simulated ships with their sonars activated by default. (JSAF operators would otherwise be burdened with detailed sonar operation on many ships).  This can result in 30 to 50 ships, each with multiple sonars, attempting simultaneously to determine the transmission losses among themselves. Additionally, we have noticed some ship-sonar models are generating unrealistically high rates of requests, so we are not yet certain that the rates we are seeing are realistic, though we will ultimately have to deal with this order of magnitude of requests. ATLoS is not currently equipped to respond to the high volume of transmission loss requests resulting from this many source/sensor pairs and, and it drops some of these requests.  ATLoS nevertheless maintains a current transmission loss request for each source/receiver pair that submits one, and these requests proceed through the ATLoS processing queue.  The JSAF native sonar models are tolerant of response lapses from ATLoS, using the last available transmission loss response for a given source/receiver pair when these occur.Having successfully implemented the server, our next step is to improve its performance. Transmission loss computation statistics indicate that responses take between 50 and 300 milliseconds.  We see a few ways to reduce the average response times. First, for ease of debugging and testing, KingKong currently supplies input data to FeyRay in the form of text files, so we believe that these response times are I/O dominated.  As ATLoS matures, input to FeyRay will be streamlined by passing data directly to FeyRay through an expanded API. Secondly, we believe that we can streamline some of the complex transmission loss computations. Third, many requests are for unrealistically large distances, so we believe that we can prune a significant fraction of the requests. Finally, we can utilize multiple processors to satisfy the load or requests.We will continue testing ATLOS, making necessary adjustments to improve efficiency and correct failures to provide transmission loss computations.  This work is ongoing as we approach FBE-J.We anticipate that the already high rate of requests will increase further.  We see two independent solutions, which may be combined.  First, we can make ATLOS a distributed server.  This should be a relatively straightforward task, but may not provide a complete solution.  A less straightforward but perhaps necessary solution is to endow the ship’s sonars with behaviors representative of Navy sonar operators, where sonars are not turned on by default but as they would be in real Naval operations.References [1]	Paul W. Maassel, Richard Schaffer, Sean Cullen, Gerry Stueve, Chris Scannell, Joseph Collins, Nicholas Kim “Improving the Water Column Representation”, Proceedings of the 8th Simulation Interoperability Standards Organization (SISO) Simulation Interoperability Workshop, 00F-SIW-060, Orlando Florida, September, 2000.[2]	Peter C. Chu, Carlos J. Cintron, Steven D. Haeger, David Schneider, Ruth E. Keenan, Daniel N. Fox: “Yellow Sea Acoustic Uncertainty Caused by Hydrographic Data Error” (electronic document).[3]	Joseph Collins, Bill Smith, Sean Cullen, Gerald Stueve; “A Sonar Environmental Effects Server,” Proceedings of the 9th Simulation Interoperability Standards Organization (SISO) Simulation Interoperability Workshop, 01S-SIW-130, Orlando Florida, March, 2001.[4]	James Carrig, Paul Berner: “Low Cost Tractical Trainer Emulation Technology Development,” Analysis & Technology AT-TR-00-61-44, April 2000.[5] 	Michael B. Porter, Homer P. Bucker: “Gaussian beam tracing for computing ocean acoustic fields,” J. Acoust. Soc. Am., Vol. 82(4), pp. 1349–1359, October 1987.[6]	Hanan Samet: “MX Quadtrees” The Design and Analysis of Spatial Data Structures, pp. 86–92, Addison-Wesley, New York 1990.Author ProfilesJOSEPH COLLINS is a Research Physicist with the Naval Research Laboratory in Washington, DC.TERRY FOREMAN is a physicist with Anteon Corporation in Arlington, VA, and is the author of the FeyRay propagation model and the KingKong data management front-end to FeyRay.DAN SPEICHER is a computer scientist with Lockheed-Martin Information Systems in Burlington, MA.  EMBED Word.Picture.8  