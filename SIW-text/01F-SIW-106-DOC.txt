Virtual Database Production Experience with SEDRISKenneth B. Donovan, Ph.D., Keith Stump      Lockheed Martin Information Systems 12506 Lake Underhill Road, Orlando, Florida 32825-5002Ph: 407-306-3368, Fax: 407-306-3472 HYPERLINK mailto:ken.b.donovan@lmco.com ken.b.donovan@lmco.com,  HYPERLINK mailto:keith.stump@lmco.com keith.stump@lmco.comJon Watkins      Science Applications International Corporation (SAIC) 12479 Research Parkway, Suite 600, Orlando, Florida 32826Ph: 407-207-2700, Fax: 407-277-5395 HYPERLINK "mailto:jon.e.watkins@saic.com" jon.e.watkins@saic.comKeywords:Synthetic Natural Environment, Database Generation, SEDRIS, SAF, VisualsABSTRACT: Lockheed Martin Information Systems is incorporating SEDRIS as a key technology for managing the synthetic environment within simulation systems.   This paper describes the process the team has followed on a major virtual simulation application to produce correlated synthetic environments for semi-automated forces, crewstations with visual and infra-red displays and vehicle dynamics, and After Action Review.  One of the significant outcomes was the creation of a database "content agreement", or transmittal content requirements specification (TCRS).  The TCRS explicitly defines what the database generation system must produce into SEDRIS so that the consuming subsystem can efficiently extract sufficient information to support the intended use.  We describe the current progress of our effort, including the types of information contained in the TCRS and the team experience with transmitted databases.Introduction This paper describes the application experience of producing correlated synthetic environment (SE) databases for a virtual trainer for ground training. The trainer required correlated ‘visual’ databases for the out-the-window and infra-red display, as well as ‘non-visual’ databases for semi-automated forces (SAF), crewstation vehicle dynamics, radio communication, and plan view display (PVD).  An enhanced Synthetic Environment Database Generation System (SE/DBGS), called TARGET3™, was developed to address the issues of producing correlated visual and non-visual databases for the application.  A set of database compilers were also required to produce the run-time databases for the visual, SAF, crewstation vehicle dynamics, radio communication, and PVD.  The SEDRIS Transmittal Format (STF) was selected to transmit the databases from TARGET3 to the compilers, since SEDRIS provides the ability to fully represent the SE.  The team recognized that SEDRIS provides a great deal of flexibility in what type of content and organization is represented, but it does not address whether that information is sufficient or efficient to satisfy the application requirements.  We describe a systematic process for identifying SE requirements and producing the required content into an STF.  The results of this process were documented in a Transmittal Content Requirements Specification (TCRS).  The TCRS provides a basis for documenting what information must be expressed in the SEDRIS transmittal so the STF is both sufficient and efficient.  We also describe the team experience with producing correlated synthetic environments over the last year.SE Requirements The primary SE requirement for the application is to support ground vehicle training.  The SE is built from 1:50,000 scale geo-specific source data and supports both visual and non-visual subsystems.  The ground training application places a significant emphasis on the fidelity of terrain mobility and obscuration.  Roads must have realistic slopes, requiring cut and fill to maintain trafficable pitch and roll.  Dense collections of trees are required in forested areas, while allowing for vehicle interpenetration with representative concealment and trafficability constraints.  Built-up areas such as cities must have dense placement of buildings and trees to provide representative line of sight limits and constricted mobility corridors.   The SE representation for the visuals uses a collection of 3D polygons with textures and attributes necessary for the real-time image generation processing.  Due to the high feature density and image generation system capacity limits, the visual databases require an efficient polygon density.  The SE/DBGS is required to use layered, or ‘appliqué’, roads where possible to avoid the higher polygon requirements for cut/fill roads.  The SE/DBGS is also required to generate lower levels of detail of the SE that may be used by the image generator to reduce the polygon processing load at longer ranges.The non-visual databases are based on a grid representation of the terrain surface, with an overlay of areal, lineal and point features, with attributes such as width, height, and classification (e.g. road, stream, building or tree).  This more abstract representation of the SE is much more compact than the visual representation, so the entire gaming area can be available in run-time memory.  It also supports efficient reasoning for the SAF, such as during route planning where road centerlines can be readily traced.A significant requirement is providing close correlation between the visual and non-visual representations.   A non-visual database function controls vehicle mobility, so any miscorrelation with the visual road polygons and the non-visual road line can produce negative effects for the vehicle motion.  The non-visual database is also used to control SAF entities, so any miscorrelation between the visual 3D models and the non-visual point features can compromise the ‘fair fight’.  For example, if the SAF database did not include an obstruction that was present in the visual database, the SAF entity might be able to see the manned vehicle, even though the manned vehicle would not be able to see the SAF entity.One required enhancement over prior systems is better correlation between visual and non-visual databases within built-up areas.  Prior systems provided geo-typical patterns of roads using texture for the visual system, however the roads were not represented as lineals for the non-visual systems, or on maps.  For this application, roads within built-up areas are also represented to support SAF reasoning, PVD and paper map navigation.System Database Generation Approach Figure 3-1 illustrates the scope of the TARGET3 SE/DBGS within the context of a simulation system [1].  The system requires correlated run-time databases for multiple subsystems.  Each subsystem has different requirements for the geometry and attribution necessary to represent the SE, and each subsystem has a customized compiler that produces a unique run-time format.  The selected approach is to build the database at the system level – with a common SE database that includes the superset of geometry and attribution representations for all the subsystems.  The SE is exported from the TARGET3 SE/DBGS in industry standard format.  The subsystem compilers are then responsible for optimizing the common SE for the respective run-time formats, either visual or non-visual.Database Generation System Figure 3.1-1 shows the top-level data flow through the SE/DBGS and to the run-time compilers.  A library of 3D models and images (textures) is created for all of the landmass models such as trees, houses, and bridges, as well as for the dynamic models, such as a tank or truck.  The terrain elevation and feature source are then input and combined with the 3D models to provide a common ground truth.  This common ground truth is used to produce an expanded representation that includes the geometry and attribution critical for the simulation.  The common ground truth also is used to generate paper maps.  The common ground truth is the primary editing control point for the landmass, so than any user modifications will be consistently represented in each of the simulation databases and paper maps.Different representations are maintained within the TARGET3 SE/DBGS to provide consistency between the various representations [2].  Figure 3.1-2 illustrates a road crossing over a stream.  For this example, the source data defined the road and stream as lineal features. The ground truth is initially created based on the lineal feature representation, and then refined for the simulation with processing for specified thinning and bridge generation where the road crossed the stream (reference “Lineal feature representation” in the figure). The ground truth representation is then expanded to provide an equivalent, but more detailed, geometry definitions both in 2D (reference “Expanded footprint representation”) and 3D (reference “3D geometry representation”.)  A perspective view of the 3D geometry is also shown.  If the user decided to modify the road or stream, the desired change is made to the ground truth lineal representation.  The other representations are then updated to maintain SE correlation.Another example of ground truth modification enhancement is shown in Figure 3.1-3.  The initial ground truth shown on the left is an areal representation of a built up area, with lineal roads.  The area is procedurally enhanced with “city blocks” that include trafficable roads and building locations, as shown on the right.  The enhanced ground truth is then used to generate the expanded SE for all the subsystems, as well as to provide the paper maps. Run-time CompilersOnce the SE has been created, the SE/DBGS produces the SE as a data transmittal for consumption by the visual and non-visual compilers, as shown in Figure 3.1-1.  Each of the compilers requires different elements of the SE representation, and is concerned with run-time optimizations that are unique to the respective subsystem.  The non-visual compilers create 5 non-visual databases.  The Plan View Display (PVD) database includes a 2D view of the SE intended to mimic the style and appearance of 1:50,000 maps.  The Radio or Communications includes a rough representation of the terrain skin geometry used to simulate radio degradation from landmass.  The Environment Manager database contains dynamic terrain information such as the type and location of destructible buildings.  The Routing Database contains a road network and large-scale obstacles used for generation of routes.  Finally, the mobility database includes a 3D view of the SE for geometry (collision detection) and terrain reasoning (obstacle avoidance) algorithms.To generate these databases, the SE is first tested using a variety of tools both reused (e.g. SEDRIS’ Syntax Checker) and in-house.  Next, each of the 5 non-visual databases is created.  Each of these 5 run-time databases has its own data compiler, but they reuse a common set of utilities that search for and retrieve data from the SE transmittal.  This common layer insulates the compilers from the transmittal mechanism used, thereby allowing the same compilers to operate on both SEDRIS and a legacy transmittal format.Finally, the databases are evaluated using a series of automated and manual evaluation tools and techniques, both between each and with the visual database.  Almost all of our system’s SE functionality can be replicated using small standalone tools specifically designed to provide component-level testing.  Finally, the databases are verified in a full system test environment.Data Content Specification Many projects or systems have treated data transmittal between system components as an after-thought, often poorly documented or handled as an internal interface.  This approach leads to numerous hidden dependencies between system components and makes exchange of data with outside parties unnecessarily difficult. Our project identified the data transmittal between the SE/DBGS and compilers as a critical system interface.  The data transmittal provides a testable reference point for determining how well each subsystem is consuming the SE and representing it in run-time.  The data transmittal also provides the common point for controlling correlation between subsystems. SEDRIS now provides a common language for expressing data content, attribution, and representation requirements for different SE-related areas, such as database generation, visuals, or SAF.  This “language” is supported by a software API (application programmers interface), thus providing a clear mapping from SEDRIS terminology into software to produce or consume the system transmittal.Our approach leverages this common language and API to push the SE content and representation requirements out of the dark recesses of internal exchanges and into a detailed specification of the system’s SE data requirements.  Because we have used SEDRIS as the “language” for specification, we capture requirements in a way that facilitates development of the SE/DBGS export tool and the compiler import tools. The ultimate product of this requirements specification effort is the Transmittal Content Requirement Specification, or TCRS.Benefits of a TCRSAt a programmatic level, our approach serves to clearly define and partition technical responsibility between producer and consumer.  For example, the TCRS clearly indicates that the database producer is responsible for providing an areal boundary defining the outline of a building.  Both the producer and consumer reduce their risk by understanding their data creation and consumption obligations early in database development.  The consumer gains particular benefit by limiting the range of SEDRIS constructs they must address in their data extraction application.  SEDRIS supports innumerable variations of data representation and classification.  If producers are permitted to “pick one”, consumers are at risk of receiving data in an unexpected way [3].  The TCRS bounds the consumer’s problem space significantly.Looking beyond immediate program needs, the TCRS provides for long-term benefits for our customer.  Outside parties interested in understanding the “what and how” of our systems’ SE representation now have a document expressed in terms recognizable across the industry.  This is analogous to HLA’s concept of a “FOM”, or Federation Object Model.  Any party interested in our system databases are provided a significant head start, whether they are a producer intending to produce a transmittal usable by our system, or a consumer interested in importing a transmittal created for our system.  The TCRS is particularly useful for answering the “can it be done” type of question.  For example, the TCRS makes it clear that TINned databases cannot be handled by our system.  It does not, however, indicate which system components cause this to be a restriction.Steps for Content Requirements DefinitionWe used an IPT process with the following steps for defining the contents requirements and creating the TCRS:Define SE contentDefine attribute and geometry requirementsDefine feature categoriesDefine structure requirementsTranslate requirements into transmittal terminologyNegotiate and refine as necessary.The IPT included representatives from TARGET3 software team, database modelers, and visual and non-visual compiler teams.  A sample list of topics that the IPT defined for consideration is provided in Table 4.2-1.Define SE Content:  The initial step is to define what “kinds” of things will be represented in the system’s SE.  In our case, we started with a complex legacy system, with no exchange requirements specified.  As a result, our efforts primarily focused on ferreting out the existing requirements of each of the legacy system’s SE components.  We did, however, address the addition of new system features, such as hedgerows and road networks inside cities based upon system requirements.  Define attribute and geometry requirements: Once the kinds of things are defined, attribution and geometry needs must be defined.  It is important that this step specify attribution requirements to the right level of detail for each subsystem representation.  As one example, the visual representation of a road is a collection of textured polygons that must be spatially contiguous, but are otherwise not logically connected.  However, the non-visual system requires a topologically connected network of the road centerlines to support route planning.  Figure 3.1-3 illustrated the explicit definition of the secondary road centerlines within a procedurally enhanced built-up area.  For another example, the producer must provide a fully 3D (polygonal and textured) representation for the visual representation of a building. However, for the system’s non-visual databases, buildings are represented with a single height applied to a 2D footprint area.  It is important for the non-visual compiler that the transmittal contains the 2D footprint geometry and height attribute for each building.  Without this explicit definition, different consumers could derive their own (possibly varying) heights.  In addition, outside parties are left with no way of realizing that a single height was used or how it was derived. In short, the derived building height would become a “hidden dependency” of the system resulting in miscorrelation with future applications.  Realizing this, we have chosen to use the TCRS as a way to explicitly capture these attributes, eliminating derivation of values where feasible. General ItemsCoordinate SystemDatabase Units of Measure Classification and Attribute Codes Geometry vs. Feature RepresentationEnvironmental Effects Color and Color Model Database Dynamics / Host Control Miscellaneous SEDRIS Specific Requirements Support Files Terrain SkinLevels of Detail Hierarchical Organization Structure Right Triangles, TilingTerrain Skin ArealsLevels of Detail Areal Stacking Level (2D Coplanar)Terrain Skin LinealsLineal Cut & Fill TrianglesLineal Bridges, OverpassesLineal Intersections Lineal Stacking Level (2D Coplanar) Levels of Detail Models - GeneralInstancing, Orientation, Scaling Light Faces and Points Polygon Switches Levels of Detail (Transition Ranges) Fixed Models and Complex ModelsStatic Models (Component Mods) – Fixed Selectable,  not-Fixed Selectable Models, Buildings Bridges and Overpasses Stamps, Basis Sets Conforming Cell SelectsMoving ModelsHost ID, Articulations, Call Signs, Attach Points Animations / Special Effects Reticle and SymbologyHeat Producing (IR) PolygonsTextureImage Types, Formats and Sizes, Texture Mapping Transparency Modulation Transmittance Levels of DetailThermal Model Physical Materials Host Controlled TemperatureTable 4.2-1 Example SE Topics for IPT ConsiderationWe also identified some attribution that the subsystems required, but that were not available as measured values from the source data.  Appropriate attributes needed to be derived based on geo-typical or default values.  The approach taken is for the producer to provide the geo-typical or default values explicitly in the transmittal, rather than have the consumer derive the attribute.  This ensures that the complete environment definition (including derived values) are captured at one point.We did encounter cases where our system does not require or use attributes that might be considered common sense attributes or would seem likely candidates for future enhancements.  In some cases, we knew of other simulation systems that could make use of attributes we did not. We made a good faith effort to capture such things where readily recognizable, marking them as “desired” in the TCRS.  In several cases, producers have exported attributes readily available to them but not required for our system.  Our goal is to facilitate outside use of transmittals.Define feature categories:  This step defines the significant classes or “bins” of SE objects.  For example, our non-visual systems use the expression “building” to generically represent any 3D structure solid enough to impede vehicle motion or rounds in flight.    In practice, this may include anything from a schoolhouse to a tower, or even a boulder.  These disparate objects are grouped for non-visual purposes because they have the same functional and attribute requirements.  Another example of this is the generic “tree” feature bin, which may include bushes or haystacks, as well as trees.  All of these objects have foliage that obscure line of sight without stopping vehicle motion.  While defining attribute and geometry requirements, the bins may need to be modified to combine or split sections as their requirements are found to be more or less similar.  In the TCRS, our “bins” map to different sections in the document.  Thus, the TCRS’ table of contents is a top-level description of the system’s SE content categories.  Define structure requirements: In some cases, the structure of the data is important for optimized compiler performance.  In our case, the compiler is much more efficient if all 3D models, such as trees and buildings, are represented as instances of a common library of models.  The structure of instances and models is important to us because our various databases gain significant space efficiencies from use of relatively few models (with all of the attributes attached) and comparatively many instances (with no data other than location and a reference).  Similarly, the run-time achieves significant efficiencies in handling large numbers of trees if the trees are instanced in groups, or “basis sets”, instead of instancing individual trees.  As an example, if a basis set contains a pattern of 10 trees, a single instance to that group is more efficient than ten instances to individual tree models.  By explicitly requiring the instance, basis set, and model structure to be present in the transmittal, we avoid forcing the consumer to “derive” efficiencies by comparing attributes of instances.  We also document our extensive use of models for outside parties. In another case, we identified a benefit in spatially organizing the data extraction efficiency and ease of debugging.  However, this representation is by no means required in order to capture our data requirements, or even to reflect a key system-wide clipping boundary (since each database has its own).  In this case, we chose not to require a spatial organization in the TCRS, documenting this instead through derived requirements.  In this manner, outside parties are not subjected to what amounts to compiler implementation decisions.   An alternative approach would have been to identify the spatial organization as a preferred, but not mandatory, requirement.Translate requirements into transmittal terminology: This step involves mapping requirements into the specific transmittal format.  The team selected SEDRIS data representation model (DRM) and Environment Data Coding Standard (EDCS).  If, for example, requirements call for destructible buildings, the DRM provides a “state related” hierarchy which may be specified.  The EDCS contains “attribute codes” (EACs) and “classification” (ECCs) which may be specified as well.  The effort identified some items that were not supported by the EDCS, and these were later incorporated into the EDCS.There is a fine line here between over-specifying the transmittal (e.g. forcing a specific hierarchy or EDCS value where multiple ones will do) versus leaving too much up to the whims of the producer.  We chose to call out specific EACs for every attribute requirement (leaving no question as to how each attribute is presented and searched for).  However, we left the choice of ECC for certain lineals, areals, and models wide open, only enumerating specific values where a particular system translation had to be captured (such as tunnels, bridges, or hedges).Negotiate and refine as necessary:  If one is defining a “unilateral” TCRS (e.g. a producer specifying what he can export or a consumer specifying what he needs for import), then this step may not be necessary.  These unilateral specifications are essentially mapping documents, capturing what kind of things a producer exports or a consumer searches for.In our case, we were seeking to minimize risk to both producer and consumer, balancing both technical and cost consideration.  As a result, we conducted extensive coordination meetings between producer and consumer to arrive at an initial draft, and have continued to refine the TCRS for clarifications or to capture new requirements.An example of a tradeoff made to accommodate producer and consumer was specifying the allowable terrain skin representation.  For the producer, it was preferred to represent the terrain skin using terrain triangle geometry, since that representation was required to be produced for the visual representation anyway.   For the consumer, it was preferred to represent the terrain surface with a regularly spaced terrain grid.  This representation reflects the run-time grid representation, and serves to clearly define the “post spacing” used within the system.  The final specification compromised by allowing the terrain triangle representation, provided that the producer also explicitly define the grid post spacing.  The TCRS allows either representation approach (provide terrain polygons or provide a terrain grid.)Production ExperienceAn incremental production approach was used to validate both the data production and data consumption software that was under development, as well as refine the TCRS.  The initial test set was a small area (7 km x 7 km) with basic terrain and feature content, but no cut/fill roads or streams, and limited models.   A larger sample area (55 km x 35 km) was produced when these functionalities had been completed.  The full database area (110 km x 110 km) is currently underway.The SE/DBGS provides the flexibility to output the visual database in either OpenFlight™ or SEDRIS.  After the initial sample data sets, it was more efficient for the SE/DBGS to output the visual database directly in OpenFlight.  The overall system design remains unchanged, since the OpenFlight and SEDRIS are produced from the same SE/DBGS data files.  For the STF that is now directed to the non-visual compilers, some of the visual data (such as visual levels of detail and texture) is disabled during SEDRIS export to reduce the transmittal size.  This was preferred due to performance issues associated with large SEDRIS transmittals.  The SE/DBGS can produce both the visual and non-visual database into the SEDRIS as needed in the future.The overall project experience to date has been very positive regarding the benefits of the upfront work to explicitly define the synthetic environment requirements and capture the database transmittal requirements in the TCRS.  The general approach of requiring the producer to explicitly provide information (such as building footprints) and structures (such as instanced models) has significantly improved the subsystem compiler process.   The system level consideration of how each subsystem will interpret the SE representation has reduced the ‘miscommunications’ between producer and consumer, and provided proactive treatment of potential miscorrelation areas.  Both the functional capabilities and subsystem correlation results for the SE have progressed smoothly.The choice of SEDRIS as the transmittal format has also proven useful in leveraging the support tools available for viewing and validating the SEDRIS content.   The validation approach that the transmittal is compliant with the TCRS for the non-visual database is currently done by engineering analysis of the STF and compiler results (examining the transmittal to ensure that required attribution and structures are used, or verifying the compiler outputs.)  The team has identified a desirable future capability to capture the TCRS in a form that would allow automated validation of the STF against the TCRS requirements.Conclusions We have discussed our experience in addressing the synthetic environment requirements in a systematic process.  The team analyzed the SE requirements of each subsystem to support the program requirements, and the capability of the producer DBGS to supply the data from the source.  This analysis supported the development of the SE/DBGS and compiler functionality needed to meet program requirements.  The analysis also resulted in the specification of the requirements for the database transmittal that the SE/DBGS must produce, in order to express specific database content, and that the subsystem compilers must be able to consume.  These requirements were captured in a transmittal content requirement specification (TCRS).  Both the requirements analysis process and TCRS documentation have been valuable in supporting an incremental build-up the SE for the program, without significant surprises arising during integration.Our experience is that the system-level treatment of the synthetic environment is a critical part of the system design process.  We recommend that future programs address the SE issues up-front, in order to minimize SE issues during system integration.The TCRS is a key product of the SE system design process.  A detailed and explicit TCRS significantly enhances the efficiency and sufficiency of a synthetic environment interchange.  One part of our TCRS defines the data format to be the SEDRIS Transmittal Format (STF).  A critical component of the TCRS is the use of the SEDRIS Data Model and EDCS to specify exchange requirements, including allowable feature classification types and required attribution.  In some cases, the TCRS defines specific structure constructs that must be provided within the STF for efficient subsystem compilation.  While the TCRS we developed does offer the producer flexibility in many areas, it also provides enough restriction for the compiler designer to bound the problem.    References[1] K. Donovan: ``SEDRIS Utilization by the UKCATT Program. SEDRIS Technology Conference September 1999. [2] K. Donovan, M. Field, G. Gutowski: ``An Open Architecture for Synthetic Environment Database Creation''. Simulation Interoperability Workshop, September 1999.[3] J. Campos, J. Watkins: ``Consuming SEDRIS Transmittals – A Pragmatic Approach.''. Simulation Interoperability Workshop, September 2001.Author’s BiographiesKENNETH B. DONOVAN is a technology manager of synthetic environment products at Lockheed Martin.  He has 20 years experience in the simulation industry, and has numerous publications and patents in the field. Ken led the company’s development of the TARGET DBGS systems and participated in standards development for SIF and SEDRIS. KEITH STUMP is a lead engineer in synthetic environment databases at Lockheed Martin.  Keith is currently lead the development of the databases for the UKCATT program, and previously led the development of over 6 million square miles of databases for flight simulators. JON WATKINS is a senior software engineer with SAIC.  He has contributed to a variety of simulation systems over the last ten years, and is presently working on CCTT/UKCATT database development. Notice:  All trademarks are property of their respective owners.Figure 3.1-3  Correlated road representation for built-up areasFigure 3.1-2 Multiple SE Representations Maintained for CorrelationFigure 3.1-1 SE/DBGS Data FlowFigure 3-1   SE/DBGS Produces Common SE for All Subsystems