Trials and Tribulations with HLAMichael  Del RoseScott LohrerSharon GrinawayU. S. Army Tank-Automotive and Armaments Research, Development, and Engineering Center (TARDEC), Warren MI 48397-5000 HYPERLINK mailto:delrosem@cc.tacom.army.mil delrosem@cc.tacom.army.mil HYPERLINK mailto:lohrers@cc.tacom.army.mil lohrers@cc.tacom.army.mil HYPERLINK mailto:grinawas@cc.tacom.army.mil grinawas@cc.tacom.army.milKeywords:HLA, RTI, DIS, PIU, NIU, ABSTRACT: The U.S. Army’s Tank-Automotive and Armaments Research Development and Engineering Center (TARDEC) VETRONICS  Simulation Facility (VSF) is in the process of changing its simulation architecture to conform with the DoD mandated High level Architecture (HLA).  The current architecture was based upon two in-house developed components, the Process Interface Units (PIUs) for internal communications and the Network Interface Unit (NIU) for external communication.  The PIU utilizes message queues and arenas for sending and receiving data internally.  The NIU is used to translate internal PIU message types into DIS Protocol Data Units (PDUs) to communicate via a long haul network.  In the Future, the structure of the current architecture will still be a vital part of the new architecture, but with a few added features to accommodate HLA.  When sending data outside our simulator, the NIU will transform the PIU message types into PDUs like HLA classes.  These HLA data types will then be sent to an internal Run-Time Infrastructure (RTI) component.  When the simulator is receiving data, the reverse process will be taken.  The HLA data types will be unpacked and transformed into PIU data types, then distributed via the PIU to other VSF processes.  This will provide a seamless transition between the old architecture and the new architecture. The objective of this paper is to describe how the structure of the current VSF simulation architecture is being modified to accommodate HLA.  It will also discuss future projects.  1.0 IntroductionThe Distributed Architecture Group (DAG) of the VETRONICS Simulation Facility (VSF) at TARDEC is currently changing its simulation architecture to comply with the DoD mandated High Level Architecture (HLA).  The current architecture uses message queues and arenas to share data between internal processes.  External data sharing is done through a Network Interface Unit (NIU).  The new architecture changes only the composition of the external data sharing (the NIU), not the internal data sharing.2.0 Process Interface Unit (PIU)During the past several years, the VSF has migrated from a single computer/single crewstation scheme for simulating a vehicle to a multiple computer/multiple crewstation scheme.  This required the VSF to provide both parallel computing on a single crewstation and distributed computing over multiple crewstations that will be able to communicate with one another and act as one integrated simulated vehicle.  In order to fulfill this requirement, an Inter Process Communication (IPC) scheme using a Process Interface Unit (PIU) was developed.  For the processes involved in a vehicle simulation, the PIU provides an object-oriented solution for each process to communicate with one another.  Each process is an executable that makes up a vehicle simulation (mobility, fire control, vulnerability, etc.).  The communication between processes is performed using a producer/consumer model.  A process can be both a producer and consumer.The PIU architecture was designed to make the communication of data from the producer to the consumer transparent.  The producer does not need to know whether the consumer is on the same computer or how the data is getting to the consumer.  The producer and consumer interface via a set of logical PIU communication functions which take care of all the details.The PIU consists of a piuComm module and a piu process.  As illustrated in Figure 1, the piuComm  module uses arenas and message queues to provide a mechanism for communication of shared data between processes on the same computer.  The piu process uses sockets connected by FDDI and/or Ethernet to route data between computers (See Figure 1).  Processes on the same computer can use the piuComm module to share data even if the piu process is not running on that computer.  As shown in Figure 1, when the piu process is run, it uses its piuComm module to communicate with processes on the same computer just like any other process.EMBED MSDraw   \* mergeformatFigure 13.0 Network Interface Unit (NIU)The need arose for a network interface in June of 1992, when the VSF embarked on its first DIS compatible man-in-the-loop human factors crewstation simulator.  A market survey was conducted to evaluate off-the-shelf DIS network interfaces.  The survey concluded that there were no products flexible enough for the current simulator architecture goals, nor were there any at a satisfactory maturity level.  This led to the proprietary development of the Network Interface Unit (NIU).The NIU consists primarily of software, which  utilizes the ethernet, and memory of the UNIX workstation it runs on to fulfill its hardware needs.  It is an independent executing software process responsible for delivering distributed simulation data from entities on the virtual battlefield to additional simulator software modules, in conjunction with collecting data from the simulator modules  to produce data for the virtual entities.4.0 PIU and NIU Processes with DISUtilizing DIS with the VSF processes is simply attaching a piuComm object to the NIU and treating it like any other VSF process as shown in Figure 2.To send data from the DIS network  to the VSF simulator,  the NIU reads the data items from DIS.  It then formats the data items to the proper VSF format and routes them to the appropriate message queues (or arenas) using its piuComm object.  In addition, the NIU’s piuComm object routes the message(s) to the piu process message queue (or arena).  The piu process on the sending computer reads its message queue (or arena) using its piuComm object, and multicasts the message(s) to all other computers on the network.  The piu process on the receiving computer determines whether any process on that computer should receive that message(s) and writes to the appropriate message queues (or arenas) using its piuComm object.  See Figure 1.To send data from the VSF simulator to the DIS network, the VSF process sends information through its piuComm object to the NIU message queue (or arena).  The NIU reads the message queue through its piuComm object and translates the VSF data types to PDUs to send out to the DIS network.5.0 Changing the Architecture with HLAIt was important not to make to many code changes to the VSF processes.  So, no changes were made from the piuComm back to the VSF processes.  All the changes were made in the NIU.In the DIS environment, the main responsibilities of the NIU are communication (between DIS and VSF processes) and mapping of data items to the proper readable format.  With HLA, the NIU process didn’t change, but many of the responsibilities fell on other files that make up the NIU process.  One functionality we added to the NIU was a VSF ambassador.  It  communicates from the HLA network to the VSF processes through a piuComm object embedded in the VSF ambassador.  The NIU continues the communication from VSF to the HLA network.  The reason for the split up was due to the communications from the HLA network to the VSF processes were called by an HLA ambassador.  That ambassador used a member function to send data items to the VSF.  The VSF ambassador held the member function.  This kept all other functions private except for the sending of HLA data to the VSF.5.1 NIU process file structureThe NIU process was split into six files for easy maintainability.  The files are as follows:NIU File – responsible for monitoring the VSF message queues and arenas for outgoing messages to the RTI and sending control to the HLA ambassador (called HLA_Amb) to monitor the HLA network for incoming messages to go to the VSF.Xform file – responsible for all the transformation of VSF data types to HLA data types.Process_VSF_Msgs file – responsible for processing an outgoing message to the RTI.  It will retrieve the message from the message queue (arena), call the Xform function to change the data type, and send it to the RTI using an HLA ambassador function.VSF_Amb file – responsible for defining the VSF ambassador class which holds the member functions to retrieve HLA messages from the RTI, transform them into VSF usable data types, and send them to the proper message queues (arenas).HLA_Amb file – provides services for the VSF to communicate with the RTI.  Services include transferring data from a VSF process to the RTI to send to the HLA network and checking for HLA messages to go to VSF.VSFfedAmb file – responsible for all the event handling.  It is the intermediary between the communication with the RTI and the VSF_Amb.These files were broken up in the above order so that an object-orientated approach to HLA could easily be implemented.  Each file has one primary function.  If that function changed, then changing the code to accommodate it was simplified.  Figures 4 and 5 illustrate the data flow of each file.										         Figure 4					         Figure 56.0 Where we are with HLAWe decided to take the spiral design approach to code and debug the introduction of HLA into the VSF simulator.  With the spiral approach, we split the project into four steps.  Once we completed the coding and testing of a step we could then continue on to the next step until the project was completedThe first step was called Minimal 1.  At the completion of this step we would have a complete architecture of the HLA process and a working HLA ambassador which communicates with the RTI.  The next step, called Minimal 2, would allow us to pass an object from VSF (without a piuComm object) to the RTI and back.  The third step, called Minimal 3, includes Minimal 2 with an HLA object class, HLA interaction class, and a piuComm object embedded in the NIU processes.  A WeaponFire and MilitaryPlatformEntity class would be passed back and forth between a stub VSF process and the RTI.The final step was to add all the functionality of the VSF simulator into the HLA design.  This included all usable HLA classes, HLA interactions and VSF processes.  With the completion of this step we will have a full working VSF simulator.At the time this paper was written, we have completed testing and debugging Minimal 3 for the  WeaponFire and MilitaryPlatformEntity class.  This includes the mapping of HLA data to VSF data, the mapping of VSF data to HLA data, and embedding a piuComm object in the NIU to communicate between HLA and VSF. 7.0 Where we are Going with HLAThe VSF’s current overall architecture is represented in the following Figure 6.Figure 6In this configuration, data comes off the network as an HLA data type.  The NIU/RTI process reads the data from the network and transforms it into a VSF data type, which is then distributed to the other VSF processes via the piuComm.  It is this process, the NIU/RTI, that all-future VSF architectural changes will evolve.Currently the VSF architecture is designed so that the data types are isolated.  The internal VSF data types are separated from the HLA data types.  The current separation is somewhat “hard-coded” to the RPR FOM.  Consequently, the VSF can only participate in a federation that supports the RPR FOM.  The next step is to focus on the area of the design that is binding the VSF to a singular FOM and try to develop a more evolvable approach so that the VSF may eventually support other FOM’s.A data mapping occurs within the current HLA architecture, that translates from an HLA data type to that of a VSF data type and visa-versa.    This data mapping appears to be the area from which the next architectural change will occur.  The goal will be to develop a generic type of mapping so that the VSF data types will always correspond to some unknown data type.  Perhaps some type of parallel array scheme may work to achieve this type of reconfigurability.  The design for this phase of the NIU/RTI development has not been worked out at this point and it is the intent of this paper to hopefully provide some feedback from the user community as to some ideas on how this reconfigurability could be achieved.7.1 A further look beyondIt is within the interest of the VSF team to examine the likelihood of using the RTI as a method of providing IPC.  This would eliminate the need for a piuComm object and a PIU process.  The overall architecture would become much more object oriented than what it is in its current state.  This would involve a total paradigm shift on the developers part, for they would no longer be developing independent processes but objects.  Of course the minimal approach described earlier would be taken to develop the overall architecture. One of the requirements of such an architecture, would be that the module developer wouldn’t need to have knowledge of the RTI API.  If this was not the case, then every developer would have to go through some RTI hands-on training.  We like to avoid this scenario; therefore, encapsulating the RTI API is one of the prime requirements.  An ideal situation would allow us to reuse the current VSF API, the piuComm API and hide all the RTI knowledge behind the API.  This idea is sketched out in figure 7.Figure 78.0 ReferenceS. Grinaway, A. Lebioda: “The Integration of Man-in-the-Loop Distributed Simulation with Motion”, Spring 1998 SIW conference.Author BiographyMICHAEL DEL ROSE is an Electrical Engineer for TARDEC’s VETRONICS Simulation Facility (VSF).  He is the lead programmer for the VSF side of HLA.  Mike holds a Bachelors degree in Mathematics from the University of Michigan – Dearborn. He is currently pursuing a Masters degree in Electrical Engineering at the University of Michigan – Ann Arbor.SCOTT LOHRER is a Computer Engineer at the TARDEC’s VETRONICS Simulation Facility (VSF).  He is the lead for the Distributed Architecture Group (DAG) of the VSF.  The DAG is responsible for transitioning the VSF from the NIU/PIU architecture to HLA.  Scott has a Bachelors degree in Electrical Engineering from the Lawrence Technological University.SHARON GRINAWAY is a Computer Engineer at TARDEC’s VETRONICS Simulation Facility (VSF).  She currently develops software for the VSF reconfigurable crewstations.  She holds a Bachelors degree in Computer Science and Engineering from the Milwaukee School of Engineering, and a Masters Degree in Software Engineering from Monmouth College in New Jersey.piu-Comm   NIUVSFDISMessageQueueArenaFigure 2Other VSF ProcessesRTIHLA DataNIU/RTIVSF DataNetworkHLA FederateHLA FederateSim CodeSim CodeVSF APIVSF APIRTI InterfaceModuleRTI InterfaceModuleRTI APIRTI APIRTI moduleRTI moduleRTI