Implementing VR-Forces, a flexible CGF toolkitBen LubetskyLen GranowetterMÄK Technologies, Inc.185 Alewife Brook Pkwy.Cambridge, MA 02138617-876-8085, ext.138lubetsky@mak.comKeywords:HLA, DIS, CGF, Composibility, Aggregate simulation, API ABSTRACT:	Software is often developed with a particular customer and set of requirements in mind. However MÄK Technologies has been working over the past two years to build a Computer Generated Forces environment to satisfy a diverse set of both customers and requirements. Novel techniques were developed and employed to meet these requirements. The goal of this paper is to describe both the user requirements and some of these techniques and the infrastructure that was required to allow so many diverse goals to be met.Since it is impossible to build a single product that would meet the needs for the entire M&S community the first requirement for the software was that it be extendible. To complicate development, potential users technical proficiency varies widely. As a result three interfaces were developed.  The first was a C++ API which provides maximum flexibility but requires a programmer to use. The second was a GUI for both the run-time environment and mission creation. Finally a set of configuration files provides further flexibility.Specific simulation goals also had to be met. Modeling of the radio communications between units and entities was developed and was generalized to allow new commands and reports to be transmitted. Another key requirement was the development of a framework to allow simulations to be conducted both at the entity and the aggregate levels. For example, it is possible to have two ways to model the movement of a unit across terrain. One method is to model each individual entity, and the second is to use an appropriate aggregate model. Using this software, a user can integrate both methods into one tool.Introduction VR-Forces, MAK's Computer Generated Forces (CGF) toolkit, has been integrated with many diverse projects. Each of these projects has a different customer with a different type of end-user ranging from platoon leaders to staff officers to operational analysts. Despite the diversity of applications, we are achieving significant code reuse through the modularity of the VR-Forces architecture.By outlining the diverse requirements of the many users of VR-Forces, we hope to provide a context whereby the VR-Forces architecture can be made clear.VR-ForcesMÄK VR-Forces is a COTS CGF tool that is being used for a range of programs from operational analysis to embedded training. To be successful, flexibility was our top priority. This flexibility is represented in both the implementation of simulation models and in the range of interfaces provided.Some of the requirements from early adopters included aggregate units that resolve to individual entities and easily parameterizable entities for dynamics, damage modeling, weapons, and engagement rules. Since this tool will be used by a diverse group with varying degrees of experience, it must be well documented, easy to use, and maintainable for the long term. The very first release of the product included over 275 pages of user documentation including descriptions of the configuration files. The documentation for the Application Programmer's Interface is even more extensive and includes programming examples.The toolkit is object-oriented and modular, allowing a programmer to easily insert VR-Forces' functionality into their own application, or build their application around the CGF. Some projects like Spearhead II or MEU 2000 that are described below, will have their own user interfaces and will only access the underlying CGF functionality. Other customers will want to add additional capabilities, which can easily be done by sub-classing or replacing existing objects.UsersBattle Command 2010Working under contract to the Battle Command Battle Lab at Ft. Leavenworth, MÄK is developing a brigade-level tactical environment for use by staff-level officers. The user will take the role as Maneuver commander and will be able to interact with their own staff and other commands. Part of the training environment is a constructive simulation modeled by VR-Forces. The environment is distributed across LANs at the battlelab but is also unique because of its ability to allow users to interact from their homes using standard PCs and the Internet.Spearhead IISpearhead II, being developed under contract to STRICOM, is a PC-based simulation that will allow company and platoon commanders at the Ft. Knox Armor School to practice their decision-making skills. The original concept and some of the software is based upon the PC game Spearhead, which MÄK Technologies released in the fall of 1998. The simulation includes high-quality, real-time 3D graphics, an IVIS display, scenario generation software, Computer Generated Forces, scoring and feedback, and built-in networking. The original CGF used in Spearhead did an excellent job providing friendly and enemy forces for a game where fidelity often took a backseat to playability, but needed significant enhancement to maximize the training value necessary for Spearhead II.Spearhead II places two key requirements upon the CGF: modeling of platoon behaviors and modeling of resources such as ammunition and fuel. Trainees' success will be in part determined by the logistical decisions they make.Two other important requirements impact the CGF development. First, the system must be extremely low-cost and deployable. In other words, an entire simulation, including the 3D graphics, user interface and CGF, must be run on a single off-the-shelf PC. Second, the user interface must be simple and easy to learn. A system is not easily deployable if you must ship specially trained instructors and operators with it.MEU 2000MEU 2000 is being delivered to the Marine Corps to provide practice in tactical decision making for members of the elite Marine Expeditionary Units. However, the Marine Corps is not looking for another "Marine Doom" that trains soldiers in how to clear a room or allows them to practice anti-sniper techniques. Instead, they want officers to start thinking about their overall assignment and how to best use their assets to accomplish tactical goals. Such a simulation requires a custom user interface that is 2D not 3D. And, similar to Spearhead II, there must be a scoring system built in.However, there are many different requirements for training MEU decision-makers than training tank platoon commanders. Tactically relevant assets need to be modeled individually but other assets do not. For example, a MEU has a limited number of helicopters and each one plays a critical role in deploying troops, re-supplying ammunition and other supplies, and intelligence gathering, not to mention assuming various offensive roles. As such, it is critical for a commander to know where those helicopters are at all times, and even be able to task those helicopters. However, a commander does not need to know -- and should probably not concern themselves with -- the location and status of every individual soldier and many of the vehicles. Therefore, the CGF that is built into MEU must model all assets to the level that the user can interact with but not necessarily to the entity level. In fact, to keep the processing requirements within an individual PC's capabilities, the MEU CGF and simulation engine is limited to simulating certain units as aggregates only. These aggregate units must be able to interact with individual entities as well as other aggregates. MEUs also have a wide range of assets from ships, to fixed and rotary wing aircraft, armor, and wheeled vehicles. All of them must be simulated to create a meaningful training scenario.ACUMENACUMEN is a system being delivered to Ft. Bliss as part of training material for artillery officers. The customers of this system have specifically forbid any entity level interactions with the users. The officers being trained will only deal with aggregate units. These aggregates will use statistical models for maneuvering and resolving the outcomes of combat with other aggregate units. The interface is also being carefully specified by the customer to match the forms and methods that the trainees will use when actually in the field. Another important requirement of the CGF component of this simulation is the ability to run faster than real-time. Even though all units will be simulated only as aggregates, the customer has specified that such tactically significant objects such as minefields and tank ditches be realistically modeled.Technical ArchitectureBeing a toolkit, VR-Forces can be easily described through its member software modules. While some of the more important aspects of VR-Forces' architecture are described below, others are not. Those areas not covered in this paper include the handling of simulation time, the internal thread-safe message passing scheme and others.Composable architectureMÄK VR-Forces uses a component architecture similar to that used in many robotics applications. There are three basic types of components supported: sensors, controllers, and actuators. Components communicate with each other through data ports, which may provide data as simple as a single number, such as a throttle value, or more complicated data, such as a list of entities that have been detected. The component architecture supports any number of sensors, controllers, and actuators in a simulated entity, see Figure 1.SensorsSensor components provide models of the simulated environment which are then used by controller components to make decisions and perform tasks. The simplest sensor might provide (simulated) ground truth, while more sophisticated ones could use complex models for IR sensing, RADAR, or a cognitive model to simulate a soldier or crew member's perception of the simulated world. Sensor components may get information from the virtual network (through a VR-Link exercise connection and Reflected Entity List), from a terrain database, by monitoring the state of the entity model itself, and many other potential sources. ControllersController components use the information provided by sensor components to perform specific tasks. The task or tasks to be performed are communicated via a radio-like message system. Given a task to move to a waypoint, for example, an automotive controller might take terrain input from one sensor, a list of close obstacles to avoid from another, and feedback about the entity's current state (speed, heading, etc.) from still others. Using this information, the controller could calculate, for each frame, steering, throttle, gear, and brake settings to get the entity to the waypoint without colliding with any other obstacles. ActuatorsActuator components provide the physical model of the entity being simulated. Actuators are the components that make changes to the simulated environment. They use control inputs provided by controller components as parameters to its model each simulation frame. Actuators may send messages on the radio system, generate events on the virtual network, such as detonations, and modify the state of the entity simulated: position, velocity, damage, and so on.Actuators may also use data directly from a sensor, when modelled or filtered data is preferred over simulated ground truth for a given model. For example, you might want to model the behavior of a soldier who has incomplete knowledge of what is happening around him. Figure 1.  Illustrates how a HMMWVE is created using VR-Forces' composable entity architectureMission PlanningEvery entity has a plan (which can be empty.) A plan consists of task statements, conditional statements (If/Else), and triggers. Triggers are a combination of conditional expressions that are evaluated periodically and task and set statements that are executed if the condition evaluates as true.The ability to create plans allows you to easily and repeatedly test a scenario, changing particular parts of it to see the effect of each change. Mission plans are constructed through the graphical user interface, not by typing in commands. They are expressed and saved in text format.For each entity that has a plan, the Plan Manager sends Radio Messages telling the entity what to do next, as defined in its plan. For example, suppose the plan for the 1st Armor Platoon looks like: Move-to Waypoint:"A"Wait 300 secondsMove-to Waypoint:"B"As soon as the platoon reports that it is waiting for orders, the plan engine sends a Radio Message to 1st Armor Platoon's command net telling it to move to Waypoint A. When the platoon arrives at Waypoint A, it asks for its next order. The plan engine then sends the order to wait 5 minutes (300 seconds). After 5 minutes, the platoon tells the plan engine that it is again waiting for orders. The plan engine then sends the order to move to Waypoint B.The Plan Manager also manages triggers. The Plan Manager evaluates triggers at regular intervals. If a trigger for an entity becomes true, the Plan Manager sends the task and set statements in the trigger block to the entity. When the trigger block is finished executing, the Plan Manager sends the entity the next task in the plan after the task that was interrupted by the trigger.Aggregate SimulationBecause many users, including our own MEU 2000, Spearhead II and ACUMEN customers, want to interact at a higher level than individual entities and soldiers, VR-Forces addresses the concept of aggregate units. We have broken aggregate units into two basic types. The first, known as Pseudo-aggregates, are aggregates that are also represented as sub-units, either other aggregates or individual entities. The second type, True-aggregates, cannot be broken into individual components. An example of this designation would be a Pseudo-aggregate Armor Company made up of one True-aggregate platoon and three Pseudo-aggregate platoons. Each of the Pseudo-aggregates is made up of individual vehicles.A Pseudo-aggregate can have a behavior model associated with it but is not required to. Because users will want to interact with higher-level aggregate units than we are able to initially provide behavior models for, we have provided for non-intelligent Pseudo-aggregates. For example, although the initial release did not have a behavior model for a mixed platoon of M-60 and M1 tanks, a Pseudo-aggregate can be created by the user through the GUI to simulate the platoon. The mixed platoon could thereafter be visualized within 2D and potentially 3D displays as a unit, but more importantly, the platoon can be controlled as a unit, rather than as individual tanks.If a task is given to this non-intelligent Pseudo-aggregate of a mixed platoon, the order will be repeated to all member units without modification. In contrast, if the platoon has a behavior model, any orders given will be processed by the behavior model and appropriate commands will be passed on to the individual entities. For example, if a platoon without a behavior model is given the command to go to a point, all the entities will individually determine the best way to the point. A unit with a behavior model will assign each entity a place within a formation and bring the entire platoon to the destination in a tactically correct manner.Entity CommunicationsMÄK VR-Forces simulates a radio-like communication system for sending tasks to entities and receiving reports from entities. Non-aggregate entities (which do not have subordinates) have a radio with one receiver/transmitter for sending and receiving messages within it's own unit. Aggregate entities also have a command radio, with two receiver/transmitters: one for sending and receiving messages in their own units, and the other for sending messages to their subordinates. For example, a platoon that is part of a company would use one receiver/transmitter to communicate with the other platoons in its company, and the other to communicate with the members of the platoon itself.Protocol Independent NetworkingBy building VR-Forces using VR-Link, MÄK's networking toolkit, we have been able to achieve a high level of independence from any particular protocol or High Level Architecture (HLA) Federation Object Model (FOM). In fact, VR-Forces provides full compatibility with DIS version 2.0.4 and IEEE 1278.1 as well as the HLA. VR-Forces is compatible with the MÄK Real-time RTI, the DMSO RTI v1.3 and with RTI v1.3 NG.Terrain IndependenceThe terrain library not only provides a range of functionality including height above terrain, intervisibility and route planning, but does so in a terrain independent manner. Currently, the library is compatible with CTDB, OpenFlight™, DTED and Evan & Sutherland's GDF. In the future, we are planning SEDRIS compatibility.DocumentationWith six years of experience in creating and supporting APIs, MÄK cannot stress the importance of quality documentation enough. The benefits of a toolkit to a user decrease dramatically without usable and professional documentation. Any time savings user's may receive from extensive functionality is reduced by the time and frustration it takes to make effective use of the software. Support costs also increase dramatically when the documentation is left as an afterthought. To ensure that the documentation is thorough and timely, we have assigned a technical writer to work with the development team at all stages of the process. The outcome includes an installation guide, a user manual for the GUI, a programming overview, a thorough API description, class and object hierarchy diagrams, programming examples, and, of course, a complete index.ConclusionThrough careful research of user requirements and leveraging related experience it was possible to build a new product that was able to bridge previously disparate user communities. And as new software technologies are developed, VR-Forces will act as a testbed for these ideas. For those ideas that prove practical, VR-Forces will provide an easy distribution system for these concepts through regular updates to customers.Author BiographiesBEN LUBETSKY is currently the Director of Marketing at MÄK Technologies. Prior to his seven years at MÄK Technologies he worked for three years as an engineer on the SIMNET program at Bolt, Berenek and Newman. He holds a Bachelor of Science degree in Computer Science from Boston University.LEN GRANOWETTER is MÄK's Director of Product Development.  He is the chief architect of  the VR-Link networking toolkit and the MÄK Real-Time RTI. He holds a Bachelor of Science degree in Computer Science from the Massachusetts Institute of Technology.Ground VehicleNavigationHMMWV Hull.50 Cal Machine GunTerrain SupportVisualCollision AvoidanceFire ControlSensorsProvide information about the simulated environment to the ControllersControllersMake decisions based on sensor inputs and parameters on the componentsActuatorsUse control inputs to model interactions with the simulated environmentNight Vision