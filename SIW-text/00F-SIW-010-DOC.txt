Managing a Federation Object Model With Rational Rose: Bridging the Gap Between Specification and ImplementationVerlynda S. Dobbs, Ph.D.John D. RobertsAtlantic Consulting Services (ACS), Inc.167 Avenue of the Common, Suite 4Shrewsbury, NJ 07702732-460-9416 HYPERLINK mailto:vdobbs@acsinc-nj.com vdobbs@acsinc-nj.com, jroberts@acsinc-nj.comKeywords:  Software Design, FOM, HLA, OMT, OOAD, UMLABSTRACT: The fundamental difference between Object-Oriented Analysis and Design (OOAD) object models and the High Level Architecture (HLA) Object Model Template (OMT) becomes problematic when  the software design of the federation and the HLA federation object model (FOM) are maintained as separate entities using different tools.  This paper presents a methodology for developing and maintaining both the FOM and federation design in a single tool, Rational Rose.  Using the Unified Modeling Language (UML), a true OOAD representation of the federation is developed that includes the specification of object classes, attributes, operations (methods), object relationships, interaction classes, and parameters. The object model provides a single, consistent representation that serves as the basis for generating both the FOM and the implementation specification. The methodology is currently being applied to a U.S. Army sponsored effort that is developing a Command, Control, Communications, Computers, and Intelligence (C4I) FOM.  IntroductionThe High Level Architecture (HLA) is a Department of Defense (DoD) mandate providing a common framework for modeling and simulation (M&S) that facilitates interoperability and reuse among simulations and their components.  The HLA Object Model Template (OMT) defines a format for documenting HLA-relevant information about object classes, attributes, and interactions specifying how the simulation components exchange information through a common representation.  Although the OMT has been derived based to some extent on Object-Oriented Analysis and Design (OOAD) methodologies, it does not implement a genuine object-oriented paradigm.  A true OOAD object model describes an abstraction of a system developed to better  understand the system.  In OOAD, the objects are defined in terms of their attributes, operations, and relationships to other objects.  For the HLA, however, the scope of the OMT focuses on requirements for information exchange among the federation simulation components, limiting specification to objects, attributes, interactions, parameters, and only hierarchical relationships. When using OOAD for the software design of the federation, this fundamental difference between OOAD object models and the OMT becomes problematic.  The software design and the HLA federation object model (FOM) would be maintained as separate entities using different tools. Changes dictated during implementation present a serious challenge to the developer to keep the software design and FOM consistent.  This paper presents a methodology for developing and maintaining both the FOM and federation design in a single tool, Rational Rose.   Section 2 provides background on the HLA, OOAD, and the C4I FOM.  Section 3 addresses why the HLA OMT is not OOAD.  Section 4 proposes a single tool solution, specifically Rational Rose, followed by the description of the process using Rational Rose in Section 5.  Section 5 also contains a case study showing the application of the process to the C4I FOM.  The paper concludes with a Summary and Conclusions, Future Direction, and References in Sections 6, 7, and 8, respectively.  Appendix A contains abstracts of products generated from the Rational Rose C4I object model. BackgroundHLA DescriptionThe HLA is a general-purpose architecture for simulation reuse and interoperability and is based on the premise that no single simulation can satisfy all uses and users. An individual simulation or set of simulations developed for one purpose can be applied to another application under the HLA concept of the federation: a composable set of interacting simulations. Each individual application that participates within a federation is known as a federate.  The intent of the HLA is to provide a structure to support reuse of capabilities available in different simulations, ultimately reducing the cost and time required to create synthetic environments, and to encourage the possibility of distributed collaborative development of complex simulation applications.  The HLA is defined by three primary components: (1) the HLA Interface Specification, (2) an Object Model Template (OMT), and (3) a set of HLA Rules. The HLA Interface Specification consists of a standard set of services and interfaces that federates use to support efficient information exchange when participating in a distributed federation execution [1].  It is defined in terms of a set of functions specified through an Application Programmers Interface (API).  The OMT provides a means of documenting key information about the federates and federations in a structured manner [2].  It is used to describe how the individual simulations, as well as the overall federation, interact. There are ten specific rules that define the principles of the HLA in terms of responsibilities that federates and federations must uphold [3]. An HLA object model is used to describe a simulation object model (SOM) for a federate or a FOM for a federation.  The OMT, applicable to both FOMs and SOMs, provides a tabular form  for specifying data exchange among federates in a common standardized format.  The OMT characterizes FOMs and SOMs in terms of their objects, attributes, interactions, and parameters.  Specifically, the object model defines:Object Model IdentificationObject Classes with hierarchical relationshipsClass AttributesInteractions with hierarchical relationshipsInteraction ParametersEnumerated Data typesComplex Data typesRouting SpacesLexicons – Class, Interaction, Attribute, ParameterA Federation Development and Execution Process (FEDEP) has been defined to provide a high-level framework for HLA federation construction [4].  The FEDEP defines a generic framework that serves as a starting point for identifying issues of interoperability  and consistency in  a distributed simulation environment. The six steps  of the FEDEP, shown below, describe a process model for the development of federates that fully conform to the HLA specifications.Define Federation ObjectivesDevelop Federation Conceptual ModelDesign FederationDevelop FederationIntegrate and Test FederationExecute Federation and Prepare ResultsEvidence of the gap between specification and implementation exists in Step 4 of the FEDEP.  After development of the FOM and generation of the Federation Execution Data (FED) file, if federate modifications are required during implementation, changes must be made to the software design and implementation.OOADIn OOAD, the objects are defined in terms of their attributes, operations, and relationships to other objects.  A class is a set of objects with common properties (attributes), common behavior (operations), common relationships to other objects, and common semantics.  OOAD methodologies are generally defined to include four fundamental aspects [5]:  Abstraction: represents a complex reality in terms of a simplified modelEncapsulation: hides the implementation of the object (specifically, implementation of attributes and operations)Inheritance: allows an object to incorporate all or a portion of the definition of another object as part of its own definitionPolymorphism: allows operations on different object types to have the same nameC4I FOM Through a U.S. Army Communication, Electronics Command (CECOM) sponsored effort, a prototype C4I FOM has been developed.  The purpose of the FOM was to initiate work to develop a general purpose FOM applicable to integration of simulations with C4I systems [6].  The initial prototype version focused on the Army’s Tactical Internet (TI) for brigade and below.  Through experimentation and on-going research, the C4I FOM is being evolved to address a much broader range of C4I systems within the Army as well as for the Joint Services.  The prototype C4I FOM has been proposed to SISO as a starting point for the development of a C4I Reference FOM to be used as the standard for interoperability between C4I and M&S systems. A portion of the C4I FOM, represented as an object model and shown in Figure Figure 2.1  Classes of Prototype C4I FOM2.1, will be used to demonstrate various issues in this paper. Why HLA OMT is not OOADNumerous papers from previous workshops and other sources [2,7,8] have made reference to the fact that the HLA OMT definition does not completely correspond to a true OOAD representation.  Operations on objects, needed to capture the behavior required of the objects to provide the required functionality of the domain, are not represented in the OMT.  This allows nonstandard updates to the object attributes.  The single inheritance relationship supports generalization but eliminates many needed relationships, such as aggregation and various types of associations (i.e., “uses,” “exhibits” ).  Since encapsulation is the mechanism that provides data hiding, use of standard public interfaces cannot be enforced.Fundamental concepts of OOAD are contained in Table 3.1 with their implementation status in the HLA OMT.  The implications of the lack of the OOAD characteristics in the HLA OMT are examined below in the context of the CommEffects class of the prototype C4I FOM.   A diagram of the CommEffects class with its related classes is shown in Figure 3.1.Lack of support for a true OOAD paradigm presents a problem when going from the FOM to the federation software design and implementation.  Using the OMT representation of the FOM limits the ability to represent certain concepts that the object-oriented software design would capture.  Lack of these characteristics, in terms of the CommEffects class, include:Operations – value of attribute, “noiseLevel,”  can be changed using nonstandard operations instead of “SetNoiseLevel”Relationships other than inheritance – no capability to express relationships such as aggregation (“Protocol” to “CommNetwork”) and other associations (i.e., “exhibits”)Abstraction – no way to capture the operations associated with “CommEffects” that give the class objects the required functionalityEncapsulation – cannot use data hiding, thereby making only the public interface visible.  Any user can access representations of attributes directlyPolymorphism – unable to overload operations such as “move” for various types of  platforms with communications devicesManaging the FOM4.1	A Single Tool SolutionA solution to the problem of maintaining the FOM and the federation software design as separate entities is to identify a single, available tool that is capable of maintaining one representation from which both products can be generated.Available HLA Tool SupportThe DMSO-sponsored HLA Tools and Services Bulletin Board [9] provides a central location for tool developers to post descriptions of their products that are available for supporting the implementation of the HLA.  These tool descriptions and additional information from the world wide web were examined to identify any available tools that satisfy the following criteria:Single toolCurrently availableCapability of maintaining the FOM and the federation software design as a single entitySupports true OOAD paradigmSupports graphic representation The examination of the tools on the bulletin board resulted in the conclusion that no single tool currently satisfies the criteria.  Many of the products provided environments to integrate several tools to support the HLA FEDEP process.  Other tools focused only on designing the FOM or were only based on the HLA OMT, not on OOAD.Rational RoseDue to its reputation and availability, Rational Rose [10] was examined as a solution.  Rational Rose is a well-known and respected tool for OOAD that can be used to satisfy  the desired criteria.  Using the Unified Modeling Language (UML) [11], a true OOAD representation of the federation can be developed that allows for  the specification of object classes, attributes, operations (methods), object relationships, interaction classes, and parameters.  Rational Rose stereotypes, properties, and frameworks can be used to account for the other unique data requirements that are part of the OMT (e.g., enumerated data types, complex data types, resolution, units, routing space, etc).Table 3.1 Fundamental Concepts of OOADOOAD CharacteristicHLA Implemented?Problem IntroducedObjects/Classes of objectsYesAttributesYesOperationsNoValues of attributes can be changed using nonstandard operationsRelationshipsPartial – single inheritance onlyNo capability to express relationships such as aggregation and other relationshipsAbstractionNoNo mechanism for capturing the common operations and functionality that are sharedEncapsulationNoCannot use data hiding so that only the public interface is visibleInheritancePartial - single onlyCannot inherit from multiple classesPolymorphismNoUnable to overload operations based on type of objectFigure 3.1   Communications Effects Class of Prototype C4I FOMApplication of Rational RoseThis paper focuses on using Rational Rose to solve the problem of maintaining the FOM and the federation software design as separate entities.Develop the Object Model5.1	Capturing OMT Data in Rational RoseTable 5.1 maps the required FOM data to the Rational Rose mechanisms used to capture that data.Process in Rational RoseThe process for developing the object model and maintaining the FOM and the federation software design is composed of the following steps:Develop the object model in Rational Rose Generate the OMT Data Interchange Format (DIF) fileGenerate FED file and documentation Generate C++ source code for implementationDevelop the Object Model in Rational RoseDevelop the object model in Rational Rose by capturing all the requirements for the object model plus the ancillary data needed for the OMT.  Use the mechanisms described in Table 5.1.Generate OMT DIF FileAfter the requirements have been captured in the object model, use a customized script that has been developed to convert the object model to an OMT DIF file. Access the script by selecting the HLA option  from the Rational Rose “Tools” pull down menu.Table 5.1  FOM Data Mapping to Rational Rose MechanismsOMT DataRational Rose MechanismStereotypeOptionsObject Model IdentificationClass MetadataObject Class Class ObjectClassN,P,PS,SClass AttributeClass Attribute AttributeProperty setHierarchical RelationshipClass/Subclass InteractionClass InteractionI,IR,IS,N,R,SInteraction ParameterClass Attribute parameterProperty setEnumerated Data typeClass Type-EnumEnumeratorsClass Attribute enumeratorComplex Data typeClass Type-ComplexComplex FieldClass Attribute complexFieldProperty setRouting SpacePropertyLexiconsDocumentation fieldsGenerating OMT FOMRose Extended VBScriptGenerating Federation Design/ImplementationRose Professional C++ EditionGenerate OMT Products Read the OMT DIF file into the HLA Object Model Development Tool (OMDT) to produce the OMT products.  Then generate the FED file to use for implementation.  Using OMDT Pro from Aegis Corporation, HTML files can also be generated that represent the FOM viewable as a web page.Generate C++ CodeTo support creation of the federation implementation, Rational Rose provides an add-on feature allowing C++ code generation directly from the object model.  In this manner, both the OMT representation and the implementation header files are generated from a single UML object model. 5.3  Creating HLA Framework in Rational RoseCreating the HLA framework in Rational Rose is accomplished by establishing the required stereotypes, creating a Rational Rose framework specifically for the HLA, and installing the entry to the “Tools” menu to link to the VBScript that generates the OMT DIF file.  This script was written in the Rational Rose extension to VBScript and can be invoked from the Rational Rose “Tools” pull down menu. Maintaining the FederationUsing Rational Rose, the problem of maintaining both the FOM and the federation software design disappears.  The only representation that is saved in Rational Rose is that of the object model, represented in UML.  Should a design change be required during implementation, only the object model would be updated and the resulting OMT and C++ header files generated from a single, consistent representation.  Case Study:  C4I FOMFollowing the process described in Paragraph 5.2, Rational Rose was used to develop the object model that represents the C4I FOM. The C4I FOM class structure represented in UML format and output from Rational Rose is shown as Figure 2.1.  Abstracts of the outputs described below are included as Appendix A.The Rational Rose object model served as the basis for generating the OMT DIF file (A.1) via the customized script.  This OMT DIF file was read into OMDT.  No data was entered or saved within the OMDT.  Example outputs from OMDT include the Object Class Structure (A.2), Interaction classes (A.3), and FED file (A.4).  The OMT DIF file was input to OMDT PRO to generate the HTML (A.5).The C++ code segments (A.6) are abstracts from the header and implementation files that were generated by Rational Rose for the CommEffects class.Summary and ConclusionsRational Rose satisfies all of the criteria listed in Paragraph 4.1.1 above.  Rational Rose is:Single toolCurrently availableCapability of maintaining the FOM and the federation design as a single entitySupports true OOAD paradigmSupports graphic representationRational Rose offers a usable solution to the problem of maintaining consistent versions of the FOM and the federation software design.  The object model represented in Rational Rose in UML notation is the single representation used to generate both the OMT version of the FOM and the federation software design.  Although this is probably not the ultimate solution, use of the process defined above using Rational Rose is a reasonable approach for closing the gap in the near term.  Recommendations for long-term solutions include diverse proposals that span the spectrum from the use and standardization of an Information  Resource Dictionary System (IRDS) [8] to the adaptation of the OMT to be more OOAD-oriented.Future DirectionContinuation of this work will involve application of the process to the instantiation of the C4I FOM that implements the Tactical Internet Model (TIM) using the HLA.  Also,  additional mechanisms provided by Rational Rose for representing scenarios as use cases will be investigated.  The use cases will illustrate the intended functionality, the surroundings, and the relationship between the two.  The use cases will provide a  vehicle for communication of the simulation’s behavior.  The creation of the scenarios will extend the HLA Framework to developing the federation conceptual model and testing the federation.References[1] High Level Architecture Interface Specification, Version 1.3, U.S. Department of Defense, 2 April 1998.[2] High Level Architecture Object Model Template Specification, Version 1.3, U.S. Department of Defense, (IEEE P1516.2, Standard for Modeling and Simulation (M&S) High Level Architecture (HLA) - HLA Object Model Template (OMT)), 5 February 1998.[3] High Level Architecture Rules, Version 1.3, U.S. Department of Defense, 5 February 1998.[4] High Level Architecture Federation Development Process (FEDEP) Model, Version 1.5, U.S. Department of Defense, 8 December 1999.[5] Edward Yourdon, Object-Oriented Systems Design – An Integrated Approach, Yourdon Press, 1994.[6] W. Sudnikovich, J. Roberts: “Implementation of a prototype C4I FOM: Continued Progress,” Fall 1999 Simulation Interoperability Workshop, paper number 99F-SIW-077.[7] Michael D. Myjak, “Re: RDE Outbrief Points…,” email message, 4 October 1999. [8] Andreas Tolk, “HLA-OMT versus Traditional Data and Object Modeling – Chance or Shoehorn?,” Spring 2000 Simulation Interoperability Workshop, paper number 00S-SIW-024. [9]  DMSO High Level Architecture – Tools Bulletin Board, http://hla.dmso.mil/bboard/[10]  Terry Quatrani, Visual Modeling with Rational Rose and UML, Addison-Wesley Longman, Inc., 1998.[11] Martin Fowler, UML Distilled, Applying the Standard Object Modeling Language, Addison-Wesley Longman, Inc., 1997.Author BiographiesVERLYNDA S. DOBBS is a Senior Associate for Atlantic Consulting Services (ACS), Inc.  She is currently involved in developing a HLA Framework for Rational Rose and applying that framework to model the C4I FOM.  Prior to this, Dr. Dobbs provided support to various organizations within the U.S. Army PEO C3S, focusing on software reuse processes, product lines, software architectures, software reuse standards, object oriented technology, quality factors and metrics for reusability.  As a member of the Computer Science faculty of Wright State University, Dayton, Ohio, Dr. Dobbs taught courses in software engineering, distributed processing, operating systems and artificial intelligence, primarily at the graduate level.  She holds a Ph.D. in Computer Science from The Ohio State University, Columbus, Ohio.JOHN D. ROBERTS is a Project Manager for Atlantic Consulting Services (ACS), Inc.  He is currently involved in supporting the transition of various US Army CECOM simulation systems from DIS to the HLA.  Prior to this he spent six years as a Lead Developer with the MITRE Corporation working in the areas of distributed simulation and advanced C2 decision support for military planning.  Other technical experience includes work in the fields of Artificial Intelligence (AI), Expert System development, and customer service support.  Mr. Roberts holds a B.S. in Electrical Engineering from Widener University and a M.S. in Electrical Engineering from Fairleigh Dickinson University. Appendix A.  Products Based on Rational Rose C4I Object ModelA.1.  Abstract of OMT DIF File from Rational Rose(Class (ID 116 )      (Name "CommEffects")      (PSCapabilities N)      (Description "Communications effects - computation services for communication degradation due to ambient factors.")      (Attribute (Name "noiseLevel")            (DataType "double")            (Description "Noise level.")      ))(Class (ID 117 )      (Name "NetworkDelay")      (PSCapabilities PS)      (Description "Network delay communications effects.")      (Attribute (Name "networkLoad")            (DataType "any")            (Description "Represents the notion of a load on a network.  This value would be used when computing the average delay through a network.")      )      (SuperClass 116 ))(Class (ID 118 )      (Name "PathLoss")      (PSCapabilities PS)      (Description "Pathloss communications effects.")      (Attribute (Name "terrainProfile")            (DataType "ArrayPointerDouble")            (Description "Representation of a terrain profile.  Most likely an array of terrain heights.")      )      (Attribute (Name "propagationLoss")            (DataType "float")                  (Units "dB")            (Description "Value representing propagation loss in dB.")      )      (Attribute (Name "propagationModel")            (DataType "EnumPropagationModel")            (Description "Identifies the propagation model to use for the pathloss calculation.")      )      (Attribute (Name "bitErrorRate")            (DataType "double")            (Description "Represents a bit error rate for a given link or path loss computation.")      )(SuperClass 116 ))A.2.  Example of  Object Classes from OMDTA.3.  Example of Interaction Classes from OMDTA.4.  Abstract of FED File from OMDT(class CommEffects     (attribute noiseLevel best_effort receive) (class NetworkDelay     (attribute networkLoad best_effort receive) ) (class PathLoss     (attribute terrainProfile best_effort receive)     (attribute propagationLoss best_effort receive)     (attribute propagationModel best_effort receive)     (attribute bitErrorRate best_effort receive) ) (class Jamming     (attribute jammingMethod best_effort receive) ) (class Interference     (attribute interferenceType best_effort receive) ) )A.5.  Abstract of HTML Results from OMDT ProPRIVATEClass1Class2Class3HYPERLINK "object_20.html"CommEffects (N)HYPERLINK "object_21.html"NetworkDelay (PS) HYPERLINK "object_22.html"PathLoss (PS) HYPERLINK "object_40.html"Jamming (PS) HYPERLINK "object_41.html"Interference (PS) HYPERLINK "object_26.html"CommNetwork (PS)  HYPERLINK "object_38.html"CommUser (PS)  HYPERLINK "object_42.html"Protocol (PS)  HYPERLINK "object_48.html"CommLink (PS)  A.6.  Abstract of C++ Source Code from Rational Rose// Abstract of CommEffects.h fileclass CommEffects {  public:    //## Constructors (generated)      CommEffects();CommEffects(const CommEffects &right);    //## Destructor (generated)      ~CommEffects();    //## Assignment Operation (generated)      CommEffects & operator=(const CommEffects &right);    //## Equality Operations (generated)      int operator==(const CommEffects &right) const;      int operator!=(const CommEffects &right) const;    //## Other Operations (specified)      //## Operation: GetNoiseLevel%38D7A04B03BF      double GetNoiseLevel ();      //## Operation: SetNoiseLevel%38D7A071014D      void SetNoiseLevel (double noiselevel);      //## Operation: ApplyNoise%38D903050368      void ApplyNoise ();}// Class CommEffects - abstract of cpp file//## Other Operations (implementation)double CommEffects::GetNoiseLevel (){  //## begin CommEffects::GetNoiseLevel%38D7A04B03BF.body preserve=yes  //## end CommEffects::GetNoiseLevel%38D7A04B03BF.body}void CommEffects::SetNoiseLevel (double noiselevel){  //## begin CommEffects::SetNoiseLevel%38D7A071014D.body preserve=yes  //## end CommEffects::SetNoiseLevel%38D7A071014D.body}void CommEffects::ApplyNoise (){  //## begin CommEffects::ApplyNoise%38D903050368.body preserve=yes  //## end CommEffects::ApplyNoise%38D903050368.body}