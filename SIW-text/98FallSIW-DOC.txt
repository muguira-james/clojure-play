Requirements for Interoperability with Dynamic Models of Different FidelityIlie Stiharu-Alexe, Jean-Pierre Bélanger & Lily LamOriginalSim Inc.5524 St. Patrick, suite 302Montréal, Québec, Canada H4E 1A8www.originalsim.comistiharu@originalsim.com, jpbelanger@originalsim.com, llam@originalsim.comKeywords:High Level Architecture, Simulation Reuse Process, Flight Control, Flight Simulation, Simulation Based Acquisition, OSim FrameworkABSTRACT: Simulation serves as glue in the product life-cycle of the atmospheric vehicles: from feasibility exploration, systemic and technological design, manufacturing, to test and evaluation procedure. A single simulation framework can assist in covering the product’s life cycle by acting as a link between specification, conception, manufacturing and deployment. This perspective requires a new vision of simulation modeling. Ideally, models of different fidelity for the same system, sub-systems or components should coexist in the same environment. These models must be able to exchange data and update the progressive complexity of their behavior consistently and in a coherent way.IntroductionThe topic of this paper is related to the Life-Cycle Modeling and Simulation philosophy [1] in which the simulation will serve as integration glue in the atmospheric vehicle product life cycle from feasibility exploration, systemic and technological design, manufacturing, to test and evaluation procedure. Following this concept and the Simulation Based Acquisition (SBA) view, a single simulation framework can help to integrate the product life cycle process by acting as a link between specification, conception, manufacturing and deployment. This perspective requires a new vision of simulation modeling. Ideally, models of different fidelity for the same system, sub-systems or components should coexist in the same environment. These models must be able to exchange data and update the progressive complexity of their behavior consistently and in a coherent way. In order to conform to this requirement, a preparatory modeling analysis of the investigated entity must be accomplished at the beginning of the system design to identify the coexisting models and their suitable state parameters.From the dynamic behavior perspective, the system’s state represents the minimal number of linear independent parameters able to settle the system’s initial condition. In order to work with coherent objects’ state vectors, those vectors must be considered as the system’s prevalent component driven by dynamic models of different fidelity. The selection of the system’s dynamic state is the start point of any architectural specification of environments involving dynamic models of different fidelity. The accuracy attached to each dynamic model is set with the intent to coherently express that state. This paper discusses the case of a complex dynamic model such as the airplane, as a reference for interoperability with dynamic models of different fidelity. The SBA reuse study refers to the automatic control system design activity, which represents only an illustration of the interoperability vision. As a result, a reuse opportunity is recognized at every design level and a joint domain of reuse is identified. A similar analysis is possible regarding any other simulation field. The airplane dynamics accepts the following association of three-dimensional vectors as state: the inertial position and speed with the local attitude and angular speed. In concordance with the aforementioned modeling concept, models of different fidelity may be conceived in order to produce the same airplane state. These models are developed at different moments of the product life-cycle according to local needs. They should be accessible to the community in order to be reused for subsequent simulation tasks. The use of an object-oriented design additionally provides a universal definition of the airplane’s dynamic state at the level of the BaseEntity class, which designates a universal vehicle. The DynamicModel is defined as a distinct class, visible at the level of the BaseEntity. It requests the current BaseEntity state and the corresponding airplane controls in order to derive the next state. The airplane controls are specific, depending on the model fidelity. For instance, in the case of the low-fidelity models, the controls could be the desired values of the vehicle’s cinematic parameters. For mid or high-fidelity models, the controls of the classical airplanes would be the physical ones, represented by the elevator, throttle, aileron and rudder. The dynamic behavior is typically as diverse as there are different models’ exactitude. A standard formalization will allow one to work with classes of dynamic models. The elementary dynamic model class is the low-fidelity dynamics characterized by a simplified and decoupled airplane behavior. A less elementary dynamic model is the mid-fidelity dynamics, generally depicted as a six-degree-of-freedom, solid-rigid airplane comportment, with linear aerodynamics. Additionally to this, the high fidelity dynamics could be defined by considering extra non-linear aerodynamics and aeroelastic behavior combined with other high-order effects. The higher order effects would be depicted with different accuracy, depending on the simulation specification. This design style assures the possibility to connect to the same BaseEntity various DynamicModel of different fidelity, selected from an authoritative model database. 2. Automatic Flight Control Life-CycleThis paper attempts to explore the airplane dynamic model in the context of the automatic flight control system life-cycle and the reuse of the resulting models in other domains. We analyze each stage of the product analysis, design, manufacturing, testing and evaluation in order to illustrate the aforementioned concepts and their application.The necessity for reuse is dictated at two different levels:Imperative to have standard base entities with attributes and interactions compliant to the High Level Architecture (HLA) and RunTime Infrastructure (RTI)[2]. An example is the Real-time Platform Reference FOM (RPR FOM)[3]. This would allow any simulation to join other simulations, as a HLA federate.The necessity to use an integrated simulation framework covering both the life-cycle product development and additional operations. This would minimize the required modifications necessary to achieve reuse of the dynamic model when using them in various applications. Those two requirements guarantee the global compatibility of the simulation models: a common infrastructure like the HLA or even the RPR FOM can cover various application domains horizontally while vertical applications derived on top of those common infrastructures can accommodate special domains. Those domains will evolve and will stabilize to the point of opening the door for third parties to build integrated frameworks tailored for them. At the same time, compatibility is preserved thanks to the shared common infrastructure. This compatibility will allow to produce a foundation database of accredited SBA dynamic models ready to be reused by all the simulation activities that involve specific vehicles or their distinct modeled constituents. 2.1 Automatic Flight Control Preliminary Design ModelsThe automatic control preliminary design focus on the system basic specifications: The open-loop across close-loop system description and dynamic performance specification.Automatic control modes definition.Implementation technologies selection.In the preliminary design, a simple dynamic model is generally used to assess the dynamic performance and to define automatic control modes. This model generally represents the aircraft by its kinematics and second-order dynamics between the desired and the current airplane speeds, altitudes and attitude parameters. Using such a model, the desired performance of the autopilot is defined in terms of control efficiency, overshoot, and time of response for each individual decoupled dynamic airplane channels. This model depicts in fact the prescribed dynamic response of the airplane driven by the specified automatic control system. Figure 1 presents a potential airplane low-fidelity model for the preliminary autopilot design. The attached airplane controls are the requested values of airplane attitude, speed and altitude. These values represent generally the basic vehicle’s automatically controlled parameters. Second-order transfer functions with time delays may be attached as dynamic models to each mono-access aircraft channel. Each behavior will be defined in terms of steady-state transfer function gain, time-response damping, time constant and delay. That simple representation, therefore, allows the designer to specify the airplane close-loop response. Some other supplementary dynamic specifications are essential in order to take into account more complex dynamic effects. The inertial cross coupling, for example, may be introduced at the level of the bank angle definition in the vehicle’ turning mechanism and, eventually, in the performance specification of the Stability Augmentation System (SAS). Figure 1. A Low-Fidelity Airplane ModelIn this case, the vehicle’s local angular speed and attitude, as well as inertial Earth-centered linear speed and position defines the system dynamic state. The state components are the outputs of the predefined mono-access models or parameters derived from kinematics. The angular speed, for example, is derived from the current attitude dynamics. The airplane’s horizontal position is obtained by transforming the vehicle’s local speed into the inertial reference and, if necessary for the integration, taking into account the Earth’s curvature, rotation and Coriolis acceleration effects. The airplane altitude is also corrected, reflecting the local value of the geodetic altitude reference. Each of these correction depends from the reference coordinate system, as well as from the airplane class and the steady-state flight conditions. It can be noted that the aforementioned low-fidelity representation of the airplane dynamics is totally equivalent, regarding its outputs, to other more complex classes of dynamic models. If, for example, some supplementary cockpit data is necessary in the simulation, it may be derived from the existing state vector and the computation context that may be itself model-dependent. For that reason, only the Dynamic Model class must drive all the output data computation. Another important point is the fact that a vehicle modeled using different fidelities could still be attached to a shared three-dimensional viewer, due to the separation between the dynamic state and the dynamic model. This permits the separation of the viewer from the simulation as a distinct component. The same viewer can then be employed for various applications associated to different vehicles’ dynamic representations. The low-fidelity models defined initially for the autopilot preliminary analysis and feasibility study may also be involved in other simulation activities. One direct use of the low-fidelity dynamic model is the training by simulation activity. In that case, the simulation focus is no longer on the airplane entity. In strategic crew-coordination trainers, for example, a low-fidelity model can successfully depict the airplane dynamics.This approach promises a large potential of reuse of the low-fidelity models. 2.2 Automatic Flight Control Dynamic Design ModelsThe airplane dynamics is considered in a different way in the controller synthesis stage of the automatic control system. A mid-fidelity simulation model is derived for that purpose during the dynamic design considering two different strategies.The first possible design direction is the linear synthesis. With the reference to the fact that the dynamic linear design is the only one demonstrating an operational potential, the linear airplane model is used for the synthesis of this control law. Dynamic models are conceived for a grid of steady-states altitudes, airspeeds and flight configurations, in order to cover the entire flight envelope. This is due to the variation of the airplane dynamics with the steady-state flight conditions as well as to the flight configuration. Those models allow to locally design simple linear controllers. Each controller’s performance is evaluated for flight conditions around the design point and, if necessary, a gain scheduling process is initiated in order to set-up an adaptive controller. Another possible approach of the linear design is robust control. In this design the modification of the aircraft dynamics is emphasized by its frequency-defined superior boundaries. At the end of that design, we obtain a dynamic high-order controller able to command the airplane through its entire flight envelope.The second design direction is the real-time model identification and control law elaboration via Model Predictive Control or Non-Linear Dynamic Model Inversion. This design involves a mid-fidelity non-linear model for the preliminary algorithm design and gain scheduling. The model is derived starting from the same airplane physical and aerodynamics data as the linear model previously presented at the beginning of this section. The structure of the Base Entity where that model is attached is the same as the one described in the case of the low-fidelity model. However, the airplane control vector is represented by the aircraft’s real physical commands.The end-result of the linear dynamic design is a database of controllers able to depict the airplane’s automatic control system for all possible flight conditions. Based on that, the structure and values of the autopilot and the guidance computer gains are derived at the implementation stage. In the case of the on-line identification and control algorithm, the implementation corresponds to real-time adaptation of the generic non-linear control law of the autopilot or guidance computer according to the current flight conditions. The equivalent input-output control system behavior and interlocking mechanisms must be the same for the two alternate design methods. It can be noted that the automatic control design involves also the dynamic modeling and the design of the servo actuators and sensors. For a large majority of design cases, this design study is preliminary and independent to the autopilot and guidance system design. 2.3 Automatic Flight Control Test and Evaluation ModelsThe process of test and evaluation completes one iteration loop of the elaboration of the airplane automatic control system. At the level of the test and evaluation process, many levels of assessment must be completed. At the beginning, a rough evaluation is achieved in order to verify the system integrity and its gross behavior. Corresponding to this testing level, the design may restart to its beginning if an irregularity is detected.After the introductory testing process, a complex operational in-flight testing and evaluation program for the autopilot is passed in order to validate the system in operational conditions. The recent technological advances in the domain of computation speed as well as in the field of high-fidelity accredited models make possible the large-scale use of virtual simulated airplanes in the field of test, performance evaluation and validation of aeronautical systems. The transition of the test and evaluation process from “test, fix, test” to “model-simulate-fix-test-iterate approach” using the Simulation, Test and Evaluation Process (STEP) concept [4] may benefit the automatic control system validation process. The case of a virtual in-flight test for autopilot operational validation is presented in Figure 2. EMBED Visio.Drawing.4Figure 2. Block Diagram of Virtual Autopilot Test EnvironmentThe virtual in-flight test environment is conceived to verify the automatic flight control and guidance system. A testbed is used to validate the autopilot control laws and to schedule and verify the system gains for the entire flight envelope. A simulated high-fidelity airplane dynamic model is considered in the flight-test environment of the Guidance and Control Computer (G&CC). This model considers the full dynamics of the airplane movement including non-linear high-order aerodynamics, and eventually aeroelastic effects. The vehicle’s physical state, resulting from simulation, is passed to the airplane’s virtual acquisition system. This acquisition system considers the real sensor characteristics in order to simulate the transmission delay and quantization effect.As a result, the vehicle’s measured state is passed to the G&CC to calculate the control laws for the vehicle’s surface controls and throttle. The computer must operate as closely as possible to its ideal in-flight conditions. For that reason, additional interlocking information is used by the virtual acquisition system to configure the operating sensors or estimation mechanisms, as well as to select the information to be passed to G&CC. This way, the computer outputs information in agreement with the current interlocking mode.Another advantage of this procedure is to assess and to assist the autopilot gain scheduling. The scheduling is done in concordance with the base-flight conditions through the entire flight envelope.An additional objective of the virtual testing process is to estimate the effect of the environmental perturbance on the system accuracy. Usually, this process is intensively time consuming and inherently expensive during flight-test procedures. The virtual-test process has the potential to reduce this cost and, consequently, the duration of flight tests.Using this test environment, a large scale of G&CC may be validated very closely to their in-flight test conditions. To confirm the virtual test session, a short session of live tests validates the product.The final step of the autopilot development is also related to the SBA reuse concept; the models used at that level represent additional candidates for other simulation applications, like virtual missile engagement test. 3. OSim Airborne Reference Class LibraryThe central point of the Airborne Reference Class Library [5] is to verify the interoperability concepts of a flight simulation scenario with models of different fidelity interacting together. The library was developed using a commercially available tool: the OSim Framework. This software automates the HLA compliant modeling and simulation process.Basic use of the library may address particular simulation fields like team coordination in strategic flight missions, flight traffic control and management, or final approach and landing process. The library’s design follows the classical flight simulation three-level architecture model. The acquisition and control mechanism of each individual aircraft is implemented using a three-level information-passing scheme. The insertion of an intermediate sensor and effector level between the external world simulation and the operator interface achieves that. This representation allows one to include local effects into the virtual simulation, such as acquisition noise or imperfection into the operator’s perception of the external reality.The external world simulation environment is defined as a collection of simulation objects (BaseEntity) evolving into the atmospheric environment. To each Base Entity, a state information is attached. The Entity State is defined in concordance with the declared application focus to be the 6 DOF solid-rigid vehicle dynamic state. This way, the Entity State consists of the translation and rotation position and speed, with respect to a universal reference.The game area defines the geographic location and the extent of the zone in which the scenario will operate. With the current version, the game area uses a geodetic Earth model, with user-defined limits. Provisions are attached to the different viewers to import terrain elevation maps in order to look at the scenario superposed on a geographic map. In this case, the parameters of the map, i.e. the map center (reference latitude and longitude) and the gaming area extent, become arguments of the simulation viewers. External world environmental phenomena such as atmospheric, oceanic, acoustic or electromagnetic profiles may also be taken into account. The global environmental effect on each entity is considered at the level of the physical entity class (PhysicalEntity), a derived class of BaseEntity. The level of detail of this entity depends on the application complexity. For instance, in general strategic scenario, the atmospheric profile may be modeled as a distributed Dryden wind perturbance profile, contrary to the approach and landing scenario where the same profile is defined using a more accurate Von Karman perturbance model. Generally, the vehicle behavior is defined inside the Aircraft class, at the third level of inheritance from the BaseEntity class. At this level, all the aircraft’s generic characteristics are defined or associated in concordance with the type of application. One of the main features of the Aircraft class is its dynamic model. The most common dynamics attached to the aircraft is based on a six-degrees-of-freedom      (6 DOF) solid-rigid model, eventually with some additional second-order effects, such as aeroelastic behavior. This model is usually simplified by taking into account the singular perturbation theory. So, the overall system dynamics is separated in two reduced-order sub-systems: the slow time-scale subsystem (the entity kinematics) and the fast time-scale subsystem (the entity dynamics).  The two time-scale-separated sub-systems become the entity’s simplified models and they are controlled independently.The vehicle’s fast dynamics, which defines the attitude behavior, describes the vehicle rotation and is set by the local effect of the controls. The vehicle’s slow dynamics, which defines the position behavior, describes the vehicle translation motion and is set by the long-term effect of the controls. Figure 3. Airborne Reference Class Library’s Dynamic Model ClassesEMBED Visio.Drawing.4Figure 4. Aircraft Low and Mid-Fidelity Guidance and Control Mechanism The fact that the vehicle dynamics is described alternately using two dynamic behaviors: the vehicle local (rotation) and the global (translation) models, as presented in Figure 3 and Figure 4, allows one to suppose two distinct subclasses of aircraft dynamics (AircraftDynamicModel).The first branch derived from aircraft dynamics (AircraftDynamicModel) is the low-fidelity dynamic model (LowFidelityModel). It uses a point-mass model for the vehicle trajectory movement. This induces the model to react as a regular aircraft equipped with a rudimentary autopilot. Accordingly, the vehicle model answers to classical guidance demands from the vertical and the horizontal navigation autopilot control mechanisms. The vertical navigation regulates the vehicle altitude (the barometric or geometric one). The horizontal navigation controls the vehicle ground track (heading or course) and the aircraft air or ground speed. In addition to the presented guidance behaviors, a local low-fidelity fast time-scale rotational dynamics is also built-in. This construction assumes second-order time response as a result of the requested values of attitude, speed or altitude. The specific parameters are set by the user by specifying the channel gain, damping and time constant.The second branch is represented by the mid-fidelity model (MidFidelityModel), which uses a complete non-linear 6 DOF solid-rigid model with linear constant aerodynamics and engine characteristics. This model may be extended to become a high-fidelity model (HighFidelityModel) by considering additional non-linear and non-stationary characteristics for the airplane aerodynamics, engine, gear and inertia.Another goal of the reference class library is to demonstrate the ability of its classes to represent the same entity with various fidelity depending on the distance between this entity and the simulation focus. This is illustrated by the aggregation and deaggregation of a F16 pair formation (F16PairFormation).While entities are far from the simulation focus, the formation is represented as a single aggregate object driven by a low-fidelity model. At a specific distance from the simulation focus, the object splits in many individual objects driven by separate low-fidelity dynamics. When an aircraft is sufficiently close to a location requiring a different modeling fidelity, it switches to the required fidelity [6]. The OSim Airborne Reference Class Library represents a proven example of interchangeable dynamic models of different fidelity. The user, through the OSim Framework, can easily extend the library. This approach isolates the user from the underlying distributed simulation and communication infrastructure.4. ConclusionsWe have explored the airplane modeling and simulation in the context of the automatic flight control system life-cycle relative to the reuse of dynamic models of different fidelity. We have also examined the virtual in-flight validation process of the guidance and control computer.Consistent with the SBA concept, the automatic control system development was considered as an iterative process assisted by different types of simulation models. Starting from an automatic control system application, a standard representation of the aircraft dynamics was proposed with the reuse potential in other application domains. We have proposed, in the above context, a unique framework allowing the use of models of different fidelity in a transparent way to deliver different reuse objectives:The models must have an equivalent input/output façade for the system dynamic state parameters, allowing a model to be replaced by another.Simulations must be able to select models depending on the simulation scenario and optionally interchange them at runtime.The simulation results must be presentable in different formats.That philosophy was adopted for the development of the Airborne Reference Class Library the HLA compliant OSim framework. Although this paper is conceived around the aircraft simulation, the same principles may be extended to other vehicle simulations. This allows the conception of a foundation of accredited dynamic models connected to simulated base entities in order to describe their behavior in different circumstances. The construction of accredited dynamic models and their standardized use will be enhanced by the use of integrated frameworks. Those frameworks will not only cover model implementation, execution, test and archive into repositories but also guide team members through the complete life-cycle of the project and provide updated information about it.The integration of the Airborne Reference Class Library with the OSim Framework and its HLA support represents another step towards SBA’s objectives.References [1]	Gansler, J., S.; “Life-Cycle Modeling and Simulation-A Key Element In Acquisition Reform”, SBA SIA Documents, 1998.[2]	***  “HLA RTI 1.3”, Defense Modeling & Simulation Office, 1998.[3] ***   “RPR-FOM 0.1.5”, Simulation Interoperability Standard Organization, 1998.[4] ***     “Simulation, Test, and Evaluation Process (STEP) Guidelines”, DoD DTSE&E, December 4, 1997.[5] Stiharu-Alexe, I., “Airborne Reference Class Library Specifications - Osim in Aeronautical Simulation”, in OriginalSim Inc. Web site, 1998.[6]	Bélanger J.P., Fortier P., and Lily Lam, “Lessons Learned from a Framework Approach to HLA-Compliant Federation Development”, Simulation Interoperability Workshop, Spring '98, 1998.Author BiographiesILIE STIHARU-ALEXE holds a M.S.A.E and a Ph.D. in Automatic Control from Polytechnic University in Bucharest, Romania. Mr. Stiharu-Alexe has experience in atmospheric flight dynamics and automatic control software development. He is currently a Research & Development Software Engineer at OriginalSim Inc. in Montréal, Canada.            JEAN-PIERRE BÉLANGER holds a B. Comp. Sc. from Laval University in Ste-Foy, Canada. Mr. Bélanger has experience as a programmer and a system architect. His expertise includes computer graphics, electrical network simulation, multi-platform development and Object Oriented Analysis and Design. He is currently Software Developer at OriginalSim Inc. in Montréal, Canada.LILY LAM holds a M. Comp. Sc. from McGill University in Montréal, Canada. Ms. Lam has experience in speech recognition expert system, and the development of computer-aided environments for flight procedure design and airspace simulation. She is an accredited Project Management Professional. She is currently the Vice President of Research & Development of OriginalSim Inc. in Montréal, Canada.EMBED Visio.Drawing.4