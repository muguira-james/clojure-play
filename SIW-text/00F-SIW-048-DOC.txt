Experience Federating EADTB with GBRSim to Model Distributed Handover OperationsJames S. WeinerRaytheon Company670 Discovery DriveHuntsville, AL 35806-2802 USA256-971-2353james_s_weiner@res.raytheon.com Kenny ShriderXonTech, Inc.5030 Bradford Drive, Suite 220, Bldg 1Huntsville, AL 35806-1923 USA256-837-9123kenny.shrider@xontech.com Keywords:HLA; EADTB, GBRSim, Radar Handover, GBR-P, NMD, Time Management, VisualizationABSTRACT: The Extended Air Defense Testbed (EADTB) is a large-scale event-driven constructive simulation engine and model development environment focused on military applications, especially suitable for air and missile defense studies and analysis. EADTB is funded by the Ballistic Missile Defense Organization (BMDO/TEM) and is managed by the US Army Space and Missile Defense Command Testbed Product Office. GBRSim is an accredited engineering-level model of the Ground Based Radar Prototype (GBR-P), the interceptor fire control radar in the National Missile Defense (NMD) architecture. At the invitation of the US Army X-Band Radar Program Management Office, EADTB (with its Phase II prototype HLA interface)  was federated with GBRSim to demonstrate sensor handover in an Integrated Flight Test scenario. This paper describes this experience. Both federates were run regulating and constrained to ensure causally correct execution, which also allowed EADTB's runtime controls to become master controls for the federation. A novel use of EADTB's Phase II prototype HLA Interface Unit (HIU) permitted integrated visualization of radar performance within the EADTB Scenario Display for ease of comparison with true target states.IntroductionIn the spring of 1999, the X-Band Radar Program Management Office (XBR PMO, an organization of the National Missile Defense Joint Program Office) invited the Testbed Product Office (an organization of the U.S. Army Space and Missile Defense Command) to assist in the maturation and testing of the XBR HLA capability for its family of simulations, especially that of GBRSim, its Ground Based Radar Prototype (GBR-P) engineering-level simulation. Under this charter, representatives of Raytheon, TRW, XonTech, Inc., and COLSA Corporation created a proof-of-concept federation to highlight threat cueing of the GBR-P by a National Missile Defense (NMD) site battle-management node, modeled by the Extended Air Defense Testbed (EADTB), with a threat supplied by COLSA’s Mission Oriented Analysis Toolset (MOAT) software. This federation, dubbed GEM (for GBRSim-EADTB-MOAT), is the subject of this paper.BackgroundEADTBThe Extended Air Defense Testbed (EADTB) was originally developed in the early 1990s as a tool for simulating air and missile defense with an emphasis on battle management command, control, and communications. EADTB is a constructive, event-driven simulation comprising in excess of two million lines of Ada code. In addition to its simulation engine, it comprises a complete environment for development and reuse of models, and has a full range of built-in visualization and analysis capabilities.In EADTB’s paradigm, all simulated entities are instances of specific system representations (SSRs), each of which includes a Platform component, one or more Thinker components, zero or more Sensor components, and zero or more Communications components. Entity behavior is partly governed by a user-selectable set of hardcoded algorithms associated with component functions. Simulated decision-making is controlled by a user-provided ruleset attached to each Thinker.EADTB gained runtime interoperability in 1995 with the incorporation of a DIS interface. Phase I of migration toward HLA compatibility began in 1998 and was completed with the use of the DIS/HLA gateway. Phase II led to a middleware solution in 1999 with the definition of a basic Simulation Object Model (SOM) and the introduction of a prototype native-language (Ada95) HLA Interface Unit (HIU). Figures 2.1.1a and 2.1.1b summarize the SOM. EMBED Word.Picture.8  Figure  STYLEREF 1 \s 2. SEQ Figure \* ARABIC \s 1 1.1a. Object classes in EADTB SOMFigure  STYLEREF 1 \s 2. SEQ Figure \* ARABIC \s 1 2.1b. Interactions in EADTB SOMFigure 2.1.2 shows the relationship between the simulation engine and these two external interfaces. Both interface units execute as independent Unix processes. Because the HIU was developed as a prototype, much of EADTB’s DIS legacy remains in its internal design. For example, incoming object updates are translated into analogs of Entity State PDUs before being forwarded to the simulation engine. Figure  STYLEREF 1 \s 2.1.2. EADTB DIS and HLA InterfacesAnother aspect of the design is that “ghost” entities must be instanced by the user during scenario preparation, with one ghost for every externally controlled object that will play in the experiment. At the start of execution, these are located at the center of the earth, and each becomes visible only upon receipt of its first location update.A more detailed description of the HLA interface design is given in [1]. GBRSimGBRSim is tailored to specifically model the Ground Based Radar Prototype (GBR-P)GBR-P and the NMD X-Band Radar, the radar systemsdeveloped and/or being developed to provide enhanced ballistic missile defense offor the United States. GBRSim provides fully digital, non real-time,non-realtime, high fidelity, pulse-by-pulse, closed loop simulation of the NMD radar elements GBR-P and NMD X-Band Radars.  these radars. The architecture of GBRSim is designed to assess the performance of the GBR-P and of the proposed XBR designs with respect to meeting NMD requirements. GBRSim is capable of evaluating algorithm tradeoffs for a variety of radar systems. Detailed models for the antenna, transmitter, receiver, signal processor, and data processor allow detailed analysis of scheduling, return handling, discrimination, and kill assessment performance andperformance, as well as Mission Application Program (MAP) functionality.MOATMOAT is a simulation framework designed by COLSA Corporation as a common mission provider to a suite of radar modeling and simulation tools, including GBRSim and the XBR hardware-in-the-loop (HWIL) facility. MOAT’s capabilities are more fully described in [2].XBRFedAt the outset of the GEM project, COLSA and XonTech developers were already well into the process of federating MOAT and GBRSim. The federation, dubbed XBRFed, was the first use of HLA by this team, and its purpose was simply to transfer a pathname from MOAT to GBRSim which directed the latter to a mission dataset. This was achieved in September, 1999. XBRFed was eventually combined with EADTB to form the GEM federation.GEM Objectives and Derived RequirementsGiven the customer’s desire to demonstrate the interoperability of GBRSim and MOAT in a militarily realistic context, the contractors proposed to make use of an existing EADTB scenario that was designed as an unclassified representation of an NMD Integrated Flight Test, conducted on the Kwajalein Missile Range. Since this scenario already contained representations of the NMD elements, including the Site Battle Management Node (SBN) from which the actual GBR-P fire control radar receives its cueing, this approach promised to be quite efficient (and therefore economical). From the point of view of the EADTB scenario designer, the major changes would be to remove the existing internal representations for the GBR-P and the threat objects, and replace these with “ghost” entities whose behavior would be controlled externally by the other federates.The scenario design is depicted in Figure 3.1.Figure  STYLEREF 1 \s 3. SEQ Figure \* ARABIC \s 1 1. GEM Scenario DesignMOAT was tasked to provide threat states to GBRSim and EADTB in the form of external files created offline. Initial consideration was given to having MOAT provide this data to the federation at runtime, but its HLA capabilities at that time were unable to support this role, so its runtime participation was limited to passing a Mission ID to GBRSim before resigning from the federation. This ID allowed GBRSim to properly locate the threat file directory.The following set of requirements were promulgated for GEM:1. MOAT shall provide mission data to GBRSim and EADTB. This shall consist of simulated kinematic data for a threat ICBM flight, including release of reentry vehicle (RV) and penaids. 2. EADTB shall simulate acquisition and tracking by spacebased and uprange groundbased sensors. Sensors shall communicate with each other and with command centers via EADTB-simulated channels.3. An EADTB-simulated Site Battle Management Node (SBN) shall send a GBR Search Cue Command (based on the NMD 852 message [3]) with attached track to GBRSim via the RTI.4. GBRSim shall accept the cue command, and execute the specified search. 5. Upon acquisition and track initiation, GBRSim shall commence transmission of GBR Track Reports (based on the NMD 825 message [3]) to the SBN via the RTI.Prior to this time, the threat files provided by MOAT to GBRSim were in a proprietary format. Since EADTB was already capable of reading ballistic missile threat files in the community-standard Joint National Test Facility (JNTF) TM93 format [4], MOAT was upgraded to produce TM93 files as well.Federation Object ModelAs mentioned earlier, GBRSim and MOAT were still at an early stage in their HLA interface development when this effort began. EADTB was somewhat farther along, and in August, 1999, demonstrated HLA-distributed execution of a military scenario using as FOM both its native SOM and the JWP Trailblazer Build 1 FOM [5]. The proposed GEM scenario called for the GBRSim/EADTB interface to coincide with the real-world communications interface between the GBR-P and SBN. Since the EADTB SOM already included an interaction (Transmit) suitable for simulated tactical messaging, with no counterpart in the GBRSim SOM, the team agreed to use that portion of the EADTB SOM as the GEM FOM. Later, the XBRFed classes were added to the GEM FOM to allow interaction between MOAT and GBRSim prior to commencement of the scenario.The Transmit interaction is derived from the DIS Signal PDU [6], and includes as a parameter a free text buffer of roughly 1400 bytes. This became the principal vehicle for passing tactical messages, including embedded tracks.RTI 1.3v6 was adopted by the team based on its stability and the team’s prior experience with it.Other Technical ConsiderationsCoordinate ConversionAlthough both GBRSim and EADTB make internal use of an earth-centered rotating (ECR, also known as earth-centered, earth-fixed, or ECEF) coordinate frame, GBRSim uses the WGS 84 oblate figure of earth [7], while EADTB uses a spherical representation. This means that two points with identical coordinates in the respective frames would have different altitudes and different lines of sight from a given earth-surface (latitude, longitude) location. In other words, a cue command from the EADTB SBN specifying a certain azimuth and elevation would cause the GBRSim radar to search the wrong point in the sky.When playing in DIS experiments (which use WGS 84 as a standard), EADTB translates between internal and external entity states using Ada-coded spherical/oblate conversion algorithms, which are also available to its HIU for use in HLA federations. Figure 5.1.1 shows how this operates when publishing an entity location, e.g. in an Entity State PDU. The published location has geodetic latitude equal to the entity’s internal, geocentric latitude, and preserves altitude by having a height above the ellipsoid equal to the internal height above the sphere. (Longitude is unchanged.) The inverse mapping is performed upon receipt of a foreign entity location. EADTB also maps internal velocity vectors to the WGS 84 ECR frame for outgoing states, but at present does not do so for incoming states. EMBED Word.Picture.8  Figure  STYLEREF 1 \s 5. SEQ Figure \* ARABIC \s 1 1.1. Mapping from internal (spherical earth) to external (WGS 84) frame.GEM posed a new challenge for EADTB. The cueing message for GBRSim was defined to contain a perceived target state (location and velocity) at a particular time, which meant that these had to be stated with reference to WGS 84. Generation of this message was carried out in the SBN’s Thinker ruleset, which had no access to the compiled conversion routines. Ultimately, the HIU was modified to parse out the state vector components from the Transmit message buffer, apply the conversions, and reinsert the results into the message. A more efficient long-term solution will be to expand the ruleset language’s API to include the conversion routines so that they can be employed during cue generation.Another problem associated with coordinate systems was encountered early in federation integration testing. GBRSim failed to acquire targets despite conversion of the cued state to WGS 84 reference. Examination of the data showed that the TM93 threat file from MOAT had an improperly set bit in a header record that caused EADTB to interpret the recorded true threat states as though given with respect to a spherical frame, and thereby not to apply oblate-to-spherical conversion. The team simply  coordinated this data properly and it was easily corrected.VisualizationEarly in the integration phase, the Raytheon/TRW team decided that demonstration of GEM would be improved by incorporating two additional elements into EADTB’s runtime scenario display: an iconic representation of the GBR-P itself, and the radar’s perception of the threat objects under track. The former was achieved by having GBRSim transmit an additional message at the outset of the game, based on the NMD 805 GBR Registration Report. This message includes the radar’s own latitude and longitude. The HIU was then modified to parse these values out of the message buffer, and from them construct a pseudo-entity state PDU which was then sent to the CMS simulation engine. This caused repositioning of a corresponding ghost GBR-P to the indicated location on EADTB’s gameboard, whereupon its icon became viewable.A set of ghosts representing the true threat objects had already been placed in the scenario; their positions were driven by the scripted state vectors read from the MOAT-supplied TM93 file. An additional set of ghosts was added to represent radar tracks. Another HIU modification caused it to extract the track state vector (position and velocity) every time an 825 GBR Object Report was received, and to route this to a corresponding ghost in CMS.The results of these efforts were quite gratifying. When GBRSim began reporting out, an initial set of spurious tracks were observed on the EADTB display, after which a more stable set was formed (figure 5.2.1). Far from being a simulation anomaly, these showed behavior typical of actual radar performance. The stable tracks had an initial cross-range dispersion substantially greater than the cluster of actual threat objects, but this was seen to decrease as the radar began to filter out the errors (figures 5.2.2a and 5.2.2b).Fig. 5.2.1. Space view after GBR-P acquisition.Fig. 5.2.2a. Early cross-range dispersion of tracks.Fig. 5.2.2b. Late cross-range dispersion after filtering.In preparing for the final live GEM demonstration, it was considered desirable to show concurrent space and plan view presentations of the scenario. Although EADTB is currently limited to driving one workstation display client per CMS process, it was quite easy to add an additional EADTB federate in which all entities were ghosts, effectively causing it to function as a “stealth viewer.” By setting one federate’s display mode to space view and the other’s to plan view, the desired effect was achieved.Another tool, the boresight tool in GBRSimGBRSim Boresight Viewer, provided more direct information about the radar’s perception of the threat. It graphically presented This tool gives the user and those in the audience the GBR-P radar’s perspective (Range , Azimuth, and Elevation).  Additional data depicted on the boresight tool includes individual radar pulses and associated detections. During the exercise, objects updated by detections by theindividual target reports (range, azimuth, and elevation), and additional pulse-level detection data. The presence of both EADTB and GBRSim visualizations gave the audience a more comprehensive GBRSim radar model were reported and depicted on the EADTB stealth viewer.  picture of the radar’s performance throughout the handover and tracking operations.Synchronization and Runtime PerformanceWhen GEM was initially demonstrated on 3 March 2000, the federates were unsynchronized. This led to certain difficulties in event timing, and also detracted from the federation’s fitness for use, although post-run visualization was still able to show some aspects of radar performance and comparison of perception to truth.One result of this deficiency affected the positioning of the icons representing the radar’s perceived targets on EADTB’s scenario display. Since the radar track reports included both position and velocity, EADTB’s display controller propagated the target positions between track updates, but because EADTB ran faster than GBRSim, the icons were advanced downrange faster than in GBRSim’s worldspace. As each track report was received, the icon positions would abruptly jump back to where the radar perceived them to be. This erratic behavior was corrected by disabling propagation by EADTB, and repositioning the icons only upon track update.By the time of the second demonstration (14 April 2000), XonTech developers had provided GBRSim with the calls needed to use RTI Time Management Services, thereby permitting fully synchronized execution. (EADTB had prior capability for regulating and constrained execution.)While reintegrating the federates following the GBRSim upgrade, it was immediately noticed that EADTB’s runtime performance had drastically degraded. Investigation showed that the lookahead interval had been set to 1 msec. Since the GBRSim track reporting interval was 10 sec, this meant that far too much time was being spent waiting for time advance grants. Readjusting the lookahead to 1 sec provided much more satisfactory performance. Overall execution speed was roughly twice as fast as realtime on average, with some variability.An immediate advantage of running GEM synchronized was in allowing the radar’s reporting lag to be graphically shown by the  distance between the “true ghost” and the “perceived ghost” icons—yet another reflection of actual radar performance.An unexpected benefit was that EADTB’s organic execution management controls allowed it to become the master controller for the federation, obviating the need for a separate manager federate. It was not only able to create and destroy the federation, but its runtime GUI allowed users to pause and resume GEM execution at will by starting and stopping its simulation clock. This proved useful during both integration and demonstration.Lessons LearnedSome of the lessons learned from the GEM experience are summarized here: Analyze the timing behavior of all federates to determine an appropriate lookahead interval. Too small a value will degrade performance through excessive timing overhead; too large a value will invite causal anomaly.When the federation is synchronized through the RTI, any federate with runtime user control of its clock can act as master controller.Proper interpretation of external truth data (e.g., coordinate frame) should be confirmed to assure coherency among federates.Avoid spurious oscillation of icon positions in an unsynchronized execution by disabling state propagation by the visualizing federate.EADTB would benefit from a more comprehensive and efficient method for translating between its internal coordinate system and an external oblate-earth (typically WGS 84) frame.The RTI can be invoked from Fortran if Fortran calls C routines, which in turn call C++ routines.Use of stub routines for verification of data exchange through HLA should be the first step of integration testing.  Then incorporatetesting, followed by incorporation of time management into routines as the second step.calls. Testing with full routines can then proceed effectively.ConclusionsThe GEM federation has successfully shown its suitability for future studies of interoperability between radars and BM/C3 architectures. It has shown that GBRSim faithfully exhibits many important radar performance characteristics (spurious tracks, time-varying tracking error, reporting lag), and the value of combining perception and truth data in a single visualization. GEM demonstrates that EADTB, with its powerful capabilities, can be an extremely useful federate for distributed analysis, testing, and validation.These HLA activities have added confidence that simulations designed with different runtime structures and levels of fidelity can interoperate effectively. Furthermore, the success of such demonstrations shows the community that the optimization of M&S reuse through the plug and play concept of a distributed network can work, saving both time and money.A number of potential follow-on studies have been identified that would extend GEM. One would be for EADTB to correlate and fuse the GBR-P tracks with the SBN’s system track file as part of simulating the flyout of the ground-based interceptor (GBI). Another would be to make MOAT a full-fledged federate by serving threat states on-line. A third proposal is to federate EADTB with the GBR HWIL to provide detailed BM/C3 stimulus to the actual radar software.AcknowledgmentsThe authors gratefully acknowledge the financial and technical contributions of a number of individuals from various organizations. First, we would like to thank Mr. George “Moody” Parsons of the USASMDC Testbed Product Office and Ms. Susan Campbell of the NMD XBR PMO whose financial support made this project possible. We also wish to thank Mr. B. J. Hamidi, USASMDC, Dr. M. Leigh Lunsford, Jennifer Rolin, and Mike Pfauth of COLSA, John Shrontz, TRW, Kim Wiedrich, Raytheon, Kathy Lawrence, Michael Martin, and Ron Aruta, XonTech.References[1]	R. Sell, et al: “Extended Air Defense Testbed (EADTB) Migrates Toward High Level Architecture (HLA) Compatibility” Simulation Interoperability Workshop, 00S-SIW-021, March 2000.[2]	M. Lunsford and R. Drake: “Lessons Learned in a Phased-In Approach to the HLA Compliance and Migration of Legacy Simulations” Simulation Interoperability Workshop, 00S-SIW-043, March 2000.[3]	ICD for NMD GBR-P and BMC3, CGG674374, Rev. B, 23 April 1998.[4]	Joint National Test Facility Special Programs Center: Interface Requirements Specification (IRS) for Threat Model 93 (TM93) Version 3.0, SPC98-20, 11 December 1998.[5]	A. Zabek, D. Seidel, L. Feinerman: “Joint Warfighting Program Information Superiority Experiment Trailblazer” Simulation Interoperability Workshop, 98F-SIW-228_v6, 31 July 1998.[6]	IEEE Computer Society: IEEE Standard for Distributed Interactive Simulation—Application Protocols, 1278.1-1995, 26 March 1996.[7]	Defense Mapping Agency: U. S. Department of Defense World Geodetic System 1984, DMA Technical Report TR-8350.2, 2nd edition, 30 September 1987.Author BiographiesJAMES S. WEINER is a Senior Principal Engineer for Raytheon. Over the last seven years he has provided system engineering and analysis for the Extended Air Defense Testbed program, and has helped lead its HLA interface development. Mr. Weiner has previously worked in air defense weapon and sensor systems development, military simulation, and digital image processing. Mr. Weiner has a B. Math. degree from the University of Minnesota and an MS in Computer Science from the University of Southern California.KENNY SHRIDER is a senior engineer at XonTech Inc. Over the past eight years, he has been the technical lead in the development of high fidelity radar simulations and development and testing of performance algorithms. Mr. Shrider has developed both system and element simulations and served as task lead for numerous systems analyses which has lead to a detailed understanding of both interoperability needs at the element level and interface requirements at the system level. This knowledge has been instrumental in the implementation of High Level Architecture into the Ground Based Radar Simulator (GBRSim). Mr. Shrider has supported the development of simulations for the Army including STARACS, Extended Air Defense Simulation (EADSim) and GBRSim. He has a master’sMaster’s degree in Electrical Engineering from University of Alabama in Huntsville.