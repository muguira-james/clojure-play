Terrain Model Abstractions to Support Traffic SimulationsMichael LongtinAdvanced Simulation Center,Lockheed Martin Corporation37 North AvenueBurlington, MA 01803(781) 505-9527mlongtin@lads.is.lmco.comBrent D. KornmanAdvanced Simulation Center,Lockheed Martin Corporation5301 Robin Hood RoadNorfolk, VA 23513(757) 858-1764bkornman@lads.is.lmco.comKeywords:SNE, Terrain ModelsABSTRACT: Since the advent of simulation, the requirements of the representation of the physical environment have largely been driven by the needs of the simulation. In the past, the representation of the Synthetic Natural Environment (SNE) has typically included physical terrain features such as trees, buildings, roads, and rivers. The fundamental services provided by SNE libraries have usually consisted of elevation lookups, intervisibility calculations, and soil type lookups. In addition to physical characteristics of the environment, terrain databases have also included abstract information that is useful to the simulation. One example of this is political boundaries, forest extents, and road network topology.This set of capabilities has proved to be sufficient for many of the military simulations of the past. However, now that applications for simulations are expanding beyond the military domain, requirements for the representation of the environment are changing. Lockheed Martin's Advanced Simulation Center is developing a driver trainer simulator for commercial applications. This program simulates civilian traffic in urban areas and requires the representation of roads with multiple lanes, complex intersections, traffic lights, pedestrian walkways, stop signs, yield signs, turn lanes, and bus stops. The program also requires the abstract representation of traffic rules such as speed limits, directionality, passing rules, turning rules, stopping, yielding, and physically possible but illegal maneuvers. These requirements call for an enhancement of the SNE software in two major categories: the physical representation of new terrain features, and the abstract representation of traffic rules.This paper describes the enhancements that have been made to the Compact Terrain Database (CTDB) as well as the development of a new database called the slots database in order to represent features in a complex urban environment.IntroductionThis paper first describes the extensions to the compact terrain database (CTDB) storage representation that were designed in order to accommodate the new types of features required by the Intelligent Traffic Model (ITM) traffic simulation used in Lockheed Martinâ€™s driver trainer simulation systems. Next, the auxiliary road network database that is used by the traffic simulation for path planning, called the slots database, is described. Finally, future work and ideas for possible enhancements are described.Extensions to the CTDB Storage FormatThe representation of the physical environment in the traffic simulation is based on the compact terrain database (CTDB) format, used for many years in SAF simulations. In order to represent the additional features required by the traffic simulation, the storage format of CTDB needed to be expanded. This section begins with an overview of the preexisting CTDB format, and then describes the extensions that have been made in order to support the additional traffic-related features.Overview of the Original CTDB FormatThe features represented in CTDB can be broken into three categories: physical features, abstract features, and linear topology.Physical FeaturesPhysical features are stored on a patch-by-patch basis. A patch is a square piece of terrain (usually 500 m X 500 m). Abstract features are stored in a quadtree. Therefore, abstract features can be arbitrarily large, while physical features are broken up at patch boundaries.When considering how to represent a new feature in CTDB, one must decide if it should be represented as a physical feature, an abstract feature, or both.In general, a feature should be encoded as a physical feature if it has an effect on intervisibility, or if it represents a change in soil type of the underlying terrain polygons (such as roads and rivers).Prior to the ITM extensions, CTDB supported the representation of the following physical features: microterrain, buildings, trees, roads, and rivers.MicroterrainMicroterrain refers to a triangulated irregular network (TIN) of polygons that collectively describe the terrain skin. The triangles that comprise a TIN typically have many shared edges. In fact, all edges except those that make up the perimeter of the described area are shared by two triangles. All other edges along the perimeter are only part of one triangle each. In the interest of compact storage, it is desirable to minimize storing any given edge more than once. The microterrain encoding algorithm attempts to find an encoding scheme that minimizes the number of duplicated edges.In addition to representing the terrain surface, microterrain is used to represent multiple-elevation terrain such as bridges and causeways. Microterrain that represents bridge decks is tagged with a multi-level attribute, providing the elevation lookup algorithm with a mechanism to determine whether there are multiple polygons that include a given query point.BuildingsBuildings are described simply by the three-dimensional vertices that occur along the roofline of the structure. Building interiors (i.e. walls, floors, doors, and stairways) are not represented. It is not necessary to describe the perimeter of the building along the ground because it is assumed that all exterior walls extend from the roofline to the ground.Trees and TreelinesBoth the trunk and foliage of trees are represented by CTDB. The trunk height, trunk radius, foliage height, and foliage radius are all included in the tree model. The height of the tree itself is not explicitly stored; only the absolute Z value of the top of the tree is stored. The height of the tree is obtained by computing the elevation of the treetop and the elevation of the ground at the base of the tree, obtained by a separate elevation query.Roads and RiversRoads and rivers are represented as laid linear features. The two-dimensional vertices that describe the linear segments of the road or river are stored in the CTDB, but their heights are not explicitly stored; they rest on the terrain surface, therefore the heights are obtained from the terrain skin polygons. The soil type and width are also stored with each linear feature.Abstract FeaturesFeatures that do not affect intervisibility or represent a soil-type change, but need to have their presence acknowledged in the database are stored as abstract features. Examples of these are political boundaries, labels, and pipelines.Another purpose of abstract features is to store abstractions that would be computationally expensive to derive from physical features. For example, lake footprints are stored as abstract features, although this information can be derived from the terrain polygon soil types. Since this information is stored as a two-dimensional footprint in the abstract features, the tactical map drawing routines can obtain this directly from the abstract features instead of computing it from the terrain skin. If the map drawing routines have to draw a filled polygon for each terrain polygon, it would take lots of CPU to draw the tactical map. Therefore, these footprints are computed a priori and stored in the abstract features for quick, convenient retrieval.Linear TopologyFinally, the linear topology organizes the road features so that they can be accessed as nodes and edges. Nodes occur at road intersections, and edges link the nodes together. By using the linear topology, the software can easily determine which linear features comprise a contiguous path. This is very useful for planning paths within road networks. It also speeds up the map drawing routines considerably because the roads can be drawn on a per-edge basis instead of a per-feature basis.CTDB Extensions to Support the ITM REF _Ref502512801 \h Table 1 shows new features that have been added to the original CTDB in order to support the ITM, along with the section of the CTDB file in which each is stored.The determination of the proper section of the CTDB file in which to store a feature is based on which software components require access to the feature and how the software utilizes the feature.Table  SEQ Table \* ARABIC 1: Added CTDB FeaturesFeatureCategoryStop signPhysical feature (tree),Linear topologyYield signPhysical feature (tree),Linear topologyTraffic lightPhysical feature (tree),Linear topologyCrosswalkPhysical feature (linear),Linear topologyStreet lightPhysical feature (tree)Electrical polePhysical feature (tree)Fire hydrantPhysical feature (tree)Support columnPhysical feature (tree)Pedestrian walkwayAbstract featureElevated buildingAbstract featureSpeed limitLinear topologyDirectionalityLinear topologyPassing rulesLinear topologyTurning rulesLinear topologyTraffic light informationLinear topologyStop Signs, Yield Signs, and Traffic LightsBecause vehicles and pedestrians need to detect collisions with them, stop signs, yield signs, and traffic lights are instantiated as physical features. Because they are modeled as physical features, they also affect intervisibility, and can easily be accessed by the map drawing software.These features also exist in the linear topology because the road route planning software needs to be able to determine whether a vehicle is supposed to stop or yield at the end of each linear path.Pedestrian WalkwaysPedestrian walkways are elevated walkways that pedestrians use to cross the street. The ITM statement of work does not require the simulation of pedestrians using these walkways, nor does it require that these walkways affect intervisibility or elevation. The only requirement is that they be displayed on the tactical map. Because they need to be displayed, walkways need to exist in the CTDB, but because they don't affect intervisibility or elevation, they don't need to be instantiated as physical features. It is for this reason that they are instantiated as abstract features.This reduces the number of physical features that the query and feature extraction algorithms have to process.Elevated BuildingsOne of the terrain databases being compiled for use with the ITM software features buildings that have portions that are elevated above the street. There's a requirement to display these as buildings on the tactical map display, but no requirement to have them affect intervisibility. The portions of buildings that are suspended above the road cannot be encoded as buildings because if they were, they would interfere with vehicle movement, since all buildings are added to vehicles' obstacle maps for movement planning. To mitigate this problem, a new type of abstract feature was created to represent elevated buildings. The map drawing software draws them as regular buildings so that the user interprets them as such, but the movement planning software essentially ignores them since they are not physical features. Therefore, cars can drive underneath them without a problem.Overloading the Tree RepresentationWhen adding a new type of physical feature to the CTDB representation, lots of supporting code needs to be developed. For example, the manner in which the feature blocks line of sight needs to be programmed into the intervisibility algorithm. How the feature affects elevation and soil type queries must be added to the lookup algorithms.Of course, in addition to the supporting code, the actual storage representation of the new feature needs to be added to the CTDB. First, the characteristics of the feature that are important to the simulation need to be determined, then the structures that encode this information need to be created.Analysis of the new features being added to CTDB reveals very close similarities between many of the features. For example, stop signs, yield signs, and traffic lights are very similar in that they are all tall and thin and have a wider component toward the top, much like trees. Since the structures that encode all of these, as well as the intervisibility algorithms, would look virtually identical, it seems appropriate to use a common algorithm and storage representation scheme for all of these features. Therefore, instead of creating new structures to represent each of these features, the tree representation was overloaded simply by adding a type attribute. The interpretation of trunk radius attribute varies depending on the type code. For stop signs, it represents the radius of the sign post. For traffic lights, it represents the radius of the light post. Similarly, the foliage width represents the width of the sign itself if the feature is a stop sign, or the width of the foliage if the feature is a tree.Overloading common representations in this way allows the storage format to be more compact and the code to be more efficient than it otherwise would be. It also reduces the probability of bugs by reusing code that has been heavily tested and has stood the test of time.Traffic Rules: Enhancements to the Linear TopologyPrior to the ITM enhancements, the linear topology did not store any traffic-related attributes; it only referenced the physical features that were part of a common topological edge. This was very useful to the road route planner, which uses an A* search to find the shortest path between two points in a road network.Because of the new requirements for the ITM, road route planning became much more complicated than it previously was. Cars have to know where to stop, when to yield, which directions are legal for travel, which turns are legal, and whether itâ€™s legal to pass. Since the linear topology was the sole source of information for the old road route planner, it seemed appropriate to continue this convention, only now, the linear topology section of the CTDB needs to store a lot more information than just topology.Therefore, the structures that represent topological edges were augmented with numerous attribution flags:Edge AttributeMeaningLeft turnLeft turn allowed at end of edgeRight turnRight turn allowed at end of edgeLightTraffic light at end of edgeLight classClass of light at end of edge (0 â€“ 3)Light faceFace of light at end of edge (0 â€“ 7)Stop signStop sign at end of edgeYield signYield sign at end of edgeU turnU turn allowed at end of edgeBidirectEdge allows bi-directional trafficTunnelEdge follows a tunnelBridgeEdge follows a bridgeCrosswalkEdge is a crosswalkLane leftEdge has an adjacent lane to its leftLane rightEdge has an adjacent lane to its rightPass leftVehicles are allowed to pass on the leftPass rightVehicles are allowed to pass on the rightSpeed limitSpeed limit for this edge (0 â€“ 256 m/s)DirectionalityDirectionality for each edge is implicitly stored via the order of its vertices. Traffic is only allowed to travel in the direction in which the vertices are stored, unless the bidirect attribute is set, in which case traffic is allowed to travel in both directions.Multiple LanesEach lane of a multiple-lane road is represented as a separate linear feature. Adjacency attributes in the edge structure are used to determine whether changing lanes is appropriate.Speed LimitsThe speed limit for a particular edge is stored in its edge attributes. Edges are broken up where speed limit changes occur, and nodes are created at the transition points.Turning RulesWhether or not a left- or right-hand turn is legal at the termination of an edge is stored in its attributes.Traffic LightsTraffic lights pose an interesting dilemma: Which body of software should be responsible for storing the state of traffic lights? Is it appropriate to store the light state in the terrain database? The ITM developers made the determination that it is inappropriate for the terrain database software to store the state of traffic lights; this is more of a behavioral phenomenon. However, it is appropriate to store the traffic lights themselves in the terrain database because they are part of the physical environment. Therefore, a separate body of software is responsible for simulating traffic lights and storing their state.There may potentially be hundreds of traffic lights in any given database. Should the traffic light simulation software store the state of each one? This would be wasteful of memory because of the number of traffic lights. It would also be wasteful of processing cycles and network bandwidth, since the state of each light would need to be individually simulated and communicated. In order to mitigate this problem, traffic lights are divided into classes. All lights of a given class share a common state. Therefore, it only becomes necessary to simulate a few classes of lights instead of hundreds or even thousands of individual lights. The CTDB stores the class that each light belongs to in the edge attributes. The behavioral models can use the light class information obtained from the CTDB together with the light state information obtained from the light simulation software in order to determine what to do when a vehicle arrives at a traffic light.In addition to light class, it is necessary to store which face of a traffic light applies to the end of a given edge. This information is also stored with the edge attributes.Required General EnhancementsIn order to accommodate the higher feature density and rich attribution of terrain databases used with the ITM, the CTDB storage representation and algorithms had to be enhanced.Microterrain Encoding AlgorithmBecause the road curvatures are extremely smooth and the finest details such as curbs are represented, the source data for terrain databases used with the ITM feature incredibly dense TINs; so dense, that the pre-existing microterrain encoding algorithm needed to be enhanced in order to accommodate the increased complexity of the microterrain. If the encoding algorithm fails to find an encoding scheme that fits within the 8-bit offsets (chosen for compact storage) for a given patch, the patch is subdivided into columns. An encoding scheme is then computed for all the polygons within each column. If that fails, each column is further subdivided into rows. The columns and rows are subdivided again until the algorithm successfully encodes all of the polygons.Feature Offset FieldDue to the extremely high feature density, the number of features per patch in a typical ITM database is very high. In order to accommodate this, the bit field that represents the offset to the beginning of the data for a patch was increased from 13 bits to 16 bits.Feature Extraction AlgorithmThe vastly increased density of the TINs greatly compromised the computational efficiency of the feature extraction algorithms simply because these algorithms now have many more features to search through while extracting the desired features. ITM algorithms needing to access linear features such as roads were especially affected because roads are stored after all other features in each patch. Therefore, ITM algorithms that operate on roads have to iterate through all of the TINs before finally accessing the roads. In order to alleviate this inefficiency, feature offset indices were added.At initialization time, the features of each patch are traversed and the offsets for each feature type from the beginning of the patch data are cached for later use by the feature extraction algorithms. Hence, if a given body of software asks for the roads, the road extraction algorithm can "fast forward" to the roads without having to iterate through all of the microterrain and buildings first. This enhancement has made a significant difference in the runtime efficiency of the ITM algorithms that operate on roads.Further Optimizations: Slots and Slot PlansWhen we look at vehicle behavior and dynamics, it becomes immediately obvious that there will be a large number of queries for road-related information, from location and elevation for dynamic placement of a vehicle, to information describing the speed, adjacent location, and controls (e.g., stop signs, traffic lights) related to the roads on which a vehicle is traveling. In addition, when vehicles attempt to avoid other vehicles, the amount of CTDB queries can easily overwhelm the systemâ€™s ability to provide information in time. Therefore, the road information was collected into a separate database, called the slots database. Each vehicle traveling on slots has a slot plan built for it, describing the series of slots on which the vehicle will drive. These are described below.SlotsSimply put, slots are CTDB road network edges. Each slot may have multiple vertex pairs. Thus, a slot is not necessarily a straight road segment, but instead is composed of one or more straight road segments. These types of slots are called straight slots.Straight slots are not necessarily straight. Straight slots may in fact be long curving areas of a road. In fact, a curve is represented as a slot with numerous vertices that connect slot segments with angles other than 90 degrees.Straight slots always connect to each other only at their ends (just as edges do). Thus, (almost) all connection information applies to the ends of slots. Since almost all behaviors care only about vehicles driving forward along a slot, most connection information within the slots database applies to the end (not the beginning) of the slot. For more twisted maneuvers, where vehicles need to drive in reverse, an indexing scheme was created to allow incoming slots to be identified more easily than exhaustively searching the entire slots database.Another type of slot provides smoother transitions from one road to another. These slots, called arc slots, are circular sub arcs that allow the vehicle dynamics of ITM to drive a vehicle more realistically around a corner or sharp bend in the road. This was particularly important when the direction of the vehicle was determined strictly by the direction of the road at the center of the vehicle. The arc slots are created during ITM initialization as part of the slots database creation. Slots that have valid connections and whose transition angle is over a threshold have arc slots constructed between them.  REF _Ref502745204 \h Figure 1 shows an example of an arc slot.Figure  SEQ Figure \* ARABIC 1: Arc SlotArc slots have the curious characteristic of connecting to slots at positions other than the beginning or end of a slot. All straight slots connect to each other at their beginning and end points. However, arc slots cannot connect at these points and provide the turn smoothing function. It is left to the slot plan generation software to construct a slot plan that includes arc slots, and adjust the total plan distance to compensate for the arc distances.The slot database is a fixed-sized array of slot information. Each slot has a slot id, which is an index into the array. Thus, access is direct for slot information. The only CTDB access that is necessary is to determine what slots are nearby when attempting to determine where a vehicle is when it is not driving a slot plan. Since each slot contains the edge attributes (described in section  REF _Ref502739197 \w \h 2.2.5  REF _Ref502739197 \p \h above), all attributes for the slot are directly accessible as well. This greatly reduces the access time for such information when planning a route, deciding whether to pass another vehicle, or whether a vehicle is on a potential collision path with another vehicle.One of the optimizations that the slots database provides is the ability to track a vehicle by its position along a slot (i.e., the distance along the slot from the beginning of the slot) instead of a point on the terrain. This allows for all position and distance calculations to be one-dimensional.Access functions have been written to easily obtain information from the slots database, such as a list of slots that are adjacent to a particular slot and (recursively) all slots adjacent to those, convert a distance along a slot to an X,Y point, determine how far a point on the terrain is from a particular slot (and the distance of the closest point on the slot to the given point), the list of slots a particular slot is connected to, the list of slots connected to the beginning of a slot, etc. These functions greatly reduce the amount of computation and search necessary by the behavioral components of ITM, allowing for a rich array of behaviors within the time constraints allowed for smooth processing.Slot PlansWhen a vehicle has a plan to drive a series of slots, the ITM creates a slot plan for the vehicle. This slot plan is a series of slots, start and stop points for each slot in the list, and the total distance of the slot plan. Thus, not only is a vehicle tracked by the distance from the beginning of the slot it is on, it is also tracked by the distance from the beginning of the slot plan it is on. This allows for easy determination of the path the vehicle will travel in the near future (providing a way to determine potential collision paths), and the vehicleâ€™s position at any point in time.Access functions for slot plans are provided, including the construction of a slot plan from either an edge-based route or an array of slots (including the inclusion of arc slots in the slots plan), index into the plan based on a plan distance, an array of slots extending either forward or backward from a plan distance, and other various indexing, plan comparison, and plan merging and modification functions.As mentioned in Section  REF _Ref502771490 \w \p \h 3.1 above, slot plan generation must include arc slots. This is easily accomplished by determining whether an arc connects one straight slot to another in the plan, then inserting the arc slot into the plan at the appropriate position. Slot beginning and end points are adjusted for where arc slots connect into straight slots (so that the vehicle does not drive past the arc slot), and the total plan length is adjusted accordingly. Slots and slot plans allow for a very simplistic but realistic vehicle dynamics to be implemented. Vehicle position and direction are determined based on the vehicleâ€™s position on the slot or slot plan (a one-dimensional computation). Vehicles drive a slot plan, and only have to worry about avoiding each other; physical obstacle avoidance is, by definition, not necessary. This greatly simplifies the short term planning necessary for each vehicle. In addition, since vehicles tend to drive on slots (even vehicles not following a slot plan, e.g., manned simulators), it is much easier to detect a certain amount of intentionality about where a vehicle is going with a high degree of confidence. This makes vehicle avoidance much easier.To allow for maneuvers such as changing lanes, pulling off to the side of the road, and motorcycles driving between lanes of cars and trucks, an ability to drive a slot plan while being laterally offset from it has been added to slot plans. An offset plan is a way to maneuver a vehicle a fixed lateral distance away from a slot. Offset plans have a beginning (or start ramp) where the vehicle gradually adjusts direction and lateral offset from the middle of the slot to the offset distance specified, a middle where vehicles travel parallel but offset from the slot they are supposed to be one, and an end (or end ramp) where vehicles gradually return to the middle of the slot on the slot plan. Offset plans also allow vehicles to be maneuvered onto the beginning of a plan by supplying only the end ramp portion of the offset plan.Future WorkBased on the results of the first version of ITM, some enhancements to the enriched terrain attribution are currently being studied. Two such enhancements are described below.IntersectionsAs mentioned in Section  REF _Ref502771490 \w \p \h 3.1 above, slots connect to other slots at their beginning and end points. This is an appropriate design decision for most areas of the terrain. However, intersections cause certain problems, as there are a large number of slots crossing each other, thus forcing the terrain database designer to create a large number of very short edges inside an intersection. Further, the construction of arc slots currently employed creates certain anomalies that should be avoided, such as the inability of vehicles in opposing left hand turn lanes to turn simultaneously without collision. Vehicles turning inside intersections can sometimes seem unnatural, as the vehicles enter straight into the intersection and only begin their turn when they are deep into the intersection, instead of executing a more gradual turn starting near the edge of the intersection.The addition of a new CTDB feature called an intersection is being considered. An intersection would represent a hunk of asphalt: an area within which there is a merging of edges. It would be a polygon specifying the physical location of the intersection, along with the edges that enter and leave the intersection and which incoming edges connect to which outgoing edges. Connection slots would be built within an intersection, connecting the slots/edges entering the intersection with slots/edges leaving the intersections. Arc slots would be built such that they would not overlap, allowing simultaneous opposing left turns.An alternative to creating slots inside intersections is to allow vehicles to create interior splines connecting slots on their plan. This could provide a more natural (and somewhat chaotic) behavior as vehicles create their own paths through intersections.RoadwaysExtending the idea of spline plan construction and the hunk of asphalt idea to roads, we are also considering the idea of roadways. Roadways would be a collection of similar direction adjacent slots. Slot plans would specify roadways instead of specific slots, allowing more flexibility for the ITM itself to identify the specific lane a vehicle would travel, based on current traffic conditions. Dynamic spline construction would manage passing, lane changes, and vehicle avoidance in a more natural way than can be achieved with the current implementation of slot plans. Even without dynamic spline plan construction, roadways would provide an easier and more natural way for the ITM scenario developer to create plans for vehicles, and would simplify processing necessary for managing lane changes and passing. It would also allow for expanded passing capabilities, as multilane passing (i.e., changing more than one lane) could be implemented.ConclusionThrough careful selection of feature representations based on how they are utilized by the simulation and through overloading feature storage representations, the CTDB format was cleanly extended, with a design emphasis on runtime computational efficiency, to support the requirements of the traffic simulation without having to extend the elevation lookup or intervisibility algorithms.Abstracting the representation of travel lanes into the slots database has greatly simplified path planning by the ITM, turning a two-spatial dimensional problem into a one-spatial dimensional problem. The generation of this database at initialization time is quick, transparent to the user, and keeps the size of the CTDB reasonable.Author BiographiesMichael Longtin is a software engineer at Lockheed Martin Advanced Simulation Center in Burlington, MA. Michael has worked on numerous projects involving terrain reasoning, route planning, movement, Stingray, and many behaviors including ground vehicle tactics, RWA behaviors, and smoke-related behaviors. He is also involved in the Dynamic Terrain and Objects (DTO) development, and extended ModSAF's terrain database representation to support additional DTO features. He has also done lots of work in the field of route planning, having developed the concealed route planner in ModSAF, and making significant enhancements to the high-level cross-country route planner as well as the road network route planner in ModSAF.Brent D. Kornman is a software engineer with Lockheed Martinâ€™s Advanced Simulation Centerâ€™s Norfolk, Virginia office. He is currently the lead engineer on the ITM project. He has worked on other simulation (e.g., CCTT) and artificial intelligence-related projects, including being one of the architects of IBMâ€™s expert system development system TIRS.  Note that there is a one to one correspondence between slots and edges. Currently the ITM uses two points located at the approximate location of the vehicleâ€™s front and rear axels to determine the directionality of the vehicle as it drives along a slot. For shorter vehicles, arc slots still provide important turn realism.Arc SlotStraight SlotStraight Slot