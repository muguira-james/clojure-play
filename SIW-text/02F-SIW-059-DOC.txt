Joint Virtual Battlespace (JVB) - Representing Network Centric Warfare with New and Legacy SimulationsRobert S. AlexanderScience Applications International Corporation1100 N. Glebe Rd.Suite 1100Arlington, VA 22201703-907-2500ralexander@sito.saic.comKeywords:JVB, Distributed Simulation, HLA, Network Centric Warfare, Net Fires, Future Combat System, Objective ForceABSTRACT:  Joint Virtual Battlespace (JVB) is a distributed simulation environment sponsored by the U.S. Army which is bringing legacy and developmental simulations together to represent future combat operations in support of SMART (Simulation & Modeling for Acquisition, Requirements and Training) analysis.  Pivotal to the Army’s emerging doctrine is the concept of Network Centric Warfare, but traditional simulations are often ill-equipped to model this concept.  Legacy simulations are not able to represent the complex and rapidly reconfigurable network of information flow envisioned by developers of Army doctrine, nor are they able to address the conflicting requirements of high-fidelity communications and platform-level behavioral representation, and of theater-wide scope usually only available in aggregate-level simulations. JVB is attacking these problems by federating applicable legacy simulations in a distributed, service-oriented simulation environment, modifying their internal representations where possible, and bridging the remaining gaps in representation with a set of developmental models loosely called “The C3 Grid”.  Eagle and OTB form the core of JVB’s legacy simulations.  Extensive modifications have been made to enhance behavioral models of units and platforms.  The Grid provides (along with many other functions), a dynamically reconfigurable, multidimensional grid of reporting, orders, and information flows.  For example, fire missions (direct or indirect-fires) will not always come from the same command node.  The C3 Grid provides the decision logic as well as the information topology for such orders. This paper discusses the approaches JVB is using to represent Network Centric Warfare using legacy and developmental simulations in a distributed, service-oriented environment. It addresses the problems of enhancing legacy models to represent network centric warfare, of linking entity-level and aggregate-level models, and of representing information flows in a high-fidelity, dynamically reconfigurable manner.1. IntroductionThe United States Military is deliberately transforming itself to adapt to changing world conditions by leveraging its technology advantage.  Transformation for the Army has meant an emphasis on a lighter, more agile, more deployable, and more situationally aware force. Future Combat System (FCS) is the centerpiece of this “Objective Force”, and Network Centric Warfare (NCW) is the emerging war-fighting doctrine.  NCW treats shooters, sensors, and command nodes’ communications topologies more like the internet than like an organizational wiring diagram, where situation awareness is distributed, and where control of resources is not necessarily hierarchical. The Army’s analytic community is working hard to assess alternative designs and methods of employment for FCS in the context of the Objective Force.  But since these approaches to warfare are new, it is not surprising that the traditional tools used to assess concepts and weapon systems often lack the required representational mechanisms.  Legacy simulations are not able to represent the complex and rapidly reconfigurable network of information flow envisioned by developers of Army doctrine.  Additionally, FCS in the context of Objective Force using NCW is a system of systems, while traditional simulations have usually been designed to study a specific niche of warfare.  For example, some force-on-force models are good at representing combat operations of large numbers of forces, but are not designed to represent individual platforms with their subsystems.  On the other hand, there are many force-on-force models that represent individual platforms well, but have great difficulties capturing the entire scope of a campaign.  And while many models are designed to represent force-on-force attrition, few treat configurable command and control topologies with the fidelity required to assess NCW.In order to provide Army and Department of Defense decision-makers with useful answers about FCS, Objective Force, and NCW, the Army’s modeling and simulation tool set needs enhancing.   A project to fill some of these analysis gaps is Joint Virtual Battlespace (JVB), a federation of legacy and developmental models and simulations intended to support SMART (Simulation & Modeling for Acquisition, Requirements and Training) analysis of Future Combat System in the context of Objective Force and Network Centric Warfare.This paper discusses the approaches JVB is using to represent Network Centric Warfare using legacy and developmental simulations in a distributed, service-oriented environment. It addresses the problems of enhancing legacy models to represent network centric warfare, of linking entity-level and aggregate-level models, and of representing information flows in a high-fidelity, dynamically reconfigurable manner.  After a brief overview of JVB from a programmatic perspective, the paper will answer five important questions: what are we modeling, what are the right legacy models and tools, how do we get them to collaborate, how do we synchronize their representations, and how do we fill in the representational gaps? This paper is the product of evolutionary concept and design work originally conceived by several individuals in the government and commercial sectors, enhanced by the JVB design team, and implemented by the JVB software development team.  Many of the concepts discussed herein have been presented in various forums, including briefings presented by JPSD personnel to Objective Force Task Force and others in government [1], briefings presented on behalf of JPSD by contractor personnel [2], and presentations at various professional symposia [3].  The figures included herein are entirely reused from briefings by Russ Richardson (Object Sciences, Inc.), Rich Briggs (Virtual Technology Corporation) and Major Rick Schwarz (JPSD).2. The Joint Virtual Battlespace (JVB) Program.Joint Virtual Battlespace (JVB) was begun in 2001 at the direction of the Assistant Secretary of the Army for Acquisition, Logistics and Technology in cooperation with the Army Model and Simulation Office (AMSO) and the Objective Force Task Force.  The program is under the technical direction of Joint Precision Strike Demonstration (JPSD), an organization with substantial experience in representing new concepts in combat operations using distributed simulations.  JVB is being developed as a Simulation-Based Acquisition set of tools under the SMART (Simulation & Modeling for Acquisition, Requirements and Training) paradigm.  The management approach is to bring together a world-class team of experts who will integrate the best available tools, tailoring the resulting federation to address critical FCS issues.The general goals for JVB are to produce a flexible, robust toolbox for evaluation of concepts, technologies, and proposals, to allow for modeling digital terrain, environmental effects, and physical processes at a high level of fidelity, to provide for data collection to support analysis and system trades, to model C4ISR processes with live, constructive, and virtual systems, and to support end-to-end experiments at entity-level resolution. 3. What Are We Modeling - The Problem Domain.The future success of NCW is critically dependant on technologies covered by the acronym C4ISR (Command, Control, Communications, Computers, Intelligence, Surveillance, and Reconnaissance).  No longer will units operate in a hierarchical manner, communicating reports to a single higher staff and commander, and receiving orders from the same higher headquarters.  A direct-fire system in a platoon far forward may be controlled for maneuver (as in the past) by his platoon leader, report logistics status automatically and digitally over a network which is monitored by many support organizations, receive attack orders for its direct-fire weapon from any of several C2 “nodes”, some of whom may have authority to issue such an order, and some of whom only have authority to request fires, and report enemy spot reports directly up several echelons and to a parallel intelligence analysis “node”.One particular thread which JVB must be able to represent well is the sensor-to-shooter chain.  More precisely, this chain involves aggregate-level units that have high-level mission goals directing platforms with physics-based representations to maneuver, gather information, report, and possibly attack targets.  Platforms must be characterized by appropriate observable signatures, and those signatures must be propagated through the atmosphere unless blocked by intervening terrain, with received power of each signal being reported to each sensor that is looking in the correct direction.  Sensors acquire or fail to acquire each received signal according to their internal physics, reports are generated and sent to appropriate intelligence, command, and fire support nodes.  Analysis and decision-making takes place within these nodes, perhaps resulting in maneuver orders, attack orders, sensor retasking, or simply updates of the “Common Operating Picture” (COP).  These orders and information are received and used by aggregate unit headquarters and/or individual platforms.  Figure 1 shows this thread. EMBED PowerPoint.Slide.8  Figure 1 – Sensor-Shooter ThreadThose familiar with available models in these areas will recognize that this thread spans many traditional arenas of analysis.  There is the arena of campaign- or operational-level force effectiveness for which aggregate-level force-on-force models can answer most of the questions.  There is the arena of tactical activity where platform positioning, behavior, and physical characteristics are critical, for which Semi-Automated Forces (SAF) models and other entity-level models are used.  When we enter the arena of signal propagation loss and sensor detection, an entirely different array of models and simulations, often at the engineering level of detail, come into play.  The intelligence analysis of such information incorporates a different class of models with its emphasis on security and compartmentalization of information to parallel its real-world counterparts.  Finally, the use of the resulting intelligence requires models that employ reasoning algorithms developed in artificial intelligence research.  It is clear that no single model is capable of adequately representing the entire span of domain behaviors listed above (although many models represent the entire thread with low-fidelity sub-models filling in the gaps in areas not of direct interest to the proponent community).  In fact, the author knows of no existing federation of models that does so.Other threads which are central to NCW are just as complicated, with as many cross-discipline jumps required.  For example, the maneuver chain describes how intelligence and mission information is used to deduce immediate tasks for subordinates along with instructions about how to synchronize those tasks, and how this process happens recursively at each subordinate headquarters down to the individual platform, how tasking is propagated, how individual systems carry out their tasks, and how status information is propagated to those who need to know it.  Similarly, there are intelligence and fire support chains among others with their own complexities.4. What are the right legacy models and tools?To address the needs of Army decision-makers, then, there is a need for a specific set of modeling capabilities.  From each arena in the problem domain, a candidate set of models was chosen.  What are the requirements that drive this decision?  The basic requirement is that a legacy model must bring to the table an acceptable representation of its arena.  It can be a difficult process to determine the acceptability of each model.  Not many models with the richness of representation required have been fully and formally verified and validated.  Yet a variety of non-V&V’ed models are nonetheless accredited by study sponsors and used to provide “acceptable” support for analysis.  In the context of distributed simulation, only part of the functionality implemented in each model will normally be used by the federation.  This allows federation designers to distribute responsibilities among federates according to which functions are best represented by each.  But there are additional non-functional requirements that contribute to the selection process.  Since by design each federate will be called upon to represent only part of the domain, it becomes essential for cost and schedule reasons that selected models have a modular design.  Only with a modular design will model developers be able to modify the code quickly enough to enable divesting or enhancing functionality.Of course, a simulation which is part of a distributed simulation must have an interface to the distribution infrastructure.  JVB is using the High-Level Architecture to provide its protocols and run-time infrastructure.  Participating in an HLA federation involves providing an interface to HLA’s run-time infrastructure (RTI), which involves implementing service functions as defined by HLA.  This process is not overwhelming for a hitherto non-HLA-compliant simulation, but of course a simulation with an existing HLA interface will be preferred over one without an interface.Finally, although many in the software development community decry this type of requirement, it is a simple truth that each federate must have some degree of bureaucratic support structure.  Thus a less-well-established model will likely be accepted into a federation such as JVB only if it provides a critical service not available elsewhere.  In fact, this notion that a model often wins a place in a federation because its proponent agency pushes hard enough is not entirely a bad thing. A military agency which has developed and used a model certainly has a solid base of personnel with expertise in the arena that the model represents.  Having such an agency as a participating member of a federation team can only enhance the federation’s access to subject-matter experts, certified data, and official positions about scenarios, tactics to study, and other issues, not to speak of the credibility it brings.  In the case of JVB, a core set of federates has been integrated into the federation.  Legacy simulations, models, and tools used in various instances of JVB (and its precursor, Aerial Common Sensor (ACS)  Testbed), include Eagle, OneSAF Testbed (OTB), Umbra, TIREM, SEAMLSS, hlaResults, and hlaControl,.  A number of additional federates have been developed to fill in representational gasp, but this list represents the legacy models used so far.5. How do we get the models to collaborate?For models to collaborate, a distribution infrastructure is needed.  JVB is built on High-Level Architecture (HLA), using the HLA Run-Time Infrastructure (RTI).  For models which do not have an HLA interface, it is fairly straightforward to create one.  But each federation has its own Federation Object Model (FOM), and substantial effort is required to assign responsibilities to federates, design data exchanges, implement, and test.  One of the greatest advantages of HLA, the flexibility of its data exchange construct, comes at the cost of great coordination. On JVB, FOM design and development is given substantial attention.  The FOM has been carefully designed as an evolution from previous FOMs, including those in use by the ACS federation, RPR FOM elements needed by OTB, and others.  The development cycle typically involves publishing of a FOM version, work for each federate to design and implement new elements of that FOM, followed by unit testing to insure that the federate correctly implements the current FOM.  Then a federation integration event is held, where system-level testing is accomplished to confirm that all the federation-wide threads work as intended, and to flush out any unwarranted assumptions on the part of each federate team.But even when the federation is correctly exchanging information according to the current FOM, this is no guarantee that the federation-wide representation of each aspect of the domain is valid.  There are numerous issues in reaching such validity, of which we will address two.  The first involves how to resolve representational mismatches between federates, and the second involves gaps in representation of the various legacy models.6. How do we synchronize various representations?Each model is simply the product of its designers approaches to representing the problem domain of interest, and so many approaches are often possible.  When multiple models are brought together, it is inevitable that representational mismatches will exist.  One classic example is the need to register terrain data across a federation’s models, so that, for example, if one federate has one of its vehicles drive over a bridge, and another federate which hosts an observer of this event, the second federate does not show the vehicle flying over the river ten meters from the bridge.  A second example is a federate which does not represent vegetation, hosting a direct-fire weapon which engages a target hosted by a federate which does represent vegetation.  If the second federate believes that the target is concealed by vegetation, there is a serious mismatch due to non-synchronized representations. JVB has designed a partial solution to this problem, a services-based architecture.  In Figure 2, we see that traditional federations have hooked federates up in a straightforward way based on their current interfaces, with each retaining its own representations intact.  To solve this issue of synchronizing representations, a great deal of V&V effort is required to insure that each federate’s representations match each other federate’s representation of the same data or algorithm (left column of Figure 2). Figure 2 – JVB Services-Based ApproachUnder JVB’s design, those algorithms or data retrievals that are done in more than one federate is a candidate for refactoring, where each federate divests itself of its internal responsibilities for that representation and a service federate is established.  One example of this service-based approach occurred during the ACS Federation’s initial work.  Rather than have each federate paint its own vehicles with “observable characteristics”, e.g., radar cross sections, radio or radar emissions, electro-optical and infrared signatures, a single federate was assigned that responsibility.  A federate hosting a vehicle would publish a vehicle object and assign it various characteristics, but not update the vehicle’s observable characteristics.  The Observable Server federate would discover the vehicle object and assign observable characteristics to that vehicle based on a single, authoritative database.  This insured that only one federate had to deal with issues of correctness of the data.  Since the ACS program involved teams from competing contractors using the ACS testbed, this approach insured that all teams would be tested with identical data for observable characteristics. Many services are good candidates for this treatment.  Terrain and mobility services, lethality/vulnerability services, communications services, battlefield geometry services, and others have been considered, and many implemented in JVB.This approach is most easily implemented by models which are designed in a modular fashion, using good software engineering principles.  If intra-model modules are built with clear interfaces, it will be easier to point the interfaces to a new, external services through the model’s  HLA interface.Although a services-based architecture solves many problems, it should be noted that it is not a full solution to the Verification and Validation task.  It does make V&V and certification of data much easier, however, for those services refactored to a single server.7. How do we fill in the representational gaps between legacy models?As stated above, it is not surprising that during analysis of new concepts, we will not always find existing tools and models adequate.  For JVB, representing C4ISR in the context of Network Centric Warfare is the most challenging and essential enhancement to be made over legacy models.  The JVB approach is to fill gaps in C4ISR representation by a collection of new federates loosely called “The C3 Grid”.  Each Grid federate has responsibility for a fairly narrow range of functions (e.g., “formation management”).  This approach makes the most of the componentware-like structure of HLA, where federates can be defined according to a single set of responsibilities.  The resulting software is larger than an object class, but smaller than a monolithic simulation.  To enable this approach, a code-generation utility was created to build an HLA-interface that conforms to any given FOM.  This encourages federate developers to decide that a new portion of code could be spun off into a new federate, because they know they will not need to build an HLA interface, but can simply hook up to an existing one.Most Grid federates are based on JESS (Java Expert System Shell) developed by Lawrence Livermore NL.  Since most command-and-control logic is closely related to decision-making, a rule-based system is a logical choice for a common starting point for C3 Grid federates.One of the key constructs supporting C4ISR and NCW is a data structure called the C3Node.  The C3Node data structure supports flexible, extensible modeling of C3 topologies by allowing each “node”, i.e., each place where command and control could take place, to explicitly and configurably specify what other nodes it is to communicate with about various topics.  For example, there is a maneuver topology, an effects (e.g., fires) topology, an intelligence topology, and a status topology, each one of which specifies the other nodes with which to communicate, and what role each should play.  This structure allows modeling of network traffic, and allows for chain-of-succession modeling in each topology.  For example, if a vehicle’s superior is not available on the network, perhaps due to attrition or simple radio interference, the C3Node topology for maneuver can be reconfigured by the Grid to represent that the superior’s successor is now in command.8. Conclusion.As the United States Military is transformed, new solutions are being proposed, the analysis of which requires enhancements to existing tools.  JVB is joining legacy models with developmental ones to retain the best of existing modeling and simulation capabilities while filling in the representational gaps with new models where needed.  Using a services-based approach, JVB reduces much of the difficulty of synchronizing alternate representations.  By use of many fine-grained federates as part of the C3 Grid, JVB is filling in the gaps with new models as needed.9. References[1]	R. Schwarz, MAJ, USA: “Joint Virtual Battlespace” unpublished presentation to Director, Objective Force Task Force, December 2001.[2]	R. Richardson, SAIC, and R. Briggs, Virtual Technology Corporation: “JVB, A SMART Tool to Support Objective Force and Future Combat System” unpublished presentation for JPSD, February 2002.[3] R. Alexander: “Joint Virtual Battlespace (JVB) – A Concept Evaluation Environment”, Presentation at the 70th Military Operations Research Society Symposium (MORSS), Ft. Leavenworth, KS, June 2002.Author BiographyROBERT S. ALEXANDER is a senior software engineer with the JVB development team.  He is a retired Army Lieutenant Colonel who served as an Armor officer in various assignments and as an Operations Analyst at TRADOC Analysis Center and Concepts Analysis Agency.  He has worked for SAIC since 1997.  Rob is the JVB expert on the aggregate-level combat model Eagle.  EMBED PowerPoint.Slide.8  