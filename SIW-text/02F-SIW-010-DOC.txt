Simulation Assisted Learning Using HLA and SCORMKatherine L. Morse, Ph.D.SAIC10260 Campus Point DriveSan Diego, CA  92121(858)826-6728 HYPERLINK "mailto:kmorse@epsilonsystems.com" morsek@saic.comJack “Jake” BorahAEgis Technologies Group12565 Research Parkway, Suite 390Orlando, FL 32826407-380-5001 HYPERLINK "mailto:jborah@aegistg.com" jborah@aegistg.comVictor P. DiRienzo, Jr.IIT Research Institute, AB Tech Group, Suite 4001901 N. Beauregard StreetAlexandria, VA 22311-1705703-933-3334 HYPERLINK "mailto:vdirienzo@msiac.dmso.mil" vdirienzo@msiac.dmso.milKeywords:ADL SCORM ABSTRACT: The DoD education and training community recognizes that the use of simulations can significantly enhance the student’s educational experience. There are many examples of curricula employing stand-alone simulations.  However, there does not exist a standard method of linking teaching and assessment strategies to simulation data.   More importantly, there is a lack of standard construction techniques that tie specific skills and competencies to assessed simulation-based learning experiences.  The DoD’s High Level Architecture (HLA) allows the modeling and simulation community to connect models and simulations, and live entities (C4I devices and range interfaces), using a standard architecture.  The DoD’s Advanced Distributed Leaning (ADL) Shareable Content Object Reference Model (SCORM) defines a web-based learning content aggregation model and runtime environment for learning objects.  At its simplest, it is a model that references a set of interrelated technical specifications and guidelines designed to meet DoD’s high level requirements for web-based learning content.  This paper provides an approach for an interface between learning content and simulation.  Furthermore, it demonstrates how student performance can be monitored and reported back to a Learning Management System (LMS) , allowing the LMS to provide remedial course work to the student based on the results of the student’s interaction with the simulation.IntroductionDuring the fall of 2000, Philomena Zimmerman, now the Associate Director of Joint Programs for DMSO, tasked members of the High Level Architecture (HLA) technical support team to build a training system to deliver HLA course content to the M&S community.  At that time, the DoD’s Advanced Distributed Learning Program was delivering the first version of the Sharable Content Object Reference Model (SCORM) [1, 2]. SCORM defines a web-based learning “content aggregation model” and “run-time environment” for learning objects. SCORM contains Extensible Markup Language (XML) Document Type Definitions (DTDs) and an API specification to ensure that learning content could be shared and reused among the DoD community. The HLA developers converted existing HLA training material to a SCORM compliant format.  They also selected an appropriate Learning Management System (LMS).  An LMS is a software system designed to deliver, track, report on, and manage learning content, student progress, and student interactions, while being compliant with the ADL standards [1, 2].The prototype of the “Next Generation High Level Architecture Training System” [3] was demonstrated successfully to the Undersecretary of Defense for Personnel and Readiness during the Executive Forum for M&S in June 2001.   The system provided access to the following HLA course modules;Introduction to the HLAThe HLA RulesThe HLA Object Model TemplateThe HLA Interface SpecificationDuring the detailed design phase of the training system, the HLA development team was asked to consider the feasibility of integrating the HLA architecture with the SCORM architecture.  A study was performed to investigate the feasibility of connecting these two distinct runtime environments.  Most importantly, the study wanted to ensure that the architecture would provide a distinct operational benefit.  Several potential architectures with varying degrees of implementation complexity and differing deployment scenarios were sketched.  The study recommended that one or more prototype interfaces between HLA and a SCORM compliant architecture be built and tested.The results of the feasibility study were submitted as a white paper to the DMSO and subsequently reviewed by the Office of the Undersecretary of Defense and Mr. Philip Dodds, Chief Technical Architect of Advanced Distributed Learning.  Collaboration between DMSO’s Associate Director for Joint Programs, the chief architect of ADL, and their respective developers began in November 2001.The developers of HLA and ADL held a technical interchange meeting in January 2002.  The team decided to attack some of the low risk technical challenges by building a “Proof-of-Principle“ interface design for connecting HLA to a SCORM compliant lesson.  To minimize cost, the development team decided to use previously developed HLA and ADL material and  with readily available in-house DMSO teaching federations, the Hello World and the Restaurant Federations, for the early prototype.  The team also agreed that software written during the project’s early stages would be considered “throw away” code.  The main objective was to get the interface operational, not optimized for standard use.In the event that the initial interface demonstrated basic functionality, the design team planned to optimize the design and retest the interface using the HLA-Compliant Air Warfare Training Development (AWTD) Research and Development (R&D) Integrated Product Team (IPT) testbed cockpit.  The testbed cockpit is located at the Manned Flight Simulator (MFS) Facility at the Naval Air Warfare Center, Patuxent River, MD.  Utilizing the testbed cockpit provides a more realistic simulation environment to further test the HLA- ADL interface.The Feasibility StudyThe main objective of the feasibility study was to highlight the relationships and distinctions between the three computing frameworks, XML, SCORM, and HLA.  The second objective was to describe the conceptual model use cases in terms of actors, actions, and systems.  The final objective was to consider and weigh the technical challenges and risks.  Finally, a course of action was recommended to integrate HLA with a SCORM-compliant lesson. The requirement to extend distributed computing frameworks without interrupting service while maintaining backward compatibility has motivated a trend toward separation of infrastructure and protocols from data standards.  The Common Object Request Broker Architecture (CORBA) is an early example of this trend.  ADL and HLA  continue this trend for their respective domains and consequently they have some superficial architectural similarities.This trend has also been supported by the recognition of metadata standards such as the XML.  XML specifies a minimal format that produces a well-formatted document.  The resulting XML document can then be parsed by any tool in a large set of free or commercial tools.  The main power of XML is that it allows for the creation of Document Type Definitions (DTDs).  DTDs allow the user to create new data element types and specify their structure in terms of other element types, either predefined or user-defined.  The same set of tools that parse basic XML also parse DTDs and XML documents that are based on those DTDs.The migration from Distributed Interactive Simulation (DIS) to HLA in the simulation community is another example.  The realization that it was time consuming to modify protocol standards every time a new object was to be modeled provided motivation for the migration.The SCORM standard has this same division of components.  SCORM contains a DTD for describing the structure of web-based course content and a set of requirements for an LMS.  While these standards are in the early stages of development, their trend is fairly clear.  Students will be able to go to web-based repositories of course materials and use an LMS to take a course interactively.  The instruction will be tailored to their personal progress and the results will be reported to either an instructor or saved to a database.  Eventually, any SCORM-compliant content will be executable on any LMS.  SCORM relies on Hyper-Text Markup Language (HTML) for content delivery over the web.    The frequency of web interactions and web bandwidth requirements will be affected by the level of student interactivity during individual lessons, the size of content elements (i.e., images and audio) and the speed with which the student is progressing through the lesson.  SCORM will support aperiodic, bursty access to large content objects with fairly loose delivery latency requirements.  This is the same type of access experienced and expected of the web today.The HLA shares this same division of data and protocol.  Data shared across a federation is specified in terms of the HLA Object Model Template (OMT) Specification.  The protocol for interacting with a federation is specified in the HLA Interface Specification.  In IEEE standard 1516 for the HLA, object models specified in accordance with the OMT Specification are written in XML. There is however a major difference between HLA and SCORM.  Interactions with an HLA Runtime Infrastructure (RTI) are different than  interactions with SCORM content.  Data exchanges between RTI components usually happen with a higher frequency , on the order of microseconds or milliseconds, than in SCORM. However, the size of the individual data exchanges are usually smaller than in SCORM, typically a few bytes to a few hundred bytes.While it is technically possible to have a federate connected to the federation over a low speed modem line, it is challenging to maintain the tightly coupled framework required by the RTI.  The challenges of maintaining a tightly coupled, perfectly fault tolerant, distributed system on a persistent basis has been the subject of considerable research.  Any persistent federation execution is susceptible to non-recoverable distributed faults ranging from loss of power to loss of packets on the network. The HLA is a framework that best supports frequent access to small content objects with small delivery latency requirements.Proposed ArchitecturesThe feasibility study identified three conceptual models or approaches for combining HLA and SCORM.  These approaches are:Building an HLA interface to a SCORM compliant lessonEmbedding an LMS in an operational systemUsing the RTI as an LMS.  The first model relies on a concept we defined which we called a smart Training Advisor component.  Initially, the student would interact with this component.  The Training Advisor’s responsibility would be to access an LMS to determine what courses were available and what the student still needs to learn.  The student would either select a new curriculum or continue with a previously established curriculum.Depending on the content, the Training Advisor would simply allow the content to be served via a browser, as ADL is currently used.  It could also perform the process of establishing an HLA federation, selecting a scenario, creating an interface for the student, monitoring the execution, and reporting the results back to the LMS. In addition, the Training Advisor could pause the federation execution to communicate with the LMS in order to provide remedial training before resuming the execution.  This conceptual model is ADL-centric; the simulation is simply another form of content.  The RTI, Scenario, FOM, and other federates are simply "assets" in the ADL sense of the term.Access to an HLA federation from a SCORM-compliant lesson provides a considerable benefit.  The purpose of SCORM is to deliver interactive education and training to the student which will provide a richer instructional experience than can currently be found in a live classroom.  Allowing a student to interact directly with a simulation at a key point during instruction provides such an experience.  The standardization of SCORM presents the opportunity to apply this capability broadly. However, there are technical challenges to be overcome.  Either a persistent federation execution must be maintained or a new federation must be launched remotely to support the student’s unpredictable arrival.  This federation would be significantly smaller than the one required to support the delivery of SCORM-compliant material to students.  Therefore, maintenance or initiation would be less challenging.  Security issues remain, but may be mitigated by providing a very restricted interface via Java.The second conceptual model, embedding an LMS in an operational system, is a two step process.  First, the student would receive the necessary tactical skills training via the LMS.  Second, training on the actual system would involve a newly developed “LMS lite” embedded capability.  This model would entail developing a new, lightweight LMS that could monitor the student’s progress, measure their performance, and recommend remedial skills training if necessary, all while being embedded in an operational system.  Most of the current LMSs are probably to heavyweight to fit in this operational environment. The final conceptual model, and the least likely, is using the RTI as an LMS.  Based on the preceding description of SCORM and HLA, there are several daunting challenges in delivering SCORM content via an RTI.  These challenges include developing a RTI that is more fault-tolerant, developing an RTI with less overhead, ensuring the student is using the appropriate RTI implementation and version, and overcoming the security issues associated with firewalls.A new RTI that is more fault tolerant than those available today would be required, or the HLA standard would have to be modified to allow for considerably less reliable service, which would impede the HLA’s utility to its current user community.  The majority of federations currently  operate over LANs or dedicated lines.  Such closed-loop configurations have the benefit of supporting high-speed communication and avoiding security issues associated with firewalls.  In fact, at least one RTI requires specification of all IP addresses of participating federates before starting a federation execution.  The SCORM access model, which generally has users coming from anywhere on the internet at anytime of the day with widely varying bandwidth availability, is not well supported by an RTI acting as an LMS.The current RTI implementation brings with it all of the overhead necessary to maintain and manage a time-managed, large-scale simulation, none of which the average SCORM user requires.  This additional overhead is unnecessary and will ultimately slow the LMS.In order for the SCORM content to be passed properly, the student would be required to have the same RTI implementation, version, and FOM as the system hosting the LMS.  This creates an unnecessary configuration burden on the student just to use the model.Additionally, the security issues associated with accessing an RTI through a firewall can be significant.  These issues range from the technical details of opening ports in a firewall to administrative procedures required by large corporations to allow access through a firewall.  In some cases, security policies will not allow any access through a firewall.The technical challenges identified in the feasibility study were characterized in terms of viability and risk.  The main challenge, obviously, was that and undertaking of this nature had never been attempted.  The specific challenges were:Launching a federation indirectly via an LMS.Attaching a federate to the federation indirectly via an LMS, including associated security issues.Returning the simulation results to an LMS to show student progress.Allowing multiple remote students to join a federation execution simultaneously.Dynamically selecting the student’s federation components, including the associated FOM, based on the student’s progress in the lesson.Maintaining a persistent federation execution over the life of the LMS.Embedding lightweight LMSs in platforms or virtual simulators.After reviewing all the options, the most promising course of action identified was to integrate a HLA training federation into a SCORM-compliant course.  Addressing the challenges associated with this conceptual model would enable a single student to initiate a small federation, connect to it, and then interact with it.  Meanwhile, in the background, a student’s performance  would be monitored, reported, and tracked by the LMS.The study concluded that the task of building a prototype implementation has a high probability of success in a short amount of time.  At the time of the study, the SCORM standard did not support adaptive instruction, although the capability is planned for the future.  Adaptive instruction allows the LMS to select the next assignable unit based on the student’s progress to date.SCORM Architecture RequirementsThe objective of the experiment was to demonstrate the basic functionality of the interface between HLA and a Shareable Content Object (SCO).   A SCO is a separate piece of content capable of interacting with an LMS via the Javascript API.   An LMS may also launch assets, web-based material which does not communicate back to the LMS, e.g. HTML, Java Applets, video, etc.The desired functionalities are:The ability of a student to launch a federation from a SCO.The ability to monitor the student’s performance of the desired task.The ability to communicate the results of the student’s performance during the simulation back to the LMS.In the event a student is unable to perform the desired simulation task, the LMS would be notified and automatically provide the student with the appropriate remedial training.  In order to achieve the desired objectives, a “Listener” federate, similar to a data logger, is launched from the LMS to track federation activity and calculate student results. Student results are based on correct operation of the federation.  The LMS provides a “Launch” protocol to start the SCOs and assets.  The LMS also provides the API and data model for SCOs to communicate with the LMS.  The combined HLA and SCORM RTE architecture extends the use of HLA Federations to the learning community as illustrated in  REF _Ref423504349 Figure 31.Figure  STYLEREF 1 \s 3 SEQ Figure \* ARABIC \s 1 1.  Combined SCORM and HLA ArchitectureThe initial design was greatly affected by the architectural constraints imposed by the SCORM 1.2 specification.SCORM requires that an LMS launch one SCO at a time and that only one SCO is active at a time.  Only LMSs may launch SCOs.  SCOs may not launch other SCOs.  All communications between the API adapter and the SCO is initiated by the SCO.  At the current time, there is no supported mechanism for LMSs to initiate calls to functions implemented by SCOs.  The LMS must launch the SCO in a browser window.  This window is a child window or child frame of the LMS window that exposes the API adapter as a Document Object Model (DOM).  The API adapter must be provided by the LMS.  The only supported mechanism for API interaction from a SCO to the LMS is through JavaScript calls.  It is the SCOs responsibility to recursively search the parent and/or the opener window hierarchy until the API Adapter is found.The architectural assumptions were based on the “Keep-It-Simple” approach.  Therefore, the HLA ADL interface was not multithreaded and did not address communications through firewalls.  The Listener federate was designed as a Java application launched from another applet compatible with the LMS launch protocols.  The other federates in the conceptual model, Hello World and Restaurant, remain in their native languages.  The RTI is started on the local machine by the student rather that trying to effect a launch on a remote server.HLA ADL Prototype Lesson DesignThe conceptual model for the prototype lesson involves a student who is interested in learning how to build a federation.  The student has no knowledge of HLA.  Therefore, he or she is required to take introductory HLA training via the LMS.  Upon completion of the introductory HLA training, the student will be given a lesson on “How to Build the HLA Helloworld Federation”.  The student will be given the opportunity to build and execute the Helloworld Federation.  Student performance will be monitored and fed back to the LMS.  For this particular lesson, it is very appropriate for the student to start the RTI manually on the local machine because one of the learning objectives is to be able to start and stop the RTI as part of the overall federation execution process.  If the student failed to act on key learning objectives, remedial training will be provided.  Rather than use a full LMS for this prototype, the sample SCORM Runtime Environment (RTE) provided free by the ADL initiative was used.  Unlike a full LMS, the RTE only provides the minimal content flow control and API specified in the SCORM specification.The structure of the newly developed Helloworld lesson will be:From a local Internet Browser, the student obtains access to the RTE.  The student locates the appropriate lesson for “How to Build a Federation”The student sequentially completes the “How to Build a Federation” SCOs.After the student has built the federation the SCO instructs the student to launch the RTI executive process.The student notifies the RTE when the RTI has been launched successfully.The RTE launches the Listener Federate. Note that this federate is an asset, not a SCO, i.e. it never communicates back to the RTE.The student is instructed to run the Helloworld federate and does so.The student notifies the RTE that the federate has been run successfullyThe RTE launches the Collector Federate applet. Unlike the Listener, the Collector is a SCO, i.e. it can communicate results back to the RTE.The Listener and Collector exchange HLA interactions, delivering the student results to the Collector.the Collector returns the student’s results to the RTEThe student is instructed to shut down the RTI executive process and does so.If the student failed to execute the federate correctly, s/he is directed to return to step 4.Architecture Interface DesignA UML use case diagram in  REF _Ref423504650 Figure 51 provides a more in depth look at the overall sequence of events between architecture components and the methods used to invoke the calls between them.Figure  STYLEREF 1 \s 5 SEQ Figure \* ARABIC \s 1 1.  ADL Hello World Federation Use Case DiagramChallengesWe encountered two challenging security issues in developing the Hello World federation.  Both issues are related to the fact that the Java applets are being executed from a browser while needing to link a Dynamic Link Library (DLL).Java provides a customizable “sandbox” in which Java programs execute.  The sandbox provides restricted security boundaries for Java programs.  Activities prohibited by the Java sandbox include:Reading or writing to the local disk.Making a network connection to any host, except the host from which the applet came.Creating a new process.Loading a new dynamic library and directly calling a native method.In order for the Collector applet to become a federate, it must import the RTI java bindings, which then loads the RTI Java DLL.  By default, this action is precluded by the Java security sandbox.  There are two solutions to this problem, either digital signatures or modification of the security policy.The Java Security API includes APIs for digital signatures, message digest (digital fingerprints), and key management.  JDK 1.1 also provides a tool named javakey. We chose the latter because it is easier in the near term.  However, for general deployment, the former optional is a better solution because it closely controls the security policy and requires almost no configuration on the user’s part.The second issue encountered was caused by applets being launched from the browser must both use the same Java Virtual Machine (JVM).  This single JVM loads a single copy of the RTI Java DLL.  Unfortunately for our original architecture, some of the code in this DLL is non-reentrant.  This means that two active applets could potentially call the non-reentrant code at the same time, resulting in a Concurrent Access exception from the RTI.  This is exactly what happened with the first federation design, which had both the Listener and the Collector Applets as federates.It was ascertained that launching separate browser processes would solve the problem, however a solution could not be found that would automatically launch a separate browser process, only one where it was done manually from the desktop.  The ultimate solution was to open up the security policy to allow applets to launch executables.The Listener federate was split into a Launcher applet and a Listener Java federate.  The duty of the Launcher applet is to just launch the Listener Java federate and then quit.  Since the Listener Java federate is a separate process, it receives a separate JVM and thereby avoids the non-reentrancy issue with the DLL.  It is important to note that this solution will work for launching any other kind of local executable.Future WorkAt the current time, there is a high confidence that the desired functionality of the HLA-SCORM interface will be achieved using the described approach.  After successful demonstration of the interface to DoD leadership, it is intended that the second phase of the task will begin.The opportunity exists to test the interface in a more realistic training environment using NAVAIR’s AWTD cockpit trainer.  The airframe modeled will be the F-18.  In this case, the instruction provided to the student will be  “How to operate a RADAR.”  The components that make up NAVAIR’s AWTD cockpit trainer are HLA compliant.  Lesson’s learned from the initial design phase will be incorporated into the subsequent version of the interface software.References[1]   HYPERLINK "http://www.adlnet.org" http://www.adlnet.org[2]  Sharable Content Object Reference Model (SCORM) Version 1.2, Advanced Distributed Learning Initiative, October 1, 2001.[3]	Jake “Jack” Borah, Katherine L. Morse, PhD, Victor P. DiRienzo Jr., “The Next Generation High Level Architecture Training System,” 01S-SIW-063, September 2001.Author BiographiesDr. Katherine L. Morse is a Chief Scientist with SAIC.  She received her B.S. in mathematics (1982), B.A. in Russian (1983), M.S. in computer science (1986) from the University of Arizona, and M.S. (1995) and Ph.D. (2000) in Information & Computer Science from the University of California, Irvine.  Dr. Morse has worked in the computer industry for over 20 years, specializing in the areas of simulation, computer security, compilers, operating systems, neural networks, speech recognition, image processing, and engineering process development.  Her Ph.D. dissertation is on dynamic multicast grouping for Data Distribution Management, a field in which she is widely recognized as a foremost expert.Jack Borah is a Senior Systems Engineer with AEgis Technologies Group.  He has been a primary DMSO HLA training program instructor for the past two years, and is a retired military officer with over 25 years experience in military training and training systems.  Victor DiRienzo is a Senior Systems Engineer with the IITRI/AB Tech Group.  He has been on the HLA technical support team for the past two years.  He has over 13 years of experience in the delivery of integrated systems for the Department of Defense. 