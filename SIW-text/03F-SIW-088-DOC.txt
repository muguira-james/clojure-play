Supporting the Transfer of Large Environmental Data Objects Over a Connectionless RTIRobert A. ReynoldsNorthrop Grumman Information Technology55 Walkers Brook Dr.Reading, MA 01867781-205-7579 HYPERLINK "mailto:robert.reynolds@ngc.com" robert.reynolds@ngc.comChristopher G. ScannellThe Naval Research Laboratory4555 Overlook Avenue, SWWashington, DC 20375202-767-1127HYPERLINK "mailto:christopher.scannell@nrl.navy.mil"christopher.scannell@nrl.navy.mil Keywords:environment, ocean, RTI, connectionless, ASW, FBE, ATLoS, OASES, partitioned, reliable, best effort, DDMABSTRACT:  The Navy’s Fleet Battle Experiment ‘Kilo’ (FBE-K) required the serving of a real-time METOC environment to a Modeling and Simulation Federation.  Supporting this exercise presented an interesting technical challenge due to the very large size of the environmental data objects exchanged between the environment server and the client simulation applications.  Typically this problem is solved by using the RTI’s TCP/IP-based reliable transport mechanism, which imposes no limit on the size of the objects exchanged.  However, due to the problems associated with supporting fault-tolerant TCP connections over a wide-area network involving a large number of simulations, the FBEs are conducted on an RTI running in Connectionless Mode.  In this mode, only best effort (UDP/IP) transport is supported and the transfer of large (> 65Kb) objects is extremely problematic.  This paper reviews these problems and describes the approaches considered for solving them and the one selected for FBE-K.IntroductionModeling the atmosphere, ocean and space (AOS) environment within a distributed simulation has always been challenging, due to the large state size of the AOS environment and to the fact that it varies with time.  Distributed simulations and the network services that support them are oriented towards the frequent update of relatively small objects; for example, the encapsulation of the kinematic state of a vehicle.  In contrast, the AOS environment requires relatively infrequent updates with  potentially very large objects.  While it is often suggested that the best approach to AOS modeling is to pre-distribute the time-history of the AOS state to each simulation node, many simulation exercises, including the one described by this paper, require run-time distribution. This paper describes the problems that must be overcome when large AOS state updates must be sent over the network at run-time.This paper is organized as follows.  Section 2 summarizes the requirements for the synthetic environment for the Navy’s Fleet Battle Experiment (FBE) “Kilo”, conducted earlier this year.  This section defines the problem whose solution is described in the remainder of the paper.  Section 3 provides an overview / review of the transport services provided by the RTI and the Internet protocols that support them, with emphasis on how the size of the object transported affects the behavior of the service.  Section 4 presents a design for a robust, long-term solution to the problem, which could not be implemented for FBE-K due to time and resource limitations.  Section 5 describes an alternative “affordable” approach, which was implemented and which was found to be acceptable, and the experiences in using this approach during FBE-K testing and final execution.Requirements for FBE-K Synthetic EnvironmentThere were two sets of requirements associated with the FBE-K synthetic environment: 1) requirements based on the systems, sensors and environmental effect models to be included by the simulation exercise, and 2) requirements imposed by the exercise’s chosen simulation infrastructure.  These requirement sets are described separately below.Environmental Modeling RequirementsThe primary modeling requirements for the FBE-K synthetic environment were that it:Support Anti-Submarine Warfare (ASW) for a prescribed volume of the ocean in the waters surrounding the island of Guam.Base the synthetic environment on nowcasts and forecasts produced by the Navy Coastal Ocean Model (NCOM), a validated, numerical ocean prediction code.Support injection of a near-real-time feed of NCOM forecast data in order to achieve maximum correlation between the synthetic environment and the real-world ocean environment sensed by the live players.It is the third requirement that precluded pre-distribution of the water column state to the client simulation nodes, and which motivated the use of the Ocean, Atmosphere and Space Environmental Services (OASES) system in the FBE-K Federation.The OASES system, initially developed by Northrop Grumman Information Technology and now available as Government Off The Shelf (GOTS) software from DMSO is described in [1] and [2].  While OASES provides tools to support pre-distribution of the AOS environment, it is more often used to provide AOS data to client simulations at run-time, via object updates made through the Run-Time Infrastructure (RTI) of the DoD High Level Architecture (HLA).The primary OASES client simulation in the FBE-K exercise was the Acoustic Transmission Loss Server (ATLoS).  ATLoS subscribes to the WaterColumnGDC object class, as defined originally in the OASES Simulation Object Model (SOM) and subsequently included in the FBE-K Federation Object Model (FOM) to support ATLoS’ run-time environmental data requirements.  A WaterColumnGDC object encapsulates a three-dimensional, rectangular grid of water temperature and salinity, coordinatized in Geodetic coordinates (GDC).  This data is used by ATLoS to derive sound speed, which in turn is used to compute acoustic transmission loss for acoustic source and sensor pairs based on their relative locations in the water column.Data coverage was required over the spatial domain associated with the planned ASW operations area.  The NCOM data was expressed on a 1/8 degree, 185 x 193 horizontal grid, and on a vertical grid of 43 fixed, non-uniform depths from 0 to 5000 meters.  The resultant size of a single WaterColumnGDC object was approximately 9.3 Mb.  NCOM-based analyses of the water column were available every 24 hours, with forecasts every 6 hours out to 72 hours from the analyses.  Model output was received with a latency of approximately 36 hours.Based on these data requirements it is clear that the object that is the water column – a WaterColumnGDC instance – is a unique animal within the Federation.  It is a very large object that changes state very slowly, supporting the computation of acoustic transmission loss for numerous pairs of relatively small objects (submarines) which change state relatively rapidly.  As described in the next subsection, the simulation infrastructure for FBE-K is tuned to the needs of the many (e.g., submarines), and not the one (water column).Requirements Imposed by Simulation InfrastructureSimulation exercises regardless of size, usually require that a participating Federate play by a set of rules above and beyond those directly enforced by the RTI.  For example, to interoperate correctly, all FBE-K Federates must agree:On the join order at exercise start and on whether or not a specified initial condition will be achieved via a synchronization pointWhether or not to use Time Management and Data Distribution Management (DDM) servicesWhether RTI class and/or attribute advisories will be enabled to support Declaration Management (DM)-based interest managementOn the endian-ness of the multi-byte data fields sent over the networkOn word alignment and padding requirements for multi-byte numeric fieldsThe FBE-K team recorded these types of decisions in a Federation Agreements document, which was updated regularly during the test program.  A Federate is able to gain an exception to a documented agreement only through a formal request to the team responsible for the simulation infrastructure.  (The simulation infrastructure includes the physical network(s), the OS network configuration, the RTI software and the RTI run-time configuration).  The specific agreements that came to impact the synthetic ASW environment were these (paraphrased):The RTI to be used was the DMSO / SAIC RTI-1.3NGv6.The Federation would use DDM services to define a routing space with 32 dimensions (each associated with a multi-cast group) to support interest management by partitioning the network traffic.  One dimension of the space was set aside for environmental (METOC) data.Attribute-level advisories would be disabled.The FBE-K RTI would be run in Connectionless Mode.  (see Section 3)Later joiners should not use the RTI provideAttributeValueUpdate service to request an initial update, but should instead wait for the next regular update.The first two agreements presented no particular problems for OASES and ATLoS.  OASES was configured to use DDM and to publish WaterColumnGDC objects into the routing space reserved for environmental data.The third agreement is typical for even moderate-sized Federations because, at least for RTI-1.3NGv6, the run-time cost of supporting attribute-level advisories is prohibitive, and the Federation would execute at a small fraction of the required real-time rate.  At one time OASES required that these advisories be enabled in order to determine which of the attributes of a (large) environmental object were required by at least one Federate to avoid over-publishing; however OASES is currently able to operate without these advisories, relying on the user to specify the attributes to publish via an OASES configuration file. The implications of the fourth agreement are considerable.  Per the documentation provided by the default RTI Initialization Data (RID) file, in Connectionless Mode the following are not supported:Reliable updates and interactionsOwnership ManagementTime Management Save, Restore and synchronization pointsManagement Object Model (MOM) servicesThe problem that Connectionless Mode causes for OASES and ATLoS is not obvious from the above.  It happens that neither OASES nor ATLoS requires use of Ownership Management, Time Management, Save, Restore or synchronization points, or the MOM.  Furthermore, there is no explicit requirement for reliable updates; after all, if the rest of the Federation can live without reliable updates, why can’t OASES and ATLoS?Deferring the answer to this question for the moment, we note that agreement five presents an obvious problem for OASES and ATLoS: if the (WaterColumnGDC) object in question is only updated by OASES once every 6 hours, how can we require ATLoS to wait for the “next regular update”?  We could require that ATLoS always be started before OASES, but then there is a problem if ATLoS fails and/or needs to be restarted.  OASES generally supports multiple environmental data consumers (e.g., the FBE-K chem/bio simulation) and we shouldn’t have to restart OASES for any one client.Agreement number five presupposes that essentially all objects are small and that “heartbeats” are being maintained for the objects by their owners. The implication of the agreement then is that OASES should establish a heartbeat for the WaterColumnGDC object.  This is problematic given the large size of the object.  If the update interval is too small then the network, and all Federates subscribed to environmental data, will suffer performance degradation due to the multiple re-transmissions of a 9.3 Mb object.  If the interval is too large then ATLoS is without a defined water column state for an unacceptably long period of time.  Large objects with slow dynamics appear to require separate handling.Returning to the deferred question: “Why can’t OASES and ATLoS interoperate in the absence of reliable updates, when the rest of the Federation can?”  This question is taken up in the next section, and the specific problems presented by this agreement are identified.  Section 4 then presents a solution to all of the problems implied by Federation Agreements four and five.Review of RTI Transport ServicesWhen operating in the default Standard Mode, the RTI provides two distinct transport services: Reliable and Best Effort.  The transport services to be used are specified in the FOM on a per-class, per-attribute basis; hence both transport types may be in use simultaneously by the Federation.The Reliable Transport service guarantees that an object update will be received by all subscribed Federates.  It also guarantees that any sequence of object updates will be received in the same order that the publisher performed the updates.  Reliable Transport is the only service anyone would ever use if it weren’t for the fact that it is relatively slow and requires considerably more kernel and Federate resources than the alternative.The alternative is Best Effort, which, depending on the network, can be unreliable.  Best Effort transport is characterized by the fact that it doesn’t guarantee delivery of an update nor does it guarantee the order of delivery of a sequence of updates.  However, for successful transfers, it operates much faster than Reliable Transport and requires much less kernel and Federate resources.To understand the implications of the choice between Best Effort and Reliable transport for WaterColumnGDC object exchange between OASES and ATLoS, we have to look at the network layers that support Federate-to-Federate communication.  Figure 3-1 illustrates the primary network layers and their hierarchical arrangement for the case where OASES and ATLoS use Reliable transport; Figure 3-2 illustrates the case where Best Effort transport is used.Figure 3-1: Object Update and Reflection Using Reliable TransportFigure 3-2: Object Update and Reflection Using Best Effort TransportThe figures are remarkably similar, differing only in the protocol used by the Transport Layer  and the directionality of the data flows beneath this layer.  The Application Layer, specifically the RTI, imposes no size constraint on the objects that can be updated and reflected for either of the transport services it offers.  Yet, for both services the IP protocol limits the size of a message (IP datagram) to 65Kb.  Application objects larger than 65Kb – in particular our 9.3Mb WaterColumnGDC object – require fragmentation and reassembly by some network layer for both Reliable and Best Effort transport.  For Reliable transport, fragmentation and reassembly is done by the TCP layer as an integral part of the reliable, connection-oriented service that it provides to the application layer.  For Best Effort transport, fragmentation and reassembly is performed by the RTI, but because the Transport Layer is based on UDP, which is connectionless and unreliable, if any fragment of the application object is lost by the Transport Layer then the entire object is lost to the application (Federate).  The impact of the loss of a single UDP message on the FBE-K acoustic simulation is that an update to the ocean state – and quite possibly the initial update – is lost in its entirety, while OASES receives no indications from the RTI that a communication problem exists.But how are UDP messages “lost” in a distributed simulation environment, and what is the likelihood?  OASES and ATLoS, as Modeling and Simulation Federates within the wider scope of the FBE-K exercise, were run on the same Local Area Network (LAN) within the same site: the Naval Warfare Development Center in Newport, RI.  The OASES and ATLoS host workstations, 1.2GHz Linux boxes, were literally side by side, attached to the same Ethernet.  However, as noted by the Infrastructure Team [Appendix D of Ref. 1], data loss can nevertheless occur when:Too much time elapses while the Federate is processing entity state updates, causing the  kernel’s UDP buffer to overflow.  As data comes in from the network it is stored in buffers in the operating system.  If the federate can't empty the kernel buffers fast enough, some network data will be lost because the kernel has no place to put it. The number of packets per second arriving from the network exceeds the capacity of the network interface card to process them. These conditions can occur in a heavily-loaded simulation environment and affect the loss of objects of all types and size.  But for large objects the situation is even worse, and the network does not need to be heavily loaded in order to lose data.  The size of the kernel’s UDP buffer is fixed by a configuration parameter in the RTI RID file; the default buffer size, and the one used for FBE-K, is 128Kb.  A 9.3Mb WaterColumnGDC object requires approximately 143 maximally-sized UDP fragments (datagrams) to transfer, while the ATLoS receive buffer can store only 2 fragments.  The only hope of avoiding data loss is to ensure that the buffer is drained by ATLoS faster than it is filled by arriving OASES fragments.  However, the RTI does not provide any control over how rapidly the fragments are written to the network, and because UDP is connectionless, there is no flow control and the sender is unaware of any congestion at the receiver.  The result is that fragment loss is almost guaranteed, as was demonstrated repeatedly during the FBE-K test program.A Design SolutionThe authors considered a number of solutions to the problem of updating large objects over a Connectionless RTI in such a way as to minimize the possibility of data loss, and to avoid having to restart OASES to support an ATLoS restart.  The primary approaches considered were:Develop a “back door” communication mechanism between OASES and ATLoS that avoids use of the RTI altogether.Create two Federations within the FBE-K simulation infrastructure, one of which would support Reliable transport.  OASES would join the Reliable Federation while ATLoS would join both.Perform fragmentation and reassembly at the Federate level, above the RTI, to gain control over it, and implement a Federate-level reliability mechanism.The first approach was rejected because it required considerable new development for a non-reusable, non-standard, point-to-point interface.  The second approach was found to be infeasible because the operating mode of the RTI is specified in the RID file which is shared across all Federates and Federations.  The third approach, which is the one pursued, was appealing because it built on existing Federate-level fragmentation and reassembly functionality developed under earlier programs to support DDM-based geospatial filtering, as described in the next section.Geospatial FilteringFigure 4-1 illustrates the concept of geospatial filtering using the RTI’s DDM services.Figure 4-1: DDM-Based Geospatial FilteringThe figure illustrates a playbox partitioned into 8 rows and 10 columns.  This grid is established to support subscription to environmental data based on subscriber location.  This grid is unrelated to the grids used to express the METOC data to be published; the METOC grids are typically much higher in resolution.  Hence, for each cell in Figure 4-1 OASES would create, for example, a distinct WaterColumnGDC and/or SurfaceWeatherGDC object.  The gridded METOC data that is bounded by a cell in the DDM grid is referred to herein as an environmental data partition.The black ovals represent the areas-of-interest – perhaps based on the range of specific sensors – for a notional naval entity and a land-based entity.  The naval (land-based) entity would only receive updates to the shaded blue (green) partitions from the RTI, resulting in a significant reduction in loading on the client Federates and, depending on the RTI implementation, the network as well.Partition DescriptorsGeospatial filtering as described in the previous section was not actually required for FBE-K because only the ATLoS simulation required water column data and it required full coverage of the ASW area for all simulation times.  However, because the capability to fragment (partition) a large environment existed in OASES, and because ATLoS had the capability to perform the required reassembly, the design proceeded based on the assumption that the water column state would be fragmented and reassembled at the Federate level such that the resultant partitions would be less than 65Kb in size.While proceeding this way still does not guarantee data loss, it does give OASES control over the size of the partitions and the rate at which they are updated.  Furthermore, by giving ATLoS control over reassembly, lost datagrams in the UDP-based Transport Layer do not necessarily result in total loss of water column updates.  In fact, ATLoS is designed to manage a gridded water column environment constructed from an arbitrary collection of contiguous or non-contiguous partitions.  If an ATLoS entity queries the (local reflection of the) water column state for a line-of-sight that passes through a region for which no data exists, the query method returns a “missing data” flag value.The problem with this arrangement is that data loss now has to be handled by the highest level of the ATLoS application – the transmission loss model itself.  To avoid this, we considered approaches to developing a reliability mechanism that could be implemented at a lower level within ATLoS and which could also be supported by OASES.  It was realized that any attempt to implement reliability would require that the receiver (ATLoS) a) know what data to expect, b) know what data it has already received, and c) be able to request retransmission for what it has not received.  Unlike the Gridded Data Protocol Data Unit (PDU) designed for DIS, there are no attributes within any of the classes in the OASES SOM that refer to the “parent” spatial domain when the object is a “child partition”.  Each object stands alone.  Hence, the design of a reliability protocol for Connectionless Mode begins with the introduction of a new class, describing a parent domain, to the OASES SOM.  The attributes of this class, named PartitionDescriptor, are shown in Figure 4-2. Figure 4-2: Partition Descriptor AttributesAn instance of the PartitionDescriptor class would be created and updated for each of the original, unpartitioned METOC objects owned by OASES, i.e., one for each of the (large) objects that would be published directly if Reliable Transport were available.  The attributes of this class are defined as follows:Class – the RTI handle for an object class that has been partitioned, e.g., the WaterColumnGDC class handleGrid – an OASES-assigned identifier for distinguishing between different grids of the same object class, relevant when a multi-resolution environment is being published (see Reference [3]).PartitionCount – the number of partitions that exist for this class and gridObjectIDs – an array, of length PartitionCount, containing the RTI-assigned object handles for the objects which are the partitions of this class and gridSequenceNumber – an integer incremented by OASES each time the original, unpartitioned object is updated.   This attribute is initialized to one (1).How PartitionDescriptor objects would be used to establish reliable transport is described in the next section.Partition Descriptor DynamicsThe way in which OASES and ATLoS (or any other environmental data client) would use PartitionDescriptor objects is best described through an example.  The example chosen here illustrates the general concept which includes the FBE-K water column problem as a special case.Assume that an exercise requires water column data for an ASW operations area as well as for a separate, non-contiguous stretch of coastline to support Mine/Counter-Mine Warfare (MIW).  Assume that requirements also exist for high-resolution atmospheric data in the region surrounding a chemical weapons factory and that low-resolution atmospheric data is required over the full playbox.  Four distinct objects are then required:One WaterColumnGDC object on a grid appropriate to the ASW operations area.One WaterColumnCurvilinear object on a grid appropriate to the MIW operations area.Two WeatherGDC objects, one on a high-resolution spatial grid with limited extents, the other on a lower resolution grid covering the full playbox.Assume that all four objects are larger than 65Kb in size, and hence require partitioning.  Assume further that we allow the number and size of the partitions to be configurable on a per-object basis.During initialization, OASES would create the partitions of the four original (large) objects, and would also create four instances of the PartitionDescriptor class, one for each of the original objects, initialized as indicated below:ClassWaterColumnGDC class handleGrid1         (of 1 for this class)PartitionCountN        (N configurable by user)ObjectIDsArray of N object handles as assigned by RTI at time of partition registrationSequenceNumber1ClassWaterColumnCurvilinear class handle Grid1          (of 1 for this class)PartitionCountM        (M configurable by user)ObjectIDsArray of M object handles as assigned by RTI at time of partition registrationSequenceNumber1ClassWeatherGDC class handleGrid1        (of 2 for this class)PartitionCountL        (L configurable by user)ObjectIDsArray of L object handles as assigned by RTI at time of partition registrationSequenceNumber1ClassWeatherGDC class handleGrid2         (of 2 for this class)PartitionCountK        (K configurable by user)ObjectIDsArray of K object handles as assigned by RTI at time of partition registrationSequenceNumber1Assume first that the client Federate(s) have joined the Federation before OASES.  OASES then joins.  The clients, subscribed to the PartitionDescriptor class as well as to the subset of WaterColumnGDC, WaterColumnCurvilinear and WeatherGDC of interest to them, would wait for a PartitionDescriptor reflection for a class of interest.  A received PartitionDescriptor identifies how many partitions to then expect, and also provides the object handles the client requires to request retransmission of one or more partitions after an appropriate timeout.  When a subsequent PartitionDescriptor reflection indicates an increase in the SequenceNumber attribute, indicating that OASES is advancing the METOC state in time, the client resets its partition accounting and the process repeats.To handle cases where a client joins the Federation after OASES, or has to be restarted, the PartitionDescriptor objects would be given a heartbeat by OASES.  The client would then be without a defined METOC environment for at most the period of the heartbeat; the period of the heartbeat can be made short because the PartitionDescriptor objects are very small (~500 bytes).Limitations of the ApproachThis approach has to be recognized as an engineering solution, vs. a robust, general-purpose, reliability protocol like TCP.  It is argued that the parameters associated with the approach, specifically the partition size and partition update rate, should be “tunable” such that the probability of data loss is reduced to an acceptably small level.  If not “tuned” it is fairly obvious that high rate updates of large partitions could result in many lost partitions, which will generate many requests for retransmission, some of which will also be lost, the end result being a network storm and a “hang” of the simulation’s METOC environment.Note also that in the end the approach does require use of the provideAttributeValueUpdate RTI service, which is discouraged, if not prohibited, by the Federation Agreements.  However, this service is used only to handle exceptional conditions resulting from a lost partition within a network environment that has been presumably “tuned” to minimize such exceptions.  In fact, these points were made in discussion with the FBE-K infrastructure team and an exception to the Federation Agreement was granted to OASES and ATLoS for using the provideAttributeValueUpdate service for reliability purposes.Short Term Approach and ExperiencesUnfortunately, resources available to the OASES and ATLoS development teams prohibited implementation of the solution described in Section 4.  “Plan B” proceeded by first implementing a configurable partition update rate for OASES, allowing the environmental data flow to be “throttled back”.  During the FBE-K test program, it was determined experimentally that delays of as little as 100 msec sufficed to minimize data loss when used in combination with a short RTI tick interval (also on the order of 100 msec) for the receiving Federate.To address the problem of a late-joining or restarted client Federate, a direct (configurable) heartbeat of the partitioned environment was implemented for OASES.  While this does result in periodic “bursts” of WaterColumnGDC objects totaling 9.3Mb in size, it was judged that these bursts could be lived with given that the alternative would have been to either go as long as 6 wall-clock hours without a water column state, or to restart OASES and the other METOC data consumer Federates.SummaryIt is suggested that future work on the problem of supporting real-time transport of large AOS environments consider:Re-examination of the root causes of the problems associated with supporting Reliable Transport in large Federations, at least for a few, select Federates like OASES and ATLoS with unique requirements.Implementation of, and experimentation with, the approach described in this paper based on Partition Descriptors.Last but not least, it should be noted that nearly all of the approaches used to date to simulate the AOS environment in a distributed simulation context suffer from a problem of state consistency.  That is, the reflected AOS environment at any simulation node is inherently inconsistent, for some interval of wall-clock time, when it is received as multiple reflections of component objects.  This problem is made worse by “load-leveling” schemes, including the one described in this paper (!), that increase the length of the interval over which a single, logical update to the AOS environment takes to complete.It is suggested that this problem of state inconsistency could be solved using a double-buffering technique, where the AOS data required by a client Federate would be requested / received one time step in advance of the current simulation time, allowing for optimal leveling of the AOS network loading.  When simulation time advances, the client would have a fully-reassembled and state-consistent AOS environment which it could switch to essentially instantaneously.  Collection of the AOS data fragments for the next time step would then continue using the buffer containing the now-stale data from the now-previous time step.  Note that to support this double-buffering scheme OASES would need to be extended to support publication of both “current” and “future” AOS data to the Federation.References[1]	Ocean, Atmosphere and Space Environmental Services User’s Manual, Volumes 1 and 2, Version 1.3, Northrop Grumman Information Technology Technical Report TR-A6943C002-01, February 2003.[2]	R. A. Reynolds, et. al., “The Ocean, Atmosphere and Space Environmental Services (OASES) System”, Paper 01S-SIW-047, Proceedings of the Spring 2001 Simulation Interoperability Workshop, March 2001[3]	R. A. Reynolds, et. al., “Using Multiple Representations and Resolutions to Compose Simulated METOC Environments”, Paper 02S-SIW-031, Proceedings of the Spring 2002 Simulation Interoperability Workshop, March 2002Author BiographiesROBERT A. REYNOLDS is a Principal Engineer at Northrop Grumman Information Technology, Defense Enterprise Solutions, and has been the system architect and lead developer for the OASES system and its predecessor TAOS.  His primary professional interests are in the areas of software engineering, object-oriented modeling, visualization, distributed simulation and synthetic environments.  He has a BS in Physics from the Massachusetts Institute of Technology and an MS in Nuclear Engineering from Carnegie-Mellon University.CHRISTOPHER G. SCANNELL is an Electronics Engineer with the Naval Research Laboratory.  He has worked in the Acoustics Division and the Information Technology Division researching distributed simulation applications, virtual reality applications and parallel processing paradigms.  He has a BS in Physics from Georgetown University, a BSEE from the Catholic University of America and an MS in Electrical Engineering from Johns Hopkins University. Support for chemical / biological transport and diffusion modeling was also required by FBE-K, and surface wind data from the Coupled Ocean Atmosphere Prediction System (COAMPS) was published by OASES via SurfaceWeatherGDC objects.  However,  the size of these objects was small and the techniques described by this paper were not required to support their publication. Ultimately the Federation was run on RTI-s, an implementation of a subset of the HAL 1.3 Interface Specification developed by Lockheed Martin Information Systems. OASES would always update the PartitionDescriptor prior to updating the partitions it describes. By “inconsistent” we specifically mean that the AOS state sensed by the client contains a mixture of data from the previous and the current time step, because of the finite time required to update the components of the AOS environment.PAGE  PAGE  1PAGE  PAGE  8