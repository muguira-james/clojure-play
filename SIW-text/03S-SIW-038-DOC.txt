A Framework for Dynamic Federation Execution EnvironmentTae-Dong Lee  Chang-Hoon KimChang-Sung JeongDepartment of Electronics Engineering,Korea University, Anan-5ga SungBuk-Ku,Seoul 136-701, Republic of Korealyadlove@snoopy.korea.ac.kr   manipp@ snoopy.korea.ac.krcsjeong@charlie.korea.ac.krKeywords:RTI, Resource, Framework, Federation Execution Environment	ABSTRACT: The utilization and availability of resources may change computers and network topology when old components are retired, new systems are added, and software and hardware on existing systems are updated and modified. It is rarely feasible for programmers to rely on standard or default configurations when building applications. Rather, applications need discover characteristics of their execution environment dynamically, and then either configure aspects of system and application behavior for efficient and robust execution or adapt behavior during program execution. Therefore, an application requirement for discovery, configuration, and adaptation is fundamental to the rapidly changing dynamic environment. However, the current RTI does not satisfy the above requirements.This paper describes a new framework for dynamic federation execution environment which supports discovery, configuration and adaptation. The proposed framework consists of two components: RTI-independent component and RTI-dependent component. The two components are used for two layers: federation layer and federate layer. In the federation layer, there are resource federation (RFN) and application federation (AFN), and in the federate layer resource manager federate (RMF), resource federates (RFs) and application federates (AFs). RFN is composed of RMF and RFs each per host, and AFN of AFs and RMF. A RMF joining both in RFN and AFN is responsible for communication between RFN and AFN. A RMF in RFN discovers resource information whenever needed, and dynamically deploys the AFs joining a specific AFN by discovering, configuring available resources according to the police of their priorities. The AFs in AFN, deployed into remote hosts, are synchronized to execute create/join operations by the RMF. Therefore, our framework provides an QoS-enhanced execution environment, thus improves the overall performance while maintaining its scalability.IntroductionUntil recently, application developers could usually assume a target environment that was homogeneous, reliable, secure, and centrally managed. Increasingly, however, computing is concerned with collaboration, data sharing, and other new modes of interaction that involve distributed resources. The result is an increased focus on the interconnection of systems both within and across enterprises, whether in the form of intelligent networks, switching devices, caching services, appliance servers, storage systems, or storage area network management systems. In addition, companies are realizing that they can achieve significant cost savings by outsourcing nonessential elements of their IT environment to various forms of service providers. These evolutionary pressures generate new requirements for distributed application development and deployment. Today, applications and middleware are typically developed for a specific platform (e.g., Windows XP, a flavor of Unix, a mainframe, J2EE, Microsoft .NET) [1, 2, 3] that provides a hosting environment for running applications. The capabilities provided by such platforms may range from integrated resource management functions to database integration, clustering services, security, workload management, and problem determination - with different implementations, semantic behaviors, and APIs for these functions on different platforms. But in spite of this diversity, the continuing decentralization and distribution of software, hardware, and human resources make it essential that we achieve desired qualities of service (QoS) on resources assembled dynamically from enterprise systems, service provider systems, and customer systems. We require new abstractions and concepts that allow applications to access and share resources and services across distributed, wide area networks. Such problems have been for some time a central concern of the developers of distributed systems for high-performance research. The one of the solutions for application developers provides the dynamic execution environments. High Level Architecture (HLA) [4,5,6,7] has a wide applicability across a full range of simulation areas, including education, training, analysis, engineering. These widely differing applications indicate the variety of requirements considered in the development and evolution of HLA. While the motivation behind HLA is a common architecture to meet new and changing user needs, applications over HLA are executed by static execution environment that the consideration about resource is not taken into. For example, if two federates exist in LA and NY, a user who is in LA must execute a federate and another user who in NY must execute his federate. This paper calls the above execution environment static execution environment. The utilization and availability of resources may change computers and network topology when old components are retired, new systems are added, and software and hardware on existing systems are updated and modified [8,9]. It is rarely feasible for programmers to rely on standard or default configurations when building applications. Rather, applications need discover characteristics of their execution environment dynamically, and then either configure aspects of system and application behavior for efficient and robust execution or adapt behavior during program execution. Therefore, an application requirement for discovery, configuration, and adaptation is fundamental to the rapidly changing dynamic environment. While the current RTI does not satisfy the above requirements, the main focus of the paper proposes the framework of dynamic federation execution environment for satisfying the above requirements. This paper describes a new framework for dynamic federation execution environment which supports discovery, configuration and adaptation. The proposed framework consists of two components: RTI-independent component and RTI-dependent component. The two components are used for two layers: federation layer and federate layer. In the federation layer, there are resource federation (RFN) and application federation (AFN), and in the federate layer resource manager federate (RMF), resource federates (RFs) and application federates (AFs). RFN is composed of RMF and RFs each per host, and AFN of AFs and RMF. A RMF joining both in RFN and AFN is responsible for communication between RFN and AFN. A RMF in RFN discovers resource information whenever needed, and dynamically deploys the AFs joining a specific AFN by discovering, configuring available resources according to the police of their priorities. The AFs in AFN, deployed into remote hosts, are synchronized to execute create/join operations by the RMF. Therefore, our framework provides an QoS-enhanced execution environment, thus improves the overall performance while maintaining its scalability.The remainder of the paper is organized as follows: Section 2 describes the current static execution environment in HLA. Section 3 explains the proposed framework. Section 4 describes federation layer including the resource federation (RFN) and application federation (AFN) and federate layer including application federate (AF), resource federate (RF) and resource manager federate (RMF) which is the most important component in dynamic federation execution environment. Section 5 gives a conclusion.Background - Static Federation Execution Environmentan HLA federation is partitioned into its major functional components. The first key component is the simulations themselves, called federates. A federate can be a computer simulation, a manned virtual training platform, a supporting utility (such as a viewer or data collector), or even an interfaceFigure 2.1 Static Execution Environmentto a live player or instrumented facility. In HLA, all object representation is in the federates. It imposes no constraints on what is represented in the federates or how it is represented. However, HLA does require all federates incorporate specified capabilities allowing objects in the simulation to interact with objects in other simulations through the exchange of data supported by services implemented in the Runtime Infrastructure (RTI) [7]. The second functional component is the RTI - a distributed operating system for the federates. It provides a set of general purpose services that support interactions among federates. All interactions among the federates go through the RTI. The third component is the interface to the RTI. The HLA runtime interface specification defines the services to be provided by the RTI and the federates, under HLA. It provides a standard way for federates to interact with the RTI, to invoke the RTI services to support runtime interactions among federates and to respond to requests from the RTI. This interface is independent of the implementation of the RTI software and is independent of the specific object models and data exchange requirements of any federation.RTI middleware has emerged as a means of solving problems of heterogeneity (reusability, interoperability) in distributed environments. One of the main functions of middleware is to provide a platform independent programming model. In these systems a common programming interface is achieved regardless of the hardware, the operating system and the language the application is relying on. The current federation execution step in RTI is1.  The all files related to federate are copied to a host computer.2. The user executes the federate when needing the result or visualization of federation. The users execute another federates joining the federation until the all of federates join the federation3. The ending of federation results from the end condition of federation or user’s command of resign and destroyHowever, the steps shown in Figure 2.1 need the user to execute federates. If the host computer is upgraded or exchanged by other computer device, files related to federates are again copied to host computers. If you want to re-execute the federation, all of users in remote place must again execute the federates. The two problems make more cost and worse efficiency.The Framework for Dynamic Federation Execution EnvironmentFigure 3.1 Dynamic Execution EnvironmentFigure 3.1 shows the dynamic federation execution environment. When a user executes federations. The federates are transferred by policy decision to remote hosts, and then federation is executed. The arrow describes the federate transfer and the bold line shows that transferred federates create and join a federation. However, the dynamic federation execution can be not made by only RTI.Frameworks are a kind of middleware. For clarity, we therefore use the term “middleware services’’ for underlying distributed system services and “middleware’’ for middleware services and/or frameworks. A framework’s API may be a profile of APIs for a set of middleware services, or it may be a new API that simplifies the APIs of underlying middleware services that it abstracts.Since a framework layers on middleware services, a framework provider is a customer of middleware services. By the same token, an application that layers on a framework is the framework’s customer, and only indirectly the middleware service’s customer. Given the wide variety and complexity of middleware services, a substantial and growing fraction of applications depend on frameworks to simplify their underlying middleware environment rather than directly accessing middleware services. This is analogous to the past trend of applications to move away from direct use of platform services and rely more heavily on more abstract middleware services.Figure 3.2 shows the framework of dynamic federation execution environment which is composed of the following components: RTI-dependent component and RTI-independent component. RTI-dependent component uses API (Application Programmer Interface) defined in HLA Interface Specification (HLAIS), which includes the functions of resource monitoring and federation communication. RTI-independent component uses self-supporting services composed independently with HLAIS including the functions of FTP and policy decision.3.1 RTI-dependent ServicesRTI-dependent services use API (Application Programmer Interface) defined in HLA Interface Specification and include the functions of resource monitoring/controlling and federation communication. Resource monitoring/controlling use the publish / subscribe / UpdateAttributeValues (UAV) / SsendInteraction (SI) services and provide the functions of resource management and federation control. Federation communication use the time management services and presents the functions for communication of multiple federations3.2 RTI-independent ServicesRTI-independent services use self-supporting components including the functions of FTP and policy decision. FTP which is the Internet standard for file transfer is responsible for federate transportation. The file transfer provided by FTP copies a complete file from one system to another system. Policy decision decides the policy of federate transfer by users. The information of policy decision may come from user preferences files, applications themselves, and graphical resource management tools. There might be rules about how temporal properties indicate which applications are more important (e.g. giving recently created applications preference over older applications). Also, there might be rules about how past usage should affect future reservation.Federation and Federate LayerThe framework of dynamic federation execution environment is used for two layers: federation layer and federate layer. Federation layer is composed of Resource Federation (RFN) Application Federation (AFN). Federate layer is comprised Resource Manager Federate (RMF), Resource Federate (RF), and Application Federate (AF).4.1 Resource Federation (RFN)Figure 4.1 Resource FederationRF (Resource Federate) is located at each host like daemon. If the RMF requires the resource information after subscribing, RF provides the information by publishing. The architecture is server-client architecture.Figure 4.2 Resource Class DiagramClass diagram about resource is shown in Figure 4.2. Resource class has the device information such as vendor efficiency, capacity, and version etc. Resource class is inherited by many resource-related classes such as CPU, Bandwidth, Memory, Harddisk. If you want to add the VGA, you only inherit Resource class and implement the function needed.Application Federation (AFN)Figure 4.3 explains the federation architecture in the framework of dynamic federation execution environment. The communication among federations and communication among federates are shown, which is made by RTI.Figure 4.3 Application FederationDiscovery-Configuration-AdaptationFigure 4.4 Federate Phase and Federation PhaseA discovery service records the identity and essential characteristics of services available to federation members. Here, information sources are relatively static and the information itself relates primarily to availability. Resource management must provide the capability to configure resources. Such configuration / reconfiguration may be required for several reasons. First, in order to maintain system reliability resources may need to be migrated when hosts are shut down or have failed, or when hosts move to a new location or take on a new function. Second, in order to maintain consistent performance, resources may need to be dynamically migrated during periods of peak usage, during system partitions, or when hosts have failed because fewer resources are available. Under such circumstances, it is useful to provide additional resources at heavily loaded parts of the distributed system. Finally, in addition to creating or migrating resources, information must be kept about their location so that access can be granted and consistency among replicas maintained. A third function of resource management is to monitor and display status information for the system’s operators. Resource monitoring also provides the underlying information for deciding how to allocate resources and reconfigure thesystem. Moreover, in a large distributed system typical of tactical environments, it is desirable to decentralize this monitoring function, and to provide an architecture that minimizes the cost of propagating the information it collects.Using framework of dynamic federation execution environment takes two phases : first federate phase, second federation phase. Figure 4.4 describes the two phases. Federate phase is composed of two steps. The first step is init step that the resource manager federate (RMF) controlled by user gathers the resource information through RTI-dependent services. The RMF transfers the federates into remote or local host through FTP ny policy decision. This is Transfer step. The federation phase is composed of three steps. The Join step is that the RMF controlled by user joins into the application federation. The AFN (Application Federation) Start step is that the RMF commands the start of AFN because of the difference of transfer speed. The AFN End step is that AFN is ended and AFN informs the end of federation to the RMF4.4 RMF (Resource Manager Federate)Resource Manager Federate (RMF) monitors resource information from hosts and transfers the federate to hosts by policy of simulation and joins into application federations and controls the start of federation. Also, sometimes RMF plays a role as exchange of communication between AFs, and then RMF is called Multi Port Federate (MPF) which implements multi-federation structure [10].4.4.1 Federate View of RMFFigure 4.5 shows the federate view of RMF which joins both the Resource Federation (RFN) and Application Federations (AFNs). RMF monitors the resource information from Resource Federate (RF) and controls AFN for synchronization. Gathered resource information is used for discovery and configuration of federates. A more sophisticated approach is to construct a personal resource broker and combines information about user authorization, application requirements and resource status to build a list of candidate resources. These resources will be queried to determine their current status, and jobs will be submitted to appropriate resources depending on the results of these queries. Available resources can be ranked by user preferences such as allocation cost and expected start or completion time.4.4.2 Federation View of RMFFigure 4.6 The Federation View of Resource Manager FederateFigure 4.6 explains the federation view of RMF, which includes the FOM of RF and FOMs of two AFNs. The communication between federations means the data exchanges between them. RMF gathers the resource information by on-demand method that RFs per host publish their resource information to RMF when RMF only requires the resource information. If several federations exist, multi federation is made.Figure 4.7 shows the sequence diagram of RMF. When a user starts a federation, RMF requests the resource information defined in FOM from each RF, and then each RF sends the resource information. After RMF decides hosts where federates are transferred to from policy decision by sent resource information, RMF sends the federate by FTP. The transferred federates create and join into AFN, and send the join_ACK. After RMF receives all join_ACKs from AFs, it sends the start simulation command to AFN. Finally AFN is executed. If all AFs resign and AFN is destroyed, RMF receives End_AFN message. The difference between dynamic execution and static execution is shown definitely in Figure 4.7. The AFN Execution box shown is only needed in static execution environment.Figure 4.7 Sequence Diagram of RMF4.4.3 Multi Federation View of RMFFigure 4.2 showed the multiple join of RMF into federations. There are several schemes for implementing multi-federation structure. One is to use a bridge federate, which has been proposed by Braudaway (1997) [10] and Bouwens, Hurrell, Shen (1998) [11]. The other is to employ a Multi Port Federate (MPF), which we are proposing. Time management and ownership management in multi-federation structure was also proposed [11, 12]. If needed, RMF can construct the multi federation into hierarchical federation structure because multi-level simulations be integrated into one simulation and security management is easy.Conclusion and Future WorkThis paper described a new framework for dynamic federation execution environment whichsupports discovery, configuration and adaptation. The proposed framework consists of two components: RTI-independent component and RTI-dependent component. The two component s were used for two layers: federation layer and federate layer. In the federation layer, there are resource federation (RFN) and application federation(AFN), and in the federate layer resource manager federate (RMF), resource federates (RFs) and application federates (AFs). RFN is composed of RMF and RFs each per host, and AFN of AFs and RMF. A RMF joining both in RFN and AFN is responsible for communication between RFN and AFN. A RMF in RFN discovers resource information whenever needed, and dynamically deploys the AFs joining a specific AFN by discovering, configuring available resources according to the police of their priorities. The AFs in AFN, deployed into remote hosts, are synchronized to execute create/join operations by the RMF. Therefore, our framework provides an QoS-enhanced execution environment, thus improves the overall performance while maintaining its scalability. Moreover, we showed the federate and federation view of RMF. The proposed framework provides the addition of resource dimension to the existing 2-dimension composed of communication and application. Figure 5.1 shows the addition of resource dimension to the previous static execution environment (communication and application). The expansion of resource dimension brings the advantages to the previous 2-dimensional RTI(communication and application) that application is deployed and executed in platform-independent environment, and communication is managed dynamically and is provided with better performance. The proposed framework provides the described merits.Table 5.1 explains the comparison between static and dynamic federation execution environment. While static method needs a user per host and has hardware device dependent characteristics, dynamic method needs a single user and hardware device independent characteristics. The advantage makes cost less. While dynamic method needs the FTP and resource federate(including resourceFigure 5.1 The addition of Resource Dimension to Static 2-dimension (Communication and Application )manager federate), static method does not need these components. If you develop the real time simulation or QoS-related application, our framework provides an QoS-enhanced execution environment, and improves the overall performance while maintaining its scalability.Execution EnvironmentStaticDynamicUserA User per HostA Single UserResourceHardware DependentResource IndependentEnvironmentStaticDynamicPerformance EfficiencySystem DependentAlwaysBestFTPNot NeededNeededResource M/CNot NeededNeededTable 5.1 Comparison between Static and Dynamic Federation Execution EnvironmentWhile scalability, performance and heterogeneity are desirable goals for any distributed system, the security problems [13] happen because existing security technologies are not addressed for RTI and our framework. For example, applicationsthat acquire resource information need to establish security relationships between federation and RMF. We are considering addition of the security to our implementation. Also, the load of RMF is high because RMF gathers resource information, decides the transfer of federate, controls the federation execution and communicates between federations. The distribution of RMF is considered.Reference[1] Sun Microsystems: “Documentation Center” http://www.sun.com[2] Microsoft: “Microsoft Technical Resources” http://www.microsoft.com/net/technical[3] Java 2 Platform, Enterprise Edition (J2EE) http://java.sun.com/j2ee[4] U.S. Department of Defense(DMSO): “High Level Architecture Interface Specification  Version 1.3” http://hla.dmso.mil, 1998.[5] U.S. Department of Defense(DMSO): “High Level Architecture Object Model Template” http://hla.dmso.mil, 1998.[6] U.S. Department of Defense(DMSO): “High Level Architecture Rules Version 1.3”     http://hla.dmso.mil, 1998.[7] U.S. Department of Defense(DMSO): “High Level Architecture Run-Time	Infrastructure (RTI) Programmer's Guide Version 1.3” http://hla.dmso.mil, 1998.[8] K. H. Kim and Juqiang Liu: “QoS-driven Resource Management in Real-Time Object Based Distributed Computing Systems”, Proceedings of the Eighth IEEE Workshop on Future Trends of Distributed Computing Systems (FTDCS.01)[9] Osamu Nakamura, Nobuo Saito: “Resource Management Scheme in Distributed Environment”, ACM, 1988[10] Wesley Braudaway: “The High Level Architecture’s Bridge Federate”, SISO, Fall 1997.[11] Christina Bouwens, Daphne Hurrell, David Shen: “Implementing Ownership Management Services with a Bridge Federate”, SISO, Spring 1998.[12] S.Ninomiya, E. Murakami, Y. Takeuchi: “Hierarchical Multi-Federation Structure of the Sensor Data Fusion Simulation in JUSA”, SISO, Fall 1998.[13] Ian Foster, T. Karonis, Carl Kesselmany, Greg Koenig, Steven Tuecke: “A Secure Communications Infrastructure for High-Performance Distributed Computing”, Proc. 6th IEEE Symp. on High Performance Distributed Computing, 1996Figure 3.2 The Framework of Dynamic Federation Execution EnvironmentFigure 4.5 The Federate View of Resource Manager Federate