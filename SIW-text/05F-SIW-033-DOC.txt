: A M&S Framework for Large Scale Simulations Based on the HLAMasakazu Furuichi, Shusuke Watanabe, Shuichi Takahashi, Kazuhisa Okada, Hiroshi Hosono, Yasushi Kawazoe, Yutaka MihoriMitsubishi Electric Corporation , Information Systems Development Department, Kamakura Works325, Kamimachiya, Kamakura,  247-8520 JAPANMasakazu.Furuichi@kama.melco.co.jpAtsuo Ozaki, Isao Aoyama, Hidetoshi Tanaka, Hiroyuki Satoh Mitsubishi Electric Corporation, Information Technology R&D Center,5-1-1, Ofuna, Kamakura, 247-8501 JAPANKenichi Kambe, Yoshio Gosho, Kazuhiro AoyamaMitsubishi Electric Corporation, Integrated Defense & Space Systems Business Development Department2-2-3, Marunouchi, Chiyoda-ku, Tokyo, 100-8310 JAPANKeywords:IEEE Std 1516, HLA, FEDEP, M&S framework, MARSABSTRACT: In order to realize an efficient research and development (R&D) of the large-scale complex System of Systems (SoS), such as nation wide disaster prevention systems or defense systems, effective use of simulation plays a very important role, in the designing and evaluating phases of the system concepts, as well as in the following developing phase of such systems.  In the past, ingredient systems of the total complex SoS have been developed independently to realize such SoS level simulations.  In order to integrate multiple systems to design the total complex SoS, it is clear that the HLA and the FEDEP are promising concept and process. However, in reality, the HLA and the FEDEP are not enough to build such simulation efficiently, since we do not have a common framework for modeling and simulation (M&S) based on the HLA and the FEDEP..This paper proposes a M&S framework called (Mitsubishi Architecture Framework Required for Modeling and Simulation Systems), which is required for the efficient development and execution of the large-scale simulation.   consists of software components for simulation infrastructure and utilities, and guideline documents.  Characteristics of  includes the followings. (1) A federation development and execution process is based on the FEDEP, and some of the activities are more specifically defined to increase the practicality. (2) A simulation engine is composed of multiple federates for a scalability. (3) An explainable simulation can be efficiently achieved by introducing  M&S framework. In this paper, we will describe the overview of the  M&S framework. We will also show several limitations of current HLA specifications for realizing  M&S framework. In the rest of this paper, we will call  as MARS.1.  IntroductionIn the area of large-scale complex system development, such as nation wide disaster prevention systems, advanced ITS (intelligent transport systems), and defense systems, it is essential to design and evaluate the concepts of such systems, before we will proceed to build actual systems. Although the components of such systems have been designed and developed based on the simulation, SoS level concept design and evaluation have been done mathematically, statistically or experimentally using macro level simulation. However, as the system becomes more complex, macro level modeling of such systems are becoming harder. Simultaneously, as the performance of computer becomes fast and the parallel and distributed simulation methods becomes more popular, the micro level simulation scheme is becoming more practical for a large-scale complex system level simulation. Since we are a general electronics systems manufacturing company which manufactures ITS systems, satellite image and communication systems, defense systems and so on, it is a consuming of time and money to develop simulation systems for each product in a different way, without re-using methods, developing process or components. Therefore, we have started to study and develop a modeling and simulation framework which enables the efficient development and execution of such simulations.In the following sections, we will describe the basic concept of our M&S framework which is called MARS in Chapter 2. In Chapter 3, we will show our interpretation and extension of IEEE Std 1516.3 FEDEP (Federation Development and Execution Process), which is a core idea and the process of MARS. In Chapter 4, we will introduce the overview of the MARS software environment which is based on the HLA. Finally, in Chapter 5, we will describe the idea and functions of MARS explainable simulation capability. 2.  Basic Concept of MARS M&S FrameworkThe MARS is a M&S framework required for an efficient development of large and complex systems, and it is aimed to be used internally in Mitsubishi Electric Corp.  The MARS is composed of guideline documents, software components and tools, and they are evolutionally under developing.  The MARS framework is designed based on the following concepts. Figure  SEQ Figure \* ARABIC 1 MARS Federation Development and Execution ProcessIn order that MARS can be widely applicable to variety of systems development, MARS complies with the M&S development and execution process standards IEEE Std 1516.3 FEDEP. However, since FEDEP is a recommended practice which means that some products are not rigidly defined, we define our standards so that the users of MARS can apply this process easily.In order that MARS can be applied to very large-scale simulation, MARS simulation run-time environment inherently run in parallel and distributed environment, based on the HLA. Since the purpose of simulation is to give a user a method to do virtual experiments on a computer, the role of MARS is to provide an efficient method and tools to do virtual experiments. In order to do a simulation efficiently, only to provide a method for simulation is not enough, since a user spends much of the time for the analysis of the simulation result phase.  Therefore, the MARS is designed to provide methods, tools and the guideline to enable explainable simulation. The term “explainable” means that the result of the simulation can be always explainable by showing the event which caused that result at after action review phase.  3. MARS Federation Development and Execution ProcessFigure 1 shows an overview of the MARS Federation Development and Execution Process. It is based on the FEDEP, and several activities are merged for the simplicity. As the figure shows, since the M&S repository is in the center of the MARS, we call that MARS is a repository centric development and execution process. Five steps of the MARS process are as follows. ModelingThe simulation user clarifies the objectives of the simulation by itemizing the purpose, evaluation method and criteria of the simulation. When the user defines criteria of the simulation, the user also has to define the validation methods for the simulation result. Then, the user describes the simulation by drawing a general overview of the simulation scenario (overview scenario). After that, the user performs conceptual analysis to derive conceptual models by analyzing overview scenario and applying domain knowledge. Throughout this phase, the user refers to the M&S repository to re-use the existing objective documents, overview scenario and conceptual models. At the end of this phase, the products of this phase have to be reviewed by the MARS committee. The MARS committee consists of   the stakeholders, authorities who have domain knowledge, and the potential simulation users.    ImplementationBased on the conceptual model derived in the previous phase, the user designs and implements a federation, develops a FOM and scenario instance. In order to design a federation, the user retrieve appropriate existing federates which match the conceptual models. If there are no reusable federates, the user designs federates by referring to the design documents of existing federates, and implement them. Then, scenario instances are developed.  ExecutionThe user executes a simulation or simulations, and prepares outputs required for post execution phases. Verification of the simulation is also achieved in order to verify the simulation result.Analysis and evaluationThe user analyzes the output data using commodity tools, and MARS analysis tools which support MARS explainable simulation.  V&AFigure 2 MARS software environmentThe user validates the achieved simulation by applying the criteria which was given in the phase of modeling. The user prepares a set of documents which describe the validation results. Then, the MARS committee accredits the simulation based on the documents prepared by the user. The products required for each step are defined by IEEE Std 1516.3 FEDEP. However, MARS recommends the specific format and styles for products. For instance, MARS recommends to use DoDAF OV-1, 5, 6abc (operational view) for a “needs document”, and to use OV-2,3,4 for  “federation objective statements”. It also recommends other DoDAF OV, SV(system view) and TV(technical view).  4. MARS Software EnvironmentIn order to apply MARS for a large scale system developing process, MARS provides software environment which is shown in Figure 2. It is composed of three groups of tools, templates and libraries. First group is a pre-simulation phase tools which contains model and scenario editor and so on. Second group is a simulation execution phase tools and templates which contains a simulation engine, logger, foreign systems interface and base model templates.  Third group is a post-simulation phase tools which contains analysis tools. MARS also provides a document called “MARS guideline” which guides the users in applying MARS process and software environment to their simulations.The major characteristic of MARS software environment is that a simulation engine which consists of more than one federates runs on multiple of computers, and the federates communicate through the HLA.   In the conventional simulation engine such as the FLAMES [1], a simulation engine runs on a single computer, or a simulation engine runs on multiple of computers by communicating through their own protocols, not the HLA. The basic idea of constructing a simulation engine based on the HLA is described in [4]. The advantage of  introducing this idea is that we can obtain a scalability to a simulation engine, which is essential to a large scale system of systems level simulation.  5. MARS Explainable Simulation CapabilityThe purpose of simulation is to provide a method to investigate the phenomena which occurs in the real- world .  For this purpose, the most important thing for the simulation is to derive simulation results which is enough informative to analyze the phenomena. In order that the user can analyze the phenomena after the simulation, the simulation have to save the changes of the internal states and events to the log files. However, since the resources of the recording media such as the hard disks has a limitation, it is impossible to record all internal states and events, and this might prevent the capability of simulation. Under the constraints of such resource limitations, in order to maximize the simulation capabilities, we have introduced the “explainable simulation capability” to MARS.MARS explainable simulation capability is a set of functions and tools to support the efficient analysis of simulation. Figure 3 is an example that shows the explainable simulation capability. This example shows the simulation result viewer of a car traffic simulation. In the conventional result viewer, the user observe the car traffic by watching the viewer like a VCR player, and discovers a car crash at the time of 100 (T=100). In order to investigate how the car crash happened, the user replays the viewer again and again until he specifies the cause. However, by using the MARS explainable capability, when the user discovers a car crash at the time of 100, by clicking a button to “explain the cause” of the car crash, it displays the event that occurred before the time of 100. In the example, the event that occurred before the time of 100 is that a car B turned on a right turn signal at time 93. It means that both of the cars A and B did not decrease their speed between the time of 93 and 100. The user knows this is a direct cause of a car crash, but why did it happen? Figure 3 Example of Explainable CapabilityThen, the user clicks a button to “explain the cause”, it displays the event that occurred before the time of 93. In the example, the event was a car B’s left turn signal at time of 88. Now, the user knows that the reason that the car A did not decreased the speed is that the driver of the car A might have looked at the left turn signal of the car B, but he did not noticed the event of right turn signal at the time of 93. The process of exploring the cause of the car crash shown above is very similar to the process that we do manually using a conventional simulation result viewer. However, the MARS explainable simulation capability does some of the work automatically. Figure 4 shows the basic idea and the structure of MARS explainable simulation capability.When the user models the target to be evaluated, the user also defines the objective of the simulation and the criteria to evaluate the result. This information is important at run-time for model database and scenario instances to reduce the size of log files. By applying this information, we can add appropriate logging rules to models and scenarios. In the figure, it shows that it can be done by the MARS explainable scenario editor.  Figure 4  MARS explainable capabilityWhen the simulation is executed, MARS run-time environment, which consists of MARS simulation engine and MARS logger produces log files. One is a state log file which contains the required internal states of specified objects. The other is a causality log file which contains the events generated by and input to the specified objects, which might causes the phenomena that is related to the simulation objectives, and the evaluation criteria.  After the simulation execution, the user uses MARS result explain engine to analyze and evaluate the results. It uses two types of log files to explore the result and the causal events.  6. Conclusion This paper described the overview of MARS, a M&S framework for large scale simulations based on the HLA. MARS is a federation development and execution process based on the IEEE Std 1516.3 FEDEP, and it defines and specifies products and tools to enhance the usability.  MARS is also a software environment which supports MARS process. MARS software environment consists of pre-simulation tools, simulation execution tools and libraries,  and post-simulation tools. The characteristic of simulation execution tools and libraries is that a simulation engine is composed of multiple of federates, in order to obtain the scalability. Although the HLA can support the basic functions of this feature, but several extensions has to be considered in the future HLA I/F specification. One of the extensions to be considered is to introduce the effective logical time to a publish/subscribe services. In the current HLA I/F specification (both in HLA 1.3 and IEEE Std 1516.1-2000), since we can not specify and ensure the effective logical time of these services, MARS run-time environment can not ensure the logically correctness of data dependencies, when the simulation uses these services repetitively at run-time. In order to make MARS practicable, a consideration of such extensions has to be taken to ensure the causality, and this is our future work.  We also would like to feed back the result to the future HLA I/F specifications.The other characteristic of MARS software environment is that MARS can support explainable simulation. In this paper, we have defined “explainable simulation” that the system can show the cause of the simulation result interactively and efficiently. In  conventional simulation environments, the “explainable simulation” was achieved manually by the users, utilizing the huge execution log files. However, by introducing an explainable extensions to the model and scenario, MARS can reduce the size of the execution log file, and also it can increase the efficiency of supporting the analysis and evaluation process. References[1] Caudill, D., Lt. Like, E., Zeh, J.: “Net-Centric Modeling, Simulation, and Analysis”, ’05 Spring Simulation Interoperability Workshop, 05S-SIW-060, 2005.[2] Furuichi, M., Ozaki, A., Abe, K., Nakajima, K., Tanaka, H.:  “A Space-Time Object Model - An Object Oriented Model for Parallel and Distributed Simulation –”, IEICE Trans. Inf. & Syst., Vol. E83-D No.4, pp. 815-823, 2000.[3] Furuichi, M., Mizuno, M., Izumi, H., Ozaki, A., Watanabe, S., Tokumoto, S.: “The Applicability of High Level Architecture to Distributed Cooperative Processing Systems”, Proc. of IEEE SMC'99 Conference, Vol. I, pp. 6-11, 1999.[4] Furuichi, M., Mizuno, M., Izumi, H., Ozaki, A., Takahashi, K., Satou, H., Matsukawa, H., Aoyama, K.: “The Applicability of High Level Architecture to Large Scale Parallel and Distributed Simulation”, Proc. of the '99 Spring Simulation Interoperability Workshop, Vol.2, pp. 466-473, 1999.[5] IEEE-SA Standards Board : “IEEE Standard for Modeling and Simulation High Level Architecture HLA - Framework and Rules –”, IEEE Std 1516-2000, Sept., 2000.[6] IEEE-SA Standards Board : “IEEE Standard for Modeling and Simulation High Level Architecture HLA - Federate Interface Specification –”, IEEE Std 1516.1-2000, Sept., 2000.[7] IEEE-SA Standards Board : “IEEE Recommended Practice for High Level Architecture HLA Federation Development and Execution Process FEDEP”, IEEE Std 1516.3-2003, April, 2003.[8] Ozaki, A., Furuichi, M., Nishi, N., Kuroda, E.: “The Use of High Level Architecture in Car Traffic Simulations”, IEICE Trans. Inf. & Syst., Vol.E83-D No.10, pp. 1851-1859 (2000).[9] Takada, T., Yonezawa, K., Watanabe, S., Aoyama, A., Furuichi, M. , Yumi, N.: “Experiences and Lessons Learned through DMSO Verification Test for ERTI”, '01 Fall Simulation Interoperability Workshop, Vol.1, pp.184-190, 2001.[10] Trbovich, S., Reading, R.: “Simulation Software Development for Capabilities Based Warfare: An Analysis of Harmonized Systems Engineering Processes”, ’05 Spring Simulation Interoperability Workshop, 05S-SIW-106, 2005. Author’s BiographiesMASAKAZU FURUICHI is a manager of Modeling and Simulation Section at Information Systems Department, Kamakura Works, and also a Head Researcher at the Information Technology R&D center (ITR&D), Mitsubishi Electric Corporation. His research interests include HLA based M&S framework, parallel and distributed simulations, dynamic load-balancing of parallel processing, parallel object oriented languages and logic programming. Dr. Furuichi received his B.L.A. in Computer Science from Hiroshima University in 1982, his M.S. in Computer Science from University of Illinois at Urbana Champaign in 1994, and his Ph.D. from Keio University in 2004. He is a member of IEEE, ACM, SCS, AIAA, JSST, IEICE and IPSJ.SHUSUKE WATANABE is an engineer of C4I Systems, Information Systems Department at Kamakura Works, Mitsubishi Electric Corporation.  He received his B.L.A. from the University of Tsukuba in 1990. His research interests include distributed and parallel systems, and multi-agent systems. He is a member of IPSJ.SHUICHI TAKAHASHI is an engineer of C4I Systems, Information Systems Department, Kamakura Works, Mitsubishi Electric Corporation. Dr. Takahashi received B.E., M.E. and Ph.D. from Waseda University in 1989, 1991 and 2000 respectively. He is a member of IEEE and IEICE.KAZUHISA OKADA is an engineer of Defense and Space Systems Section at Information Systems Department, Kamakura Works, Mitsubishi Electric Corporation. He received B.E and M.S from the University of Tokyo Agriculture and Technology in 1988 and 1990 respectively. His research interest includes AI, human interface and modeling and simulation. HIROSHI HOSONO is a manager of Defense and Space Systems Section at Information Systems Department, Kamakura Works, Mitsubishi Electric Corporation. His research interests are the architecture and application of distributed simulation systems. He received B.E. from Chuo University in 1987. He is a member of AFCEA.YASUSHI KAWAZOE is a senior manager of Modeling and Simulation Section at Information Systems Department, Kamakura Works, Mitsubishi Electric Corporation. He received B.E. from Waseda University in 1984. YUTAKA MIHORI is a director of Information Systems Department at Kamakura Works, Mitsubishi Electric Corporation. He received B.E and M.S. in Electrical Engineering from Kyoto University in 1976 and 1978 respectively, and M.S.E. in Electrical and Computer Engineering from the Johns Hopkins University in 1990.ATSUO OZAKI is a head scientist at ITR&D, Mitsubishi Electric Corporation. Dr. Ozaki received his B.E., M.S., and Ph.D. degree in Computer Science from Kyushu Institute of Technology, Japan in 1988, 1990, and 2001 respectively. His research interests are architecture of parallel machines, dynamic load balancing, and parallel and distributed simulations. He received the Best Paper Award in 8th European Simulation Symposium, 1996. Dr. Ozaki is a member of IEEE, IPSJ, and IEICE.ISAO AOYAMA is a research engineer at ITR&D, Mitsubishi Electric Corporation. His research interests include optimization schemes and modeling and simulation. He received B.E. and M.S. from Kobe University in 1988 and 1990. He is a member of IEICE. HIDETOSHI TANAKA is a research scientist at ITR&D, Mitsubishi Electric Corporation. His research interests include data analysis and optimization schemes. He received B.E. from Tokyo University in 1986.  He is a member of IEEE CS and IPSJ.   HIROYUKI SATO is a manager of Parallel Processing Team at ITR&D, Mitsubishi Electric Corporation. His research interests are architecture of parallel computer systems, dynamic load balancing and parallel languages.  Dr. Sato received his B.E., and Ph.D. in Information Sciences from University of Tsukuba in 1982 and 2003 respectively. He is a member of IPSJ.KENICHI KAMBE is a system engineer of Integrated C4ISR Project section at Integrated Defense and Space Systems Business Development Department, Mitsubishi Electric Corporation. He received his B.E.E. and M.S from Meiji University in 1991 and 1993 respectively.YOSHIO GOSHO is a manager of Integrated C4ISR Project section at Integrated Defense and Space Systems Business Development Department, Mitsubishi Electric Corporation. He received his B.E.E. from Hosei University in 1986.  KAZUHIRO AOYAMA is a deputy director of Integrated Defense and Space Systems Business Development Department, Mitsubishi Electric Corporation. His research interests are distributed simulations and distributed computing. He received his B.Eng. and M.Eng. in instrumentation engineering from Keio University in 1983 and 1985 respectively, and his M.S. in computer science from the University of Illinois at Urbana Champaign in 1993.