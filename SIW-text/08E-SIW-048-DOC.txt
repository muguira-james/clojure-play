Integration of Modelling Tools for Communication Protocols using HLAArnaud GuillaumeEADS Astrium31 avenue des cosmonautes,31402 Toulouse cedex 4, France+33.5.62199078 HYPERLINK "mailto:arnaud.guillaume@astrium.eads.net"arnaud.guillaume@astrium.eads.netPeter ShlyaevGTI633 avenue Kennedy,91300 Massy, France+33 1 72823060 HYPERLINK "mailto:petr.shlyaev@gti6.com"petr.shlyaev@gti6.comN. SilvaCritical SoftwareParque industrial de Taveiro, Lote 48,3045-504 Coimbra, Portugal+351 239989100 HYPERLINK "mailto:nuno.silva@criticalsoftware.com"nuno.silva@criticalsoftware.comL. Arguello, C. MorletESA/ESTECKeplerlaan 1, PObox 299,2200AG Noordwijk Zh, The Netherlands+31.71.56.53706 HYPERLINK "mailto:luis.arguello@esa.int"luis.arguello@esa.int ,  HYPERLINK "mailto:catherine.morlet@esa.int" catherine.morlet@esa.intKeywords:Interoperability, parallelization, supervision, frameworkABSTRACT: Distributing a large simulation among several computers is often regarded as an issue for the performance of the system and for its usability. This is even more complex when this simulation is made of heterogeneous models:using different Commercial Off-The-Shelf (COTS) simulation frameworks such as OPNET, Matlab/Simulink and custom C/C++ models,possibly running on different operating systems (Windows, Solaris, Linux)and relying on different simulation advancement mechanisms (event-driven or time-driven).The paper presents a framework supporting the end user for automated model distribution, remote monitoring and control of distributed components of simulations. Also, a dedicated development process is specified guiding the model developers from building and through deploying their models into an integrated and optimized simulation.The Distributed Heterogeneous Simulation Environment (DHSE) was validated by and first used for telecommunication system end-to-end simulations, where each layer of the protocol stack needs a dedicated COTS tool, as some aspects are better suited to an event-driven type of simulation while other algorithms are easier to implement with a time-driven simulator. This work is carried out within the ESA contract 18660/04/NL/JA under the responsibility of EADS Astrium (F) and its partners Critical Software (P) and GTI6 (F).The selection of technologies used for DHSE is first presented. Then we elaborate on the architecture of DHSE, relying both on mature standards (HLA for interoperability, MPI for parallelization) and project-specific solutions with a focus on the integration with heterogeneous COTS. Finally, we describe the methodology devised towards both models developers and simulator end users.Introduction. New point-to-point satellite communications services, together with the use of higher frequency bands with severe propagation impairments, introduction of more efficient power and bandwidth transmission schemes, to name some recent trends, need intensive computations in order to validate their performance. System validation tools for today’s and next generation communication systems need indeed to take into account a high number of beams, many users, and extremely low packet error rates, and this calls for distributing simulations among different available computing resources. For several years, engineers and researchers were focused on the way to achieve efficient parallel computing, and techniques such as CORBA (Common Object Request Broker Architecture), HLA (High Level Architecture), and GRID are today well known and have a great potential for solving complex end-to-end communications systems simulations.In parallel, the latest years have seen evolving different commercial engineering tools used for complex system analysis. These different COTS tools have their own preferred field of application: some of these tools are, for example, particularly suited to develop signal processing and physical layer simulations, while others focus more on upper layers. When an end-to-end system simulation is needed, these tools are most of time very complementary. However, this kind of end-to-end system simulation cannot be achieved easily and efficiently because these tools have not been designed to work together and interoperate. This paper presents the result of the DHSE project aiming first at developing a simulation framework and methodology with the following goals:Allowing interoperability between different COTS tools utilized in telecom simulations in order to accelerate simulations development by using the most suited tools to develop each component of the simulation. This would allow better efficiency in re-using existing tools and programs and make them communicating with each other, e.g.: easy plugging between a tool developed for digital beam forming subsystem validation and another tool developed for beam projection visualization, or joint simulation of advanced schemes for interference mitigation developed using a time-driven signal processing tool with simulation developed resource allocation protocols based on event-driven simulation tool. Allowing parallel execution of these time consuming simulations in order to reduce qualification and validation schedules. Parallel execution could be operated on different types of operating systems (e.g. LINUX, UNIX, and WINDOWS) or hardware. In order to achieve parallel execution, a methodology shall be defined before programming the components.Modeled System breakdown. The whole simulation within DHSE is specified using the following system breakdown ( REF _Ref150058392 \h Figure 1).The terms used in this scheme are described below:The “system” represents a predefined set of computers potentially available for DHSE, together with OS, COTS and other software (including DHSE and models).A “federation” is an autonomous set of federates working together in order to achieve the simulation’s objectives. An instance of the DHSE tool shall be able to run one federation at a time. Thus, in case several federations are to be executed in parallel over the system (i.e. the LAN), it is envisaged to launch as many DHSE instances as the number of federations.A “federate” is a model with added capability to communicate with other models through Data Exchange Service (DxS).A “process” is an execution flow in the sense of UNIX processes. It could be also a “light-weight process” (or “thread”). One federate is usually made of only one process, except in case of optimization, where it can be composed of several processes (and/or threads) running on several computers (and/or CPUs).Technologies and COTS evaluatedThis system breakdown defines 3 different layers that compose the system. Each of these layers was foreseen to be implemented according to a dedicated technology. Among various software or hardware technologies, the assessment process was performed on:HLA and CORBA for the interoperability layer,MPI and threads for the optimization layer,GRID for the system supervision layer.Since the goal was not to implement one of the above technologies, the analysis was focused on already available solutions (COTS) listed hereunder.MÄK RTI, Pitch RTI (HLA tools)TAO, JDK (CORBA tools)WMPI, MPICH (MPI tools)Globus (GRID tool)GeneSyS, HP OpenView, IBM Tivoli, Nagios (supervision tools not related to GRID).Assessment resultsFor the optimization layer, the recommended solution was WMPI. The main reason was its very high efficiency at a reasonable cost. This COTS is applicable for all C/C++ models when parallelization of algorithms is possible. It has been also noted that MATLAB and OPNET simulation kernels provide their own optimization techniques that are applicable to MATLAB or OPNET models.Concerning the supervision layer, GeneSyS was originally defined for distributed heterogeneous systems supervision, and the analysis has demonstrated it can be applicable to DHSE (i.e., reused) with the benefits of an open source product. The other COTS, compared to GeneSyS have been considered as too complex or too expensive. In addition, at the time of this study, the GRID technology was rejected because it was not mature enough and also is more applicable to offline simulation results exchange than to interoperable simulations which exchange their results at each simulation step.Lastly, for the interoperability layer, the analysis was first to select between the two technologies. The main conclusion was that even if CORBA were a very flexible and powerful solution, it is not designed at all for the simulation world while, on the opposite, HLA was designed solely for that purpose. The HLA COTS selection was then performed and the key criterion was the easiness of the integration of this COTS with simulation platforms such as OPNET and MATLAB. This has lead to selection of the particular RTI (from MÄK).DHSE implementationPhased approach.DHSE is a software framework including development and run-time support products. The development, deployment and execution of a simulation based on DHSE is performed in different phases, in which different elements have (or not) a different role:Phase 0: Federates integration. Models are encapsulated with some specific interface to form the federates as described in the programming methodology,Phase 1: Federation preparation. The whole simulation is constructed by assembling federates and arranging data flows between the federates to form the federation,Phase 2: Federation distribution. Considering available resources and required resources per federate, the federates are distributed through the Distribution Manager,Phase 3: Federation execution. All federates are started and the control of the whole federation is given to the Simulation Manager.Note that the federate and federation here are not necessarily the ones as defined in HLA.DHSE basic components.The basic DHSE elements are the following: DHSE ConsoleIt is the main DHSE component, which provides the user with a GUI to perform operations during the Federation Integration and Federation Preparation phases, and control and monitor operations during the Federation Deployment and Execution phases.DHSE Agent (available in two versions: for Windows XP and Solaris) is a DHSE component, which allows the DHSE Console to monitor and control state of a Federation Execution node and Federates running on the node.Set of Federate developer libraries, including:Local Monitoring & Control Interface (LMCI) library (available for C/C++, Matlab/Simulink and OPNET)The library allows a Federate developer to build a DHSE-compliant application (Federate) from initial model. This means that such an application is able to communicate with (provide monitoring information to and receive control commands from) the Console through a DHSE Agent running on the same host.MÄK RTI and WMPI II libraries (COTS products)Those are optional libraries, which allow a Federate to use MAK RTI as a Data Distribution Service for interoperability and use WMPI II functionality to support parallel computations (WMPI II library).Some other 3rd party components mentioned below.During the federation execution, DHSE includes the following components, which communicate with and/or use each other (see  REF _Ref198023858 \h Figure 2):DHSE applications:DHSE Console (one instance)Set of DHSE Agents (one per Federation Execution node) Federation, which is running under DHSE control. It is comprised of Federates running on Federation Execution nodes. Each Federate is connected to the local DHSE Agent via LMCI.External applications and libraries:OMDT (to define Federate or Federation HLA object model during Phases 0 and 1)GeneSyS Core (runs on Supporting node and allows DHSE Console to locate DHSE Agents)MÄK RTI (“rtiexec” running on Supporting node and MÄK RTI dynamic libraries installed on Federation Execution nodes) – optionalMÄK MatLab/SimuLink HLA toolbox (running on Federation Execution node within Matlab tool) - optionalOpNet HLA module (running on Federation Execution node within OpNet tool) - optionalWMPI II daemons (optional, needed only if a Federation includes one or more Federates, which use WMPI II)MATLAB DCE (optional, needed only for MATLAB federates are optimized with this toolbox)Repositories for Federation-related files, set up on Supporting node and Federation Execution nodes (both local or public, depending on the purpose).DHSE ConsoleDHSE Console is a Java application, which implements the following functions:At the Federate Integration phaseCreates, edits and saves Federate properties filesReads Federate SOM to fill some propertiesAt the Federation Preparation phaseCreates, edits and saves Federation properties filesReads Federation FOM to fill some propertiesAt the Federation Distribution phaseReads Federate properties filesReads Federation properties filesPolls DHSE Agents to collect information about available resourcesCreates, reads and saves Federation configuration fileCalculates and proposes distribution of the Federates to the userAt the Federation Execution phaseControls (initialize/start/stop/pause/resume) Federation execution, provides collection of Federation execution results, and clean up in case of error.Monitors Federation execution state and state of Federation Execution nodesSample screenshots of the Console are presented in  REF _Ref198024477 \h Figure 3.DHSE AgentDHSE Agent is a C application that provides DHSE with the capabilities to monitor and control Federation Execution nodes, to monitor Federates and to control Federation execution on the whole. It also provides some remote control of the host where it runs.It implements the following:Monitors and provides to DHSE the value of CPU utilization, hard drive usage, memory utilization of local hostExecutes OS commands sent by DHSE ConsoleMonitors Federate status and list of Federate processesMonitors Federate processes (CPU and memory utilization) Terminates Federate process(es) as OS process(es).Delivers text messages from Federate to ConsoleDelivers Federate state information to ConsoleDelivers control command sent by DHSE Console to a Federate.Methodology and UseThe purpose of DHSE is to allow the building of a distributed, interoperable and heterogeneous simulation from federation objectives and available models using different simulation frameworks (C/C++, MATLAB/Simulink, OPNET), in order to obtain the expected results. REF _Ref198025179 \h Figure 4 below depicts 4 phases (in green) necessary to execute a given simulation within DHSE.The framework provides programming guidelines for distribution and optimization purposes. These guidelines present the required steps to distribute simulations in the form of separate federates. This way the user can take advantage of the available resources. The MPI protocol is also proposed to parallelize and optimize the execution of the simulations (WMPI, MATLAB DCE and OPNET parallel kernel are proposed and experimented).Services providedThe DHSE software supports all the DHSE phases (see previous chapter):Federate IntegrationFederation Preparation Federation DistributionFederation Executionby providing a set of services according to  REF _Ref148517053 \h Table 1.Additionally, DHSE Console provides means for defining of Federate and Federation properties required for proper distribution, initialization and execution of the Federates within DHSE Federation.Deployment of DHSEThe DHSE is a distributed system to be deployed within a single LAN. The following logical host roles are defined for DHSE:Federate Integration node:The node is used to develop a Federate from an initial model (Phase 0). Federation Preparation node:The node is used to create a Federation, using previously prepared Federates (Phase 1).Federation Execution node:The node is used to run Federates during a Federation execution. There can be two types of Federation Execution nodes: Windows XP and Solaris 8. Linux nodes were also considered (at least for COTS selection and DHSE definition) but were not supported in the current development.Federation Supervision node:The node is used to supervise (monitor and control) Federation deployment and execution (Phases 2 and 3)Supporting nodeThe node is used to run external programs and store prepared Federates, Federations and other needed files. The node is also used to store Federation execution results. The storage should be accessible from all other hosts via NFS or Samba/SMB Windows shares.Note that the same host may have several logical roles simultaneously.ServiceDHSE phasesSupport by DHSEInformation Service2DHSE Agent to monitor simulation hostsDHSE Console for representation of available resources (hosts) to end-user.Network Protocol between DHSE Agent and Console based on GeneSyS Messaging Protocol.Monitoring and Control Service3DHSE Agent to monitor and control simulation hosts and Federates.DHSE for support of end-user tasks during Federation execution (simulation run).Network Protocol between DHSE Agent and Console based on GeneSyS Messaging Protocol.Distribution Service2, 3DHSE Agent to deploy Federates (including their input and configuration files) on each host and to gather output files.DHSE Console for choice of distribution of the Federates and processes among simulation hosts by end-user or automatically.Data Exchange Service0, 1, 3COTS products: MaK RTI and WMPI II. Table  SEQ Table \* ARABIC 1: DHSE ServicesValidation ApproachFor validation of the DHSE framework and methodology existing models and telecom scenarios where chosen. Different cases were used in order to validate: The COTS provided implementation for optimizationThe integration of the preferred COTS for telecom problem modeling by using HLAThe optimization by deployment among the different machines available in the lab. The overall methodology.Study cases overview REF _Ref198025805 \h Table 2 presents briefly the DHSE study cases used for validation purposes and their links with ESA reference models.DHSE study caseDVB-S2Dual-slotted alohaCF-DAMAParametric simulationXSimulation acceleration 1 (C/C++ with WMPI)XSimulation acceleration 2 (Matlab DCE)XSimulation acceleration 3 (OPNET parallel kernel)XInteroperabilityX Interoperability scenarioThis scenario is the most ambitious and challenging one since it combines all the heterogeneous COTS supported by DHSE. It consists in the simulation of the transmission chain of DVB-S2 carriers from gateways to terminals (forward links), and the computation of the Bit Error Rate (BER) for typical traffic packets.Table  SEQ Table \* ARABIC 2: DHSE study cases and ESA reference casesThe results are compared with a reference scenario comprising the DVB-S2 transmission chain in C/C++ from ESA and MATLAB/Simulink for plotting of the results.In terms of interoperability between heterogeneous simulation tools – which was the main objective of the interoperability case study - the proof of concept has been achieved. However, it shall be mentioned that the interoperable model is by far slower than the original DVBS2 code. The main reasons of this reduced performance are:too many small HLA interactions are required between the C++ federate and the MATLAB federatethese HLA interactions are functionally interdependent, and thus must be sent sequentially instead of running in parallelsuch split of the processing performed by each federate was induced by high complexity of the original model which has proven too imbricate for a more suitable split.ConclusionsOptimization through parallelizationIt has been demonstrated that the use of parallelization effectively improves the simulation models performance. This statement is valid for both use of WMPI and MATLAB DCT/DCE. One shall note however that, as the DVBS2 Parametric and DVBS2 Acceleration results demonstrate, the way in which the original model is partitioned is a critical aspect for the performance gain one will obtain. A parallel model which is slower than the original model is a real possibility. One shall therefore analyze the original code in order to identify computational blocks that are self contained and can be split apart, as one shall analyze the communication overhead, which will result from the partitioning model selected. It is not only relevant to identify parallelizable computational blocks but it is also important to identify which data dependencies exist between those blocks – i.e. those data dependencies will drive the communication overhead of the parallel model.Another relevant aspect for parallelization is the analysis of the cluster configuration that maximizes the cost/benefit relationship. Cost is typically driven by the number of computational nodes used. If one uses an excessive number of nodes, it will be needed to spend more budget in equipment or, in another scenario, less computational resources will be available for other cluster users. As the DVBS2 Parametric study demonstrates, there is an optimal cluster configuration point (e.g. four computers for the DVBS2 configuration used in the test).In summary, the following aspects are relevant for parallelization:Identification of computationally independent blocks that can be split apart and executed in parallel.Analysis of the data dependencies between blocks and the resulting communication overhead.Identification of the cluster configuration (number of nodes) that maximizes the cost /benefit relationship.Interoperability scenarioPartitioning for distribution adheres to the same basic principles as partitioning for parallelization – i.e. identification of computationally independent blocks, and identification of data dependencies and communication overheads. To maximize performance, data dependencies and therefore communication overhead between components shall be minimized. The DVBS2 Interoperability case study (see  REF _Ref198026130 \h Figure 5) clearly demonstrates that distribution may have a negative impact on performance. The performance gain one may expect is driven by the partitioning performed and the nature of the original model – i.e. not all models are distributable or parallelizable. The results obtained from the DVBS2 Interoperability case study derive from the nature of the original code, monolithic and with high internal data dependencies, and the partitioning performed, which could be done in a more effective way although that would require a complete re-engineering of the original model.The use of parallelization and distribution effectively addresses the problems affecting large and heavy simulations. Nevertheless, one shall be aware that achievement of performance gain shall not be assumed. The nature of the algorithms, the legacy models being re-engineered, the partitioning performed, the data dependencies and communication overheads, do impact the result one will get. Specific training and accurate model analysis shall be put in place in order to enable all the benefits one can get from these technologies.Evaluation of HLA/IEEE-1516 was one of DHSE key objectives. In this respect one can conclude that HLA is clearly suitable for simulation distribution for telecom or other domains. From RTI Performance results it is possible to conclude that although a requirement violation exists (latency of 1ms and throughput of 50% in a 100Mbits/s network cannot be achieved with 50 bytes interactions), the latency and throughput is adequate for telecom simulations scenarios – i.e. situations where data are produced and published in a fire-and-forget mode, being typically exchanged in large data blocks such as protocol frames.A special remark shall be made on the relationship between latency and throughput as well as on the need to adjust the tick times (min and max) when synchronous data exchange is used. To refer as well that IEEE-1516 with asynchronous transfer eliminates the Tick and respective implications on performance and CPU usage, but requires skills in multi-threaded programming.Concerning the differences between HLA 1.3 and IEEE-1516 it is worth mentioning that although HLA 1.3 does not supports asynchronous transfer, the FOM files are Table  SEQ Table \* ARABIC 3: COTS evaluation summarysignificantly simpler than in IEEE-1516 and the FOM attributes and parameters are typeless. Whether typeless attributes/parameters are advantageous or not depends on the particular problem being addressed. The services provided by HLA 1.3 and IEEE-1516 are equivalent but the IEEE-1516 API is a little more complex. Being HLA 1.3 / IEEE-1516 adopted would require those involved in federation preparation to have specific training – it is fairly simple to get into the basic HLA 1.3 / IEEE-1516 concepts but the governing standards are quite extensive and do include some advanced concepts.HLA effectively addresses the simulation distribution problem; it is possible to integrate different technologies running on different host platforms. The RTI performance is suitable for use in telecom simulations but one shall ensure that the federates have been adequately partitioned and the right communication paradigm is used. Whether to use HLA-1.3 or IEEE-1516 is a decision to make on a case by case basis.DHSE FrameworkAll the case studies reported herein have been executed both in isolation and integrated in the DHSE framework. From the integration of federates into the DHSE framework and the use of the DHSE Console and agents to configure, deploy and execute federations, we conclude that the framework is easy to use both from the programming interface (the LMCI API) and the user interface (the console) point of view. Whether major constraints do exist, those arise not from DHSE Framework but from the expertise required to effectively use the technologies involved (e.g. MATLAB DCE, WMPI, HLA, model partitioning for distribution and parallelization, etc.).The generic design of DHSE framework makes it fully reusable for non-telecom applications. Its flexibility allows integrating various COTS with reduced effort. Evaluation of third-party products integrated in the frameworkDuring DHSE Framework Validation process, different COTS products have been used. One of main outputs of the validation performed is to indicate whether those COTS are mature and whether it is worth to use them in the future.  REF _Ref192277461 \h Table 3 presents a synthesis on the COTS suitability highlighting the main remarks that support the published verdict.TechnologyToolSuitabilityRemarksMATLAB ParallelizationMATLAB DCT/DCEYesSignificant performance gains have been obtained while parallelizing the Dual Slotted Aloha model with different cluster configurations. The use of a SPARC station demonstrated a negative gain but this aspect derives from the different computational powers of the Intel and the SPARC machine.MPI ParallelizationWMPIYesTwo case studies using WMPI have been implemented and tested. In both cases a performance gain has been identified being that gain more evident in the DVBS2 Parametric case study. We therefore conclude that the use of WMPI can effectively improve performance provided that the model is parallelizable and that the correct partitioning is applied.HLA 1.3 / IEEE-1516MÄK RTIYesMÄK RTI (v3.1.2) effectively integrates federates based on different COTS and running on different platforms (i.e. Windows x86 and Solaris SPARC). The latency and network load characteristics are adequate for use in telecom simulations.HLA 1.3 / IEEE-1516MATLAB HLA ToolboxNoThe MATLAB HLA Toolbox has dependencies from MÄK VR-Link and supports just a few classes and interactions. Moreover, near the end of the project, MÄK has published the intention of discontinuing the product.HLA 1.3 / IEEE-1516OPNET HLA ModuleNoThe OPNET HLA Module only supports HLA 1.3 and imposes some additional constraints. Knowing that OPNET can directly use C/C++ libraries, the recommended approach for using HLA/IEEE1516 with OPNET is to directly use the RTI.The results of DHSE Validation campaign demonstrate that DHSE Framework globally complies with the requirements baseline. The COTS used were found adequate for the intended purpose with the exception of the MATLAB HLA Toolbox and the OPNET HLA Module – i.e. these COTS either provide limited functionality and/or do provide functionality that can be implemented without using them.Author BiographiesLUIS ARGUELLO is a member of the Modeling and Simulation Section of the Technical Support Directorate of the European Space Agency. He has over 16 years of international experience in simulation and software engineering. He is actively involved in distributed simulation activities and simulations in support to the International Space Station program for the last 9 years.ARNAUD GUILLAUME is the DHSE project manager at EADS Astrium. He has 11 years of experience in satellite simulators and computer science. He contributed from the beginning to the development of the SiMWARE real-time infrastructure tools built on CORBA middleware. He was then involved in various projects of satellite simulators, successively as models developer, technical responsible and project manager.CATHERINE MORLET is communication system engineer in the Technical Directorate of the European Space Agency. She is graduated from the Ecole Nationale Supérieure des Télécommunications and has over 10 years of experience in telecommunication system design, especially addressing the lower layers of the transmission protocols stack definition and evaluation by software tools.PETR SHLYAEV is the technical manager at GTI6. He has over 15 years research experience in simulation, information technology and computer science. He participated in several large international projects in the area of distributed interactive simulation and operator training, where he was responsible for the development of some critical middleware components and participated in integration of training facilities.NUNO SILVA is currently Principal Engineer at Critical Software SA. He has over 10 years of experience in development, safety and dependability assessments and management of projects in the financial, telecommunications, and aerospace areas. He has been involved in several international projects with European, North and South American and Asian partners, especially for embedded software developments, safety-critical dependability assessments and qualifications.Figure  SEQ Figure \* ARABIC 3: DHSE Console GUIFigure  SEQ Figure \* ARABIC 2: DHSE ComponentsFigure  SEQ Figure \* ARABIC 5: Interoperability scenario EMBED Visio.Drawing.11  Figure  SEQ Figure \* ARABIC 4: DHSE phasesFigure  SEQ "Figure" \*Arabic 1: Functional view of the framework EMBED Word.Picture.8  SystemFederate 1Federation 1Federate 2Federate 3Federation 2Process 1Process 2Federate 4Federation 3Federate 5Process 4Process 5Process 3System management (or « Supervision »)InteroperabilityOptimization