Distributed Simulation based on HLA versus Simulation Support Environments - A ComparisonMarianela García LozanoGunnar HolmFOI, Swedish Defence Research AgencySE-172 90 Stockholm, SWEDEN+46-8-5550 3133, +46-8-5550 3644garcia@foi.se, gholm@foi.se Keywords:Advanced Distributed Simulation, Simulation Support Environment, Simulation FrameworkABSTRACT: During the last decade there have been two main trends within the defence M&S community that to some extent have been contrary to each other. On one side there is the strong evolution towards distributed simulation based on the HLA concept. On the other side there is the growing use of frameworks as simulation support environments (SSE) that generally leads to non-distributed solutions. Certainly there are obvious signs of a merging of the two by the advent of HLA compliant SSEs, but there are still good reasons to investigate the advantages of each compared with the other.When using an SSE, one usually must be prepared for a long-term engagement; the investment cost usually does not pay off in a single project. However, if the SSE is well suited for the application area in mind, you are provided with common utilities, helping you to focus upon the essential parts of the model. On the other hand, existing models that you want to incorporate must probably be reshaped to match the structure of the framework.When using an HLA-based solution the participating models do not have to be so strictly adapted. They just need to be able to communicate in a substantive way with each other via the RTI. On the other hand there could be administrative burden and performance problems in a distributed simulation compared with a monolithic one.At the Swedish Defence Research Agency (FOI) we have performed a study in order to provide some rules and guidance for the modellers when choosing between the two methods. M&S is used in a multitude of different applications in many different problem domains and on varying levels of abstraction and detail. Based on a survey of these aspects we have analysed the qualities of the different approaches in handling issues like fidelity, V&V, reuse and interoperability as well as system requirements like user friendliness, time management, performance and scalability. In this paper we present our analysis method and some of the most significant conclusions made so far.1. IntroductionWhen developing models and simulations within the defence there are two dominating alternatives. The first alternative is to connect different sub-models with a common interface. This is done with the help of the well-established standard for distributed simulations High Level Architecture, HLA. The standard consists of three parts: the HLA rules, the Object Model Templates and the Interface. The sub-models of a simulation must follow the standard in order to be HLA compatible but do not otherwise, in principle, need to have anything else in common. Thus, the models don’t need to have been developed for a specific simulation and don’t even need to have been developed in the same environment or programming language.The other alternative is to use simulation support environments, SSE, also called simulation frameworks. They come ready with several services, for example services for program development, analysis and graphics. This greatly simplifies work, but on the other hand the models are deeply integrated with the SSE. The consequence of this is that the interaction between simulations, not developed within the same SSE is harder and the exchange of models developed for other purposes is hindered.When developing simulations it is sometimes obvious which of the two options that is best suited for the purpose, but often the choice is difficult to make. There are many parameters that influence the final choice. At the Swedish Defence Research Agency (FOI) we have for a long time been interested in the potentials and limitations of distributed simulations. Our motive is to get such a thorough knowledge that we are able to give good advice on when to use HLA based distributed simulations and when to avoid it. Otherwise there is always a risk that a good new tool gets a bad reputation if it is misused in situations for which it is not well suited. In that spirit we have performed a study [1] in order to provide some rules and guidance for the modellers when choosing between the two methods.1.1 HLA and Distributed SimulationsThe high level architecture, HLA, is a standardised architecture for developing and executing distributed computer models and simulations. It is promoted by the US Department of Defence, DoD, and has been developed with the purpose of providing a common architecture applicable to a wide range of applications to support simulation interoperability and reuse.HLA was presented in 1995 in the DoD Master Plan [2] and was conceived as a general-purpose architecture. It is usable for hardware-in-the-loop, man-in-the-loop, real-time and faster-than-real-time, live, virtual and constructive simulations. Since it is a general-purpose architecture there are few application limitations. HLA does not specify any particular software implementation. Within the Swedish Defence there is a strong recommendation to use HLA when possible.It is assumed that the reader is familiar with the concept of HLA and the terminology so we will not linger too long on introducing it.1.2 Simulation Support EnvironmentsA simulation support environment can be seen as a structure to help develop and run simulations and models. It can be more or less complete, supporting everything from development, execution and visualisation to post-processing of scenarios. By a SSE we mean a fully functional structure, either a commercial or governmental off-the-shelf, COTS or GOTS, product that supplies end-to-end simulation support.SSEs are software that provide the M&S developers with general functionality and services. The idea is that the developers should avoid the implementation and re-implementation of model and simulation common utilities, like time and object management, graphical user interfaces, analysing tools etc, and thus enabling easier reuse from one application to another. These SSEs are usually designed with a specific target group in mind and often provide a repository of models of different subsystems within the domain. For the users of these environments the result is usually savings of both time and effort.The SSE should have an architecture that provides the infrastructure that supplies all the common services and facilities for simulation execution, such as time, database and memory management. The framework should also be open, standardised and extensible to enable model development and interoperability. A simulation support environment compared with HLA could be said to be an implemented architecture, a software tool.However, this architecture is usually not at all as “open” or standardized as is the case with HLA. Until recently a development based on a SSE inevitably has led to a non-distributed simulation model were all sub-models are closely linked to the framework that in itself has acted as a monolith.2. Methodology2.1 The analysis methodTo find a way to answer the question when it is preferable to use a distributed model, especially HLA-based, and when it might be better to use a SSE-based model (that is probably non-distributed), we have applied the following method. First we have tried to identify the most significant parameters and criterions for successful model development and simulation. These parameters were then analysed from the point of view of the two different approaches for a variety of different simulation applications.Figure 1: Simulation space spanned by the sponsoring agent, the size and the functional area.The application examples were chosen in order to cover as much as possible of ordinary military applications on different complexity levels (see figure 1). The examples included models for operative and tactical training, assessment models, models for analysis, research and development of materiels and tactics. We looked through available documentation and literature, but we also interviewed people with a thorough knowledge in the use and structure of models in the different disciplines. Besides getting insight in the conditions for each specific area of M&S we also had the opportunity to get their comments on our specific question in mind.During the work with this study we encountered a French study [3] that had a partially overlapping content, focusing on reuse, which gave some further views and enriched our work.2.2 Parameters under considerationIn no particular order of importance we present a short introduction and definition of some of the parameters we found the most interesting, for example, fidelity, interoperability, reuse, validation and verification, user friendliness, and development time. The definitions are mostly based on earlier SIW-papers and articles.Fidelity: There is a difference between an ordinary computer program and a computer simulation in a way that the purpose of the computer simulation is to represent some behaviour in the real world. Fidelity could be said to be a measure of how well the simulation makes this representation.If fidelity could be quantified it could perhaps be used as a key to validation. It could also become essential to describe and quantify fidelity to better handle interoperability issues. Unfortunately fidelity has proved difficult to apply in practice. There are two issues involved in the measurement of fidelity.There must exist a definition of the real or imagined world that is sufficient for measuring the difference between it and the simulation.The simulation must be defined in terms similar to that definition and it must be defined in a way that can be measured.For more information about fidelity, see [4], [5] and [6].Interoperability is defined by Webster's dictionary [7] as the “ability of a system (as a weapons system) to use the parts or equipment of another system.” It could also be described as the ability of models and simulations to interact with other models and simulations. It is the interaction that is the difficult part since not everyone has agreed on exactly what needs to be made interoperable. Attempts to define simulation interoperability usually seem to follow one of two strategies: top down or bottom up.A top down strategy attempts to define simulation interoperability abstractly based on mathematical principles. These strategies tend to be theoretical by nature and not practically useful. A bottom up strategy attempts to define simulation interoperability concretely by specifying in detail all of the data values, timings, interactions, etc., that must be exchanged. These approaches are meant to provide practical results, but it is still unproven if any of them provide insight into whether the resulting systems are truly interoperable. For more information, see [8].Reuse of components is desired as it theoretically saves a lot of work and money. Types of reusable artifacts that have been identified are data, architectures and programs. Reusing these artifacts would involve a standardisation of data formats, a standardisation of design and programming conventions dealing with the logical organisation of software and a cataloguing of executable code. For more information, see [9].The problem is that components usually are very application specific. Redesigning and adapting models often requires more work than designing them from scratch. Reusing executable code often results in more work searching for the reusable parts than writing the code from start.As Igarza and Sartreau [3] point out, there is a difference in how reuse is used in simulation support environments and HLA. In SSEs the emphasis is on the component level whereas HLA addresses reuse on the application level.Validation and Verification: A model is only a description of a real-world phenomenon. This description may have varying levels of granularity, depending on the purpose of the model and the simulation. Validation is the process of ensuring the correspondence of a model to the real-world entity it is describing. Verification is the way to grant conformity between the model implementation and the model specification.The main objectives of validation and verification, V&V, are to avoid: Discarding simulation results even though they are sufficiently correct.Accepting invalid simulation results as credible.Solving the wrong problem with the simulation. These situations may, for example, arise when a model or simulation is used for other applications than originally was intended. For more information, see [10] and [11].User friendliness: When discussing user friendliness in this context we distinguish between two types of “users”: the developers that use the tools and/or the concepts for development and those that use the resulting models and simulations.  Another important parameter under consideration is scalability, i.e. the possibility to successively extend a model with new kinds of objects or with a greater number of instances of existing objects. We have also paid attention to the available time for a simulation project, the efficiency of a simulation and its security.3. Observed characteristicsWhen analysing the advantages and disadvantages of using a HLA approach contra a SSE approach for every one of the application areas that we had chosen to cover the ordinary spectrum of the military M&S, we compiled a rather long list of observations. The following are the most prominent ones.3.1 SSE-based simulationsOf course, as there exist a great variety of SSEs, it is difficult to settle generally valid characteristics. However, we have collected a set of observations, that we think are rather common.  Let us first have a look at those qualities that are the strength of the SSE concept.SSEs can significantly reduce the time required to build complex training and simulation systems if the SSE's simulation space coincides with that of the project.A SSE optimises the engineering resources since much of the repetitive and administrative tasks are already included, allowing the developers to concentrate on the modelling of the primary tasks.A SSE gives a rapid scenario and prototype creation and it is usually easy to enhance or replace the built-in models. The use and reuse of earlier and common models is easier since they are stored in a library. Examples could be sensors, terrain, weather etc. Many models and other utilities come for free, they may perhaps not be needed for one application but can be used and added in a later stage if they are needed.The object oriented layout of most SSEs helps to maintain object orientation in the modeller’s model code. Many SSEs come with modules providing implementation support thus contributing to consistent programs with fewer bugs. The SSEs can be user friendly since there is the same environment for all simulations and the user always has the same well-known user interface.If the simulation support environment is supported by a solid company that can guarantee future software maintenance and development it can help prevent simulations from becoming obsolete.And then the disadvantages:Simulation support environments may contain much more than is needed for a single application, scenario or simulation, which could be an efficiency problem.They can have a high learning threshold (especially for people with no computing science background).The SSEs are often made with a specific purpose in mind and can thus lack in certain areas that may be just as important for the customer. Usually the models and programs are tightly coupled to the structure of the SSE and are thus difficult to reuse and export to another system. For example, SSEs contain a kernel that provides many useful but non-standardized services, this may put restrictions on what kind of models that can be incorporated or exported. This can make exchange with third party providers of models made in other systems impossible. Existing models might have to be rewritten entirely in order to be incorporated and used in a SSE.In some SSEs the scenario creation support gives the users a high degree of freedom and as a consequence also a great responsibility. Some inconsistencies and errors may then pass undiscovered.  Many times the GUIs are unintuitive and old fashioned.There are some drawbacks that are related to the SSEs as commercial products.  Sometimes the documentation is not complete or up to date making it difficult to develop and use the simulation support environment.Sometimes the SSE versions are not backwards compatible The simulation support environments are usually costly, requiring expensive licenses and costly training of developers and users.The SSE’s developers may disappear or decide to terminate the development process making the SSE gradually less usable. 3.2 HLA-based simulationsThe advantages of distributed simulations based on HLA are well known and appreciated.HLA is adopted as an international standard. It is promoted by the US DoD and is widely accepted by the defence M&S community which should also facilitate international cooperation. This should also improve the chances of finding suitable and reusable models but one has to keep in mind that it still needs extensive administration in order to be possible.The developers are encouraged to develop modularised programs that can make use of information hiding and have a clear separation between services and models. Due to the modularisation of the applications it is rather easy to remove, add or change modules and also create custom applications (like GUIs) and update them when necessary.  Besides, one doesn’t always need to know the internal structure of the models in order to connect them to each other, it is sufficient with their interfaces. Reusing models is relatively easy. The models can be kept in a repository together with the SOM and additional documents describing what the models do (and perhaps even how they do it).It is easier to use models in a joint simulation that uses different time management methods and / or time step resolution.It is in most cases rather easy to adapt models to HLA, which makes it easy to integrate external simulations and third party software. It is also easy to modify the interface of an already HLA adapted model to a new application. However, there are also some characteristics that could be a drawback in some situations.There is a high learning threshold to overcome.When models are loosely connected there is greater risk of having undetected fidelity discrepancies.Validation and verification can be difficult since models may participate in a simulation without revealing their inner structures. There are some problems that are due to the fact that the RTI is a commercial product and that its implementation isn’t standardized. These problems are somewhat related to some of the drawbacks that the SSEs show in their capacity as commercial products (see section 3.1). One of these difficulties is that it can be difficult to replace one RTI implementation from one vendor with another.Other difficulties have to do with the distributed environment in itself and are therefore not exclusive of HLA-based systems. They might in fact also be true for SSEs as well. We have chosen not to dwell on these problems since there already is extensive literature available on this subject but we will mention some issues that might be decisive.Security is more difficult when there is a network involved.  Validation and verification can also be more difficult due to the delay problems and other consequences that arise from using a network.It can be more difficult and time consuming to develop and run a distributed simulation. Especially if it also is geographically distributed. 4. DiscussionFidelity Most simulation support environments are developed with a specific functional area in mind, thus adapting the level of fidelity to be suitable for the specific purpose. Most SSEs have a structure that allows the developer to modify, add or remove components and thus making it possible to alter the fidelity level of a simulation. This is only possible up to a certain level after which the SSE's architecture hinders further changes. With HLA-based systems the fidelity problem is simpler since the level of fidelity of a system is the one the developers decide to implement. When designing new models the challenge lies more in making the decision of what level of fidelity to have and in trying to avoid the intrinsic fidelity assumptions that will cause difficult errors. But when there are older models that were not originally designed to run in a joint simulation there could arise fidelity discrepancy problems that may be difficult to detect.    Interoperability HLA was developed with the intention of facilitating reuse and interoperability of models and simulations, so if there are two HLA compatible systems they should be interoperable. The problem is that even though the architecture enables interoperability, models must speak the “same language” in order to be interoperable. For example, if there is a model of a fighter and a model of a missile that wish to communicate they will have serious troubles if one model uses the metric system and the other uses feet and yards. Interoperability between components within the same simulation support environment is not a problem since it is all so closely connected, the difficulty is between different SSEs or other HLA-based systems since most SSEs don't use standardized communication systems or have standardized architectures.Reuse The structure and architecture of the SSEs promote reuse. They reuse GUIs, simulation administration, development and analysis tools, execution environment and everything else the SSE might offer which is a large part of their charm. The code reuse is mainly focused on the component level since the components developed for one simulation are easily reused in another. This is possible because of the fact that everything is so tightly coupled in a simulation support environment.   The drawback is the inflexibility and non-standardized interface. Usually all SSEs have their own standards making it difficult to reuse components or models between different SSEs or from third parties.   With HLA, reuse, unlike the SSEs' component based reuse, is on a higher level where entire models can be reused.  An HLA-based distributed solution has the advantage of not having to couple the models so tightly, which should require a smaller effort when connecting models produced by different vendors. Since HLA is a widespread international standard there is a greater possibility of using a model in an international context if the model is HLA-compatible than if it is developed for use in a simulation support environment.   Much of the future success of the two approaches lies in the availability of models. Having well-organized and documented repositories is a key.  But it is important not to let available models, because they are “almost right”, steer the modelling process too much, tempting a too great change of the original task to suite the available models instead of developing new ones.  In a distributed simulation there are obviously extended problems concerning verification and validation. That is the case when only the interfaces of the models are known and very little about their interior structures (which might be intentionally hidden by the vendor). Another reason is that the effects of the network like varying delays in message delivery etc. introduce new and unique problems of this kind.The verification or validation of a system implemented with a simulation support environment may be difficult because of the black boxing of functions and services. Many times the developers do not have any control over and little insight to the inner structures and core functions of the SSE. When designing and developing a system from scratch, the VV-process is easier. This could imply an advantage of HLA-based systems since they many times have to be built from nothing and without the help of custom made tools, but since HLA enables reuse and interoperability of federates developed elsewhere, there are other difficulties to consider.User friendliness As previously mentioned we distinguished between two kinds of users. For the developers there is usually some help provided with the simulation support environments in the development of models, usually they provide services like interfaces, ready class hierarchies and code stubs. For the users of the applications there is the benefit of encountering a familiar environment and GUI when setting up and running a simulation. The downside to it is that the user interfaces may be poorly adapted to the needs of a particular scenario providing too much or too little information and as the SSE GUIs usually have been there for a while they are sometimes outdated and do not make use of the latest developments. From the user point of view, assuming that the users have encountered and worked with the SSE before and that it has a sufficiently good interface it should be a good choice. With HLA there is no help with the development of models or building of simulations unless there are older applications that may be reused. When there are many models in a HLA simulation there might also be multiple user interfaces making the users work more difficult. On the other hand, the benefit of making a scenario or model from scratch is that it is completely adapted to the needs of the simulation and the users of the simulation. Another benefit could also be that the user interfaces are more modern. With both approaches there is an initial drawback since they both require extensive studies in the beginning. Especially HLA requires a good methodology like FEDEP and an experienced team to be a help more than a hindrance. Another aspect is that it could be easier to run simulations with monolithic models than with distributed ones, since the later could require more organisation and perhaps even more people to get involved.If the available time for the simulation project is a limiting factor for the model development, then we can notice that with a good simulation support environment it is relatively fast and easy to get a model prototype, at least if the application problem is well within the scope of the SSE. If we, on the other hand, have to expand the set of concepts of the SSE by including new sub-models, then the inherent restrictions within the SSE may cause great difficulties and delays. In this case the HLA concept seems to offer a faster solution. Because it is a standardized and more general architecture than any SSE and therefore more widely used, it is more likely to find convenient sub-models in a repository of HLA-based models. And if you don’t find it there it might be somewhat easier to adapt a model to HLA than to some given simulation support environment.Looking at the scalability there are good reasons to choose a HLA solution. It is naturally scalable and is limited only by the performance of the network and the computers. A SSE on the other hand may have inherent restrictions that limit the scalability. One must also remember that as the implementation of the HLA’s Run time Infrastructure, RTI, isn’t standardized it might also have limitations due to that particular implementation. If the effectiveness of the code is important, e.g. in a real time simulator with a lot of interacting object, a HLA based distributed implementation might be less attractive than a closer design. At least you probably have to pay a greater attention to that problem than you have to do with a monolithic SSE based solution.Yet another problem to consider is the fact that it is much easier to handle the security issues when running a simulation in an isolated environment than it is on a network. That makes a distributed solution less attractive than a monolithic one.If we suspect that a model in mind would be interesting for other organisations to use, in its own or in co-operation with other models, we should prefer to use HLA. Because HLA is an international standard and widely accepted within the defence M&S community, there is a much greater probability that the model will be used in international cooperation than it would be if it was built with a SSE. On the other hand, there are today several SSEs that are HLA compliant. Such an SSE could act as a backbone for distributed simulation. In that way it would be possible to join the best qualities of both concepts.5. ConclusionsA primary result of our analysis is that in most military application areas it would seldom be a very bad choice either you choose an HLA-based solution or a solution based on a simulation support environment. On the other hand the choice could be more or less convenient depending on the aspects that are most prominent in the current modelling situation.The determining aspects that rule the choice of whether to use a HLA based or SSE based simulation are as far as we can see primarily the available time for the project, the need of scalability, verification and validation, the user friendliness, the effectiveness of the code, the security aspect, the reusability and the potential for co-operation with other organisations. Of all these factors especially the scalability and co-operation aspects tends to favour a HLA solution, while the effectiveness and to some extent the user friendliness aspects favour a SSE solution. The other aspects are too closely tied together with exterior factors or with the specific attributes of the SSE to be generally determining for one side or another.Much of the future success of the two approaches lies in the availability of models. Having well-organised and documented repositories is a key. If one wants to use a simulation support environment it will probably involve a long-term commitment because of the costs involved in both time and money. With COTS-SSE there is the acquisition and license cost (assuming the GOTS-SSE are free of charge) but also the costs of keeping the knowledge fresh of how the SSE is used, built and works. This includes having good relations with the developers and suppliers, trusting they will be around for many years ahead and will continue to develop the SSE.Using HLA also requires a long time commitment since becoming familiar and efficient with it requires a lot of knowledge and experience.There would probably be a great benefit to gain from joining the two approaches. We already see the tendencies of making it easier for models in simulation support environments to interact with HLA models by making the SSEs HLA-compatible. There have also appeared some simulation support environments that are based on HLA. The future will reveal if that is the way to go.6. References[1]	M. García Lozano, “Finding One’s way through Simulation Space. A Study of Methods and Parameters for Model and Simulation Development in the Swedish Defense” It is under publication at the department of Numerical Analysis and Computing Science, NADA, at the Royal Institute of Technology, KTH. For further information contact garcia@foi.se [2]	DMSO 1995 Master Plan: http://www.dmso. mil/briefs/msdocs/policy/msmp.pdf[3]	J-L. Igarza, & C. Sartreau, “Distribution, Use and Reuse: Questioning the cost effectiveness of re-using simulations with and without HLA” Simulation Interoperability Workshop, September 2001, 01F-SIW-002[4]	The DMSO VV&A Recommended Practices Guide, RPG, Special Topic Fidelity,  HYPERLINK http://www.msiac.dmso.mil/vva/Special_topics/Fidelity/default.htm http://www.msiac.dmso.mil/vva/Special_topics/Fidelity/default.htm[5]	D. C Gross “Report from the Fidelity Implementation Study Group” Simulation Interoperability workshop, SIW, spring 1999, 99S-SIW-167[6]	SISO fidelity study group  HYPERLINK http://www.sisostds.org/doclib/index.cfm http://www.sisostds.org/doclib/index.cfm[7]	Webster dictionary: Interoperability retrieved July 30th, 2001  HYPERLINK http://www.m\\-w.com/cgi-bin/dictionary http://www.m\-w.com/cgi-bin/dictionary[8]	R. Franceschini, T. Clarke, B. Goldiez, AGriffin, A. Huthmann, G. Schiavone, B. Schricker. “A Survey of the Theory and Practice of Simulation Interoperability” Simulation Interoperability workshop, SIW, Spring 2000, 00S-SIW-104[9]	H. Mili, F. Mili, A. Mili. “Reusing software: Issues and Research Directions” IEEE TRANSACTIONS ON SOFTWARE ENGINEERING, VOL 21, NO. 6, JUNE 1995, p 528-561. [10] T. Andre, U. Bergsten, L. Sporre “Verification, Validation and Accreditation of Simulation Models - a preliminary study (in Swedish)” Defence Research Establishment, Division of Systems and Underwater technology, August 1999, ISRN FOA-R-99-01146-202-SE[11]	The DMSO VV\&A Recommended Practices guide, RPG http://www.msiac.dmso.mil/vva/default.htmAuthor BiographiesMARIANELA GARCÍA LOZANO has been a Research Engineer at the Swedish Defence Research Agency since 2001. This work was a part of her Msc. thesis in computer science at the Royal Institute of Technology in Stockholm. Her main research interests are in the fields of conceptual modelling and distributed simulation.GUNNAR HOLM is a Senior Research Officer at the Swedish Defence Research Agency where he has worked with modelling and simulation for more than 30 years. He is currently leading a project on HLA studies, which includes the research on the limitations of the applicability of that concept.