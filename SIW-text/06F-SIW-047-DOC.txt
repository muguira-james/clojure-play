Interchanging Discrete Event Simulation Models using PIMODES and SRMLLee W. LacyDynamics Research Corporation3505 Lake Lynda Drive, Suite 100Orlando, FL  32817407-380-1200 x104E-mail:   HYPERLINK "mailto:llacy@drc.com" llacy@drc.comKeywords:SRML, PIMODES, Discrete Event Simulation, InterchangeABSTRACT:  Discrete event simulations (DES) represent a popular type of simulation.  A variety of commercial off-the-shelf (COTS) solutions provide support for authoring and executing DES models.  Most of these COTS solutions support a process orientation world view.  Vendors often represent models with proprietary file formats that make the models difficult to interchange with other tools.A new open vendor-neutral language for representing DES models is being developed to support interchange.  The language is formalized using a Semantic Web ontology encoded using the Web Ontology Language – OWL.  The ontology is named the Process Interaction Modeling Ontology for Discrete Event Simulation (PIMODES).PIMODES is directly related to the Simulation Reference Markup Language (SRML).  This paper compares and contrasts the PIMODES approach to the SRML approach and provides recommendations for the SRML product development group and DEVS study group to consider as they evolve SRML to support various types of simulations including DES.IntroductionSimulation development typically involves a substantial investment in resources.  Reusing existing models reduces the required investment, but requires the ability to interchange information from the original model.The Simulation Reference Markup Language (SRML) supports the interchange of simulation model descriptions.  SRML is a general purpose approach that supports many types of simulations including discrete event simulations.Discrete event simulations have dependent variables that change discretely at particular points in time.  Several world views are associated with DES implementations including the event-based approach, activity-based approach, and the process interaction approach.A variety of commercial off-the-shelf software packages (e.g., Arena, ProModel) support discrete event simulation using the process interaction approach.  These software packages typically have graphical user interfaces for authoring models.  Model logic data is typically stored in proprietary file formats that make model sharing difficult.  Some packages provide access to their internal data structures or provide an export/import file interface.  Sharing model information often requires extensive effort to overcome syntactic and semantic interface challenges.The Process Interaction Modeling Ontology for Discrete Event Simulations (PIMODES) was developed for interchanging discrete event simulation models that conform to the process interaction world view.The following background section provides background on simulation model interchange challenges, data interchange technologies, SRML, and PIMODES.  The sections that follow the background section compare and contrast the two approaches, identify observations, and provide recommendations to the Simulation Interoperability Standards Organization (SISO) SRML Study Group.BackgroundChallenges in interchanging simulation models are addressed by data interchange technologies leveraged by SRML and PIMODES.Addressing Reuse and Interchange ChallengesStandards organizations such as SISO and the National Institute of Standards and Technology (NIST) have supported the development of simulation-related data interchange standards.Reichenthal and Gustavson (2003) differentiate between interoperability associated with federating and model sharing.  They describe model sharing as the ability for a simulation system to use models developed for another system.Reichenthal (2002a) points out that “no widely adopted standards exist for interchanging simulations developed in different tools, making it difficult to reuse simulation models”.Interchange challenges are encountered that relate to both syntax and semantics.  The first step in reusing a model without rekeying the information is to identify a method to parse or access the source model’s data.  Typically, models are stored in files according to proprietary data formats.Some applications (e.g., ProcessModel) provide model export features that expose their data in alternative file formats (e.g., Microsoft Excel spreadsheets) that are more easily accessed.  Other applications (e.g., Arena®, ProModel®) provide access to their internal data structures using ActiveX objects.Once the data from a model can be accessed, semantic mappings must take place to translate concepts from the source system into constructs of the system attempting to reuse the model.  Modeling implementation approaches of both the source and destination systems must be fully understood in order to define correct semantic mappings.Various data interchange technologies help address the syntactic and semantic challenges of reusing simulation models.Data Interchange TechnologiesThe Extensible Markup Language (XML) is commonly used to interchange data.  XML provides a neutral text-based format for representing data content and limited (i.e., primarily tree-based) structure.Various initiatives have proposed the use of XML-based Data Interchange Formats (DIFs) to support simulation applications.  XML DIFs have been used for representing many types of simulation data including equipment characteristics and performance data (Lacy, 2002), computer generated behaviors (DaCosta, 2002), and HLA data.XML is one of several interoperability languages managed by the World Wide Web Consortium (W3C).  The W3C has also adopted other languages that provide additional expressiveness.  Many of these languages support the concept of the Semantic Web that promises to provide additional capability over the current web.  The vision of the Semantic Web is to enable software to make limited interpretations of information based on markup that is associated with an ontology.  The increased ability of software to perform complex queries should reduce the workload of human users.One way to view the relationship of the W3C’s Semantic Web languages is through a stack diagram (Lacy, 2005) (see Figure 1).  The Resource Description Framework (RDF) is an approach for using XML to make statements about items (resources).  RDF Schema (RDFS) adds object-oriented features to RDF by introducing concepts such as classes.  The Web Ontology Language - OWL adds ontological features to the RDF and RDFS languages.Figure  SEQ Figure \* ARABIC 1.  Semantic Web Language Stack (Lacy, 2005)Semantic Web technologies including ontologies and OWL have been recommended for use in the simulation community (Blais and Lacy, 2004) (Lacy, 2004).  These technologies have been recommended specifically for describing discrete event simulations (Fishwick and Miller, 2004). SRMLSRML is an XML application that describes the structure and behavior of distributed simulation models.  SRML is a general-purpose schema that goes beyond simple data representation of behaviors and describes complete simulations.  The SRML schema provides an open specification for an XML-based simulation language.  SRML descriptions can be executed using runtime software that runs within a web browser.SRML was developed by Boeing (Boeing, 2002) and proposed to the W3C in a Note (Reichenthal, 2002b).  Case studies have demonstrated how SRML can be used for describing Base Object Models (BOMs) (Reichenthal, 2003a).SRML encodes the structure and behavior of simulation items with XML and scripts.  SRML is similar to AnyLogic™ in its use of XML for interchanging models and the embedded script for describing behavior.  The SRML language adds simulation behavior to XML documents.  SRML descriptions are designed to be distributed on the web.The primary behavioral SRML elements are the Item “class”, the Event “class”, and scripts.  SRML concepts include Items, Item Classes, Properties, and Locations (Boeing, 2002).  The object model is shown in Figure 2.Figure  SEQ Figure \* ARABIC 2.  SRML Object Model (Boeing, 2002)SRML represents physical things (e.g, equipment, people, systems) and processes as Items.  Items have properties, locations, sub-items, and scripts.  They can belong to ItemClass(es).SRML is standardized with an XML Schema.  XML Schemas define how conforming XML instance files should be organized and which XML elements and attributes they should contain.  In SRML, Item properties are encoded as attributes of XML elements.A case study demonstrated the feasibility of supporting Discrete Event Simulations (DES) with SRML (Reichenthal, 2003) (Reichenthal, 2004).  SRML ItemClass specifications were defined to represent DES Entity and Block concepts.  The Block class was used as the superclass for the Create, Dispose, Process, and Decide block classes.  The semantics were based on the DES SIMAN® language which served as the foundation for the popular Arena® software.SRML is standardized at the language level.  Widespread use of particular classes that support DES (e.g., Entity, Block) represents in effect the introduction of an additional vocabulary or layer of standards on top of SRML.PIMODESPIMODES was developed at the University of Central Florida (UCF) as part of a PhD dissertation research effort.  The purpose of PIMODES is to interchange discrete event simulation models that conform to the process interaction world view.The PIMODES ontology was designed to support popular PI DES concepts from literature and representation approaches employed by existing simulation packages (i.e., Arena®, ProcessModel®, AnyLogic™, ProModel®).The PIMODES language is formalized with an OWL ontology.  The PIMODES ontology classes are grouped into model organization, process concept, activity, and flowchart categories.The PIMODES process concepts include Entity Type, Variable, and Entity Attribute.  The Entity Type concept equates to SRML’s Entity Item class.  PIMODES activities equate to SRML blocks.  PIMODES activities are used to manipulate entities (e.g., creation, delay, disposition) and changes to the control flow of activities (e.g., branching).By using OWL, compliant models can be parsed and queried using OWL-compliant COTS software tools.  This benefit is similar to the opportunity of using XML-compliant tools with SRML.  However, the OWL-compliant tools can perform more complex operations such as complex queries.Translation software was developed to demonstrate the feasibility of converting between models conforming to the PIMODES ontology and versions of models from legacy applications.  Sample models were developed for demonstrating and testing purposes.Comparing and Contrasting SRML and PIMODESSRML and PIMODES have been compared and contrasted to provide perspective and recommendations.  Various features and concepts of the two approaches are summarized in Table 1.Table  SEQ Table \* ARABIC 1.  Feature and Concept ComparisonCategoryFeature / ConceptSRMLPIMODESRequirementsscopegeneral purpose distributed simulation modelsdistributed process interaction discrete event simulation modelsDesignsupported behavior descriptionsany scripted itemsmall set of process interaction DES activities (e.g., assignment, branching, queuing)generalization supportSRML-specific ItemClass constructRDF(S) and OWL built-in subclass constructsDES supportcase study demonstrated DES concept definitions based on SIMANfocused on DES concepts derived from multiple languages including SIMANImplementationvocabulary specificationSRML XML SchemaPIMODES OWL Ontologysupporting languageXMLOWL / RDF(S) / XMLinstance representationstext (XML)text (RDF/XML)syntaxproperties as attributesOWL Datatype properties as subelements andOWL Object properties as attributesassociated graphical notationnoneflowcharts based on enhanced UML 2.0 Activity DiagramsUseruntime software availableYesNomapping to legacy software applicationscomplex mappingautomated mappings to Arena®, ProcessModel®, AnyLogic™, and ProModel® definedusersmodelers with XML and programming skillstranslation software developers (meant to be transparent to most users)AdoptionchampionsBoeing, SISO Study Group, BOM communityuniversity researchersdeveloperBoeingUCFSupportweb-based supportBoeing website,SISO websitewww.opendes.org websiteObservationsSeveral similarities and differences become apparent as the table above is reviewed.SimilaritiesBoth SRML and PIMODES seek to support simulation model reuse by defining interchange approaches.  They both leverage web standards (e.g., both use XML).  The use of XML syntax allows both to be extensible.  However, extensibility can introduce interchange challenges when additions are outside of language definitions.  Both approaches allow references to externally specified (i.e., distributed) content.DifferencesSRML’s Item concept is extremely general while PIMODES focuses on the narrow subset of process-interaction DES.  SRML “re-invents” generalization through a hard-coded subclassing mechanism. PIMODES uses RDFS and OWL which include the concept of subclasses.  SRML focuses on syntax rather than semantics.  It appears that SRML users would be expected to interact with the XML file natively instead of using automated translation software that is intended for PIMODES.RecommendationsThe following recommendations are meant to help the SISO SRML study group, the DEVS study group, and PIMODES researchers identify potentially useful options as they prioritize their activities.Upgrade SRML to Leverage New Interchange TechnologiesSRML was defined before the RDF(S) and OWL languages were introduced.  As RDF(S) and OWL technologies continue to be adopted, the SRML community should consider the costs and benefits of upgrading the SRML XSD to an RDFS Schema or OWL ontology to benefit from these more expressive XML-based languages.  The first step in this process would be to evolve the SRML XSD into an RDFS Schema.Use SRML as the Foundation for a New Simulation OntologyFishwick and Miller (2004) proposed the use of SRML as the basis for a new simulation ontology.  However, SRML has limited constructs and may be too general purpose for use as the foundation of a simulation ontology.Evolve SRML DesignThe SRML approach focuses on a minimal set of required constructs.  The SRML concepts could be refactored to better align them with common simulation constructs.  For example, the SRML Process concept could become its own class of objects rather than representing processes as Items (things).Standardize SRML DES SupportSRML support for DES was demonstrated with a few associated classes.  Additional concepts could be added for process interaction DES.  The set of SRML DES support items could be standardized.Add SRML DES Support to PIMODESPIMODES demonstration software can create roughly equivalent models in various formats.  SRML could be adopted as a supported PIMODES translation format.  The PIMODES translation software should be modified to include a translator to/from the SRML DES XML elements.Simplify PIMODESThe benefits of an ontological approach may not out weigh the complexities introduced.  Another approach might be to define an XSD for PI DES using classes and properties based on the semantics described by the PIMODES ontology.Continue Evolution of BothRegardless of design decisions reached, both approaches should continue to be evolved and implemented.  They both support an open approach to simulation that will benefit the community.  Perhaps a larger initiative focused on promoting open standards for simulation should be encouraged.ReferencesBlais, Curtis, Lacy, Lee W., (2004) “Semantic Web: Implications for Modeling and Simulation System Interoperability”, Proceedings of the Fall 2004 Simulation Interoperability Workshop, September 2004, Orlando, FL.Boeing (2002) “Simulation Reference Markup Language White Paper”, Release Version 8/15/2002 – X02-70/401DaCosta, B. (2002) “XML Support for OneSAF Objective System Behaviors”, Proceedings of the 11th Computer Generated Forces Conference.Fishwick, P.A. and Miller, J.A. (2004) “Ontologies for Modeling and Simulation: Issues and Approaches”, Proceedings of the 2004 Winter Simulation Conference Lacy, Lee, (2005) OWL:  Representing Information Using the Web Ontology Language, Trafford Publishing, 2005.Lacy, Lee W., Gerber, William J., (2004) “Potential Modeling and Simulation Applications of the Web Ontology Language – OWL”, Proceedings of the Winter Simulation Conference, December 2004, Washington D.C.Lacy, Lee, et al, (2002) "Providing Authoritative Equipment Characteristics and Performance Data to Simulations using Data Interchange Format Standards", Proceedings of the Spring 2002 Simulation Interoperability Workshop, March 11-14, 2002, Orlando, FL.Lacy, Lee, Dugone, Theodore, Youngren, Robert W., (2001) “Standard Data Exchange Methods for Equipment Characteristics And Performance Data”, Proceedings of the Interservice/Industry Training, Simulation and Education Conference (I/ITSEC), November 26-29, 2001, Orlando, Florida.Lacy, Lee W. and Major Tedd Dugone, (2000) “Using XML To Share Offline Simulation Data”, Proceedings of the Summer Computer Simulation Conference 2000, Vancouver, B.C., Canada, July 16-20, 2000.Lacy, Lee, Stone, George III; Dugone, Theodore D. (1999) “XML Data Interchange Format Standards for HLA-Related Data Interoperability”. Proceedings of the Southeastern Simulation Conference ’99Lacy, Lee and Cynthia Tuttle, (1998) "Interchanging Simulation Data using XML",  Proceedings of the 1998 Fall Simulation Interoperability Workshop, http://www.sisostds.org/siw/98fall/view-papers.htm, September, 1998.Reichenthal, Steven W. (2002a) “The Simulation Reference Markup Language (SRML):  A Foundation for Representing BOMs and Supporting Reuse”, 2002 Fall SIW, 02F-SIW-038Reichenthal, Steven W. and Gustavson, P.L., (2003b) “Manufacturing BOMs with SRML for Process-Oriented Federations”, 2003 Fall SIW, 03F-SIW-109Reichenthal, Steven W. (2004) “SRML Case Study:  Simple Self-Describing Process Modeling and Simulation”, Proceedings of the 2004 Winter Simulation Conference.Reichenthal, Steven W., (2002b) SRML – Simulation Reference Markup Language W3C Note, available on-line:   HYPERLINK "http://www.w3.org/TR/SRML" http://www.w3.org/TR/SRML, December 18, 2002.Reichenthal, Steven W., (2003a) “Case Study:  Prototyping a Mega-BOM with SRML for Next-Generation Combat Support”, Spring 2003 SIW.Author BiographyLEE W. LACY is a PhD candidate at the University of Central Florida.  He also heads the Modeling, Simulation, and Training Business Unit at Dynamics Research Corporation (DRC) and is on the Board of Directors for the National Center for Simulation (NCS).  He has published and presented many papers at SIWs and other conferences.ProcessModel® is a registered trademark of ProcessModel, Inc., AnyLogic™ is a trademark of XJ Technologies Company Ltd., Arena® is a registered trademark of Rockwell Software, a Rockwell Automation company, ProcessModel® is a registered trademark of ProcessModel, Inc., ProModel® is a registered trademark of PROMODEL Corporation.