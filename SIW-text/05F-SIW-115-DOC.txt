Using MÄK Game-Link to Provide Interoperability between Games and Military SimulationsBrian SpauldingGarry MorissetteJorge MoralesMÄK Technologies10 Fawcett StreetCambridge, MA 02138617-876-8085 HYPERLINK "mailto:bspaulding@mak.com" bspaulding@mak.com,  HYPERLINK "mailto:gm@mak.com" gm@mak.com,  HYPERLINK "mailto:jmorales@mak.com" jmorales@mak.comKeywords:HLA, DIS, Game Engine, Training, Unreal Engine, America’s ArmyABSTRACT: Although the military has designed and mandated the use of interoperability standards to facilitate communication between heterogeneous simulations, the game industry continues to focus on proprietary communication mechanisms.  In order to bridge this gap, the Game-Link adapter for the Unreal Engine was developed to enable training systems built using Epic’s game engine to interoperate with other DIS- or HLA-compliant military simulations.   MÄK Game-Link extends the capabilities of the Unreal Engine, making it easier to communicate with the engine and avoiding the need for a detailed understanding of the complexities of DIS and HLA. MÄK Game-Link is used with each Unreal server or stand-alone application to convert between Unreal Engine actors and interactions and HLA or DIS objects and interactions.  Rather than “reinventing the wheel” and creating special purpose game engines for military training systems, Game-Link will enable the military to take advantage of the volumes of scale of the game industry, provide access to the latest state-of-the-art game engines, and yet still provide interoperability using available interoperability standards.This paper will describe the approach used to develop Game-Link and the lessons learned from mapping a commercial game engine to the military HLA interoperability standard.1. IntroductionThe U.S. military continues lead efforts to supplement live training with the use of general purpose computer-based simulations.  These simulators can be used for everything including pilot training, logistics planning, force protection, or individual skills training.  During Desert Storm, “U.S. pilots who bombed Baghdad say increasingly detailed flight simulators helped familiarize them with the terrain, the threats and even the weather conditions they would face on the battlefield”. [1] Simulators enable trainees to avoid skill decay and practice in situations that would be dangerous or impossible to duplicate.  “In general, simulators save flight hours and fuel, and let pilots practice flying in situations that could be difficult due to air space restrictions and other factors”. [1]The DoD has invested billions of dollars in the development and fielding of simulators for training.  In recent years there has been an accelerated shift in making use of video game technology for training.  In fact, “the military has embraced digital game-based learning with all the fervor of true believers”. [2]  The use of “games” is actually not a new approach.  The flight simulator, which we assume came from the military, “was originally designed by Edwin Link in 1930 as an entertainment device”. [2]  Examples of this use of video game technology include the development “Marine Doom”, the recent success of the recruiting game “America’s Army” and its transition for use in training, and the recent release of “First to Fight”, developed as both a training tool for the USMC and a commercial game.  However, despite the various advantages of video games technology (volumes of scale, perception that they have higher-fidelity graphics and physics, “fun” factor, etc.), this approach has serious limitations in interoperability between training systems, especially between training systems not developed by the same vendor.  Although many of these games support multi-player, networked environments, in general they use proprietary techniques that make it impossible to interoperate with other games.  In contrast, the DoD has invested much time and effort to create standards like the High Level Architecture (HLA) or the Distributed Interactive Simulation (DIS) protocol to facilitate interoperability and mandated their use to ensure communication between heterogeneous simulators.In order to bridge this gap, MÄK Technologies developed the Game-Link adapter for the Unreal Engine to enable training systems built using Epic’s game engine to interoperate with other DIS- or HLA-compliant military simulations.   Figure  SEQ Figure \* ARABIC 1:  Unreal-based game interoperating with the HLA-compliant VR-Forces.MÄK Game-Link extends the capabilities of the Unreal Engine, making it easier to communicate with the engine and avoiding the need for a detailed understanding of the complexities of DIS and HLA. This paper describes the design and implementation of Game-Link and provides some examples of its usage to enable communication between an Unreal-based game and existing military simulations.2. Game-Link OverviewDevelopers can integrate MÄK Game-Link into any game, preexisting or new, developed using the Unreal Engine [3]. Game-Link extends the capabilities of the Unreal Engine, making it easier to communicate with the engine and avoiding the need for a detailed understanding of the intricacies of DIS and HLA. MÄK Game-Link is embedded within each Unreal server or stand-alone application to convert between Unreal Engine actors and event and HLA or DIS objects and interactions.Game-Link consists of three components: The MÄK Adapter application, a DLL that uses the VR-Link networking toolkit [4] to bridge between HLA or DIS network messages and generalized game objects; The MÄK Adapter Plug-in, which can send Unreal object states to the MÄK Adapter; and The Unreal Plug-in Interface, an extension to the Unreal Engine to facilitate access to internal state information.  REF _Ref108420881 \h  \* MERGEFORMAT Figure 2 illustrates the configuration of the MÄK Game-Link components. Figure  SEQ Figure \* ARABIC 2:  Game-Link Components.The Plug-in interfaces with the Unreal Engine, enabling the MÄK Adapter to access internal details about Unreal actors and events and to convert them to DIS or HLA and to create Unreal representations of externally-created HLA or DIS objects and interactions. 3. Game-Link Technical Architecture3.1 Unreal Plug-in Interface (UPI)The Unreal Plug-in Interface (UPI) is an extension of the Unreal Engine, applicable to any drop. The UPI enables developers to write plug-in applications to query the state of actors in the current level and to stimulate the level – modifying actors, adding new actors, or generating messages like the firing of weapons, detonation of munitions, or other messages. From a plug-in, developers can export information describing the state of the game and import data from other applications. For example, developers can use plug-ins to connect with other games or simulations, to create an AAR tool, to create a data logger tool, etc.Within the plug-in architecture, Unreal actors send signals that are received by the Remote Control module. Within the Remote Control module, a Callback Manager keeps track of signals for which plug-ins have registered interest. When such a signal is received, it is sent to the plug-in. The plug-in processes the signal in whatever way it is designed to respond. It forwards the data to an external application (an adapter) that processes the data as specified by the application.The UPI is implemented by:Extensions to some Unreal Engine classes, mainly AActor, APawn, ULevel, and UGameEngine.A module, named Remote Control, in which the plug-ins execute. With the extensions, AActor-based classes generate signals for events like creation, deletion, and updates. These signals are sent to the Remote Control module. The Remote Control module passes the signals to any plug-ins that have registered an interest in them. Extensions in UGameEngine enable access to the Remote Control module and keep the module connected with the current level. Plug-ins can affect the game by adding and removing actors, generating interactions, etc.Plug-ins are executed in the Remote Control after they are added to the Plug-in Manager. The decision when to add a plug-in depends on its functionality.  Deciding when to start a plug-in is up to the developer. For example, mechanisms offered by Unreal, such as a new command line parameter or a new entry in the Unreal Engine configuration files can be used. The method used must run the plug-in only where necessary (in the server, in each instance, in the clients, or in stand-alone mode).3.2 MÄK Adapter and Plug-inThe MÄK Adapter plug-in (FPluginMakAdapter) is a Game-Link plug-in that connects an Unreal game with an HLA or DIS simulation using a library called the MÄK Adapter application (MakAdapter).  FPluginMakAdapter listens to signals to create and remove actors published by the Unreal Engine and forwards them to MakAdapter, which sends them out over the network as appropriate DIS or HLA messages. Similarly, MakAdapter listens to the HLA or DIS traffic and sends messages to FPluginMakAdapter, which stimulates the Unreal Engine.  The MÄK Adapter plug-in architecture is based on a master–slave structure, in which MakAdapter is the master and FPluginMakAdapter is a slave that reflects the external simulation and gets information from the Unreal world when MakAdapter requires it.  For asynchronous events like creating and deleting actors and fire or detonation interactions coming from the Unreal world, these interactions generate asynchronous calls from FPluginMakAdapter to MakAdapter.  Similarly, MakAdapter generates asynchronous calls to FPluginMakAdapter when a create/remove entity or fire/detonation interaction happens in HLA or DIS.3.3 Mapping between Unreal and HLA/DISMuch of the mapping between the Unreal and HLA or DIS environments is configurable using external files, requiring no additional code to be written to support a variety of applications.  Specifically, a user can use these files to:Specify DIS vs. HLA, which version, and which FOM.Map HLA/DIS entities to Unreal actors and configure the connection.Specify terrain correlation parameters.4. Supported StandardsOut-of-the-box, Game-Link supports the following DoD standards.4.1 DIS VersionsGame-Link supports the DIS 2.0.4, IEEE 1278.1, 2.1.4, and IEEE 1278.1a.    4.2 HLA VersionsGame-Link supports the HLA 1.3 and IEEE 1516 standards. Which version to use can be specified by linking with the appropriate DLL when compiling the Unreal application.4.3 Supported RTI ImplementationsGame includes a run-time license for MÄK RTI license and an associated installer.  This includes both 1.3 and IEEE 1516 versions of the MÄK RTI.  Game-Link is not tied to the MÄK RTI and can be used with any other 1.3 or IEEE 1516 Dynamic Link Compatible (DLC) RTI implementations.4.4 Supported Federation Object Models (FOMs)Game-Link supports for the Real-Time Platform Reference (RPR) FOM versions 0.5, 0.7, 0.8, 1.0, and 2.0, drafts 6, 14, and 17. Which version to use is specified in the MakAdapter.mtl configuration file. Game-Link automatically supports Platform objects and attributes associated with the DIS or RPR Entity State.  It also supports Fire and Detonation events.  These objects and interactions can be remapped to support other FOMs by taking advantage of VR-Link’s FOM-agile architecture.  By using a separate VR-Link development toolkit, FOM-mappers can be implemented, either by the developer or by contracting MÄK. 4.5 Unreal Engine VersionsCurrently, Game-Link supports the following versions of the Unreal Engine:Version 2.0, drops 2226 and 2227Version 2.5, drops 3236 and 33395. Using Game-Link5.1 Using with Unreal Engine-based ApplicationsGame-Link has been successfully integrated with several versions of America’s Army to provide interoperation with other military simulations.  As part of demonstrations at NGAUS ’04 and I/ITSEC ’04, Anteon and Atlantis Cyberspace used the Anteon Mobile MOUT system, the Atlantis Cyberspace VR-Pods, a DIS-compliant America’s Army, JCATS constructive simulation, and MetaVR UAV simulator, to implement a Live-Virtual-Constructive training environment. [6]  Anteon’s Mobile MOUT is an instrumented live training system configured in a stackable 40-foot container format.  The Immersive Group Simulation (IGS) system from Atlantis Cyberspace provides an immersive, virtual training environment.  The IGS was running the DIS-compliant Amercia’s Army to enable it to interact with the other simulations and after-action review tools.  Figures  REF _Ref109114984 \h Figure 3 and  REF _Ref109114991 \h Figure 4 show images from the I/ITSEC demonstration.Figure  SEQ Figure \* ARABIC 3:  Anteon Mobile MOUT and Atlantis Cyberspace Pods.Figure  SEQ Figure \* ARABIC 4:  Virtual MOUT in action.In addition, Virtual Heroes has continued the effort to incorporate Game-Link into the latest versions of America’s Army, as the basis for using the engine to implement other military training systems.  5.2 Using with Unreal Tournament 2004Although, originally targeted for developers who had licensed the Unreal Engine source from Epic, it quickly became apparent that there were a number of users who were creating training applications by creating Unreal Tournament 2004 (UT2004) “mods” rather than implementing entirely new applications.  As part of the Game-Link environment, if requested, MÄK will provide a copy of UT2004 with an embedded Game-Link.  This version requires valid licenses for both UT2004 and Game-Link, but enables the developers to create HLA- or DIS-compliant mods.  An example of the use of Game-Link with a UT2004 mod, was the development of a Mod to demonstrate a Navy SEAL training system as part of the Battlefield Tactics Trainer (BTT) HLA Federation used as part of the DARPA-sponsored DARWARS program. [5]  BTT included an HLA training federation consisting of a native HLA-compliant training system used by the USMC (MAGTF-XXI), a commercial game made HLA-compliant by Sonalysts, and used by the U.S. Naval Academy (Jane’s Fleet Command), and Unreal SEAL used a first-person-shooter for Navy SEAL training.Figure  SEQ Figure \* ARABIC 3:  DARWARS Battlefield Tactics Trainer HLA Federation.6. References[1]	Simulators Capture War’s Realities, The Associated Press, Apr 30, 2003.[2]	Prensky, M., Digital Game-based Learning, McGraw-Hill, 2001.[3]	More details on Epic’s Unreal Engine available at  HYPERLINK "http://www.unrealtechnology.com/" http://www.unrealtechnology.com/.[4] 	More details on MÄK’s VR-Link toolkit available at  HYPERLINK "http://www.mak.com/vrlink.php" http://www.mak.com/vrlink.php.[5] 	More details on the DARPA DARWARS program available at  HYPERLINK "http://www.darwars.net/" http://www.darwars.net/.[6] 	More details on the Atlantis Cyberspace and Anteon Mobile MOUT demonstrations available at  HYPERLINK "http://atlantiscyberspace.com/lvccapabilities.html" http://atlantiscyberspace.com/lvccapabilities.html and  HYPERLINK "http://www.anteon.com/" http://www.anteon.com/.Author BiographiesBRIAN SPAULDING is the Director of Contract Engineering at MÄK Technologies, responsible for management of all simulation-based, R&D contracts.  Some of these include the DARPA-sponsored DARWARS program, several ADL projects, and the tactical decision-making simulation development efforts including Battle Command, MAGTF-XXI, and Game-Link.GARRY MORISSETTE is the Business Development Manager for MÄK’s Trainer-related activities including Battle Command, MAGTF-XXI, and Game-Link.JORGE MORALES is a Senior Engineer at MÄK Technologies and is the primary software developer of the Game-Link product.   