Semantics and Syntax of Mission Space ModelsFurman Haddix, Ph.D., Jack Sheehan, Michael Loesekann, Roy ScrudderDefense Modeling and Simulation Office HYPERLINK "furman@arlut.utexas.edu" furman@arlut.utexas.edu,  HYPERLINK mailto:jsheehan@msis.dmso.mil jsheehan@msis.dmso.mil,  HYPERLINK mailto:mloeseka@msis.dmso.mil mloeseka@msis.dmso.mil,  HYPERLINK "scrudder@arlut.utexas.edu" scrudder@arlut.utexas.eduKeywords:Mission Space, Models, Simulation, Conceptual ModelsABSTRACT: Experience has shown that many modeling and simulation (M&S) system errors come from incorrect or misunderstood mission space requirements. In the DoD M&S arena, these errors or misunderstandings are most likely to occur with regard to the military operations mission space. A well-formed mission space model represents the knowledge of subject matter experts in a format that supports the needs of validation agents and simulation developers. Mission space models are implementation-independent functional descriptions of the real-world processes, entities, environmental factors, and their associated relationships and interactions within the context of a set of military missions, operations, or tasks.Over the last three years, the Defense Modeling and Simulation Office (DMSO) has developed a common set of semantic concepts for mission space modeling and a common set of semantics and syntax for linking these concepts through the Conceptual Models of the Mission Space (CMMS) program. These common semantics and syntax are described as part of the CMMS Data Representation Interchange Specification (DRIS). The CMMS DRIS supports the exchange of functional descriptions of military operations without loss or distortion of content. The common semantics and syntax of the CMMS DRIS provides a means for the effective reuse of military mission space knowledge within and among simulation programs. This set of semantics and syntax encompasses mission space modeling concepts required by DoD simulation programs, and is designed to meet the needs of future military mission space modeling efforts. This paper will detail the fundamental semantic concepts in the CMMS DRIS and the syntactic relationships among those concepts.1. IntroductionThe capture of a military operation’s domain information is a necessary step in the development of an effective DoD model or simulation. Rigorous mission space modeling is required for effective communication between military domain experts and simulation developers. The Conceptual Models of the Mission Space (CMMS) Data Representation and Interchange Specification (DRIS) provides a common set of semantic concepts and syntactical constructs for mission space modeling across military domains. [1, 2, 3]2. BackgroundAs conceived in the DoD Modeling and Simulation Master Plan, the Conceptual Models of the Mission Space is a strategy for placing control of modeling and simulation products into the hands of the warfighter. This was, and is, a case of communication to empower the eventual consumer. The warfighters cannot drive the development of modeling and simulation products to meet military needs until they are able to express their intent in a manner that is clear, complete, and unambiguous to the simulation developers. The DMSO CMMS project was initiated with that objective in mind. The CMMS-DRIS is intended as a vehicle to communicate and specify model and simulation representation requirements. Implicit in this intent is the requirement that all important constituencies will be served. Four major constituencies for CMMS products are the warfighters, the knowledge producers, the VV&A (Verification, Validation, and Accreditation) agents, and the simulation developers. Each of these stakeholders has different perspectives, needs, and requirements. It is also intended that the following set of mission space model elements may be reconstituted into multiple views such that one or more views will support the needs of each constituency.3. Mission Space Model ElementsConceptual Models of the Mission Space are simulation and implementation-independent functional descriptions of key aspects of the real (or projected) world including entities, process, environmental factors, and associated relationships and interactions. Current focus is the military operations domain. With the advent of Simulation Based Acquisition (SBA), other domains such as manufacturing and life-cycle operations and maintenance will also be of interest. The common semantics and syntax for CMMS is implemented by the model elements described in this section of the paper. As CMMS is intended to inform the design but not to be the design, a conscious effort has been made to avoid naming conventions which might overload or conflict with computer-science-specific object-oriented programming terminology. The set of common semantics and syntax introduced in this paper is implemented by the primary model elements described in this section [1].3.1. ProcessA Process is an activity performed in order to achieve an objective within the military operations mission space. Two Processes can have a type-of relationship between them, in which one is a type of the other. This allows the reuse of generic descriptions; e.g., the planning Process which breaks down brigade objectives into battalion objectives is similar to the Process for breaking down company objectives into platoon objectives. The common elements of the Process description are included in the generic Process, “Allocation of Superior Unit Objectives into Subordinate Unit Objectives.” The elements that are different are allocated to the two Processes. This can vastly reduce the amount of knowledge to be maintained. For example, if the descriptions of the two specific processes are 10,000 words, but 8,000 words are common, instead of maintaining two specific process descriptions of 10,000 words each, only two 2,000-word specific processes and one 8,000-word generic process are maintained. Thus, not 20,000 words, but 12,000 words must be maintained. If the same approach works for a battalion/company Process, 30,000 words will be reduced to 14,000. Similar dividends may be realized in product quality.3.2. Entity and CharacteristicAn Entity is an object of battlefield significance. Examples include persons, organizations, equipment, supplies, facilities, features, information, networks, and aggregations of the above. For example, organizations are aggregations of other organizations and persons; networks are aggregations of equipment and organizations, and are used to transmit information. Entities may perform Processes. If a process does not have an Entity performer, it is abstract or virtual; with an entity performer, it is concrete or actual. A generic process need not have a performer, or it may have a generic performer, such as superior organization. An Entity may also be the object of a process, e.g., as in the Division attacks the OPFOR Regiment, or a plane may be the object of a pilot’s flying. Either or both of the performer and the object may have state changes due to the performance of the process. These state changes are called Events, a concept discussed in a later subsection.A Characteristic of an Entity describes a dynamic or static trait of an entity, such as location or fuel capacity of a vehicle, respectively.3.3. Process ControlA Process Control provides a condition on the performance of a process. Conditions may affect initiation, interruption, or termination of the affected process. The Process Control may specify a Process to follow an interruption or abnormal termination.3.4. Process GroupA Process Group is a partially ordered collection of Processes, Process Groups, and Selections of Processes. Sequencing constraints are placed on the members of a Process Group to define the order in which the members are performed. For example the Process Group might be "Movement to Contact" for ground forces. The first two tasks to be performed (following planning and assembly) are "Perform Tactical Movement" and "Employ Indirect Fire in the Offense". Following the tactical movement, the unit will "Assault an Enemy Position (Dismounted)", "Assault an Enemy Position (Mounted)", or "Perform an Attack by Fire" depending on the status of the Enemy (dug in, battle position, or hasty defensive position, respectively). A Selection is such a group of Processes in which the first whose initiation Conditions is satisfied will be performed and the others won’t. The Selection, "Perform Actions on Contact" is composed of the three assault (attack) Processes. The sequencing constraints of a Process Group are provided by Process Sequences. In the example, the first Process Sequence is a sequence of the Process "Perform Tactical Movement" followed by the Selection "Perform Actions on Contact". The second Process Sequence is concurrent with only one element, "Employ Indirect Fire in the Offense". This means that the Process "Employ Indirect Fire in the Offense" will be performed while the other Processes of the Process Group are being performed. Thus, the Process Group is composed of three elements, two Processes, and the Selection, which is composed of three Processes, only one of which will be performed, to be determined by a particular set of circumstances.3.5. Conditions and MeasuresConditions and Measures may be associated with Process Groups. They are associated with Process Groups, because although they affect the performance of Processes, they may be modified as the result of the performance of Processes other than those whose performance they affect. Conditions and Measures may be defined as constants, as Characteristics of Entities, or as combinations of both. 3.6. Process Group InstanceA Process Group Instance provides the capability of amplifying the Process descriptions of a Process Group by defining scenarios which provide explicit traces of Process Group performance under different situations. A Process Group Instance provides a consistent definition of a scenario which may consist of three components: Instances of Entity Characteristics which may describe static parameters or initial values for dynamic variables, Condition Values which describe a specific value for a Condition which may be dependent on Entity Characteristics, and Measure Standards which describe a standard for measures of performance, measures of effectiveness, or essential elements of analysis, which may be dependent upon Characteristics or Conditions.The way that a Process Group Instance affects performance is by defining Process Controls based on the Entity Characteristic instances, Condition Values, and Measure Standards described in the Process Group Instance.3.7. Process Group PackageA knowledge development process may result in the production of hundreds, even thousands of Process Groups. A Process Group Package provides a means of packaging related Process Groups together to improve the ease with which a specific Process Group may be located. This is due to its being packaged with other Process Groups of similar purpose, related performers, related functionality, etc.3.8. AssociationAn Association is a relationship between two Entities. It represents the potential for an interaction between Processes being performed by the two Entities. Associations may use Stereotypes. A Stereotype is a predefined description. Its power comes from two attributes, and since it is already defined, no effort must be expended to define its concepts; since it is previously defined and presumably well known, there is less opportunity for misunderstanding than with a new definition. Association Stereotypes include Command, Communication, Coordination, In Range, Support, and Visible.3.9. InteractionAn Interaction is the exchange of one or more of an Entity between Processes being performed by Entities. For example, a Resupply Interaction between Resupply Ammunition (performed by an Ammunition Truck) and Accept Resupply (performed by a Self-Propelled Howitzer (SPH)). The result is the state of the Ammunition Truck is changed to represent the rounds transferred to the SPH, and the state of the SPH is changed by a corresponding amount. Interaction Stereotypes include Allocation, Attack, Land, Launch, Resupply, and Transmission.3.10. EventAn Event is the formal representation of a change in state due to the performance of a Process. Events provide detailed guidance to simulation developers as to what characteristics of entities change and by how much. There are three kinds of Events:Change in state at beginning of Process (Entity performing a Process)Change in state at end of Process (Collision damage assessment)Change in state during a Process (Fuel consumption, Location change, Resupply)3.11. SummaryThese are the principal semantic elements of the CMMS-DRIS. There are other mission space model elements; however, they were not presented because this is not intended to be a complete description of the CMMS-DRIS. The following section, however, describes some additional elements of the CMMS-DRIS, which enhance the utility of the mission space model elements.4. Related Information Elements4.1. SourceA Source is a specification of an (authoritative) reference used in preparation of a major model element, such as those described in Section 3. A Source encourages reuse of well-formed reference descriptions. Source usage facilitates control of knowledge producer use of Authoritative Data Sources. Consistent specification of sources facilitates determination of several issues for the VV&A agent: Is the source approved for use in the current knowledge production effort;Is the source authoritative, and is the source agent appropriate for the current knowledge production effort; andIf the knowledge product appears to be inappropriate, from where did the incorrect information emanate.From the knowledge producer viewpoint, well-specified sources facilitate modification of the knowledge product should modification become necessary. From the simulation developer viewpoint, well-specified sources facilitate interpretation of knowledge passages where additional information is required for clear understanding.4.2. KeywordA Keyword provides an easy-to-use multiple taxonomy access capability. Support for multiple taxonomies is important for many reasons. For example, each American service uses different terminology. Different terminology is also used by many foreign powers. For example, it may be advantageous to access theater-level command and control processes according to both UJTL (Uniform Joint Task List) and service-specific taxonomies. The CMMS-DRIS contemplates that an entire taxonomy might be submitted at one time, or that a taxonomy might be built up element by element on an ad hoc basis.4.3. Configuration Unit and Registration of Mission Space ModelsConfiguration Unit is a link from one or more mission space model elements to metadata about the model element(s). Individual model elements may be assigned to a Configuration Unit, which links to sponsor, producer, VV&A, build, federation, etc. A key part of providing value-added knowledge resources to M&S users is providing easy access and reliable information concerning production, accreditation, and other pedigree elements of interest to CMMS users. This information is collected through an initial process of registering the mission space model or models to be added to the CMMS Libraries. The concept of configuration unit is used to allow a single registration to cover a model submission of arbitrary size. Once the registration/configuration information has been collected, it may be linked to one or more configuration units. Similarly, all major model components of the subsequent submission are linked to a configuration unit by a configuration unit identifier. In this way, the configuration unit information is always available to potential users but at minimal registration, administration, maintenance and query cost. The configuration unit is the denominator of versions within a registration element, such as a build.5. Transfer IntegrityTwo concepts, namely dual identifier maintenance and explicit transfer purpose are used in the CMMS-DRIS in order to maintain the integrity of transfers [2,3] between data systems, such as a relational database.5.1. Dual Identification in Data System TransfersMost data systems assign unique identifiers to model elements. When models are exchanged between systems, there is always the possibility that the unique identifier in the sending system is not unique in the receiving system. This is of great importance to the issue of model reusability across development efforts, since the ability to maintain concepts of ownership and modifiability are important to reuse functionality.When an exchange of mission space model elements is made, the sending data system’s model space is usually unchanged; however, the receiving data system’s model space is changed. With respect to the received model elements, the receiving data system will need to assign its own unique identifier; however, there are several advantages to a policy of maintaining the sending data system identifiers as well:If the model elements are modified by the sending data system subsequent to their submission to the receiving data system, maintenance of the sending data system identifiers by the receiving data system will facilitate replacement or update of the existing knowledge with the modified knowledge.If model elements are modified while in the receiving data system, such as decomposed to a different level of resolution, the original sending data system may wish to replace the old information with the new in its model library. Having the sending data system native identifiers still attached will greatly facilitate this.The algorithms used to translate the sending data system identifiers to receiving data system reference identifiers may be more robust in the face of errors in the identifiers if both sending and receiving identifiers are maintained.If there are any problems of interpretation or translation when the transfer is made, having the sending data system identifiers still attached may prove invaluable in resolving any errors or ambiguities.5.2. Explicit Transfer PurposeExplicit Transfer Purpose puts identification of the transfer purpose in the hands of the sending data system. It is presumed that the sending data system has the best information with respect to the transfer of any semantic element. A reference to a semantic element is identified as falling into one of three categories:Existing meaning that the receiving data system is expected to already know about it, whether it was originally created by the sending data system, receiving data system, or a third data system.Internal meaning that the receiving data system has no prior knowledge of the referenced model element and that the model element is described elsewhere in the current transfer.Forward meaning that the receiving data system has no prior knowledge of the referenced model element and that the model element is also not described in the current transfer. Thus, this is a reference to a model element whose description is planned for a later submission.A description of a semantic element is also identified as falling into one of three categories:Addition meaning that this is the first transfer involving this model element and its associated subordinate model elements.Replacement and Update mean that the current model element transfer is with reference to a previously transferred model element. Replacement means that the previous transfer is to be completely replaced by the current transfer.Update indicates that with respect to subordinate model elements, one that is not included in the current transmission should not be modified in the receiving data system. Using update where minor changes are intended for a large and complex model element can dramatically reduce the data transmitted and consequent possibility of error.5.3 Why Transfer Integrity is ImportantThe preceding paragraphs of this section describe explicit purpose and dual identifiers for transfers. This subsection explains why this is important.A principle of the CMMS approach, dating from inception, is that the knowledge would be reused. A significant aspect of any phase of development is that modifications must be made. When you have reuse by different development efforts and the possibility of correction or enhancement, the need for careful identification of model elements becomes very important. One of the capabilities provided is that a reference to a model element may be static or dynamic; that is, a static reference points to the same description forever, while a dynamic reference points to the most recent description of a model element. The decision between static and dynamic referencing is made on a model element basis by the knowledge producer (re-user). In making this decision, the knowledge producer should consider many factors, including congruence of purpose and fidelity with the model owner, and importance of the reused model to his simulation. The expected common usage would be dynamic for one’s own or co-produced models, and static for all others; however, there certainly will be exceptions to these simple heuristics.6. Extended Example6.1 Scenario: Armor Company Performs River CrossingAn armor company is to cross a river. The armor company must perform five activities in order to accomplish this: "Prepare To Advance From Current Position"; "Advance To River"; "Cross River"; "Advance To New Position"; and "Occupy New Position". In addition, the armor company will receive close air and indirect fire support while engaged in this operation. 6.2 Analysis: Important Considerations and AssumptionsThe Process, "Armor Company Perform River Crossing", may be subdivided within a Process Group with the same name. Such decomposition is advisable because although the armor company is the principal actor, there are also actions required by elements of the Air Force and Field Artillery. However, these activities will not be considered in detail.6.3 Resulting StructureProcess: Armor Company Performs River Crossing   Process Group: Armor Company Performs River Crossing	/* This process group provides a detail decomposition of the process by the same name */      Process Sequence: Concurrent         Process Group: Field Artillery Provides Indirect Fire Support	/* This process group is performed concurrently with all the other activities of the containing process group. The concurrent semantic is used to indicate that it is part of the containing process group, but has no other constraints.*/      Process Sequence: Sequential         Process: Armor Company Prepares to Advance from Current Position         Process: Armor Company Advances to River      Process Sequence: Sequential         Process: Armor Company Prepares to Advance from Current Position         Process Group: Air Force Provides Close Air Support to Ground Unit	/* This process group commences only when preparation for advance is complete. */      Process Sequence: Sequential         Process: Armor Company Advances to River         Selection: Armor Company Crosses River            Process: Armor Company Fords River            Process: Armor Company Crosses Bridge	/* This selection with two alternatives means that a separate description is not necessary for two cases. */      Process Sequence: Sequential         Selection: Armor Company Crosses River         Process: Armor Company Advances to New Position      Process Sequence: Sequential         Process: Armor Company Advances to New Position         Process: Armor Company Occupies New Position      Process Sequence: Sequential         Process: Armor Company Advances to New Position         Process: Armor Company Occupies New Position      Process Sequence: Sequential         Process Group: Air Force Provides Close Air Support to Ground Unit         Process: Armor Company Occupies New Position/* This constraint exists because it is unnecessary to provide CAS while the Armor Company occupies its new position. This assumes that OPFOR resistance has been suppressed, as was provided for Advances to River, Crosses River, and Advances to new Position. */7. References[1]	Conceptual Models of the Mission Space Data Representation Interchange Specification (CMMS-DRIS) Common Semantics and Syntax (CS&S) for Model Representation, Version 1.1, March, 1999.[2] Conceptual Models of the Mission Space Data Representation and Interchange Specification (CMMS-DRIS) Model Representation Data Interchange Format (DIF), Version 1.2, June, 1999.[3] Conceptual Models of the Mission Space Data Representation and Interchange Specification (CMMS-DRIS) Metadata Representation Configuration Data Interchange Format (DIF), Version 1.2, June, 1999.