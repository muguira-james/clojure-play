WMDOA Integration Employing Web Services for Federate Communication – an XMSF ExemplarKatherine L. Morse, Ph.D.David L. DrakeRyan P.Z. BruntonScience Applications International Corporation10260 Campus Point DriveSan Diego, CA  92121(858)826-6728HYPERLINK "mailto:kmorse@epsilonsystems.com"morsek@saic.com, HYPERLINK "mailto:drakedavid@saic.com"drakedavid@saic.com, HYPERLINK "mailto:bruntonr@saic.com"bruntonr@saic.comKeywords:Web services, XMSF, RTI, HLAABSTRACT: The Extensible Modeling and Simulation Framework (XMSF) [1] is defined as a modeling-&-simulation-tailored set of self-consistent standards, processes and practices employing a set of web-based technologies and services to enable a new generation of Internet-distributed applications to emerge, develop and interoperate.  The goal of our first exemplar of XMSF was to build a prototype HLA federation using XMSF compliant Web Services for communication between HPAC and ITEM in the existing WMDOA federation [2].  We formatted the required RTI calls via SOAP [6] employing the BEEP [7] communication layer to enable bi-directional calls and call backs via the DMSO RTI.  This approach encapsulates non-reentrant RTI libraries, permitting multiple instances of the federate Web Service to run in the same server.  It also overcomes http’s shortcoming of requiring unidirectional service initiation, a shortcoming which makes it unsuitable for supporting simulation communication patterns.  This approach can be applied to other simulation architectures, e.g. DIS.  It also enables existing HLA compliant federates to be integrated easily over the Internet, including through most firewalls with minimal reconfiguration, significantly enabling composability of repository-based simulations.IntroductionThe EXtensible Modeling and Simulation Framework (XMSF) [1] provides a framework which allows both Department of Defense (DoD) and non-DoD Modeling and Simulation (M&S) projects to take advantage of Web-based technologies. Such a framework aids M&S applications to interoperate, as well as enables M&S development. In the report “Extensible Modeling and Simulation Framework (XMSF): Challenges for Web-Based Modeling and Simulation,” a number of suggestions were put forth to address the requirements of developing a web-enabled collection of simulations. In this paper, we present an exemplar development that uses web-based communication protocols, Simple Object Access Protocol (SOAP) [6] and Blocks Extensible Exchange Protocol (BEEP) [7], to allow a High Level Architecture (HLA) compliant simulation to communicate with the Defense Modeling & Simulation Office (DMSO)/Science Applications International Corporation (SAIC) Run Time Infrastructure (RTI) over the Web. The simulation employed in this demonstration is the Weapons of Mass Destruction Operational Analysis (WMDOA) federation developed for the Defense Threat Reduction Agency (DTRA) by SAIC.The remainder of the paper is organized as follows.  Section  REF _Ref440704597 \r \h 2 REF _Ref439156724 \h  provides some background on XMSF as a whole.  A description of the existing WMDOA federation is provided in section  REF _Ref440704624 \r \h 3 REF _Ref439156759 \h .  Section  REF _Ref440704636 \r \h 4 REF _Ref439156772 \h  describes the web-enabled WMDOA federation.  Our initial partial implementation of the web-enabled RTI is described in section  REF _Ref440704737 \r \h 5.  Future work is outlined in section  REF _Ref440704676 \r \h 6 REF _Ref439156814 \h .XMSF BackgroundXMSF is defined as a modeling-&-simulation-tailored set of self-consistent standards, processes and practices employing a set of web-based technologies and services to enable a new generation of internet-distributed applications to emerge, develop and interoperate.The precepts of XMSF are:Web-based technologies applied within an extensible framework will enable a new generation of modeling & simulation (M&S) applications to emerge, develop and interoperate.Support for operational tactical systems is a missing but essential requirement for such M&S applications frameworks.An extensible framework employing Extensible Markup Language (XML)-based languages can provide a bridge between forthcoming M&S requirements and open/commercial web standards, while continuing to support existing M&S technologies.Compatible and complementary technical approaches are now possible for model definition, simulation execution, network-based education and training, network scalability, and 2D/3D graphics presentations.Web approaches for technology, software tools, content production and broad use provides best business cases from an enterprise-wide (i.e. world wide) perspective.Because XMSF is a framework rather than an architecture, it will be comprised of profiles rather than specifications, where a profile is defined as:A tailoring of the set of selected standards (e.g. tailoring of network protocol standards)Data and metadata standardsRecommendations and guidelines for implementation (e.g. composability guidelines, recommended technologies, technology application guidelines, and recommended hardware configuration)Our first exemplar employs the SOAP and BEEP protocol standards, a remapping of the HLA RTI API calls to XML (potentially a data standard), and a process implementation that is consistent with the DMSO/SAIC RTI.WMDOA BackgroundThe WMDOA federation [2, 4] provides an analyst with the capability to model the effects of nuclear, biological, and chemical weapons and facilities within a joint force campaign.  The WMDOA federation consists of a combat model and a weapons of mass destruction model: the Integrated Theater Engagement Model (ITEM) [3] and the Hazard Prediction Assessment Capability (HPAC) [5].  ITEMITEM is an interactive, animated computer simulation of military operations in theater-level campaigns.  It provides fully integrated air, land, and naval (including amphibious) warfare modules that permit realistic simulation of joint force operations in a single, seamless computer environment.  All force-on-force attrition calculations are accomplished by the model.The model is highly interactive with a very strong emphasis on visualization.  The GUI consists of two displays - a Master Interface Process (MIP) and the WARVIEW Geographical Display Process.   REF _Ref441109290 \h Figure 31 illustrates the WARVIEW display.  The MIP is used to create warfare objects and define their parameters, populate system effectiveness tables, schedule warfare events, specify the level of model output desired, run the model for a specified period of campaign time, and review event reports which display event outcomes.  The MIP also permits the user to save the entire state of the campaign at the end of each run period and to restore the model to any previously saved period.HPACThe HPAC software was designed to meet the needs of a broad spectrum of users, from military personnel in the field (“operational” users) to subject-matter experts (“analysts”).  The WMDOA federation uses HPAC in its operational capacity.  The operational user is able to provide basic information regarding the action which caused the release of nuclear, biological, and chemical (NBC) materials, such as the location of a warhead impact or a description of an attack on a storage facility, and is able to interpret graphical output which provides coarse hazard contours with plain-language descriptions, e.g. “50% lethal.”WMDOA FederationIn the federation, ITEM provides the capability for planning a joint-force, theater-level campaign for both red and blue forces. It also provides the capability for modeling the execution of the campaign with respect to intelligence, surveillance, and reconnaissance (ISR), joint-force combat, and logistics operations.  HPAC provides the capability for modeling various aspects of WMD warfare including the generation of plumes of hazardous materials, the dispersal and deposition of the hazardous materials, and the casualties resulting from exposure to the hazardous materials.   REF _Ref441109290 \h Figure 31 shows an example screen shot of WMDOA with dispersal plumes overlaid on an ITEM map. Figure  STYLEREF 1 \s 3 SEQ Figure \* ARABIC \s 1 1.  WMDOA Example Screen ShotThe Web-Enabled RTI ExampleThe short-term goal of our project was to produce an HLA federate that is able to communicate with the RTI through web-based services. The long-term goal is to be able to have multiple federates that are able to reside as web services on a Wide Area Network (WAN), permitting an end-user to compose a federation from a browser. To be able to meet this long-term goal, the supporting federates will need to be configurable, instantiated, and monitored by the end-user. This will require capabilities that go outside the normal operation of an RTI, and will require an additional web service layer that controls these administrative activities.For this exemplar we built a prototype HLA federation using XMSF compliant Web Services for communication between HPAC and ITEM, in this case SOAP and BEEP.  We created SOAP-formatted RTI interfaces employing the BEEP communication layer.  These RTI interfaces are consistent with the Java bindings for the DMSO/SAIC RTI. BEEP allows bi-directional calls through the interface, enabling Federate Ambassador call backs. By relinking HPAC with these interfaces, we have taken the initial steps to making HPAC callable as a Web Service. This approach also enables encapsulation of non-reentrant RTI libraries and will eventually permit multiple instances of federates as Web Services.SOAP and BEEPSOAP is a lightweight, XML-based protocol for exchanging structured data and remote procedure calls.  SOAP provides a framework describing the content and processing directives for a message, a set of conventions for making remote procedure calls and encoding their responses, and an extensible encoding scheme that allows for the encoding of user-defined data types.  A typical SOAP message consists of an Envelope, which encapsulates a single SOAP packet, an optional Head, which contains processing and routing instructions, and a Body, which contains the actual message content.  The advantages of using SOAP as our protocol for remote procedure invocation are many.  First, it is a truly cross-platform and cross-language solution.  By using SOAP we have not tied any component to a particular operating system or programming language.  Second, it is a human readable data format, making development and debugging simpler.  Finally, it allows us to set and release a standard XML schema for the HLA mapping so that third parties can develop fully compatible libraries.Figure  STYLEREF 1 \s 4 SEQ Figure \* ARABIC \s 1 1.  Web-Enabled RTI ArchitectureBEEP is an application layer protocol for designing other application layer protocols.  The BEEP core libraries provide a mapping of the basic packet structure onto TCP, a set of security protocols such as Simple Authentication and Security Layer (SASL) and Transport Layer Security (TLS), and an extensible architecture for defining their own protocol on top of BEEP.  The communication pattern is simple and lightweight.  A client connects to a server process and requests one or more Profiles, where a Profile is a user-defined application protocol.  If the server recognizes at least one of the Profiles, a Session, roughly equivalent to a connection, is instantiated.  Each Session can then support multiple Channels, where a Channel encapsulates all communications for a given Profile.  Using this model we were able to separate RTIAmbassador calls from FederateAmbassador callbacks by assigning each a separate Profile for which we opened a separate Channel.  REF _Ref441048255 \h Figure 41illustrates the architecture of our exemplar.The process model for the web-enabled WMDOA federation is as follows:The user initiates ITEMa.	ITEM starts the WMDOA FederationThe user initiates HPACa.	HPAC spawns an RTI Ambassador Stubb.	The RTI Ambassador Stub spawns a Federate Ambassadorc.	The Federate Ambassador spawns a Federate Ambassador Stubd.	The stubs makes remote SOAP calls to initialize the remote RTI and Federate AmbassadorsHPAC RTI calls go through the RTI Ambassador Stub, out to remote RTI Ambassador via SOAP, which passes the calls to the RTICommunications from the RTI pass to the Remote Federate Ambassador, to the Federate Ambassador Stub via SOAP, and pass to HPAC.Below is a code sample from the web-enabled RTI itself.  The RTI Ambassador Stub call for getAttributeHandle is:public int getAttributeHandle(String theName, int whichClass) {	synchronized(this) {		org.w3c.dom.Element theCall = null;		try {  // theSOAPDoc is an instance of a// org.w3c.dom document   			theCall=theSOAPDoc.createElement( "getAttributeHandle");			org.w3c.dom.Element firstArg = theSOAPDoc.createElement("theName");			firstArg.setAttribute("className", "HYPERLINK "http://java.lang.String/"java.lang.String");			org.w3c.dom.Text value1 = theSOAPDoc.createTextNode(theName);			firstArg.appendChild(value1);			theCall.appendChild(firstArg);HYPERLINK "../../../"// repeat above for each argument		}catch(Exception e) {       HYPERLINK "../../../"//error handling code		}HYPERLINK "../../../"// sendSOAPCall handles the sending of the// XML over the BEEP connection and// deserialization of the response		Message theReply = sendSOAPCall(theCall);// depending on the return type of the// message, either get the handle or// throw an error		switch(theReply.getMessageType()) {		case Message.MESSAGE_TYPE_RPY: 			org.w3c.dom.Element replyTag = getSOAPMethodResponse(theReply);			try{				String replyValue = replyTag.getAttributeNode("value").getValue();				int result = Integer.decode(replyValue). intValue();			}catch(Exception g) {				throw new RTIinternalError("Method RTIAmbassadorStub. getAttributeHandle() threw the following exception: " + g.getMessage());			}			return result;		case Message.MESSAGE_TYPE_ERR:HYPERLINK "../../../"//read and throw appropriate error here		default:			throw new RTIinternalError("");		}	}}This request results in the following SOAP:<?xml version="1.0" encoding="UTF-8"?><soap-env:Envelope xmlns:soap-env="http://schemas.xmlsoap.org/soap/envelope/">	<soap-env:Header/>	<soap-env:Body>		<getAttributeHandle>		      <whichClass>15</whichClass>		      <theName>testClass</theName>		</getAttributeHandle>	</soap-env:Body></soap-env:Envelope>In this case, 15 is the class handle for the class of which testClass is an attribute.  The SOAP response, that returns a value of 42, looks like this:<?xml version="1.0" encoding="UTF-8"?><soap-env:Envelope xmlns:soap-env="http://schemas.xmlsoap.org/soap/envelope/">	<soap-env:Header/>	<soap-env:Body>		<result_getAttributeHandle value="42"/>	</soap-env:Body></soap-env:Envelope>What’s Important About This ExemplarAs we have demonstrated in the past, this particular federation can be run on a LAN.  However, the implications of running this and other federations via web services are enormous.  A legacy simulation may be made available without moving its dedicated hardware or trying to create a new installation on potentially rare hardware, both very expensive propositions.  The simulation can stay home based with its technical support and configuration management.  There’s no switching between supporting different federations at different times.  The positive impact on lifecycle costs and availability can be significant.This exemplar demonstrates that we are capable of implementing bi-directional communication initiation over the Web using SOAP and BEEP.  This approach is superior to http’s uni-directional initiation that makes it unsuitable for supporting simulation communication patterns.  This technology enables existing HLA compliant federates to be integrated easily over the Internet, including through most firewalls with minimal reconfiguration!  The concept of placing the simulation in the DMZ also aids in making it a web service.  Furthermore, it demonstrates web service wrapping of existing architectures, which means that this same approach can also be applied to DIS, ALSP, etc.Status of the Web-Enabled RTIAt this time we have implemented all the RTI Ambassador services for Federation Management, Object Management, Declaration Management, and Ownership Management.  However, only the services listed in  REF _Ref440024416 \h Table 51 were used to support the web-enabled HPAC federate.Table  STYLEREF 1 \s 5 SEQ Table \* ARABIC \s 1 1.  Web-Enabled HPAC RTI Ambassador Servicespublic void createFederationExecution(String executionName, java.net.URL fed)public int getAttributeHandle(String theName, int whichClass)public int getInteractionClassHandle(String theName)public int getObjectClassHandle(String theName)public int getParameterHandle(String theName, int whichClass)public int joinFederationExecution(String federateType, String federationExecutionName, FederateAmbassador federateReference)public void publishInteractionClass(int theInteraction)public void publishObjectClass(int theClass, AttributeHandleSet attributeList)public int registerObjectInstance(int theClass)public int registerObjectInstance(int theClass, String theObject)public void resignFederationExecution(int resignAction)public void sendInteraction(int theInteraction, SuppliedParameters theParameters, byte[] userSuppliedTag)public void subscribeInteractionClass(int theClass)public void tick()public void updateAttributeValues(int theObject, SuppliedAttributes theAttributes, byte[] userSuppliedTag)Both the web-enabled HPAC federate and the web-enabled RTI only used receiveInteraction from the  Federate Ambassador Services.Table  STYLEREF 1 \s 5 SEQ Table \* ARABIC \s 1 2.  Implemented Federate Ambassador Servicespublic void receiveInteraction(int interactionClass, ReceivedInteraction theInteraction, byte[] userSuppliedTag)While we have successfully implemented a great deal of the HLA 1.3 API, a couple of remaining challenges are worth mentioning.  Both are the result of good software engineering practice; they just turn out to be problematic in the web-enabled environment.The first challenge arises with time representation.  To enable federations to define their own time representations with appropriate levels of precision, the language-specific APIs define time as an object class that may be overridden.  While this makes for good software engineering practice, it means there’s no guarantee about the representation of time between two federations beyond the fact that it’s an arbitrary collection of bits.  Furthermore, as there is no predefined data type associated with these interfaces, the byte arrays produced by two sets of RTI libraries upon calling the “encode” method could be arbitrarily different for the same underlying time representation.  Translating between these different encodings would need to be done separately for each implementation of the RTI libraries, making the goal of arbitrary interoperability of HLA compliant simulations despite the underlying RTI executive used more difficult, and more prone to refactoring as new RTI libraries come on to the market.The second major challenge that has arisen involves Distributed Data Management (DDM).  Getting and setting range upper and lower bounds of a region interface requires the developer to pass as an argument a runtime determined dimension handle mapped to a given dimension name in the FOM.  In order to encode and decode a given region into XML for transfer over out SOAP/BEEP infrastructure, we need to be able to query an arbitrary region for its full state, including the upper and lower bounds for each dimension of each extent.  Unfortunately, in order to do this we would need to keep state and context for each region, and for all the dimension handles associated with it within our translation libraries at runtime.  For this reason we don’t plan to implement the DDM services in the web-enabled 1.3 RTI.IEEE 1516Although this exemplar is not currently an IEEE 1516 interface (since 1516-compliant RTIs are not yet available), we have begun the analysis of the feasibility of a web-enabled 1516 RTI.  This analysis is focused on ease and/or difficulty of the implementation to our work to date on the 1.3 RTI.All of the service parameters that were basic data types in 1.3 have been changed to object classes (in Java) in 1516.  While this is very sound software engineering practice, it makes the process of building a web-enabled RTI slightly more challenging.  Many of these object classes extend Java interfaces such as Set and Map, and all of the parameter object classes are serializable.  All standards-compliant Java implementations will perform the same serialization of these grouping classes.  However, there’s no way to guarantee that the object classes that extend these interfaces will have the same serialization because these serializations are defined by the RTI developer.  And the serialization issue is secondary to the fact that it will almost certainly be the case that different RTIs will have different data representations of the object classes even before serialization.It will still be possible to develop a web-enabled RTI.  By using separate handlers for different RTIs, we could also build a web service federate that chooses the right serialization library by detecting the RTI implementation that is calling it.  Making that same web service federate communicate simultaneously with different RTI implementations is considerably more challenging.  Doing so would require knowing the representations and serializations for each RTI, i.e. having their serialization libraries.  It would also require developing a mapping layer between each pair of RTIs or defining a reference representation between which all could be mapped, but that would amount to a wire protocol.Future WorkXMSF successes will be disseminated to the broader M&S community via XMSF Profiles that will include:The set of protocols used for an application domainThe set of data and metadata standards usedA detailed description for applying protocols and data standards to implement the architectureOur next immediate step is to document our current approach as an XMSF Profile.We will also extend the current stub implementation to expand the set of HLA services supported since we only implemented the HLA services required to support WMDOA.  This work will include developing Web Service wrappers for launching federates remotely.  This work will enable composability of federates stored in repositories.We are actively seeking to identify partnership opportunities for operational deployment of this XMSF Profile.  This partnership would benefit someone with an HLA-compliant federation that would like to have their federates be available as web services.References[1]	Don Brutzman, Michael Zyda, J. Mark Pullen, Katherine L. Morse, “Extensible Modeling and Simulation Framework (XMSF) Challenges for Web-Based Modeling & Simulation,” HYPERLINK "http://www.movesinstitute.org/xmsf"www.movesinstitute.org/xmsf, October 2002.[2]	Katherine L. Morse and David Walter, “The FEDEP in the Systems Engineering and Conceptual Modeling for the WMDOA Federation,” Proceedings of the Fall 2000 Simulation Interoperability Workshop, September 2000.[3]	SAIC:  “Integrated Theater-Level Engagement Model (ITEM) User’s Guide, Version 8.3,” October 1999.[4]	SAIC: “System Conceptual Design Document for the Weapons of Mass Destruction Operational Analysis Model,” June 2000.[5]	“The HPAC User’s Guide,” Version 3.2, October 1999.[6]	IETF, Simple Object Access Protocol (SOAP),  HYPERLINK "http://www.ietf.org/rfc/rfc2396.txt" http://www.ietf.org/rfc/rfc2396.txt[7]	IETF, Blocks Extensible Exchange Protocol (BEEP),  HYPERLINK "http://www.ietf.org/rfc/rfc3080.txt" http://www.ietf.org/rfc/rfc3080.txtAuthor BiographiesDr. Katherine L. Morse is a Chief Scientist with SAIC.  She received her B.S. in mathematics (1982), B.A. in Russian (1983), M.S. in computer science (1986) from the University of Arizona, and M.S. (1995) and Ph.D. (2000) in Information & Computer Science from the University of California, Irvine.  Dr. Morse has worked in the computer industry for over 20 years, specializing in the areas of simulation, computer security, compilers, operating systems, neural networks, speech recognition, image processing, and engineering process development.  Her Ph.D. dissertation is on dynamic multicast grouping for Data Distribution Management, a field in which she is widely recognized as a foremost expert.  With Don Brutzman (NPS) and Mark Pullen (GMU), Dr. Morse is one of the founding XMSF partners.  She is also a key contributor in the area of HLA-Advanced Distributed Learning (ADL) integration.David L. Drake is a Program Manager with SAIC. Mr. Drake has 23 years as a computer security professional in computer security design, implementation and evaluation at companies including SAIC, Computer Sciences Corporation, and the MITRE Corporation. At SAIC, he was a senior computer scientist and a manager for the Commercial Security Products Research and Development Division. While at the MITRE Corporation, he was lead developer for the Practical Verification System, a formal specification and automated verification.  Mr. Drake received a Bachelors degree in mathematics from State University of New York at Buffalo and did graduate studies there in artificial intelligence. Mr. Drake received additional computer science training at Stanford Research Institute in California, Northeastern University, and Wang Institute in Massachusetts. He has published articles and given speeches on security and risk assessment topics and has a patent pending on the process for enterprise-wide intrusion detection.Ryan P.Z. Brunton is a Software Engineer with SAIC.  He received his B.S. in computer science (2001) from the University of California, San Diego.  Prior to completing his B.S. he worked at the MOVES Institute at the Naval Postgraduate School.  Mr. Brunton’s key areas of expertise are modeling & simulation, object-oriented design and development, and the extreme programming methodology.  This work was funded by DMSO under GSA contract GS-35F-4461G delivery order T0902BH0769. The WMDOA federation and its federates were developed for DTRA.  SAIC developed ITEM and the federation.  HPAC was developed by a consortium of contractors and integrated by SAIC. Consider just the cost of moving hardware and people to support Millennium Challenge 02. The demilitarized zone (DMZ) of a network is one of the connections to a corporate firewall.  Computers with controlled external access that will be connected to the Internet, e.g. web servers, are typically placed in the DMZ. LogicalTime and LogicalTimeInterval for the Java API, FedTime for C++, and Fed_Time_Delta for Ada. An interface in Java and a class with virtual methods in C++. All bets are off if you’re working the Microsoft™ Java™ “implementation.” We anticipate presenting the profile of this work at the upcoming 2003 Euro SIW.