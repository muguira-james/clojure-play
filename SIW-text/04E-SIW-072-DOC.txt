U.S. Transportation Command Analysis of Mobility Platform FederationSoraya Stevens, Ph.D.Jeffery TustinBBN Technologies10 Moulton StreetCambridge, MA  02138617-873-2681, 617-873-2492sstevens@bbn.com, jtustin@bbn.comWilliam H. Key IINorthrop Grumman Information TechnologyU.S. Transportation Command508 Scott DriveScott Air Force, IL  62225618-229-4101william.key@hq.transcom.milKeywords:simulation, federation, synchronization, object-oriented programmingABSTRACT:  To support US Transportation Command decision makers, the Command is developing the Analysis of Mobility Platform (AMP) Federation for the end-to-end assessment of the strategic deployment and distribution processes. The federation members are the Analysis of Mobility Platform (AMP), the Enhanced Logistics Intratheater Support Tool (ELIST), and the Model for Intertheater Deployment by Air and Sea (MIDAS).  The ELIST model simulates origin and destination activities, while the MIDAS model simulates strategic activities.  AMP is the integration platform for the federation.  AMP is used to synchronize the federation input data, launch the federation, and monitor its execution.  The federation combines discrete event and time step based simulations into a seamless flow of activity.  Together the AMP Federation provides an origin-to-destination modeling capability that is controlled and managed by a single user interface and can be run on a high-end PC.The AMP Federation is a production quality simulation built with the Java programming language [3].  The federation is being developed by a multi-contractor team and shows promise for overcoming many of the past problems associated with running simulations in series.  A Java-based federation infrastructure was the best option for ELIST and AMP, as they are both Java applications.  MIDAS is a C++ application with a Java Native Interface (JNI) layer to allow it to communicate with the AMP Federation.  The communication between federates uses Java Remote Method Invocation (RMI), which is the Java support for distributed systems.  The federation team is jointly developing the Java data structures and control mechanisms for the federation.This presentation will provide an overview of this effort and provide a case study for the use of Java to support a federation of simulations.1. IntroductionThe Analysis of Mobility Platform (AMP) is a modeling and simulation framework that has been used by US Transportation Command analysts since the early 1990’s.  AMP serves as both the editing environment for model setup and as the front-end for running different models.  One of the features of AMP is that it can support linking multiple models together (in a sequential manner) to automatically feed the output from one model into another model.  However, sequential integration provides a limited assessment of the strategic deployment and distribution process.The AMP system has recently been updated and redesigned to use an all Java infrastructure – its predecessor was an all Lisp system.  The move to Java allows for easier integration with other applications and with the models that AMP is designed to support.  The upgrade created the opportunity to change the mechanisms that AMP uses to link together models.  The latest version of AMP supports model integration as a federation rather than the more primitive sequential integration.  This change simultaneously provides more detailed final results as well as run-time analytical opportunities for our users.Our paper will present the AMP Federation and describe the functional requirements of the federated model as well as the technical details involved in its development.  In particular, we will discuss our decision to use a custom AMP federation framework, backed by Java, instead of the High-Level Architecture, which had been used in a prototype AMP Federation [5].2. Functional RequirementDecision makers need detailed information and insights to support defense mobility goals. High-fidelity modeling tools are required to assess the performance of the transportation system from point of origin to point of use.  Various tools, models and simulations have been developed over the years to support this need for information.   However, most of these tools examine specific segments of the mobility system in detail, but cannot provide the full origin-to-destination assessments required. United States Transportation Command is building a simulation federation, bringing together proven tools to bridge this gap.The Model for Intertheater Deployment by Air and Sea (MIDAS) is a time step strategic mobility simulation [2].  The simulation consists of time distance calculations to represent movements form origins to ports of embarkation (POE) and from ports of debarkation (POD) to destination.  For the strategic movement between the POE and POD, MIDAS employs a detailed scheduler and simulation to represent the movement of unit equipment, personnel and sustainment stocks.  The simulation scheduler dynamically selects the strategic transportation mode and ports with the goal of delivering all requirements with minimum lateness.  MIDAS can also respond to exogenous events in the transportation system and reschedule requirements to over come these events.  Development of MIDAS began in 1980.The Enhanced Logistics Intra-theater Support Tool (ELIST) is a discrete event simulation [1].  The simulation represents the theater transportation networks; air, land, water, and pipeline; in high-resolution detail with the support transportation assets.  Airport and seaports are also represented at high resolution to include such details as the number of cranes at a seaport or the number of discrete parking spaces at an airport.  ELIST can accept input from various sources including scripted arrival data or cargo arrivals from a simulation.  As cargo requirements arrive at PODs within ELIST, the simulation begins scheduling their movement through the theater to the final destination.  During this process assets and routes are selected to move cargo in priority order.   ELIST can also be configured to simulate the movement of mobility requirements from the origin to the POE, commonly referred to as CONUS ELIST.MIDAS and ELIST are proven simulations and have been the models of record for major mobility studies since the early 1990’s.  To date, the Analysis of Mobility Platform (AMP) modeling environment, MIDAS and ELIST operate in sequence with an automated data handoff from MIDAS to ELIST.  Although this arrangement provides the detail of MIDAS’s dynamic strategic scheduling and ELIST’s detailed simulation of theater movement, there is no run time interaction between the simulations.  The sequential model limitations are that MIDAS does not know what is occurring in the theater, e.g., a backlogged port unable to receive more cargo; and ELIST does not know what has occurred in MIDAS, e.g., diverted cargo due to strategic network bottlenecks.Although the current AMP/MIDAS – ELIST sequential simulation process is successful and has provided invaluable decision support, there is considerable room for improvement.  The AMP architecture is now capable of supporting federation runs of MIDAS and theater-ELIST, providing dynamic run-time interaction between the simulations. Future plans for the AMP federation include integration of CONUS ELIST for detailed origin through POE movements and integration of a detailed port simulation model.3. ChallengesAs with any federation of legacy models, the AMP Federation development team faced many technical challenges during the course of development.  The challenges came on three fronts: functional, modeling details, and usability.  On the functional side, the most important challenge for this federation is to show that the models can operate concurrently and that each model react dynamically to decisions made by the other model. Both models are mature software applications, each intended to be used standalone.  Developers and analysts worked closely together to define the boundaries for each of the models and determine how the two models could use common ports and assets, such as ships and aircraft.  On the modeling side, the challenges for the federation were fairly typical: data exchange and time management challenges.  Data exchanged in the federation required that all model developers agree on representation and synchronization of data objects and interactions.  Each model has its own internal representation of data objects, such as ships, airports, seaports, airport parking ramps, ship berths, and cargo, but the development team collectively designed and implemented a set of federation objects and interactions that could be understood by both MIDAS and ELIST.  The time management challenge was the most difficult to overcome because MIDAS is a time-stepped model while ELIST is an event-based model.  Enhancements were made to MIDAS to operate in ~1 hour (simulated) time increments, which is small enough to ensure that ELIST has an opportunity to respond to a movement in MIDAS before MIDAS can make a follow-on movement.The solutions to the functional and modeling challenges introduced additional requirements on the AMP Federation.  The models need to have an initialization sequence to handshake with one another and inform one another of shared ports and assets.   The time management strategy used in the federation further require that the federation execute in a time stepped manner, ensuring that MIDAS executes before ELIST.The AMP Federation is intended to be a replacement for the sequential integration of MIDAS and ELIST, which has been run in AMP for years with the press of one button.  Although federation integration is far more complex than a sequential integration, the usability challenge is that the MIDAS-ELIST federation integration be as easy to use as the sequential integration.  That is, the federation can be configured and launched from within the AMP graphical user interface.  Furthermore, AMP needs to allow the user to run as many times as they want to from within the same AMP session.  As with any desktop tool, the AMP federation needs to be reliable, maintainable, extensible, fast, and easy-to-use. 4. Technical SolutionThe technical solution to building the AMP Federation is a lightweight all-Java framework built into and run from within the AMP application.  The purpose of this section is to describe the AMP Federation Infrastructure as it exists now, but also to discuss why we did not use the more standard High-Level Infrastructure (HLA) in the AMP Federation framework.4.1 The AMP SolutionAs an integration platform, the AMP infrastructure is an all Java component-based architecture intended to be used to launch and control (at a basic level) all component applications.  AMP has a single user interface, shown in Figure 1 that supports the model setup for the MIDAS model, but also supports the use of third-party software tools, such as the MIDAS data visualization tool (MIDAS INFO) and the Enhanced TPFDD Editor (ETEdit).Figure  SEQ Figure \* ARABIC 1 : The AMP Editing environment.The AMP Federation infrastructure solution was to expand the role of AMP as an integration platform to that of a federation controller. AMP’s component Application Programmers’ Interface (API) was expanded to support Java methods that allow AMP to exchange data between federates and provide a simple time management mechanism that keeps the models synchronized during a federation run.The AMP Infrastructure component API consists of three methods that provide basic process-level controls over a component.  These are Java methods that must be defined by a component developer in order to integrate an application into AMP.  The methods are:initialize(Properties p)stop()kill()The initialize method is called immediately after AMP launches a process in which the application is started.  This method provides a hook to allow the application to initialize itself before any work is done.  The stop method is a control to allow AMP to ask the application to stop, while the kill method allows AMP to force the application to terminate.  AMP allows components to be customized and have additional application-specific methods added to the API to provide more sophisticated or domain-specific controls.All components are launched in a separate Java Virtual Machine (VM) to ensure that they cannot easily interfere with one another.  Furthermore, unlike many other Java distributed systems, AMP components are all launched with dynamic (Operating System assigned) ports, so there is no need to predefine or specify port connections at runtime.  Components are typically built using Java wrappers that implement the AMP component API.  For non-Java applications, the Java Native Interface (JNI) can be used to build the Java wrapper class.  AMP uses Java Remote Method Invocation (RMI) to call methods on the launched components and uses Java Serialization to pass objects from one component to another.The AMP component infrastructure was key to allowing quick and easy construction of a federation infrastructure.  AMP lacked two pieces of infrastructure needed to support Federation integration.  First, AMP needed to support a Federate API that provided the necessary controls to allow AMP to control launched federate components.  Second, AMP needed a controller to cycle through launched federates and exchange data between them, while maintaining time.The AMP Federate Component API is an extension of the base AMP Component API with the added methods:pauseModel()resumeModel()initializeModel(initData, phase)executeToTime(runData)terminateModel()The AMP Federate components currently require only a simple set of controls, but the API can be expanded as needed if more models are integrated in the future.  Federates need to be told to pause and resume – pauseModel and resumeModel implement those capabilities respectively.  Several initialization steps are required to synchronize the shared data that is being used in the federation simulation.  This capability is critical and difficult to implement in a general (off-the-shelf) simulation architecture.  We implemented a single method called initializeModel that is called multiple times until all models have had a chance to exchange initialization information with all other models.  The first argument to initializeModel is a data structure that holds all initialization data from all models, so it represents both the incoming and outgoing objects for the initialization phase.  The second argument indicates the phase, or iteration, of initialization.  The executeToTime method is called for every time step in the simulation.  For the AMP Federation, all models are told to run for predetermined time intervals (1/20th of a day time steps), so the time management requirements are very light.  The terminateModel method is called when the federation has executed all of its designated time steps.Figure  SEQ Figure \* ARABIC 2: The AMP Federation run controls and viewers.The second portion of the AMP Federation infrastructure is the federation controller.  It is the means for executing high-level simulation calls such as pause, resume, and run, which are the user-level controls needed by the AMP runtime user interface, shown in Figure 2.  It’s primary job is to cycle through each of the launched federates and call the appropriate method for the given action.  For instance, run will cycle through each model and call the initializeModel method for all initialization phases and then call executeToTime for as much time as the federation was set up to run.  For each of the initializeModel and executeToTime calls, the controller manages the exchange of data using a custom data structure that holds a list of objects for each model federate.  Each model manipulates this list to send objects or interactions to other federate models.4.2 AMP Federation Data SupportAMP, ELIST, and MIDAS are all implemented in object-oriented languages, so the natural choice for AMP Federation data representation is Java objects. To make integration into the AMP Federation as easy as possible, a set of high-level object management tools were developed.  Figure 3 represents the class structure of these tools.  Model integrators have the option of using these tools, or managing federation data themselves.The base classes for the AMP Federation objects are the Entity and Interaction classes.  The Entity class represents tangible simulation data such as Ships, Aircraft, Airports, and Seaports.  Entities can be identified uniquely using a key field.  The DomainBean class is essentially a java Object with a getKey method that should be overridden by subclasses.  The Interaction class is a simple object that represents an event that occurs in a simulation, such as a status update about a cargo movement. Figure  SEQ Figure \* ARABIC 3 Data management infrastructure.Entity and Interaction objects are stored in DynamicCollection data structures provided by the AMP infrastructure.  The DynamicCollection data structure is a collection of like elements, such as Ships, Aircraft, Airports, or Seaports.  A DynamicCollection has methods such as find, add, and remove to manage the contents.  One of the most powerful features of the DynamicCollection is that is supports Listeners that can be notified when data is added, removed, or updated.  All Entity and Interaction classes are defined using the Java Beans code convention to use get and set methods to manipulate object variables.  This layer of abstraction allows for a transparent object tracking capability that the federation can use to detect changes in data and report those changes to other federates.  The Entity objects are wired in to notify the parent DynamicCollection of updates, so as set methods are called, it is marked to send an update message to all listeners on that collection.All of the federation Entity and Interaction collections are organized into a World object.  Federates can be built to use the World or can use the Entity and Interaction objects directly.  The World takes care of processing external adds, removes, and updates as well as sending outgoing adds, removes, and updates.  It is a layer of abstraction that allows federate developers to simply use the collections and listening infrastructure without being concerned about how data comes in from or goes out in the federation.  Using this type of abstraction both reduces the level of effort for federate developers, but also reduces the risk of making mistakes because all federate developers are using the same mechanisms to communicate within the federation.4.3 AMP vs. HLA InfrastructureThe AMP Federation is a custom, but relatively extensible infrastructure that meets the needs of the AMP users and AMP Federation developers.  However, it’s success is somewhat tainted by the fact that it is a custom solution rather than a general solution, such as the High-Level Architecture (HLA) [4].  However, the AMP Federation was originally implemented, in prototype form, as an HLA Federation.  The lessons learned from the prototype effort were the driving force behind the decision to use a custom infrastructure rather than continuing with the HLA solution.  This section describes some of those lessons learned.Lesson 1: Too much infrastructure can get in the way of modeling.  HLA is a rich and complex infrastructure for developing distributed simulations.  However, if federation needs are simple, the features of the infrastructure can actually become obstacles.  During the three year HLA prototype development, the team encountered many federation bugs that turned out to be the result of an incorrectly or misunderstood RTI parameter.  The process of setting up and using the RTI was so cumbersome that it required a development team to run the federation prototype.  There was little confidence that we could use HLA to support a reliable desktop application that would be easy for analysts to use on a day-to-day basis.Lesson 2: Adapting a general infrastructure can be more difficult than building a custom infrastructure.  The AMP Federation needed a simple time management mechanism; one that would step all federates through at 1/20th of a day, and preferably notify all federates when a day was complete.  In HLA, the team was forced to create interactions to track time due to issues integrating a legacy time-stepped model with an event-based model. Unfortunately, this effectively circumvented the time management mechanisms inside the RTI.   Lesson 3: Security cannot be an afterthought.  US Transcom security requirements are among the strictest in the DoD.  The AMP Federation, like all other US Transcom programs, is subject to these requirements.  At the time of the HLA Prototype, the only realistic way to secure the RTI was to use hardware encryption.  This was not a practical solution for us. The AMP solution runs securely on a single machine and can be secured (using Secure Java RMI) when, and if, it needs to run distributed across multiple machines.5. ConclusionAfter three years of developing the HLA-based AMP Federation prototype, the development team decided that HLA was not the right technical solution for the AMP Federation.  The functional and development team agreed that continuing to use HLA would be more costly and incur more risk than building only as much infrastructure as was needed to meet the analysts’ needs.  The custom AMP Federation infrastructure was developed in five developer weeks and has allowed us to produce a reliable, easy-to-use, secure federation of models.  The AMP Federation can be launched reliably with a single button and can be paused, resumed, and stopped cleanly.  The AMP Federation can be re-run from the same AMP session without problems.  The AMP Federation meets the security requirements and can be further secured when and if it is necessary.  Since the switch to the lightweight Java infrastructure, the focus of the federation has been on the quality of the modeling, not of the infrastructure.6. References [1]	Van Groningen, Charles N. et al, ELIST Version 8 User’s Manual  (Draft), Argonne IL, June 2001.[2]	Keyfauver, Carroll J. et al, MIDAS Version 3.4 Users Manual (Draft), Vienna, VA, March 2003[3]	The Java Programming Language,  HYPERLINK "http://java.sun.com/" http://java.sun.com/[4] 	Kuhl, F., Weatherly, R., Dahmann, J. Creating Computer Simulation Systems: An Introduction to the High Level Architecture.  Prentice Hall, 2000.[5] 	Tustin, J., Ferguson, W., Van Groningen, C., Keyfauver, C., Beeker, E., Integrating MIDAS and ELIST into the AMP HLA Federation. Proceedings of the Simulation Interoperability Workshop Logistics Forum, Fall 2001.Author BiographiesSoraya R. Stevens, PhD, is a Senior Scientist at BBN Technologies in Cambridge, MA.  She is a technical lead and developer on the Analysis of Mobility Platform.Jeff Tustin, is a software developer at BBN Technologies in Cambridge, MA.  He is a technical lead and developer on the Analysis of Mobility Platform.William H. Key II is an Operations research Analyst at the US Transportation Command, Scott Air Force Base, IL.  He is the functional user representative for the Analysis of Mobility Platform.