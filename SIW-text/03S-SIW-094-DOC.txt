Composability, Scalability, and Traceability in the Joint Virtual Battlespace FOMDr. Gary K. EisermanVirtual Technology Corporation5510 Cherokee Road, Suite 350Alexandria, VA  22312703-333-6209geiserman@virtc.comKeywords:Composability, Federation, FOM, HLA, Scalability, Simulation, TraceabilityABSTRACT: This paper examines the structure and content of the Joint Virtual Battlespace (JVB) Federation Object Model (FOM).  Particular emphasis is placed on design decisions made in order to support the JVB’s goals of developing a federation architcture that will facilitate composability and reuse of separate components, scalability to large, complex scenarios, and adequate traceability across events and different threads of execution.  The paper begins with an overview of the JVB architecture and its primary components.  The next section discusses the overall structure and contents of the JVB FOM.  This is followed by a section discussing specific FOM elements that are designed to support the JVB architectural goals.  The paper concludes with a summary of lessons learned and recommendations for other federation developers intending to follow a similar course.1. Introduction To The JVB ArchitectureThe Joint Virtual Battlespace (JVB) is a collaborative simulation environment designed to support the investigation of concepts and technologies involved in the Army’s Transformation. JVB was initiated by the Joint Precision Strike Demonstration (JPSD) Project Office, which is working in conjunction with industry, DOE, and numerous DoD partners, to provide this Simulation Based Acquisition capability. The goal of the program is to provide the Army with a set of Simulation & Modeling for Acquisition, Requirements and Training (SMART) tools that will support full spectrum analysis of system designs and operational concepts while reducing risk and shortening acquisition timelines. Currently, JVB is supporting experiments and studies to assist with acquisition decisions for the Objective Force and Future Combat System.2.  Overview of the JVB FOMThe JVB Federation Object Model (FOM) has continued to evolve as new components have been added to the JVB environment.  The version of the FOM discussed in this paper (Version 2.0, Draft L) is the version that was current in November, 2002.Figure 1 shows a view of the major object classes defined in the FOM.  These classes group into two major categories.  The first is objects that represent ‘real world’ things such as vehicles, munitions, sensors, minefields, etc.  The Platform, Equipment, and Field classes, along with their subclasses, are all in this category.  The second category are objects that carry persistent information between the participating federates but that don’t represent ‘real world’ things.  The AggregateUnit, Communications_Object, and C3 objects are all in this category. EMBED PBrush  Figure 1.  Top Level FOM Object ClassesFigure 2 shows a view of the major interaction classes defined in the FOM.  There are three major categories of interactions defined.  The IPC (interprocess communication) interactions  are primarily used to carry initialization or status update information between federates.  They do not represent ‘real world’ communications or events.  The Networking interactions are used to model explicit ‘real world’  communications between the individual entities in an exercise.  The SimulationService interactions are used to carry non-communications information between the federates in an exercise, either to support composability or data collection. EMBED PBrush  Figure 2.  Top Level FOM Interaction Classes3.  FOM Design In Support Of JVB Architecture GoalsThe JVB has among its stated goals the development of a distributed M&S environment that will support the rapid composition of new federations, will be scalable, and will provide adequate traceability through all of its various threads of execution to support the test, analysis, and training needs of its user community.ComposabilityA composable simulation architecture must be able to accommodate new and legacy components with a minimum of modification to either the architecture or the components.  In practice, this means designing a simulation architecture that makes minimal assumptions about what federates will be participating in any given exercise and how they will be structured.The JVB has addressed this challenge [1][2] by identifying varous threads of execution (sensing, shooting, maneuver, C3, etc.) and breaking each thread down into the different steps that may or may not comprise that thread.  Objects and interactions were then defined in the FOM that correspond to the actions or information generated by each step and conveyed to the next step.As an example, consider this notional set of events and activities that could be involved in firing upon a target:A target produces some detectable signal or signature.The target’s signature propagates through the natural environment to a sensor.The sensor detects the target and reports the detection to an operator.The operator reports the detection to a decision maker (there could be an arbitrary number of communications links between these two)The decision maker calls for an attack on the targetAnother decision maker issues orders for a specific system to make the attackThe assigned system loads, aims, fires.The fired munition flies out to the targetThe munition detonatesThe target is damaged, which alters its signatureThe damaged target’s signature propagates through the natural environment to a sensor.The sensor detects the target and reports the detection to an operator.The operator reports the new detectionNot every exercise will need to simulate the kill chain at this level of granularity, and not every federate that might be used in an exercise will be able to separately model each of these steps, but having them all defined in the FOM enables federation developers to more quickly identify which parts of a thread each candidate federate does or does not simulate.   ScalabilityScaling a federation up to handle larger scenarios without sacrificing performance is always a challenge.  One obvious approach is the hardware oriented solution of buying faster, more capable computers, but this may yield only incremental improvements.  Other, software oriented approaches are to structure the federation so that multiple instances of each type of federate can be run, with each one handling a part of the load assigned to that federate type, or to structure the federation so that entities and processes that are peripheral to the exercise can be modeled at a lower level of resolution or fidelity.3.2.1  Designing For Multiple Federate InstancesThere are two aspects of federation design that must be considered in order to get the most benefit from running multiple federates.  First, the processing allocated to each federate type should be fine grained enough that the most computationally intensive functions are handled by separate federates.  In the kill chain example discussed in section 3.1 for example, some steps, such as signature propagation (step 2), sensor processing (step 3), or radio communications (step 4) may require a lot of complex computation or they may have to handle a lot of traffic.  Putting these functions into federates that handle only these functions means that multiple instances of them can be executed without having to reproduce a lot of other, unneeded functions.  It also enables developers to focus optimization efforts on the specific bottlenecks.The other aspect of federation design that must be considered is how to best segment the load assigned to each instance in order to maximize the benefits of having multiple copies running in parallel.  The JVB federation has made extensive use of the HLA’s Data Distribution Management (DDM) services [3] to address this.  Table 1 shows a list of the DDM routing spaces that are defined within the current JVB FOM.  In some cases, the routing spaces themselves are used to segment the data through the federation, and no regions are defined for them.  This approach works to separate data flows that are specific to sets of federates, but where all federates within the set need to receive the data sent within that space.  A finer grained approach is to define one or more regions within the routing space and to assign specific federates to publish or subscribe to particular regions.  This works well when multiple instances of the same federate type are being used to handle a large traffic load.A convention that the JVB federation has adopted to facilitate the use of DDM is to add a ‘routing number’ attribute to object classes that will employ DDM.  This enables the DDM region assignments to be made at run time, as follows:  If the federation is initialized by sending out ‘remote create’ interactions to the participating federates that contain the initial values for the objects that each federate is responsible for simulating, then including a routing number among those attributes tells the receiving federate that attribute updates for that object instance are to be published to the DDM region associated with the received routing number.Routing Space NameDimension NameDimension TypeDimension Range/SetEquipmentSpaceRoutingNumberlong1-24AggregatePerceptionSpaceRoutingNumberlong1-24EntityPerceptionSpaceRoutingNumberlong1-24Info_linkLink_IDlong1-24NetworkingRoutingNumberlong1-24RoleNetworkingRoleEDTConsumer, ProducerSensingInteractionsSensorRoutingNumberlong1-24SaluteReportSpaceRoutingNumberlong1-24RoleNetworkingRoleEDTConsumer, ProducerSituationReportSpaceRoutingNumberlong1-24RoleNetworkingRoleEDTConsumer, ProducerLogisticsReportSpaceRoutingNumberlong1-24RoleNetworkingRoleEDTConsumer, ProducerAmmoReportSpaceRoutingNumberlong1-24RoleNetworkingRoleEDTConsumer, ProducerPlatformSpaceRoutingNumberlong1-24DomainPlatformDomainEDTAir, Ground, IndividualCombatantLatitudelong1-8Longitudelong1-8C3NodeSpaceRoutingNumberlong1-24AggregateSpaceC3SpaceEagleSpaceTaskingSpaceFireEngagementSpaceIpcSpaceCommAchievedSpaceGenericCommSpaceFieldSpaceTable 1  Routing Spaces and Dimensions3.2.2  Designing For Variable Resolution And FidelityThe same granularity in the FOM that supports composability also facilitates the use of components at different levels of fidelity.  Generally, the lower the level of fidelity of the component, the fewer distinct steps in any activity will be visible.  In practice, this means that lower fidelity federates would subscribe and publish to fewer of the links in a chain of activity.  Taking the kill chain example from above, a very low fidelity implementation might take in target data, execute some statistical model of attrition, then publish the damage done to the targets.  It might only deal with the objects and interactions associated with steps 1 and 10 in the example.  A somewhat more detailed implementation might include an explicit sensing and reporting component, in which case it might explicitly deal with steps 1, 3, 10, and 11.In addition to level of fidelity, another modeling aspect that affects scalability is level of aggregation.  Modeling large units as single, atomic objects instead of separately modeling each person, vehicle, and piece of equipment in the unit is a time honored approach to simulating large exercises.  In many applications, a mix of aggregated and disaggregated models can be used to handle larger scale exercises.  This is the approach that has been taken by JVB.  Eagle, an aggregate level model, is used to model higher echelon units and units that are peripheral to the activities of most importance in the exercise.  A number of entity level simulations, including the OneSAF Testbed Baseline (OTB), are used for the entity level modeling.  The JVB FOM accommodates this mix, along with the communications between components at different levels of aggregation by implementing objects and interactions for both levels.  For example, there are explicit Platform object classes for individual platforms and personnel as well as an AggregateUnit object.  There are also messages, such as situation reports, defined at both the individual and aggregate levels.  The JVB federation has also implemented a set of federates that form part of its Command, Control, and Communications Grid (C3Grid), whose job it is to assemble aggregate level reports and situation awareness from disaggregated information.TraceabilityA third critical aspect of federation design is the capability to unambiguously trace threads of activity through a set of collected data.  For example, an analyst looking at a series of blue fires might want to investigate why the blues fired on the targets that they did.  This would require the analyst to trace the firing decision back to the receipt of orders.  This might then have to be traced back to the commander’s level of situation awareness, which would require examining what information reached the commander and when.  This would lead to questions about what reports were issues by observers, which would lead to what sensors detected which targets, which might then lead back to questions about where the targets were and what they were doing.  In practice, no step in this sequence is likely to always be a one-to-one chain:  a single observer might report on multiple targets, and a commander might receive reports on a single target from multiple sources (with differing accuracy and timeliness).  In order to fully understand the chain of events, an analyst would want to be able to explicitly map incoming information to outgoing events.  In the JVB FOM this is done in several ways.  The most significant is the use of unique identifiers that are assigned to interactions as they are issued.  A complex data type, called FederateIDCDT is used for this purpose.  It contains two fields.  The first field is a unique federate ID that is assigned to each instance of each federate.  The second is a counter value that each federate increments whenever a new interaction is generated.  This allows each federate to uniquely tag every interaction that it generates without having to coordinate the tags with any other federate.  The real value in using such tags is in chaining together causes and effects.  Whenever an interaction is issued that is the result of one or more previously received interactions, the unique IDs of the causal interactions are included as parameters of the resulting interaction.  This allows chains of interactions to be unambiguously connected together.The JVB FOM contains other mechanisms for establishing traceability as well.  Every object and interaction class contains a timestamp attribute or parameter.  When the federation is run in a non-time synchronized mode, including the timestamps enables analysts to make temporal associations between sequences of object updates and interactions.   Finally, the obvious mechanism of uniquely assigning IDs to every object instance in the federation is also used.  In the JVB FOM, these are assigned during initialization and are used as the object instance names when the objects are first registered with the RTI.  Instance names are assigned rather than allowing the RTI to do it in order to ensure that the same objects will have the same ID each time the scenario is executed, which is a tremendous help in debugging and comparing results across multiple runs.  Assigning the names also means that objects can be given meaningful names rather than random strings assigned by the RTI, which also helps in after action analysis.  The object IDs are stored in the object instance name rather than as an object attribute because instance names are guaranteed to be unique and to remain unchanged across a run.   4.  Lessons LearnedComposabilityDuring the preparation for the JVB’s first major event, there were a number of changes in the level of resolution with which some of the systems were to be modeled.  For example, rather than using separate sensor models, the sensor models already embedded within OTB were used.  This meant that some of the objects and interactions in the FOM were not used during this exercise, but the other elements of the FOM could still be used without changes to them or the federates that used them.  A similar situation existed with respect to the weapon firing chain, where some systems were implemented at a higher level of resolution, thus using more of the ‘inner’ objects and interactions of the fire chain, than others.  This kind of experience reinforced the belief that the real-world partitioning of FOM objects and interactions to a relatively high degree of resolution would produce an architecture that could handle different levels of resolution in a way that facilitated changes in the composition of the federation.ScalabilityDDM can be a very powerful tool for improving the performance and scalability of a federation, but only if it is well understood by all of those using it.  The JVB team spent considerable time discussing, designing, and testing a number of DDM implementations before settling on the ones used here.The JVB approach to geographical filtering of data by defining static regions attached to predefined sections of the battlespace and having players subscribe to the regions around them as they move proved to be a more efficient means of doing geographical filtering than continually redefining moving regions attached to each player.TraceabilityThe use of meaningful, fixed object instance names was a very useful feature, especially during integration and debugging of the federation, when the same scenarios were being run repeatedly.The JVB team has also found that the approach of tagging all interactions and carrying along the tags of prior contributing events has enabled them to perform a great deal of detailed analysis on collected data.5.  RecommendationsComposabilityDo attempt to capture a relatively high level of resolution in the objects and interactions in the FOM.  Make these objects and interactions correspond as closely as possible to real world system boundaries and interfaces.  This is a worthwhile exercise even if the initial set of federates does not simulate systems at this high a level of resolution because it can guide the development of new components as well as defining points within existing federates at which meaningful data should be exposed and collected.ScalabilityDon’t be afraid to define multiple routing spaces and to use them to segregate traffic through the federation.  Do be sure to thoroughly document the DDM approach that you are using and to test its implementation in small increments to ensure that each participant is using it correctly.  Build in diagnostics into all of the federates so that during debugging it is possible to verify precisely how regions are being defined and where each federate thinks it is publishing and subscribing data.If the federation will use geographical DDM regions, consider defining static regions and having players change the regions to which they are publishing and/or subscribing as they move around the battlespace, rather than defining regions that move with the players.  TraceabilityDo assign object instance names during initialization rather than allowing the RTI to do it.Do uniquely tag every interaction and use these tags to make connections between cause and effect.Do include timestamps in object attribute updates and interactions if the federation is not running in a time regulating and constrained mode.6. References[1]	JVB Program Office: “System Architecture Description” March 2002.[2]	JVB Program Office: “System Design Document” March 2002.[3]	Department of Defense, Defense Modeling and Simulation Office: “High Level Architecture Run-Time Infrastructure RTI 1.3-Next Generation Programmer’s Guide Version 5” Virginia 2002Author BiographyDR. GARY EISERMAN is a Group Leader at Virtual Technology Corporation, Alexandria VA.  He is leading the FOM Design effort for the Joint Virtual Battlespace.  He is also the technical lead for JPSD’s Aerial Common Sensor (ACS) Testbed effort.  Dr. Eiserman has more than 15 years of experience in modeling and simulation.