How good is that scenario: A Levels-of-description Approach.Geoff Hone Ian WhitworthAndy FarmiloAll of Cranfield University at the Defence Academy of the United Kingdom HYPERLINK "mailto:ghone.cu@defenceacademy.mod.uk" ghone.cu@defenceacademy.mod.uk    HYPERLINK "mailto:i.r.whitworth@cranfield.ac.uk" i.r.whitworth@cranfield.ac.uk   a.farmilo@cranfield.ac.uk Keywords:   Scenarios    MSDL     Consistency ChecksABSTRACTThe aim of this paper is to link the Military Scenario Description Language (MSDL), as sponsored by SISO, with the Cranfield Scenario Assessment Tool (C-SAT) and its related architecture, as proposed by Cranfield University at Shrivenham.  The Cranfield Architecture [1] [2] is a device-independent high-level architecture – still being developed – together with a tool to enable a proposed scenario to be easily checked for completeness, as a step toward formal V&V.  The MSDL is a formalised method of expressing all the content of a scenario in a manner that is also device-independent.  It is argued that the Cranfield Architecture is a means of expressing the required content of a scenario, while the MSDL is a means of implementing that content in a transportable form.  Thus, the Architecture forms the top-level view of a scenario, with the MSDL providing the second level view.  The C-SAT is being developed into a spread-sheet based tool – to facilitate standardised reports – and we consider that C-SAT, combined with an automated MSDL checker (similar to the RMCS FOM Checker built at Shrivenham in the late 1990s [3], would form a valuable toolset for scenario developers.1. IntroductionScenarios (whatever they might be) are the basis for a wide range of activities such as military training, planning, war-gaming, some procurement issues and are also used by civil organisations, NGOs and commercial bodies.  However, to be of real value, for any application, a scenario must be “appropriate”, or “fit for purpose”, or simply “good”.  We have focussed on the identification of those components of an appropriate scenario, such relationships as may exist between them, and of the individual items that each component may comprise. From this, we have been able to propose a scenario architecture – to form a base-line for any scenario appraisal – and which, we believe, offers the basis for a formal generic scenario architecture [1].  This has led to the description of a process for the commissioning and employment of scenarios, thus effectively providing a VV&A function that really is application independent.  As previously reported [2], we have concluded that there are at least two basic forms of scenario (with the potential for more) that will require accommodating in any assessment tool to help formalise the VV&A process.  This paper will first consider the nature of scenarios, touching on previously reported work, and then seek to show how this forms another layer in the V&V process when used with the MSDL.  We have previously posed the question: What is this entity that we casually refer to as a scenario?  To focus the discussion, we first have to define our topic in terms that can be related to the broader M&S field. The (US) Defence Modelling and Simulation Office (DMSO) [4] offer several definitions ranging from the very general to the specific.  One, directed at the training domain is:An initial set of conditions and time line of significant events imposed on trainees or systems to achieve exercise objectives.                                  DMSO - 2006We could not regard this as being complete in itself, or potentially generic, and offered this alternative in [1]:A representation of the state, and present actions, of a set of animate and/or inanimate objects, so as to permit the exploration of, or reasoning about, their future state and the events that lead to it.It will be seen from this proposal, that it is our assertion that it is the projection of current states into the future that is at the heart of all scenarios, as can be seen in the use of scenarios for war-gaming and mission rehearsal.  Indeed, war-gaming is perhaps a better starting point for a discussion of scenarios than training. It is generally considered that war-games, as we know them, were started at the US Navy Academy following the War of 1812 (this was also the first recorded use of “Blue” and “Red” as identifiers for friendly and opposing forces).  The Prussian General Staff developed this some 50 years later (as “Kreigsspiel”), and the concept was taken up by the General Staffs of most countries during the 20th Century.  During the Cold War era, there was a transition toward the more geo-political games that were used by all major world powers to explore the effect of possible policy changes and events. Mandel [5] contends that this was the case as early as 1961.  Throughout all of these cases, we argue that there has been a scenario (as in our definition above) that forms the base from which the game has been developed, and the basis from which the game was played.  In almost every case, gaming and simulation requires a scenario as a start point.  Indeed, it can be argued that the initial set-up for a sand-table exercise in the 1950s and ‘60s was a scenario. Some scenarios are single use only, while others are intended to be re-used. A scenario intended for (say) training Infantry recruits in Squad tactics will be designed (written) to meet a specific set of training objectives, and will be re-used for every successive recruit intake until the objectives change.  This change will usually occur when doctrine and/or equipment are changed.  Similarly, a scenario written for training a force for a specific mission will be used repeatedly until all elements of the force are clear on their individual roles.   The example (above) of a scenario for SBA, might also involve reuse in order to compare the effect of changes to the specification of the proposed artillery piece.Much of the work on the components of Network-Enabled Capability (NEC) and Network-Centric Operations (NCO) has been carried out using scenario-based simulation and experimentation.  Alberts et al [6] suggest ‘Campaigns of Experimentation’ as a way forward, and their approach will often require multiple consistent scenarios, and scenario re-use.  Hence, the creation of a framework for scenario development will help to ensure that scenarios are created in a coherent manner.Against this, some scenarios are intended to be single use only.  A scenario designed to test the integration and response of the emergency services in a single locality is unlikely to be repeated.  Lessons learned from one single use will be applied to each of those services, and a fresh scenario will be subsequently employed to see if the lessons learned have been applied. In the present context, the term “good” is considered to mean the suitability of a scenario for its intended use, combined with the suitability of the intended use – thus encompassing the range of VV&A functions.  Thus, a scenario written to exercise NATO Staff in their actions in the event of an invasion of Western Europe, by Eastern Bloc forces, through the Fulda Gap will remain suitable (good) at the Staff level, but will not be appropriate to the current European and NATO geo-political structure (since much of the former Eastern Bloc is now part of NATO).2. Current work on scenario architectures:We have previously reported the results of two literature searches (undertaken on the Internet) that sought to gain some knowledge of the extent of current activity in respect of scenarios.The first of these was carried out using the Copernic search engine which has the merit of eliminating the majority of duplicate references.  It will not, however eliminate different references to the same document, and these were removed manually.  The search terms used were:Scenarios,   Scenario Development,   Scenario Design,   Scenario Construction,Scenario Testing,  Scenario VV&A,   Scenario V&V,Scenario Military Validation,  Scenario Military VerificationThe resulting hits were found to fall into the following broad areas of:Health,   Environment,   Military,   HIS/SE,   Finance,   Otherwith Military (103) and Other (100) accounting for about half of the hits.  It should be noted that many of the Other hits were related to hobby-type war-gamingSince the “Military” category was the most popular by a very narrow margin, a further search was undertaken of the US DoD “Stinet” website (considered by the DoD to be the major repository of military related documents).  The table below (Table 1) shows the search terms used and the number of hits for each term. It will be seen that very few hits were obtained.  Each was then individually reviewed for military relevance.  In the “Scenario Design” category, almost all hits were from PhD Theses on programming or software design. It seemed clear to us that published activity in the specific  area of  scenario architectures could be described – at best – as minimal.  Search TermHitsScenario Assessment0Scenario Composition5Scenario Framework0Scenario Components2Scenario Structure0Scenario Architecture1Scenario Design18Scenario Measurements12Table 1: Second stage literature reviewA separate search, which was expected to produce a general-purpose bibliography, produced material that was over 90% related to Software Engineering, or Systems Engineering.  It seems clear from these searches, that any published activity in the area of scenarios is domain specific, rather than being concerned with scenarios in general. From the 2-stage review and the bibliography review, it would appear that there are no readily available examples or evidence of any work being carried out on the generic basis of scenarios.  Thus, for many people, even the DMSO definition listed at the beginning of this paper would be too focussed.2.1 A Systems Approach to ScenariosIn order to determine the items that could be said to constitute a scenario, a number of existing scenarios were collected, and were then analysed to determine their individual components.  This method produced a list of the “building blocks” used in scenario design, and enabled us to derive a provisional architecture. We could identify the relationships between components, the dependencies between components, the items which made up (or, in some instances, formed part of) some of the components, and to identify where further components or items were potentially required.  This approach brought out further interactions and dependencies, and enabled the developed provisional architecture to be re-formulated into a checklist of components and items.  Given the prototype checklist, it was possible to review a sample set of scenarios, and to determine which of the components a given scenario actually used (or even contained).  Using this approach, it was possible to determine that (for example) an apparently detailed and complete scenario contained only one component – with all the items present – but omitted all the other components which had earlier been identified as potentially necessary.  This offered some confidence that the architecture/checklist was an effective way of analysing a scenario.  Given the limited number of scenarios in our sample set, we would not consider that either the approach, or the checklist, had been fully validated; rather that they appeared to show some merit. We then moved to testing the developed architecture/checklist against two detailed and well-known scenarios.  The first was a geo-political game developed for senior White house staff during the Reagan Presidency, known as Ivy League.  A description of this game has not been officially published, but all details were “officially” leaked after the game scenario had been run, and full details were supplied to Allen [7] for his comprehensive text on War Games.The second was the DARPA document known as “Fomblers Ford” [8]  This is a DARPA re-write of Swinton’s classic “The Defence of Duffers Drift”.  Duffers Drift was written immediately after the South African Wars (normally referred to as the Boer War) as an instructional document for junior officers.  The DARPA version was re-located in the Balkans of the early 1990s, with the equipment updated to that appropriate to the electronic age, but remained a guide for junior officers, as well as being an indication of the potential of modern equipment.These tests appear to indicate that (as had been found earlier) some components will be found in all scenarios, but that not every component – and not every item – will be found in all scenarios.  Given this, we consider that there are at least two types of scenario (and probably more), built to a generally common architecture.3. The proposed ArchitectureThe proposed architecture is shown below.  It must be emphasised that this is not intended to represent a flow chart or a process, but is purely a representation of those components, and items, which we have found in scenarios, together with an indication of the relationships and dependencies between them, in a manner similar to a concept map.It can be seen in Figure 1 that the components of “Purpose” and “Scene” are shown as having a relationship, with the direction of the relationship indicated. SHAPE  \* MERGEFORMAT Figure 2 shows how we can represent those items that may form part of a component. At this stage of the development of the architecture, the multiplicity (if any) of the relationships is not shown. Hence, our model architecture contains no information on whether there is – for example - more than one purpose, or more than one scene. The issue of multiplicity will be considered in future work, when the model is more mature. SHAPE  \* MERGEFORMAT The architecture model shown in Figure 3 is intended to show the generic structure of a scenario. Its aim is to provide a representation of all possible components, their items and relationships. In order to use the architecture, definitions are required for each component/item. The following definitions are proposed:Purpose:  the reason the scenario is required.   Goal .. what is intended to be achieved.   Viewpoint ..the position that values the goalScene: the context of the scenario   Where .. the geographical place(s) the scenario unfolds   When .. the events take place          Event .. any input to the system that changes the system’s statePrecondition .. the initial state of the system, possibly as a result of a previous series of events.   Assumption .. 	taken for granted as trueForm: how the scenario is realisedLive .. 	real people, doing real things with real    equipmentVirtual ..real people, doing real things with simulated equipmentConstructive ..simulated people, doing real things with simulated equipmentExtrinsic Resource: resource used, and consumed by, executing the scenario   Human .. persons working on the scenario   Physical ..the non-human components of the scenarioConstraint ..limitations applied to the human and physical resources	 System: the set of relating objects that achieves the needs of its stakeholders. Behaviour .. how the system moves from state to state due to events acting  upon it.   Structure .. how the system’s objects are organized with respect to one anotherTechnical .. the measures of performance of the system .Intrinsic Resource: resource used and consumed by the system   Human .. persons working in the system   Physical .. the non-human components of the systemConstraint .. limitations applied to the human and physical resourcesOutcomes: the state of system attributes (that can be measured, or assessed)   Fidelity ..  the faithfulness of the results.   Realism ..  correspondence with facts as they are.       Sufficiency .. completeness of results with respect to the viewpointIn defining the components above, it became clear that there is a strong need for a general set of standard descriptors for any discussion of scenarios, and that these should be at a level above the proposed MSDL.We consider that there are three levels to be considered with regard to any scenario:The initial requirementThis is not in itself amenable to any manual or automated checking process.The architectural levelWe have offered a (currently manual) approach to checking that a required scenario will meet a standardised architecture.  Since this does start by considering a statement of the purpose for which the scenario is required, this does act to check that the initial requirement is properly documented.The detailed scenario levelHaving established that an outline scenario conforms to a reference architecture, it is now appropriate to check for detail conformity to the MSDL.  A process for effecting this is described later in this paper.4. Mapping Scenario to ArchitectureThe list of components and items was then recast into the form of a checklist that would permit identification, of the way in which the component requirement was met, and enable the recording of the location of that component within the scenario.  It was determined that, while any given scenario did not have to contain all the identified components, some components were essential to any scenario.  One particular problem related to some scenarios, which seemed to lack a stated purpose.   A number of these were examined, and it was concluded that a purpose was necessary (and was usually obvious), but that the purpose was not always stated as part of the scenario itself.  The extent to which a purpose may be removed from the actual scenario has not yet been determined, but for the work in hand it is considered that this should not exceed two removes.  Thus, Document A may state the purpose of a scenario, while Document B may both refer to Document A, and also authorise the generation of a scenario (which becomes Document C).  This could (typically) arise in the case of the Infantry Squad training mentioned in the introduction.  This gives us a level above that of the architecture for the Purpose (or the formal requirement). It seems clear from the foregoing discussion, that a scenario requires – as a minimum - those components that will allow it to meet its purpose.  A scenario must therefore be purpose-oriented, and from this we have offered the following proposition:1. Any scenario must have a declared purposeIf one accepts the purpose-oriented nature of a scenario (in the preceding paragraph), then it follows that any scenario must also have an architecture that will allow it to meet its purpose. Hence, while any two or more scenarios may have differing architectures (component sets) provided they meet their respective purposes,  they will each require all components necessary to achieve those purposes.  This leads us to our second proposition:2. Any scenario must contain all components necessary to meet the declared purposeA Process for Scenario EmploymentNo scenario is developed in a vacuum.  Some authority has identified the need for a scenario, someone must have authorised its generation, someone must have written it, someone must have assessed its suitability. Considered as a process, it is then necessary to form the process so that the finished scenario satisfies the basic requirements of Validation, Verification and Accreditation (VV&A) that would be applied to any simulation.  This process is illustrated in Figure 4 (below).A simplified view of VV&A is that it asks three questions:	Have we built the right product?	Have we built the product right?	Does it do what we wanted it to do? SHAPE  \* MERGEFORMAT When these are satisfied, the scenario can be accredited for use against the new requirement.  This can be viewed as a parallel to the way in which standard models may be used in a number of simulations, but only after the VV&A process has been completed.The process discussed above should be independent of the detailed process of writing the scenario. There are several tools which will take a set of specifications and write a detailed scenario from them.  Some of these are recent or current developments (e.g. CREWS-SAVRE, Kaos, RETH, GRAIL, etc), but given that the emerging Military Scenario Definition Language (MSDL) is likely to become the standard format for developing future scenarios, new tools may need to be developed. There needs to be a method for confirming that any scenarios developed: meet the basic requirements for a scenario as described above.include all other critical information . conform in their internal details to the prescribed formatting.We suggest that a tool be developed that can perform such checks on items b) and c),  and in a manner enabling the scenario developer to go through the validation loop as many times as necessary before a satisfactory scenario is created.5. Checking the scenario in detailThe FOM Checker, developed at Shrivenham almost a decade ago, relied on placing data into a database which could them be interrogated.  Software engineering approaches since that time would argue for a new method.  Our proposal is that the tool would utilise the latest version of the MSDL as a baseline for interrogating a new scenario file, written using that schema. This will take the form of its own MSDL XML file which can be loaded into the tool before comparison with the new scenario. By this method (using an XML file separate to the tool itself) the tool will be able to use the latest version of the MSDL without the tool requiring regular updates itself. As the MSDL is currently in the development phase, and regular modifications are anticipated, this is seen as a vital feature. The checking loop will resemble that in Figure 5.In this arrangement, the scenario is developed on a PC or laptop. The developer then accesses the Scenario Checker web application, where they can select to upload the MSDL file for checking. The file is first compared against the latest standard MSDL file for initial compatibility, before being analysed by the tool for completeness. A report is then sent back to the user and displayed within the web application, following which they may wish to revise the scenario and submit again.Figure 5: Scenario Checker designA web-based tool is recommended as the best format for the scenario checker because it could provide easy, cross-platform access for the majority of potential users. They would not need to install any additional files or applications, nor keep them up to date, as the one latest version of the tool would be that provided by the web service. Security would also benefit from this approach.  A tool intended for web-based use could be run on a stand-alone server (PC even) when highly sensitive scenarios were under development.  For other sensitive scenarios, a secure web-server (i.e. password protected) would offer adequate security.  Where only commercial considerations need to be considered, the sole problem would be that of finding a willing host.  Such a host would not need to keep a copy of any new scenarios on its server, the only file required would be the MSDL template.The first pass of the checker would confirm or deny the existence of all MSDL defined elements, i.e. a basic check against the MDSL template file, highlighting any omissions, particularly those which are key components of a Scenario such as the Purpose (as in our second proposition above: All scenarios must have a declared purpose). This should be included within the Objectives of the Plan component of MSDL. If this was not the case then such an omission would be highlighted. If highlighting were to follow a “traffic light” convention then such a position would indicate immediately that the scenario required some  improvement before use.The second pass would check those elements that do exist against the format required by the MSDL. For example, the ScenarioTime attribute of the Environment component should be in the format DDHHMMSSZOMNYY and this is one check which could be easily performed. Any deviation from the required format would be highlighted.The resultant report could have the format shown in Table 2 (some sub-elements are omitted for the example). It is envisaged that such a tool could eventually be built-in to a scenario creation application, checking in real-time as the scenario is created to avoid the need to resubmit to a scenario checker.NoNameExistsCorrect Format1OptionsYesN/A2PlanYesN/A3EnvironmentYesN/A3.1ScenarioTimeYesNo3.2 TerrainYesN/A3.2.1TerrainSourceNo3.2.2UpperRightYesYes3.2.3LowerLeftYesYes3.3WeatherYesN/A3.3.1TemperatureYesNot within expected rangeTable 2: Sample Scenario check report6. Future WorkWe see several interwoven strands to the future of this work:Development of the C-SAT tool for scenario architecture assessment.This currently exists in flat-paper form, and is freely available to anyone wishing to experiment with it.Scenario type identificationThis requires a substantial number of assessments made using the C-SAT tool, followed by some data collation.Improving the process for extracting and categorising the scenario structureThis also requires a body of data as for the previous item.Development of a tool for checking a scenario written in the MDSL for completeness and correctnessNone of these strands can be seen as a stand-alone topic, although it may well be logical to proceed in the order shown above, for the first three items.  An MSDL checker could well be developed in parallel.We believe that we have a method by which the architecture of a scenario can be assessed.  Sufficient evidence has now been collected to indicate that there are certainly two generic scenario types, probably three types and possibly four.  Any move forward in this respect will be contingent on the development and validation of a formal tool, and this will require access to a reasonable number of scenarios.  At the present time, we are considering how to develop our checklist into a tool that is fast, accurate and user-friendly.  This may require the production of custom software, or may perhaps be viable as an extension to existing commercial software (a spread-sheet overlay for example).Given a tool, it will then be necessary to apply it to a substantial number of scenarios to produce enough raw data, and will also require the development of an approach to the representation of that data so that each scenario can be “typed”.  This should lead to a general classification system for scenarios which is architecture-based, rather than domain dependent.Production of these items will lead toward a standardised approach to categorising the architecture (as basic structure) of a scenario.  The end product envisaged will allow a scenario to be specified at the time of authorisation; for example:“A Type 2 scenario is required for … …”rather than simply being able to make a post hoc statement that:“This is a Type 2 scenario …”Just as simulation components are built to Object Models having a standard format, it seems illogical to separate the MSDL out from any other work in the scenario field. It is believed that this approach will lead to standardisation in scenario architectures, without imposing any restriction on the detail design; and further that a check to ensure completeness of a written scenario is desirable for full V&V.7. ConclusionsThere is substantial evidence of tools to assist in the writing of scenarios, but these all seem to be domain dependent.  There is no readily available evidence relating to work on the generic basis of scenarios, or of work on tools and methods for the assessment of a scenario on a generic basis. It is believed that the approaches outlined here will, to some degree, overcome this. There does not, as yet, appear to be any standardisation in the terms used to describe, or to discuss, a scenario.  Whilst the component definitions offered here may help in this direction, we feel that the matter should be addressed more formally. There is also some limited evidence that scenarios can be categorised into a relatively small number of domain-independent, and application-independent types.  8. References[1] Whitworth, I.R, Smith, S., Hone, G. and Macleod, I. S., (2005)   HYPERLINK "http://www.dodccrp.org/events/11th_ICCRTS/html/papers/072.pdf" \t "_blank" How do we know that a scenario is appropriate? Proceedings of the 11th ICCRTS, Maclean, VA.[2]Whitworth, I.R, Hone, G. and Farmilo, A., (2007) Developing the Scenario Assessment Tool.  Proceedings of the NATO M&S Conference, Prague, Czech Republic Oct 2007.[3] Morales, M.C., Moulding, M.R. and Newton, A.R., (1999) Improving the Specification of Synthetic Environments: Towards a More Rigorous Approach for the Automated Checking of HLA Specifications.  SISO Spring ’99, Paper #171.[4] DMSO (2006)  The DMSO Modelling and Simulation Glossary. Downloaded from https://www.dmso.mil/public/resources/glossary/   on 6-Mar-2006[5] Mandel, R., (1977) Political Gaming and Foreign Policy Making During Crises.  World Politics. July, 1977.[6] Alberts D.S., Hayes R.E., Leedom D.K., Kirzl J.E. and Maxwell D.T. (2002)  Code of Best Practice for Experimentation.  Washington, DC: CCRP [7] Allen, T. B., (1987) War Games.  London, William Heinemann Ltd[8] Gorman, P., (2000)  Fomblers Ford. Washington DARPANote:Duffer’s Drift was originally published in 1907.  The copyright lapsed and for about 12 months, in 1992, Swinton’s original text was available for public download from the US Army Training website, using the URL: http://www.adtdl.army.mil/cgi-bin/atdl.dll/misc/duffers-drift/duffers-drift.htmThe work has since been reprinted, acquired a new copyright, and is now only available commercially (the US Army website mentioned above is now “access by account only”).  DARPA continue to make “Fomblers Ford” freely available.Issue Task (Purpose)Validate against PurposeSTARTENDFigure 4: Scenario writing processScenario Writing ProcessFigure 3: Scenario ArchitectureinforminformsEVALUATION PROCESSstimulatesactivatesEVENTprovidesexploitsdeterminesutilisesconstrainsrealised byinformConstraintsPhysicalHumanConstraintsPhysicalHumanConstructiveVirtualLiveRealismSufficiencyFidelityTechnicalStructureBehaviourPreconditionsAssumptionsWhenWhereViewpointGoalsINTRINSIC RESOURCESSYSTEMFORMSCENEOUTCOMESEXTRINSIC RESOURCESPURPOSEFigure 1: Inter-component RelationshipinformsSCENEPURPOSE            Figure 2: Component Decomposed ViewpointGoalsPURPOSEYNAccepted?UseNYPass?SME approvalCompleteness CheckComplete?NYNYWrite detailed ScenarioCompare Scenario against architectureDraft Scenario