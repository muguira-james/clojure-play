Applying the Base Object Model to theTorpedo Enterprise Advanced Modeling and Simulation InitiativeJim WatkinsSignal and Information Sciences LaboratoryApplied Research LaboratoriesThe University of Texas at Austin10000 Burnet RdAustin TX 78758-4423 HYPERLINK "mailto:jwatkins@arlut.utexas.edu" jwatkins@arlut.utexas.eduPierre LallementDavid DiederichSystems Analysis & Simulation Technology DepartmentApplied Research LaboratoryPennsylvania State UniversityPO Box 30State College, PA  16804-0030phl10@ psu.edudmd274@psu.eduKeywords:Base Object Model (BOM), Torpedo Enterprise Advanced Modeling and Simulation (TEAMS)ABSTRACT: Base Object Models (BOMs) provide a component framework for facilitating interoperability, reuse, and composability of simulation components.  The concept is based upon the assumption that piece-parts of models, simulations, and federations can be extracted and reused as modeling building blocks or components.  BOMs are designed to provide a mechanism for defining a simulation conceptual model and optionally mapping to the interface elements of a simulation or federation using High Level Architecture (HLA) Object Model Template (OMT) constructs.  The basic BOM approach is based upon the assumption that the interplay within a simulation or federation can be captured and characterized in the form of reusable patterns, and the representation of these patterns can captured in the BOM.The Torpedo Enterprise Advanced Modeling and Simulation (TEAMS) Initiative has been developing a cross-enterprise, collaborative undersea warfare modeling and simulation business environment to enable and encourage the sharing and leveraging of legacy and new components.  One of the goals of this program has been to develop an approach to creating reusable components from a set of commonly used torpedo warfare simulations, combining components to form simulations designed to meet specific user needs.  The initiative will leverage the sharing of legacy as well as new-development resources, and will support the development of modeling and simulation tools and the application of these tools across the life cycle of undersea weapons.  For the past four years, the TEAMS Initiative has employed a collaborative approach among the Undersea Warfare M&S Consortium to develop an agreed-upon common conceptual model with an eye toward identifying the boundaries and interfaces for these components.  The result has been a consensus framework for creating and integrating reusable components of different acoustic models and simulations, and a partial model written in the System Modeling Language (SysML) describing the components and interfaces.The application of the BOM to the undersea warfare environment is a natural and appropriate next step toward achieving the TEAMS Initiative goals of developing an approach to creating reusable components from a set of commonly used torpedo simulations.  This paper presents an approach to using the BOM as a mechanism for defining a simulation conceptual model which is consistent with the current TEAMS framework and its associated conceptual model.  It provides a brief descriptive commentary on the background of both BOMs and TEAMS, and develops an initial partial BOM which will capture the tenets and structure of the current TEAMS high level conceptual model in a structure which is based upon the patterns of interplay, state machine, and conceptual entities and events which are fundamental to the BOM template for an individual Conceptual Model.  Finally, this paper summarizes with some conclusions appropriate to implementing the BOM approach in pursuit of TEAMS program goals and objectives.IntroductionThe Office of Naval Research (ONR) has sponsored the Torpedo Enterprise Advanced Modeling and Simulation (TEAMS) Initiative in order to define and develop a cross-enterprise, collaborative undersea warfare modeling and simulation (M&S) environment.  The Program will leverage the sharing of legacy as well as new-development resources, and is to support the development of modeling and simulation tools across the life cycle of undersea weapons.  ONR has sponsored this effort in pursuit of the objective of standardizing M&S components, reducing both the technology development time line and cost, and increasing component implementation efficiency and reuse.The Simulation Interoperability Standards Organization (SISO) has developed the Base Object Model (BOM) concept with the intent of providing a component framework for facilitating interoperability, reuse, and composability.  This BOM concept has been based upon the assumption that the piece-parts of models, simulations, and federations can be extracted and reused as modeling building-blocks or components.  Furthermore, the interplay within a simulation can be captured and characterized in the form of recognizable and reusable patterns of interplay—sequences of events between simulation elements. [1]The objectives of the TEAMS Initiative and the purposes intended for BOM applications are clearly consistent with one another.  The structured application of the BOM template to provide a disciplined specification of the TEAMS High Level Simulation structure can be one of the first steps in standardizing these simulation components.  This can begin to build the foundation for a simulation conceptual model and its metadata specification which will facilitate the design and development of executable software code and the integration of interoperable simulations in the arena of undersea environment simulations.This paper provides background information describing the BOM and its specification, following with a discussion of the TEAMS Initiative and its ongoing development, and then provides a detailed discussion of the application of the BOM methodology to the existing TEAMS High Level Simulation Platform-Independent Model (PIM).  This application will demonstrate how the BOM can provide the metadata specification upon which the TEAMS Initiative can build in developing the common simulation model component architecture it seeks.  Conclusions and recommendations will follow regarding the value of continuing this BOM template application at all levels of the TEAMS architecture.Base Object Models (BOMs)This section briefly summarizes the fundamental concepts that form the foundation for the Base Object Model.  These concepts are described in considerable detail in the SISO BOM Template Specification. [1] The reader is referred to this very detailed specification for a more complete description of the concepts of the BOM.BOM Template ComponentsA BOM is composed of a group of interrelated elements organized in the form of four component views as shown in Figure 1.  These views include Model Identification, Conceptual Model Definition, Model Mapping, and Object Model Definition.  The template also has a provision for clarification of semantics through the use of Notes and Lexicons.  The information content of these components may be represented in various forms, the most common being tabular and graphical in format, which are the forms chosen for use in this paper.  The BOM template components are based upon the original IEEE Std 1516.2-2000 High Level Architecture (HLA) Object Model Template (OMT) Specification [3], which defines the format and syntax of HLA object models, to include objects, attributes, interactions, and parameters.Figure 1  BOM Template Components [1]Model IdentificationThe goal for the design of all BOMs is to facilitate reuse.  The Model Identification component is intended to document some of the necessary metadata (data about data) about the BOM to support its reuse potential.  An especially important element of that potential is facilitated by detailed information regarding point-of-contact information.  The Model Identification Table includes other key metadata information such as Name, Version, Modification Date, Application Domain, Keyword Identification to facilitate efficient search functions, and information regarding graphical presentation of the BOM.Conceptual Model DefinitionThe primary purposes of the Conceptual Model Definition component include the documentation of how patterns of interplay within the conceptual model take place, the various state machines that might be represented, and the entity types and event types to be used.  One of the fundamental concepts captured by the BOM is that of pattern of interplay as a sequence of pattern actions.  Each pattern action includes activities which can be represented by either a defined event type within the BOM or by another BOM which provides greater detail.  The pattern of interplay template component also supports the ability to identify exceptions and variations that might be associated with a pattern action.  An exception is considered an alternative action that may occur, and might cause the remaining sequences in the pattern of interplay to fail.  A variation identifies a different way for a pattern action to be accomplished without impeding the completion of the pattern of interplay.  The pattern actions may also be used by a state machine representation to identify the exit condition required to cause a transition from one state to another. [1]The state machine template component of the BOM facilitates the identification of the behavior states of one or more conceptual entities.  The BOM template identifies these states and the applicable exit condition(s) required prior to transitioning the next state.  The exit condition for a particular state consists of an exit action and a next state.The entity type component of the BOM template provides the mechanism for describing the types of conceptual entities used to represent senders and receivers of messages which cause the transition from one state to another in the state machine representation.  An entity type may include multiple entity characteristics.The event type component facilitates describing the types of conceptual events used to represent and carry out pattern actions, variations, and exceptions defined within a pattern of interplay.  The event type component supports the ability to identify two categories of BOM events—triggers and messages.  An event type may also include multiple descriptive event characteristics. [1]Model MappingThe primary purpose of the model mapping template component is to map the relationship between the entity and event elements of the Conceptual Model Definition and the class structure elements of the Object Model Definition.  These elements are described using the HLA OMT specifications as previously cited. [3]  Two types of mapping are supported—entity type mapping and event type mapping.The entity type mapping component facilitates the mapping between the entity types of the Conceptual Model Definition and the class structures of an Object Model Definition as specified in the HLA OMT Specification [3].The event type mapping component enables the mapping between the event types of the Conceptual Model Definition and the class structures of an Object Model Definition of the HLA OMT Specification. [3]Object Model DefinitionThe Object Model Definition defines the structure of object and interaction classes, along with their attributes and parameters, which could be used in specifying the interface to a simulation or federation that implements the Conceptual Model.  Once again, it relies upon the constructs as outlined in the HLA OMT Specification. [3] While the HLA OMT specification is leveraged as a means to define the interface aspect of the object model, it does not prescribe the use of HLA (or the Runtime Infrastructure (RTI)) by the simulation(s) which model this BOM element.  This HLA OMT was merely used because it offered a common and well understood means to define a class within the M&S community. For the purposes of this analysis, and in the interest of limiting the scope of this paper, the Object Model Definition portion of the BOM template development for the TEAMS Simulation will not be independently exemplified other than via the BOM mapping tables. [10]Supporting TablesThe provision of supporting tables in the BOM template enables the practitioner to clarify the BOM specification through the use of notes and lexicons.  The distinguishing feature of the lexicon structure is that allows the designer to separate out the appropriate definitions so as to achieve a common understanding of the semantics of the data. [1]Torpedo Enterprise Advanced Modeling and Simulation (TEAMS) InitiativeUnder ONR’s TEAMS Initiative , the Torpedo M&S community has come together to develop a common simulation model component architecture, to promote reuse, and to enable composable and interoperable utilization of valuable torpedo enterprise M&S assets.  The mission of TEAMS is to reduce M&S cost and integration time, thereby improving its support of concept assessment, software development, test and evaluation, training, and tactics development applications.  Some of the by-products of this effort are the generic taxonomy of objects in torpedo systems, environmental models, and simulations, and the ontological relationships, methods and interfaces, captured in System Modeling Language (SysML) diagrams.Given that multiple Navy, academic, and industry laboratories, as well as international partner laboratories are working on improving various torpedo performance areas, there continues to be a great demand for high-fidelity models.  Historically, many such improvement efforts have been conducted in isolation from one another due to organizational “stovepipes.”  The result is a costly business model that tends to replicate previous and concurrent model development efforts.  TEAMS was created by ONR to foster a collaborative M&S development environment by standardizing an M&S architecture framework that emphasizes componentization of models and definition of their interfaces.  TEAMS will reduce costs by increasing labor efficiency and reducing torpedo technology development time.  Additionally, simulation content will be improved by enabling availability and use of the best torpedo enterprise model assets.The TEAMS Initiative began by establishing a cross-organization consortium consisting of experts from the torpedo M&S community, and using the facilitating services of The Open Group [4], which exists to support development of open architectures.  This consortium employed a systematic systems-engineering approach, conducive to group collaboration, based on The Open Group Architecture Framework (TOGAF) Architecture Development Method (ADM) [6], a formalized process for developing architectures and standards, as illustrated in Figure 2.  Through the use of TOGAF ADM, the TEAMS Consortium developed specific requirements for its architecture and, on the basis of those requirements, described an architecture vision for TEAMS.  That vision consisted of a common architecture framework allowing composability and interoperability among the existing simulations used in the torpedo enterprise.  TOGAF ADM then provided the guidance to develop both a business view and an information systems view of this framework.Figure 2  The Open Group Architecture Framework Architecture Development Method.Figure 3   OMG’s Model Driven ArchitectureFor the next critical step in TOGAF ADM, the TEAMS Consortium used a method developed by the Object Management Group. [6] The TEAMS Consortium developed and documented its standardized torpedo enterprise M&S technology architecture framework and standardized reference model interfaces based on the OMG’s Model Driven Architecture (MDA) [8].  The MDA method uses a multi-staged approach to transform a design from an abstract representation to a specific engineering technology solution, as shown in Figure 3 above.The process begins with creating the Computation-Independent Model (CIM), a domain view of a system that does not show detailed structure—essentially a conceptual-level architectural reference.  The TEAMS Consortium first reviewed all important torpedo enterprise simulation architectures, and then depicted a notional, generalized model operational scenario.  Expert-identified model components were then captured and ontologically grouped.  The resulting diagram, shown in Figure 4, serves as the TEAMS conceptual reference and CIM.  For a more detailed discussion on the TEAMS MDA process, see reference [8].Figure 4  The TEAMS Conceptual Reference DiagramThe next step requires skillful transformation to the Platform-Independent Model (PIM), which should represent functionality and behavior, undistorted by engineering technology implementation details.  Here, the SysML block data diagrams (BDDs) and internal block diagrams (IBDs) were used to provide a highly detailed description of the organization and hierarchy of objects (taxonomy), along with the relationships, methods, and interfaces between those objects (ontology) in a torpedo simulation.  SysML activity diagrams provided a description of timing and interplay among objects during execution.  Sections  REF _Ref173915859 \r \h 4 and  REF _Ref173915867 \r \h 5 provide more detail on the TEAMS use of SysML, along with example diagrams.The MDA process also provides TEAMS with the means to complete steps E, F, and G in TOGAF MDA (see Figure 2).  The final step in the MDA process transforms the PIM to the Platform-Specific Model (PSM) and concludes by implementing a specific engineering technology solution selected by the developer.  To help guide the process of mapping a simulation implementation from the PIM and to assist model implementers in adapting their designs to the standard interfaces, TEAMS has begun the process of developing reference implementations, including a CORBA-based implementation, as well as a direct software calling interface using the C language bindings.SysML and TEAMSThe TEAMS Consortium selected SysML as the modeling language for its PIM.  The TEAMS PIM describes the taxonomy and ontology of TEAMS interfaces in a manner that is not specific to any particular development environment.  This ensures consistency among simulations and simulation components developed using different environments.TEAMS used SysML’s Block Definition Diagrams (BDDs) to describe the TEAMS interface hierarchy (taxonomy).  These show the inheritance and composition relations between interfaces, and set up lines of communication without describing the method or content of that communication.  For the interaction between objects (ontology), TEAMS used SysML’s Internal Block Diagrams (IBDs) and UML’s Activity Diagrams (SysML included UML Activity Diagrams in the SysML specification).  The IBDs show the methods and attributes to which an object must respond.  The Activity Diagrams show the typical order and sender of these method invocation requests. [4]TEAMS High Level SimulationThe TEAMS specification provides several different tiers of interfaces at which simulations and components can federate.  At the highest level, there exist three kinds of objects, as shown in Figure 5.Figure 5  TEAMS Model InteractionThe MediumThe Medium represents the characteristics of the undersea environment.  It stores and organizes physical attributes, acoustics, and any other relevant information and allows entities to query it.  It also accepts new information from the entities, such as acoustic transmissions made by entities, which is then stored for use by other entities that can hear it.The EntityModelThe EntityModel represents one entity in the simulation.  An entity is any body in the undersea medium of interest to the simulation.  The EntityModel is the composition of the entity’s physical hardware and all of the models used to represent it in the simulation, such as a motion model or an acoustic model.The WorldThe World represents the simulation.  The World contains exactly one instance of Medium and several instances of EntityModel.  It is responsible for time step control, and provides entities access to the Medium as well as to other entities.  It also determines when the simulation is complete.Figure 6  TEAMS Simulation Component InteractionFigure 6 is a UML4SysML Activity Diagram that describes the interaction among the top-tier simulation components.  The activity begins at the solid black dot, and ends at the dot encased by a circle.  Activities pass control to other activities via the dashed arrows, and they pass information to other activities using the solid lines.  Information flows out of ports in the activity, and arrows on the port indicate direction of information flow.  The Tactical activity has its internal activities shown on this diagram.  Internally, the Tactical activity follows the same standard as the outer activity; beginning at the solid black dot and ending at the encircled dot.  The dashed region labeled “For Each Entity” represents that the contents of the region are duplicated for each entity in the simulation, and that these activities can be performed in parallel (though all must complete before proceeding to the Evaluate State decision).The World object begins with initial control.  The World then derives the size of the next time step iteration, and calls on each entity to execute Tactical decision-making, followed by motion calculation over the time step interval, and then waits for each entity to finish.  A particular entity is permitted to perform any actions inside of its Tactical decision-making process, including querying the environment for physical, acoustic, or other data to stimulate its sensors, and direct any action towards its actuators.  In this simple example, the entity gathers sensor data over the specified time step, pulling in environmental data from the Medium.  The EntityModel then passes the generated data into its internal decision-making algorithm, determining how it will adjust the motion elements (fins and propulsion units).  The EntityModel then takes this guidance information and supplies it to the Calculate Motion activity of the EntityModel, which computes the trajectory of the entity over the time step.  To calculate this, the EntityModel pulls in environmental data as well as the trajectories of other entities in the Medium (to determine collisions).  When complete, the EntityModel provides its calculated trajectory to other entities, and returns control to the World.  After all entities complete their Tactical activity, the World evaluates the state of the simulation.  If it determines the current state of the entities meets the end criteria of the simulation, it gathers data about the simulation and makes its report, then exits.  If not, it continues to the next time step interval, and repeats.BOM Template Components for the TEAMS SimulationThis section presents an initial attempt at applying the concepts of the BOM template to the current high level simulation for TEAMS.  While many of the data specifications provided are notional and generic, it serves to demonstrate the methodology that could be used in applying these concepts to all of the models of the TEAMS Initiative.Model IdentificationThe Model Identification Table is used to identify the basic metadata of a BOM, and a table for the TEAMS High Level Simulation is provided as Table 1.  This metadata is necessary and useful to help enable discovery. [10]  For the purposes of this analysis, we shall call this simulation TEAMS RunSimulation Version 1.0.  Additionally, metadata in the form of a Model Identification Table could be provided for individual components (e.g. motion models) of the simulation.Table 1  Model IdentificationThe first column of this table specifies the categories of data to be associated with this particular BOM, which effectively facilitates the “card catalog” search capability to support its reuse by future model developers.  In this case, Table 1 provides a very brief depiction of notional data associated with this BOM.  A more complete BOM specification might include considerably more detailed listing of keywords, references, and appropriate application for this BOM.  The “Glyph” entry refers to graphical icon choices and their descriptions, which in this case are not included in this table.Conceptual Model DefinitionThe next four tables developed for this BOM describe of the pattern of interplay within the model, the state machines that might be included, and the types of entities and events that are used.  This BOM method provides a standardized approach to conceptual model description that makes it more readily adaptable to other uses by future model and federation designers.  The BOM Specification documentation [1] provides for this representation, either through the use of a defined event type within the BOM, or by another BOM.  This effectively enables the practitioner to design this BOM in hierarchical fashion, creating layers of more detailed interplay analysis in other modules of greater granularity.  In the case of the TEAMS High Level Simulation, a very appropriate use of this approach would be characterization of the EntityModel as a separate BOM.  In fact, the simulation might have a number of individual EntityModel BOMs, each of which would be selected to interact with the World and the Medium entities.  This allows each instance of the  EntityModel to be individually described as a distinct instance of a particular type of undersea vessel.  For the purposes of this paper, and in the interest of brevity, the BOM products shown will treat the EntityModel as an entity in order to limit the scope and depth of the analysis .Patterns of InterplayThis template component approaches the model description challenge by identifying sequences of pattern actions that are necessary for the model to function as designed.  This Pattern of Interplay description is depicted in Table 2, in which this analysis has identified seven distinct pattern actions to be accomplished in the conduct of the TEAMS High Level Simulation pattern of interplay.  These pattern actions have been developed by reference to the Figure 6 Simulation Component Interaction diagram and the accompanying descriptive commentary of Section  REF _Ref173915867 \r \h 5.  No variations or exceptions have been identified at this level of analysis.  The two alternative outcomes of the Simulation Continuation Decision pattern action are shown as a primary pattern action of continuation, and a variation in which the simulation is terminated.  Note that the EntityModel is treated as an entity in this approach, and thus the “BOM” column of the table is not used.  Table 2  TEAMS High Level Simulation Pattern of InterplayState MachineThe description of the TEAMS High Level Simulation as a state machine enables the BOM developer to identify the behavior states expected to be exhibited by one or more conceptual entities.  Each state machine is to identify the states that can be represented, the exit conditions associated with a pattern action, and the next state which is entered upon satisfying the condition specified.  In this analysis, the state names and exit action names have been created to capture the concepts outlined in the descriptive commentary of Section  REF _Ref173915867 \r \h 5.  Table 3 demonstrates a state machine analysis for each of the three conceptual entities selected for the TEAMS High Level Simulation.  Note that this table references  the existence of other BOMs (e.g. DeriveTimeStepBOM) as mechanisms to support action, while no specifications for these have been provided.  These references are provided  as a notional demonstration of how these tables might be  constructed in an environment in which this is one of several BOMs used to carry out the state transitions for these entities.  More typically, this state machine description will point to patterns and pattern actions within the BOM being defined. [10]Table 3  State MachinesEntity TypeTable 4  Entity TypesThe purpose of the Entity Type template in the BOM is to describe the types of conceptual entities used as senders and receivers within the pattern of interplay and which carry out a role identified within a state machine.  In the case of the TEAMS High Level Simulation, the simulation is focused upon one World, which may relate to one or more EntityModels, each representing an individual body of interest in the simulation.  The TEAMS simulation incorporates the concept of a single Medium, the one instance representing the undersea environment in the region of interest for the simulation.  Therefore, in constructing the BOM template component Entity Type table, the characteristics associated with the WorldEntity are merely the identification number for this particular simulation, the list of EntityModels with which it will interact, and the single MediumEntity to be included in the simulation.  The EntityModel will include many different characteristics that make it unique, and the MediumEntity will have a number of different attributes associated with the particular environment of the regional locale.  Table 4 demonstrates how the Entity Type BOM template might be applied to the TEAMS simulation.Event TypeThis BOM template component enables the description of the types of conceptual events used to represent and carry out pattern actions as defined within the identified pattern of interplay described in Section  REF _Ref173920022 \r \h 6.2.1.  Table 5 shows the fundamental characteristics of an event, including its source, target, and content.  The BOM Event Type template separates events into two categories, triggers and messages.  A message has both a source and a target, and usually carries additional information as content.  In contrast, a trigger has a source but no specific target, and its content consists of a Boolean (true/false) variable indicating the trigger condition.  Of the eight TEAMS event types listed in Table 5, only two, DataGathered and ActionDecided, are triggers, and the rest are classified as messages. Table 5  Event TypesModel MappingThe intent of the Model Mapping template of the BOM specification is to facilitate mapping of the relationship between the entity and event elements identified and the class structure elements of the HLA OMT Template Object Model Definition. [2]  Two types of mapping are supported—Entity Type and Event Type.  The tables used for this are merely side by side comparisons of Event and Entity Type Data with HLA Constructs.Entity Type MappingThe Entity Type Mapping Table is constructed so that each row represents a mapping of the Conceptual Model entity type to a corresponding HLA OMT Object Model Definition element.  The TEAMS High Level Simulation Entity Type Mapping Table which serves this purpose is shown in Table 6:Table 6  Entity MappingsEvent Type MappingThe Event Type Mapping Table facilitates the mapping between the event type mappings to HLA object classes and their attributes, or HLA interaction classes and their parameters.  Table 7 presents a notional representation of how that mapping might be done for the TEAMS Simulation analysis presented here.Table 7 Event Type MappingsConclusionsThis effort has begun the process of applying the BOM template to the existing TEAMS High Level Simulation structure.  It has been based upon the TEAMS simulation description provided, and the textual description of how the fundamental entities of the simulation (World, EntityModel, and Medium) are intended to interact.  The process of developing and populating the BOM template tables in this paper has been an admittedly simplistic application to the TEAMS Simulation at the very highest level of abstraction.  It has not been intended to provide technical detail suitable for in-depth analysis, but has been developed to provide a demonstration of methodology.  This process demonstration is intended to serve as a model for how a more detailed BOM development process would be accomplished.The fundamental purpose of the application of the BOM framework to any simulation is to provide a component framework in support of greater interoperability, reuse, and composability. [1] The completion of a more detailed BOM template analysis should enable the practitioner to more completely capture the “piece-parts” of the TEAMS simulation in the form of entities and the patterns of interplay between them as the simulation is executed.  In clarifying and specifying these patterns as sequences of events, and characterizing them through the development of standardized BOM template components, the developer is able to make this simulation and its components more readily accessible and reusable by other members of the undersea warfare analysis community.  Likewise, in creating the Model Identification Table for each simulation module, the developer has identified the basic BOM metadata that make that module more accessible and reusable by other modelers.  The Conceptual Model Definition process enables the developer to describe the simulation module precisely in terms of its sequences of pattern actions, which compose the pattern of interplay inherent in the simulation’s activity sequence.  This standardized description of simulation activities can be more readily incorporated into a larger federation.  The Model Mapping process that has been notionally demonstrated here relates the entity and event elements of the Conceptual Model Definition to the class structure elements of an interface pertaining to the models defined by a simulation.  Ultimately, this has the potential to define yet another transition to a Platform Specific Model (PSM) for TEAMS, defining the interface to an HLA simulation or federation that might implement this conceptual model.  Additionally, the BOM’s metadata provides a very important capability to formally document important information about individual components, and fills a significant gap in the TEAMS standard.This application of the BOM template is not expected to add accuracy or fidelity to the TEAMS simulation structures.  However, it certainly has the potential for making these structures considerably more valuable by enhancing their accessibility, interoperability, and reusability throughout the modeling and simulation community.AcknowledgementsThe authors would like to thank Dr. Dave Drumheller, Office of Naval Research, and Mr. Duane Hardy, Office of the Secretary of Defense, for their vision and sponsorship of this work.  Further, the authors wish to acknowledge the significant contributions of The Open Group and the Object Management Group, whose vision and tools were critical to the success of TEAMS.  Additionally, the insightful editorial suggestions from Dr Robert P. Goddard of the Applied Research Laboratory, University of Washington, proved invaluable in the development of this paper.  The review and extraordinarily detailed comments provided by Paul Gustavson, co-founder and Chief Technology Officer of SimVentions, Inc, were equally invaluable.  Mr Gustavson is a long-time advocate and pioneer of the BOM concept for enabling simulation composability, interoperability, and reuse.  Finally, the authors wish to acknowledge the expert contributions of Donna Bustamantes, the technical editor at ARL:UT.References[1]	SISO Base Object Model (BOM) Template Specification, SISO-STD-0030-2006, 31 March 2006, pp 1-57.[2]  SISO Guide for Base Object Model (BOM) Use and Implementation, SISO-STD-003.1-2006, 31 March 2006.[3]	IEEE Standard for M&S High Level Architecture (HLA) – Object Model Template (OMT) Specification, IEEE Std 1516.2-2000, 3 Park Ave, New York, NY, 9 March 2001.[4]	OMG Systems Modeling Language (SysMLTM) (2007),  HYPERLINK "http://www.omgsysml.org/" http://www.omgsysml.org/[5]	The Open Group (TOG).  (2007).  HYPERLINK "http://www.opengroup.org/" http://www.opengroup.org/[6]	The Open Group Architecture Forum, (2006).  TOGAF (The Open Group Architecture Framework) Version 8.1.1 “Enterprise Edition”.   HYPERLINK "http://www.opengroup.org/togaf8x/download.tpl?t=pdf&id=106941" http://www.opengroup.org/togaf8x/download.tpl?t=pdf&id=106941 [7]	Object Management Group (OMG), (2007)  HYPERLINK "http://www.omg.org/" http://www.omg.org/[8]	OMG Model Driven Architecture (MDA), (2007).   HYPERLINK "http://www.omg.org/mda" http://www.omg.org/mda[9]	Cerenzia, J. L., Scrudder, R.; Goddard, R. P., Haley, T. B., Lounsbury, D. M., Practical Experiences in Creating Components from Legacy Simulations, Proceedings of the Interservice/Industry Training, Simulation, and Education Conference (I/ITSEC), 2005.   HYPERLINK "http://ntsa.metapress.com/app/home/contribution.asp?referrer=parent&backto=issue,111,153;journal,2,7;linkingpublicationresults,1:113340,1" http://ntsa.metapress.com/app/home/contribution.asp?referrer=parent&backto=issue,111,153;journal,2,7;linkingpublicationresults,1:113340,1[10] Gustavson, Paul, editorial additions and comments, 20 August 2007Author BiographiesJIM WATKINS is a project manager in the Signal and Information Sciences Laboratory, Applied Research Laboratories, The University of Texas at Austin.  He is the ARL:UT Technical Lead for the project developing a metadata structure for the TEAMS Initiative.  Mr. Watkins is a retired Air Force officer with 30 years’ experience with tactical aviation and real-world military operations, as well as an undergraduate degree in electrical engineering from The University of Texas at Austin, a graduate degree in computer science from George Washington University, and a graduate degree in business administration from The University of Texas at Austin.PIERRE LALLEMENT is the head of the Systems Analysis and Simulation Technology Department at the Applied Research Laboratory, The Pennsylvania State University.  He is the ARL/PSU Principal Investigator for TEAMS.  He has 20 years’ experience in computer simulations of engineering and scientific problems such as underwater weapon systems, ocean acoustics, and acoustic propagation.  Mr. Lallement specializes in providing modeling and simulation support to the research and engineering process, particularly for signal processing.  He has a B.S in Mathematics from The Pennsylvania State University, and an M.A. in Mathematics from The University of Maryland.  His research interests include high frequency underwater acoustics and propagation modeling.DAVID DIEDERICH is a computer scientist working for the Applied Research Laboratory at The Pennsylvania State University.  He graduated from PSU in 2005 with a B.S. in Computer Science.  He has four years’ experience in digital modeling and simulation, and he has worked with the TEAMS project since 2006.  He led the technical effort to translate existing TEAMS UML diagrams and ideas into a more rigid form in SysML.  He has created example implementations of the TEAMS interfaces, mostly in the CORBA-based PSM.