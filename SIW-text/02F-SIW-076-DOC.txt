A Simulation Independent Scenario Development SystemChris K. BurnsDr. Richard ColemanJoe MoranDavid SanderQuality Research, Inc.4901D Corporate DriveHuntsville, AL 35805chris.burns@qr.com, rick.coleman@qr.com, joe.moran@qr.com, david.sander@qr.comScott SpeigleU S Army Aviation & Missile Command Research, Development, and Engineering Center (AMRDEC)Huntsville, Alabamascott.speigle@rdec.redstone.army.milBattlefield simulations constantly have to deal with the problem of transferring the military knowledge of force composition, force movements, and battlefield tactics into scenarios that can be executed by software simulations.  This problem is compounded by the complicated nature that simulation interfaces present that are usually developed for technical convenience rather than user familiarity.  Additionally, scenarios that are developed within one simulation are not easily transferable because of the differences of data inputs from simulation to simulation.  The simulation and analysis community needs a way for the tactical experts to develop a scenario once in such a way that the scenario could then be distributed across multiple simulations supporting multiple levels of simulation fidelity.With this in mind, AMRDEC has developed a Java based Scenario Mission Planner (SMP) as a front end to the Object Oriented Interactive Distributive Engineering Evaluation and Analysis Simulation (OOIDEEAS). This SMP provides a user-friendly interface that provides comprehensive scenario planning.  The SMP was developed in conjunction with tactical experts and scenario developers to provide comprehensive functionality for scenario development. The SMP supports creation of new force compositions, reuse of predefined forces, rapid force deployment, route assignment at multiple echelon levels, rapid formation changing along route assignment, movement preview, movement synchronization, and after action playback of previously executed scenarios.  By providing data at all levels of aggregation down to the entity level, the SMP can support a wide variety of simulations.  The SMP exports scenarios in an easy to parse XML format to make native simulation parsing relatively simple. This paper will discuss the capabilities and benefits of this platform independent user-friendly SMP system that exports XML scenario files.  It will go into detail on the process used to develop the product and the detailed features included as part of its operation.The ProblemCountless hours are spent each year creating realistic military scenarios for the multitude of simulations used throughout the modeling and simulation community.  Each of these scenarios is created specifically for the target simulation. In some cases, simulations do not have graphical user interfaces or scenario mission planners and therefore creating the scenario is a long, expensive, and tedious process.  In most of the cases, the scenario is only usable by the simulation for which it was developed.  Therefore, money is spent each year creating and recreating the same scenarios simply because the plan is not transferable.The need to be able to transfer plans from one simulation to another is driven by the limitations of the simulation community. There is no “magic bullet” simulation that answers all questions.  Physics based constructive simulations provide rapid concept analysis of systems and components of systems.  Stochastic Semi-Automated Force (SAF) systems provide man-in-the-loop capabilities that support user reaction in a statistically realistic arena. Computer Generated Force (CGF) simulations stochastically model large battles at the aggregate level and provide operational analysis of battle plans.  Numerous other simulations fill additional niches that are not addressed with other readily available simulations. Because of the limitations of hardware and time, each of these simulations is forced to focus on accurately modeling the area for which it was designed, and numerous simulations in each arena.The problem with transferring scenarios is directly related to the need to transfer them. Because each simulation is focused on analyzing a different problem, the data that the simulation needs to recreate a scenario is different from simulation to simulation. Even if the data to be transferred is the tactical movement of the forces, the data needed by different simulations varies significantly.  Entity level simulations need route information by entity, a SAF may need routes by entity or unit and formation, and a CGF may not model route below platoon or company level.  In order to provide an accurate plan that remains consistent across this broad arena, scenario data must be provided at each level and it must remain consistent across each level.The final problem with transferring scenarios is caused by incompatible terrain formats.  There are almost as many terrain formats as there are simulations, and they are not interchangeable.  Therefore, for scenario plan data to be transferred between simulations, an acceptable interchange format will have to be established.The conceptThe limitation of scenario mission planners has always been that the data output has been formatted for a target simulation.  Other simulations cannot easily use the scenarios because of the difficulty in converting the data and the invariable need to augment the data with inputs that are different from the previous simulation.A simulation independent scenario mission planner works when two assumptions are met: first, the scenario mission planner must provide common force structure and force movement data to all battlefield simulations while allowing additional system specific configuration to be done locally; and second, the output of the scenario mission planner must be in a format that makes it easy to extract the data for every simulation.If these assumptions are accepted, the function of the scenario mission planner is to provide an easy way to rapidly develop force structures and movements. And, once they are developed, to export them in a format that is easily readable by a third party.FeaturesIn order for the scenario mission planner to be a viable tool, it must provide more that a format to transfer scenarios.  The scenario mission planner must provide a better way to develop scenarios.  While looking at the current scenario planning tools and the needs of scenario developers, several features were determined to be necessary.Force structures should be easy to create, edit, and deploy.The new force structures should be flexible enough to support Objective Force analysis.Force structures should be storable separate from scenarios and terrain.Movement should be easy to establish and edit. Routes should be adjustable at every aggregate level.Formations should be changeable at different points along the route.Formations should be easy to create and add to the system.Scenarios should be able to be created in pieces and assembled into a whole.Scenarios should be able to be broken into separate components.The scenario mission planner should be able to preview planned movement and make adjustments to the plans.An Ergonomic InterfaceIn addition to the technical problems, most user interfaces are designed by the programmers of the system focusing on the easiest way for the operator to get the data into the program.   It is assumed that the operator is the programmer or a user that has an in depth understanding of the model.A true scenario mission planner must provide an interface that abstracts the technical level of the data being input.  The interface must be intuitive and easy to use, even for the non-technical user.  The purpose of the interface is to collect scenario information from subject matter experts (SME). There should not be a need for a separate technician to translate the information from the SME into a specific program.Comprehensive data The data generated by the scenario mission planner must contain the information at all levels to provide consistent data for the various levels of simulation.  Each simulation must be able to select the data from the scenario mission planner output that is pertinent and disregard the rest.  In order to maintain consistency, the individual simulations should not have to derive plans from scenario mission planner data.Open standard outputThe tool must not only provide the data, but the data must be provided in a format that allows for ease of use, even when being searched for specific values.  The data must be easy to read and data easy to extract.  The format must be usable by simulations using a variety of architectures and programming languages.The ProductThe Scenario Mission Planner (SMP) was designed as a graphical user interface (GUI) front end to the Object Oriented Interactive Distributed Engineering and Evaluation Analysis Simulation (OOIDEEAS). This SMP provides a user-friendly interface that provides comprehensive scenario planning.  The SMP was developed in conjunction with tactical experts and scenario developers to provide comprehensive functionality for scenario development. The SMP supports creation of new force compositions, reuse of predefined forces, rapid force deployment, route assignment at multiple echelon levels, rapid formation changing along route assignment, movement preview, movement synchronization, and after action playback of previously executed scenarios.    The SMP exports scenarios in an easy to parse XML format to make native simulation parsing relatively simple.The stand-alone SMP product provides immediate benefit to the users of the IDEEAS application pending that application’s replacement by OOIDEEAS. Due to that focus, the SMP provides interfaces to levels of data that are specific to that application, such as sensor and weapon configurations and engagement area definition.  In the process of development of the SMP, it became apparent that the XML data structure it supports would be an easy medium to transfer the force structure and movement data to other simulations. Since the SMP supports all levels of aggregation down to the entity level, the SMP can support a wide variety of simulations.The Tools WindowThe SMP consists of two main windows: the Tools Window and the Map Window.  The Tools Window (Figure 1) displays information both the threat and friendly of a scenario and provides a variety of tools in the form of graphical widgets for adding and editing force organization, equipment, and tactics.  The Map Window is discussed below.Figure 1: The Tools WindowFigure 2: The Forces Hierarchy TreeForces Hierarchy TreeThe SMP displays all forces in the scenario down to the weapon and sensor level in a tree structure (Figure 2).  This makes it easy for the user to see the current layout and make-up of forces at any echelon level.  Below the forces hierarchy tree is a panel where detailed information such as unit name and type, location, number of waypoints in the route, initial heading, and starting time are displayed.Tabbed Pane PanelThe tabbed pane (Figure 3) displayed below the Forces Hierarchy Tree on the Tools Window has tabs for creating, and adding units to the scenario, vehicles to units, weapons to vehicles, sensors to vehicles and weapons, creating and editing engagement areas and tactics, and defining routes and movement for whole units and individual vehicles.Figure 3: The Tabbed Pane PanelEchelonsThe SMP allows the user to add echelons to the force hierarchy.  The operator has the option of selecting from predefined echelons, or defining their own.  Empty echelons are provided to create new echelons from scratch or standard pre-populated echelons may be edited to create hybrid echelons.  Once the desired echelon is established, it may be saved and reused in later scenarios.Echelons are supported at the brigade, battalion, company, and platoon levels.  Built in intelligence prevents adding higher-level echelons to lower levels.  The hierarchy is established along traditional force nomenclature, but it is not constrained to it.  The SMP supports four levels of aggregation, but it does not care if level 1 is “Brigade” or “Objective Force”. Since the structure is user defined and the names are set on creation, the only limit is the number of levels.PlatformsThe Platforms tab allows individual entities to be selected from the available list and added to the force hierarchy.  Platforms can be added at the force level, or added to an already existing echelon. As platforms are added, the simulation automatically assigns a unique name that identifies the platform type and location in the hierarchy. WeaponsThe Weapons tab in the tabbed pane of the Tools Window displays a list of available weapon classes and specific types under each class.  Users may add, remove, and modify the weapon systems assigned to individual vehicles and units.  The option is given to save modified weapon types for use in future scenario planning.SensorsThe Sensors tab in the tabbed pane of the Tools Window displays a list of available sensor classes and specific types under each class.  Users may add, remove, and modify the sensors assigned to individual vehicles and weapons.  The option is given to save modified sensor types for use in future scenario planning.Engagement AreasThe Engagement Areas tab in the tabbed pane of the Tools Window allows the user to create engagement areas (kill zones) in the scenario.  Missions can be defined for each engagement area and individual vehicles assigned as hunters and/or shooters for each mission.MovementThe Movement tab in the tabbed pane of the Tools Window allows the user to define movement routes for entities in the scenario.  For the SMP, routes are defined as a set of points for each entity with arrival times set for each point.  As points are added to the route, a user-defined speed is used to determine the time of arrival of the next point.  Routes can be defined for any echelon level unit, sub-unit, or individual entity.  When a route is assigned to an echelon, the formation set for that echelon is used to generate a relative location for the sub-components of that echelon, which continues down until the entity level is reached.  Formations can be changed for any point of a route and at any level of the hierarchy. When a formation for an echelon is changed, the relative positions of its sub components are recalculated.  Since this change is only downward, this enables routes to be set with formations that vary within the structure, i.e. Company column Platoon wedge. This also allows plans to be generated that support complex formation changes along the route.Map WindowThe second main window of the SMP is the Map Window (Figure 4).  This displays a two-dimensional map of the scenario location.  Information and control of display features are handled by widgets to the left and below the map.Figure 4: The Map WindowMap FeaturesThe user has the option of displaying or hiding a variety of features on the map.  These features include forests, roads, rivers, bodies of water and urban areas.  In addition the user can display contour lines at two levels of detail, map grid lines at two levels of detail, routes and waypoints for all entities, and icons for entities at any echelon level.  Additional tools in the map window allow the drawing of a wide variety of graphical overlays on the map. On map editingIn order to provide the best interface possible, all of the deployment and force movement functionality can be edited on the map. The user can establish locations and routes by selecting the desired position on the map while in the appropriate mode. The user is able to select Entities, Echelons, and route points from the map and make edits to the routes or locations through the map interface.  Pre-run plan previewDuring the scenario-planning phase, it is possible to run the scenario in “Unattrited” mode.  Unattrited refers to the fact that during this preview run no actual weapons fire or lethality is modeled. This provides a preview of the movement and timing of all entities in the scenario.  The preview mode allows the user to view the scenario running real-time, fast-forward, fast reverse, paused or, by dragging the slide bar, rapidly scanning the scenario forwards or backwards. When the scenario is paused, controls allow a frame advance/rewind at a user definable step rate.Plan synchronizationWhile the user is previewing the scenario, the SMP allows the user to make changes to the scenario. The points of any entity or echelons route may be added to, moved, changed, or deleted and the system will update the locations of all entities to reflect the change immediately.  This allows the user to edit the speeds of entities that need to arrive at a location at the same time, or to adjust the movement of forces if the preview shows that the timing causes unrealistic movements to occur.Post run reviewThe IDEEAS simulation generates log files during the execution of a scenario that document the movements and events that occurred during the experiment.  The SMP has the capability of importing these log files and displaying the results for easy viewing.The format of the log files establishes which entities were involved in each event and at what time each event occurred. The SMP allows the user to find events by time or entity. The user can play the scenario back in the same manners as the “Unattrited” mode or jump immediately to the time and location of an event or route position.  This allows rapid analysis of the events that occurred during a scenario.Scenario FilesAll of the data for a scenario, minus the actual terrain data, is stored in a single XML file.  The scenario file is organized in an XML tree structure that separates the different parts of the data into separate branches.XML is an ASCII data format that controls data format with the use of internal labels called “tags”.  XML uses tags to organize the data into a document tree that resembles a folder structure on a PC. Tags may have sub tags, data or both. Scenario files are broken up into several sections that isolate the terrain file used to create the scenario, the force structures used and their movements, other IDEEAS specific data components.  It is the force structures section that is portable to other applications.Figure 5. Excerpt from Scenario FileThe Forces section contains the data associated with the forces and their movements. (See Figure 5) This data is separated into a Friendly Force and a Threat Force and contains the echelon hierarchy from Brigade down to Platform level.  At each level of the hierarchy, routes are stored for each echelon and platform. The route information is stored as a series of points that make up the route with a time, location in three dimensions, and speed for each point.  The z component is altitude above ground.  For the route points of echelons, the formation at that point is stated, and for the route points of vehicles, additional data used by IDEEAS is set for the route. Using the Standard OutputUsing the XML structure, retrieving a specific part of the scenario file is not difficult.  And since the SMP stores the full force hierarchy with routes at each level, any application that needs force movement as part of its planning can easily extract the data at the desired level. The largest difficulty will be mapping the naming conventions to insure the correct items are created.   The XML scenario file is portable and platform independent. The XML tags provide internal documentation for the data. And free XML parsers are available that can be integrated with systems or used as tools to provide access to the data.Once the force movement information has been imported into the desired simulation, any additional configuration can be added. ConclusionsThe SMP developed for the OOIDEEAS development project provides users with an easy to use graphical user interface for defining force structure and force movement scenarios which can then be saved to text files in XML format.  The speed and flexibility constructing and modifying battlefield scenarios result in savings of time, effort, and money.The SMP holds promise for extending its usefulness to other simulation applications.  By building scenarios in the SMP and then exporting them to an industry standard XML format, other simulation applications can, with only minor modifications, read this format.  XML parser code is freely available in many different programming languages making it a simple process to add this capability to any application.  By providing an existing system with a predefined format, the SMP offers a cheaper alternative to case-by-case integration strategies that are required each time new applications must work together.  Author BiographiesChris K. Burns is a Senior Engineer for Quality Research, Inc, supporting the AMCOM Advanced Prototyping, Engineering, and eXperimentation (APEX) Laboratory at Redstone Arsenal, AL.  He has over five years of experience developing high-fidelity software simulations.  Mr. Burns is currently the software technical lead for the Object-Oriented Interactive Distributed Engineering Experimentation and Analysis Simulation.Scott Speigle is currently an electronics Engineer in the System Simulation and Development Directorate for the U.S. Army Research Development and Engineering Center.  Mr. Speigle has over 20 years experience in the design and development of missile systems.  Mr. Speigle is currently the Chief Technical Engineer for the Common Missile Program.Dr. Richard Coleman is a Senior Engineer for Quality Research, Inc, supporting the AMCOM Advanced Prototyping, Engineering, and eXperimentation (APEX) Lab at Redstone Arsenal, AL.  He has over 21 years of experience developing software.  Dr. Coleman is currently the primary developer for the user interface segment of the Scenario Mission Planner for the Object-Oriented Interactive Distributed Engineering Experimentation and Analysis Simulation.David A. Sander, P.E. is a Principal Engineer II with Quality Research, Inc.  Mr. Sander has over seventeen years experience supporting the U.S. Army Aviation and Missile Command (AMCOM), the National Aeronautics and Space Administration (NASA), and the U.S. Air Force Ballistic Missile Office (BMO) in the areas of engineering analysis and modeling and simulation.  Mr. Sander is currently a member of the design and development team for the Object-Oriented Interactive Distributed Engineering Experimentation and Analysis Simulation project.Joe Moran is a Software Engineer for Quality Research, Inc, supporting the AMCOM Advanced Prototyping, Engineering, and experimentation (APEX) Lab at Redstone Arsenal, AL.  He has over 15 years of system and software experience in defense and private industry. Mr. Moran is a member of the Object-Oriented Interactive Distributed Engineering Experimentation and Analysis Simulation software development team. 