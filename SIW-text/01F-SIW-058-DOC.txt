A Comprehensive Federation Management Capability for The Joint Simulation System (JSIMS)Paul PerkinsonStephen BerglieNeville ThomasVirtual Technology Corporation5400 Shawnee Road, Suite 203Alexandria, VA 22312703-658-7050 HYPERLINK "mailto:pperk@virtc.com" pperk@virtc.com,  HYPERLINK "mailto:sberglie@virtc.com" sberglie@virtc.com,  HYPERLINK "mailto:nthomas@virtc.com" nthomas@virtc.com  Stanley CorbettAllison KuzejaRaytheon Systems CorporationTewksbury, MA 01877 HYPERLINK "mailto:Stanley_Corbett@Raytheon.com" Stanley_Corbett@Raytheon.com,  HYPERLINK "mailto:Allison_Kuzeja@res.raytheon.com" Allison_Kuzeja@res.raytheon.com Keywords: JSIMS, Federation Management, Simulation, Training, HLA, RTIABSTRACT: The Joint Simulation System (JSIMS) Program is intended to support training and education of ready forces by providing realistic, joint training across all phases of military operations for all types of missions. JSIMS is a large-scale, distributed, constructive wargaming simulation consisting of Service, Agency, and Joint models; a Synthetic Natural Environment; interfaces with command, control, communications, computers, and intelligence (C4I) equipment; and other applications and tools employing the DoD High Level Architecture (HLA) for Modeling and Simulation. The scale, complexity, and importance of such a training system make a comprehensive and innovative Federation Management capability a necessity. The Technical Control (TC) tool will provide JSIMS with a complete federation management capability based upon Virtual Technology Corporation’s (VTC’s) commercial HLA federation planning, execution, and performance monitoring tool, hlaControl™. The paper will describe several innovative federation management capabilities required by JSIMS, including visualization and management of multiple, concurrent HLA federations; federation initialization and scenario data distribution; federation, host, and network performance monitoring; time management; checkpoint and re-start; and support for technical After Action Review (AAR) and their federation-independent implementation, which makes the tool applicable to any HLA federation. The lessons learned during development, testing, and integration at the Federation Integration Events (FIEs) will also be described.1. IntroductionThe Joint Simulation System (JSIMS) Program is intended to support training and education of ready forces by providing realistic, joint training across all phases of military operations for all types of missions. As a joint service and agency training simulation, JSIMS is comprised of numerous components, each developed by a single Development Agent (DA). The JSIMS components consist of Service, Agency, and Joint models; a Synthetic Natural Environment; interfaces with command, control, communications, computers, and intelligence (C4I) equipment; and other applications and tools employing the DoD High Level Architecture (HLA) for Modeling and Simulation (M&S). During JSIMS Exercise Execution, a diverse set of models, representing joint, land, maritime, air and space, and intelligence domains and other components will interoperate with one another at different classification levels. [1] ArchitectureThis description of the JSIMS architecture is intended to provide the foundation for a discussion of several federation management capabilities required by JSIMS and is not intended as a comprehensive description of the simulation architecture. The architecture of some individual components is yet to be finalized and a fixed number of HLA federates that will comprise JSIMS has yet to be determined. However, the exact number of federates or how each component is designed and configured isn’t important for the design and development of a federation-independent management tool. We have used that lack of domain-specific insight as additional motivation to decouple the implementation of a federation-independent management capability from any JSIMS’ implementation specifics. JSIMS has defined two sets of Common Component HLA (CCHLA) requirements for federation management, Technical Control (TC) and Federation Control Manager (FCM). For convenience of use both sets of functionality will be present in a single piece of software referred to in this paper as Technical Control. Phases of OperationJSIMS defines multiple operational phases, Pre-Exercise, Exercise Execution, and Evaluation and Reporting. Although a number of Pre-Exercise federation planning requirements were levied on TC, for the purposes of this paper we are only concerned about Exercise Execution. During Exercise Execution, the system will consist of two enclaves, a lower and an upper, (see  REF _Ref518730046 Figure 1) operating at different security levels. Each enclave will run a separate federation. And despite restrictions on the flow of data between enclaves, synchronization of particular events (e.g. initialization, time advance, save and restore) is required.  REF _Ref518730046 Figure 1 is reproduced from the JSIMS SSDD Version 17 [1].Figure  SEQ Figure \* ARABIC 1 JSIMS Execution OverviewEach of the domain models and other runtime components in  REF _Ref518730046 Figure 1 will not necessarily map directly to a single HLA federate or even to a single computer. Based upon the anticipated scale of a JSIMS federation it is expected that some of the larger domain models may be comprised of several federates and/or run on numerous computers. While at this point in the program lifecycle it is primarily the responsibility of each DA to configure and operate its model(s), the complex interactions among the large number of federates, potentially spanning machines, introduces opportunities for failure and requires monitoring and control. High Level ArchitectureJSIMS employs the DoD High Level Architecture (HLA) for Modeling and Simulation (M&S). The HLA establishes a common simulation architecture for the standardization of DoD simulation to facilitate interoperability and reuse of simulation components. The HLA Interface Specification (IfSpec)[2] defines a set of six Run-Time Infrastructure (RTI) services, four of which, Federation Management, Declaration Management, Object Management, and Time Management are employed currently by JSIMS. The remaining RTI services may be used later in the JSIMS Program lifecycle.Each of the JSIMS runtime components will interface either directly or indirectly to the RTI. There are several ways a JSIMS component can interface the RTI, which can be summarized in three categories:establish a direct connection to the RTI (RTI-direct),using the Common Component Simulation Engine (CCSE) software infrastructure, orusing a C4I Adapter or other piece of intermediate software. Multiple Concurrent FederationsIn order to support centralized creation, deletion, and controlled access to training exercises the JSIMS architecture includes two types of federations, Backbone and Exercise Execution. A persistent, Backbone Federation is a convenient single point of control and will be used by JSIMS’ federates to indicate interest in initiating a training exercise. TC will not only manage the Backbone Federation and each of the Exercise Execution Federations, but also the permission repository used to verify and control federate access to each federation. Other HLA-based training federations with similar requirements for multiple concurrent and permanently available training exercises are considering a similar scheme, which requires federation management tool support for multiple concurrent federations. For JSIMS, TC is being designed to manage multiple concurrent federations and provide permitted federates access to appropriate federations. Time ManagementJSIMS uses the RTI’s Time Management (TM) services to negotiate the advancement of simulation time and coordinate the exchange of events among the various distributed federation components.  To serve as an appropriate training environment, JSIMS’ goal is to run in roughly realtime. Due to anticipated slowdowns, caused by saves, restores, federation load, or even crashes, in order to achieve a one to one relationship between realtime and simulation time it will occasionally be necessary to run faster than realtime. By their very nature, many C4I systems only operate in realtime. Therefore, special coordination is necessary between TC and the various C4I adapters to indicate whether the federation is advancing time and whether time advancement is ahead, behind, or on schedule. Although the TM services can assure the correct causal relationship of events, these services can complicate the execution and management of a federation. Compared to other simulation technologies, such as DIS, failures can have more profound implications on time managed HLA federations because of the potentially strong interdependencies among federation constituents. For example, in a time-synchronized execution, failure of a single federate may impact federation wide time advancement. Therefore, detection of federate non-responsiveness and the contributing factors, such as over burdened computer resources or network problems, which may contribute to failure across the system, is of particular importance in JSIMS and will allow the federation manager to correct and avoid problems. Size, Scale, and ComplexityThe operation of a federation that consists of numerous JSIMS components and simulation tools:spanning multiple platforms or consisting themselves of multiple federates;executing in multiple federation executions; andmodeling an unprecedented number of battlespace objects, is a complex system. The large number of parameters that can be used to characterize the operation of a JSIMS federation and the importance of consistently dependable training highlights the need for an automated tool for monitoring and controlling JSIMS federations. Of particular importance is the ability of a tool to detect and differentiate between federate, federation, computer, and network errors to reduce the time necessary to diagnose and solve potential problems. 3. JSIMS Federation ManagementTo minimize the cost of developing and supporting a federation management tool capable of meeting JSIMS’ requirements, the program performed an evaluation of commercial off-the-shelf (COTS)/government off-the-shelf (GOTS) HLA tools. The intent of the review was to select one vendor’s product(s) and have the vendor develop extensions where necessary to implement the complete TC/FCM tool functionality required for JSIMS.Virtual Technology Corporation’s (VTC’s) approach to supporting the JSIMS TC/FCM requirements is based on delivering our commercially supported federation management tool, hlaControl™, and leveraging previous and current development efforts.  This approach provides the JSIMS program with a significantly reduced development cost, accelerates the implementation schedule, reduces risk, and will reduce the long term Operation & Maintenance (O&M) costs by providing commercial product support and upgrades. hlaControl™ is a federation planning, execution, and performance monitoring tool for HLA and provides:Full Life-cycle Exercise Management and ControlVisualization of federates, computers, and the network topologyFull control and management of the federation executionMonitoring of system performance characteristicsRemote launching of federatesVisual alerts and alarms for problemsCorrective action (e.g. remove crashed federates)This section describes some of the JSIMS TC requirements. At the outset of this effort hlaControl™ satisfied some of these requirements. VisualizationInteractive graphics have been used effectively to bolster the ability to perceive and process many types of complex data very rapidly and efficiently by representing the data pictorially. TC’s network topology has been made the tool’s focal point and during federation execution it is used as the backdrop for federation status and immediate and obvious notification of federation inaccuracy or failure. The network topology provides a logical view of the federation and network. The user relies heavily on the topology to get feedback from the simulation and network; as a result the topology uses a great deal of visual indicators, tables, and popup menus to communicate efficiently with the user. We can decompose the topology into three sections:Network – network links are highlighted in red when user configurable network thresholds are surpassed.System – the color of each computer icon’s monitor indicates the system load and a red box around the entire icon indicates a complete loss of connectivity.Federate – federates are represented by icons attached below the icon of the computer they are running on. Variants of the federate icon tell if the federate is joined, resigned, not running, or not responding in the federation.In each case a visual queue on the network topology is an indication to drill down into additional tables of information for more details about a particular problem. Through context sensitive menus the user can issue commands to launch a federate process, resign federates, etc. With all its indicators the topology eases the job of managing and monitoring the simulation; and it provides an efficient means of interacting with remote components, and observing critical events.  REF _Ref518764116 \h Figure 2 shows a logical view of the federation topology during a recent JSIMS Federation Integration Event (FIE). EMBED PBrush  Figure  SEQ Figure \* ARABIC 2 Logical JSIMS Federation TopologyInitializationAmong the management requirements for JSIMS is the ability to initialize a federation execution.  Initialization is a process by which all of the participating federates are coordinated in logical time, scenario data is distributed amongst the participants, and time is evolved in a controlled manner. JSIMS federations are initialized based on a user-defined scenario built using the JSIMS Scenario Generation (SG) tool. The Format Translation Tool (FTT) translates the output of the SG tool into a federation-neutral, XML-based API that is provided by TC. The API exposes TC functionality in atomic units termed “Commands”, which are chained together to create executable initialization sequences. Initialization of a JSIMS federation is a process that is carried out, in large part, by TC.  The initialization process entails 1) ensuring all federates are present, 2) coordinating all federates with respect to logical time, and 3) distribution of scenario data.  In the sections that follow each of these stages are described briefly in terms of the HLA services required to achieve them, followed by a description of how this is accomplished in a federation independent manner using TC.Ensuring Federates are PresentThe HLA provides management level information about currently executing federations via the Management Object Model (MOM).  Among the data provided through the MOM is a list of the set of federates currently present in a federation execution.  In JSIMS federations, a list of required federates is provided to TC as part of the initialization process.  TC monitors the MOM data with respect to this list and will ensure that all required federates are present before it allows initialization to proceed.Coordinating TimeThe HLA offers several services which can be used to coordinate federates’ concept of logical time at the start of a federation execution.  In some federations, and JSIMS is one, it is important that causality be preserved to ensure repeatability of an exercise.  In this case it is crucial that logical time not be allowed to progress until all participating federates are present, have expressed their publication/subscription interests, and are ready to begin processing scenario initialization data.  Synchronization points are used to ensure that this process is coordinated properly among the set of participating federates.Synchronization PointsThe HLA specification defines a synchronization point service that can be used to coordinate processing amongst a set of federates participating in a federation execution.  The service is defined such that the implementing RTI will coordinate the negotiation process between participating federates, but it is up to each federate to implement logically correct behaviour during the synchronization point.  It is important to note that synchronization point services do not, themselves, imply any specific semantics.  HLA services are still available to federates during a synchronization point, so federates must have a shared understanding of the federation-defined semantics of each synchronization point in order for synchronization points to be used successfully.JSIMS makes use of two synchronization points during it’s initialization phase.  The first of these is “JoinComplete”.  The “JoinComplete” synchronization point is registered by hlaControl just after it has detected the presence of all required federates.  Each federate, upon announcement of the “JoinComplete” synchronization point, establishes it’s time management policy, carries out it’s publication/subscription actions, then signals the RTI that it has achieved the “JoinComplete” synchronization point.  The RTI coordinates the bookkeeping to determine when all of the federates have achieved the “JoinComplete” synchronization point.  Once all federates have achieved the synchronization point, the RTI notifies hlaControl that the federation has achieved synchronization for “JoinComplete”, and hlaControl carries on to the next stage of JSIMS initialization.After the “JoinComplete” phase of initialization, JSIMS federations immediately enter a “Start” phase.  This is another phase that takes place inside of a synchronization point labeled “Start”, and during which the scenario data is distributed.  InteractionsDuring the “Start” phase, TC sends time stamped federation-specified interactions that contain scenario data specified through the SG tool.  Each of these interactions instructs one federate to create a domain object.  In JSIMS federations, time stamping these scenario data interactions is important because each the creation of domain objects by one federate may cause reflection of the new objects in other federates, which will in turn register still other objects.  The JSIMS initialization process explicitly accounts for this type of chain reaction, termed depth of consequence [1], by carefully time stamping each of these interactions.Once the entire set of initialization interactions is sent, TC sends an “initialization_complete” interaction, which signals all of the participating federates that they should complete processing of the initialization data and achieve the “Start” synchronization point as soon as possible.  Once the federation has achieved the “Start” sync point, initialization is complete.Time Management During InitializationIn order to send initialization interactions with time stamps, TC must be time regulating.  TC is responsible for creating the federation execution, and is always the first federate to join the fedex.  The JSIMS initialization procedure calls for hlaControl to become time regulating and time constrained immediately upon joining the newly created federation execution.  This has the effect of stopping time because after TC becomes regulating, logical time cannot progress unless TC explicitly advances it.Once TC has established its time regulating status, it begins monitoring the list of federates in the execution.  Once all of the federates required by the scenario are present, TC controls the advancement of time throughout the initialization sequence as specified by the scenario.The JSIMS initialization scenario used at integration events during the first half of 2001 specified that hlaControl relinquish its time regulation status after the federation has been successfully initialized.  Once hlaControl releases its time regulating status, the federates are free to advance time as quickly as possible.  In future integration events, TC will be responsible for advancing time throughout the entire federation lifecycle.  This is discussed in a later section.ImplementationThis section describes TC’s federation-neutral, XML-based API “Commands” JSIMS employs during federation initialization. CreateAndJoinFederationExecutionCreates and causes hlaControl to join a federation execution.  Parameters are execution name, and FED file location.TurnOnTimeRegulationhlaControl becomes regulating.TurnOnTimeConstrainedTC becomes constrained.WaitForFederatesTC monitors the federation until all specified federates are present before executing any more commands.RegisterSynchronizaitonPointTC registers a synchronization pointWaitForSynchronizationPointTC achieves the synchronization point and waits for the synchronization point to be achieved by the entire federation.TimeAdvanceRequestTC advances time.SendInteractionTC sends an interaction defined in the FOM with the supplied parameters, encoded using XDR.There are several other “Commands” in the API, which aren’t currently being used by JSIMS, such as StartProcess, which can be used to launch a federate or other application on either a remote or local machine.Figure  SEQ Figure \* ARABIC 3 Execution of an initialization sequenceTime ManagementIn addition to carrying out JSIMS time management requirements as part of federation initialization, TC is required to provide a logical time pacing mechanism.  This type of capability has been described in various other federations as a game rate or federation clock feature.  JSIMS federates will, by default, try to advance time as quickly as possible.  This can lead to executions that run too quickly in some circumstances, and in these cases TC will be used to effectively apply a brake, slowing the rate by which logical time is allowed to progress.  We have implemented two schemes for controlling the rate at which logical time is allowed to advance, both described below.Fundamentally, both schemes presented here share some common behaviour:  Both rely on a single timing thread that periodically wakes up and takes some action with respect to federation time.  The duration of the sleep cycle is user-configurable, and it is the action that is taken at the end of each sleep cycle that differentiates the two approaches.NormalIn the normal mode the pacing thread will, upon notification of the end of the sleep cycle, attempt to advance logical time by a fixed timestep (also user-specified) using the HLA timeAdvanceRequest service.  It is anticipated that the normal mode will be used in cases where the operator wants to control the advancement of logical time manually.CorrectiveIn the corrective mode the pacing thread will, upon notification of the end of the sleep cycle, attempt to advance logical time to the point where it should be based on the amount of elapsed real-time since the pacer was started.  This involves calculations based on a user-defined mapping from logical time to real time.  If a 1:1 mapping is assumed (one unit of logical time maps to one second of real time), the pacing thread will attempt to advance to (logical_time+ ( elapsed_real_time * 1 ) ).  TC supports a user-defined mapping of logical time to real time as well as use specification of the desired federation rate.  These user-supplied values will be used to calculate values used in calls to the HLA timeAdvanceRequest service.  In practice, the operator will specify a maximum rate as well as a desired rate when using the corrective mode.  The maximum rate will be used to constrain any instantaneous federation rate to the user-supplied value.It is anticipated that the corrective mode will be used in cases where the operator wants to keep the federation running as close to the desired rate as possible, with a minimum of manual intervention.  The normal mode is useful when the operator wants to manually control the advance rate of the federation.MonitoringTC provides several useful federate monitoring capabilities.  A federate runtime statistics table is provided which shows, in real-time, various MOM data about the state of each federate in the federation.  Among the useful values provided in this table are FederateTime, Lookahead, LBTS, and TSO/RO Queue lengths.  These values provide valuable insights when debugging or diagnosing integration problems. A capability has been added for JSIMS to capture the MOM Manager.Federate.Report.Alert interaction and provide a table showing each of these interactions received from the RTI.  This interaction provides useful information about exceptions that are thrown by federates.  In cases where federates don’t display any output when an exception is thrown, this allows the TC operator to provide insight into integration problems by identifying exceptional behaviours that may cause problems in the federation.With both the federate runtime statistics and federate alerts, the user will be notified of any anomalies visually on the network topology and will be directed to look at the appropriate area of the application for more details. Save and RestoreJSIMS uses TC to initiate federation saves and restores.  For TC this is simply a matter of invoking and monitoring the HLA save/restore services and providing feedback to the operator, as TC does not save any internal state at this time. Some JSIMS components, notably the Common Component Simulation Engine, need advance notice of federation save requests in order to prepare their state for save.  To support this requirement, TC will send an interaction to signal the Simulation Engine prior to requesting the federation save.4. Network Level MonitoringCrucial to the smooth running of any distributed simulation exercise is a stable and efficient Network. One of the best ways to ensure the above is to implement a mechanism that can provide feedback on the current health of the network. Network Monitoring involves the collection, and analysis of network related statistics form the possibly complex and diverse components that comprise the network. Additionally, this collected and analyzed data must be delivered to the end user in a format that’s useful.Network Monitoring is JSIMS is achieved through hlaControl™ Network Monitoring capabilities. The following is a description of these capabilities and how they all tie together to provide a general-purpose network monitoring solution. The Network Monitoring functionality in hlaControl™ was first added to satisfy a requirement for the Aviation Combined Arms Tactical Trainer (AVCATT-A) program. This capability will be integrated into the commercial hlaControl™ for use in TC. Before we proceed a few terms should be defined:SNMP – Simple Network Management Protocol is an application-layer protocol for managing TCP/IP based networks.  SNMP runs over UDP, which in turn runs over IP.  NMS – Network Management Station is a device designed to poll SNMP Agents for information.MIB – Management Information Base provides a standard representation of the SNMP Agent’s available information and where it is stored.StatisticsThe key to managing the network is understanding it. While SNMP can provide us with many different kinds of data, that data by itself would be of very little use to the end user. For example, knowing that the transmit bandwidth utilization on a port on your switch is at 60% is undoubtedly more useful, than knowing the total number of octets transmitted on that port. hlaControl™ therefore takes the raw collected data and using established formulae is able to produce statistics that are more useful to the user.Bandwidth Utilization[4]: knowing which segments or components on the network that are under or heavily utilized can help balance the traffic on segments better. Both the instantaneous transmit (tx) and receive (rx) utilization of an interface can be monitored by hlaControl™. In Addition, the user is presented with Mean and Peak Bandwidth Utilization, thus gaining some measure of historical perspective.Packet Loss[4]: hlaControl™ is able to differentiate between two different types of packet loss:Discard Rate: the number of packets discarded per second due to resource limitations. A high percentage of discarded packets are usually a good indication of a congestion problem, and that more buffer space is required.Error Rate: the number of packets discarded per second due to errors. Essentially it is packet loss due to all reasons other that resource limitations. A high Error Rate may be an indication of a bad cable or some other hardware problem.Just as with Bandwidth Utilization, the Packet Loss statistics are provided for both receive and transmit, giving the user the ability to distinguish the directional flow of data. Collision: Provided the proper MIB is implemented on the component to be monitored, hlaControl™ will return the Collision Rate and the Total number of Collisions registered on that component. By default, network devices with several interfaces (ports) such as switches will normally have this MIB implemented. Latency: The time it takes to send a packet from hlaControl™ to anyone of the remote devices and back, gives the total Round Trip Time (RTT). The latency is for each measured component is calculated every 10 seconds. Latency is a critical network characteristic to monitor, because excessive latency can rob a simulation of its performance.UDP-Statistics: Although not directly related to the JSIMS, these protocol layer statistics can prove be a valuable source of information on applications that utilize the UDP. When running DIS exercises UDP statistics can be used to make correlations with PDUs.UdpInDatagrams: gives a count of the total number of UDP datagrams received on an interface. In a DIS exercise where there is a one to one mapping between a UDP datagram and a PDU, this can be interpreted as the number of PDU received on the interface.UdpOutDatagrams: gives a count of the total number of datagrams transmitted on an interface.UdpNoPorts Rate: The number of UDP datagrams received per second on an interface for which there were no applications interested.UdpInErrors Rate: The number of UDP datagrams discarded per second due to format errors.   Operational Status:  Gives the current state of the network device. The two most important states are:Up – this network component is currently up and runningDown – this network component is currently down.System Properties: General information about the component being monitoredSysName – name of the monitored componentSysIPAddress – the components IP AddressSysUpTime – How long has the network component of this device been runningSysContact – Name of entity to contact for more information on deviceSysLocation – The location of this device ImplementationFor a component to be monitored; hlaControl™ expects two things: first the component must have a properly configured SNMP Agent running; and second the component must be reachable from hlaControl™. Today virtually all network capable components (hosts, routers, switches, etc.) come with a built in SNMP Agent. Essentially hlaControl™ acts as a NMS and issues requests to the remotely monitored device’s SNMP Agent. The Agent in turn consults it’s MIB and provides the appropriate response. The data from the responses are interpreted, and the pertinent formulae are applied, producing the statistics described earlier. As stated above, collecting and interpreting the data is only one part of the task in monitoring the device. If the information is to be of any use, it must be presented in an appropriate format, and furthermore, it must seek to alert the user of potential problems and point them in the direction of a solution. hlaControl™ employs a mechanism that uses the network topology, tables, visual indicators, and thresholds to attempt to satisfy the latter requirement.The user can set thresholds for several of the monitored statistics; in so doing, the user is registering with hlaControl to receive notifications/alerts whenever these thresholds are exceeded.  Whenever a Network Threshold is exceeded several things happen: First, in the topology, as depicted in  REF _Ref518823647 Figure 4 the link connecting the device to the LAN icon goes bold red. This first indicator, at a minimum serves to alert the user that a warning or error condition exists. Second, in the devices panel of the Network Statistics Dialog, the actual interface with the exceeded threshold(s) is highlighted with a red exclamation icon. The ability to produce this level of granularity is especially welcomed on devices such as switches, which have multiple interfaces. A tool tip on the interface shows the statistic(s) that was exceeded, and its value(s). See  REF _Ref518823615 Figure 5.Third, in the table panel of the Network Statistics Dialog the row corresponding to the interface whose threshold(s) was exceeded is highlighted in red. See  REF _Ref518823615 Figure 5.No monitor would be complete without some means of recording or logging of critical data. Logged data can be especially helpful for debugging problems and After Action Review (AAR). With network logging turned on hlaControl™ will record whenever a threshold is exceeded. It captures the current state of the interface, i.e. values of all statistics and the current time. This information can be saved in an XML or text format, for later use.With all these elements working together, hlaControl™ is able to provide a simple yet efficient means of monitoring the network. This proactive approach to network monitoring identifies potential problems; avoids costly simulation downtime; maximize efficiency and productivity to minimize bottlenecks; and capture meaningful performance data. Coupled with hlaControl™’s federation management capabilities, network monitoring enables a federation manager to correlate network problems with federation anomalies. Figure  SEQ Figure \* ARABIC 4 Network Alert on the Federation TopologyFigure  SEQ Figure \* ARABIC 5 Alert on the Network Statistics5. Future DirectionTC’s functionality is being extended to include the capabilities described in this section, which may be described in more detail in future papers. User Configurable ButtonsAdditional support is being added to TC to enhance it’s scriptable API.  Specifically, user-definable toolbars are being added to the Graphical User Interface (GUI).  Users can configure these toolbars, adding buttons that invoke scripts to perform federation-specific functions.  The HLA specification provides no support for pause or resume and the implementation of those functions is based upon federation-specific agreements. JSIMS has several such applications for customizable buttons; save, restore, and pause can all be implemented in a federation-specific manner by making use of hlaControl™’s federation-neutral command API to develop scripts associated with user defined buttons on the GUI. Two-dimensional Floor PlanDuring execution of a large-scale distributed system the location of failed simulation or network resources is often valuable information. TC is being extended will be used to view the federation network topology and resources overlaid on a two-dimensional floor plan of a simulation site. Technical After Action ReviewTC maintains a wealth of valuable federate, federation, computer, and network performance data that is valuable for technical AAR. TC is being extended to update this technical data via to RTI, so that it can be collected and correlated with simulation data for analysis purposes. 6. References[1]	System/Subsystem Design Description For the Joint Simulation System, Coordination Draft Version 17, 9 June 2001[2] U.S. Department of Defense High Level Architecture Interface Specification Version 1.3 DRAFT 9, 5 February 1998.[3]	Department of Defense Defense Modeling and Simulation Office High Level Architecture Run Time Infrastructure RTI 1.3-Next Generation Programmer’s Guide Version 3.2 Revision 3, 28 April 2000.[4]  Zeltserman, David: “A Practical Guide to SNMPv3 and Network Management”, Prentice Hall, New Jersey 1999.Author BiographiesPAUL PERKINSON received his BS in Computer Science from George Mason University.  He has nine years of experience in software and systems engineering, specializing in large-scale distributed Modeling and Simulation (M&S). The past six and a half years he has been employed at Virtual Technology Corporation (VTC), most recently as the Vice President of Product Development responsible for the development of VTC’s commercial simulation tool suite, Virtual Impact™ and JSIMS’ CCHLA tools, TC and FCM, for the National Air and Space Model (NASM) Program. He has worked on such large-scale distributed simulations as the Joint Simulation System (JSIMS), Joint Training Confederation (JTC), Joint Precision Strike Demonstration (JPSD), Synthetic Theatre of War (STOW), and numerous others through the Defense Modeling and Simulation Office (DMSO) Cadre federation outreach program.   STEPHEN BERGLIE is a senior software engineer at VTC.  He is VTC’s software development and integration lead for JSIMS’ CCHLA tools, TC and FCM, for the National Air and Space Model (NASM) Program. He has also provided consultation on HLA federate and federation architecture for the Aerial Common Sensor (ACS) Simulation Based Acquisition (SBA) Program. NEVILLE THOMAS completed his Masters degree in Computer Science at the University of North Texas in December of 1999. He has been employed with VTC as a Software Engineer since January of 2000. Mr. Thomas’s work includes the design and implementation of a Network Monitoring Solution for the Aviation Combined Arms Tactical Trainer (AVCATT-A), and enhancements, and integration support, for the hlaControl™ commercial product. At present, Mr. Thomas helps drive the design and development of VTC’s Federation Application Integration Infrastructure Tool (FAII).