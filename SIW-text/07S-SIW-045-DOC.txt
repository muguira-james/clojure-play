Using SysML to Create a Simulation Conceptual Model of a Basic ISR Survivability Test ThreadJames GlobeL3 Integrated Systems10001 Jack Finney Blvd.Greenville, TX 75402903-457-5130 HYPERLINK "mailto:james.s.globe@L-3com.com" james.s.globe@L-3com.comKeywords: Conceptual Modeling, SysML, Test and Evaluation, Model Driven ArchitectureABSTRACT: Large-scale distributed Joint Simulation exercises that include friendly, threat, allied, and neutral forces are increasingly complex to plan and execute due to dynamic exercise objectives, unknown model fidelity, undocumented simulation software capabilities, and daunting time management requirements,  increasing number of participating network nodes, integration of legacy and next generation simulations.  Sound software and systems engineering practices promote the ideas of model driven architecture (MDA), re-use, interoperability and model fidelity composability. Attempts to follow these practices in the simulation community have been hampered by the lack of a common language or standard to represent the problem and solution spaces.  Conceptually modeling a simulation exercise enables simulation planners and participants to visualize the proposed exercise requirements (objectives) during the planning stage.  The Unified Modeling Language (UML) is a standard for modeling software.  SysML builds on UML to enable System (simulation) engineers to model systems, models, and interfaces with varying degrees fidelity.  This paper takes a common simulation exercise's test case, like survivability of a UAV, and makes use of SysML artifacts to conceptually model the test thread(s) based on a mock simulation exercise requirements and objectives.  We demonstrate how you can utilize SysML diagrams to model a NLOS-C and UAV entities, its articulated parts, sensor, and weapon system with varying degrees of fidelity.  Our mock Simulation exercise objectives require that we support both HLA and DIS protocols.  In addition, we provide high level sequence diagrams that depict the time-based entrance and exit of simulation participants during simulation execution.  We utilize SysML to provide a common representation for both the simulation exercise requirements and proposed simulation test threads. IntroductionTo conceptually model a complex system’s functionality, operations, modes/states, execution/deployment path, and interfaces required to conduct a large-scale distributed simulation exercise, you need to utilize a modeling language that will enable you to describe, in detail, separation of responsibility, and decomposition of functionality/objectives; facilitate impact analysis of mission objectives and support incremental design, implementation, and integration of simulation components. Large complex simulation exercises that involve several contractors, joint Armed Services, and DoD agencies require constant inputs from integrators, developers, vendors, testers, project managers, and Subject-Matter-Experts (SME)s before the simulation exercise starts.  Therefore, you need a modeling language that describes relevant views of the systems to all stakeholders.  Traditionally, UML is used to model software design using Object-oriented Analysis and Design (OOAD) techniques. UML target audience is Software Engineers.  SysML target audience is both System and software engineers, which include modeling hardware and software components.  The Systems Modeling Language (SysML), which is an extension of UML, is used to model system design using OOAD techniques.  SysML supports full System Engineering Life Cycle (SELC) activities such as:  requirements specification, design, and implementation of custom components, integration, verification, and validation of the system that include hardware, software, data, personnel, procedures, and facilities.  SysML is a methodology that is vendor-tool independent and promotes model-driven system architecture derived from OOAD techniques and iterative processes.  SysML is the result of a joint initiative of OMG, Industry, and the International Council on Systems Engineering (INCOSE). SysML is a profile extending the UML 2.0 Superstructure Specification and provides a standard modeling language to support the specification, analysis, design, verification and validation of a broad range of complex systems which are not necessarily software based.  SysML is based on the minimal subset of UML that satisfies the needs of systems engineers, and adapts UML only when it is necessary. One of the major improvements SysML brings to UML is the support for representing requirements and relating them to the model of a system, the actual design and the test procedures. However, UML does not address how to trace the requirements of a system from informal capabilities down to the individual design elements and test cases, although this activity is crucial. Use Cases help build up a sound understanding of the expected behavior of the system and validate the proposed architecture. However requirements are often only traced to the use cases but not to the design. Adding design rationale information by capturing the reasons for design decisions made during the creation of development and/or evaluation process of Commercial-Of-The-Shelf (COTS) and Government-of-the-Shelf (GOTS) simulation components by linking them to the requirements help simulation engineers determine if components meet the objectives of a mission exercise and determine the impact of a requirement change. SysML therefore introduces the requirement diagram and defines several kinds of relationships for improving the requirement traceability. The purpose is not to replace the available requirements management commercial tools, however, to provide a standard way of linking the requirements to the design and the test suite within UML. Requirements can be decomposed by means of the containment relationship in a similar way to that for class diagrams. The trace dependency relates derived requirements to system requirements and/or top level capabilities. The system design and the requirements are linked by a satisfaction dependency. Finally, the verification dependency associates a requirement with the test case used to verify this requirement. Requirement diagrams contribute to the rigorous transfer of specifications and related information among tools used by systems, software and hardware engineers.  SysML is supported by commercial industry leaders such as Boeing, BAE Systems, Raytheon, Lockheed Martin, and others.  Also, SysML is supported by Academia from major universities world-wide and tool vendors such as Artisan, IBM, Telelogic, I-Logix, and others.  The relationship between UML and SysML is depicted in figure 1 below.    Figure  SEQ Figure \* ARABIC 1 UML2 Relationship to SysMLSysML introduces a requirement diagram, parametric diagram and extensions to block, internal block, and activity diagrams already found in UML.  The following diagram depicts the SysML Diagram Taxonomy.Figure  SEQ Figure \* ARABIC 2 SysML Diagram TaxonomySysML enhances the UML diagrams used to represent the structural aspects of a system. It introduces the concept of assembly, a stereotyped class which describes a system as a structure of interconnected parts. SysML MDA approach provides a domain neutral modeling element that can be used to represent the structure of any kind of system, regardless of the nature of its components. The target system components can be hardware or software based as well as virtual, constructive, or live simulation models with varying levels of fidelity. An assembly model, the SysML version of the composite structure diagram, shows the interconnection of the parts of a system and supports information flows between components. The concept of allocation in SysML is a more abstract form of deployment than in UML. It is defined as a design time relationship between model elements which maps a source into a target. An allocation provides the generalized capability to allocate one model element to another. For example, it can be used to link requirements and design elements, to map a behavior into the structure implementing it, or to associate a piece of software and the hardware deploying it. As a consequence, SysML abandons the use of the communication diagram. The SysML support for flows between assemblies is meant to provide an equivalent and domain-neutral modeling capability. The same argument applies to the deployment diagram. It is considered too specific to the software domain as it is limited to the deployment of software artifacts onto hardware components, while the SysML allocation provides a more flexible deployment mechanism.Finally, SysML provides several enhancements to activity diagrams. In particular the control of execution is extended such that running actions can be disabled. In UML 2 the control is limited to the determination of the moment when actions start. In SysML a behavior may not stop itself. Instead it can run until it is terminated externally. For this purpose SysML introduces control operators, i.e., behaviors which produce an output controlling the execution of other actions.The Package diagram, which is considered a standard structured diagram, is used to organize other SysML diagrams, system artifacts, notes, activities, models, etc…into groups that logically live within the same name space.  That is models that live in the same package should have a common objective or area of responsibility such that the intra-relationship between models is highly cohesive. The relationship between packages should be loosely coupled such that there are no co-dependencies.  Also, models can be organized by System hierarchy (e.g., enterprise, system, component), by domain (e.g., requirements, use cases, behavior), or usage viewpoints to augment model organization.   The package diagram for the mock simulation exercise is depicted in figure 3 below.Figure  SEQ Figure \* ARABIC 3 System Package DiagramThe packages modeled in the diagram above represent the top level system services.  The diagram indicates that the hardware and software components in the Mock System Exercise (all components) depend on Infrastructure Services, Exercise Setup Services, and Site Management.  The other system services After Action Review Services, Common Terrain Services, and Computer Generated Forces Services, Data Collection Services, Exercise Management Services, Exercise Setup, Exercise View Services, Site Management, and Synthetic Environment Services dependencies between each other are depicted in the diagram below.  Figure  SEQ Figure \* ARABIC 4 Simulation Services Package DiagramEach package and sub-package will contain related software and hardware components such as OOS for CGF, PVD for 2D/3D display, DIS2HLA Gateway, etc.  To demonstrate how you decompose a system level package into its lower level components we use the Infrastructure package in the diagram below.  The diagram shows the first level of details for the infrastructure package.  The next level could show actual third-party vendor software and hardware components selected through an evaluation process.Figure  SEQ Figure \* ARABIC 5 Infrastructure Decomposition DiagramRemember, in this paper the term components refer to COTS, GOTS, developed software, and hardware.  For the mock operational test thread outlined in this paper, we utilize block, requirements, and sequence diagrams to conceptual model the simulation exercise and higher fidelity components.  Next, the Mock Operational Use Case is outlined and we enumerate the system level requirements. Mock Operational Use Case: Joint Forces C2 Global Hawk UAV Recon and surveillance confirms threat location, resources, and general personnel on the ground.  However, confirmation of High Value Target (HVT) is required before joint forces can engage.  CAB is ordered to launch a Class III UAV for a 72 hours Recon and surveillance mission to identify and confirm exact location of HVT within the threat camp site.  Once the HVT is confirmed, Bravo Platoon is order to engage HVT with a NLOS-C.Objective(s):  Determine survivability of Class III UAV loitering over enemy territory to locate, confirm, and engage HVT. Conduct Battle Damage Assessment (BDA), and assess the need for re-attack.Exercise/Mission Scenario:•	A Simulated Combined Arms Battalion (CAB) Recon & Surveillance (R&SV) engaging with both Infrared (IR) tracking and visual observation confirms an enemy 2S-19 howitzer hiding in the vicinity of objective target/Sewell. Joint Forces C2 orders the UAV Class IV to confirm enemy 2S-19 howitzer location..  •	CAB orders the launch of an ERMP Warrior UAV to confirm HVT exact coordinates.  Since this HVT is constantly moving, the mission is very time-sensitive.  Joint Command suspects that they only have 36 hours before the HVT will change locations.  •	Once the Warrior UAV identifies HVT, high resolution images are transmitted to the CO CAB C2V and PLT HQ C2V via the WNW Data Link and populated throughout the force via the Common Relevant Operating Picture (CROP).•	The PLT HQ C2V conducts a target assessment and transmits the target identification and location to the NLOS-C Battery (already in range) and orders it to engage.  Also, the CO C2V authorizes direct liaison between the NLOS-C Battery and CO CAB R&SV to assess BDA and determine the need for re-attack.•	Data is sent to the Platoon HQ C2V that the CO CAB NLOS-C is in firing range.  The fire command is then sent from the PLT C2V that the CO CAB NLOS-C is in firing range.  The fire command is then sent from the PLT C2V CAB to CO CAB NLOS-C to accomplish networked fires on high-payoff target.•	The CO CAB NLOS-C engages the enemy howitzers.  The NLOS-C transmits a rounds complete report through the CO CAB C2V to the PLT HQ C2V.•	The PLT C2V requests CAB C2V to provide a BDA report.•	CO CAB C2V orders the R&SV to provide the BDA.  The R&SV uses electrical optical (EO) stare mode to verify BDA.•	The R&SV transmits imagery via the WNW Data Link to the CO CAB C2V and PLT C2V.  The PLT C2V determines that a re-attack is required.•	The PLT C2V transmits reengagement commands to the ERMP UAV to engage HVT directly.    The ERMP arms its Joint Common missile and Mk-44 30mm, then engages target.  The R&SV reports BDA of the destroyed target through the CO CAB C2V to the PLT C2V.•	The PLT C2V transmits end of missionto both CO CAB C2V, ERMP Warrior UAV, and NLOS-C.Scenario Development Life Cycle (SDLC)In order to conceptually model this mission scenario, using SysML, a phased approach in developing the requirements and design of both high-level and detailed conceptual artifacts.  The phases of our SDLC include: (1) Planning and Requirements Phase, (2) Analysis and Conceptual Design Phase, (3) Elaboration Phase, (4) Development and Integration Phase, (5) Test and Evaluation, (6) Implementation and Deployment Phase.  In practice, each phase contain one or more iterations.Planning and Requirements PhaseThe planning phase for the simulation engineers is when we determine how to conduct exercise setup, management, bird’s eye commander’s view of the battlespace, and command and control of all blue forces simulation entities.  In addition, we need to determine how to represent the battlespace, communication interfaces and simulation exercise’s infrastructure. Moreover, we need to determine the evaluation criteria for COTS/GOTS that will get integrated and required level of fidelity to obtain valid measures of performance and effectiveness during the simulation exercise after action review.  The requirements for this mock exercise break out into the following (this is only a snapshot of key requirements…actual requirements would number as little as 100 to well over 300 per package).    The following Use Case diagram below represents the mock operational use case’s mission scenario steps.Figure  SEQ Figure \* ARABIC 6 Infrastructure Decomposition DiagramFrom the Use Case diagram, you organize your system level requirements and high level sequence diagrams.  Once the high level requirements have been establish, we can model them using Requirements diagrams.The following high level requirements were developed from the objectives and exercise scenario of the mock simulation exercise.The system shall provide a mechanism to provide individual and group training in Live, Virtual, and Constructive Environment.The system shall provide a mechanism to provide Tactical operations, Mission rehearsal, and Urban Operations training.The system shall integrate with OneSAF Objective System (OOS) and NGTS simulations.The system shall provide a mechanism to simulate blue, red, and neutral aggregated forces.The system shall provide a static and dynamic terrain database generation capability.The system shall provide Atmospheric Effects.The system shall provide Chemical, Biological, Radiological, Nuclear, and High Explosive Environment (CBRNE) capability.The system shall provide an integrated high fidelity virtual platform simulation of NLOS-C.The system shall provide an integrated high fidelity virtual platform simulation of Class III UAV.The system shall provide integrated components to perform Exercise Setup.The system shall provide integrated components to perform Battlespace Representation.The system shall support initialize, start, pause, resume, and stop modes.The system shall provide integrated Database Centers to perform Data Collection during simulation execution.The system shall provide integrated components to perform Plain View Display (2D) and 3D Exercise View of the synthetic battlespace.The system shall provide a mechanism to communicate with participating components of a very-wide-area network.The system shall provide integrated components to perform After Action Review capabilities.The system shall provide integrated components to perform Exercise Management.The system shall provide integrated components to provide infrastructure services.All virtual and constructive models shall communicate using both HLA and DIS protocols.The system services shall be Net-centric enabled.The requirements diagram that maps to requirements are depicted in the diagram below.Figure  SEQ Figure \* ARABIC 7 System Requirements DiagramThe requirements diagram above details the system requirements.  The actual shall statement of each requirement is a part of the description of the requirement object.  Most of the modeling tools that support SysML will export the “shall-statements” to a text document, excel spreadsheet, or provide a plug-in to your favorite requirements management system such as Telelogic’s DOORS.  To model derived requirements SysML provide stereotypes that let you relate top-level requirements to derived ones or test cases.  Due to space limitations we do not show all the derived requirements that would be generated from these system requirements, however, the diagram below shows the derived requirements for our two platform simulations.Figure  SEQ Figure \* ARABIC 8 NLOS-C Platform Simulation Derived Requirements DiagramFigure  SEQ Figure \* ARABIC 9 Class III Platform Simulation Derived Requirements DiagramIn general, when graphically modeling requirements visible space can become an issue.  Also, printing the requirements diagram out can be a challenge.  At this point, there is no real advantage to modeling requirements versus traditional requirements document or utilizing your favorite requirements management tool to import the text version of the requirements.Analysis and Conceptual Design PhaseDuring the analysis and conceptual design phase we will determine which existing legacy simulation software we can reuse by integrating with our simulation services, which algorithms we can reuse depending on the language they were implemented with (this is why we have a plug0in framework specified), which nodes will participate in the simulation exercise, determine our measure of performance for the higher fidelity UAV model.Based on our analysis an integrated COTS-based solution for Exercise Setup, Management, and Command & Control services are required.  These tool interfaces with both HLA and DIS-based simulations.  To provide semi-automated aggregated forces we will utilize an existing GOTS product such as OneSAF Objective System (OOS).  In addition, for the all Battlespace Representation, Exercise View, After Action and Data Collection Services we will utilize existing COTS/GOTS vendor simulations except for our higher fidelity NLOS-C and Class III UAV platform simulators.  These customize components will be developed based on the derived require described during the elaboration phase.Conceptual Architecture for the Mock distributed exercise is captured in the figure below. EMBED Visio.Drawing.11  Figure  SEQ Figure \* ARABIC 10 Mock Exercise Conceptual ModelElaboration PhaseDuring the elaboration phase we derived our product level or detailed requirements for key simulation low, medium, and high fidelity models such as the required NLOS-C and Class III UAV platform simulators.  The details of generator derived requirements for both the NLOS-C and UAV high fidelity models are omitted; however, the structured diagrams that represent the detailed models are shown below.Figure  SEQ Figure \* ARABIC 11 NLOS-C Platform Simulator Model DiagramFigure  SEQ Figure \* ARABIC 12 Class III UAV Platform Simulator Model DiagramA major benefit the SysML extensions provide is requirements Traceability back to the design as seen in the figure above.  Once you have defined the attributes and operations for your high fidelity platform models, you can have the modeling tool generate code snippets outlining the details of your derived requirements associated with the model.  These detailed requirements enable us to validate the platforms effectiveness against the mission objectives and performance on the synthetic battlefield during simulated combat conditions. In addition to the detailed model diagram, SysML provides constructs to model internal details as seen in the sample Internal block diagram below.Figure  SEQ Figure \* ARABIC 13  Sample Internal Block DiagramSysML offers a parametric diagram that enables you to model the details of one or more complex algorithm associated with you model.  The following diagram depicts a typical parametric model.Figure  SEQ Figure \* ARABIC 14  Sample Parametric DiagramIn order for you to accomplish some level of a MDA, you will need to provide your modeling tool with enough details in your model (class), internal block (sub-class), and parametric diagrams for valid code snippets to get generated.Test and Evaluation PhaseTo trace test cases back to requirements, you can create a requirements diagram and associated each high level and derived requirement with one or more test cases.  An example is shown in the figure below.  It should be noted that with the average number of requirements created for any system of significant complexity is in the hundreds that modeling each requirement is time consuming space intensive.  A visually managing and printing requirements diagram is an unforeseen challenge. Figure  SEQ Figure \* ARABIC 15  Requirements Traceability DiagramSummarySysML strength in conceptual modeling large distributed simulation exercise is it provides constructs that let you visually model and trace complex platform models, algorithms, and software and hardware components. Moreover, SysML provides requirements traceability to derived requirements, test cases, and class/structure diagrams.  SysML supports full System Engineering Life Cycle (SELC) activities such as:  requirements specification, design, and implementation of custom components, integration, verification, and validation of the system that include hardware, software, data, personnel, procedures, and facilities.  SysML is a methodology that is vendor-tool independent and promotes model-driven system architecture derived from OOAD techniques and iterative processes.    If enough details are provided when creating your class and parametric diagrams, your modeling tool can generate code snippets that trace to requirements and enable your simulations to be model-driven.  SysML is supported by commercial industry leaders such as Boeing, BAE Systems, Raytheon, Lockheed Martin, and others.  Also, SysML is supported by Academia from major universities world-wide and tool vendors such as Artisan, IBM, Telelogic, and I-Logix.References[1]	Friedenthal, Sanford; Moore, Alan; Steiner, Rick: “OMG Systems Modeling Language” Tutorial, July 2006.[2]	Hause, Matthew; Thom, Francis: “Modeling High Level Requirements in UML/SysML”, White Paper, INCOSE Symposium 2005.[3] Kobryn C. “UML 3 and the future of Modeling”, Journal of Software and System Modeling, Vol 3, number 1 pp 4-8, 2004.[4]	SysML Partners: “Systems Modeling Language (SysML) Specification”, Version FAS-06-05-04.Author BiographiesJAMES GLOBE is an Engineering Product Manager and Sr. Principal Software Engineer/Architect at the L-3/Integrated Systems, Greenville, TX.  He provides full life cycle support for Rivot Joint Mission Training, a distributed mission support ISR trainer.  Mr. Globe has over 15 years experience as a software and systems architect. 