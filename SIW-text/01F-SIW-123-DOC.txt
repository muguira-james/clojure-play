Improving Interest Management Using Dynamic ThresholdsKeith GarfieldInstitute for Simulation and TrainingUniversity of Central Florida3280 Progress DriveOrlando, FL  32826- 0544407-882-1342Dr. Robert FranceschiniCollege of Electrical Engineering and Computer ScienceUniversity of Central FloridaOrlando, FL  32816407-823-1405ABSTRACT: This paper proposes an HLA compliant protocol for using dynamic thresholds to enhance interest management techniques.  The method is first discussed in the context of dead reckoning thresholds and then shown to be applicable to relevance filtering and multicasting.  Interest management tools are designed to reduce the required communication bandwidth between the physically separate components of a distributed simulation.  Typically, static thresholds or properties are used to trigger publication of and distribution of simulation entity data.  Using a static threshold results in more communication bandwidth being used than is actually required to maintain correctness in the simulation.  This paper presents a method to allow dynamic thresholds in an HLA compliant simulation.  The value of the threshold meets the requirements of the most restrictive federate involved in the simulation.  Other federates, using relevance filtering techniques and HLA data management services, may subscribe to an error level suitable to their unique needs.1. IntroductionInterest management is a collective term for several techniques used in distributed simulations whose goal is to reduce inter-process communication requirements by allowing processes to restrict information being routed to them.  This is an important area of concern within the area of distributed simulation, as distributed simulations are typically communication-bound as opposed to computation-bound [5].  In terms of an HLA environment inter-process communication corresponds to inter-federate communication, and there are several well understood techniques proposed and implemented for reducing communication bandwidth requirements in HLA compliant simulations.The techniques of dead reckoning and relevance filtering are well known as methods by which inter-federate communication can be reduced [2, 11].  Typical implementations are not optimal in the sense that the threshold values used to trigger communication are statically established prior to the execution of the simulation.  The amount of communication initiated by these static techniques is not tied closely to the needs of the simulation at any given time.  Because correctness of the simulation cannot be sacrificed, the amount of communication occurring throughout the simulation must be greater than that actually required [4].  We believe that allowing threshold values to change dynamically in response to the changing needs of the simulation will pay off in terms of reduced bandwidth requirements.  The approaches we use to associate bandwidth with program correctness are adapted from the lazy model of program computation. Lazy computation requires that computations occur only when they are known to contribute to a program result [7].  We can use the techniques of lazy computation to develop a test to minimize bandwidth requirements by applying the test of lazy computation to communication within a simulation.  By requiring communication to be lazy – that is by allowing communication to occur only when it is required to maintain correctness of the simulation - we can assure ourselves that the bandwidth requirement for a federation is truly minimal.  By allowing the laziness tests to affect threshold values during the course of a simulation, we ensure that bandwidth requirements remain optimal throughout the length of a given simulation execution.  The goal of this paper is to present interest management techniques that tie communication closely to simulation correctness by approximating a lazy communication model.  We present two methods that allow communication to occur only when required to maintain simulation correctness.   The method of K-region publication allows for a federation publishing updates to publish to multiple regions.  Subscribing federates may then subscribe to a subset of the regions based on their unique correctness requirements.  The dynamic error threshold method presented allows for variation of a dead reckoning error level in a manner reminiscent of the TCP/IP protocol. 2. BackgroundIn this section we present background material necessary for the discussion.  Terms will be defined as used in this paper.  2.1 Distributed Simulations and the High Level Architecture (HLA)In this section we present the basic terminology and background information required for the discussion of the use of dynamic dead reckoning thresholds within an HLA compliant simulation.  We rely heavily on [13] and  [12] for this background description.  An HLA compliant simulation is composed of a group of federates acting on a single federation-level object model, fom, and communicating via a single Run-Time Infrastructure, RTI.  When these entities act together to achieve some specific common purpose they form a federation.The state of simulated objects is represented by values assigned to each of a list of attributes associated with the object.  The instances of simulated objects must reside in the federations (as opposed to the RTI) and are represented by attributes.  Exactly one federate may own each attribute of each simulated object at any given time.  This owning federate is the only federate that may publish values for the attribute, and is responsible for publishing these updates as required to maintain correctness in the simulation overall.  All interactions between federates must be implemented as message passed via the RTI.  The HLA provides data distribution services to support efficient message routing.  Distributed simulations require efficient message routing in the sense of maintaining acceptable latencies and bandwidth requirements [9].  Ideally, these efficiencies are scalable, meaning that they can be maintained as simulations grow in both the number of objects represented and processors involved.Descriptions of the HLA data management tools are found in [6, 12, 3, 9, 10] and are summarized here.  The RTI is a logically centralized yet physically distributed agent that distributes messages between federates [9].  Federates announce to the RTI which attribute updates they will provide through a process known as publication, and which attribute values should be forwarded to them by a process known as subscription.  Publication and subscription may be based on the attribute class or value.  This is done using n-dimensional conceptual routing spaces.  Owning federates define update regions in which updates will be placed while subscribing federates define subscription regions from which they will accept values.  Communication between a publishing and subscribing federate occurs when their update and subscription regions overlap.  2.2 Lazy Computation and Lazy CommunicationLazy computation is a program evaluation method that requires that a computation not be performed until it is known that the computation will contribute to the overall program result [7].  Lazy computation is also known as demand computation because in practice a specific computation is notified that its result is required when another process or computation demands the result.  In essence each computation must pass a test before its evaluation is allowed: its result must be required by some other computation whose result, in turn, must be required to achieve an overall program result.  The lazy model of program execution has traditionally been used in conjunction with functional programming; recently, however, methods have been developed to combine lazy evaluation methods with the imperative programming model common to distributed simulations [7].We can apply the test of lazy computation to communication within a simulation.  By requiring communication to be lazy, we allow communication to occur only when required to maintain correctness of the simulation.  This test provides a yardstick by which we can assure ourselves that the bandwidth requirement for a federation is truly minimal.  This approach allows simulation developers and users to approach bandwidth usage that can be tied closely to the correctness requirements of a simulation. The HLA architecture does not preclude an application of lazy communication within a distributed simulation.  Although the HLA provides a method by which subscribing federates may demand an update for an attribute they are interested in, there are no known simulations implemented that rely solely on this mechanism for inter-federate communication.2.3 Dead ReckoningThis section outlines the notion of dead reckoning, which is a technique that allows an owning federate to significantly reduce the number of attribute value updates it is required to publish.  In a dead reckoning system, the owning federate maintains accurate attribute values (effectively) continuously while publishing updates intermittently.  Subscribing federates use less accurate dead reckoning models to estimate attribute values in between updates.  The dead reckoning technique requires two models for each simulated attribute: the simulation model, which provides accurate attribute values, and a dead reckoning model, which approximates the simulation model with much lower computational cost.  Typical algorithms use a second order approximation scheme as this has shown to reduce the bulk of attribute updates without incurring large computational overhead [8].  The owning federate of each attribute operates both the simulation model and the dead reckoning model.  Comparisons are made between the values provided by each and the error compared against an error threshold.  If the discrepancy between the simulation model and the dead reckoning model are larger than the allowed error threshold then the owning federate publishes the value provided by the simulation model.  All subscribing federates maintain a dead reckoning model.  They use the dead reckoning model to estimate attribute values between updates and then correct any discrepancies when an update is received. This slight increase in computational cost at the subscribing federate is made up for with drastic reductions in bandwidth requirements.  A method related to dead reckoning, called quantization,  is presented by Zeigler [14].  Quantization assigns a known incremental value for the attribute and differs from dead reckoning in that attribute values are not published when some error threshold is achieved.  Instead, notices to increment or decrement an attribute value are sent to subscribing federates when the owning federate senses that the simulation model results will differ from the last published value by the incremental amount.  Dead reckoning (and quantization) as currently practiced is not a lazy technique, though it has elements of laziness in it.  The goal behind dead reckoning is to require the owning federate to publish updates only when required to maintain correctness in the simulation.  However, as practiced, the error threshold level used to trigger updates is statically assigned prior to the start of the simulation, and is therefore not closely tied to the needs of the simulation at any time in its execution.  The maintain correctness, the threshold used must be conservatively small and therefore requires more updates to be published than required.   Dead reckoning is not lazy as the owning federate publishes attribute updates without receiving an explicit request from any subscribing federate.  Dead reckoning does not achieve its theoretical minimal bandwidth requirements due to the static nature of error thresholds used and because all subscribing federates receive attribute updates regardless of their unique correctness requirements.  2.4 Relevance FilteringRelevance filtering is another method intended to reduce bandwidth requirements in a distributed simulation.  Whereas dead reckoning attempts to determine what degree of accuracy is required of a given attribute, relevance filtering attempts to determine whether a federate is even interested in the attribute.  Therefore, dead reckoning attempts to reduce the number of messages published by the owning federate, relevance filtering attempts to reduce the number of federates subscribing to the attribute updates.  The basic principle behind relevance filtering is that federates should only subscribe to attributes relevant to their portion of the overall simulation.  In practice it may be difficult to determine what information is relevant to a given simulated entity, so relevance filtering is typically implemented using a heuristic known as area based relevance filtering.  Area based relevance filtering assumes that the most relevant entities to keep track of are relatively near the entity in question.  That is, entities near a simulated tank are assumed to have more relevance to it than entities far away.  Area based relevance filtering can be implemented simply by defining a circular area of interest (AOI) around a simulated entity and requiring that entity to subscribe to attribute updates only for other entities within the circle.  Relevance filtering approaches laziness in the sense that federates chose to subscribe to attributes required for their execution and may unsubscribe from attributes no longer required for their correct execution.  However, subscribing federates do not demand updates under current relevance filtering techniques.  Nor can the subscribing federates request updates corresponding to an error tolerance based on their correctness requirements.  All subscribing federates are forced to receive updates when the owning federate publishes an update, and therefore all will maintain a level of error approximating the owning federate’s error threshold regardless of their individual error tolerances.3 A Proposed Protocol: K-Update Regions with Dynamic ThresholdsThis section details a proposed HLA compliant protocol to allow dynamic variation of threshold levels in dead reckoning.  The technique makes use of the HLA update-subscription regions to allow a federate to publish updates for a single attribute in multiple regions.  The technique also allows error threshold levels to vary dynamically.  The goal of the technique is to tie inter-federate communication closely to simulation correctness.  This is Figure 3.1achieved by allowing subscribing federates to determine what level of error is acceptable to them on an individual basis while allowing publishing federates to publish only when required by the most restrictive federate.We consider a simulation, S, composed of a set n federates, designated S = {F1, F2, …, Fn}.  We consider a single attribute, a, whose owning federate is designated Fa.  Let Sa be the set of federates subscribing to updates of attribute a, and Fsa be an arbitrary member of Sa.  That is Sa = {Fsa | Fsa is in S and subscribes to a region overlapping an update region designated by Fa for a}.  Let Fa operate a simulation model and a dead reckoning model for attribute a.  The error perceived by the ith federate at any time is Ei.  Thus, the perceived error seen by the owning federate is Ea, and each subscribing federate, Fsa, perceives error Esa.  We define Ethresh to be the error threshold that requires an update to be published.  That is, if at any time Ea >= Ethresh, then Fa will publish an update to the RTI.  We also define a maximum allowable error, Emax, whose value is assumed to be large, arbitrary, and statically defined.  Each subscribing federate in S is free to determine a unique correctness criteria, C, with respect to attribute a.  Each subscribing federate is able to evaluate this criteria dynamically.  Thus, the ith subscribing federate maintains correctness criteria Ci and compares it against the perceived error, Ei, each time an update is received.  The owning federate of attribute a is meeting simulation correctness criteria as long as Ei < Ci for each subscribing federate.  Note that there will be some subscribing federate who has a minimum value for C.  This federate is termed the most restrictive federate and its value for C is referred to as Ccrit.Ethresh is dynamic and is maintained to meet the correctness criteria of the most restrictive Fsa in Sa.  To accomplish this we need a mechanism for the value of Ethresh to be modified arbitrarily by Fa and we need a feedback mechanism by which Fcrit can notify Fa if Ethresh is too large.  The behavior of the participating federates under the protocol is as follows (see Figure 3.1).  The owning federate operates a simulation model and dead reckoning model.  The owning federate also establishes K = floor(Emax/Ethresh) regions for the publication of updates.  The owning federate publishes each update to a successive update region in a round robin fashion.  The owning federate must publish the value of K and Ethresh along with the attribute value.  The owning federateFigure 3.2periodically increments the error threshold value by some incremental value, d.Subscribing federates are not required to subscribe to all K update regions, but can determine which of them they require for their own correctness criteria.  Subscribing federates can establish a periodicity of subscription, p, so that the ith federate requires pi  = floor(Ci / Ei).  Thus each subscribing federate can approximate a perceived dead reckoning error Ei = (pi x Ethresh).  If at any time a subscribing federate perceives an error greater than its correctness criteria , Ei > Ci, then it can take one of two corrective actions.  If pi is greater than 1, then it can reduce pi.  The federate then subscribes to more update regions for the attribute, thus receiving more updates and reducing its perceived error.  If pi is already at 1, meaning the federate is subscribed to all K update regions, then the federate can request an immediate update for the attribute via the RTI.  This action has two effects.  An update is made immediately by the owning federate, and the owning federate reduces its Ethresh by some factor.  This behavioral description is shown in Figure 3.23.1  Uses in Dead ReckoningThe application of K-regions and dynamic thresholds does not require major changes to the manner in which dead reckoning is implemented.  But the ability of the owning federate to adapt the Ethresh upon which it bases publication of updates allows for a flexibility not seen in current implementations.  The technique is also applicable to the quantization method, as long as the current value of the increment is made available to subscribing federates. 3.2 Uses in Relevance FilteringCurrent relevance filtering techniques are somewhat binary.  Subscribing federates are either completely interested or completely uninterested in attributes.  The use of K-regions as an update policy allows for federates to have use of (K+1) levels of interest, with the lowest level of interest corresponding to no subscription at all.  This could be implemented using (K+1) concentric AOI’s.  Or, the correctness criteria used for dead reckoning could provide a de facto method of relevance filtering with no additional effort required.3.3 Performance EstimatesAlthough no experiments have been performed at this date we can provide scenarios in which we believe the use of dynamic thresholds and k-region update policy would benefit.  Consider a federation simulating air-to-air combat.  It is known that air-to-air missiles have a smaller correctness criteria than aircraft [1].  The use of a static error threshold requires that the simulation maintain this strict level of correctness even though the time of flight of an air-to-air missile is short compared to the time transpiring throughout the simulation.  In addition, all aircraft must maintain this strict requirement even though they may never be targeted by a missile during the simulation.  Clearly, the publication criteria is not closely tied to simulation correctness.  The use of the proposed protocol allows for the federations simulating aircraft to use error thresholds suitable for other aircraft federates.  When a missile is fired, the federation representing it becomes the critical federation for the target aircraft.  The federation simulating the target aircraft, and only this federation, adjusts its error threshold downward.  While the missile federate may subscribe to each update, other aircraft have the ability to subscribe at a rate determined by their unique correctness criteria.  Assuming the aircraft survives the attack, it can eventually readjust its error threshold to a level suitable for other aircraft federates.   Thus, the publication and subscription rates are tied consistently to simulation correctness criteria. The performance gain realized from the reduction in communication must be weighed against the overhead of managing the changes to publication and subscription regions.  10 [10] has presented algorithms for HLA data management involving potentially large numbers of regions and has determined that changes to the subscription and publication regions can be made in a timely fashion, spurious connections can occur when dealing with large numbers of regions.4.0 Future WorkExperiments need to be performed to determine the benefits of the proposed protocol and the overhead cost of the changing K-regions and subscriptions to the RTI.  In addition, the optimum values of the factors used to increment and reduce the error threshold at the owning federate must be determined.  Intuitively, the correct values would tie the inter-federate communication closely to program correctness (thereby maintaining bandwidth near the minimum required) while not requiring many changes in the number of update regions for any attribute. 5.0 SummaryThis paper presented interest management techniques that tie communication closely to simulation correctness.  We presented two methods that approximate lazy communication by allowing inter-federate to occur based on subscribing federate actual needs, rather than publishing federates predictions of need.  The method of K-region publication allows for a federation publishing updates to publish to multiple regions.  Subscribing federates may then subscribe to a subset of the regions based on their unique correctness requirements.  The dynamic error threshold method presented allows for variation of a dead reckoning error level in a manner reminiscent of the TCP/IP protocol.The application of K-regions and dynamic thresholds does not require major changes to the manner in which dead reckoning is implemented.  But the ability of the owning federate to adapt the error threshold upon which it bases publication of updates allows for flexibility not seen in current implementations.  Also, the ability of subscribing federates to subscribe to a subset of updates allows them to tailor the error they experience to their tolerance for error.Current relevance filtering techniques are somewhat binary.  Subscribing federates are either completely interested or completely uninterested in attributes.  The use of K-regions as an update policy allows for federates to have use of (K+1) levels of interest, with the lowest level of interest corresponding to no subscription at all.  This could be implemented using (K+1) concentric AOI’s.  Or, the correctness criteria used for dead reckoning could provide a de facto method of relevance filtering with no additional effort requiredAlthough no experiments have been performed at this date we have provided scenarios in which we believe the use of dynamic thresholds and k-region update policy would benefit.  6.0 References [1] Allman, T. and Porter, M. and VanCleave, R. and Gutshell, G. and Harmon, L. and Weber, R.: “Overcoming latency on a budget in a distributed HLA environment” 2000 Spring Simulation Interoperability Workshop Summary Report.  Orlando, FL  March, 2000.[2] Bassiouni, M. and Chiu, M. and Loper, .M and Gamsey, M. and Williams, J.:  “Performance and reliability analysis of relevance filtering for scalable distributed interactive simulation” in ACM Transactions on Modeling and Computer Simulation, Volume 7, Number 3, pages 293-331.  July, 1997.[3] Black, J. W. and Harris D. L.: “RTI recommended practices” 2000 Spring Simulation Interoperability Workshop Summary Report.  Orlando, FL  March, 2000.[4] Cai, W. and Lee, F. B. S. and Chen, L.: An auto-adaptive dead reckoning algorithm for distributed interactive simulation” Proceedings of the 13th Workshop on Parallel and Distributed Simulation, 1998.[5] Goldiez, B. F.: “History of networked simulations” Distributed Interactive Simulation Systems for Simulation and Training in the Aerospace Environment, pages 251-280, SPIE Optical Engineering Press, 1995.[6] Hougland, E. S. and Peterson, D. J: “Data distribution management (DDM) issues for HLA implementations”, 2000 Spring Simulation Interoperability Workshop Summary Report. Orlando, Florida. March, 2000.[7] Launchbury, J.:  “Lazy Imperative Programming”, url=citeseer.nj.nec.com/launchbury93lazy.html, 1993.[8] Lin Kuo-Chi: “Dead reckoning and distributed interactive simulation” Distributed Interactive Siulation for Systems for  Simulation and Training in the Aerospace Environment, pp 16-36, SPIE Optical Engineering Press, 1995.[9] Morse, K. L. and Steinman J. S.: “Data distribution management in the HLA” 1997 Spring Simulation Interoperability Workshop Summary Report.  Orlando, Fl.  March 1997.[10] 10, M. D.:  Computational Geometry Techniques for Terrain Reasoning and Data Distribution Problems in Distributed Battlefield Simulation, Ph.D. Thesis, University of Central Florida, Orlando, FL. 1997.[11] Powell, E. T.: “The use of multicast and interest management in DS and HLA applications” Proceedings of the 15th DIS Workshop on the Interoperability of Distributed Interactive Simulations Orlando, FL September 1996.[12] Srinivasan, S. and Reynolds, P.F. Jr: “Communications, data distribution and other goodies in the HLA performance model”.  1997 Spring Simulation Interoperability Workshop Summary Report, Orlando, Fl.  March, 1997.[13] U. S. Department of Defense: High Level Architecture Rules, 1.3.  April, 2000.[14]  Zeigler, B. P.: DEVS Theory of Quantized Systems, June, 1988.KEITH GARFIELD is a Research Assistant at IST.  Mr. Garfield has 16 years of experience in the aerospace community with the Boeing Corporation.  He earned his B.S. in Aeronautical Engineering from Embry-Riddle Aeronautical University in 1983, and is pursuing a Ph.D. in Computer Science at UCF.  His research interests include formal language specifications for use in parallel computation and user interfaces for simulation.ROBERT W. FRANCESCHINI is an Assistant Professor of Computer Engineering at the University of Central Florida.  He earned BS and PhD degrees in Computer Science from UCF.  He is actively pursuing research projects in affective computer generated forces, multi-resolution simulation, user-composable simulation, and user interfaces for simulation.