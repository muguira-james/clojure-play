Trial of Human Decision Support Simulation Using GUI Modelsin CORBA and HLAMichihiko OgataAkira HigashideTOSHIBA Corporation, Hino Operations3-1-1 AsahigaokaHino, Tokyo 191-8555JAPAN+81-(0)42-585-3529miki.ogata@toshiba.co.jp, akira.higashide@toshiba.co.jpTakeshi YasudaTOSHIBA Corporation, Komukai Operations1 Toshiba-cho Komukai Saiwai-kuKawasaki, Kanagawa 210-8581JAPAN+81-(0)44-548-5844takeshi3.yasuda@toshiba.co.jpKeywords:Non-HLA, HLA, RTI, CORBA, Human Decision Support, GUI FederatesABSTRACT: Making decision is required in any time and any situations, which are disaster relief, air control, traffic control, and so forth. It is believed that human beings always make final decision in any case of situations even though going through several processes to make decision. Adding GUI models (GUI federates) to the simulation this time, it is helpful for human decision support. Using GUI models (GUI federates) is the best way to develop the Human Decision Support Simulation. On the first trial, using CORBA for its platform with WinNT. At the first step of this trial, we developed several GUI federates and each GUI federate server. Then we added GUI control federate and its control federate server. It worked okay on this trial. However, trying to upgrade the platform from CORBA to HLA on the next trial because it is important to keep up with requiring of time management and its expansion. To follow the standard of distributed interactive environment is also the key of combined simulation in the future. This paper will discuss structure of our simulation system, characteristics of GUI federates, and validity. It will also cover the overview of upgrading platform, reusability, problems during its process, and their solutions.1. IntroductionMaking decision is always required in any time and any situations, which are disaster relief, air control, traffic control, and so on. It is believed that human beings always make final decision in any case of situations even though going through several processes to make decision.Now, we should think that how we can support human decision? In our laboratory, we carried out approach as follows. Applying GUI models (GUI federates) to the simulation, it is helpful for human decision support. GUI models can support human beings to do his missions quickly and accurately which are information collecting, data processing, transmission, command, and control. Using GUI models (GUI federates) is the best way to develop the Human Decision Support Simulation. Moreover, it is possible to find out the best style and specification of developing system following this approach. This paper examines that structure of our simulation system, characteristics of GUI federates, and validity. It will also cover the overview of upgrading platform from CORBA to HLA, reusability, problems during its process, and their solutions. 2. BackgroundOn our first trial, using CORBA for its platform with WinNT. At the first step of this trial, we developed several GUI federates and each GUI federate server. Then we added GUI control federate and its control federate server. It worked okay on this trial. However, trying to upgrade the platform from CORBA to HLA on the next trial because it is important to keep up with requiring of time management and its expansion. To follow the standard of distributed interactive environment is also the key of combined simulation in the future. Lessons and learns we made during this trial are as follows.3. Overview of Our First Trial3.1 OverviewAt first, we try to think which system needs human decision support? The answer should be the system that is taking care of information collecting, data processing, and data transmission. It also has idea of command and control stuff. We can say that it has hierarchical system such as disaster relief, air control, traffic control, and so forth. Here we have example that has three levels, which are shown in Figure 1. EMBED Visio.Drawing.5  Figure 1Here is brief explanation about each role in Figure 1.Squad's missions are:Collects information and reports information to the         Section.Receives order from Section.Receives order from HQ in case of emergency. In this case, Section also receives same information, but just through the Section.No communicates with other Squads.More than one exists under Section.Section's missions are:Receives information collected by Squad.Sends information to HQ.Shares information with other Sections.Receives order from HQ.Sends information arranged by HQ to his subordinate Squad(s).More than one exists under HQ.HQ's missions are:Commands and controls.Receives information from Section.Grasps situation and sends order to Section(s) and/or Squad(s).Exchanges information with other HQ.3.2 H/WThree PCs are arranged for HQ, Section, and Squad. One more PC is applied for GUI Control Unit. Printer and the sets of network equipment are prepared. H/W composition is shown in Figure 2.  EMBED Visio.Drawing.5  Figure 2Specification of each H/W is shown in Table 1.Table 1HQSectionSquadGUI Control UnitPCCPU:      266MHzMemory:      128MBCPU:      233MHzMemory:        96MBCPU:      166MHzMemory:        96MBCPU:      266MHzMemory:      128MBO/SWinNT Ver4.0LAN10BaseT3.3 StructureStructure is shown in Figure 3. EMBED Visio.Drawing.5  Figure 33.4 Specification of Each Unit3.4.1 Outline of Each Unit(1) GUI Control Unit  Is composed of simulation server, simulation engine client, and simulation client.Is able to send script data to applicable place by requirement.Is able to display route followed by script data.Is able to display data of joining/leaving time.Is able to print out any simulation data.Simulation server and simulation engine clients are executing by start up of simulation client.(2) GUI models (HQ, Section, and Squad)Is composed of each GUI server and its client.Is able to display, create, and modify data.Is able to transmit/receive data followed by FSD (Function Sequence Diagram).Is able to print out any simulation data.3.4.2 Specification of Each Unit(1) GUI Control UnitGUI control unit is composed of simulation server, simulation engine client, and simulation client. It is shown in figure 4. EMBED Visio.Drawing.5  Figure 41-1) Simulation server (CORBA server)Has operation to set and refer simulation mode.Has operation to set and refer data of GUI models joined simulation.Has operation to refer address of each data format.Has operation to set and refer the data of joining/leaving time.1-2) Simulation client (CORBA client + GUI)Is able to set simulation mode.Is able to set data joined simulation of GUI models.Is able to set the data of joining/leaving time from script data.1-3) Simulation engine client (CORBA client)Is able to begin/stop simulation execution.Is able to get script data from script file.Is able to send script data to applicable place by requirement.Is able to make trigger for data creation.(2) Squad GUI simulation unitSquad GUI simulation unit is composed of Squad GUI server and Squad GUI client. It is shown in figure 5. EMBED Visio.Drawing.5  Figure 52-1) Squad GUI server       (CORBA server + CORBA client)There are four kinds of Squad GUI server, which are SqdS1, SqdS2, SqdS3, and SqdS4.Is able to save data.Requests name of unit to simulation server.Creates the CORBA server instance.Gets data from simulation server or other server.Is able to send data to other server followed by FSD (Function Sequence Diagram).Informs the data of joining/leaving time to simulation server.Has a function to initialize, modify, and refer data from Squad GUI client.Informs trigger data by simulation engine client to Squad GUI client.Sends data created by Squad GUI client to other unit if receive trigger data.2-2) Squad GUI client (CORBA client + GUI)There are four kinds of Squad GUI client, which are SqdC1, SqdC2, SqdC3, and SqdC4.Has GUI to display and input data.Is able to set own name and bind the name to the Squad GUI server.Looks for trigger data for Squad GUI server.       Note) Omitted specification of Section and HQ.                                  They have almost same specification as                               Squad.(3) Network watch serverEach GUI client calls this network watch server.Starts up before simulation execution.Watches who joining/leaving simulation are.(4) Simulation time management serverStarts up before simulation execution.Watches time and action during simulation execution.3.5 Process and Data FlowThe process and data flow in this system are shown below.Example: case of situation mapSquad GUI server receives the trigger data of creating situation map by simulation engine client.Squad GUI server sends data of receiving time of trigger to simulation time management server.Squad GUI client always looks for trigger data. Squad GUI client creates situation map if there is trigger data.Squad GUI server sends the data to Section server followed by FSD after Squad client creates situation map. Squad GUI server also sends the data of sending time to simulation time management server at the same time.Section GUI server sends the data of receiving time to simulation time management server after receiving data about situation map.Section GUI client looks for new trigger data. Section GUI client displays the situation map if there is new arrival data.Section GUI client receives the situation map.Section GUI server sends the data to HQ server followed by FSD after Section client receives new arrival data. Section GUI server also sends the data of sending time to simulation time management server at the same time.Simulation client displays result of simulation data.3.6 Data Flow between UnitsData between Units is based on each data format and FSD (Function Sequence Diagram). Asking to the experts in the specific field before we created FSD for CORBA objects. We believed that discussion with experts should be always needed and useful for creating simulation. An example of Data Format is shown in Table 2.Table 2Item# of DigitPlace of DigitCodeDefinitionCompulsory/OptionalType2  0NType of dataAutomatically given# of sending data8  2NDTE# & Data IDAutomatically givenTime of transmit/receive810NDD/HH/mm/ssAutomatically givenSend from418NSend data (create) ID of objective Section (# of DTE)CompulsorySimulation flag122N0: Non-object 1: Object Simulation #423NSimulation data IDClassification127N1: Current 2: Future planCompulsoryStatus128NStatus of codeCompulsoryDirection229N/ASection: 100 mil (8 directions)OptionalTime831NDD/HH/mm/ssOptionalEast longitude539N0 - 99999 [m]CompulsoryNorth Latitude544N0 - 99999 [m]CompulsoryHeight449N-999 - 9999 [m]OptionalAn example of Display of GUI Models is shown in Figure 6. EMBED Word.Picture.8  Figure 63.7 Upgrade Platform from CORBA to HLA 3.7.1 RTI ServicesIt has started building GUI models with CORBA. Now we try to upgrade platform from CORBA to HLA concerning our human decision support models. We believed that we could carry out our purpose using RTI services as follows [1]:(1) Federation management(2) Declaration management(3) Object management(4) Time managementActual services we use are shown below;(1) Federation management1-1) createFederationExecution()1-2) destroyFederationExecution()1-3) joinFederationExecution()1-4) resignFederationExecution()(2) Declaration management2-1) publishObjectClass()2-2) subscribeObjectClassAttribute()2-3) unpublishObjectClass()2-4) unsubscribeObjectClassAttribute()(3) Object management3-1) deleteObject()3-2) registerObject()3-3) requestID()3-4) updateAttributeValues()(4) Time management4-1) requestFederateTime()4-2) requestFederationTime()4-3) requestLBTS()4-4) requestLookahead()4-5) setLookahead()4-6) timeAdvanceRequest()3.7.2 Reuse of the ResultsReuse for development in HLA using the results developed in CORBA is shown in Figure 7. EMBED Word.Picture.8  Figure 7During development in CORBA, we could get IDL file, stab file, skeleton file, client software, and server software. When we try to change platform from CORBA to HLA, we might reuse IDL file, client software, and server software. We might change these results to .fed file, RTI interface class, and federate interface class, respectively. RTI is taking care of Time Management, so we do not have to increment this part. This is one of advantage using RTI. The point of upgrading platform is that we must follow the idea of SOM and FOM. GUI models with CORBA and HLA are shown in Figure 8 and Figure 9. EMBED PowerPoint.Slide.8  Figure 8 EMBED PowerPoint.Slide.8  Figure 94. ConclusionWhen we try to change platform from CORBA to HLA, we find out which RTI services correspond to CORBA services. If we know how to use services, we do not have to know contents of services. It might be said that CORBA is similar to HLA at this point. Reusable points are concept and outline of simulation structure. GUI federates are also reusable part. Up to now, we are continuously building GUI and simulation taking care of data exchange. However, this model is really useful and powerful. It is considered that it can use for prototype as one of guideline to find best GUI in case of developing new simulation system.Under upgrading platform, it is easy to reuse static part of GUI models. However, it is hard to do dynamic part of GUI models. This is major problem under upgrading platform.  The reason why we had this kind of problem is that we did not consider reusing models during our first trial. To avoid this problem, we should start from generic models whenever we build models. We should always consider that expansions and reusability. Also we should apply the idea of object-oriented architecture and development when we build classes. On the other words, we should build models flexible, reusable, and extendable.   5. Future PlansOn our next step, we are planning to build and add models not only data exchange but also with the motion corresponding to existing GUI for the simulation. When we are talking within ground duty, all fields and data of terrain feature are very effective. Image of our future plan is shown in Figure 10. In order to achieve our next goal, we still need to study with all our might and main. EMBED PowerPoint.Slide.8  Figure 106.  ReferencesDMSO: High Level Architecture Run-Time Infrastructure Programmer's Guide, version 1.3, 1998.H. Onozawa: CORBA Distributed Object-Oriented Architecture, Soft Research Center Inc., 1996.E. Gamma, R. Helm, R. Johnson, and J. Vlissides: Design Patterns and Elements of Reusable Object Oriented Software, Addison Wesley Publishing Section, 1995.Author BiographiesMICHIHIKO OGATA is a system engineer who works for TOSHIBA Corporation. He got his M. S. degree major in Computer Science from Ohio University Graduate School in 1992. He is responsible for the prototype development using method of Modeling and Simulations. He has been involved with engineering support and consultation services in the area of M&S. He is also working as technical staff for design, implementation, and system integration efforts of various fields. AKIRA HIGASHIDE is a Specialist at TOSHIBA Corporation pursuing the development of command and control systems. His research interests includes applying Modeling & Simulations to all kinds of systems. He completed his Master's in Electrical Engineering, Graduate School of Engineering, Kanazawa University in 1987. He is a member of IEEJ.TAKESHI YASUDA has been employed at TOSHIBA Corporation since he received B. E. in Mechanical Engineering from Waseda University in 1988. His interests include Modeling and Simulations, as well as applying M&S to various industrial fields.