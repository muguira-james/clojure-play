HLA/RTI Emulation Framework for Rapid Prototyping and DebuggingRonald D. PainterDavid CedelCACI, Inc.1600 Wilson Blvd., Ste 1300Arlington, VA 22209703-558-0xxx, 703-558-0xxx HYPERLINK mailto:Rpainter@caci.com Rpainter@caci.com,  HYPERLINK mailto:dcedel@caci.com dcedel@caci.comKeywords:High Level ArchitectureABSTRACT: In constructing HLA/RTI federations that represent real world systems, decisions on how many federates to break the problem into and what functionality goes into a federate have often been made based on the hardware needed to develop and test the federation's federates rather than the ultimate production system. CACI has developed an HLA/RTI emulation framework for the Prophet Simulation Test Bed that replaces our Smalltalk HLA/RTI layer and permits combining federates into a fully functional monolithic simulation. This allows rapid debugging of RTI interactions and object attribute updating between federates. This has proved extremely beneficial during integration and test of the 11 Prophet federates in our time-managed, time-constrained federation. In addition, it provides a tool for developing and testing algorithms for any and all of the federates. It has proven to be run time and resource efficient framework for running analytical simulations before breaking the federates up and running the real RTI based system. The Prophet Simulation Test Bed provides a scaleable and extensible simulation foundation to support Simulation Based Acquisition (SBA) life cycle for the Division Tactical Unmanned Aerial Vehicle (TUAV) Signals Intelligence (SIGINT) Payload (DTSP).1. IntroductionHLA federations have been used predominantly for training and most analytic applications have been for demonstrations.  In the past analytic simulations were built as stand alone simulations and later adapted to become HLA federates. With the maturity of the HLA technology analytic simulations can now be designed and built as HLA federates.  The Prophet Simulation Test Bed is a discrete event based built as a series of HLA federates to be a scaleable and extensible simulation foundation to support Simulation Based Acquisition (SBA) life cycle for the Division Tactical Unmanned Aerial Vehicle (TUAV) Signals Intelligence (SIGINT) Payload (DTSP). Adapting a discrete event simulation architecture to be HLA compliant requires a number of design decisions that are not completely resolvable until the components are built and tested. Also, debugging new federates in integration tests can become daunting as the number of federates grow. CACI, Inc has developed an HLA/RTI emulation framework to allow the federates to be combined in a monolithic simulation but perform as fully functional federates. The emulation framework has allowed rapid debugging of interactions between federates that were elusive in the actual federation. In addition, the emulation framework allowed the Prophet Simulation Test Bed to be executed on a standalone machine without having to instantiate a complete HLA federation. This work was performed under contract to the U.S. Army CERDEC Intelligence and Information Warfare Directorate2. BackgroundThe Prophet Simulation Test Bed is being built to support analytic, virtual and hardware in the loop simulation objectives. An HLA/RTI based architecture was considered the only viable architecture to support all of these objectives. To reduce costs, risk and delivery schedule, the Prophet Simulation Test Bed is being built on the JWARS discrete event architecture. The JWARS Environmental Server could then be immediately reused in our system and the JWARS Simulation System could be easily incorporated at a later date. This required designing an HLA/RTI object layer between the JWARS architecture and the HLA system. Once that was accomplished, a number of design decision had to be made that were HLA specific. These include:Determining the number of federates required to meet the simulation objectivesAllocation of functionality to the federatesMinimizing the number of interactions and object updates presented to the HLA federationMinimizing the number of time advance requests made to the federation.Using the JWARS Smalltalk framework and an adaptation of extreme programming techniques, the federates were constructed and integrated into the HLA federation as shown in Figure 2.1. As the number of federates increased, we experienced increasing difficulties with debugging integration problems between the federates and ever increasing run times. Determining where a discrete event timing problem occurs in a monolithic simulation can be a formidable task but proved to be almost insurmountable in an HLA federation.  EMBED PowerPoint.Show.8  Figure 2.1: DTSP federationFor example, the antenna federate was sending a large number of reports to the receiver federate but the receiver federate would under certain conditions either process all of them or none of them. Also, standard methods of runtime profiling of code to determine which algorithms are responsible for the CPU usage and targeting them for refactoring proved almost useless in the federation. The profiling tool sampled the tick process in the HLA interface code and distorted the results to the point that it looked like all the time was being spent in the ticking process. 3. Technical DiscussionThe DTSP federates were built on a simulation framework built for JWARS and adapted for the Coast Guard Search and Rescue Simulation (SARSIM). As shown in Figure 3.1, the scenario driver federate like the rest of the federates has its functionality placed on the <federate>System and adds functionality to the HLA objects to which it subscribes. Using this architecture allowed incorporation of the JWARS environmental server by just changing its inheritance from GdkSystem to GdkRtiSystem and adding the interactions it would receive and publish. This architecture had to be refactored to allow federates to be combined into single monolithic simulation.  EMBED Word.Picture.8  Figure 3.1 ScenarioDriverSystem FederateBy examining the federates, we found that the <federate>SimulationSetup and the <federate>SimulationOutput in each of the systems were similar enough to allow them to be generalized into objects that could be used by all the federates. An inheritance layer was developed to generalize these objects and a federate object was developed that allowed each federate system to be re-inherited from this federate system. The refactoring into this new configuration was very rapid taking about two hours per federate. Figure 3.2 shows the resulting monolithic federate configuration. The JWARS Environmental Server System had a number of modules (EnviromentalServer, TerrainServerManager, etc) that are now components of the EnvironmentalFederate.The DTSP Testbed federates often subscribe to a limited subset of the FOM object attributes and add functionality to the corresponding instantiated objects. To resolve these differences, a base class for each interaction and object described in the FOM was developed and each federate inherited their representation of the FOM object from these base classes. Figure 3.3 shows the inheritance of the Emitter FOM object where functionality has been added in the ReceiverFederate, MapDisplayFederate and the ScenarioDriverFederate. Since a class side translation between the FED file object attribute name and the Smalltalk object attribute name must be supplied for each object, the attributes of the base class do not have to match those of the instantiated class (e.g., while the Emitter has an totalAltitude attribute corresponding to the FOM “TotalAltitude”, the ScenarioDriverEmitter has an altitude attribute corresponding to the same FOM attribute).With the refactoring, the original RTI federation ran as before but with the added benefit that a single executable could be configured to be any federate using data from an initialization file (.ini) and federates which are not dependent on each other (i.e., are not publishing and subscribing to the same interactions and objects) can be combined into a single federate when appropriate. Modifications can easily be made to our Smalltalk RTI layer to allow any combination of federates to be combined or split apart depending on the needs of the analysis. EMBED Word.Picture.8  Figure 3.3 Hierarchical Structure of Emitter FOM ObjectTo allow the federates to run in a monolithic simulation, the Smalltalk RTI layer shown in Figure 3.4 was modified to emulate internally the RTI functionality.  EMBED Word.Picture.8  Figure 3.4 Smalltalk HLA/RTI Layer ArchitectureSince all federates are running in the same executable, the event time is now controlled by a single event engine and the next event request and grant can be eliminated with no impact on the running simulation. All events are posted to the same event manager instead of each federate having its own event manager and having the RTI regulate the passage of time. The monolithic simulation does not have to advance time (a very small increment) to propagate a published attribute. This allows “zero time” interactions between federates to be much more easily debugged.  The reflecting of published attributes to the appropriate receiving federate required that the computational testbed framework hold a mapping of each of the FOM objects and interactions. Since each federate could associate a FOM object attribute to a different internal object attribute, each attribute update required from a given federate required finding the appropriate class of each receiving federate, updating the attribute and calling the appropriate update method. While this might be expected to be a computation bottleneck, Smalltalk allows this mechanism to be built at the object instantiation and management level and is not a runtime problem. Although object ownership functionality was being used in the DTSP Testbed federation, the computation testbed layer did not attempt to enforce ownership as did the RTI. The computational testbed framework was built to provide a way to combine federates into a monolithic simulations for testing and pure analytic simulations but the federates still have to work correctly in the RTI federation.4. ResultsCombining the DTSP Federates into a single monolithic simulation allowed us to examine the computational contribution by each federate and identify HLA interface issues to be examined in the federation execution. While debugging and testing of multiple federates in the DTSP Testbed federation is possible, both the time and computer resources required limit the amount of testing that could be accomplished. With the number of federates in the DTSP federation, most of the development resources had to be dedicated to a single federation execution.  The Receiver Federate sent a ScanFrequency interaction to the Antenna Federate at the completion of a frequency dwell and then waited for the Antenna Federate to respond with a set of signal returns that were in the correct frequency band and above a signal-to-noise threshold. The Receiver Federate was waiting a “small” time and then assuming that all the signals had been received. Because zero look ahead requires a small time advance to receive a published object, the Receiver Federate did not always receive the signal returns before it proceeded to process them. This only occurred when the Receiver Federate was simulating multiple receivers using identical scan patterns. Using the DTSP computational Testbed, the Receiver Federate to be modified to wait on a trigger which fires only when the Antenna Federate had passed all the signal returns for a given receiver. Figure 4.1 shows the results of running the DTSP Computational Testbed with and without the Data Collector Federate and with and without the channelized receiver processing algorithms in the Receiver Federate. Using the Smalltalk development environment profiling tools on each federate’s functionality, we were able to easily identify computational bottlenecks for rework. The Data Collector Federate was using ODBC to ACCESS to store the output of the simulation. By converting to a native Oracle interface and storing serialized objects, we were able to reduce the time spent in the Data Collector Federate by almost 90 percent. By using the serialized object interface originally developed for the JWARS project, we were able to combine the Scenario Generation Federate and the Scenario Driver Federate into a single federate. A similar analysis of the channelized receiver processing algorithm identified the setup for the actual computation accounting for about 90 percent of its total time.  In performing the profiling, we discovered the antenna and propagation federates were performing a number of functions that are normally associated with the receiver but each subscribed to the same HLA objects and had to manage them. This led to a combining of the propagation, antenna and receiver into the receiver federate with a 15 percent saving in run time even in the DTSP Computational testbed. EMBED Excel.Chart.8 \s Figure 4.1: Computation Processing AreasThe resulting DSTP Testbed federation now has three less federates, a significant reduction in computation intensity and is considerably more robust. We are currently examining and optimizing the Smalltalk RTI layer’s handling of the next event request to speed up the federation performance.5. SummaryThe ability to build HLA federates that can be integrated into a monolithic simulation for debugging, testing, performance improvements and algorithm updates has allowed the DTSP Testbed Federation to be improved at a much more rapid rate than would have been possible using only the HLA federation. The DTSP Computational testbed has also been very useful as an analytic tool for analysis of concepts while remaining fully HLA compatible.The Prophet Simulation System architecture and the DTSP Computation Tested has allowed CACI to build new federates and integrate them into the DTSP Testbed Federation with much reduced computer resources, manpower and time than was previously possible.Author BiographiesRON PAINTER is Chief Scientist for Modeling and Simulation for CACI, Inc. He is the technical lead for the JWARS project responsible for the architectural design and implementation of JWARS. He is the developer of the architecture for the Coast Guard Search and Rescue Simulation (SARSIM) and provided technical guidance in both the domain expertise and simulation artifacts for the Prophet Simulation Testbed. Dr. Painter developed a generalized simulation architecture and system, SimMaster(, in SIMSCRIPT II.5( which has been used to develop a wide range of military simulations. Dr. Painter has a PhD in Theoretical Solid State Physics.DAVID CEDEL is a Senior Software Engineer for CACI, Inc.  He has participated in the design and implementation of the JWARS and Prophet Simulation Testbed simulation architectures. He is the designer and implementer of the Smalltalk HLA/RTI Layer.Figure 3.2 DTSP Computational Testbed High Level Architecture EMBED Word.Picture.8  