Selectively Reliable Multicast for the HLAJ. Mark Pullen and Robert SimonDepartment of Computer Science and C3I CenterGeorge Mason University, Fairfax VA 22030{mpullen,simon}@netlab.gmu.eduKeywords:reliable multicast, High-Level Architecture, event channelsABSTRACT: George Mason University has been engaged for several years in developing an approach to multicast transport for distributed virtual simulation. The approach is a synergistic combination of the current best-effort multicast approach with a limited form of reliable multicast. It is called the Selectively Reliable Multicast Protocol (SRMP) and has been described in past SIW papers. We have been investigating how best to implement SRMP in support of the HLA. This paper reports on our current effort to install SRMP as a "pluggable protocol" within the TAO ORB used by the RTI-NG. The basic approach we are following uses SRMP to implement the two TAO "event channels" used by the RTI-NG. The event channels support best-effort and reliable transport respectively, and thus map directly to transport modes supported by SRMP. We believe we are the first group to use the Event Channels within the RTI-NG in this way. This paper reports on our experience in this process.1. IntroductionFor several years the Networking and Simulation Laboratory of the C3I Center at George Mason University (GMU) has been investigating an approach to reliable multicast for virtual simulation (DVS) that exploits the synergy between reliable and best-effort transmission supporting DVS over multicasting networks. This paper describes a new emergence from our efforts which brings our previous work into the realm of network support for the HLA-RTI. We are working to implement an interface between our Selectively Reliable Multicast transport Protocol (SRMP) and the RTI-NG.2. Selectively Reliable Multicast The Selectively Reliable Multicast transport Protocol (SRMP) supports a mix of reliable and best-effort multicast by taking advantage of the specific requirements of DVS [1]:Most traffic consists of data streams describing position, orientation, etc., that are refreshed frequently and thus may be distributed by best-effort transport.A small fraction of the traffic consists of data that change rarely and thus require reliable transport.Generally, it is straightforward to determine which data elements fall in each category, within a higher-layer protocol such as IEEE 1278 Distributed Interactive Simulation (DIS) or a Federation Object Model (FOM) based on the IEEE 1516 High Level Architecture (HLA) [2].Only the latest value of any data element is required to be delivered reliably; therefore, during times of rapid transition, it is not essential to deliver all reliable data element changes in sequence.Following a concept originated in [3], SRMP originally was developed for use with DIS. [4] reported on a “Light Weight RTI” that used SRMP to support a subset of HLA functionality. [1] demonstrated that the functionality of SRMP can be applied to good effect in the HLA if the reliable transport function is separated from other functionality of the Run Time Infrastructure (RTI). The performance advantages of SRMP under these circumstances, as projected by simulation, have been described in [5]. We are now engaged in creating a capability to use SRMP in a real HLA federation and determine how many of our analytical and simulated projections turn out to be true. [6] and [7] report on the construction of SRMP and how it fits in the NGI FOM. (Figures 1 and 2 below are taken from [7].)3. Using SRMP with the RTI-NGTypical HLA applications and implementations use the Run-time Infrastructure (RTI) as the middleware glue between communicating federations.  Among its functions, the RTI provides distributed object and communication management at runtime for all participating federations. RTI implementations also provide programmers the interface libraries for developing distributed simulations.  Most work in RTI software has focused on communicating computers using existing transport level protocols such as TCP and UDP. However, these protocols cannot provide the efficiency benefits of SRMP. It is therefore necessary to extend the capabilities of the RTI to support a mixture of communication styles. We have done this by extending the facilities used by the RTI-NG to access the underlying network. Specifically, we have provided for the RTI-NG an intelligent Event Channel service, capable of supporting the semantics of the NGI FOM and taking advantage of SRMP. The event channel manages and communicates with the SRMP daemon, and provides NGI FOM semantics for HLA applications.3.1 Event Channels in the RTIA common approach in building large-scale multi-party distributed systems is to connect data producers with data consumers via a communication paradigm known as an Event Service. The Event Service is defined in the OMG Common Object Services Specification (see http://www.omg.org) for the Common Object Request Broker Architecture (CORBA) [8]. This service definition is useful because it decouples producers and consumers, and therefore eliminates the requirements that these entities have explicit information about each other. The basic programming model for using an Event Service is the Event Channel. Each Event Channel appears as a proxy or mediator between one or more producers and one or more consumers. (In standard CORBA documentation, producers are called “suppliers.”)  Both pull and push techniques can then be applied to the channel.   Producers can push data to consumers, and consumers can pull data from producers. This model is very useful in group communications, since multiple producers and consumers can connect via a single channel.  Further, Event Channels are specified at the data object level, so they are particularly useful to support HLA applications. In addition to the push and pull models, event channels can be used in a hybrid mode. One such mode is to make the event channel an intelligent agent, so that the channel itself makes push and pull decisions. An advantage of this approach is that user-configurable policies can be implemented for scheduling and data transmission. GMU has developed an SRMP friendly type of Event Channel to support the RTI-NG. In our implementation, each event channel is created at runtime in an incremental fashion, using the FOM specification for data attributes and for the importance of the data. When an Event Channel is initialized, before any producers or consumers are added, the event channel establishes contact with the local SRMP daemon. Ultimately, this will result in a dual-queue data structure for storing and delivering application-level data, because data is stored both in the daemon and the run-time memory area of the RTI. This design is appropriate because the role of the SRMP daemon is to support multiple mode delivery, while event channels have richer semantics used to support of NGI FOM services, requiring more complex data manipulations.Each type of NGI FOM service supports a mixed mode of data delivery within a single set of HLA data objects. For instance, some federations may require completely reliable data delivery with high-quality network-level QoS, while other federations may not have this capability, because they do not have the necessary network support. It is not desirable to force the HLA programmer to explicitly model all of these types of scenarios. We support this capability by allowing each event channel to be connected to multiple network connections. This allows producers to open different connections to different consumers, allowing appropriate and potentially differing QoS semantics for members of the same event channel.  Each event channel maintains a list of these open connections, and performs garbage collection as appropriate. Federations register with event channels via the use of RTI-supplied primitives.  The NGI FOM is then used by our runtime system to setup and monitor appropriate network connections.Our event channel RTI service is being developed as an extension of the RTI-NG implementation provided by the Defense Modeling and Simulation Office (DMSO)[2]. The RTI-NG is built on TAO [9], a CORBA-compliant middleware that allows users to add their own protocols and functionality through a TAO mechanism known as a pluggable protocol. We are using this mechanism to add SRMP support into the RTI.  This is done via the definition of a new type of Inter-ORB Protocol, called the GMU Inter-ORB Protocol (GMU-IOP). It provides the interface between the SRMP daemon described in Section 2 and the enhanced functionality of the hybrid event channel. Our implementation is illustrated in Figure 1, which shows the logical model under which TAO supports the RTI-NG.  The components in Figure 1 all have service configuration files used at runtime to configure services, including specifications associated with the NGI FOM and the GMUGateway. As part of our project we have developed a general-purpose configuration language based upon XML. The most useful attributes of XML for this application are that it is human readable and self-identifying. The purpose of the configuration language is to specify the run-time characteristics of the RTI, to encapsulate the standard RTI and FOM initialization files (.fed and .rid), and to explicitly provide SRMP configuration data including the list of multicast addresses. We have implemented a thin wrapper function within our RTI that parses this configuration file in order to comply with the standard .fed and .rid format. Based upon the configuration file, when the RTI is invoked the event service module dynamically provides multicast group information to initialize SRMP. After an Event Channel is initialized, reliable data identifiers are associated with this information using SRMP’s registration service. Other primitives used for Event Channel Management include subscription, sending data, and receiving data. EMBED PowerPoint.Slide.8  Figure 1: GMU enhancements to the TAO/RTI runtime systemFigure 2 shows a portion of our Event Channel model.  The diagram depicts the use of two types of event channel services. Unicast reliable data is sent to event channels set to Push mode. The purpose of the gateway is to multiplex and demultiplex packets from the GMU-IOP to the appropriate event channel. Notice that it is possible to have both consumers and suppliers operate in the same host. This requires the use of a gateway within the host.  This portion of the design is consistent with the current DSMO RTI release. We have added a multicast event channel for intelligent processing, as the interface between the current multicast send primitive available in the RTI. Multicast applications PUSH data to this event channel. On the receiver side, the multicast gateway demultiplexes packets from the GMU-IOP and delivers them to the appropriate event channel. The distribution version of RTI-NG does not use an event channel for multicast data; therefore, we have added this capability in order to enable use of SRMP. EMBED PowerPoint.Show.8  Figure 2:  Event Channels for SRMP3.2 The GMU DIS-HLA GatewayTo provide a realistic workload for the RTI-NG with SRMP, we have created the Next Generation Internet Federation Object Model (NGI FOM) for open/unclassified experimentation. This FOM uses the NPS VRTP distribution documented at  http://www.web3d.org/WorkingGroups/vrtp/mil/navy/nps with GMUGateway, a protocol translator for DIS-Java-VRML that was developed by GMU in collaboration with NPS. Our gateway provides interoperability between the IEEE 1278 DIS and IEEE 1516 HLA simulation architectures by converting DIS PDUs to HLA Run-Time Infrastructure (RTI) service calls, and vice versa. GMUGateway reads in a configuration file and retrieves necessary information for configuration, such as IP address and port number for source or destination. The configuration file is written in the Q-XML language, a Quality of Service (QoS) and Configuration Specification Language. Q-XML is able to express the full range QoS requirements and configuration information, and compliant to XML (see http://www.w3schools.com/xml /default.asp). After configuration, GMUGateway creates a HLA RTI federation and joins in the federation as a federate. It then translates from DIS to HLA or from HLA to DIS according to the configuration. For the translation from DIS to HLA, it publishes the types of objects and interactions it will generate to the federation, continuously receive packets from a specified IP address and port, and generate objects or interactions into the federation according to the types of the DIS Protocol Data Units (PDU).  For translation from HLA to DIS, it subscribes the types of HLA objects and interactions as specified in the configuration file. When it receives a service call to reflect the attribute values of a registered object or an interaction, it creates a DIS PDU with a corresponding type, and sends it to a specified IP address and port. We have used GMUGateway successfully to support the NPS Capture the Flag exercise available through the URL cited above. The initial NGI FOM will support the object types developed by NPS for this purpose: truck, helicopter, dismounted infantry, and “stealth” viewer.4. Conclusions and Future WorkWe expect the NGI FOM and the software associated with it will be the starting point of a new type of involvement by the academic research community in large-scale virtual environments for distributed virtual simulation. Although clearly related to the RPR FOM [10], the NGI FOM has a distinct identity and can be expected to evolve to greater differences, under the influence of academic interests. The new software will join that already made available on an open-source basis by NPS and GMU. Using the NGI FOM, we expect to be able to demonstrate the potential of SRMP to support DVS effectively using multicast networking, which demands less network capacity to achieve the same level of fidelity in DVS. Our plans include creation of a “TCP Friendly” SRMP that has potential for standardization because it meets the requirement of the Internet Engineering Task Force (the Internet standards body) that any reliable multicast protocol will not pose unfair competition to TCP’s congestion control mechanism.AcknowledgementsThis work was supported in part by the Defense Modeling and Simulation Office High Level Architecture RTI Enhancement Program.References[1]	Pullen, J. M., “Reliable Multicast Network Transport for Distributed Virtual Simulation,” Proceedings of the Third International Workshop on Distributed Interactive Simulation and Real Time Applications, IEEE, 1999[2]	US Department of Defense Modeling and Simulation Office, “High Level Architecture Run-Time Infrastructure RTI 1.3-Next Generation Programmer’s Guide”, 1999[3]	Cohen, D., “Back to Basics”, 11th Workshop on Standards for Interoperability of Distributed Simulations, September 1994.[4]	Pullen, J.M., V. Laviano and M. Moreau, “Creating A Light-Weight RTI As An Evolution Of Dual-Mode Multicast Using Selectively Reliable Transmission,” Simulation Interoperability Workshop, Orlando, FL, September 1997 [5]	Moen, D. and Pullen, J.M., “A Performance Measurement Approach for the Selectively Reliable Multicast Protocol for Distributed Simulation,” Proceedings of the IEEE Distributed Simulation and Real Time Applications Workshop(DS-RT’01), Cincinnati, OH, August 2001[6]	Shanmugan, B., and Pullen, J.M., “Software Design for Implementation of the Selectively Reliable Multicast Protocol,” Proceedings of the IEEE Distributed Simulation and Real Time Applications Workshop (DS-RT’02), Dallas, TX, October 2002[7]	Pullen, J.M., Simon, R., Khunboa, C., Parupalli, M., and Brutzman, D., A Next-Generation Internet Federation Object Model for the HLA, Proceedings of the IEEE Distributed Simulation and Real Time Applications Workshop (DS-RT’02), Dallas, TX, October 2002[8]	Common Object Request Broker Architecture. Object Management Group, July 1995 [9] Carlos O'Ryan, Douglas C. Schmidt, Fred Kuhns, Marina Spivak, Jeff Parsons Irfan Pyarali, and David L. Levine, “Evaluating Policies and Mechanisms for Supporting Enbedded, Real-Time Applications with Corba 3.0,” Proceedings to the Sixth IEEE  HYPERLINK "http://rtas.eng.ohio-state.edu/" Real-Time Technology and Applications Symposium (RTAS'00), Washington D.C., USA, May 31-June 2, 2000[10]	Berkeley, J., “Enhancing The RPR FOM To Include STOW 97 Capabilities,” Simulation Interoperability Workshop, Orlando FL, September 1998Author BiographiesJ. MARK PULLEN is Professor of Computer Science at George Mason University, where he heads the Networking and Simulation Laboratory in the C3I Center. He holds BSEE and MSEE degrees from West Virginia University, and the Doctor of Science in Computer Science from the George Washington University. He is a licensed Professional Engineer, Fellow of the IEEE, and Fellow of the ACM. Dr. Pullen teaches courses in computer networking and has active research in networking for distributed virtual simulation and networked multimedia tools for distance education. ROBERT SIMON is Associate Professor of Computer Science at George Mason University. He holds the M.S. in Computer Science from New York University and the Ph.D. in Computer Science from the University of Pittsburgh. He is active in teaching and research in network and distributed system architectures, protocols performance analysis and simulation methods for real-time, multimedia and computer supported cooperative work applications, and is known for his work in network simulation. He is co-developer a large-scale distributed simulator of Advanced Intelligent Network Architectures, and served as Program Chair for Society for the Computer Simulation Computer Networks and Distributed Systems Conference 1999 2000 and 2001. 