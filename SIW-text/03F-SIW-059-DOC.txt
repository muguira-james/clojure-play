 An Interactive Testbed for Business Re-engineering as Applied to C2 OperationsEdward WigfieldMichael DinsmoreJohn JamesC. Donald MeansSteven BennettEmily LeventhalCarol HubbardThe MITRE Corporation202 Burlington RoadBedford, MA 01730781-271-5660ecw@mitre.orgKeywords: HLA, Process Models, Constructive Simulations, Executable Architectures, Operator-in-the-LoopABSTRACT:  Our ability to define improved command-and-control (C2) processes is constrained by our inability to quantitatively assess current operational processes and the value added by new approaches. This paper describes the use of the High Level Architecture (HLA) to federate existing independent capabilities to form an interactive business reengineering testbed with the application of the testbed to C2 process assessment. The testbed currently has three primary components interconnected by HLA. These federates are a Petri Net-based simulation engine (for executable process models), a battlespace simulation, and a three dimensional display (for operator in the loop capability).  Measures of performance (MOPs) and measures of effectiveness (MOEs) for existing and proposed operational processes can be evaluated using the executable process models and battlespace simulation federates. In addition, the testbed features an operator in the loop capability. The capability to bring users into the design of operational processes is recognized as being critical in obtaining the insight necessary for improvements and to help ensure acceptance by the user community. The operator in the loop capability in our testbed a) contributes to model verification, b) can, via instrumentation, also contribute to process model validation, c) provides mission rehearsal capability and d) promotes analysis activities including course of action analysis. The resulting federation has considerable analysis capabilities to study the interplay between events in the battlespace environment and responses to those battlespace events.Overview of FederationOur ability to define improved command and control (C2) processes is constrained by our inability to quantitatively assess current operational processes and the value added by new approaches. This paper describes the use of the High Level Architecture (HLA) to federate existing independent capabilities to form an interactive business reengineering testbed with the application of the testbed to C2 process assessment. Figure  SEQ Figure \* ARABIC 1:  C2 Testbed FederationThe testbed currently has three primary components interconnected by HLA. These federates are a Petri Net-based simulation engine (for executable process models), a battlespace simulation, and a three dimensional display (for operator in the loop capability).  Measures of performance (MOPs) and measures of effectiveness (MOEs) for existing and proposed operational processes can be evaluated using the executable process models and battlespace simulation federates. In addition, the testbed features an operator in the loop capability. The capability to bring users into the design of operational processes is recognized as being critical in obtaining the insight necessary for improvements and to help ensure acceptance by the user community. The operator in the loop capability in our testbed a) contributes to model verification, b) can, via instrumentation, also contribute to process model validation, c) provides mission rehearsal capability and d) promotes analysis activities including course of action analysis. The resulting federation has considerable analysis capabilities to study the interplay between events in the battlespace environment and responses to those battlespace events.Use of COTS software and an infrastructure with heterogeneous platforms provided challenges en route to developing a FOM to support C2 process evaluation. This paper provides an in depth look at each of the components, our use of HLA and supporting technologies to interconnect the components and lessons learned. The paper also describes possible future directions for this testbed including the introduction of new federates.Battlespace Simulation (EADSim)EADSIM (developed by Teledyne Brown Engineering) was used to simulate the battlespace for our testbed. A large scenario that was also used for an AOC Reduced Manning Study (ARMS) was used to drive the EADSIM simulation [9]. The battlespace simulation included:An Air Operations Center (AOC)Fighter aircraft commanded by the AOCGround targets Command and Control (C2) decision processesCommunications on a message-by-message basisIn the EADSIM battlespace simulation, a sensor/platform detects ground targets, such as TBM launches and choke points.  This sensor/platform then sends track messages representing these detected targets to the AOC.  In response to receiving these track messages, the C2 decision processes in the AOC determine which fighter aircraft should attack the corresponding ground target. Then, if EADSIM is in the stand alone mode, the AOC sends a message to the appropriate fighter aircraft to attack the ground target and that fighter aircraft reacts accordingly.When EADSIM is run as part of this testbed federation however, EADSIM sends out simulated C2 messages (HLA interactions) to other federates (e.g., MSim).  These other federates react to those messages and send updated C2 messages (HLA interactions) into EADSIM. EADSIM subsequently simulates the reaction to those received C2 messages. For example, when running in the HLA mode, instead of the AOC model sending the C2 information directly to the aircraft model, the AOC model initiates an HLA interaction, publishing the ground target information as a critical event for the other federates. MSim then processes the received critical event. MSim subsequently publishes its update of this critical event and associated C2 information. EADSIM then commands an aircraft (not necessarily the same aircraft referred to in the critical event sent out of EADSIM) to attack the ground target.  The aircraft referenced in the C2 HLA interaction from MSim to EADSIM then reacts accordingly and the effects are simulated in the battlespace.Executable C2 Architecture (MSim)The C2 business process modeled in the testbed was Time Critical Targeting (TCT). These C2 process models were executed in the MSim tool (MITRE-developed software).MSim is based on the Petri Net (PN) methodology. See reference [3] A PN is a bipartite graph of Places and Transitions, as shown in figure 2.  Each PN Transition (drawn as a rectangular box) models the activities that do work and produce outputs.  The Places (drawn as circles or ellipses) represent type of data that the Transition needs for input and the type of data that the Transition produces as output. Places connected by a directed arc to a Transition are called “Input” places.  Places connected by a directed arc from a Transition are called “Output” Places.  Tokens represent the actual data consumed and created in a PN.  The execution behavior of a PN follows two simple rules: 1) Once all the input places to a given transition have a token, then the Transition can fire and is said to be enabled.  2) When a Transition fires (occurs), it takes a token from each input place and, after a simulated transition-time, puts a token in each output place.  The execution of a PN is described by means of an occurrence sequence.  It specifies the steps that occur.  In general, a step may consist of several enabled transitions occurring concurrently.  Figure 2:  Petri Net FlowThe MITRE PN implementation in MSim has several unique features that are not currently available in other executable architecture simulation tools.  The primary feature is the ability for the user to specify Threads in the model.  Each token can be associated with a Thread and its thread is used to route the token within the PN-network at execution.  A key attribute of the Thread is its priority, allowing a given activity (modeled as a transition) to consider some data of higher priority.  That is, it is not just the activity itself that is of higher priority on a given resource, but the thread on which the activity is currently working that can be specified as higher priority.  For example, if it is considered more critical to clear airspace for a downed pilot rather than to plan Airspace for a routine bombing mission then the downed pilot process can be modeled as a separate thread with higher priority. There is an algorithm within the tool to allocate resources to those data-tokens that are within the highest priority threads.  The algorithm preempts any lower priority threads currently running on the same resource(s).Another feature is that MSim makes a distinction of which Places contain data tokens and which can contain resource-tokens. In this manner MSim can use the PN methodology to model the resources necessary for a process. Here, a resource is a person or CPU that is necessary to do the activity but is not consumed during the activity. The TCT Model used for our first implementation is based on an Operational architecture that was developed previously at MITRE, initially by Dr. M. Makhlouf in an AOC Manpower Reduction Study (ARMS)  and then extended by D. Schuh in a MITRE IR&D project “Achieving Predictive Battlespace Awareness”. This model represents the TCT process used in several AOCs in the 2001 timeframe and has been reviewed by several AF agencies for authenticity.  Activity times in the TCT model are mostly based on recollections from people who have performed these activities in a real operation.  Some times were observed at JFEX-2002.  (MSim allows the user to specify the activity’s time as a probability distribution.)  The model of the TCT operational process starts when a ground track pertaining to the detection of a “critical event” (e.g., TBM launch, choke point) is received from the Battlespace federate, EADSIM.  Then the TCT model performs the early intelligence monitoring functions that are initiated when any emerging target is found in the AOC.  In the real AOC these functions establish whether the emerging target warrants further consideration and, if so, is designated as a Dynamic Target.    At this point the model of the AOC may initiate the ISR (Intelligence Surveillance & Reconnaissance) management sub-process. The ISR management sub-process models the management of an additional look at the target with a new sensor and any necessary exploitation of the results.  The rest of the TCT thread includes Weaponeering and Collateral Damage Assessment, JAG approval and various coordinations resulting in a tasking to the responsible Theater C2 Node (e.g., AWACS).For the interactive testbed effort, we added an HLA capability to MSim to receive and send user selected interaction classes. The MSim user designates some PN-Places to receive or send those interactions by filling out attributes within a Place. These designations are automatically used in the HLA initialization process to register the Publish and Subscribe interactions that MSim federate wants.  At run time the parameters of the HLA interaction are placed in and copied out of the associated PN-token that is used to model the data of the interaction.  For interactions flowing into MSim, the user may specify a Boolean condition, a function of the HLA-parameters, to be satisfied in order to accept the interaction.  For example, in our model, both EADSIM and the VRoom generate the same class of interactions (CmdAssignToStrike).  But, we wanted MSim to process only incoming messages from EADSIM.  Therefore, we had MSim accept only incoming interactions where the “source” parameter was “AOC” (as opposed to interactions generated by the VRoom, where the source parameter = “VRoom”). Configurable Operator-in-the-Loop (VRoom)Building on MSim’s capability to model resources (see above), any of the operators necessary for completing the TCT process could have been used as the position for demonstrating the Operator in the Loop (OITL) capability. We decided to use the Weaponeering position as the OITL for this experimentation. It is important to note that the OITL could have been any of the resources within the modeled process. Conceptually, the PN process executes until it reaches the resource to be investigated by the OITL. When execution reaches this point simulation execution  ‘pops out’ to the OITL federate and when the OITL completes their action, execution ‘pops back’ to MSim to continue process execution.The weaponeering operator performs collateral damage assessment for a designated weapon-target pair via the following sequence: Use the target lists to determine the target for analysis, Select a friendly platform from the Asset list,Enter the munition type into the collateral damage assessment tool,Based on the results, select “heavy” or “light” collateral damage using the Response Application.The Operator-in-the-Loop position was inside of the VRoom, a 3D Room-Based Multimodal User Interface System.  A top-down view of the VRoom is shown in figure 3. Figure 3.  Virtual Room (VRoom) Composable 3-D Interface: a) Top-down view, b) Weaponeering Position, c) Intel supporting views, d) Situational Awareness supporting views, e) Battle Damage Assessment supporting views.The VRoom allows a user to quickly organize and process data from multiple information sources.  The operator has the ability to pan around the room with a mouse and keyboard and select any data window on the VRoom walls for detailed viewing – in this case the Operator can configure the Room in a logical flow for the task at hand.The VRoom layout is set up into four walls (see Figure 3 a-e) tailored for our specific scenario: the Weaponeering operator position screens and three supporting screens for Intel, Situation Awareness, and Battle Damage Assessment. The Weaponeering wall holds the Collateral Assess-ment tool, the Platform Lists and the Response Application. The Intel wall is composed of an Internet Explorer window opened to CNN, and Intel images of the location at hand.  The Situation Awareness wall contains the Common Operational Picture (COP) and the Target Lists. The Battle Damage Assessment wall includes video imagery of how the scenario might play out and shows an Intel after image.  Below are the details of the COP, target lists, Collateral Assessment tool and the Response Application. COPIn order to perform the required weaponeering assessment the operator must maintain situational awareness.  The Common Operational Picture (COP) is a tool that provides this capability.  The COP contains a map interface with dynamic location of friendly and enemy assets.  This is one of the warfighter’s primary tools to visualize the battlespace and how the mission is progressing.  In this implementation of the COP we display Ground tracks and the Precise Participant Location and Identification (PPLI) messages coming from the Battle Space Simulation via HLA interactions.  4.2. Target ListsIn addition to the COP, the target lists provide the operator an indication of what is occurring in the battlespace.  The targets are categorized into two lists—emerging and dynamic targets. Emerging targets are those that have been identified by the intelligence section, but have not yet been validated by the dynamic targeting section.  When the target is validated, it is moved from the emerging target list to the dynamic target list.  Information in the Target Lists is populated from Data coming in from HLA. When the weaponeering operator has the opportunity, they will assess the candidate weapon target pair. This assessment by the weaponeering operator takes place before the target is officially validated and added to the dynamic target list.  This provides the process more efficiency by allowing the operator a ‘head start’ on the task.  When a target is prosecuted, it is removed from the dynamic target list.4.3. Collateral Damage ApplicationWe have created an analogue of the weaponeering position in our testbed. Within this operator position a specific task (determining the probable level of collateral damage) was selected for illustrating operator in the loop capability. For the purpose of releasability, we have constructed an application that approximates the actual application an operator would use, but does not have any data behind it.  The operator selects a specific target and a specific munition against that target--we are assuming the system would know the target’s location.  The munition is selected from the preliminary weapon target pair (the operator could determine the munition loadings (Standard Configuration Load) and select from the available munitions).  When the operator loads this information into the application, it returns a map-based graphical indication of probable levels of collateral damage by displaying range rings around the target corresponding to a high or a low probability.  The operator evaluates if there are areas within the range rings with potential collateral damage consequences e.g. mosques, schools, etc.4.4. Response ApplicationOnce the operator determines if the probability for collateral damage is heavy or light, the appropriate button from the Response Application is selected.  This sends an indication to the key decision makers, allowing them to determine the amount of scrutiny the target requires.  If a probability of heavy collateral damage exists, the Judge Advocate General (JAG) would need more time to analyze the consequences of the action.  Within the federation the button selection creates an HLA interaction. The Response Application sends the interaction back to MSim where it arrives in the Subscription-PN-Place.  Once the Response Application has finished sending the interaction it resets itself and waits for the next response.4.5. OITL Scenario ExampleThe scenario we used to exercise the OITL functionality within the testbed involves a mobile surface-to-surface missile launcher hiding inside a cave complex.  The target appears on the Target Lists and the operator begins to analyze the situation.   He monitors the Situation Awareness wall observing the COP and the Target Lists and analyzes the target—Cave Pre-Strike—on the Intel wall.  The operator is supplied with a preliminary weapon target pair consisting of an F-15 equipped with 1000 lbs. Global Positioning System (GPS) guided munitions.  To determine the potential for collateral damage, the operator selects the correct munition from the Collateral Damage App, and plots the results on the graphical map.  The resulting plot shows the two dark red triangles representing the cave entrances/aimpoints, rough collateral damage probability rings, and a green square representing a school.  The damage rings are far from the school, therefore the probability of collateral damage is low.  The operator selects ‘Light’ on the Response Application, and his weaponeering task is complete.  He then observes the imagery and video on the BDA wall, showing destruction of the two cave entrances.HLAInitial HLA federation development followed the DMSO’s FEDEP [2] including the generation of a scenario to drive federation development.  Commercial Off The Shelf RTIPreviously, Department of Defense (DoD) simulation developers had free access to a reference implementation of the HLA Run-Time Infrastructure (RTI) through the Defense Modeling and Simulation Office (DMSO).  Programming libraries were available for the official DoD platforms and it became the standard of most simulation exercises.  Recently, the DMSO has transitioned the distribution and support of these libraries to Virtual Technologies Corporation (VTC).  Fortunately, the versions for purchase are compatible with the previous DMSO versions used by many battlespace simulators.  Because all federates must be compiled with the same version of the RTI, we needed the previous versions of the libraries in order to participate in a federation with EADSIM.  VTC was very helpful in providing these earlier versions under our purchased support agreement.OMDT ProOMDT Pro from Aegis has the ability to read and write FOMs through its graphical interface and it gave us the ability to generate code from the FOM by generating the appropriate data structures. The team also used OMDT Pro software to generate the relevant HTML information in order to share and browse the FOM structures on-line.FOM DevelopmentIn developing our testbed federation, we followed the HLA FEDEP process with good results.  When we needed to design the FOM for FEDEP step 4, we looked to the SOM used by EADSIM.  A major reason for this was that we did not have the capability or permission to alter the EADSIM software, so we were constrained by the EADSIM SOM in the data/messages that could be exchanged between EADSIM and the other federates (MSim and VRoom).  We had selected EADSIM as a federate in FEDEP step 3 for its ability to simulate and create/receive the types of messages required by our experiments.  Therefore, it was not surprising that the EADSIM SOM could be used as our FOM with only slight extensions of one interaction class to add a few parameters. In our federation, we used only a small portion of the EADSIM SOM interactions, and no EADSIM SOM objects.  We use EADSIM to pass out interactions to MSim and VRoom pertaining to:Tracks of ground entities that are passed from a sensor platform into the AOCPrecise Participant Location and Identification (PPLI) data pertaining to a platform reporting on itselfC2 messages from a command center (AOC) directing a fighter aircraft to attack a ground positionWe pass C2 Messages from MSim into EADSIM directing a fighter aircraft to attack a ground position.Figure 4 shows the defined data-flow within the federation as well as the platform on which each federate will run.  EADSim, the VRoom and the collateral damage application run on Windows platforms while MSim runs on a Macintosh under OS X.   In the center of the diagram Figure 4: Detailed Federation Infrastructure. This diagram shows the HLA interactions, individual federates, RTI and platforms (Windows and Macintosh) for the HLA federation. is the representation of the interactions we are using from the FOM over HLA.  There is a background flow (Lime) of Ground Tracks and Air Precise Participant Location Indicator (PPLI) messages, friendly platforms reporting their own status, going to the VRoom for the operator’s common operational picture (COP) display.  The model of the AOC within EADSim sends a CommandAssignToStrike (Blue-Green: steps: 1,2) to the Situation Awareness and Assessment (SAA) portion of the Model running in MSim.  This immediately sends an emerging target to the Emerging Target List in the VRoom (Blue-Green: steps 3,4).  Note the track# and priority has been added to the normal Command Assign to Strike message.  After further processing in SAA a dynamic target is declared and sent to the VRoom’s Dynamic Target list (Pink: steps: 7,8).  Now the human with the help of the target lists, the COP and the Collateral damage assessment application, determines if this target will sustain heavy or light collateral damage with the chosen weapon and sends that back to the Dynamic Targeting model in MSim (Pink: steps: 17,18).  Finally, after possible additional ISR data and collaboration with various stakeholders the tasking is sent back to the Fighter within EADSim (Red: steps: 19,20).MSim Federate DetailsAs part of this project, the Macintosh OS X-based MSim was interfaced to HLA and the rest of the federation to send and receive arbitrary message interactions as specified in the FOM. The MSim user designates the PN-places to receive or send chosen interaction classes.  At startup, MSim indicates to the HLA RTI these interaction classes.  At run time the parameters of the interaction are placed in and copied out of the associated token that is used to model the instance of the interaction.  The user may specify a Boolean condition that uses parameter values in the arriving interaction to accept the interaction.  This is used in the current model to make a distinction between those interactions sent by EADSim (source = “AOC”) and those sent by the human in the loop (source = “VRoom”).  Both interactions have the same FOM-interaction name but each has a different source-parameter value.Web Service HLA Interface In creating our federation, we faced a unique design challenge. We had selected MSim as a federate in FEDEP step 3 for its capabilities, but MSim currently runs on a Macintosh platform.  For compatibility with EADSIM and other fielded DoD simulators we had chosen the DMSO (now VTC) RTI, which does not provide programming libraries for the Macintosh platform.  Rather than port MSim to a supported platform, we decided to build an adapter on a Windows platform that could participate in an HLA federation and translate the calls to another protocol for communication with the Macintosh.  Rather than define a custom socket protocol, we decided that the adapter would listen and send XML SOAP calls over HTTP to/from the Macintosh.  We defined our SOAP message set to be every HLA API call that we wanted to send/receive to/from the RTI.  Any message received at the adapter from the SOAP interface was sent out over the RTI and any message received from the RTI was relayed to the SOAP interface.  See Figure 5.Figure 5.  HLA Federation with AdapterAn additional issue arose when we realized that our FOM, (EADSIM SOM) does not include the type of critical event and the track number in the CommandAssignToStrike message we used.  Ideally, we would expand the FOM for our application, but we were not licensed to change the EADSIM source code to publish the additional information in the interaction.  We solved the problem by adding some processing capabilities to the adapter. MSim requires the type of critical event and the Human requires the track number.  These attributes are available in the GroundTrack messages, one of which is always the target of a CommandAssignToStrike message.  In our solution, the adapter subscribes to GroundTracks and keeps a list of them with the latitude and longitude of each.  When it receives a CommandAssignToStrike message, it compares the location of the CommandAssignToStrike message with each of the tracks in its list.  When it finds a location match, it copies the needed attributes (message type and track number) into our CommandAssignToStrikePlus message.We found this SOAP adapter technique was very useful for several other reasons and could provide advantages even when a platform change is not needed.  For an existing simulator, it is often easier to implement XML SOAP messages than it is to code, compile and link with HLA libraries. The SOAP interface is a good way to federate a simulation/tool that does not support HLA, but does have some runtime interface capabilities.  An associate of ours federated Ilogix’s Rhapsody in this way.  Finally there is the possibility to incorporate a Federate behind a firewall using SOAP, as it uses standard HTTP.  Other benefits include the processing done to generate new attributes in new interactions may be easier to do in the adapter than in a federate, as already mentioned.  Our adapter had a window with scrolling text file of all HLA activity that it heard.  This window became a handy debug tool to see what was going on in each federates.Time managementSince our testbed federation is comprised of constructive simulators (EADSIM, MSim) with a real-time operator in the loop federate (VRoom), we chose initially to make the constructive simulators time regulating and time constrained while leaving the VRoom unconstrained and unregulating for initial development.  For experimentation, the VRoom will become time regulating once a critical event is received that requires an action from the operator in the loop.  This will allow the scenario to play out at faster-than-real-time speed until operator involve-ment is required.  Because the VRoom clock runs at real time, the constructive simulators will temporarily slow while the user is performing the action.  Once the action is complete, the VRoom will disable time regulation, freeing the other simulators to process at their usual faster-than-real-time speed.StartupTo assure that all simulators in our federation started at the same time, we made use of the Synchronization Point capability of HLA.  EADSIM already had the capability to create and announce a SynchPoint, so we programmed the other federates to wait for this announcement and respond accordingly.  Once all had achieved the SyncPoint, the testbed federation’s simulation clock began to advance. MSim is a passive event-driven simulation. In this setup it only responds to interactions sent from other federates.  Hence, at the Synchronization Point (explained in the previous paragraph) MSim would cause the federation to hang unless it sent HLA-“NextEventRequest”.Uses6.1. MOP example for TCT   An example of how a process model can be used to calculate a measure of performance can be seen in some work previously done at MITRE with this TCT model by J. James and M. Makhlouf.  Figure 6a shows the TCT response time as a function of time in the day.  This is with a standard AOC manning and only two Targeteers allocated to TCT Cell.  Note the response time is getting worse as the day goes on.  In fact the Cell is falling further behind as time passes.  Figure 6b shows the resulting response time with the same scenario but with the addition of two targeteers, one in the secret area and one in the top-secret area.  Note Figure 6a. Two Targeteers; 6b. Four Targeteers that the times are now stable.  This shows an example of using response time as a Measure of Performance (MOP) to evaluate changes to the process.  In this case we only changed the number of resources, but other changes could be evaluated in a similar way.Lessons Learned EADSIMThe bottom line is that we were successful in getting EADSIM to send out the messages (HLA interactions) to other federates included in our effort.  However, we ran into some unanticipated interface issues that made it surprisingly difficult to reach this point.  We were able to resolve these interface issues only because EADSIM was being used by another project where similar interface issues were observed; and, an updated version of EADSIM was generated to resolve that project’s interface issues.  Had this other project not had to solve a similar EADSIM interface problem, we would not have received an update to the EADSIM software that fixed our problem.  Even with the updated EADSIM software, we encountered other issues that make it difficult to use additional EADSIM HLA capabilities.  EADSIM is a complex simulation application.  Without the requisite EADSIM experience, it is often difficult to isolate EADSIM scenario configuration issues from EADSIM software issues.HLAWe found HLA very easy to use for this simulation testbed.  The standardization allowed us to quickly understand the internal data model of COTS EADSIM and make use of the data in our other federates.  The synchronization of time between the federates initially seemed like a difficult task, but using the SyncPoint functionality made it very straightforward, especially since EADSIM had already coded to that standard.  7.3. AdapterThe Adapter that we constructed to allow our Macintosh based federate to participate ended up being a useful and reusable component.  We found SOAP based communication to be very straightforward, especially since we were able to find C++ source code for a SOAP client and server.  Because none of the communication between federates is accomplished outside of the HLA RTI, the federation is still HLA compliant.  A useful extension to the Adapter would be a web browser interface that published the desired SOAP calls for testing purposes.Future WorkIncorporate Rapid Federation Development ToolsDuring the construction of our testbed, the development team used OMDT Pro from Aegis for FOM development. The team also used OMDT Pro to generate the relevant HTML information in order to browse the FOM structures. Looking forward to further federate development, we have been investigating a new software tool called SIMplicity, from Calytrix Technologies. SIMplicity is an integrated development environment for HLA software development that supports the entire simulation lifecycle, from federation development to distributed simulation deployment. SIMplicity allows abstracted access to the features of HLA through a graphical interface and it generates RTI-independent code. The environment has integrated access to compilers, and includes a deployment manager which allows the user to compile and manage multiple federates on multiple machines on a network from one local host.  SIMplicity is based on the Model Driven Architecture (MDA), which has been proposed as the basis for future standards by the Object Management Group (OMG) in order to provide better abstraction and a set of pervasive services for building portable, component-based systems. See reference [6]. In our work, SIMplicity or a similar tool could be used to rapidly build new federates to inject into our testbed simulation. For example, we are currently examining an epidemiological model that could be used with portions of the existing testbed in order to perform analysis of infectious diseases (and the decision making process of those trying to control them).  Any existing federates would need only small modifications in order to run with a SIMplicity-generated federate.ReferencesKuhl, F., R. Weatherly, J. Dahmann: Creating Computer Simulation Systems: An Introduction to the High Level Architecture, Prentice Hall PTR, Upper Saddle River, NJ 1999.Defense Modeling and Simulation Office (DMSO), “High Level Architecture: Federation Development and Execution Process (FEDEP) Model, Version 1.5”, December 1999Jensen,K.: Coloured Petri Nets. Basic Concepts, Analysis Methods and Practical Use.  Volume 1, Basic Concepts. Monographs in Theoretical Computer Science. Berlin, Heidelberg, New York: Springer-Verlag, 2nd corrected printing 1997, ISBN: 3-540-60943-1“Methodology Manual for Extended Air Defense Simulation (EADSIM) Version 10.00”, Contract DASC-60-00-C-0054, CDRL 00E, Teledyne Brown Engineering, Huntsville, AL, May 2002“Virtual Room 3D Visualization Software (VRoom)”,http://www.mitre.org/work/tech_transfer/vroom2.html.Parr, S., and Keith-Magee, R. "The Next Step - Applying the Model Driven Architecture to HLA", 2003 Spring Simulation Interoperability Workshop (SISO Spring 2003).Author BiographiesEDWARD WIGFIELD is a Principal Engineer in the Information Technology Directorate at The MITRE Corporation’s Air Force Center. His focus is on Model-Based System Engineering drawing on his experience with M&S for sensor systems, model-driven software development and simulation-based analysis.MICHAEL DINSMORE is a Lead Information Systems Engineer in The MITRE Corporation’s Air Force Center.  Specializing in virtual environments and simulation interfaces, he has been involved in several next-generation user interface projects such as the Virtual Room.JOHN JAMES is a Principal Engineer in the Information Technology Directorate at The MITRE Corporation in the Information Technology Directorate at MITRE.  He has been responsible for developing and applying techniques to predict the performance of software in distributed computer systems and recently the performance of  operational processes within system Architectures.  He is the principal developer of MSim.C. DONALD MEANS is a Senior Information Systems Engineer in the Information Technology Directorate at the MITRE Corporation’s Air Force Center. His focus is on Human Factors Engineering drawing on his experience with various C2 systems including Time Critical Targeting applications and Air Defense Systems as well as M&S tools.STEVE BENNETT is a Senior Engineer in the System Engineering Directorate at The MITRE Corporation’s Air Force Center. His focus is on Simulation drawing on his experience in the FOM development team for the Joint Simulation (JSIMS) project.EMILY LEVENTHAL is an Information Systems Engineer in the Collaboration and Visualization Section of the Air Force Center at The MITRE Corporation.  Her primary focus is information visualization research as it applies to C2 systems.  This enables her to incorporate both her development expertise and her human-computer interaction interest.CAROL HUBBARD is an Information Systems Engineer in the Decision Support and Visualization Department at The MITRE Corporation’s Air Force Center.  Her work is primarily in the area of developing visualization software, with an emphasis on utilizing new technologies.Figure  SEQ Figure \* ARABIC 2:  Petri Net Flow EMBED Excel.Sheet.8   EMBED Excel.Sheet.8  