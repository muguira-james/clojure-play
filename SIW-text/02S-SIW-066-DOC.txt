A Scalable Data Driven Model for Chemical & Biological SensorsMichael J. O’ConnorJeffrey S. WhiteITT Industries600 Boulevard South, Suite 208Huntsville, AL 35802256-650-2732, 256-650-2739michael.oconnor@itt.com, jeff.white@itt.comRobert AlbrightFort Leonard Wood320 Engineer Loop, Suite 141Fort Leonard Wood, MO 65473573-596-0131albright@wood.army.milDennis L. JonesITT Industries2560 Huntington AvenueAlexandria, VA 22303703-329-7181dennis.jones@itt.comKeywords:Sensors, Chemical, Biological, XML, CB DAS, DASABSTRACT: Distributed simulation-based tools for concept analysis, requirements development, and tactics of employment development of vehicles have existed for some time.  A similar capability for sensors, and in particular for chemical and biological sensors, has not existed.  To support these types of efforts, the Army Maneuver Support Center (MANSCEN) at Ft. Leonard Wood, MO, worked with ITT Industries to develop the CB Dial-A-SensorTM simulation architecture.  The MANSCEN is using CB DAS to examine required sensor capabilities and force composition for future Army architectures.  CB DAS is a scalable, data-driven solution for modeling chemical and biological sensors.  The CB DAS taxonomy allows the user to configure chemical or biological sensors for play in a distributed simulation exercise.  The taxonomy supports all current base sensor technologies, but provides the user the power to define (and play) new types of sensors as needed.  CB DAS uses an XML-based language to define the sensor configuration(s) and associations.  The XML-based language allows for the use of commercially available tools.1. BackgroundThe Maneuver Support Center (MANSCEN) Directorate of Combat Developments (DCD), Fort Leonard Wood, MO, is responsible for concept development as it relates to the mission of the United States Army Engineers, Military Police, and Chemical Corps.  To support its mission, the MANSCEN DCD requires a configurable, real-time, chemical and biological sensor simulator when using distributed interactive simulation.  The MANSCEN DCD contracted ITT Industries to design and develop the Chemical Biological Dial-A-SensorTM (CB DAS).  The CB DAS is a software architecture and simulations that currently simulates point and standoff, active and passive, chemical and biological sensor systems.  The CB DAS, also known as Dial-A-Sensor (DAS), enables users to dial in values for parameters that describe performance characteristics for a known or proposed set of detector technologies, including point ionizing chemical detectors, standoff passive chemical detectors, point particle-counting biological sensors, and active imaging sensors.  ITT Industries constructed a taxonomy that defines inputs, capabilities, and outputs, utilizing the extensible markup language (XML) to insert parametric data.The MANSCEN DCD expressed the requirement for DAS in order to support its simulation architecture of the Chemical Biological Cooperative Detection Concept Experiment (CBCDCE).  In this simulation architecture, DAS was required to be interoperable with the Nuclear, Chemical, Biological, and Radiological (NCBR) Environment Server, which simulates a 3D, time-resolved chemical or biological hazard.  DAS was also required to send tactical messages to the Joint Warning and Reporting Network (JWARN).   The MANSCEN, Joint organizations, and other Army organizations use DAS to support CB sensor research and development (R&D) and test and evaluation.1.1 Hazard PublishingThe NCBR Environment Server is an existing simulation developed by ITT Industries for a consortium led by DTRA and the Army’s Edgewood Chemical Biological Center, a part of the Army Soldier and Biological Chemical Command (SBCCOM).  It provides chemical and biological hazard clouds and depositions for distributed simulation. In real time, the NCBR calculates a high fidelity, 3D hazard environment as a function of hazard delivery system (source term), meteorological conditions and complex (i.e., 3D) terrain. The DTRA SCIPUFF and the Naval Surface Warfare Center’s VLSTRACK Gaussian puff models provide the means for the NCBR to calculate CBR hazard environments. The NCBR makes the data available to other simulations via full 3D representations of the environments (instantaneous air concentration), 2D grids (deposition and dose, air concentration, and lethal dose (LD) at 2-m conformal elevations).  Figure 1.1-1 portrays a sample 2D conformal (to terrain) NCBR instantaneous air concentration calculation showing the effect of complex terrain on the cloud. SBCCOM has served as the proponent for configuration control and release of the NCBR and the DTRA WMD Analysis and Assessment Center supported the migration of the tool to the High Level Architecture (HLA) for distributed simulation.Figure 1.1-1.  NCBR Environment Server Plan View Display1.2 JWARNThe JWARN is a developmental program to provide the joint forces with the capability to report, analyze, and disseminate nuclear, biological, and chemical agent detection, identification, and location and warning information.  It is a Marine Corps-led program with full participation by the Army, Navy, and Air Force.  The JWARN hardware and software will be compatible and integrated with joint service command, control, communications, and intelligence information (C4I2) systems.   It will be located in command and control centers and employed in making decisions about warning dissemination down to the lowest echelon/level on the battlefield. [1]2. DAS ConceptDAS provides the user with a scalable data-driven simulation for chemical and biological sensors.  The concept of DAS is to allow the user to define the performance parameters for existing and proposed systems.  The DAS user is able to attach these sensor models as NBC sensor payloads to a variety of platforms including unmanned aerial and ground vehicles (UAV, UGV).  These vehicles can be instrumented live vehicles, virtual simulations, or constructive platforms/entities played by a simulation such as OneSAF.  A user is also able to employ DAS to play unattended (drop-off/deployable) ground sensors.  DAS provides data to the user(s) in the form of ASCII files–or to other simulations, live sensors, or sensor or C2 system operators (man-in-the-loop) to stimulate sensor-to-user interface and NBC warning and reporting.  The DAS software architecture is modular and scalable so that it can be easily extended to support new technology classes of NBC sensors.3. Sensor TaxonomyA key part of DAS is the sensor taxonomy.  There are three views of the taxonomy:  class of data, class of sensor, and class of hazard.  These views provide a consistent approach for defining each sensor.3.1 Classes of DataThe parameters for each sensor are divided by the class of the data.  The classes are input, ground truth output, and tactical output.3.1.1 InputThe parameters in the input section allow the sensor developer to specify the performance of the sensor.  The data in the input section determines the behavior of the sensor.  This is static data.  The sensor also receives dynamic input such as the position of the vehicle or the hazard.  The dynamic data is not part of the taxonomy.The types of input data vary based on the sensor and hazard classes.  All types of sensors include agent detectablity.  The user specifies how the sensor performs for a particular agent.  The input also includes integration periods, scan patterns for standoff sensors, and alarm logic.3.1.2 Ground Truth OutputThe parameters in the ground truth output section specify data to be saved to a file (e.g., ASCII) or sent to another simulation.  Ground truth data is used to store information related to the performance of the sensor.  This data is of the type that would not normally be available to the user or operator of the actual sensor or data that would be sent as a tactical message.The sensor may have more than one ground truth output defined for it. Each ground truth output is assigned a unique name and has three (3) components: condition, data, and destination.  The condition specifies when the data should be produced.  The user selects the condition from a list.  The available conditions include: integration period, non-zero concentration, and on alarm.  The data section specifies which values are stored each time the condition occurs.  The user selects the data items from a list.  The list includes such items as vehicle position, instantaneous concentration, and alarm status.  The list of conditions and data items varies depending on the sensor and hazard classes.  The final component is destination.  The destination allows the user to specify a file that data is to be written to or the distributed simulation protocol element to send the data.An example of a ground truth output would be to write all non-zero concentrations and vehicle locations to a file.  The user would name this output and define the condition, data, and destination.  The condition would be non-zero concentration.  The selected data items would be concentration and location.  The destination would be the name of the file.  If the user wanted to send the same data to a data visualization tool via DIS, he would create a new named ground truth output.  The new ground truth output would have the same condition and data, but the destination would be set to a DIS PDU.The following is an example of the a ground truth output written to a file.  This is the ASCII representation of the XML output file.  This could also be displayed in table form by various XML editors.  The example shows two ground truth outputs, GTTest1 and GTTest2.  GTTest1 has less data then GTTest2.  The condition for GTTest1 was every non-zero concentration.  The condition for GTTest2 was on alarm.  <ChemPtAirGtOutData TimeStamp="132.039597" OutputName="GTTest1" TimeStampKind="ElapsedTime">	<OutDataHostIdTriple>		<Site>1</Site>		<Host>40</Host>		<Entity>50</Entity>	</OutDataHostIdTriple>	<OutDataHostIdCallSign>TANK1-001</OutDataHostIdCallSign>	<OutDataHostPosition>		<GCC>			<X Units="meters">-2672641.778439</X>			<Y Units="meters">-4424442.127959</Y>			<Z Units="meters">3724530.774150</Z>		</GCC>	</OutDataHostPosition></ChemPtAirGtOutData><ChemPtAirGtOutData TimeStamp="132.039597" OutputName="GTTest2" TimeStampKind="ElapsedTime">	<OutDataHostIdTriple>		<Site>1</Site>		<Host>40</Host>		<Entity>50</Entity>	</OutDataHostIdTriple>	<OutDataHostIdCallSign>TANK1-001</OutDataHostIdCallSign>	<OutDataHostPosition>		<GCC>			<X Units="meters">-2672641.778439</X>			<Y Units="meters">-4424442.127959</Y>			<Z Units="meters">3724530.774150</Z>		</GCC>	</OutDataHostPosition>	<OutDataPtConByAgent>		<PtCon>			<AgentName>GB</AgentName>			<Concentration Units="mg_per_m3">2.591555</Concentration>		</PtCon>	</OutDataPtConByAgent>	<OutDataDetAgentNames>		<AgentName>GB</AgentName>	</OutDataDetAgentNames>	<OutDataAgentType>		<AgentName>GB</AgentName>		<AgentSubtype>			<Nerve/>		</AgentSubtype>	</OutDataAgentType>	<OutDataAlarmStatus>		<AlarmOn/>	</OutDataAlarmStatus>	<OutDataAveragingBuffer>		<AveragingBuffer>			<AgentName>GB</AgentName>			<ConcAverage Units="mg_per_m3">0.685418</ConcAverage>		</AveragingBuffer>	</OutDataAveragingBuffer></ChemPtAirGtOutData>3.1.3 Tactical OutputThe tactical output works very similar to the ground truth output.  Tactical outputs are used to simulate the messages an actual sensor would generate.  Tactical outputs only have two (2) components: condition and message type.  The destination is always the selected distributed simulation protocol’s objects or interactions that represent radio communications.  The conditions are similar to the ground truth output conditions, but are based on events that could be detected by an actual sensor.  There is a ground truth output condition of non-zero concentration.  This condition does not make sense for a tactical output because a real sensor can only detect hazards of a certain concentration, not any non-zero concentration.  Like ground truth outputs, the list of conditions is dependent on the sensor and hazard classes.  The message type is based on actual message sets.  DAS supports United States Message Text Format (USMTF) NBC Chem 1 and 4 messages.  DAS also allows the user to create a custom message to represent a telemetry type message.3.2 Classes of SensorsThe DAS taxonomy is based on the existing classes of sensor technologies.  These include point air sensors, passive standoff sensors, active standoff sensors, and point ground sensors.3.2.1 Point Air SensorsPoint air sensors calculate concentrations based on the amount of agent in the air at a specific point.  While the sensors may use very different environment sensing approaches (e.g., mass spec), they all ingest air samples for further analyses.3.2.2 Passive Standoff SensorsPassive standoff sensors detect the presence of agent based on temperature differences.  These sensors allow the detection of the agent without the sensor actually entering the hazard cloud.  They only detect the presence of the hazard, but cannot determine the range.3.2.3 Active Standoff SensorsActive standoff sensors use a lidar to detect (or image) the agent.  This sensors measure the return to detect the agent.  Unlike passive standoff sensors, active standoff sensors can determine range.3.2.4 Point Ground SensorsPoint ground sensors detect agent on the ground.  The sensors may use a probe to make actual contact with the ground or use a laser.3.3 Classes of HazardsThe DAS taxonomy also uses the class of agent.  DAS works with chemical or biological agents.  The architecture is such that it could be easily extended to radiological contaminants.3.3.1 ChemicalChemical hazards are divided into vapor and liquid.  Chemical sensors generally calculate the concentration of the agent.3.3.2 BiologicalBiological sensors generally count the number of particles.  Real-time detectablity of the agent is based on the size and number of particles.4. System ArchitectureDAS has four components: Sensor Performance Server (SPS), Sensor Attachment Tool (SAT), Deployable Sensor Entity Server (DSES), and Soldier Sensor/Platform Interface (SSPI).  These components are independent and use the selected distributed simulation protocol to communicate.  Figure 4-1 shows the DAS architecture.Figure 4-1: DAS ArchitectureDAS can use either the Distributed Interactive Simulation (DIS) protocols or the High Level Architecture (HLA) with the Real-time Platform Reference Federation Object Model (RPR-FOM).4.1. Sensor Performance ServerThe Sensor Performance Server (SPS) simulates the performance of the user-defined sensor.  The user-defined performance characteristics for the sensors are read from the Sensor Definition file.  The Sensor Definition file is an XML file that references the DTD defining the sensor taxonomy.  The SPS reads the XML file upon startup to determine what kinds of sensors are available.A client application will send a subscription request for the desired sensor type on the network, and any SPS that can support that sensor will respond.  There can be multiple SPSs participating in an exercise.  The subscription manager is structured such that the SPS with the least amount of load for the desired sensor type will be selected.  Upon completing the subscription process the SPS will listen for entity updates on the network and will update the position of the entities and their attached sensors accordingly.  The SPS will also listen for hazard data on the network.  The position data and hazard data are then used to perform the desired calculations defined in the Sensor Definition file.  The SPS can simulate chemical point sensors and chemical passive standoff sensors.4.2 Sensor Attachment ToolThe Sensor Attachment Tool (SAT) is used to “attach” sensors to entities played by other simulations or federates.  The SAT currently supports attachment using the Sensor Mapping file.  The Sensor Mapping file is an XML file that defines what entities to attach to and the kinds of sensors to attach to those entities.  The SAT reads the XML file upon startup to determine what user subscription requests are being made.The SAT allows the user to associate sensors to entities using the identity triple or marking field used in DIS or the Real-time Platform Reference (RPR) FOM.  The user associates the entity with a named sensor from the Sensor Definition file.  Only one SAT may be run in an exercise or federation.The subscription client portion of the SAT performs the handshaking necessary to communicate with the subscription manager portion of the SPS.  The SAT performs all of the subscription requests at startup.  If a subscription attempt fails, it will try again after a specified period of time.  After a configurable maximum number of attempts has been made it will no longer attempt to subscribe to that particular sensor service.4.3 Deployable Sensor Entity ServerThe Deployable Sensor Entity Server (DSES) simulates the entity that a deployable sensor is attached to.  The DSES generates an Entity State PDU in DIS and BaseEntity.PhysicalEntity.Platform.GroundVehicle in the RPR FOM.  The DSES is not required if the exercise or federation does not use deployable sensors.When the user deploys a sensor via the Soldier Sensor/Platform Interface (SSPI) the DSES is responsible for simulating that entity.  The SSPI will make a subscription request to the DSES, and the DSES will respond and began simulating that entity if the sensor service for the deployed entity can be provided by a SPS.  The ID for the deployed entity is automatically generated by the DSES.4.4 Soldier Sensor/Platform InterfaceThe Soldier Sensor/Platform Interface (SSPI) is associated with a specified entity and allows the user to deploy sensors from the entity.  One SSPI is required for each entity that will deploy sensors.  A SSPI is not required if the exercise or federation does not use deployable sensors.  The marking and/or entity triple are displayed for the specified entity.  The user selects a sensor from the Deployable Sensors list and presses the Drop button.  Figure 4.4-1 shows the user interface for the SSPI.  Figure 4.4-2 shows an example of the NBC-4 message generated by DAS.Once this is done the SSPI will make a subscription request to the DSES for a deployable sensors.  If the subscription process succeeds (i.e., the DSES has available slots and a SPS can provide the desired sensor service) the SSPI can display tactical messages from the deployed sensor.  These tactical messages are extracted from Signal PDUs (in DIS) or Signal Interactions (in HLA).  The user can double click a message number in the tactical messages list to display the full contents of the message.Figure 4.4-1.  Soldier Sensor/Platform InterfaceFigure 4.4-2.  Example NBC Message5. DAS ConfigurationDAS can be configured in multiple ways to meet the needs of a given experiment.  The division of DAS into four (4) components is the key factor in making it scalable.  As described in Section 4, the user determines the number of each component required for the exercise.  There is only one SAT per exercise.  The SAT does not require extensive resources.  The number of SSPIs is based on the number of manned interfaces required.  There must be an SSPI for each manned vehicle or a vehicle that is going to deploy sensors.  The number of SPSs and DSESs depends on the number and types of sensors played.  Due to the potential number of puffs and math involved, an active standoff sensor requires substantially more resources than a point sensor.Multiple DAS components can be run on the same computer.  The allocation of components to computers depends on the capability of the computer.  For a small number of point sensors all four (4) components could be run on the same computer.  There is an advantage to running the same component more than once on the same computer.  The CEP conducted at the MANSCEN used 17 computers.  The SAT was run on one computer.  Six (6) SPSs where run on six (6) computers.  Six (6) SSPIs where run on six (6) computers.  Four (4) DSESs where run on four (4) computers.  The number of computers and components is established at run time by changing configuration files.The SPS and DSES use the most resources.  The user specifies the number of sensors or deployed entities each component can play (based on a priori load testing).  The number of sensors can be specified for each component instance.  In an exercise, one SPS might be configured to play 100 chemical point air sensors and another SPS configured to play two (2) chemical standoff passive sensors.  The number of sensors that can be played is based on the computer the component is running on.6. XMLAll of the XML documents discussed in this paper were created with the XML Spy product, developed by Altova.  XML Spy is an easy-to-use XML editor that allows the user to create many types of XML-related documents.  In particular we were interested in the .dtd and .xml file formats.  A Document Type Definition (DTD) file contains a language for describing and documenting markup languages or tag sets.  It specifies elements that may exist, the attributes that these elements may/must have, elements that may or must be found inside other elements, and the order in which elements should appear.  An XML file can be created that conforms to a DTD.  The process of checking an XML file against a DTD is called DTD Validation.  If an XML document matches the constraints set in the DTD, it is valid. XML Spy makes it easy to create an XML file that conforms to the requirements of a DTD.  When the file is first created the user is prompted to select an XML document type, and if it is an XML file the user is prompted to select either a DTD or a schema as a base.  The user can select DTD and browse for the desired DTD to reference.  The interface to XML Spy makes it easy to insert elements in the correct order and set their properties.ITT developed software to parse the XML documents.  The Xerces-C++ 1.5.0 parser was selected to be the departure point for development. This parser is available at xml.apache.org.  This parser was selected because it was free, open-source, available on multiple platforms, and easy to use.  This tool conforms to the XML Spec 1.0 as well as other standards – DOM Level 1.0, DOM Level 2.0, SAX/SAX2, Namespace, and W3C’s XML Schema Recommendation Version 1.0.  Numerous examples and documentation were provided along with the source code.  We chose to use the Document Object Model (DOM) component of the parser since this made the most sense for our sensor taxonomy. The DOM parser stores the information from the XML document as a tree, which makes it easy to extract information since the tree nodes can be visited via recursion.  The DAS software visits each node in the DOM tree to construct a representation in memory of the sensors.  The main advantage of using the DOM parser instead of other XML parsers (i.e., SAX) is that it is fast.The Sensor Definition File is an XML file that was created in XML Spy using the sensor taxonomy DTD as a reference.  The advantage of using XML is that reading in sensor parameters that are variable (i.e. number of sensors, agents that are detectable by a sensor, different output types) is easy using the DOM parser.  Attributes can also be set for elements in an XML file.  This is useful for describing units for a given property (i.e., Minimum Sensor Range – meters, Agent Thresholds – mg/m3).  Attributes were used extensively in the DAS software to ensure that the proper units were used in sensor calculations.  Figure 6-1 is a screen snap of the DAS SDL in XML Spy.  The Sensor Mapping file is an XML file that was created in XML Spy using the sensor mapping DTD as a reference.  This XML file maps entities to desired sensor types.  It is also parsed using the DOM parser.Figure 6-1: DAS SDL in XML Spy7. DAS UsersThe Army routinely uses Concept Experiments (CE), Advanced Warfighting Experiments (AWE), and Advanced Concept Technology (ACT II) programs to experiment with candidate chemical and biological agent detection and warning technologies to evaluate future force structure and equipment requirements and allocation.The simulation architecture of the Joint Virtual Battlespace (JVB) includes the DAS.  This simulation environment development effort, led by the Joint Precision Strikeforce Demonstration Program Office, will support the decision makers of the Future Combat System.  The TRADOC Analysis Center (TRAC) is currently using the JVB to collect data needed to support its survivability study.7.1  Army Concept Experimentation SupportWith the sponsorship of the Maneuver Support Battle Laboratory, the MANSCEN DCD conducted Phase 1 of the CBCDCE during the month of September 2001.  The purpose of the CE was to examine, at the brigade level, the benefit of using cooperative detection provided by the objective LAV-3 NBC Reconnaissance System over the threshold LAV-3 NBCRS equipped with only on-board chemical and biological sensors.DAS was used during Phase 1 of the CBCDCE.  It allowed an analyst to configure sensor performance to match future systems.  The DAS architecture also supported the MANSCEN DCD’s need to easily map sensors to vehicles represented by Advanced Concepts Research Tools and the One Semi-Automated Forces Testbed Baseline (OTB).  Sensor detections from DAS were sent to the JWARN via a tactical simulation interface unit, which is software that translates the Distributed Interactive Simulation Protocols to protocols understood by the JWARN software.7.1.1  VignettesThe vignettes took place in the TRADOC Interim Division Balkans (Kosovo) Division Capstone Exercise playbox.  Sixty iterations (nominal duration of 60 minutes) of the experiment comparing the friendly force (Interim Combat Brigade Team) survivability and effectiveness provided by the threshold NBCRS and the objective NBCRS (each with 15 drop-off ACADA chemical sensors) during Route Reconnaissance, Area Reconnaissance, and Surveillance missions.  In the vignettes, each LAV-3 NBC Reconnaissance System was equipped with a JSLSCAD-like sensor and an ACADA for the baseline and excursion trials.  7.1.2 Simulation ArchitectureThe simulation architecture included the OTB, Version 1.0, the NCBR Environment Server, DAS, and JWARN.  The OTB was used to simulate the friendly forces and emulate FBCB2.  The NCBR represented the threat.  DAS simulated the sensors.  The JWARN provided command and control play.7.1.3 ResultsEmerging results from Phase 1 include 30 significant insights into Doctrine, Training, Leadership, Organization, Material, and Soldier (DTLOMS) that are now being staffed to the proponent for action.7.4 Future WorkPhase 2 of the CBCDE is scheduled to be conducted in the spring of 2002.  It will examine the threshold and objective NBCRS operations at the division level.  Phase 2 will also examine whether there is any improvement offered by using CB sensors attached to unmanned aerial vehicles and unmanned ground vehicles in a cooperative detection mode.8. ConclusionDAS met the objectives of the MANSCEN DCD to conduct experiments using chemical sensors.  DAS gave the analyst the capability to define the performance CB sensors.  The scalability of the DAS made it possible to play hundreds of point sensors.  Because DAS is a server it allowed sensors to be attached to both manned ground vehicle simulators and vehicles/entities played by OTB.DAS has defined an approach that is applicable to a wide range of chemical and biological sensors.  Currently, only the chemical point air and chemical standoff passive sensors are implemented in the SPS.  Future work will add all of the defined classes to the SPS.XML proved to be an excellent way to specify the sensor parameters.  The DAS sensor definition language provided a template for the user.  The use of existing tools for creating and reading the XML files reduced cost and risk.9. References [1]	US Marine Corp:  HYPERLINK "http://www.defensedaily.com/progprof/army/jwarn.pdf" http://www.defensedaily.com/progprof/army/jwarn.pdf, 20 December 2001.Author BiographiesMichael J. O’Connor is a Senior Software Engineer for the Simulation and Training department of ITT Industries.  In this role he is responsible for system level requirements, software design architectures, and distributed simulation implementations.  Mr. O’Connor has 13 years experience in the development and deployment of distributed systems for training, analysis, system development.  Mr. O’Connor is an elected member of the SISO Standards Activities Committee and serves on SISO’s Base Object Model Study Group and RPR FOM Product Development Group.  He received a Masters of Science in Computer Science from the University of Alabama in Huntsville and Bachelors in Computer Engineering from Auburn University.Jeffrey S. White is a Software Engineer for ITT Industries.  He has developed software for the DAS and CCTT Fox Simulator programs.  Mr. White has a 4-year background in software engineering, simulation, and theater missile defense.  He received a Bachelors in Computer Engineering from the University of Alabama in Huntsville.Robert Albright is an Operations Research Analyst for the United States Army. He currently serves as the Simulation Branch Chief of the Maneuver Support Center (MANSCEN) Directorate of Combat Developments Simulation and Analysis Center at  Fort Leonard Wood, MO.  Mr. Albright also serves as the Working Group 31 (Computing Advances) Chair of the Military Operations Research Society.  His credentials include a Bachelor’s of Science in Computer Science and 27 course hours towards a Master’s of Science in Operations Research.Dennis L. Jones is a Manager in ITT Industries’ Simulation and Training Department in Alexandria, VA.  He manages programs dealing with modeling and simulation tool development and application for WMD environments, effects, and sensor systems.  ITT leverages these simulation products in the development of trainers for the systems that chemical and biological agents.  The Army has also used the same toolset to support other simulation-based initiatives including tactics, techniques, and procedures development, sensor system R&D, and test and evaluation.  Mr. Jones has a 16-year background in strategic and theater missile defense, counter proliferation, system engineering and integration, and weapons of mass destruction effects.  He has a Bachelor of Science in Electrical Engineering and a Master of Engineering Administration.