How to Play Fairly: Agents and Web Services Can HelpRobert D. King, Saikou Y. Diallo, Dr. Andreas TolkOld Dominion UniversityNorfolk, V 23529rdking, sdiallo,  HYPERLINK "mailto:atolk@odu.edu" atolk@odu.eduABSTRACT: In military simulation, fairness is absolutely critical. A method is needed for detecting and avoiding potential unfair advantages of one simulation over another that arise as a natural consequence of the design and implementation of models. This paper describes the current state of our research and describes a pragmatic partial solution to this problem that employs an agent-mediated web service for simulation component selection. A unique feature of the service is publicizing simulation model limits with the goal of preventing structural variances.   IntroductionMany good analogies exist in sport, largely because sport is a reflection of our society, culture and how things are done. Useful lessons can be drawn by examining what it means to play fairly. While the philosopher may ponder whether all is fair in love and war, fairness is absolutely critical in military simulation. We require a level playing field so that evaluations of tactics, strategies, force levels and systems are not tainted by artifacts of the modeling process. Failure to obtain honest answers to questions results in dead soldiers. In Western society we teach our children that playing fairly means following the rules: don’t use an unfair advantage (i.e. don’t cheat). Salen and Zimmerman classify rules as operational (rules of play), constituative (underlying formal structures), or implicit (etiquette, good sportsmanship)  ADDIN REFMGR.CITE <Refman><Cite><Author>Salen</Author><Year>2004</Year><RecNum>56</RecNum><IDText>Rules of play: game design fundamentals</IDText><MDL Ref_Type="Book, Whole"><Ref_Type>Book, Whole</Ref_Type><Ref_ID>56</Ref_ID><Title_Primary>Rules of play: game design fundamentals</Title_Primary><Authors_Primary>Salen,Katie</Authors_Primary><Authors_Primary>Zimmerman,Eric</Authors_Primary><Date_Primary>2004</Date_Primary><Reprint>Not in File</Reprint><Publisher>The MIT Press, Cambridge, MA</Publisher><ZZ_WorkformID>2</ZZ_WorkformID></MDL></Cite></Refman>[1]. These describe how to play a game, but are different from strategy and tactics that determine how well a game is played. For sake of this discussion, a simpler classification of rules will be used:rules determine what a player must (or can) do; e.g. The rule, in American Football, that a forward pass must be made from behind the scrimmage line is an example of the former, in M&S the protocols that facilitate and control information exchange are examples.rules also determine what a player cannot do; constraints, whether formal or informal, enable play by restricting behavior that is detrimental to the game. A penalty assessed because a defenseman was off side is an example of a formal constraint, “that just wouldn’t be Cricket” is an example of the latter. The international “rules” of war are primarily focused on these restricting the behavior of combatants.What elements of current simulation architectures support playing fairly? What is an unfair advantage? How does one know if something done is cheating and not in the realm of superior play? The bulk of research in interoperability and composability has been prescriptive in nature, analogous to writing must/can rules. Interoperability focuses on combining elements so that they can play together; composability focuses on how to put model elements together correctly—equivalent to ensuring that all players have the right equipment.  Relatively little research has been focused on preventive measures, analogous to writing cannot rules. When two simulations have differences, then potential for conflict (unfair play) exists. Tolk and Muguira  ADDIN REFMGR.CITE <Refman><Cite><Author>Tolk</Author><Year>2003</Year><RecNum>6</RecNum><IDText>The Levels of Conceptual Interoperability Model</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>6</Ref_ID><Title_Primary>The Levels of Conceptual Interoperability Model</Title_Primary><Authors_Primary>Tolk,Andreas</Authors_Primary><Authors_Primary>Muguira,James</Authors_Primary><Date_Primary>2003</Date_Primary><Reprint>Not in File</Reprint><Periodical>Proceedings of the Fall Simulation Interoperability Workshop</Periodical><Title_Secondary>Fall Simulation Interoperability Workshop</Title_Secondary><Misc_2>Orlando, FL</Misc_2><Web_URL_Link1><u>file://C:\HOME\KING\Papers\Modeling&amp;Simulation\SIW\03F-SIW-007.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">Proceedings of the Fall Simulation Interoperability Workshop</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[2] enumerate four conflict types: semantic (wherein the concepts of the different local schemata do not match exactly, but need to be aggregated or disaggregated), descriptive (e.g. homonyms, synonyms, different names for the same concept, different attributes or slot values for the same concept), heterogeneous (arising from mixing substantially different methodologies for describing concepts), and structural (where variances exist between different structures that describe the same concept). One way to view these conflicts is as a failure to provide rules to restrict or constrain unfair play. To examine how this applies to modeling and simulation requires investigating the root causes of simulation unfairness. In our imperfect world, when designing and creating models analysts decide what to ignore and what to include (as well as how to model what is included). Occasionally and often unpredictably, this process produces incompatibilities between models. Davis and Anderson  ADDIN REFMGR.CITE <Refman><Cite><Author>Davis</Author><Year>2004</Year><RecNum>21</RecNum><IDText>Improving the Composability of Department of Defense Models and Simulations</IDText><MDL Ref_Type="Report"><Ref_Type>Report</Ref_Type><Ref_ID>21</Ref_ID><Title_Primary>Improving the Composability of Department of Defense Models and Simulations</Title_Primary><Authors_Primary>Davis,Paul K.</Authors_Primary><Authors_Primary>Anderson,Robert A.</Authors_Primary><Date_Primary>2004</Date_Primary><Keywords>composability</Keywords><Reprint>Not in File</Reprint><Publisher>RAND National Defense Research Institute</Publisher><ISSN_ISBN><f name="AGaramond-Regular">0-8330-3525-8 (pbk. : alk. paper)</f></ISSN_ISBN><Web_URL_Link1><u>file://C:\HOME\KING\Papers\Modeling&amp;Simulation\Davis03ImprovingTheComposabilityofDoDM&amp;S.pdf</u></Web_URL_Link1><ZZ_WorkformID>24</ZZ_WorkformID></MDL></Cite></Refman>[3] discuss many factors governing why this is so and explain why complete elimination of conflicts may be unachievable. They present many suggestions to enhance prospects for composability—among them is recognition that models are different from general software components and that model composability needs to be based on the science of modeling and simulation.The roots of unfair play are examined in the next section. Following that, current work defining the roles of agents, ontologies and web services that can be used in model component selection is examined. Next, a proposal for a new approach using web services to identify and resolve simulation conflicts will be discussed. Examples will be presented to illustrate these ideas.  The roots of unfair playAlmost every tutorial, Code of Best Practice (COBP), DoD instruction, and textbook chapter describing simulation software development recommends starting the process with the development of a conceptual model—an overview of how the system being modeled is “seen” and represented—and that can be viewed as an expression of the modeler’s intent. The effort devoted to documenting conceptual models depends on the nature of the application:  simulations intended to support military acquisition decisions and operational testing require rigorous VV&A and therefore the most thorough documentation. Prototypes, ‘one-of’, and ‘proof-of’ simulations are rarely documented (despite the likelihood that success may lead to expansion).The conceptual model is generally refined in a specified model. The specification can be more detailed, defining, e.g., the model’s objects, their attributes, and the processes that determine changes of their states. The specification must be sufficient to permit implementation, typically with a computer program. Ideally, the model should be independent of any particular programming language, although it will reflect one or another formalism, such as differential equations, difference equations, or—to illustrate something quite different—decision tables describing notional human reasoning. Design decisions are also made during implementation:  those regarded by the programmer as minor implementation details are unlikely to be the cause for revising the conceptual model. Nevertheless, these can be real and, importantly, undocumented changes to the conceptual model.Thus, not all aspects of the conceptual model are captured. The reasons why this is so include:The cost in time and effort to document every modeling decision is prohibitive. Except for special cases (such as the VV&A of models used in Operational Testing or Live Fire Test and Evaluation of weapons systems),  the hard work of capturing design details is often not justified.Tools to capture design decisions suffer from a variety of shortcomings:  cost, steep learning curves, awkward interfaces, lack of standards, and incompleteness are among the problems.The discipline of capturing design decisions is not widely taught, practiced or enforced in software development projects. The required ontologies for expressing and reasoning about concepts in many domains of discourse do not yet exist, including the domain of how to represent models and simulations.The aforementioned undocumented conceptual model changes during implementation. When model and simulation code is re-used, it is almost guaranteed that it will not contain critical data elements needed to implement new functionality. Often, the gap is filled by an interface--each data element that does not have an exact match requires a translation/transformation, with concomitant cost and complexity.It is the failure to capture and, later, to communicate the import of modeling decisions that is at the root of model interoperation conflicts. A method is needed for detecting and avoiding these problems that arise as a natural consequence of the design and implementation of simulation models so that evaluations of tactics, strategies, force levels and systems are not tainted by artifacts of the modeling process. The Levels of Conceptual Interoperability Model (LCIM) was developed by Tolk et al.  ADDIN REFMGR.CITE <Refman><Cite><Author>Tolk</Author><Year>2003</Year><RecNum>6</RecNum><IDText>The Levels of Conceptual Interoperability Model</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>6</Ref_ID><Title_Primary>The Levels of Conceptual Interoperability Model</Title_Primary><Authors_Primary>Tolk,Andreas</Authors_Primary><Authors_Primary>Muguira,James</Authors_Primary><Date_Primary>2003</Date_Primary><Reprint>Not in File</Reprint><Periodical>Proceedings of the Fall Simulation Interoperability Workshop</Periodical><Title_Secondary>Fall Simulation Interoperability Workshop</Title_Secondary><Misc_2>Orlando, FL</Misc_2><Web_URL_Link1><u>file://C:\HOME\KING\Papers\Modeling&amp;Simulation\SIW\03F-SIW-007.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">Proceedings of the Fall Simulation Interoperability Workshop</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite><Cite><Author>Turnista</Author><Year>2005</Year><RecNum>22</RecNum><IDText>Extending the Levels of Conceptual Interoperability Model</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>22</Ref_ID><Title_Primary>Extending the Levels of Conceptual Interoperability Model</Title_Primary><Authors_Primary>Turnista,Charles</Authors_Primary><Date_Primary>2005</Date_Primary><Keywords>interoperability</Keywords><Reprint>Not in File</Reprint><Periodical>Proceedings of the Summer Computer Simulation Conference</Periodical><Title_Secondary>Summer Computer Simulation Conference</Title_Secondary><Web_URL_Link1><u>file://C:\HOME\KING\Papers\Modeling&amp;Simulation\Turnista06ExtendedLCIM.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">Proceedings of the Summer Computer Simulation Conference</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[2;4] as a hierarchical framework for evaluating the degree to which system components share information, not simply as data and formatting, but also syntax, semantics, meaning and use.  The lower LCIM levels, Technical and Syntactic interoperability, deal with communication infrastructure and data protocols. The Semantic level is largely satisfied by having a common term definition that results in unambiguously exchanging data. Reaching the Pragmatic level requires exchange of data context. At the Dynamic level, interoperating systems comprehend state changes that occur in the assumptions and constraints that each other are making over time—essentially allowing the unambiguous exchange of information. Conceptual interoperability, the highest level, is only accomplished when interoperating systems not only understand the concepts, assumptions, and relations that are particular to each other, but when their models and processes are aligned. The LCIM serves as a maturity model for interoperation and thus provides a measure of the potential for fair play—the greater the LCIM level achieved, the higher the likelihood for a level playing field.  Current workThree technologies have received much recent attention and, when used together, have the potential to enhance model and simulation interoperability:  web services, ontologies and software agents. This section outlines the contributions of each.Web ServicesOver the past several years the notion of using web services to facilitate interoperation for distributed simulation systems has been advanced  ADDIN REFMGR.CITE <Refman><Cite><Author>Tolk</Author><Year>2005</Year><RecNum>19</RecNum><IDText>Using Web Services and Data Mediation/Storage Services to Enable Command and Control to Simulation Interoperability</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>19</Ref_ID><Title_Primary>Using Web Services and Data Mediation/Storage Services to Enable Command and Control to Simulation Interoperability</Title_Primary><Authors_Primary>Tolk,Andreas</Authors_Primary><Authors_Primary>Pullen,J.Mark</Authors_Primary><Date_Primary>2005</Date_Primary><Keywords>interoperability</Keywords><Keywords>mediation</Keywords><Reprint>Not in File</Reprint><Periodical>Proceedings of the 2005 Ninth IEEE International Symposium on Distributed Simulation and Real-Time Applications</Periodical><Title_Secondary>IEEE International Symposium on Distributed Simulation and Real-Time Applications</Title_Secondary><Web_URL_Link1><u>file://C:\HOME\KING\Papers\Modeling&amp;Simulation\Tolk05UsingWebServicesAndDataMediation.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">Proceedings of the 2005 Ninth IEEE International Symposium on Distributed Simulation and Real-Time Applications</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite><Cite><Author>Tolk</Author><Year>2006</Year><RecNum>1</RecNum><IDText>What comes after the Semantic Web - PADS Implications for the Dynamic Web</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>1</Ref_ID><Title_Primary><f name="TimesNewRoman,Bold">What comes after the Semantic Web - PADS Implications for the Dynamic Web</f></Title_Primary><Authors_Primary>Tolk,Andreas</Authors_Primary><Date_Primary>2006</Date_Primary><Keywords>composable services</Keywords><Keywords>Semantic Web</Keywords><Reprint>Not in File</Reprint><Periodical>Proceedings of the 20th Workshop on Principles of Advanced and Distributed Simulation (PADS&apos;06)</Periodical><Publisher>IEEE</Publisher><Web_URL_Link1><u>file://C:\HOME\KING\Papers\Modeling&amp;Simulation\Tolk06WhatComesAfterTheSemanticWeb.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">Proceedings of the 20th Workshop on Principles of Advanced and Distributed Simulation (PADS&apos;06)</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite><Cite><Author>Tolk</Author><Year>2006</Year><RecNum>24</RecNum><IDText>Composable M&amp;S Web Services for Net-Centric Applications</IDText><MDL Ref_Type="Journal"><Ref_Type>Journal</Ref_Type><Ref_ID>24</Ref_ID><Title_Primary><f name="Arial-BoldMT">Composable M&amp;S Web Services for Net-Centric Applications</f></Title_Primary><Authors_Primary>Tolk,Andreas</Authors_Primary><Authors_Primary>Turnitsa,Charles</Authors_Primary><Authors_Primary>Diallo,Saikou Y.</Authors_Primary><Authors_Primary>Winters,Leslie S.</Authors_Primary><Date_Primary>2006</Date_Primary><Keywords>composability</Keywords><Keywords>intelligent agents</Keywords><Keywords>interoperability</Keywords><Keywords>mediation</Keywords><Keywords>meta-simulation</Keywords><Keywords>Service Oriented Architecture</Keywords><Reprint>Not in File</Reprint><Start_Page>27</Start_Page><End_Page>44</End_Page><Periodical>The Journal of Defense Modeling and Simulation</Periodical><Volume>3</Volume><Issue>1</Issue><Pub_Place>San Diego, CA</Pub_Place><Publisher><f name="Arial-BoldMT">The Society for Modeling and Simulation International</f></Publisher><Web_URL_Link1><u>file://C:\HOME\KING\Papers\Modeling&amp;Simulation\JDMS\VOL3NUM1\JDMSvol3no1Tolk27-44.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">The Journal of Defense Modeling and Simulation</f></ZZ_JournalFull><ZZ_WorkformID>1</ZZ_WorkformID></MDL></Cite><Cite><Author>Yilmaz</Author><Year>2006</Year><RecNum>5</RecNum><IDText>On Improving Dynamic Composability via Ontology-driven Introspective Agent Architectures</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>5</Ref_ID><Title_Primary>On Improving Dynamic Composability via Ontology-driven Introspective Agent Architectures</Title_Primary><Authors_Primary>Yilmaz,Levant</Authors_Primary><Date_Primary>2006</Date_Primary><Keywords>composability</Keywords><Keywords>interoperability</Keywords><Reprint>Not in File</Reprint><Periodical>Proceedings of the 10th World Multi-Conference on Systemics, Cybernetics and Informatics: WMSCI 2006</Periodical><Title_Secondary>The 10th World Multi-Conference on Systemics, Cybernetics and Informatics: WMSCI 2006</Title_Secondary><Web_URL_Link1><u>file://C:\HOME\KING\Papers\Modeling&amp;Simulation\Yiilmaz06OnImprovingDynamicComposabilityviaOntology-drivenIntrospectiveAgentArchitectures.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">Proceedings of the 10th World Multi-Conference on Systemics, Cybernetics and Informatics: WMSCI 2006</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[5-8]. Service Oriented Architectures (SOA) provide a framework within which functionality is exposed in the form of loosely coupled services that can be integrated and composed to create new applications (or services). Development in web services has been phenomenal, owing largely to the driving economics of the WWW, search engine technologies, and providing enterprise services to business. The Semantic Web is evolving towards a meta-data rich Web where presently human readable content will one day have machine-understandable semantics. The Semantic Web is not a separate Web but an extension of the current one, in which information is given well-defined meaning. This better enables computers and humans to work in cooperation. For the semantic web to function, computers must access structured collections of information and sets of inference rules, and use these to conduct automated reasoning. Within the current state of the art, systems carefully limit the questions that can be asked so that the computer can answer reliably—or answer at all. The problem is reminiscent of Gödel's theorem in mathematics: any system that is complex enough to be useful also encompasses unanswerable questions. To avoid problems, traditional knowledge-representation systems generally each had their own narrow and idiosyncratic set of rules for making inferences about their data. For example, a genealogy system, acting on a database of family trees, might include the rule "a wife of an uncle is an aunt."  Even if the data could be transferred from one system to another, the rules, existing in a completely different form, usually could not.The Web Ontology Language (OWL) is a W3C recommendation that allows modelers to use its expressive formalism to define various logical concepts and relations. The Semantic Markup for Web Services (OWL-S) builds on OWL and is an ontology of services designed to enable software agents to be able to discover, invoke, compose, and monitor Web resources offering particular services and having particular properties. As a service description language, OWL-S provides a semantically based view of web services, including the abstract description of the capabilities of the service, the specification of the service interaction protocol, and the actual messages that it exchanges with other web services. Among the tasks supported by OWL-S are: Web service discovery is an automated process for location of Web services that can provide a particular class of service capabilities, while adhering to some client-specified constraints.Web service composition and interoperation involves the automatic selection, composition, and interoperation of Web services to perform some complex task, given a high-level description of an objective. Web service invocation is the automatic invocation of a Web service by a computer program or agent, given only a declarative description of that service, as opposed to when the agent has been pre-programmed to call that particular service.By treating systems as services, it is possible to use OWL-S to describe the ontology of a system in terms of its profile, process, and grounding. Figure 1 presents the ontology of a service, which is comprised of three components: profile, model, and grounding. Figure  SEQ Figure \* ARABIC 1. Ontology of a ServiceThe service profile provides a concise description of the capabilities implemented by the service (What it does). It allows clients and search agents to determine whether the service fulfills their needs. In particular, the service profile describes the inputs, outputs, preconditions and effects or post conditions (IOPE) of a service.The service model describes the behavior and state-changes of a service (How it works). The service model is made of the process model that describes the subcomponents of the service and the process control model that provides a way to monitor the service execution at runtime.The service grounding defines how to make use of a service (How to access it). Because WSDL is suitable to express the grounding of a service, such as formats and protocols, OWL-S applies these ideas as well. The combination of OWL methods for the service profile and the service model and WSDL methods for the service grounding results in the “best of both worlds”. OWL-S provides a semantic description of services while WSDL specifies how to access them. Potential clients can use the service profile to discover the service, the service model to understand the behavior of the service at the abstract level, and the WSDL to identify the protocols to bind and interact with the service at the implementation level.  REF _Ref159821651  \* MERGEFORMAT Figure 2 shows the interplay. SHAPE  \* MERGEFORMAT Figure  SEQ Figure \* ARABIC 2. Interplay of OWL-S and WSDL MethodsOWL-S enables a new level of interoperation for services. It makes it possible to discover and invoke web services automatically. Most importantly, it supports service composition and interoperation thus allowing more complex tasks to be performed in an automated fashion. While OWL itself remains on the pragmatic level of interoperability, the use of OWL-S tends toward dynamic interoperability. In particular, the Service Model in OWL is a first step towards the standardized formal representation of the underlying conceptual model required before.A key problem with the use of standards for Web Service description and publishing is that the syntactic definitions used in these descriptions do not completely describe the capability of a service and generally cannot be understood by software programs. It often requires a human to interpret the meaning of inputs, outputs and applicable constraints as well as the context in which services can be used. The goal of ontology is to represent the meaning of knowledge unambiguously, so that it can be understood, shared, and used by computational agents acting on behalf of people to accomplish some task.Ontology and Common Reference ModelsWithin the domain of M&S, unambiguous meaning is critical—without it, little is possible. Ontology is used to capture knowledge about a domain of interest. In addition to defining the terms used to describe and represent an area of knowledge (subject matter), ontology is the model (set of concepts) for the meaning of those terms. Ontology thus defines the vocabulary and the meaning of that vocabulary within a domain. By encoding domain knowledge (i.e. its properties, values and concepts), ontology makes it possible to share it and to reason about it. A grammar is the system of rules implicit in a language, viewed as a mechanism for generating all sentences possible in that language. The combination of grammar and ontology of a domain provides the means to express the domain’s concepts and determines all it is possible to say using the concepts of the domain. However, the astute reader may note that knowing how to say something is neither the same as knowing what to say to accomplish a purpose, nor the same as actually saying it. Within a domain, business rules are the operations, definitions and constraints that apply when achieving goals—they provide the tactical detail about exactly how goals translate to actions.Wache, et al., provide a survey of existing approaches to information integration  ADDIN REFMGR.CITE <Refman><Cite><Author>Wache</Author><Year>2001</Year><RecNum>26</RecNum><IDText>Ontology-based Integration of Information -- a Survey of Existing Approaches</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>26</Ref_ID><Title_Primary>Ontology-based Integration of Information -- a Survey of Existing Approaches</Title_Primary><Authors_Primary>Wache,Holger</Authors_Primary><Authors_Primary>Vogele,Thomas</Authors_Primary><Authors_Primary>Visser,Ubbo</Authors_Primary><Authors_Primary>Stuckenschmidt,Heiner</Authors_Primary><Authors_Primary>Schuster,Gerhard</Authors_Primary><Authors_Primary>Neumann,Holger</Authors_Primary><Authors_Primary>H&#xFC;bner,Sebastian</Authors_Primary><Date_Primary>2001</Date_Primary><Reprint>Not in File</Reprint><Start_Page>108</Start_Page><End_Page>117</End_Page><Periodical>Proceedings of the IJCAI-Workshop Ontologies and Information Sharing</Periodical><Pub_Place>Seattle, WA</Pub_Place><Web_URL_Link1><u>file://C:\HOME\KING\Papers\Ontology\wache01Ontology-BasedIntegrationOfInformation-ASurveyOfExistingApproaches.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">Proceedings of the IJCAI-Workshop Ontologies and Information Sharing</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[9].   REF _Ref159826652  \* MERGEFORMAT Figure 3 is adapted from this work and summarizes the three alternative approaches for employing ontology in complex systems:    Single ontology approaches use one global ontology to provide a shared vocabulary for the specification of the semantics (see fig. 3a). The systems using the ontology must align themselves with the ontology—which is not difficult if, for example, they are interoperating instances of the same model.In multiple ontology approaches, each model is described by its own ontology (fig. 3b). It cannot be assumed that the different model ontologies share the same vocabulary. The advantage of multiple ontology approaches is that no common and minimal ontology commitment to a single, global ontology is needed—each model’s ontology can be developed without respect to other models. While this architecture can simplify integration and supports adding and removing models, the lack of a common vocabulary makes it difficult to compare different ontologies and an additional representation defining the inter-ontology mappings is needed.The drawbacks of the single or multiple ontology approaches can be overcome by the use of hybrid ontology approaches (fig. 3c). Similar to multiple ontology approaches the semantics of each model is described by its own ontology. However, to make the local ontologies comparable to each other they are built from a global shared vocabulary, which can itself be an ontology   SHAPE  \* MERGEFORMAT Figure  SEQ Figure \* ARABIC 3. Ontology AlternativesThe combination of ontology, grammar and business rules comprise a common reference model (CRM) for a domain. A CRM is a framework for understanding significant relationships among the entities of some domain, and for the development of consistent standards or specifications supporting that environment. The astute reader may also recognize that use of a shared vocabulary in Wache’s hybrid ontology architecture is equivalent to using a CRM. Agent ArchitecturesIn addition to having well-defined components, a capability to reason about assembling the components is critically required. Several characteristics of software agent architectures make them extremely good candidates for this purpose:Autonomous:  agents can implement concepts like self-government, self-determination, self-direction, self-reliance, self-sufficiency, independence, and immunity from arbitrary exercise of authority.Cooperative: agents can be communicative, competitive, and exhibit collaborative behaviors.Reactive: agents can react on the environment in a timely manner.Deliberative (Reasoning):  agents use knowledge (and some reasoning) to define what action to take.Goal-driven: agents can be goal seeking.Longevity: agents can be persistent, continuous.Adaptable: agents can exhibit learning, ability to learn, methods for forming new assertions.Yilmaz and Paspuleti  ADDIN REFMGR.CITE <Refman><Cite><Author>Yilmaz</Author><Year>2005</Year><RecNum>16</RecNum><IDText>Toward a Meta-Level Framework for Agent-Supported Interoperation of Defense Simulations</IDText><MDL Ref_Type="Journal"><Ref_Type>Journal</Ref_Type><Ref_ID>16</Ref_ID><Title_Primary>Toward a Meta-Level Framework for Agent-Supported Interoperation of Defense Simulations</Title_Primary><Authors_Primary>Yilmaz,Levant</Authors_Primary><Authors_Primary>Paspuleti,Swetha</Authors_Primary><Date_Primary>2005</Date_Primary><Keywords>composability</Keywords><Keywords>intelligent agents</Keywords><Keywords>interoperability</Keywords><Keywords>mediation</Keywords><Keywords>meta-simulation</Keywords><Reprint>Not in File</Reprint><Start_Page>161</Start_Page><End_Page>175</End_Page><Periodical>The Journal of Defense Modeling and Simulation</Periodical><Volume>2</Volume><Issue>3</Issue><Pub_Place>San Diego, CA</Pub_Place><Publisher><f name="Arial-BoldMT">The Society for Modeling and Simulation International</f></Publisher><Web_URL_Link1><u>file://C:\HOME\King\Papers\Modeling&amp;Simulation\Yilmaz05TowardAMeta-LevelFrameworkForAgent-SupportedInteroperationOfDefenseSimulations.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">The Journal of Defense Modeling and Simulation</f></ZZ_JournalFull><ZZ_WorkformID>1</ZZ_WorkformID></MDL></Cite></Refman>[10] propose an agent-supported meta-level interoperation framework to address the challenge of coordinating and orchestrating seamless information, data, and service exchange among simulations. The agent organization is comprised of mediator, facilitator, broker, and matchmaker agents that perform the necessary data and service management, alignment, and transformation functions. Mediator agents are responsible for converting simulation content to/from a common reference model (i.e., C2IEDM). Facilitator agents act as gateways between the simulation(s) and the agent organization. The interactions between content (i.e., data, model) requesting facilitators and potential service providers are handled by brokering agents. Conceptual alignment between model and context is provided by matchmaker agents. Concept level matchmaking measures the ‘conceptual’ distance between requested and target objects to qualify closeness within a common domain ontology used by the mediation component.Yilmaz and Paspuleti’s use of a conceptual distance metric permits automatic reasoning whilst choosing between concepts within a limited action set in the C2IEDM. Their example demonstrates selecting between objects but does not extend to reasoning about the conceptual models that underlie objects. In section  REF _Ref159752986 \r \h 4.2 it will be shown that their metric is adaptable to the job of selecting among alternative models. Extensions to their work that address model selection will be presented along with an example.  Service Composition and Orchestration  Model composition takes place on two levels:  component selection and service orchestration. To make a component selection the client must have a clear understanding of the component’s profile (Inputs, Outputs, Pre- and Post Conditions) in addition to knowing where to locate it. OWL-S provides such a capability and mediator agents can perform the discovery work automatically. The second level of model composition involves service orchestration. Clients must decide which services to invoke under what circumstances, and in what order. The OWL-S specification  ADDIN REFMGR.CITE <Refman><Cite><Author>W3C Web-Ontology Working Group</Author><Year>2007</Year><RecNum>36</RecNum><IDText>OWL-S: Semantic Markup for Web Services</IDText><MDL Ref_Type="Electronic Citation"><Ref_Type>Electronic Citation</Ref_Type><Ref_ID>36</Ref_ID><Title_Primary>OWL-S: Semantic Markup for Web Services</Title_Primary><Authors_Primary>W3C Web-Ontology Working Group</Authors_Primary><Date_Primary>2007/2/22</Date_Primary><Reprint>Not in File</Reprint><Periodical>http://www.w3.org/Submission/2004/SUBM-OWL-S-20041122</Periodical><Web_URL><u>http://www.w3.org/Submission/2004/SUBM-OWL-S-20041122</u></Web_URL><ZZ_JournalStdAbbrev><f name="System">http://www.w3.org/Submission/2004/SUBM-OWL-S-20041122</f></ZZ_JournalStdAbbrev><ZZ_WorkformID>34</ZZ_WorkformID></MDL></Cite></Refman>[11] contains a rich set of control structures (e.g. if-then-else, choice, sequence, split, split + join, iterate, repeat-while) to describe the execution of  simple and composite processes.  The difference between selection and orchestration can be likened to the difference between plays described in a playbook and selecting the appropriate play for the situation on the field (or sequence of plays to shape the situation).Atomic and Composite ServicesDiallo and Tolk  describe in detail how a CRM can be employed to create services that fulfill the needs of a client using standardized data elements that are unambiguously exchanged between systems  ADDIN REFMGR.CITE <Refman><Cite><Author>Diallo</Author><Year>2007</Year><RecNum>34</RecNum><IDText>Adaptive Generative Grammar for JC3IEDM Web Services</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>34</Ref_ID><Title_Primary>Adaptive Generative Grammar for JC3IEDM Web Services</Title_Primary><Authors_Primary>Diallo,Saikou Y.</Authors_Primary><Authors_Primary>Tolk,Andreas</Authors_Primary><Date_Primary>2007</Date_Primary><Reprint>Not in File</Reprint><Periodical>Proceedings of the Spring Simulation Interoperability Workshop</Periodical><Web_URL_Link1><u>file://C:\HOME\KING\Papers\Modeling&amp;Simulation\SIW\07S-SIW-099 Draft.doc</u></Web_URL_Link1><ZZ_JournalFull><f name="System">Proceedings of the Spring Simulation Interoperability Workshop</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[12]. The standardized information elements (SIE) are the minimal pieces of data that are information. Each SIE represents a concept that is characterized by its defining properties. Diallo and Tolk propose the following definitions for describing Web services that support model composition: An atomic service is used to exchange SIE by using the defining properties of the related propertied concept as parameters.A composite service is used to exchange multiple SIE that are related with each other by using at least the defining properties of all related propertied concepts that belong to the associated concept representing the composite on the CRM side as parameters. The underlying data is (at least in theory) recoverable from the information exchanged via atomic service. Three types of operations are possible for composite services and the data may not be recoverable for these:Filtering. In many cases, only a fraction of the information is needed for a given purpose. For example, to obtain the coordinates of a unit a composition is necessary that comprises much more data than the coordinates. In this case, a filter can be applied to reduce the composite to the detail needed. Filtering is generally non-reversible. Transformation. In certain cases, only a simple—and generally reversible—transformation is required, e.g., when alternative coordinate systems are used. Aggregation. In other cases, several properties of the composite must be combined into a single piece of information to make it useful for participating partners, such as building the sum or the mean value; generally, aggregation is non-reversible. Diallo and Tolk conjecture that achieving pragmatic interoperability is possible using atomic level services and that it becomes possible to compose and orchestrate subsystems dynamically into temporary or permanent families of systems. i.e. that dynamic interoperability is achievable through use of composite services. The converse is not necessarily true. That is, the use of atomic or composite services achieves neither pragmatic nor dynamic interoperability by itself. Much work remains in defining and automating Web service support for model composition. For example, applications from differing domains (as well as their CRMs) each come with its own set of atomic services, and filtering, transformation and aggregation functions. The current state of the art is that engineers must configure the respective translations between each system manually.   Agent-Mediated Service SelectionThe advent of online business practices such as auctions and real-time resource allocation have given rise to the employment of software agents for finding appropriate combinations of existing Web services to achieve a global goal. Among common tasks in web service selection are solving Constraint Satisfaction Problems (CSP) and Constraint Optimization Problems (COP). Typically, cooperative agents, executing asynchronously and in parallel, work together to optimize a set of constraints that exist upon the problem variables  ADDIN REFMGR.CITE <Refman><Cite><Author>Hassine</Author><Year>2006</Year><RecNum>31</RecNum><IDText>A Constraint-based Approach to Horizontal Web Service Composition</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>31</Ref_ID><Title_Primary>A Constraint-based Approach to Horizontal Web Service Composition</Title_Primary><Authors_Primary>Hassine,Ahlem Ben</Authors_Primary><Authors_Primary>Ishida,Toru</Authors_Primary><Authors_Primary>Matsubara,Shigeo</Authors_Primary><Date_Primary>2006</Date_Primary><Keywords>Semantic Web</Keywords><Reprint>Not in File</Reprint><Periodical>Proceedings of the 5th International Semantic Web Conference</Periodical><Title_Secondary>5th International Semantic Web Conference</Title_Secondary><Misc_2>Athens, Georgia</Misc_2><Web_URL_Link1><u>file://C:\HOME\KING\Papers\SemanticWeb\Hassine2006Constraint-basedApproachToHorizontalWebServiceComposition.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">Proceedings of the 5th International Semantic Web Conference</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite><Cite><Author>Lau</Author><Year>2005</Year><RecNum>57</RecNum><IDText>Solving Generalized Open Constraint Optimization Problem Using Two-level Multi-agent Framework</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>57</Ref_ID><Title_Primary><f name="TimesNewRomanPS-BoldMT">Solving Generalized Open Constraint Optimization Problem Using Two-level Multi-agent Framework</f></Title_Primary><Authors_Primary>Lau,Hoong Chuin</Authors_Primary><Authors_Primary>Zhang,Lei</Authors_Primary><Authors_Primary>Liu,Chang</Authors_Primary><Date_Primary>2005</Date_Primary><Reprint>Not in File</Reprint><Periodical>Proceedings of the 2005 IEEE/WIC/ACM International Conference on Intelligent Agent Technology (IAT&apos;05)</Periodical><ZZ_JournalFull><f name="System">Proceedings of the 2005 IEEE/WIC/ACM International Conference on Intelligent Agent Technology (IAT&apos;05)</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[13;14]. Two kinds of constraints exist:hard constraints are Boolean in nature and represent absolute requirements. CSP have only this kind of constraint.soft constraints are usually expressed as cost functions and the aim of constraint optimization is to find a solution to the problem whose cost, evaluated as the sum of the cost functions, is maximized or minimized. A COP can be viewed as a CSP augmented with a number of cost functions.As the names suggest, hard constraints are to be necessarily satisfied, while soft constraints only express a preference of some solutions (those having a high or low cost) over other ones (those having lower/higher cost). The ultimate goal is to create a framework that employs agents to compose models by solving CSP/COP that employ web services descriptions to aid in finding, selecting and binding to simulation model components whose interfaces are described in OWL-S. It is possible to adapt the agent architecture of Yilmaz and Paspuleti  ADDIN REFMGR.CITE <Refman><Cite><Author>Yilmaz</Author><Year>2005</Year><RecNum>16</RecNum><IDText>Toward a Meta-Level Framework for Agent-Supported Interoperation of Defense Simulations</IDText><MDL Ref_Type="Journal"><Ref_Type>Journal</Ref_Type><Ref_ID>16</Ref_ID><Title_Primary>Toward a Meta-Level Framework for Agent-Supported Interoperation of Defense Simulations</Title_Primary><Authors_Primary>Yilmaz,Levant</Authors_Primary><Authors_Primary>Paspuleti,Swetha</Authors_Primary><Date_Primary>2005</Date_Primary><Keywords>composability</Keywords><Keywords>intelligent agents</Keywords><Keywords>interoperability</Keywords><Keywords>mediation</Keywords><Keywords>meta-simulation</Keywords><Reprint>Not in File</Reprint><Start_Page>161</Start_Page><End_Page>175</End_Page><Periodical>The Journal of Defense Modeling and Simulation</Periodical><Volume>2</Volume><Issue>3</Issue><Pub_Place>San Diego, CA</Pub_Place><Publisher><f name="Arial-BoldMT">The Society for Modeling and Simulation International</f></Publisher><Web_URL_Link1><u>file://C:\HOME\King\Papers\Modeling&amp;Simulation\Yilmaz05TowardAMeta-LevelFrameworkForAgent-SupportedInteroperationOfDefenseSimulations.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">The Journal of Defense Modeling and Simulation</f></ZZ_JournalFull><ZZ_WorkformID>1</ZZ_WorkformID></MDL></Cite></Refman>[10] for model component selection to the same problem only using web services as the descriptive basis. An example is shown in  REF _Ref159750795 Figure 4:Mediator agents are responsible for converting simulation content to/from a CRM (e.g., C2IEDM or JC3IEDM). These now use web services to align information exchanges between simulations. Mediator agents employ service groundings to accomplish their tasks.Facilitator agents act as gateways between the simulation(s) and the agent organization. Simulations join a society of simulations by registering their facilitator with the meta-level interoperation protocol. The interactions between content (i.e., data, model) requesting facilitators (consumers) and potential service providers (producers) are handled by the brokering agents using recommendation, recruiting, and notification protocols. The facilitator agents publish their capabilities as service profile and service model descriptions. Conceptual alignment between a model and its new context is one of the key functions provided by the matchmaker agent. Concept level matchmaking comes into play by solving CSP and/or COP as part of selecting between alternative services as described by their service profiles and models.Broker agents are modified from the previous to pass on CSP/COP data. SHAPE  \* MERGEFORMAT Figure  SEQ Figure \* ARABIC 4. Selecting a Line-of-Sight Service via Agents REF _Ref159750795 \h Figure 4 illustrates an example of model component selection. A model (TANK) requires another model component—a line-of-sight (LOS) algorithm—in order to determine if another tank is visible and therefore whether it can be shot at. Communications with the components are made via their facilitator agents, which act as gateways to the agent organization. Each facilitator agent is aware of the service capabilities and requirements of its associated model. The TANK facilitator agent interacts with a mediator agent to transform content to/from the CRM as necessary. The query for a line of sight algorithm is made in the form of a web service request. Several brokering agents are available to handle such requests using various brokering protocols as might be appropriate for a given query and context. The brokering agents interact with a matchmaking agent whose purpose is to make the best possible match between the service request and the available services. Once the best match has been found, the service is bound to the selected LOS algorithm provider and then executed. Service OrchestrationTo demonstrate service orchestration, consider a tank model—the same one that required a LOS algorithm described previously—as shown in  REF _Ref159992558  \* MERGEFORMAT Figure 5. Figure  SEQ Figure \* ARABIC 5.  UML Class Diagram for TankThe simple, straightforward behavior assigned to the tank is to patrol continuously until sighting another tank, and then to shoot it before returning to patrol.  REF _Ref159757092  \* MERGEFORMAT Figure 6 shows the simplified logic for the tank on patrol as a flowchart, as pseudocode, and as a sequence of services that need to be accessed. SHAPE  \* MERGEFORMAT Figure  SEQ Figure \* ARABIC 6.  Simplified tank patrol service orchestrationOrchestration of the needed services is straightforward, using the control structures of OWL-S previously described.    Model-Driven Service ConstraintsThere is an important difference between the use of web services in composing business enterprise services and the use of web services as the interface to model components. Using a CRM helps to address the ontology problem in M&S, but the benefits of using a CRM do not extend beyond dynamic interoperability. Conceptual interoperability requires alignment of models and that means taking into account how something is conceptually modeled. Accordingly, composing models by using agents and web services to assemble components only provides part of the solution to model interoperability—it is analogous to writing must/can rules and while ignoring cannot rules—rules that constrain the games behavior.The need for service constraints can be illustrated by considering the availability of multiple services for ballisticsCalc(A,B) in the tank patrol example. The service for shooting may utilize any one of literally scores of ballistics calculation algorithms with varying degrees of fidelity.  These algorithms range from simple frictionless trajectory computations to calculations involving wind force and direction, round shape, coefficient of drag, round spin due to rifling, and so on.   Taking a single parameter, windage, as an example, it can be ‘handled’ in a number of different ways:windage can be ignored.wind can be represented as a constant force acting upon a round during flight.the effects of windage can be lumped in a statistical error model.While evaluating alternative models for ballistics calculation, a matchmaking agent system might be able to reason about windage as a factor. Among the constraints that the agent might seek to resolve is whether it is appropriate to ‘mix’ models that ignore windage with ones that lump it statistically with other effects.  Whether or not it is possible to implement a system for publishing simulation model limits that will function to prevent structural variances is a matter of conjecture.  On the positive side, OWL-S and WSDL have features that support constraint-based service selection, and agent-mediated, web-service based component description and selection is certainly possible.  On the other hand, the problem is neither straightforward nor simple. To illustrate why, consider an example of misalignment of conceptual models that can be found in a recent paper presented at I/ITSEC. The authors describe observed anomalies (and the implementation ‘fix’ developed to address them) that surfaced during integration testing of HLA simulators with the legacy DIS components  ADDIN REFMGR.CITE <Refman><Cite><Author>Valle</Author><Year>2006</Year><RecNum>32</RecNum><IDText>Dead Reckoning in a Mixed HLA/DIS Environment</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>32</Ref_ID><Title_Primary>Dead Reckoning in a Mixed HLA/DIS Environment</Title_Primary><Authors_Primary>Valle,Tony</Authors_Primary><Authors_Primary>Leppard,Banjamin</Authors_Primary><Authors_Primary>Santora,Christopher</Authors_Primary><Date_Primary>2006</Date_Primary><Reprint>Not in File</Reprint><Periodical>Proceedings of the Interservice/Industry Training, Simulation and Education Conference</Periodical><Title_Secondary><f name="Helvetica">Interservice/Industry Training, Simulation and Education Conference</f></Title_Secondary><ZZ_JournalFull><f name="System">Proceedings of the Interservice/Industry Training, Simulation and Education Conference</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[15]. The cause of the problem was traced to the use of different dead reckoning algorithms (DR3 and DR4) by simulations on either side of a gateway that performed temporal and spatial processing on the data exchange as well.  Suppose that each simulation’s algorithms have been made part of a service description and that a constraint rule is to be formulated. Is the constraint hard or soft as previously defined?  Furthermore, consider that in certain circumstances there is no problem mixing simulations that employ these algorithms. Clearly, much research is needed to address whether model-driven service constraints are viable.  DiscussionDiallo and Tolk begin to address the use of Web services as the interface to model components in the context of the JC3IEDM  ADDIN REFMGR.CITE <Refman><Cite><Author>Diallo</Author><Year>2007</Year><RecNum>34</RecNum><IDText>Adaptive Generative Grammar for JC3IEDM Web Services</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>34</Ref_ID><Title_Primary>Adaptive Generative Grammar for JC3IEDM Web Services</Title_Primary><Authors_Primary>Diallo,Saikou Y.</Authors_Primary><Authors_Primary>Tolk,Andreas</Authors_Primary><Date_Primary>2007</Date_Primary><Reprint>Not in File</Reprint><Periodical>Proceedings of the Spring Simulation Interoperability Workshop</Periodical><Web_URL_Link1><u>file://C:\HOME\KING\Papers\Modeling&amp;Simulation\SIW\07S-SIW-099 Draft.doc</u></Web_URL_Link1><ZZ_JournalFull><f name="System">Proceedings of the Spring Simulation Interoperability Workshop</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[12] by presenting a series of production rules that enable a user to compose atomic JC3IEDM entities into composites and composites into aggregates, and a framework for creating valid rules and verifying them. This work goes a long way towards standardizing critical data exchange—the five W (who, what, where, when, why)—in JC3IEDM by demonstrating sequences of web service invocations necessary to distinguish between related concepts. Web services and agent technologies have great potential to solve real problems in simulation interoperability. The use of matchmaking agents to select model components that are described by web services offers much promise, however much research remains. For example, agents can select services by solving constraint optimization problems, but determining which objective functions to use is a significant issue. In addition, what should be done when the service descriptions of available components represent near-matches and not exact? Finally, even with model-driven service constraints, conceptual interoperability can’t be guaranteed. However, it is possible to prevent certain kinds of structural variances in critical functional areas. An agent-based service is a key element is making this possible. ADDIN REFMGR.REFLIST References[1]  K. Salen and E. Zimmerman, Rules of play: game design fundamentals The MIT Press, Cambridge, MA, 2004.[2]  A. Tolk and J. Muguira, "The Levels of Conceptual Interoperability Model," in Proceedings of the Fall Simulation Interoperability Workshop 2003.[3]  P. K. Davis and R. A. Anderson, "Improving the Composability of Department of Defense Models and Simulations," RAND National Defense Research Institute,2004.[4]  C. Turnista, "Extending the Levels of Conceptual Interoperability Model," in Proceedings of the Summer Computer Simulation Conference 2005.[5]  A. Tolk and J. M. Pullen, "Using Web Services and Data Mediation/Storage Services to Enable Command and Control to Simulation Interoperability," in Proceedings of the 2005 Ninth IEEE International Symposium on Distributed Simulation and Real-Time Applications 2005.[6]  A. Tolk, "What comes after the Semantic Web - PADS Implications for the Dynamic Web," in Proceedings of the 20th Workshop on Principles of Advanced and Distributed Simulation (PADS'06) IEEE, 2006.[7]  A. Tolk, C. Turnitsa, S. Y. Diallo, and L. S. Winters, "Composable M&S Web Services for Net-Centric Applications," The Journal of Defense Modeling and Simulation, vol. 3, no. 1, pp. 27-44, 2006.[8]  L. Yilmaz, "On Improving Dynamic Composability via Ontology-driven Introspective Agent Architectures," in Proceedings of the 10th World Multi-Conference on Systemics, Cybernetics and Informatics: WMSCI 2006 2006.[9]  H. Wache, T. Vogele, U. Visser, H. Stuckenschmidt, G. Schuster, H. Neumann, and S. Hübner, "Ontology-based Integration of Information -- a Survey of Existing Approaches," in Proceedings of the IJCAI-Workshop Ontologies and Information Sharing Seattle, WA: 2001, pp. 108-117.[10]  L. Yilmaz and S. Paspuleti, "Toward a Meta-Level Framework for Agent-Supported Interoperation of Defense Simulations," The Journal of Defense Modeling and Simulation, vol. 2, no. 3, pp. 161-175, 2005.[11]  W3C Web-Ontology Working Group, "OWL-S: Semantic Markup for Web Services",  HYPERLINK "http://www.w3.org/Submission/2004/SUBM-OWL-S-20041122," http://www.w3.org/Submission/2004/SUBM-OWL-S-20041122, last accessed:  2-22-2007.[12]  S. Y. Diallo and A. Tolk, "Adaptive Generative Grammar for JC3IEDM Web Services," in Proceedings of the Spring Simulation Interoperability Workshop 2007.[13]  A. B. Hassine, T. Ishida, and S. Matsubara, "A Constraint-based Approach to Horizontal Web Service Composition," in Proceedings of the 5th International Semantic Web Conference 2006.[14]  H. C. Lau, L. Zhang, and C. Liu, "Solving Generalized Open Constraint Optimization Problem Using Two-level Multi-agent Framework," in Proceedings of the 2005 IEEE/WIC/ACM International Conference on Intelligent Agent Technology (IAT'05) 2005.[15]  T. Valle, B. Leppard, and C. Santora, "Dead Reckoning in a Mixed HLA/DIS Environment," in Proceedings of the Interservice/Industry Training, Simulation and Education Conference 2006.Authors' BiographiesROBERT D. KING is a Ph.D. candidate in Modeling and Simulation the Old Dominion University (ODU). He received his B.S. in Electrical Engineering (cum laude) (1973) from Marquette University and performed graduate studies at the Naval Postgraduate School.  He has over 30 years experience in Modeling and Simulation, Military Operations Research, Anti Submarine Warfare, Computer Graphics and Virtual Environments. His PhD research focuses on agent-mediation of composable services for model interoperability.SAIKOU Y. DIALLO is a Ph.D. candidate and Project Scientist at the Virginia Modeling Analysis and Simulation Center (VMASC) of the Old Dominion University (ODU).  He received his B.S. in Computer Engineering (2003) and his M.S in Modeling & Simulation (2006) from ODU.  His Ph.D. research focuses on the domain of Model Based Data Engineering and Web Services for M&S applications.ANDREAS TOLK is Associate Professor in the Faculty for Modeling, Simulation, and Visualization at the Engineering Management Department of the College of Engineering and Technology at Old Dominion University (ODU) of Norfolk, Virginia.  He has over 16 years of international experience in the field of Applied Military Operations Research and Modeling and Simulation of and for Command and Control Systems.  He is affiliated with the Virginia Modeling Analysis & Simulation Center (VMASC).  His domain of expertise is the integration of M&S functionality into real world applications based on open standards.  He received a Ph.D. and an M.S in Computer Science from the University of the Federal Armed Forces in Munich, Germany. For example, the very first forward pass in American football could be interpreted as ‘cheating’ as it afforded an advantage not previously incorporated into the existing game rules at the time. Formally, a grammar mathematically delineates a (usually infinite) set of finite-length strings over a (usually finite) alphabet. e.g. the C2IEDM, JC3IEDM and C-BML.shared vocabularywhile (!done) {patrol:    pos = position(Me);    updatePosition(pos,path);searchForEnemy:    enemyPos = position(You);    sighted= lineOfSight (pos,                            enemyPos);    if (sighted) {shootAtEnemy:               hit = ballisticsCalc (pos,                    enemyPos);        if (hit)            continue;    }}task pseudocodeserviceorchestrationgetPosition (Me)getPosition (You)ballisticsCalc(A,B)enemy sighted?getPosition (Me)getPosition (You)lineOfSight (Me,You)OWL-S(c) hybrid ontologythenlocalontologylocalontologylocalontology(b) multiple ontologieslocalontologylocalontologylocalontology(a) single ontologyglobalontologyTANK OBJECT:FacilitatorSYSTEM:Mediator CRMLOS(a,b)SYSTEM:BrokerSYSTEM:Matchmaker SYSTEM:BrokerLOS Service PROVIDER:Facilitatorbest matchagent communicationsSYSTEM:Mediator LOS Service PROVIDER:FacilitatorLOS Service PROVIDER:FacilitatorWSDLProcess ModelDL-based TypesAtomic ProcessesOperationInputs / OutputsMessageBinding to SOAP, HTTP, etc.getPosition (Me)updatePosition (Me , path)shoot at enemymove to new patrol positionstartif enemy hit patrolotherwise shootenemy hit?if enemy sightedshootnn