 Rosetta: a High Speed Information Processor for the Joint Composite Tracking Network and the Joint Data NetworkPhilip YanniANZUS Inc.9747 Business Park AveSan Diego, CA 92131(619)-547-912870571.2714@compuserve.comPaper No. 99F-SIW-046Keywords:C4I DATALINK JDN JCTN VMF CEC LINK-16 JTIDS MIDS SINCGARS IDM LINK-11 FORWARDING SIGNAL EMISSION SENSOR CORRELATION COM DCOM CORBA MISSION REHEARSALABSTRACT: This paper describes using Rosetta technology to exchange realtime tracking and C4I data among the Joint Composite Tracking Network (JCTN) and the Joint Data Network (JDN).  Rosetta technology has been used to implement an adaptive realtime high speed information processor for the exchange of C4I data among legacy datalink, simulation systems, and the JDN.  As the JCTN evolves one of the primary issue is optimizing the use of sensor measurement data with the existing JDN.  CEC is generally used at the reference model for a JCTN and Link-16 is used as the reference model for the JDN.  It is self evident that the cost of the JCTN system will be beyond the resources of most programs and therefore the large majority of platforms will rely on the JDN for track data and command and control.  Since the JCTN will primarily carry sensor measurements and not C4I, the gateway between the two datalinks will require a method to manage both measurement data and C4I data.  The objective is to combine "ID" information on the JDN with high quality JCTN tracks.  Given the limited bandwidth of the JDN, the Information Exchange Requirements will change on a mission by mission, minute by minute basis requiring an adaptive gateway. The Rosetta architecture allows abstracting the wireless network protocols from the message standard on a wide variety of datalinks.  Non-homogeneous data are normalized and made available for translation.  Information Exchange Requirements are defined using the Realtime Query Language (RQL) and the Forwarding Rules Object Gateway manages the exchange.  The system includes hosting modules for Link-16 and most legacy datalinks.  The Rosetta technology is currently implemented as part of OSD's Advanced Concept Technology Demonstration for Link-16 / VMF translation and the Theatre Air Missile Defense Interoperability ACTD.  A subset of the technology is currently installed in the E-2C Hawkeye and at the NATO Combined Air Operations Center.1.0 IntroductionTo enable “Network Centric Warfare”, management of realtime sensor and command and control data from a wide variety of incompatible datalinks will be paramount.  General Lester L. Lyles, Director, Ballistic Missile Defense Organization stated the following:“Interoperability in BMC3I is essential for jointTMD operations.  Accordingly, BMDO takes an aggressive lead to establish an architecture that all the Services can build upon and is actively pursuing three thrusts to ensure an effective and joint BMC3I for TMD. These three thrusts are: --improving early warning and dissemination, --ensuring communications interoperability, and --upgrading command and control centers for TMD functions” [1].To meet these objectives, the Identification function (ID) of the legacy JDN systems and the fire control qualities of the JCTN must be optimized.  Any gateway between the two networks will require Information Exchange Requirements (IER) to be dynamically controlled by the warfighter as the mission changes.  The current generation of static gateways have failed the warfighter with rigid data exchange rules that often reduce the integrity of the tactical picture and command and control.The Rosetta architecture is a realtime system that can implement information exchange requirements among Navigation, Sensor, and Datalink inputs on a Pentium 166.   The objective of the system is to allow external control of the data forwarding rules via the SQL language.  The system can be accessed externally via TCP/IP, but does not force the overhead of TCP/IP onto existing data links.  In the near future emerging commercial wireless protocols will have to be leveraged as a means to lower cost and enhance connectivity.This paper will address the access methodologies and the message standards for wireless network systems.  A discussion of how Rosetta implements the various protocol stacks and message standards is also included.  The objective, a common engine for exchanging information is, also described.2.0 Optimizing wireless resourcesThe military has a variety of wireless data radios that were optimized for specific environments.  This optimization tends to create interoperability issues.  For example, the CEC system, JTIDS, and the Army’s EPLRS each use a different waveform, protocol, and message standard.  The simplistic solution to interoperability would be to run TCP/IP over all of these radios and force everyone to use the same TADIL language. Unfortunately, this would be incredibly inefficient.  Even if unlimited funding was available to modify all the host systems in the military, the loss of bandwidth would render those system useless.  To be effective we need to leverage the optimizations that exist in current tactical radios and build routers, bridges, and gateways between the systems in the JDN and JCTN.Despite the overhead associated with TCP/IP there are compelling reasons to migrate towards a common commercial interface for all tactical wireless systems. Commercial network management tools, ease of software development, and a worldwide infrastructure are just a few of the advantages a TCP/IP interface.  The commercial arena has recognized the requirement for a wireless “TCP lite” and recently approved the Wireless Application Protocol (WAP) and Bluetooth standards.  As commercial wireless standards emerge, they should be implemented appropriately.  The current proposals include gateways and bridges to the wired TCP/IP infrastructure.2.1 Commercial Protocol StacksTransmission Control Protocol Internet Protocol (TCP/IP) is the standard on which all global networks are built.  The protocols allow disparate computers and operating systems to interact across worldwide networks.   TCP/IP is implemented in abstraction layers that simplify the integration with host computers and the development of software.  Figure 1 depicts the commercial TCP/IP protocol stack used by Windows NT.  The NDIS abstraction layer is used to define a generic interface between network hardware and the software layers.  All network hardware (i.e. Ethernet, 100Mbit/s Ethernet, Token Ring) looks the same to Logical Link Control and Network layers.  The TCP/IP layers are used to route data around the network.  The IPv4 header imparts a 160 bit header per connection, the TCP header is 160 bits.  The UDP header is significantly smaller but still requires 64 bits per data packet [2].  The protocol has the advantage of enabling direct addressing to any computer in the world.A significant advantage of using a commercial operating system is that the routing function is built in.  Windows NT will allow access to data via the Point-to-Point (PPP) protocol and multiple Network Interface Cards can be placed in one computer to perform hardware translation.Figure 1. Windows NT Protocol StackFor wired networks the overhead of TCP/IP is not excessive, for wireless networks the universal addressing scheme is a burden.  Further, at the NDIS layer, additional information is required for effective management of the wireless datalink that is not available via TCP/IP.  Quality of the wireless link, battery status, and other information is required.  For military purposes a broadcast mechanism is required for situational awareness.As commercial wireless protocols develop, the issue becomes how to integrate existing legacy protocols with the commercial standard.  2.2 Legacy Protocol StacksExisting military datalinks were developed by platform communities and optimized for specific roles. In the military lower level protocols include the JTIDS/MIDS header, the MIL-STD-47001B header used by VMF systems, and satellite system protocols.  In the commercial world the equivalent would be the Media Access layer for Ethernet/Token Ring, TCP/UDP, and IP.EPLRS, Link-16, and TIBS were developed and optimized for the RF spectrum available to that community.  TADIL-J over Link-16 includes a very effective broadcast mechanism and up to twelve (12) 70-bit TADIL-J packets can be packed into one transmission opportunity.  The TADIL-J message standard is built around the 70-bit message format and is designed to fit within a 1553 Bus interface.  The protocol header is specific to the Link-16 timeslot.For ground units, EPLRS was optimized for the Army/Marines and is therefore in the UHF band.  To enhance the use of limited bandwidth the system includes the capability to assign timeslots and reprogram radio circuits on-the-fly.  The message standard has been optimized to ensure that multiple friendly reports can fit within one timeslot.  These types of optimizations are quite effective but military unique.  Obviously, carrying TADIL-J on EPLRS or visa versa will not be as efficient as the indigenous message standard.2.3 Tactical Internet Protocol StacksThe Army’s Tactical Internet uses TCP/IP to integrate legacy EPLRS and SINCGARS wireless radios into an Internet infrastructure.  Figure 2 depicts the protocol stack of the EPLRS radio. EPLRS is a circuit based radio and some of the circuits will transmit the full TCP/IP header across the wireless network.  As stated earlier, this is inefficient and other options have been implemented for the more common circuits.The Situational Awareness or “SA” circuit is a mechanism for broadcasting position reports.  The TCP/IP header is left off the data packets since they are not directed to a specific user, but broadcast among the EPLRS radio community.  A “two-bit” header is used to indicate the type of message being sent [3], friendly position reports or observed position reports.  This optimization allows two SA messages (240bits) to fit within the EPLRS timeslot.  Eliminating the 47001B and UDP-IP headers effectively doubles the throughput of the radio. EMBED Word.Picture.8  Figure 2. EPLRS TCP/IP InterfaceThese types of optimizations can be seen in Link-16, Link-11, TIBS, and CEC.  At the protocol level a router could be used to convert TADIL-J packets wrapped in the Link-16 protocol to TADIL-J packets wrapped in the EPLRS protocol.  For optimization of data exchange the ground forces have chosen the Variable Message Format (VMF) for their command and control and the JDN community uses TADIL-J.  This requires a true “gateway” since both the protocol and message standard need to be converted.2.4 Message StandardsAt the message standard level the military is moving towards TADIL-J and VMF, though OTHGOLD is still prevalent and there is a large collection of proprietary message standards throughout the DoD (Situational Awareness Data Link (SADL), Army FAAD, etc.).  As with protocols, message standard have been optimized for specific systems.  TADIL-J 70-bit messages are designed to fit into a single timeslot and error checking of the messages is performed in hardware.  The high resolution track data of CEC is in a unique format.  The Army’s VMF is an attempt at disconnecting the message standard from the hardware.  MIL-STD-47001B is used to manage the VMF datastream, and many of the fields in individual VMF messages can be deleted to reduce the overall length of each message.  Within reason, this feature ensures VMF messages can fit into a specific timeslot length.In the commercial arena the functional equivalent of message standards is file formats and database designs. MS Word is a classic example of a “standard” file format.  However, database formats are in many ways far more interesting since the “format” is exchanged via a “schema”.  When a client attaches to a Point-Of-Sale (POS) system they are given the schema.  No a priori knowledge of the fields in each record is required.  The end user can simply look up the structure.Rosetta borrows this very powerful concept of a database schema and applies it to a realtime system.  A large variety of datastreams can be added to the system simply by creating a text file that defines the schema.  Link-16 and VMF are defined using this technique along with the CEC messages, OTHGOLD, SABER, EPLRS, etc.2.5 Advantages of Commercial ProtocolsAlthough there are some striking differences between commercial networking and military wireless systems, there are some significant payoffs of moving towards a commercial protocol.  The most significant difference is the military’s extensive use of RF Broadcast.  With only a few exceptions, all the players in Link-16, Link-11, and EPLRS receive all the friendly position reports and the entire surveillance picture as a broadcast. This is the antithesis of the commercial Internet where the large majority of data is point-to-point.  Multicast is becoming very important to the Internet and may provide a solution to the military’s long term requirement for efficient broadcast of data.The advantages of a commercial architecture are the enormous quantity and high quality, software development tools, management tools, and architecture enhancement techniques.  Architectural options include MicroSoft Distributed Component Objects Modules (DCOM) and the Component Object Requester Broker (CORBA).  Both of these techniques enable separating software modules across any TCP/IP network.  This is extremely important to military wireless systems.  As depicted in Figure 3, DCOM enables physical access to legacy military systems via commercial networks [4].   The Rosetta RQL track sever can be directly attached to the Link-16 JTIDS/MIDS hardware via MIL-STD-1553.  The client’s GUI will “attach” to the DCOM server object over any commercial TCP/IP infrastructure.Figure 3. DCOM Interface to legacy wireless systemsCommon examples of this are the NATO Combined Air Operations Center (CAOC) in Vicenza, Italy which is not within line-of-sight of the Link-16 network in the Balkans theatre.  Using the Rosetta RQL track server and the JMMTIDS tactical display systems as the client, the CAOC becomes a full participant in the Link-16 network.  Other options include using a low cost commercial wireless system to integrate “disadvantaged” users into the Link-16 picture.  Note that Rosetta is required to translate message formats and manage the speed differences of the networks.Two major issues that have been addressed in Section 2 are the efficiency of various protocols in the wireless environment and packing messages into available timeslots and bandwidth.  Prior to discussing the gateway issue, the following section reviews each network. 3.0 Overview of JCTNThe Joint Composite Tracking Network is designed to share sensor data at a rate that allows guiding precision weapons.  Using the cooperative engagement capability (CEC) as a reference, sensor measurement data is exchanged among platforms once every two seconds or in the case of the CEC Patriot interface once every four seconds [5].  The platforms exchange a large Kalman filter to create tracks from the measurement data.  The advantage is that all platforms have the same data, perform the same computation, and can produce an identical track picture.Figure 3. JCTN ArchitectureThe system requires large processors to compute the Kalman filter results and a high speed wireless datalink, the Data Distribution System (DDS), to exchange measurement data. Although one of the radars in the system must initially declare a “track”, once a track is declared the other radars in the system can contribute to the measurement data.Several radars have been integrated into the JCTN including Aegis, Patriot, and TPS-59.  Since each Radar has unique element arrangement, frequency range, beam steering capability, and software interface, integrating these Radars is quite complex.  Often trade-offs are made that eliminate the use of a specific radar mode when operating as a JCTN.  Although the combination of the Radars has been demonstrated to be very effective, the cost has prevented installation beyond a few ships and demonstration systems. Further, relay platforms like the E-2C are critical for Over-the-Horizon targeting. 3.1 JCTN Sensor IntegrationThe resulting JCTN tracks have phenomenal accuracy and the majority of tracking errors are eliminated.  This level of track precision is increasingly more important as weapon accuracy increases.  The Balkans war has clearly identified the requirement to support the delivery of extremely accurate weapons. This does require a significant investment on the part of each platform. In the Patriot-CEC effort, the cost of each node is over ten million dollars. Although an extremely accurate system for pointing weapons, the JCTN does not include extensive ID information [5].  IFF data is combined with the radar measurement data but the ID information that currently exists on the JDN is not available on the JCTN.  The objective of the Rosetta gateway is to integrate the extreme accuracy of the JCTN tracks with the rich set of Identification information available on the JDN.  The Rosetta gateway’s flexibility enables realtime monitoring and update to the Information Exchange Requirements (IER) among the two networks.The Rosetta gateway can act as a standard interface to the JCTN (See section 6.0).  Standardizing the interface will significantly simplify and reduce the cost of integrating new sensors into the JCTN.  The objective is to address Electronic Warfare systems, FLIRs, and other passive systems without impacting the CEC Kalman filter or the DDS Interface. This will eliminate the requirement to write millions of dollars of C code for each new sensor integration.4.0 Overview of JDNThe Joint Data Network (JDN) will be an extension of the existing Link-16 architecture.  It is designed to manage the tracks from a wide variety of sensors (i.e. EW, IRST, Radar, etc.), perform track association, and perform command and control, see Figure 4.  The existing Link-16 system includes Surveillance, Fighter-to-Fighter, Electronic Warfare, and other circuits.  It is essentially a sensor to shooter network that operates nominally at 54Kbits/sec per user and 1Mbit/sec for the entire system.  Update rates for command and control are less than two seconds and sensor track rates vary from circuit to circuit but are nominally less than 12 seconds.  The message standard is designated TADIL-J.  It utilizes a combination of waveform and encoding techniques that make it virtually unjammable.  However, it also includes a variety of features that render the waveform hard to detect [6]. EMBED Word.Picture.8  Figure 4. Joint Data NetworkThe JDN includes the multi-sensor correlation capability of Link-16, see Figure 5.  Using the Link-16 relative navigation grid, multiple platforms can combine Electronic Warfare strobes to create an EW track.Figure 5.  Multi-Sensor Correlation in Link-16Existing tracks can be associated with data from another sensor to improve the probability of an identification.  Operators on the JDN use a wide variety of sensors to manage track IDs.  Track IDs are critical to command and control and need to be combined with the JCTN data to reduce fratricide and improve lethality.4.1 Other datalinks in the JDNAlthough Link-16 will be used as the backbone of the JDN, it is not the most common datalink.  As depicted in Figure 6, the JDN will include position reports and command and control information from a variety of datalinks including EPLRS, TIBS, IDM, and the various Intelligence datalinks.  The protocols used to access these wireless radios and the message standards transmitted are diverse.  The waveforms in these datalinks have been optimized for a specific environment and are a viable aspect of the JDN.  For instance HF Link-11 allows communications beyond Line-of-Sight (LOS) without a relay.Figure 6. Rosetta JDN Gateway.Combat ID systems are another important aspect of the JDN.  A variety of combat ID systems are available ranging from commercial off-the-shelf systems such as Qualcomm’s OmniTraks to military satellite based systems such as SABER.  SABER includes a limited 2-way capability.  SINCARS SIP radios have also been modified for Combat ID purposes.  Each of these radios includes critical information for the JDN picture, the location of friendlies. Hard coding all the datalink messages and information exchange requirements among these networks has proven to be financially and technically impossible. The Rosetta architecture eliminates static point-to-point gateways by using a realtime information processor at the core of its design.  This eliminates the NX problem created by building static translators among every datalink.  Although each radio has its own access methodology, message format, and data rate, the high speed information processing capability of Rosetta enables managing the information flow without writing software for each datalink.4.2 Tactical Internet in the JDNThe Army’s Tactical Internet is developing a JDN capability based on the EPLRS data radio and the SINCGARS voice/data radio.  Unlike Link-16, the Tactical Internet is not a sensor to shooter network but a command and control network.  The majority if the ID information will be generated with human intervention, friendly position reports are generated via GPS.  The initial implementation does not include a system of track management, but hostile entities can be reported.A unique aspect of the Tactical Internet is the use of commercial protocols for access.  The message standard is military unique, the Joint Variable Message Standard (JVMF), but the access protocol is commercial.  The Tactical Internet uses “PPP” to access both EPLRS and SINCGARS radios [3].  This is the military’s first foray into standard abstraction layers.  Several techniques have been used to reduce the impact of TCP/IP on the low bandwidth radios and are described in Section 2.3. Rosetta technology has been used to integrate the Army’s TI into the JDN (Link-16).  Demonstrations were performed at the Joint Interoperability Test Center (JITC).  Rosetta converted the access protocol to/from Link-16 and converted the message standard between TADIL-J and VMF.  The Information Exchange Requirements are implemented in an SQL like language eliminating the cost of software development each time the IERs change.  A Close Air Support aircraft on Link-16 exchanged target and cueing data with a Forward Air Controller (FAC) on the Tactical Internet.5.0 Rosetta ArchitectureThe Rosetta system is based on an object oriented high speed information processor, the Realtime SQL Engine (RQL).  It is uniquely suited to managing tracks and commands across datalinks with varying throughput and disparate data types.  Rosetta allows defining a series of information exchange requirements or forwarding rules that can be implemented based on virtually any series of events.  As depicted in Figure 7 the rules are described in the industry standard Structured Query Language (SQL) and implemented by the Forwarding Rules Object Gateway (FROG).  The objective is to take the Information Exchange Requirements (IER) out of C code and place them in the hands of the warfighter.In addition to the capability to translate data based on adaptive forwarding rules, Rosetta processes navigation data and acts as a host for a variety of datalinks including Link-16.  The system performs units tracking to ensure proper translation among datalinks.  Transmit and receive rules for Link-16, Link-11, EPLRS, etc are managed at a lower abstraction layer.  A laptop computer can act as the host for all the datalinks.  Clients to the host can be a cockpit display or palmtop computer. EMBED Word.Picture.8  Figure 7. Rosetta ArchitectureThe system includes a text parsing engine, the realtime SQL engine, and the Forwarding Rules Object Gateway.  The text parsing engine eliminates the need to write C code to implement a data link message.  All of the Link-16, Link-11, JVMF, GPS, and sensor messages are stored in text files that have been parsed from MIL-STD Documentation [7].  The Realtime SQL Engine (RQL) retains in memory tracks, commands, navigation data, and other information.   To ensure realtime data is available the Rosetta system is attached directly to the datalink and navigation hardware via 1553 or X.25 interfaces.  The hardware interfaces are abstracted and allow remote access to the data (Sensors, JTIDS, EPLRS, Navigation Data) via TCP/IP.  The data is pulled from the JTIDS terminal and navigation system every 50ms.  The Forwarding Rules Object Gateway (FROG) implements the information exchange requirements (IER).  IERs are stored as SQL “procedures” and are implemented based on a “where” clause.  The where clause can specify a mission phase, combination of aircraft, or geographic area in which to implement a specific forwarding rule.  For example a fighter plane with a limited cockpit display would have its display limited to the six friendlies closest to the target.  This would all be Implemented without writing any software.  The FROG makes RQL calls via the industry standard COM /DCOM [4] to retrieve and write the information.  The FROG has performed exchanges of thousands of tracks and commands in realtime.  Testing has shown that the FROG prepares data faster than a Link-16 timeslot opportunity can be made available to transmit the data in.6.0 Rosetta JDN to JCTN GatewayFrom the outset, the need for a JDN to JCTN gateway seemed self-evident.  Highly accurate tracking data on the JCTN needs to be utilized to improve the quality of the JDN tracking.  ID information available on the JDN needs to be merged with JCTN tracks.  Further, command and control data available on the JDN may change the deployment of the JCTN sensors.  These networks need to exchange information without adversely impacting either system. Figure 8. Rosetta JDN to JCTN GatewayThe Information Exchange Requirements (IERs) for these systems will be difficult to define.  For instance, where do EW sensors fit into the scheme, are they JCTN assets or JDN assets?  InfraRed sensors?  Is weapons control a JCTN issue or JDN issue?  The Link-16 weapons control circuit guarantees assigning targets to weapons in less than two seconds [8], is that update rate sufficient for the JCTN?  Interesting scenarios abound in a combined JCTN/JDN network.  For example, High speed beyond-line-of-sight target data generated by the JCTN could be passed to missile systems already in the JDN (i.e. F-14D Phoenix, F-15 AMRAAM, etc.).  The IERs will have to address the injection of JDN tracks into the JCTN.  In the JCTN measurement data is passed over wireless datalink via the Data Distribution System (DDS).  A broadcast protocol is used to transmit the packets to all participating units.  Currently once a track is declared each JCTN participant transmits the measurement and ID information they have available on that track.  Since no compression is used, each new sensor multiplies the amount of data on the JCTN.  Adding multiple JDN sensors into the JCTN would create a large volume of traffic on the DDS.  Again, the requirement for an adaptive gateway is clear.  The gateway must adapt to the Mission phase and forward only the sensor tracks and ID information critical to current events.6.1 JCTN and JDN Message FormatsCurrently, the information exchange format on the JCTN is 32-bit measurement data [5].  CEC, the Patriot radar and TPS-59 radar each have their own format of measurement data.  The complexity, volume of equipment, and cost required to integrate a new Radar into the existing CEC system has prevented wide acceptance of the system.  In contrast, the JDN standard message formats are lowering the cost of system integration.  Based on a open standard, the number of contractors with JTIDS experience is still growing and platform integration cost continues to decline.A standard message format for the JCTN will be required to simplify the integration and lower cost.  Using an existing TADIL-J sensor format would enable instant accessibility to a wide variety of platforms.  The measurement data may be limited to fit within the 70-bit format of Link-16.  In the interim, the Rosetta Gateway will be used to translate between existing message formats.Another message format issue is track identification.  No common track ID format exists across JCTN sensors.  On the JDN, the ID formats are shared among TADIL-J and JVMF.  Commonality exists down to the level of “Platform Identifiers” (i.e. F-14 aircraft, T-71 tank, etc.).  There are some differences in the level of detail between JVMF and TADIL-J.  These types of issues are addressed in the Forwarding Rules Object Gateway via an RQL procedure call.  To eliminate creating another standard, the existing JDN ID definitions should be maintained.6.2 Low level interface requirementsNormally, the Rosetta Data Link Layer software performs the low level radio interface functions.  The function is performed in a device drivers under Windows NT.  Unlike the abstraction of a Windows NT device driver, the CEC protocol is tightly integrated with the Data Distribution System.  The interface and protocol on the DDS is quite different than a standard datalink and is proprietary effectively eliminating the possibility to interface at this level.The Patriot-CEC program utilizes standard TCP/IP protocols to exchange measurement data over an Ethernet.  This interface has been published in several documents and it is therefore an obvious choice.  Note that in the CEC Patriot demos, no Track ID information was exchanged.  As part of the Theatre Air Missile Defense Interoperability (TAMDI) ACTD a two-way interface to CEC is being developed.  This interface will be used as the mechanism to implement a JDN to JCTN gateway.  Track ID and Track data will be exchanged as defined by the IERs in the FROG.6.3 IERs and Correlation across the networksWe have discussed the low level interface requirements and the protocol translations required for a JDN to JCTN gateway.  Once the data is available to the RQL Engine the FROG will be used to define JDN to JCTN information exchange.  The RQL engine offers a common (WGS-84) realtime source of both JDN and JCTN data and therefore a unique opportunity for track /ID correlation. Although the JCTN nodes exchange measurement data, their Kalman filters do declare tracks. These tracks need to be correlated with the JDN.  When a track correlates the Rosetta engine will transmit drop track commands and associate track commands across both the JDN and JCTN.  In a similar fashion the ID information on the JDN will have to be managed across the JCTN networks. ID difference reports, IFF difference reports, and other conflicts will have to be resolved.  Often this requires modifying the IERs for a specific theatre.Track loading will be a significant issue in the JDN to JCTN Gateway.  A combination of Warfighter IERs and Correlation will actually reduce the loading.  Using the FROG, ground tracks can be eliminated from the JCTN.  To reduce the JDN track load correlation prior to forwarding eliminates redundant tracks.  In addition to data link interoperability, the Rosetta Architecture will allow integration of new sensors.  Platforms with slow rotating radars and a JTIDS/MIDS terminal (i.e. AWACS) could become participants in the JCTN. The bandwidth required to transmit all the JCTN measurement data on the JDN does not exist, however, the adaptive gateway could select data in an area of interest and transmit that over a private Link-16 circuit.   Other first order compression effects include use of commercial modem compression and only transmitting track changes or higher quality data.7.0 Simulation of a JCTN to JDN gatewaySeveral papers have been written on simulating the CEC Sensor system [9] and the features of the Link-16 waveform [6].  However daunting the complexity of the waveforms are, modeling the gateway between them may be a more significant effort.  The JCTN to JDN gateway will impact the command and control infrastructure at two levels.  First, given the limited bandwidth available on all networks the warfighter will have to determine what data is exchanged across the realtime networks.  This will be implemented as part of the Comm Plan and will most likely change with mission phases.  Second, once the forwarding rules are implemented the actual exchange of ID and track data will need to be defined in a FOM.The nuances of defining a FOM for a gateway are significant.  As track loading increases, the latency associated with track forwarding needs to increase.  Often this is not a linear function.  Depending on the network, the time required to acknowledge a command and control message also increases with loading. One trade-off of a gateway is that often not all messages can be translated directly among disparate datalinks.  This also requires careful modeling.Since the Rosetta realtime RQL engine is a COM object it seems prudent to consider simply defining it as a FOM.  The inputs and outputs are well defined by the TADIL-J Interface Control Document it parses at initialization and it can be accessed from anywhere in the network using industry standard SQL calls.   The FROG is also a COM object and its implementation of Information Exchange Requirements should also be included in the FOM.  Trying to emulate the realtime translation capability of the FROG would be much more difficult than using the actual object.  The Rosetta RQL engine and the FROG require and HLA protocol interface, but already support TCP/IP.  As in the Balkans, almost all military operations are Joint and many are NATO combined.  The use of gateways to tie together the Command and Control architecture has become ubiquitous.  Gateway simulation is not an option for Future HLA exercises.8.0 Future Protocols and Distributed Objects.The move to commercial protocols will not be easy.  The complexity of building new low level interface drivers, new protocol drivers, and new message standards for every legacy Tactical, Combat ID, Intelligence, and Strategic system in the military is impractical.  Adaptive gateways will be required to support legacy datalinks while new datalinks utilize the emerging commercial standards.  The drawback of not being able to take advantage of breakthroughs in the commercial world is that we may lose the information war.  It’s quite possible that commercial wireless systems will far outperform military systems in the near future.To ensure that military systems can leverage the rapid development of commercial wireless systems several key concepts needs to be addressed:--Low Level Interfaces--Wireless Protocols--Intelligent Distributed Software ObjectsThe commercial “Bluetooth” consortium is developing an end-to-end commercial wireless system. It will include a common low level interface, protocols to efficiently transfer data over wireless networks, and high level software objects that will allow systems to negotiate capability.  Current Bluetooth systems include 721 kb/s uplink and 57.6 kb/s downlink or 432.6 kb/s symmetric link.  The transceiver fits on a chip in a cell phone.  By approving the Bluetooth Link Management Protocol as a standard interface, the military can begin to take advantage of extremely inexpensive wireless datalinks.  More significantly, the Bluetooth specifications standardize the bridge from fixed TCP/IP systems to mobile wireless systems.  Add a higher level, the Wireless Application Protocol (WAP) standard will bring email and other web related services to wireless systems.  Adding these capabilities to the Rosetta JDN-JCTN gateway will be relatively easy.The more significant technical effort is Distributed software modules.  The Rosetta system is fully Distributed Component Object Module (DCOM) compliant.  This allows the Rosetta RQL track database to reside next to the transceiver, and a client to pull data from the system anywhere a TCP/IP connection can be made.  Relying on commercial tools, the flexibility this offers is enormous.  Commercial network management tools can be used to monitor the status of the JDN or JCTN.  In the Balkans theatre the JDN (Link-16) network management is performed in Vicenza using a remote Rosetta system connected via a standard network router and DCOM to a JTIDS terminal 300 Kilometers closer to the AWACS route. 9.0 ConclusionThe experience with Rosetta Technology in the Balkans has clearly shown the long term requirement for an adaptive gateway that allows the warfighter to control the Information Exchange Requirements (IERs).  Different Army units bring different Combat ID systems, EPLRS is fielded in some units, the Marines use PLRS, and at least four major aircraft datalinks were represented. The priority of information changed as the war progressed.  Initially, enemy targets were the focus, next it was avoiding fleeing civilians, and finally in the peacetime environment, the location of friendly forces on the ground is paramount.  Each of these changes requires a new set of IERs.Although operational testing will answer many of these issues, the IERs and Forwarding Rules may take years to refine and they will never be static.  The FROG’s SQL language has enabled the Warfighter to take control of the IERs and forward the data they believe is significant.  The ability to adapt to a wide variety of realtime Combat ID systems, datalinks, and military unique protocols has placed Rosetta in the forefront of tactical C4I.  Simply forwarding data is not enough, Rosetta leverages the existing military radios to ensure the efficiency of the datalinks is not burdened with commercial protocols, while making commercial realtime access available via TCP/IP.  Rosetta will also enable a transition to Bluetooth and other commercial wireless systems.  At this point it is perceived that the Rosetta software would be stored in firmware and controlled externally.  For these reasons, the Rosetta technology SQL based forwarding system is uniquely suited to development, testing, and deployment of a JDN to JCTN Gateway.10.0 References[1] Lyles, Lieutenant General Lester L. USAF Director, Ballistic Missile Defense Organization before the Subcommittee on Research & Development Committee on National Security U. S. House of Representatives March 6, 1997.[2] Thomas, S.(1976). Ipng and the TCP/IP Protocols. New York: Wiley Computer Publishing,c1996.[3]  TRW (1998). FBCB2 Summary Tactical Internet System Design Document - Document Number D27080. USArmy CECOM SFAE C3SFB Monmouth NJ,   September 23, 1998.[4] Grimes, G. O. (1997). DCOM Programming. Canada, WROX Press.[5] E-Systems (1998). CEC Patriot Interface Design Document No. 58-02862-001. Revision A., 15 September, 1998.[6] Yanni, P.: "Modeling Comm Planning and Advanced Datalinks in the DIS/HLA Environment", Spring  1997 Simulation Interoperability Workshop.[7] Yanni, P.: "A VMF / Link-16 / Simulation Gateway;      Addressing the complexity of datalink   interoperability.", Spring  1999 Simulation Interoperability Workshop[8] DOD (1999).  Interface Standard TADIL-J MIL STD-6016A. JEBCA Reston VA, 30 April 1999.[9] Figart, G., Slaton, C.: " Development of Phased Array   Radar Simulations in DIS++”, Paper No: 97S-SIW-088 , Spring Simulation Interoperability Workshop.  Author BiographyPHILIP YANNI holds a BSE from the University of Pennsylvania.  He has 15 years of experience in commercial and military avionics and simulation.  He has been Principal Investigator for HLA/DIS programs.  In his role as a communications engineer, he specializes in developing hardware to bring Internet protocols onboard commercial and military aircraft. He is chief engineer for the Link-16/VMF Rosetta gateway and the project manager for the JTIDS Moving Map Tactical Information Display System (JMMTIDS).  He is currently the Program Manager for the JCTN-JDN Rosetta Gateway.  JMMTIDS won the Microsoft Software Development of the year award at Comdex 1998 and Rosetta is the 1999 winner.