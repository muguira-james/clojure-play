Rapid Prototyping Using Simulation FrameworksBob McCauley, Michael TackaberryLockheed Martin Information Systems (LMIS)12506 Lake Underhill DriveOrlando, FL  32825-5002 HYPERLINK mailto:Rob.mccauley@lmco.com Rob.mccauley@lmco.com HYPERLINK mailto:Michael.W.Tackaberry@lmco.com Michael.W.Tackaberry@lmco.comKeywords:Framework, Simulation, WARSIM 2000, Object Oriented, Rapid Prototype, FLAMES, Behavior ModelingABSTRACT: This paper documents the results of an effort that used a simulation framework for rapid prototyping experiments involving the development of behavior models in the Testbed of the Army Warfighters' Simulation (WARSIM) 2000 program. Typical testbed efforts require significant effort to build an infrastructure which is required before meaningful experiments and research can proceed. Results of this effort indicate that use of frameworks provides this infrastructure, and this significantly increases productivity in that the developers can focus on one area, such as behavior modeling.1.   IntroductionThe U.S. Army Simulation, Training, and Instrumentation Command (STRICOM) Warfighters’ Simulation (WARSIM) 2000 is an Army war game training system that integrates constructive, virtual and live simulations.  WARSIM 2000 includes the development of a constructive simulation that trains echelon levels from battalion to echelon above corps.  The WARSIM 2000 program involves behavior modeling of commanders’ decisions with the concept of perceived truth involved in the formulation of these decisions. WARSIM 2000 is a distributed simulation with centers connected to remote training stations that are located near or moved to training sites all over the world.  These remote training stations allow commanders and their staffs to train where they fight (in command posts in the field) and as they fight (with organic communications equipment).This document presents results of the WARSIM 2000 Testbed investigation of using a simulation framework as a rapid prototyping tool for building battlefield scenarios and for testing algorithms, both new and from legacy code, including those for modeling behavior during a military mission.   Areas of study included: establishment of an order of echelon from brigade commander to individual tank commander, communications of orders and reports between echelons, maneuver of units toward an objective, battle assessment, and two-way communications with an actual Command, Control, Communications, Computer and Intelligence (C4I) system.  This paper presents this information by describing:A sample simulation vignette (2.)Units and Equipment Models (3.)Units and Behavior Models (4.)C4I Interface (5.)Simulation Framework (6.)Conclusions (7.)Future Work (8.)2.   Battalion Hasty Attack VignetteThe simulation prototype investigation focused on a battalion-level vignette.  The term vignette is used as opposed to scenario, in that a vignette is a small portion of a typical wargaming scenario. The vignette portrayed an armor heavy task force battalion, commanded by LTC Hogan, and an enemy armor tank company.  Initially the task force is on a northward march with its parent brigade.  This start position is shown in Figure 1. LTC Hogan is ordered to attack the enemy company, which is deemed a threat to the brigade achieving its objective.  LTC Hogan decides to attack with two teams up and one back and to provide fire support from the enemy’s left flank.  He orders Team B to proceed to the left flank of the enemy and Teams A and C to move to just south of the enemy’s position.  Team D is ordered to a position south of Teams A and C and to act as a reserve for the task force.  Each simulated tank commander is able to scan the battlefield for enemy targets.  When found, targets are fired on and destroyed.  Figure 2 shows the final battlefield layout with the enemy company destroyed.3.   Units and Equipment ModelsA unit is fundamental in the simulation.  Usually a unit represents a thinking person such as a tank commander or a platoon leader.  The framework allows for construction of unit configuration tables that include equipment models and behavior models.  Equipment models include platforms, communications devices, data processors, sensors, jammers, weapons, subsystems, and munitions.  In the task force vignette, M1A2 and T72 tanks, and Bradley fighting vehicles served as platforms.  SINCGARS radios were used to communicate over multiple radio networks.  Human vision and 3x and 10x reticles are sensors used to scan for targets.Equipment device models are built using object-oriented inheritance from foundational or primary classes of equipment, which are delineated by the eight types mentioned above.  These eight classes inherit attributes and operations from the primary equipment class.  New, more specific equipment models inherit data and functionality from the primary classes.  This object-oriented class structure is constructed in accordance with the Object Management Technique (OMT) methodology as described in [1], [2], and  [3].4.   Units and Behavior ModelsThe unit configuration file also contains references to behavior model software that was written by testbed personnel using ADA95.  These software behavior models are executed at some fixed simulation time or periodic set of times, or as a result of an event such as spotting an enemy force or receiving a message over the radio.4. 1 Establishing the Military HierarchyTwo behavior models that involve non-radio communications are used to establish the chain of command that, among other things, sets the stage for use of radio communications.  For each simulation unit, a commander, a military unit, and a radio network is assigned.  The exercise designer places these parameters in the configuration unit.  During exercise initialization, a behavior model is called which extracts these parameters.  The unit creates (one time) and maintains its own database that includes this administrative data.  The unit also sends this data to its commander unit in the form of a function call with the data in the function’s parameter list.  As a result of this call a commander unit behavior model will be executed.  Each commander, that is a platoon leader or higher, will use this second initialization behavior model.  The model is called once for each subordinate assigned to the commander.  The commander receives the administrative data from each subordinate and inserts this data in the unit database.When all units have completed the initialization process, the distributed command hierarchy, which represents an important part of the table of organization and equipment (TOE), is completed.  Each unit knows which units it can communicate with during battle operations.As an example of the above process, consider one unit, CPT Midnight.  The behavior model, ADA95 function, IamTeamCmdr is executed at the start of the simulation exercise.  From this, CPT Midnight learns that he leads Team A, he reports to LTC Hogan, and he uses radio network #3.  This information is passed to unit LTC Hogan as parameters in a call to the ADA95 function, ProcDataFromTeamCmdr.  CPT Midnight’s behavior model represented by function, ProcDataFromPltLdr will be called four times, once per platoon leader.  CPT Midnight then knows who his platoon leaders are, which platoons they lead (1st, 2nd, 3rd, 4th), and gets verifications of the team radio network.  Thus, when CPT Midnight gets an order to maneuver from LTC Hogan, he knows whom to call to pass on his own orders to coordinate the maneuver for the whole team.4.2  Communications Behavior ModelsWith the military hierarchy in place, commanders use two more behavior models for sending and receiving messages that can be orders, reports, or requests. Sending and receiving of radio messages are event driven.  For example a unit decides to send a message if it spots an enemy force, is fired on, or crosses a phase line.  Message reception is automatic so long as the units involved have radios and have them set to the same frequency.  In the testbed simulation, a message containing an order to move triggers the transmission of a sequence of like messages down through the chain of command.  The framework provides a delay mechanism to allow the simulation to pass time for commanders decision processes.4.3   Maneuver Control ModelThe behavior model for maneuver control is executed following communications of orders.  The basic order passed between echelons in the task force vignette is used to direct units to positions near to an enemy site.  Each echelon commander decides where to place subordinate units.  In the vignette, all attacking units end up in spaced line formations facing the enemy.  Units from the task force break off from the Brigade march at the same time as specified in each order.  This synchronization is orchestrated through the frameworks simulation time functions.  By examining the current simulation time and subtracting it from the time in the order, each unit can request an accurate delay before the actual move function is called.  The move function behavior model gains access to the unit’s platform equipment model and invokes a control function with coordinates and speed parameters to redirect the vehicle toward its unit objective.4.4   Battle Assessment ModelEach tank commander performs a battle assessment function on a continual basis defined by a repeat time value.  In the testbed taskforce vignette the time was set to 15 seconds.  In a more sophisticated scenario this time interval can be changed during the scenario.  For example, when marching in friendly areas the interval could be made longer, but when in a firefight the interval could be made shorter.  The assessment behavior model makes use of the vision sensor equipment model and its related data processor, which it uses to detect enemy targets.  Figure 3 shows a unit’s visibility frustum, which represents the volume of space that a tank commander can see using the vision sensor.  The volume is limited by horizontal azimuth and vertical elevation angles and by a maximum range for discerning targets.  These parameters can be controlled from application software.  In the task force vignette, the azimuth extent is increased to represent tank turret sluing that completely covers the unit’s assigned search sector during the 15-second period between assessment calls.  The framework’s data processor presents the application with a list of all targets included in the unit’s visibility function.  Figure 3 shows four targets in the unit’s general vicinity.  Targets 2 and 4 are outside the unit frustum and are not reported.  Targets 1 and 3 are reported.  The assessment behavior model is able to reject Target 3 as a viable target as well.  A terrain masked function provided by the framework allows the developer to check for occulting terrain surfaces standing in the way between the positions of two units.  In this case a hill obscures the unit’s view of Target 3.  The unit will concentrate fire on Target 1, if it is an enemy unit.  In the testbed prototype, access to unit information will tell friendly from enemy.  This is ground truth.  WARSIM 2000 will use perceived truth.  Sensor models will be more complex; weather effects (e.g. fog) and road dust will be considered; etc.4.5   ReuseCode and algorithms from Close Combat Tactical Trainer (CCTT) and Modular Semi-Automated Forces (ModSAF) were examined for possible reuse in the battalion task force model.  Several Finite State Machine modules from CCTT were ported to the prototype system.  The functionality used included movement, occupying primary and secondary positions, scanning for enemy targets, and firing at and destroying enemy targets.5.   C4I InterfaceA simulation client program was also developed in the WARSIM 2000 Testbed. A Command Post Interface (CPI) application, called “cpi”, was created to communicate with an actual Command, Control, Communications, Computer and Intelligence (C4I) system. Units in the simulation program create situation reports containing unit locations that are to be used by the C4I system.  These reports are accessed by the CPI and transferred over a network to the maneuver control system (MCS/P) Beta C4I system.  The mechanism for transfer is e-mail.An operations officer at the C4I workstation can create an order for a unit in the simulation.  This order is received at the simulation workstation as e-mail and forwarded to another client application called “readmail”.  The order, in military text format (MTF), is parsed by readmail for information including unit identification and location destination.  This data is passed on to the simulation which initiates actual platform motion for the unit.6.   Simulation FrameworkThe simulation framework chosen for the WARSIM 2000 Testbed prototyping activities was the Force Level and Mission Effectiveness System (FLAMES) tool set produced by Ternion, Corp [4]. The architecture of this framework was similar to that of WARSIM 2000’s domain architecture. The tool set includes a graphical editor for creating configuration files that define scenario characteristics (e.g. start and end simulation times) and assigning equipment models and (user-programmed) behavior models to units.  The tool set also includes a scenario visualization tool for 2-D and 3-D display of units on a colored background, where colors map to database altitude bands. An analysis and reduction tool uses a simulation results file to provide summary after-action reports.The tool set’s simulation runs at speeds slower than, faster than, or equal to real time.  The executable code consists of a kernel object library and the user defined code linked with the kernel.  The kernel library contains many useful functions, all accessible to the simulation software developer.7.  ConclusionsThe use of a rapid prototype framework in a testbed type of environment is useful and efficient.  A typical testbed effort requires significant effort to build an infrastructure before meaningful experiments and research can be performed.  The alternatives are to either grow a corporate testbed over time, adding additional staffing, or to use legacy systems as a starting point, or to use a framework. The drawback of growing a testbed and adding manpower is cost. The decision to use a framework as opposed to using a legacy system depends upon the system to be built and the flexibility of the legacy system.  In the case of the WARSIM 2000 Testbed, the absence of a flexible, easily modifiable, object-oriented legacy system made it logical to choose a framework. The framework chosen, while presenting a learning curve, was easy to use. With a sufficient set of behavior models in place, many kinds of scenarios, small and large, can be created and tested quickly without further compiling or linking.  Scenarios developed previous to this study did have behavior models developed in the c language.In this study ADA95 was used to create behavior models.  This presented another learning curve for developers.  However, porting of CCTT software was somewhat easier because it had been written in ADA83.  The use of make files to link the framework kernel with the new code was straightforward.  It was necessary to provide include files with one-line ADA prototypes and one line pragmas for translation to c which was the language used to create the framework kernel.  Also, some care was required for data types and pointers used as parameters in kernel function calls. 8.   Future WorkThe scenarios and behavior models created up to this point in time have been simple and primitive.  The testbed team expects to profit from work currently being undertaken by the WARSIM knowledge acquisition (KA) group and other groups defining the functional description of the battlefield (FDB).The WARSIM simulation concurrent engineering team will provide expertise in the areas of equipment, unit behavior models, and perceived truth.  They will provide a richer set of models for study.Future scenarios will contain more input from subject matter experts.  Materials for examples will be procured from military training centers.The work on C4I interfacing will be expanded to include distributed simulation, multiple C4I stations, and a more realistic set of orders and reports.  Additional Army Tactical Command and Control Systems (ATCCS) equipment will be obtained and interfaced to.The framework will include functional access to compact terrain databases (CTDBs) maintained in a ModSAF system.9.   References[1] James Rumbaugh, Michael Blaha, William Premerlani, Frederick Eddy, William Lorenson.  Object Modeling and Design. Prentice Hall 1991[2] Ken Castner and Bob McCauley “Object Oriented Analysis - Case Study” 1996 Fall Interoperability Workshop - September 1996. [3] Les Habel, Tom Baran, Ken Castner, and Bob McCauley “Environmental Truth - Object Oriented Analysis in WARSIM 2000” 1997 Spring Interoperability Workshop - March 1997[4] Ternion Corp. “Reference Manual for the Force Level Analysis and Mission Effectiveness System (FLAMES(). Copyright(1996 by Ternion Corporation, Huntsville AL.10.    Author’s BiographiesBob McCauley is the Testbed Manager on the WARSIM 2000 program for the Lockheed Martin Information Systems company.Michael Tackaberry is a Systems Engineer on the WARSIM 2000 program for the Lockheed Martin Information Systems company. He is a member of the Simulation Concurrent Engineering Team.Team DFigure 2 – Task Force Final Battle PositionsTeam BTeam CTeam ALTC HoganEnemyDestroyedUnitElevation RangeAzimuth RangeMaximum Range Target 1Figure 3 – Unit Visibility Frustum Target 4Target 3Target 2HillViewpointTeam DFigure 1 – Task Force Vignette Start PositionsReported EnemyCompany PositionTeam BTeam CTeam ALTC Hogan