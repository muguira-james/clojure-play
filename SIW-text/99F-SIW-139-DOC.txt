Computer Generated Forces requirements for an Embedded Simulation SystemJohn Brabbs, Kevin HopeUS ARMY TACOMAMSTA-TR-R/264  Warren, MI   48397   USA810-574-6242Fax: 810-574-5008brabbsj@tacom.army.milhopeke@tacom.army.milKeywords:Embedded Simulation, Distributed Simulation, Computer Generated Forces, Embedded Training    ABSTRACT: The US Army is currently prototyping an Embedded Simulation System (ESS) for ground combat vehicles under the Inter-Vehicle Embedded Simulation Technology (INVEST) Science & Technology Objective (STO) and Intra Vehicle Electronics Suite (IVES) STO.  One of the tasks of the ESS is to provide computer-generated forces (CGF) for enemy and friendly force entity generation as part of the simulation. The Tank-Automotive Research, Development & Engineering Center (TARDEC) will be demonstrating a second generation ESS prototype in the VETRONICS Technology Testbed (VTT) Vehicle in CY2000 with a CGF System onboard. This paper addresses the requirements for an Embedded Simulation System CGF.Overview of ProgramThe Simulation, Training and Instrumentation Command (STRICOM) and the Tank-Automotive Research, Development & Engineering Center (TARDEC) are working jointly to bring Embedded Simulation (ES) to the Army. ES is the concept of embedding the capability in the vehicle to allow a ‘virtual world’ to be displayed to the crew and to have virtual interaction with vehicle subsystems in support of the Training, Mission Rehearsal, Battlefield Visualization, Command Coordination, and Test & Evaluation. ES will help provide the Mounted Soldier with more information, mission rehearsal in the fighting vehicle, and enhance soldiers training.STRICOM and TARDEC are developing a common hardware and software architecture that will enable successful integration of Embedded Simulation (ES) into ground combat vehicles.   The STRICOM effort is being worked under the Inter-Vehicle Embedded Simulation Technology (INVEST) STO and the TARDEC’s effort is being worked as part of the VETRONICS Technology Testbed (VTT) under the Inter-Vehicle Electronics Suite (IVES) STO. ES combines the capability that exists in the current Army ground vehicle Soldier-in-the Loop simulators like Simulation-Network (SIMNET), Close Combat Tactical Trainer (CCTT) and VETRONICS Simulation Facility (VSF) (see figure 1) with the VETRONICS in the M1A2 System Enhancement Project (SEP), Bradley A3, and VETRONICS System Integration Lab.Figure 1: VSF Crewman’s Associate SimulatorThe purpose of this paper is to addresses the requirements for a Computer Generated Forces (CGF) system that can support TARDEC’s VETRONICS Technology Testbed Embedded Simulation System (ESS) architecture.VETRONICS Technology Testbed (VTT)The VTT (see Figure 2) program is part of an on-going S&T based effort to advance and apply the technologies required for reduced crew operations of close combat vehicles. The VTT is a follow-on to the Crewman’s Associate Advanced Technology Demonstration (CA ATD) program.  In the VTT phase, critical user interface and support technologies will be applied to a vehicle demonstrator to demonstrate their ability to function in a combat vehicle environment while contributing to crew workload reduction.  These technologies include: speech recognition, 3D audio, indirect vision driving, advanced user control handles, advanced embedded architectures and embedded simulation.  Embedded simulation has significant potential to reduce crew workload both from improved training and from aiding user interface and understanding for virtually all combat vehicle functions. The VTT will be operated and controlled by two primary crewmembers, a unified Commander/Driver and a Gunner. In support of the crew, the VTT will contain two separate and distinct but identical crew stations.  Each crew station will be capable of supporting either a Commander/Driver or Gunner with the restriction that only on instance of each may be active at any given time.  The two crew stations will also be physically reconfigurable to support either a “side by side” orientation or a “front to back” orientation.  The advanced crew stations (see figure 1) that were designed and simulated under the CA ATD phase, will be reconstructed using rugged, real-time hardware and software modules and integrated into an actual ground combat, the VTT vehicle (see figure 2).  The combat vehicle will be comparable (mobility, size, weight, etc.) to the currently envisioned Future Scout & Cavalry System, Future Infantry Vehicle and Future Combat System family of vehicles.Figure 2: Vetronics Technology Testbed VehicleEmbedded Simulation SystemThe Embedded Simulation System (ESS) has been designed with an open architecture to be easily integrated into any vehicle and allow the vehicle control over the ESS.  The ESS hardware and software architecture is designed to only simulate the subsystems the vehicles operational hardware/software can not run because of the state of the vehicle.  An example would be stationary drivers training, where the ESS would simulate the mobility of the vehicle but the vehicle would provide the inputs from the control devices. The VTT ESS is a PC Based Architecture running the LINUX operating system (see Figure 3).  The VTT ESS will use four Dual Pentium PC’s to host the simulation software and one Dual Pentium PC to host the Computer Generated Forces software.  The four PC’s hosting the simulation software will each also have two Quantum3D graphic cards (for a total of 8) for doing 3D Virtual World simulation.  The five PCs will be networked together with a 100 Mbits/sec Ethernet.  The ESS will be connected to the Vehicle via one of the PCs with a second 100 Mbits/sec Ethernet.  The CGF Entities will communicate with the simulation processes using the High Level Architecture.The ESS is a critical piece of the VTT.  A decision was made early in the VTT design that for the first VTT demonstration in CY2000, the VTT would not use real sensors for the advanced crewstations.  The plan for the VTT in CY2000 demo is to use the capability of the ESS to simulate the two sensors. The ESS B-Kit has three modes in the VTT, (1) Training, (2) Operational, and (3) Mission Rehearsal.  For the ESS in the VTT, both Training and Mission Rehearsal modes will be conducted in a stationary mode with the engine off and wall power used.  The Operational mode will be conducted on the move.  All three modes require both friendly and enemy entity generations.Figure 3: VTT Embedded Simulation System ArchitectureESS RequirementsThe Embedded Simulation System (ESS) must have the capability to reproduce real life situations for the soldiers to train with.  This is quite possible using some capabilities of the Computer-Generated Force (CGF) software.  Currently, there are two ways to control the CGF software: the graphical user interface (GUI) and the parser.  The GUI allows the user to use a mouse to control the CGF software.  The parser on the other hand is command-line driven.Both of these control methods require human interaction, which becomes a problem when the ESS is to be independent.  There is a need for a transition from a human-in-the loop CGF system to a human-out-of-the loop system.  Currently, it is possible to start up the CGF software and begin running a saved scenario without the intervention a human, but this method limits the complexity of the scenarios and requires a relatively large amount of time to change scenarios.Once the CGF software has been started and the scenario loaded, all control of the CGF software is gone.  This dictates that the scenarios must be completely scripted before running the simulation, eliminating the possibility of the CGF entities to act in response to any actions taken by the simulator.  This reduces the ability to produce real-life situations for the soldiers to train in.  Switching scenarios also becomes a problem due to losing control of the CGF software.  In the current configuration, the only way to stop one scenario and run another one is to kill the CGF process itself and then restart it with a different scenario.To overcome these drawbacks, a new method for controlling the CGF software must be developed.  This method must replace the actions of a human controlling the CGF software. Requirements for the CGF software were identified by observing what human actions were needed to run exercises and experiments with the CGF software.Simulation Demonstration RequirementsThe main objective of the VTT is to demonstrate the capability of one crewmember to perform the functions of both the vehicle Commander and Driver.  The demonstration must take place while operating over military significant terrain and while performing a military significant mission.  The ESS will be demonstrated using the three modes in the VTT, (1) Training, (2) Operational, and (3) Mission Rehearsal.  The purpose of the Embedded Training mode is to allow the crewman to hone their skills of vehicle operation.   They will accomplish this task by engaging in a simulation that will require the user to utilize the vehicle facilities as if under a normal Operational State.  At the end of the training scenario, the crewman will get to review the results of the session as well as results of previous sessions to check progression.The Mission Rehearsal mode will allow the crew of the VTT to view the content of an Operation or Frago order in a virtual world.  The crewmen will have the ability to select an order that has been received by the Command and Control (C2) system and the system will automatically setup a scenario based on the information in the order.  The setup will entail the placement of enemy and/or friendly support vehicles in the virtual world.  The user can then either view the virtual world using the Battlefield Visualization Viewer or edit the scenario to add detail.The Operational mode will allow the vehicle to be fully operational with two simulated sensors.  During Operational mode the VETRONICS Technology Testbed (VTT) will use Data Collection Exercises (DCE).  The purpose of the VTT DCEs is to create the tactical environment and situations, which will stimulate tactical responses and generate data for comparative evaluation from different tank crews.  The DCEs will based off of the Crewman’s Associate Advanced Technology Demonstration DCEs from 1995-96.  The scope of the DCEs will be bounded to gain the largest amount of data possible in a limited scale test.  The DCEs will consist of a set of six tactical exercises, which can be conducted during the course of one day.  In general, the tactical exercises will be linked together in a realistic, logical order, e.g. road march, assault from movement to contact, react to flank contact, withdraw under pressure, etc.CGF RequirementsRemote Start and StopWith the absence of a human to start the CGF software, it is necessary that the CGF software possess the ability to be started by another process.  The process may be running on the same host, or a different host connected to the same network.   The CGF software must also possess the ability to be stopped by another process.This capability is currently possible by using a remote shell.  The calling process issues the remote shell command along with the command to be executed on the remote host.  In this case, the CGF software execution command is given along with its command line options.  It is necessary that the CGF software possess the ability to be started by another process.  The process may be running on the same host, or a different host connected to the same network.   The CGF software must also possess the ability to be stopped by another process.Remote Loading, Starting  and Stopping ScenarioOnce the CGF software has been started, one or more saved scenarios will need to be loaded in order to produce entities for a soldier to interact with.  As mentioned in the Embedded Simulation Requirements section, scenarios can be loaded during the start up of the CGF software. The capability of loading and stopping a scenario by another process would increase the efficiency of the system.  To switch scenarios, the CGF software process would not have to be killed and then restarted.  Instead, a process could make a call to stop the current scenarios and then make a call to load the new scenario.  The time required to stop and start scenarios is significantly less than the time required to bring up the CGF software.  In the current configuration, the scenario starts to execute immediately after being loaded.  This can cause timing problems between the simulator and the CGF software.  The time it takes for the CGF software to start up, varies depending on the number of processes running on the host and the size of the scenario being loaded, so there is no way to tell for sure when the scenario is ready to run.  To avoid a timing problem, it is necessary to be able to tell when a scenario is ready to run or be able to tell it when to begin.  The latter of these two solutions could be accomplished by saving the scenarios with the entities having on-orders commands, and then developing a way for another process to release all the on-order commands.Monitoring CGFTo help maintain a stable system, it would be helpful to have the capability to monitor the CGF program.  The monitoring would be primarily used to ensure that the CGF software is up and running.  The Embedded Simulation System could lock up if the CGF program is not running to begin with or ceases to run.   By monitoring the CGF program, actions can be quickly taken to attempt to solve any problems.  ESS CGF DemonstrationModSAF is currently the CGF program being used in the Embedded Simulation System.  ModSAF has the ability to read parser commands from a file when it is loaded up.  Normally a text file is used to store the parser commands.  Instead of having ModSAF read a text file, a named pipe was created and ModSAF was directed to read it.  When ModSAF started up, it started reading the named pipe file, but at this point, the file was empty, so ModSAF just continued to read the file.  Then a remote login to the computer running ModSAF was done from a different computer.  From the remote login, a parser command such as "persistent load filename" was concatenated to the named pipe using the Unix command cat and redirecting the output to the named pipe file.  As the parser command was written to the named pipe, ModSAF read the command and executed it.  This process can be used to execute any of the valid parser commands of ModSAF, but it is also limited by the available parser commands.  So far, it has not been proven that all the needed functionality is accessible via the parser.  For the cases in which parser commands are not available to implement the needed capabilities, new parser commands could be added.ESS Simulation Control ManagerThe Simulation Control Manager (see figure 4) is one of the processes in the Embedded Simulation System.   It is responsible for executing the start up scripts to begin each process, start CGF, provide initialization to the simulation, monitor the process windows for errors and shut down the processes at the end of the simulation.  As noted, the Simulation Control Manager is currently the process responsible for starting the CGF software, so it is envisioned that it will be the process utilizing the remote capabilities discussed in this paper.  The Simulation Control Manager will contain the scenario script that will describe when scenarios get started or stopped.  The Simulation Control Manager will also process the entity information needed for the Battlefield Visualization Viewer for scenario creation. Figure 4: ESS Simulation Control ManagerFuture PlansThe remainder of CY1999 will be used to conduct tests that will be to determine if more CGF commands are needed.  Tests will also be conducted to determine which CGF will be used for the ESS CGF.  The current CGFs to be tested are MODSAF 5.0, Joint SAF-HLA, and OneSAF Testbed.  The CGF’s will be tested against the predefined remote commands discussed in this paper using named pipes with parser commands.  If new capabilities are required then creating new parser commands will be researched.  The ESS CGF will ruggedized in 2000 and integrated and tested first in the VTT System Integration Lab (SIL).  Then the ESS will be integrated into the VTT vehicle. The ESS CGF will be field test in the VTT vehicle in October 2000.  The field test will be conducted at Camp Grayling, Michigan.After the field-testing has been completed research will also be done to determine if other methods, such as HLA communication, can be developed to allow other processes to control the CGF software.References[1] John Brabbs, Paul Bounker, Sharon Grinaway; “First Generation Embedded Simulation System for Ground Vehicles” 1998 Fall Simulation Workshop, September 14-18, 1998. [2] John Brabbs, Paul Bounker, Donald Tidrow; “A Concept Embedded Simulation System Architecture for Ground Vehicles” 1997 Fall Simulation Workshop, September 14-18, 1997. [3] Mirco-Analysis Design, “Development of Data Collection Exercises for the Crewman’s Associate Advanced Technology Demonstration”, February 9th, 1996. [4] Mirco-Analysis Design, “Development of Data Collection Exercises for the Crewman’s Associate Advanced Technology Demonstration”, February 9th, 1996. Author's BiographiesJohn M. Brabbs is a Senior Project Engineer at the US Army’s Tank-Automotive Research, Development and Engineering Center, where he has been employed since 1987.  He is currently the Team Leader of the VETRONICS Simulation Facility (VSF) Team.  His research interests are in distributed simulation, virtual reality, and software engineering.  Mr. Brabbs holds a B.S.E degree in Computer Engineering and a Master’s of Science in Computer Science both from Oakland University in Rochester, Michigan.Kevin M. Hope is a senior co-op student working for the US Army’s Tank-Automotive Research, Development and Engineering Center, where he has been employed since 1998.  He is currently working on the VETRONICS Simulation Facility (VSF) Team.  Prior to working for the US Army TACOM, Kevin was a co-op student for Delphi Interior & Lighting for three years.  Kevin is pursuing B.S.E degree in Computer Engineering from Kettering University (formally GMI) in Flint, Michigan.