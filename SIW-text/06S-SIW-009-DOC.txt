An Application Extension for theMilitary Scenario Description LanguageSaikou Diallo, Dr. Andreas TolkVirginia Modeling Analysis & Simulation Center (VMASC) Old Dominion University Norfolk, VA 23529 HYPERLINK "mailto:sdiallo@odu.edu" sdiallo@odu.edu,  HYPERLINK "mailto:atolk@odu.edu" atolk@odu.eduWayne CivinskasLockheed Martin Simulation, Training & SupportAdvanced Simulation Centers (ASC)164 Middlesex TurnpikeBurlington, Massachusetts 01803 HYPERLINK "mailto:wayne.j.civinskas@lmco.com" wayne.j.civinskas@lmco.com Keywords:MSDL, MSDE, C2IEDM, XML, XSD, OneSAFABSTRACT: The Military Scenario Description Language (MSDL) was developed as part of the Military Scenario Development Environment (MSDE) of the OneSAF Objective System (OOS).  As a clear M&S community requirement exists for simulation independent scenario description, MSDL was evaluated regarding its potential to contribute to a standardized solution with a Study Group and is currently migrating to become a Product Development Group.  However, one of the practical drawbacks of MSDL is that it is hardly applicable outside the MSDE, as many references within the MSDL are not resolved within the MSDL itself, but refer to enumerations or data structures hosted in the MSDE.  Within an internal Research and Development effort, Lockheed Martin and the Virginia Modeling Analysis and Simulation Center (VMASC) created an extension schema for MSDL, which comprises the external MSDE references.  MSDL in connection with this extension schema becomes an MSDE independent solution, which is the first step to make MSDL applicable to simulation systems outside the MSDE.IntroductionAmong the many issues within distributed simulation applications, generation of initialization data is one of the most important and yet one of the least addressed with practical solutions.  In the current federated environment, each simulation system normally generates proprietary – or at least system specific – data captured in an application specific format.  The advent of XML has made it easier to exchange bits and bytes between simulations, but an extensive mapping process is still necessary and scenarios are still not reusable outside their original environment.  Carlton describes the initialization process of legacy systems as “complex, de-centralized, sequential, and primarily manual, which is time consuming, costly, and yields data inconsistencies” [1].  Military experts often do not understand why the scenario generation process is still so expensive and time extensive.  A possible solution was the idea to use so called “vignettes,” mini-scenarios coping only with a very special aspect of military operations, such as an infantry company crossing a bridge, a tank company clearing and/or crossing a minefield, or close air support operations.  Such mini-scenarios are often used in the “real” military world as schemes that have to be drilled in order to make sure that they also follow the same principle.  They are godfathers for the behavior procedures used in systems such as JSAF and OneSAF.  However, they are only the small building blocks for much more complex scenarios.    The objective of MSDL is to provide a simulation-independent means of generating scenarios based on a common description, thus making them portable and reusable in different environments.  It was developed as part of the OOS as a generic XML schema based on military standards and doctrine.  MSDL uses the MilStd 2525B to represent units, entities and tactical graphics.  MSDL uses the FM 101-5 Staff Organization and Operation (MDMP) and the Army Universal Task List (AUTL) to define the tasking language for communication between the Command & Control (C2) system and the army’s Joint Common Database (JCDB).  JCDB is rooted in a predecessor of the C2IEDM [2] that has been terminated from further support with the decision to mandate the C2IEDM for future Battle Command applications.  The MSDL schema contains information about Forces and sides, Task organization, Plans, Equipment, Tactical Overlays, Installations, Tactical Graphics, and Terrain. However, as Prochnow [3] et al. state “currently, MSDE is the only tool that outputs data into MSDL.”  In other words, in order to be able to use MSDL a user needs MSDE as well.  To address this issue, the solution is not to develop system specific tools similar to MSDE, but rather extend the MSDL schema so that it becomes independent of any tool set and supports the initialization of non-military entities formerly known as “clutter.”  Within an internal feasibility study conducted for the Lockheed Martin Corporation, VMASC extended the MSDL schema to make it independent from the implicit structures of the MSDE.  The extended MSDL can be used outside the MSDE to describe scenarios and can be used to generate scenarios for a target system.To prove this, we mapped this extended MSDL schema to C2IEDM and C-BML following the principles of data engineering described by Tolk [4].  As a result, MSDL becomes a data repository that can seamlessly interact with BML and C2IEDM in a Service Oriented Architecture (SOA).  A family of web services including a mediation layer [5] links the three models and a Graphical User Interface (GUI) serves as the visualization engine.The result of this study, which is based on the work conducted for US JFCOM as described in [5], is now a toolkit that provides the following capabilities:read MSDL filesread C-BML filesread C2IEDM datadisplay the imported scenario data using an open map interfacewrite MSDL fileswrite C-BML fileswrite C2IEDM dataspecifying a limited subset of military relevant information, namely types, location, activity, and time.  This information reflects who is doing what, where, and when data of reports and/or tasks.As all services are implemented as web services, the integration in an SOA is easy.  This has been demonstrated in the VMASC battle lab and on the I/ITSEC 2005 show floor.MSDE and MSDLMSDE is accessed via a Windows-based GUI built on top of PowerPoint.  It allows users to place objects on a map, move and relocate them at different aggregation levels and disaggregate units down to platform level [3] (see Figure 1).  MSDL in its current format is tightly coupled with MSDE.  The scenario generation process starts with the user defining objects, parameters and relationships from the GUI.  A hidden internal process collects the information and generates an MSDL file that can be consumed by simulations. Figure  SEQ Figure \* ARABIC 1: MSDE GUIFigure 2 shows how MSDE currently generates an MSDL file and how this MSDL file is used to communicate the various sub-products:Figure  SEQ Figure \* ARABIC 2: MSDL Overall ContextBased on authorized data sources describing the elements of interest to the warfighter, various part of the military scenario (terrain, intelligence reports, staff reports…) are created separately and then merged in a common document.  Additional parts such as course of action and order of battle are added via the MSDE GUI and the resulting document is described in MSDL and stored – in XML format – in a Military Scenario Repository.Simulation configuration data such as host machine specification, display options is added to the MSDL data to obtain a file consumable by a simulation.  The MSDL file remains an independent entity that theoretically can be reused in other simulations, as long as their initialization data elements are described within MSDL.Currently, OneSAF Objective System (OOS) is the target system, but the envisioned MSDL standards will be independent from source and target system.  However, some definitions used in MSDL can only be found in MSDE.  This work identified these elements and extended the MSDL definitions to make MSDL independent from MSDE or other source systems.  The next step will be to define additional elements of warfighter interest not yet reflected in MSDL.  We assume that these will be implemented in a gradual process where every new participating system will add its individual initialization data elements requirements to the MSDL.Identifying Objects defined in MSDE required for MSDLIn addition to a main schema, the MSDL study group specifies data types and enumerations that are in three separate XML Schema Definition (XSD) files:Equipment Enumeration: This file contains the enumeration of valid equipment types following the MilStd 2525B standardTask Enumeration: This file contains the enumeration of all possible tasks that an entity can perform in MSDL based on the AUTLUnit enumeration: This file contains the enumeration of all valid unit types following the MilStd 2525B standard The scenario, in order to be MSDL compliant needs to follow the business rules specified within those three schemas.  However, these files address only units, equipment, and tasks.  Other enumerations found in the AUTL and MDMP are hard coded within the MSDE. The MSDL standard group in its initial standardization draft lists all of the tables and data types that a document must fulfill in order to be MSDL compliant.  By identifying and merging all of the information provided within the main schema, the enumeration schemas and the tables listed in the MSDL standard specification document, it becomes possible to generate a new enriched XML schema that provides the user with all of the mechanisms needed to generate a correct MSDL document.Figure 3 and Table 1 show an illustration of a data type required in the main schema whose enumeration list is specified in the standard document.  EMBED PBrush  Figure  SEQ Figure \* ARABIC 3: Force Relation DescriptionThe schema specifies that the Command Relationship Type should be an enumerated type found in the FM 100-7 without any additional information.  The following table located in the standard document enumerates the possible values for this field.  The bulk of the work consists of adding these enumerations to the schema in order to eliminate the guesswork and save timeTable  SEQ Table \* ARABIC 1: Command Relation TypesMSDL ElementEnumerationsDescriptionCommand Relation TypeORGANICThe command relation represents the Organic (home station) command of the unit.ATTACHEDThe command relation represents a mission specific attachment.OPCONThe subordinate unit is under Operational command of the superior unit.TACONThe subordinate unit is under Tactical command of the superior unit.ADCONThe subordinate unit is under Administrative command of the superior unit.NONEThe command relationship type is not specified or unknown.Other enumerations currently captured in the MSDE but not on the MSDL include:Task Organization Relationship typeUnit/Equipment ResolutionFormation typeSupport Relationship type Communication Network EnumerationThe complete resulting scheme and enumerations have been captured and will be submitted to the product development group as soon as they are released.Possible SolutionsWithin the underlying study, we implemented a solution based on a decoupling algorithm and proved the feasibility and applicability of this solution by mapping representations in C-BML and C2IEDM into MSDL and vice versa.Decoupling AlgorithmThe algorithm for extending the schema consists of four phases:In the first phase the main MSDL XML schema is used to create a relational database representation.  While this database is incomplete, it functions as the skeleton of the enriched schema.The second phase consists of generating tables from the enumeration XSD provided by the standard group.  These tables are added to the main relational database created earlier to form a merged schema.The third phase consists of scanning the MSDL standard specification document and manually adding all of the tables listed within to the relational database obtained from the previous two phases.  Those tables represent the hard coded information embedded within MSDE. In the final phase, an XSD is generated from the relational database obtained earlier.  This XSD now contains all of the information needed to generate a complete and correct MSDL documentThis approach has a dual purpose.  On one hand, MSDL is now decoupled from MSDE and therefore a complete MSDL document can now be generated from the MSDL database.  On the other hand, it is now possible to map MSDL with other data models, and VMASC has taken those steps by mapping and implementing a mediation web service between MSDL and the Coalition Battle Management Language (BML) and MSDL and C2IEDM. Mapping MSDL to C-BML and C2IEDMWithin SISO, the M&S community is currently evaluating various solutions coping with the challenge of simulation initializations; among them are the Coalition Battle Management Language (C-BML), the Command and Control Information Exchange Data Model (C2IEDM), and the MSDL:C-BML is defined as “the unambiguous language used to command and control forces and equipment conducting military operations and to provide for situational awareness and a shared, common operational picture.”  [8] The C-BML is based on the “5W” principle:  Who is doing What, Where, When, and Why? The Command & Control Information Exchange Data Model (C2IEDM) is an interoperability solution that was developed by NATO experts and it is now managed, improved, and distributed by the Multilateral Interoperability Program (MIP).  Since September 2005 the Army’s G3 has endorsed C2IEDM as the standard for information in Battle Command systems [9].The Extensible Battle Management Language (XBML) project was successful in mapping a set of business objects representing the 5W from BML to C2IEDM, and creating a web service mediation layer to interconnect the two [5][6].Completely mapping two extensive data models such as BML and C2IEDM is an extensive and costly endeavor.  A better approach is to identify a set of business objects and business rules that provide a common conceptual view.  Since C-BML is a subset of C2IEDM, it is logical to select the 5W as the common conceptual view.  Figure 4 shows how the 5Ws are modeled in MSDL.Figure  SEQ Figure \* ARABIC 4: The 5W in MSDLFigure 5 shows the conceptual representation of the 5W in C2IEDM and the core components of the business objects.  Following that same approach, we limited the mapping effort to a set of objects in MSDL representing the 5W concepts of BML.  These objects represent less than ten percent of the two models.  This is done purposely to demonstrate a proof of concept rather than act as a full model-to-model translation.  Mapping MSDL to BML is then restricted to extracting the 5W elements from MSDL [7]:Who: The “Who” element in BML corresponds to the unit description in MSDL.  Each unit has a name, a unique universal identifier, and an owner handle.What: The “What” element is represented by the activity data as an AUTL task or subordinate course of actionWhere: The “Where” element is represented by a specific triggering event which is a threat, enemy or movement eventWhen: The “When” element is represented by a specific triggering event which is an enemy, threat, friendly or movement event.Why: The “Why” element is represented by the why enumeration in the task of a unit activity.Figure  SEQ Figure \* ARABIC 5: The 5W in C2IEDMOnce the tables identified, a mediation layer is created between MSDL and C2IEDM and exposed as a web service.  This results in a family of services linking BML, C2IEDM, and MSDL.  The resulting architecture is shown in Figure 6.Figure  SEQ Figure \* ARABIC 6: Connectivity Architecture (SOA)In the prototypical implementation a sample MSDL XML file is parsed, translated into C2IEDM through the mediation layer and displayed on a GUI using the MilStd 2525B.We implemented a web service oriented architecture which is able to accept MSDL data as source or target, C2IEDM data as source and data, and C-BML data (as recommended by VMASC in various papers, such as [6]) as source and target data and then used open map and MilStd 2525B symbols to display the content.Proposed ExtensionsIn this last section, we will cope with ongoing work dealing with possible extensions of MSDL for future use.  Based on our experience with the C2IEDM and its underlying philosophy on extensions we recommend an applicable solution for the MSDL community based on the principles of distinguishing between item and types or concepts and instances.  We will do this using the example of crowd modeling and how to reflect the necessary initialization data in MSDL.Problem StatementIn the past decade, civilians have played a significant role in military conflicts involving the U.S, notably in Somalia and the former Yugoslavia.  As the nature of conflicts change in the future and enemy combatants are no longer easily identifiable by uniform or insignia, more and more simulation environments have to evolve and include crowd elements of varying size and complexity.  Some legacy systems, such as JSAF already, support the injection of civilian elements into scenarios [12] and Petty et al. have created and implemented a more complex HLA-compliant crowd federate that models cognitive crowd behavior [10].   As these crowd entities play a larger role in scenarios and become more robust, the initialization mechanism should reflect the complex nature of these elements and most of all be simulation-independent in order to avoid the problem of reuse and portability in todays distributed environments.  MSDL is currently the only model fulfilling those two criteria, even though it is only suited for military entities and objects at the moment.  However, Lockheed Martin is investigating the possibility of extending MSDL to support the creation of non-fighting civilian entities and VMASC has been tasked to evaluate the potential of MSDL and propose a solution.  The results of the current evaluation have shown that MSDL can be extended to support civilian entities and/or groups of entities.The main issue in extending the model is taking into account the complex and dynamic nature of civilian entities especially in terms of their behavior.  As Petty et al. have pointed out “a recurring theme throughout the literature is the necessity to model behavior either at the individual level and allow crowd behavior to emerge as a result of many goal-oriented individuals at the same location or the crowd may be completely controlled by a crowd entity” [10].  The truth lies somewhere in between and MSDL should be able to support a combination both.Extending by Intension versus Extension We identified two approaches to extend a model:Intension refers to the set of all possible things that a word could represent.  Extending MSDL by intension means that the model   should list all of the enumerated types that could ever exist.Extension refers to the set of all the actual things that a word could represent. Extending by extension means including all of the actual types necessary to describe civilian entities.  Our approach will focus on the second type.  Extending by Intension is a dynamic process in which individual simulations will contribute overtime.  Enumerated values will be added as more systems use the model.  Extending by Extension should be wide-ranging and representative of the complex behavior and relationships inherent to these non-fighting entities.The goal is to have a stable model that does not need to be further extended in terms of its types and relationships.  However, as gaming technology is used to enhance legacy systems, and fidelity increases, enumerated values can be added without having to alter those pre-existing types and relationships.Extending by Intension correlates with an enumeration of all possible uses, or the enumeration of possible instantiations.  Extending by Extension is a complete enumeration of types with open enumerations for instantiating properties.The object-type/item philosophy implemented by C2IEDM represents a way to extend by extension.  This structure allowed the model to grow over more than 10 year without major modifications on its kernel or generic hub.Criteria for ExtensionsMusse and Thalmann [11] provide definitions for the basic terms that will be used in the extension work.  A virtual human agent or agent is a humanoid whose behavior is inspired by those of a human.  A group is a small collection of agents and a crowd is a collection of group.  Extensions will be made based on four main criteria:Extensions must support basic description such as name, size, type, domination value, level of aggressiveness etc….  The elements can be treated either as agents, groups or as a crowd. Extensions must support pseudo-random behavior based on stochastic values for individual elements, groups or crowds.Extensions must support a geographical location for individual elements or groups.  The location can be an absolute point of a specified nature or expressed as a relationship to other elements or significant geographical points (phase lines for example)Extensions must be simulation-independent in accordance with the business rules of MSDL.  They must be based on established crowd modeling theory and implementation. In order to characterize crowds and individuals, we will lean on the work of Musse and Thalmann [11].  Crowd information can be classified in three groups (see also Table 2):Knowledge: It represents the relationship between the entity and the virtual environment.  This includes potential obstacles to avoid, expected motion and action, and collective knowledge.Beliefs: They represent the internal status of the entity (happy, sad etc…) as well as possible behaviors.  The group behaviors identified so far is: Flocking, Following, Goal Changing, Attraction, Repulsion, Split, Space adaptability and Safe Wandering.  In addition, we should add a way to describe the emotional status of a group and individual beliefs of entities. Intention: This represents the objectives of the crowd and it can be influenced by individual elements in the crowd.Table  SEQ Table \* ARABIC 2: 	Categories of information distributed among the entities and dynamically changed during the simulationFollowing these principles ensures a stable MSDL standard with minimal need for change above the enumeration level of items or instantiations.  The same ideas are applicable in the context of other XML-based extension-oriented standards as well, such as the C-BML effort.SummaryDecoupling MSDL from MSDE has resulted in the creation of an MSDL database that can be used to generate MSDL compliant scenarios.  This was done by merging the MSDL main schema with the enumeration schemas and the tables and objects listed in the MSDL specification document Furthermore, following the principles of data engineering [3], MSDL has been mapped to C2IEDM as well as C-BML.  As a result, C2IEDM or C-BML can be used to generate MSDL documents and vice versa.  MSDL can also be extended to support rapid generation of civilian entities thus enlarging its scope and capabilities.  Finally, we recommend a way to introduce a stable extension method for standards such as MSDL, which is applicable to other efforts, such as C-BML, as well.AcknowledgementsThe underlying research work was funded by the Lockheed Martin Corporation.  It is based on work funded by US Joint Forces Command.  We would like to thank the members of the MSDL Study Group for their valuable inputs via the discussion boards helping to shape this work to become applicable to the community.References[1]	Carlton, B., Scrudder, R., Black, C., Hopkins, M., “Initialization of C4I Systems and Simulation Federations Today and in the Future,” Fall 2004 Simulation Interoperability Workshop, September 2004.[2]	Simulation Interoperability Standards Organization Military Scenario Definition Language Study Group (SG), “Specifications for: Military Scenario Definition Language (MSDL)” April 2005.[3]	David Prochnow, John Vintilescu, Michael Fogus, Benton Borum “Initialization of Distributed Simulations: A Better Way?”  Fall 2005 Simulation Interoperability Workshop, September 2005.[4]	Andreas Tolk, Saikou Diallo:  HYPERLINK "http://ieeexplore.ieee.org/iel5/4236/31457/01463163.pdf?arnumber=1463163" “Model-Based Data Engineering for Web Services,” IEEE Internet Computing Volume 9 Number 4, pp. 65-70, July/August 2005[5]	Andreas Tolk, Saikou Diallo, Kevin Dupigny, Bo Sun, Chuck Turnitsa:  HYPERLINK "http://www.vmasc.odu.edu/publications/Tolk/05S-SIW-019.pdf" “Web Services based on the C2IEDM - Data Mediation and Data Storage,” Spring Simulation Interoperability Workshop 2005, Paper 05S-SIW-019, San Diego, California, April 2005[6]	Andreas Tolk, Saikou Diallo, Kevin Dupigny, Bo Sun, Chuck Turnitsa:  HYPERLINK "http://www.vmasc.odu.edu/publications/Tolk/05E-SIW-034.pdf" “A Layered Web Services Architecture to Adapt Legacy Systems to the Command & Control Information Exchange Data Model (C2IEDM),” European Simulation Interoperability Workshop 2005, Paper 05E-SIW-034, Toulouse, France, June 2005[7]	Jeff Abbot: “MSDL Overview” SISO Presentation, March 2005[8]	S. Carey, M. Kleiner, M. Hieb, R. Brown: “Standardizing Battle Management Language –A Vital Move Towards the Army Transformation,” Fall Simulation Interoperability Workshop, 2001[9]	Department of the Army, Office of the Deputy Chief of Staff G3/5/7, “Command And Control Information Exchange Data Model,” Memorandum, 28 September 2005[10] McKenzie, Frederic D., Qingwen Xu, Quyhn-Ahn H. Nguyen, Mikel D. Petty. “ HYPERLINK "http://www.vmasc.odu.edu/crowdwebsite/05-BRIMS-042.pdf" Crowd Behavior Architecture Model Cognitive Design”, " HYPERLINK "http://www.vmasc.odu.edu/crowdwebsite/McKenzie%2004F-SIW-084.pdf" Crowd Federate Architecture and API Design." In Proceedings of the Fall 2004 Simulation Interoperability Workshop (SIW). Orlando FL, Sept. 19 – Sept. 23 2004. Nominated for a SIWzie Award (Best papers).[11] S. R. Musse and D. Thalmann, “Hierarchical model for real time simulation of virtual human crowds”, IEEE Transactions on Visualization and Computer Graphics, Vol. 7, No. 2, April-June 2001, pp. 152-164.[12] Speicher, Dan and Wilbert, Deborah, “Simulating Urban Traffic in Support of the Joint Urban Operations Experiment”; 2004 Interservice/ Industry Training, Simulation and Education Conference (I/ITSEC), Orlando, FL, December 2004.Authors’ BiographySAIKOU DIALLO is M&S Master Student at Virginia Modeling Analysis and Simulation Center (VMASC) of Old Dominion University (ODU) of Norfolk, Virginia.  He works as a General Research Assistant for Dr. Tolk.  His Master Thesis contributed to the recommended extensions.ANDREAS TOLK is Senior Research Scientist at the Virginia Modeling Analysis and Simulation Center (VMASC) of the Old Dominion University (ODU) of Norfolk, Virginia.  He has over 15 years of international experience in the field of Applied Military Operations Research and Modeling and Simulation of and for Command and Control Systems.  His domain of expertise is the integration of M&S functionality into real world applications based on open standards.WAYNE CIVINSKAS is a Principal Investigator of the Advanced Simulation Centers (ASC) of Lockheed Martin Simulation, Training & Support.  He is the technical coordinator and point of contact for the internal Research & Development underlying the activities described in this paper. Table based on Musse and Thalmann [11]Only for Review – Not for Public Release		 		  	Sentence is not clear.Sentence is not clear.