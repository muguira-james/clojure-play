ROM Framework Approach to develop a HLA Federate for Multi-national FederationsDae-Seog Kim,   Hae-Kwan LeeSystem Analysis Center TRADOC ROKAAPO78-5, Chu-mock dong Yusung gu Daejeon 305-153, South Korea+82-42-870-2477, +82-42-870-2451 HYPERLINK "mailto:daeseog@prumail.co.kr" daeseog@prumail.co.kr,  HYPERLINK "mailto:leehaekwan@hotmail.co.kr" leehaekwan@hotmail.co.krJae-Cheol Ryou Dept. of Computer Science Chungnam National Univ. 220 Kung dong Yusung gu Daejeon 305-764, South Korea+82-42-821-5443 HYPERLINK "mailto:jcryou@home.cnu.ac.kr" jcryou@home.cnu.ac.krKeywords:ROM Framework, Federate, HLA, CJ21ABSTRACT: Ever since the High Level Architecture (HLA) has been registered as an IEE1516 standard in Sep. 2000, many nations have been putting much effort to apply the new simulation compliance standard. The Republic of Korea Army (ROKA) is no exception, and we are also concentrating on converting our existing simulation models to an International Compliant Model to ensure interoperability and reusability.In this research, we have presented problems and solutions that we faced during converting a non-experimental, actual operating large-scale exercise simulation model to a HLA Federate and include it in an established federation.For a new federate model to join a Federation already established for a specific purpose, minimized modifications of the existing federation must be ensured. Also, effort and costs required for converting the legacy model to a compliant federate model must be given consideration. As a solution for this problem, we proposed the Run-Time Infrastructure (RTI) Object Model (ROM) Framework Structure.The ROM Framework ensured adaptability on changes made to the existing federation, HLA/RTI technical transparency for simulation developers and the reusability of RTI programming. Ultimately, the framework allowed the compliant federate development time and costs be reduced.1. IntroductionA generalized method of developing a HLA Federation is the Federation Development Process (FEDEP). However, FEDEP is a development procedure useful to apply when one or more organizations developing a federation are organically connected. In other words, in the case of two different nations participating to establish a federation, the required process will become more complex.Unless a single combined development team is organized, the development periods and procedures for a federation and its member federates may differ. Moreover, the fact that international standardization of data and battlefield function representations can be very difficult, may lead not only the development of Federation Object Model (FOM) for federations but the development and integration of individual member federates to some very complicated problems.For such reasons, developers who design and implement federations needed additional tools and methods to reduce development costs and time and minimize quality declines. Even though Cox has proposed a framework-based federate development procedure at Simulation Interoperability Workshop (SIW) in fall of 1998, it was a method only useful for establishing federation for only a single organization, not for several nations [1].In this research, with the uncertain and changeable FOM as premises, we proposed the HLA Framework as an effective and reliable method for converting non-compliant, operational model to a HLA-based simulation model. The proposed framework was implemented with reflection to development supportive tools, and we successfully applied this framework to converting and developing the Chang -Jo21 HLA Compliant Model (CJ21_HCM).The ROKA was able to successfully establish a training M&S system by echelons, from battalion to corps. Battlefield functional models that have been insufficient are under active development and planning. However, training for levels larger than theater level is still an outstanding issue.	The special confrontation condition of the Korean Peninsula affected training ROKA environments as well, and most exercises larger than theater level model required a combined-training method with our ally, United States.Before the development of CJ21, combined exercise only used the US model systems, so no interactions other than for language was necessary for the system.	However, since the ROKA developed an independent model, CJ21, exercise participants and model operation managers faced the problem of understanding and administrating both CJ21 and Corps Battle Simulation (CBS). This is definitely a difficult problem not only in terms of M&S system hardware and software, but also for gamer and controller educations.	To solve the above-mentioned problems, we chose HLA as our solution, and started active research.	Planning to promote the usage of CJ21 in the ROK/US combined exercise, we propelled for cooperation with the US. Since international cooperation between nations for software compliance was without precedent, ROK had to overcome several difficult systematic procedures.	First, at the 32nd ROK/US Defense Technological and Industrial Cooperation Committee (DTICC) we proposed that the two nations collaborate on establishing a combined exercise federation in which CJ21 can participate. Defense Modeling and Simulation Office (DMSO) accepted this proposal and cooperation between the two nations was promoted. However, in disregard of the active effort at Joint US Military Affairs Group – Korea (JUSMAG-K) and 4 practical meetings, initial items such as configuring an associated development team and concluding the Memorandum of Understanding (MOU) are still outstanding.	Even though upon such insufficient grounds for cooperation, the ROKA Training and Doctrine Command (TRADOC) System Analysis Center (SAC) and DMSO have actively propelled this project. Due to technical support and advices from DMSO, we have assimilated HLA technologies at high speed and it allowed us to gain HLA Certification in February and achieve success on the first-ever Confederation Test for the ROK/US combined training system.2. The Korea Army Ground Simulation Model (KAGSM) Development ProjectThe ROK Army decided to promote the ground simulation model development project that can replace CBS and CJ21, which are used for current combined exercises and Army training. This project began with a goal to integrate with Joint Simulation System (JSIMS), the next-generation training system in U.S., and fulfill our requirements for future combined exercises.2.1 Goals and FocusesKAGSM is targeted to solve inefficiency and cost problems by unifying the two-way divided theater level training model systems of the ROK Army. KAGSM meets the demands such as interoperability and reusability of models needed for configuration of a federation that will allow us to achieve various training goals. It also ensures the interoperability among homogenous or non-homogeneous models of different nations which have diverse language, doctrine, natural environments, and technical standards.The eventual goal of the KAGSM Project is integration with JSIMS [Fig. 1]. However, JSIMS still does not show its detailed specification as a simulation system. Therefore, the KAGSM Project is determined to reach its final goal by embodying the more obvious items. EMBED PowerPoint.Show.8KAGSM will maintain the functionalities of CJ21. However, KAGSM will be developed with focuses on reusability and interoperability so that new models in the future can be reused appropriately, and facilitate the establishment of a newly purposed federation. KAGSM was planned for use as a HLA federate that can integrate with JTC Interface Simulation (JIS) or JSIMS at any time required.2.2 ROK/US Simulation Model Compliance MethodologyAs aforementioned, the ROK/US confederation consists of JSIMS of the US and KAGSM (or CJ21_NG) of the ROK. We have decided to divide detailed goals of KAGSM development by schedule, so that the uncertainty and risks of this first-time ever project may be kept at minimum.First, we tried to convert our CJ21 model to a HLA compliant model and integrate it with the JIS system [Fig. 2]. If this trial was to succeed, we will be able to settle many technical problems relating to HLA and this will be a crucial factor for achieving success in the development of KAGSM, which is our original goal. We would like to present our experience and conclusions from our successful execution of this first step. EMBED PowerPoint.Show.8  Already many development teams have experimented and proposed various ideas on effectively converting an existing model to a HLA federate. However, not all of their experiences were useful to our development team. Our assignment involved too many problems concerning different teams from different nations and thus using different languages. If we were to define an entire federation FOM as a whole and develop its member federates afterwards, we may have had a much simpler method to use on this project.The method for us to obtain HLA technologies did not differ greatly from the common methods. First, we studied the HLA Manual and acquired more information from operating and analyzing RTI example programs, and from discussions of team members. However, we could not apply the same method on the HLA conversion of the CJ21 model.To convert CJ21 to a HLA federate, the following limitations had to be assumed.First, the newly developed CJ21_HCM should be able to integrate with the combined training system (JIS or JSIMS) which the US have had developed..Second, for CJ21_HCM, the US should be able to invest minimum efforts and costs on converting the existing compliant system FOM and member federates.Third, experiences from CJ21_HCM development should be a standard that could be applied to many future HLA federate conversion of the ROK.Fourth, simulation functionality developers and HLA system developers of CJ21 should provide technical transparency to each other.Fifth, time and costs used for conversion to a HLA federate should be minimized.The JIS federate object model that the US Army has already developed was a very good standard for developing CJ21_HCM. In the long run, CJ21_HCM is a combined training system and development of the FOM would mean that some requirements for compliance are already fulfilled. Of course, this does not provide all the frames that we need for integration of ROK/US models, because our target federation should have a structure of two ground models being operated simultaneously. Nevertheless, we understood that beginning our project from FOM was the best method to develop CJ21_HCM (HLA federate).Accordingly, in this research, we proposed the RTI Object Model (ROM), which can minimize the efforts to convert additional models, which will be included to an existing federation as a new member federate, into HLA federates.3. ROM Framework-based CJ21_HCM DevelopmentFederate development holds somewhat different meaning when compared to existing simulation model development. That is, a federate is a HLA compliant model that has standard compliance structure applied to an existing simulation model. Development of such federates can be divided into two methods: 1. Converting an existing simulation model, and 2. starting a new development of a compliant model that can execute functions assigned by federation conceptual models.The two methods above request existing simulation developers to have technical comprehension of the new compliance structure. Moreover, this standard compliance technology structures require more than just implementing the program; it requires that developers be equipped with technical understanding and implementation abilities for all HLA standard services. Even though Object Model Template (OMT) and RTI provide numerous libraries and elements for implementing such services, management level work for the federate to fulfill HLA rules and services still inflict technical difficulties to federate developers.3.1 Development EnvironmentCJ21_HCM was developed by using Object Model Development Tool (OMDT) v1.3 and with the DMSO RTI 1.3NGv4 as basis. Other development tools included Federation Verification Tool (FVT) and Federation Management Tool (FMT) provided by DMSO, and we have executed self-HLA federate compliance tests using these tools.We developed RTI Foundation Class Automation Tool (RAT) by implementing the ROM Framework, and this tool proved to be a very useful device while developing CJ21_HCM. While CJ21 was coded in C under the UNIX Operating System, CJ21_HCM was developed and operated in C++ on Redhat Linux 6.2 Operating System.Especially for CJ21_HCM, we took into consideration that neither JIS nor JSIMS were at a stable or completed state, and we focused our efforts on environment configuration to make compliance areas and simulation areas as independent as possible. By using RAT, we have prepared so that the new version of CJ21_HCM will be able to apply the modified FOM while reducing both time and cost.3.2 Compliant Structure Experiment I (Object Translator)Due to time limitations, we had to start our project after reviewing only the few HLA federate conversion technologies that were already published. Information on the JIS 98 FOM, which was acquired from DMSO sites, was the only information we had on the federate we wished to integrate with.The first step that we took for the development of CJ21_HCM was analyzing the JIS FOM to study compliant data between federates that were present in the existing federation. We did establish the Simulation Object Model (SOM) for every possible CJ21 integration data, but this was quite too large for the federation development team to use. Therefore, we extracted from the FOM a list of items that CJ21 will subscribe/publish from Research, Evaluation, and System Analysis model (RESA) and Air Warfare Simulation (AWSIM), and started identifying elements that we would integrate with CBS.Although executing cooperative project all by oneself was a very difficult thing, we established the CJ21 SOM proper for the JIS FOM level, and we planned an experiment with a self-federation made from this SOM.As for our experimental federation, we decided to use an Object Translator for CJ21 compliance [Fig. 3]. This was because CJ21 did not have its object class (which would be integrated with federates like RESA, AWSIM and CBS) standardized, and there were not enough manuals within CJ21 to interpret properties or parameters of incoming remote objects directly. Therefore, the Object Translator was used with the goal to minimize tasks that directly affected CJ21, even when the JIS FOM was to be modified [2]. EMBED PowerPoint.Show.8  In terms of objects and interactions for integration, the Object Translator was represented independently from other models and it was designed to implement the actions of corresponding CJ21 objects.However, the approach using this Object Translator caused a problem which code implementation of the RTI Library was repeated for all compliant objects and interactions. Also, number of objects and interactions for implementation will increase upon the complete development of CJ21_HCM, and this will require that functionality development personnel will have to be educated on the usage of all RTI Libraries.Since such cooperative tasks have to be accomplished and HLA education of developers need to be reduced, we found out that the framework approach was the best solution.3.3 Compliant Structure Experiment II (ROM Framework)From the first experiment, we learned that we should try a framework-based CJ21_HCM model implementation method in the second experiment. The second experiment began with the necessity of HLA object model element representation (FOM/SOM), local agents for remote objects, and a facilitated auto update and reflection of compliant object attributes.Such a method shares ownership of an independent object model library with a specific object model. In other words, compliant objects of CJ21 will exist in the object class layer with various RTI libraries included.When the remote object is being updated, the RTI manager informs CJ21 through the federate ambassador of the LRC, and CJ21 reflects this object at the object class by using the object manager. Thus, we integrated the RTI, Object Interaction Manager Layer and the Object/Interaction Class Layer to define the RTI Object Model, or ROM [Fig. 4].We confirmed that the framework approach will be able to ensure high adaptability to the changeability of target FOMs and that this approach is a useful method to convert an existing model to a HLA Compliant Model.4. ROM Framework Design & Tool DevelopmentThe framework approach to HLA federate development has been presented in several papers [1,3,4,5]. The proponents of these papers attempted to develop the framework approach in order to implement the interface specification and minimize the duplicated efforts during developing federationsHowever, this research is not intended on establishing a whole new federation. The purpose of this report is to propose a framework structure that is needed for a separate development team that develops new member federates that will be added to a changeable and uncertain federation. That is, in the case of a federation development team, the FOM is somewhat settled during the analysis procedure of the FEDEP conceptual model and each federate can be developed with the confirmed FOM. However, in the case of a separate development team that develops a new member federate to be added to a changeable and uncertain federation, the following should be taken into consideration:First, even if a new federate is added to the federate, new goals of the entire federation must be reached while changes in the existing federation are kept at minimum.Second, the federate to be added should be newly developed or have been developed as a model.Third, if the development of a new model is essential, technical transparency should be ensured so that simulation developers do not have to input additional efforts for interface requirement implementation.Generally, HLA separates data and structure, and this means that OMT objects and interactions (defined accordingly to OMT standards) can be established and exchanged without modification to HLA-based software. On the other hand, implementation and application of HLA rules and object model templates, excluding interface specifications actualized with LibRTI, will still be an issue for the developers to work out. Objects abstracted by the OMT will in each federate be substantiated, or would be existing in a substantiated form. Objects substantiated in each federate will need common functionalities or services to abide by HLA rules.All objects and object attributes defined in the SOM will be mapped with abstract objects and abstract object attributes that are defined in the FOM. Created objects will be registered in the RTI according to interface specifications and updated attribute values will be sent. Also, objects generated by other federates will be discovered to create another object, and updates of the attribute value by the RTI will be expected for attribute values of the created object.For example, when creating a ground combat unit instance from CJ21 (assumed as Ground.Combat), this instance should be registered in the RTI with RTI services, by using handle values of the abstract class (assumed as Ground.Maneuver.Combat) defined in the FOM. The provided instance handle values will also have to be managed. Moreover, to update the attribute values of the ground combat unit of CJ21 and send that update information to other federates, data should be mapped with the abstract class attribute value defined in the FOM and sent by using RTI services. Such registrations and updates of objects apply to not only unit objects but also to all defined objects, and this common property can be identified in occurrence & reference, transfer & acquisition of ownership and transmission format of data. The Framework will provide the most universal structure for managing these common functions and services, and ensuring a consistent compliance structure.In this research, we propose the ROM (RTI Object Model) that can represent expanded RTI. Since the RTI basically implements the HLA Interface Specification, it does not provide functions other than compliant interface services, like object state management and data management methods. Therefore, federate developers have to work out a solution for additional implementation (other than interface services) for data management, and this requires the developers to be fully acknowledged of all RTI services. ROM was proposed to improve this additional implementation work for federate developers.In ROM, all RTI services are provided to maintain interoperability with the RTI, and manage FOM information to support automated data management and conversion. Also, it provides functions for complying to federation rules so that the target federate will be fit for HLA policies [Fig. 5]. In other words, ROM expands the functionality of RTI to provide high-level functionalities.  EMBED PowerPoint.Show.8  Consequently, the HLA compliant framework will use ROM to support automated development and covers the complexity of the interface, thus reducing development costs and allowing developers to concentrate on simulation implementation, which is the ultimate goal of a simulation. Such usage of the framework means that an automated structure of cooperative projects is possible. This research also presents the creation of ROM Foundation Class (RFC) and the usage of an automation Tool (RAT: RFC Automation Tool).Definition 1: ROM (RTI Object Model) FrameworkROM manages the federate, RTI interfaces and creation, update, delete information of each federate object that the RTI does not provide as a function set. It sends compliant object and interaction information to other models and creates/manages compliant objects and interactions of other federate.4.1 ROM Components and FunctionsComponents of ROM consist of the four management functions: Information Management, Object Management, Interaction Management, and Instance Management. [Fig. 6] EMBED PowerPoint.Show.8  The Information Manger provides compliant data information, directly interfaces with the RTI and supports RTI services like Federation Management, Time Management and Declaration Management. The Object Manager registers or discovers an object, updates or reflects attribute values, and provides object management services for requesting updates for attribute values or providing updates of requested attribute data. The Interaction Manager sends or receives interaction information, and reacts to actions(interaction events). The Instance Manager administrates created compliant objects.4.1.1 Information ManagerThe Information Manager is intended for federation creation/registration, data declaration and time management. It manages object and attribute information defined in the FOM. This means that it will be separated from the model in terms of federate basic functions like federation management, declaration management and time management and that it will be separated from the model in managing updates and reflections of object attribute value publications/subscriptions. Also, by managing object and attribute information defined in the FOM, it provides data conversion and mapping information to the federate developer.Generally, it is hard to expect the design of a complete conceptual model. However, even if the conceptual model is complete, update and reflection information of attribute values can change easily according to the state of federate that participate in a federation. Therefore, federation developers are forced to modify or delete update and reflect implementations of all object attributes (uses RTI Services) to fit the federate configuration state.This can make the enforcement and maintenance of a model very difficult by causing improper design of a conceptual model or slowing down /complicating the reaction of a model to the expanding model.Thus, this should be separated from federate development and integration environments (whether to register in a federation, which attributes to update and reflect, how to set the time policy, etc.), so we designed the Information Manger became to meet these demands.The Information Manager is composed of Federation Management, Data Declaration Management, Time Management and main management functions of FOM Information Management.4.1.2 Object ManagerThe Object Manager is purposed to manage object state information. It manages object register/discover and delete/remove, and manages object attribute update/reflect.By managing objects with the Object Manager, federate developers can be liberated from mapping federate objects with compliant abstract objects and converting enumerated and complex data (encoding/decoding). Federate developers can concentrate all of their efforts on the original functions of the simulation. Also, the Object Manager will be able to use all general information and various expanded information provided by the Information Manager.If management functions like the Object Manager are lacked, federate developers must be able to use all RTI services to create/register objects and update/send attribute values. Developers should also be interested in all data information defined in the FOM, for data conversion (encoding/decoding). From such problems time and cost will be lost as well as repetition of a fairly large amount of source codes. Thus, data consistency will be hard to maintain due to preferences and habits of developers. This will result in delay of development and difficult modification & enforcement, decreasing the expansion ability and flexibility of the federation.The Object Manager can simplify this issue. Since it unifies RTI service and data conversion, it can maintain the consistency of data and its flexible reaction to changes in data conversion methods allows the federate to easily adapt to changes in the federation from conceptual model adjustments.4.1.3 Interaction Manager The Interaction Manager is for managing interaction events; it sends federate interaction events to the RTI and receives RTI interaction events to execute them. Similarly to the Object Manager, it allows federate developers to omit tasks relating to enumerated/complex parameter conversion (encoding/decoding) and allows them to be focused on original functions of the simulation.4.1.4 Instance ManagerThe Instance Manager manages object instances generated by the Object Manager. Objects registered by the federate or the RTI will be realized as an instance of the abstract class by the Object Manager, and then registered in the Instance Manager. The Instance Manager presents numerous ways to access the created object, and it responses to common requests (Refresh, SendAllData, UpdateRequest, etc.) of the RTI and federates.4.2 ROM Foundation Class (RFC) Implementation StructureDefinition 2: ROM Foundation Class (RFC)RFC is the abstract class generated from the ROM Library, and it is automatically created and managed by the compliant model requesting for registration to the ROM [Fig. 7]. EMBED PowerPoint.Show.8  Generation of the RFC means that all functions of the ROM can be used and just by referring to the registration of object registration/update actions, federate developers need not consider whether the data is proper(whether it is published, what the handle value is, how to send data, when to send data) for transmission to the RTI.Also, when object creation is discovered at the RTI, RFC is automatically generated and update information of data are reflected. This is possible because abstract objects of the RFC is generated as the FOM information as basis and is managed by the Information Manager of the ROM.RFC may not only be used for converting a completed model to a HLA compliant model, but also for developing a whole new HLA federate.RFC is designed to use the ROM Library rather than be dependent on ROM for information. It also includes a few functions for interface with an unique generator and ROM. RFC and ROM are closely related with the FOM and information are registered in the ROM as a standard format file.4.3 RAT SupportRAT is a supportive tool for actualizing abstract objects deducted from the conceptual model. It provides software developers with common, object-oriented basic codes and supports the consistency of these codes. It is a development supportive tool that ensures and supports HLA compliance through common interface with ROM [Fig. 8]. EMBED PowerPoint.Show.8  Federate development using RAT generates compliant objects and interaction classes and allows the generation of FOM and SOM for compliance based on this interaction class. If the usage of proper FOM or SOM is possible, you can just re-generate compliant objects and interaction classes to be added to create a newly purposed FOM or SOM. A new member federate developed by using these common objects and interaction classes. As shown above, RAT is a useful method that allows federate development even without full understanding of RTI interface services.RAT functions are as follows:① Generates a compliant class from external compliant data.② Provides various data (SOM, FOM, Management Object Model (MOM)) for integration.③ Provides an interface(sending and receiving compliant data) by using the ROM Lib.④ Provides object class creation, management and edit functions.⑤ Provides interaction class creation, management and edit functions.⑥ Provides original code management functions.5. CJ21_HCM HLA Certification and Confederation Test (CT) with JISIn previous chapters, we presented how we designed and implemented CJ21_HCM with RAT, which was made with the ROM Framework as basis. Then we received HLA Certification from DMSO, and this was a precedent step for us to take before integration with JIS. After acquiring HLA Certification, we successfully executed the Confederation Test (CT) of CJ21 and the JIS Federation along with the KBSC in USFK.5.1 CJ21_HCM HLA Certification TestDMSO requested that before we try integrating with the JIS system of the US, CJ21_HCM should receive HLA Certification, so we prepared for the HLA Certification Test. For the test, we established a test federation composed of CJ21_HCM and an Air Model for testing called T-AIRSIM. The test was executed through the Internet. [Fig. 9] EMBED PowerPoint.Show.8  For the Certification Test, we prepared the following:First, we developed AIR SIMulation for Test model (T-AIRSIM), an air model for testing, by using RAT.Second, we established CJ21_HCM SOM and a FOM for testing by referring to the JIS FOM.Third, we determined what HLA service items we will set as the subject for testing. (Mainly services that will be tested in the Confederation Test)From our preparations, Certification Test of the CJ21_HCM was successful. Although ownership management and data distribution management services were not included, the rest of HLA services passed the test flawlessly. Such successful Certification Test results served us well as the cornerstones on which our preparation effort for the ROK/US Combined Certification Test built upon.5.2 Confederation Test (CT) of CJ21_HCM and JISConfederation Test between CJ21_HCM and JIS only had the purpose of confirming whether CJ21_HCM can be integrated into JIS as a member federate. After arrangement periods, the test was executed for about two weeks at the KBSC. Participants were members from ROKA TRADOC System Analysis Center (SAC), Korea Battle Simulation Center (KBSC) and MITRE.The test was executed in the procedure of CJ21_HCM being connected to the RTI receiving and processing JIS member federate (CBS, RESA, AWSIM) data. In the first part of the test, a federation in which CJ21_HCM and CBS are integrated was established and in the second part of the test, RESA and AWSIM federates were added for testing. [Fig. 10] EMBED PowerPoint.Show.8  Main test contents included Federation Management services relating to federation initialization and shutdown, Declaration Management Services relating to federate object publication/subscription, Time Management Services relating to time synchronization and advance speed management, and Object Management Services relating to object registration/discovery and update/reflection.Actually, the test was proceeded successfully much faster than expected that we ran an additional limited two-way test in which CJ21_HCM also publishes and updates objects [Fig. 11]. EMBED PowerPoint.Show.8  This CT was aided by the appropriate usage of various development supportive tools from DMSO and the experience from acquisition of HLA Certification. Also, close contact with related organizations like DMSO, KBSC and MITRE allowed the success of the CT.However, we were not able to gain access to development supportive tools like FMT (only used for JIS) before the CT and this gave us some difficulties in executing a previous self-test. In the future, it will be requested that JIS and CJ21_HCM teams share a standard development supportive tool and established an environment that can at least ensure regular tests at the developer level.Also, investment on CBS, RESA and AWSIM has been ceased due to JIS development. This resulted in the need for the three models to make modifications to their codes to meet new demands. Therefore, we believe that the US will need to promptly decide whether to use JIS before JSIMS is in full operation so that capabilities of JIS can be improved.Finally, though excluded in this test, the most important thing in ROK/US model integration will not be technical compliance but function logical compliance. This is an issue that only internal representation for compliant objects of ROK/US development organizations can solve; we identified that inaugurating a cooperative federation development team consisting of developers from both nations will be an effective solution.From the CT, we clearly showed that a standardized integration (compliance) of various models from different nations is definitely possible. We believe that we can achieve success in any task if we develop a federation with new simulation goals.6. ConclusionAll existing simulation models should be considered as potential federation members. Such “potential members” will also face a problem requiring a similar conversion to a HLA federate, and developers of that particular model will have to spend much time and efforts in understanding HLA technically. However, as we proposed, if a tool that can use the ROM Framework is applied, developers will not have to take the burden of understanding HLA fully for converting their models into federates [3].HLA federate developers that use a framework should first reconfigure a conceptual model of the federation in which their model will participate as members [6]. Then they should determine and develop a SOM that will define what the federate will have to do. Afterwards, framework development tools can be used to create compliant classes corresponding to the SOM, and just applying these compliant classes and recompiling the program can develop the new HLA member federate.In this research, we did not mention internal representations that each model will have to make after receiving compliant data. Otherwise, our research will be contrary to the framework approach to HLA federate development since this data is a modeling element of federates. In other words, federate development using a framework means establishing a simulation model that fulfills HLA rules and OMT/interface requirements as a federation member.In conclusion, this research provided a mechanism that can minimize modification factors of a model due to data changes by maintaining the consistency of all data management for integration. Also, a common library (ROM) was provided to separate functions for federate implementation from the federation and actively react to changes in the conceptual model of the federation.The research results, ROM and RAT, implemented only some of HLA services; additional HLA services should be implemented as well. However, we can state that the proposed ROM Framework supports a useful technical structure that can convert a non-HLA compliant model to a HLA compliant model in a facilitated manner.This ROM Framework will continue to be a useful method for establishing the ROK/US combined exercise integration system. Integration of models from different nations especially requires more modifications to the models and this will bring needless trial & error and difficulties in the development phase. We believe that the ROM Framework will be the best solution for this problem.References[1] Kevin Cox, "A Framework-based Approach to HLA Federate Development,” SIW, Fall, 1998.[2] Hae-Kwan Lee, Dae-Seog Kim, Yong-Hyo Kim, "A Framework Approach to HLA Compliant Federate Development (CJ21_HCM: A Case Study)," The 4th ROK-US DM&S Workshop, May, 2002.[3] Callie M. Hill, “HLA Implementation to Support Multiple FOMs,” SIW, Spring, 1999.[4] Belanger, Philippe Fortier & Lily Lam, “Lessons Learned from a Framework Approach to HLA-Compliant Federation Development,” SIW, Spring, 1998. [5] Regis Dumond, “A FOM Flexible Federate Framework,” SIW, Spring, 2001.[6] Jean-Louis Igarza, “The WARRIOR/ELYSA Experience: A FEDEP Use Example,” SIW, Spring, 2000.Author BiographiesDAE-SEOG KIM is an Army officer with over sixteen years of commissioned service. He graduated with a B.S. in computer science from the Korea Military Academy, Seoul in 1986 and was commissioned in Infantry. He completed an M.S. in Computer Science at the Ministry of National Defense in 1993. Additionally, he is studying for a Ph. D in Computer Science in Chung-Nam National University.He is currently the project manager for Chang-Jo21_HLA Compliant Model (i.e. Next Generation ROKA Ground Model) development at the ROKA TRADOC System Analysis Center (SAC) in Daejeon.  The main part of his career has been Training Simulation Model development (Chang-Jo21, Jeon-Too21 etc.), in which he worked for 7 years.HAE-KWAN LEE is an Army officer with over twenty years of commissioned service. He graduated with a B.S. in Civil Engineering from the Korea Military Academy, Seoul in 1982 and was commissioned in Infantry. He completed an M.S. in Statistics at Texas A&M University, USA in 1992, and a Ph. D in Industrial Engineering from the Osaka Prefecture University, Japan in 1998.He is currently managing projects including Chang-Jo21_HLA Compliant Model development, Rear Area Operation Model development, the Combat Service Support Simulation Model, and the Combat Analysis Model at the ROKA TRADOC System Analysis Center (SAC) in Daejeon. He has been working in the Simulation Model development field since 2000.JAE-CHEOL RYOU is a professor at the department of Computer Science, Chungnam National University. He graduated with a B.S. in Industrial Engineering from Hanyang University, Seoul in 1985. He completed an M.S. in Computer Science at Iowa State University in 1988, and a Ph. D in Computer Science at Northwestern University in 1990. He is currently a professor of Computer Science at Chungnam National University. He has been working in the Distributed Systems field for 6 years. EMBED PowerPoint.Show.8  