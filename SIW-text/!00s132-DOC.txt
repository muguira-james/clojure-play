Application Domain Modelling for the Verification and Validation of Synthetic Environments: from Requirements Engineering to Conceptual ModellingP. F. G. DonzelliM. R. Moulding *Computing Information Systems Engineering GroupDepartment of Informatics and SimulationRoyal Military College of ScienceCranfield UniversityShrivenham, Wiltshire, UK+44-1793-785522 HYPERLINK mailto:donzelli@rmcs donzelli@rmcs.cranfield.ac.uk ;  HYPERLINK mailto:moulding@dial moulding@dial.pipex.com(* contact) Keywords:Application Domain Modelling; Conceptual Modelling; Object-oriented Modelling;Requirements Engineering; Verification and Validation.ABSTRACT: A Conceptual Model (CM) of a Synthetic Environment (SE) is the vehicle via which the stakeholders, such as analysts, users, and subject matter experts, collaborate to articulate a first (most abstract) solution to the question posed by the initial SE requirements.  In practice, a CM must deal with aspects such as the Problem Domain, which the simulation is to model, the different simulated elements, and their relationships.  To achieve this, the Conceptual Modelling activity must be suitably informed by the Requirements Engineering (RE) process, where the specific needs of the Application Domain in which the SE will operate are discovered, analysed, and eventually formalised in terms of high-level capabilities that the SE has to provide.  Importantly, the visibility of, and the traceability between, RE and Conceptual Modelling products, and the rigour of the notations employed, are key contributors to strong verification and validation (V&V) in the early stages of SE development.  At the Spring ‘99 Workshop,  we reported upon a RE Framework which we had devised to provide a systematic approach to Application Domain Modelling for enterprised-based SEs.  The paper presented here continues that work by demonstrating how the RE Framework can be extended with an object-oriented approach, using the Unified Modelling Language (UML), to produce a CM which  facilitates strong early-stage V&V.1.	IntroductionThe validation of a Synthetic Environment (SE) must strive to ensure that the SE is suitable for its intended use, and requires a sound understanding of the problem domain which is being modelled and the application domain in which the SE is to be employed. At the Spring ‘98 SIW [1], we suggested that the modelling and simulation (M&S) community had directed considerable effort towards formalising abstractions from the problem domain, such as in the Conceptual Models of the Mission Space (CMMS) initiative, but that there had been relatively little work concerned with modelling the applications domain, to support user-oriented requirements capture.  Consequently, we proposed how the High Level Architecture (HLA) Federation Development and Execution Process (FEDEP) may be extended with Application Domain Modelling (ADM), to support both verification and validation at an early stage of SE development.  The resulting ‘Y-model’ of HLA Development is illustrated in Figure 1.  In the simplest case, this would involve modelling the application process that employs the SE, and the application system which delivers that process and within which the SE is embedded.At the Spring ’99 SIW, we built upon our initial ADM work with a paper [2] which introduced an enterprise-oriented Requirements Engineering (RE) Framework for ADM.  Since then, we have been investigating how a Conceptual Model (CM) may be produced as a natural extension to the RE Framework, within the overall context of the Y-model.  This has resulted in an extended Y-model that begins to address the relationship between ADM and Problem Domain Modelling (PDM), and an object-oriented Conceptual Modelling approach that leads to a well-structured, well-organised CM whose components are easily traceable to real enterprise needs.This paper will review the role of our RE Framework within the context of the existing Y-model, and then present the Conceptual Modelling approach and extended Y-model, discussed above.  A previously-employed example of an Avionics System Rig (ASR) SE [2, 3] will be adapted to illustrate these new developments, which are argued to improve maintainability of a SE, and facilitate reuse of both problem-domain and application-domain knowledge (and attendant SE components), as well as improving the early-stage Verification and Validation (V&V) of SEs.The paper is organised as follows.  Section 2 briefly outlines our RE Framework, summarising research previously presented in [2, 4].  Section 3 introduces the application example, and shows how the RE Framework enables the specific needs of the Application Domain, in which the SE will operate, to be discovered, analysed, and eventually formalised in terms of high-level capabilities that the SE has to provide.  Section 4 illustrates how the RE process can usefully inform the Conceptual Modelling activity, by completing the application example and developing the ASR CM.  Finally, in section 5, we summarise our work by showing how the Y-model provides an organised framework for inter-relating PDM, ADM and Conceptual Modelling, with integrated V&V.Figure 1    The Y-Model: A Modified HLA Development Process2.	Modelling the Application Domain: the RE FrameworkFrom Figure 1, we can deduce that ADM requires us to model and understand “WHAT” the application process seeks to achieve, and “HOW” an application system should be configured to deliver that process.  In this way we can arrive at the “WHAT” of the SE which is embedded within the application system; that is, the SE’s requirements.  When considering such an approach, however, it is also advantageous to model the underlying reasoning context, which provides the “WHY” behind the “WHAT” and the “HOW” [5, 6].  This enables us to focus on the ‘right’ SE for a given application, to design (or re-design) the application system so that it more fully exploits the SE’s capabilities [7], and improves our capacity to identify, justify and validate the SE’s requirements [6].The “WHY”, the “WHAT” and the “HOW” are the three different facets of ADM that our RE Framework has been designed to deal with.  The “WHY” represents the set of goals of the application domain that are to be achieved, the “WHAT” is the set of tasks to be performed in order to achieve the goals, and the “HOW” is the way in which the tasks interact to form an organisational system.  Collectively, the “WHY”, “HOW” and “WHAT” provide Organisation Modelling at various levels of abstraction within the application domain.  The combination of the “WHY” and the “WHAT” represents Goal Modelling.  We recognise two kinds of goals: functional goals (or Hard Goals), which express the desired post-conditions of the application domain; and quality goals (or Soft Goals), which constrain the manner in which such post-conditions have to be achieved.  In comparison to hard goals, soft goals are highly subjective and are strictly related to a particular context.  For example, the concept of realism of a particular SE interface may change depending on the application domain (e.g. civilian or military equipment procurement), on the application system (e.g. testing or training), and even on the final user (e.g. trainee or instructor).  Specifically, separating the Soft and Hard Goal Modelling from the Organisation Modelling helps to reduce the complexity of ADM.  The resulting RE Framework structure is illustrated in Figure 2.Figure 2    The Requirements Engineering Framework for Application Domain ModellingThe Organisation Modelling deals with modelling the application domain structure.  It assists in understanding the existing processes and the corresponding application system, and serves to generate alternatives that better address the initial goals.  Our key modelling abstraction is that of an Agent, which may represent any active entity in the application domain (human, machine, or team), including the target SE [6, 8].The Soft Goal Modelling aims to produce operational definitions of the soft goals, sufficient to capture, and make explicit, the semantics that are usually assigned implicitly by the user [9].  In this way, the SE quality issues can be highlighted from the outset.The Hard Goal Modelling seeks to determine how to achieve the imposed hard goals, by decomposing them into sub-goals and tasks (specific and well-defined activities), through continuous refinement.  Our approach draws upon [5], although a more informal approach, based on a combination of natural language and a semi-formal graphical notation, has been used [6].Applying the RE FrameworkAn ASR, which could be used to investigate the feasibility of equipping an aircraft with a new avionics sub-system, would typically consist of a mixture of real and simulated equipment [2, 3, 4].  For example, while all the main aircraft sensors would be simulated (Navigation and Air Data Sensors, Radio, Radar, etc.), the real new sub-system would be used, together with real units associated with the crew interface.  Such an interface would allow a crew to form part of the overall rig, so that the effects of the proposed new system on crew performance could be determined. Therefore, an ASR provides the core of a SE aimed at a Test and Evaluation  (T&E) application, with both hardware-in-the-loop and human-in-the-loop aspects.In [4], we apply the RE Framework to an hypothetical ASR, which is aimed at providing an aircraft with a thermal pod for improving its night vision capability, to show how ADM allows the main ASR requirements to be obtained.  In this paper, for brevity, we limit our presentation to a few extracts from this example application.In Figure 3, a simple Organisation Model, within which the ASR is employed, is shown.  Circles represent Agents, and dotted lines are used to bound the internal structure of complex agents; that is, agents containing other agents. Consequently, the SE is a complex agent, encompassing the agents ASR and the Flight Test Crew, which interacts with the simple agent Avionics System Expert.Figure 3    The Organisational Model to perform the Integration StudyAgents interact by exchanging goals.  Clouds represent Soft Goals, whereas rounded-rectangles represent Hard Goals. Thus, in Figure 3, the Avionics System Expert receives, from the enclosing application domain, the soft goal of “evaluate avionics integration feasibility” of the new pod.  Each agent works as a goal transformer.  Having received a goal, an agent will operate according to its own experience, knowledge or position within the organisation, in trying to achieve it.  It will decide how to achieve the goal in terms of tasks and sub-goals, and may choose to depend on other agents, by passing out some of these tasks and sub-goals.  For example, the behaviour of the Avionics System Expert may be understood by considering the soft goal model in Figure 4. In order to achieve the received goals, the Avionics System Expert will need to “observe the pod in its avionics environment”, and will require a “crew judgement”. The first soft goal will spawn some precise goals that the SE agent has to satisfy; that is, the hard goal “collocate the pod in its avionics environment”, with the associated soft goal “pod avionics environment realism”, and the hard goal “monitor avionics system behaviour”.  The latter will require that a new agent, named Flight Test Crew, will have to be included in the SE, to operate with the ASR.  In Figure 4, the “A” annotation on each decomposition line indicates that all these goals must be satisfied (‘AND’ refinement), whereas the goals in bold outline are those that the Avionics System Expert will pass out (see Figure 3), and they are not further refined. In order to be able to express its opinion, the Flight Test Crew, in Figure 3, will require the possibility of ‘flying’ the new pod, which places two other goals on the ASR: a hard goal, “try the pod in flight conditions”, and a soft goal, “ASR interface realism”.Figure 4    The Soft Goal “evaluate avionics integration feasibility”Figure 5     Soft Goals imposed on the ASRBy analysing and refining the goals imposed on the SE agent, the final requirements for the ASR can be obtained.  For example, by modelling the soft goals “pod avionics environment realism” and “ASR interface realism” (Figure 5), a clear idea of the needs of the Avionics System Expert and Flight-test Crew agents can be gained and translated into functional and non-functional requirements for the ASR.  In particular, Figure 5 shows how the soft goal “pod avionics environment realism” spawns the soft goals “sensors and aircraft model realism”, “avionics system realism”, and the same “ASR interface realism”. The soft goal “sensors and aircraft model realism” will lead to a well-defined set of constraints, which are represented by rounded-rectangles with one horizontal line, and form non-functional requirements regarding both the sensors’ tolerance and the aircraft model’s capabilities.  In this way, for example, the Flight Test Crew will be able to fly quite realistic low-level missions to test the pod.  The soft goal “avionics system realism” will translate into constraints defining what kind of equipment should be used.  For example, the Avionics System Expert wants to be able to interface the pod with the real on-board computer.  Finally, the soft goal “ASR interface realism” will refine into both hard goals and constraints.  In particular, the ASR will be required to provide the pilot cockpit view (a functional requirement) on a flat screen (a non-functional requirement).From SE Requirements to the Conceptual Model: the ASR CMThe RE Framework allows us to model the application domain at a social-technical level, by providing a systematic approach to deal with agents, soft goals, hard goals, and their incremental refinement.   In the previous section, we have illustrated how the main requirements for the ASR may be obtained by modelling the application domain, starting with the high-level organisational goals.  These requirements are expressed as a collection of hard goals and constraints, which are placed upon the ASR by other agents of the organisation.At this point in our analysis we have to deal with a purely technical system: the ASR agent.  Consequently, to derive the conceptual architecture of the ASR, we have switched to an UML-based object-oriented modelling approach [10].The front-end activity of any UML-based approach is ‘use-case modelling’, which aims to define what the system should provide, by capturing the ways in which the users intend to interact with it.  Both the research community and the business world have recognised that use-case analysis can benefit substantially from supporting methods that help to identify both the actors, which interact with the system, and their motivating goals [11,12].  The output from our RE Framework, in the form of a set of hard goals and constraints placed upon the system by well-defined agents, is entirely consistent with this.To illustrate this point, let us start by considering Figure 6.  Here, the initial set of hard and soft goals placed upon the ASR agent, as shown in Figure 3, is expressed as a collection of hard goals and related constraints, which are obtained by substituting the soft goals with their corresponding models in Figure 5.Figure 6    Output from the RE Framework as a Set of Hard Goals and ConstraintsIn the context of our RE Framework, use-case modelling can be viewed as a hard goal refinement strategy, which is based upon an analysis of the way in which the goal’s owner (actor in UML, agent in our RE Framework) intends to use the system when requiring the goal to be achieved.  In other words, by employing use-cases, the agent expresses how it intends to be supported by the system in the context of the stated goal.  A hard goal can lead to one or more use-cases, where a use-case is a collection of possible sequences of interactions (scenarios) between the actor and the system.  Importantly, the possibility of delaying hard goal refinement at the RE Framework stage, through use-cases at this level, helps to reduce the detail that must be captured at the social-technical level, thereby providing greater clarity and abstraction.  Each constraint on a hard goal will be associated with the corresponding use-cases as a non-functional requirement, and formalised by using specific additional information in the use-case description. Some extracts from the ASR use-case diagrams [4], developed by using the SELECT CASE tool [13], are illustrated in Figures 7 and 8.  Here, by super-imposing the RE Framework notation (dotted lines) onto the UML notation, we can illustrate how use-cases are related to hard goals and constraints.  In particular, dotted boxes are used to group together use-cases contributing to the same hard goal (linked by a ‘spark’), whereas dotted arrows are used to link constraints to use-cases within which they should be dealt with.Figure 7 shows the use-case model built by taking into account only the Avionics System Expert agent, and his or her related hard goals and constraints (see Figure 6).  First, Figure 7 shows how the whole set of use-cases “connect pod to avionics system”, “perform pod on-ground operations”, and “perform pod in-flight operations” contributes to the achievement of the Avionics System Expert hard goal “collocate the pod in its avionics environment”.  Secondly, it illustrates how the use-case “perform pod in-flight operations”, on its own, aims to achieve the hard goal “provide pilot cockpit view”, and how the use-case “collect data” is related with the hard goal “monitor avionics system behaviour”. Finally, Figure 7 shows how the constraints are associated with the various use-cases.  For example, the constraints “real on-board computers” and “real on-board data links” will affect the way in which the use-case “connect pod to avionics system” will be performed.Figure 7    The Use-case Diagram for the Avionics System ExpertFigure 8    Shared Use-casesBy developing use-cases for different actors, we may find that some of the derived (subordinate) use-cases are relevant for two or more of them.  For example, Figure 8 highlights use-cases shared between the Avionics System Expert and the Flight Test Crew.   However, the same use-case may assume a slightly different relevance for different actors.  For example, the Avionics System Expert would be interested in performing the pod operation “object on ground position acquisition”, in order to evaluate the pod behaviour in its avionics environment (and, perhaps, to collect data about its precision), as stated by his/her hard goal.  Alternatively, the Flight Test Crew would like to perform the same operation, with the aim of assessing the new system in a more practical manner, to provide an operative judgement.Although UML use-cases drive the whole development process [11], from analysis to test, here we show how they can be combined with the RE Framework results to produce a well-structured ASR CM, whose components are easily traceable to the initial high-level organisational goals.  As advocated by Pace [14], we obtain a well-organised and information-rich CM, which will identify the simulation context (the domain which the simulation is to address, gathering both application and problem domain issues), the simulation elements (the real-world models that will be simulated), and the simulation concept (the sum of the simulation elements as a whole system).  Such a CM will not only be suitable to drive the subsequent SE design and implementation, but also support early V&V activities, and make possible the effective reuse of its constituent components.To illustrate how we complete the specification of the ASR CM, let us now consider one of the shared use-cases in Figure 8; that is, “track object on ground”.   As described in Table 1, such a use-case specifies that, once the pod has been connected to the avionics system, and in-flight conditions are simulated, the Flight Test Crew and the Avionics System Expert should be allowed to: (1) select the pod; (2) scan the area underneath the aircraft for the desired object, by moving the pod and checking the displayed image; (3) centre the pod on the desired object; (4) stabilise the image; and (5) select the desired operation (e.g. record image).  In addition, it also specifies that some real equipments should be used, such as the pod, the airborne computer and the crew selectors, and that the cockpit view should be provided on a flat screen.Table 1    Tabular Description of the Use-case “track object on ground” Figure 9    Class Interaction Diagram for the Use-case “track object on ground”Starting with the use-case description for “track object on ground”, the main (object) classes related to its implementation can be obtained: “Crew selectors & controls”, “thermal pod selectors”, “thermal pod display”, “view from cockpit”, “airborne computer”, “thermal pod” and “aircraft model”.  The resulting class collaboration diagram [11] is shown in Figure 9, where the relationships between actors and system, and between classes, are shown, and the constraints associated with each class are also identified.  Again, dotted lines are used to superimpose the RE Framework (i.e. constraints) onto the UML notation; in particular, Figure 9 shows how a real airborne computer has to be used, and how the view from the cockpit has to be displayed on a flat screen.   By tracing these constraints back to the corresponding soft goals, the high-level goals and the agents underpinning them can be found.  For example, the need to employ a real airborne computer can be traced back to the need of the Avionics System Expert agent to evaluate the avionics integration feasibility of the pod by using a realistic environment. By analysing and combining all the realisations of the different use-cases, the class diagram [11] of the ASR can be obtained.  For brevity, this is not discussed further here, and the reader is referred to [4], where an example of the ASR class diagram is provided.5.	Extension of the Y-ModelThe process outlined in the previous sections, that leads from high-level organisational goals, through ADM, to SE Conceptual Modelling, can be mapped onto the Y-model pictured in Figure 1, to obtain an extended Y-model, as shown in Figure 10.In Figure 10, the links between ADM, PDM and SE Conceptual Modelling are clearly shown, to explain how these three front-end activities divide up the total task of driving the Federation Development.ADM, starting from the high-level enterprise goals/constraints relating to the SE business venture, defines the needs of the application in terms of the hard goals, which the SE has to support, and the constraints (e.g. costs, delivery timescales) that limit the SE’s behaviour and development.  Clearly, also at a very initial stage, ADM has to be informed about the PDM capabilities and limitations.  In turn, PDM, by refining the output from ADM (i.e. ADM goals and constraints), constrains the behaviour of the real-world objects whose need has been identified, to ensure that they will be modelled appropriately in the SE solution.  Sensibly, PDM needs to take account of what PDM knowledge already exists, hence the connection to external knowledge repositories such as the CMMS.  As suggested in Figure 10, iteration between ADM and PDM  is possible, until a stable and coherent set of outputs is reached.Figure 10   An Extended Y-ModelThe outcomes from ADM and PDM, respectively, are the SE goals/constraints that formalise the SE Objectives, and the PD model properties that are needed to support those objectives.  These will feed the SE Conceptual Modelling activity, where the (CM) product forms the highest-level abstraction over the SE solution; that is, the system specification which identifies the functional and non-functional properties of a SE that is fit-for-purpose.  As previously discussed, this paper suggests combining UML with the outcomes of the RE Framework, to produce the SE CM.  Such an approach allows the analyst to obtain a CM where both the details of the M&S components (e.g. algorithms and resolution) and the SE’s functionality (e.g. usage modes, functions and scenarios) are identified and traceable back to the initial needs of the business organisation.  In this way, each CM component (e.g. an aircraft model, a data-collection component, etc.) will play an understandable role within the CM and within the business enterprise.  Finally, as illustrated in Figure 10, components can be obtained by selection (and possible customisation) from external repositories, or be developed ad-hoc and then contributed back to such repositories.  There is also the possibility that business enterprises will develop their own internal repositories, for components that are specific to their needs, but this has been omitted from Figure 10, for clarity.The extended Y-model represents a systematic and information-based development process from which both V&V and reusability can benefit.  V&V activities can benefit from the traceability between products, and from the high visibility of the CM internal architecture; reusability benefits derive from the explicit knowledge of the rationale behind each CM or Federation component.6.	AcknowledgementsThe authors would like to express their thanks to the UK MOD and DERA for encouraging and funding this work; in particular, to Mr. Simon Mepham, our MOD customer, and Dr. Robin Miller of DERA/CDA.7.	References[1]	Hone, G. N., Moulding, M.R. “Application Domain Modelling to Support the Verification and Validation of Synthetic Environments”, Proceedings of the Spring 98 Simulation Interoperability Workshop (1), Orlando, FL, March, 1998.[2]	Donzelli, P., Moulding M.R. “Developments in Application Domain Modelling for the Verification and Validation of Synthetic Environments: A Formal Requirements Engineering Framework”, Proceedings of the Spring 99 Simulation Interoperability Workshop, Orlando, FL, March 1999.[3]	Donzelli, P., Marozza R. “Laser Designation Pod on the Italian Air Force AMX aircraft: a prototype integration”, Proceedings of the NATO/RTO SCI Joint Symposium on Advances in Vehicle Systems Concepts and Integration, Ankara, Turkey, 26-28 April, 1999.[4]	Donzelli, P., Moulding M.R. “A Unified Approach to the Verification, Validation and Accreditation of Synthetic Environments: A Requirements Engineering Framework”, Cranfield University Technical Report SE027E/TR1 Version 1, December 1999.[5]	Dardenne, A., Van Lamsweerde, A., Fickas, S. “Goal-Directed Requirements Acquisition” Science of Computer Programming, Vol. 20, North Holland, 1993, pp. 3-50.[6]	Yu, E. “Why Agent-Oriented Requirements Engineering” Proceedings of 3rd Workshop on Requirements Engineering For Software Quality, June 16-17, 1997, Barcelona, Catalonia.[7]	Hammer, M., Champy, J. “Reengineering the Corporation: A Manifesto for Business Revolution”, Nicholas Brealey Publishing, London, 1995.[8]	D'Inverno M., Luck, M. “Development and Application of an Agent Based Framework” Proceedings of the First IEEE International Conference on Formal Engineering Methods, Hiroshima, Japan, 1997.[9]	Cantone, G., Donzelli P. “Goal-oriented Software Measurement Models”, European Software Control and Metrics Conference (ESCOM-SCOPE 99), 27-29 April, Herstmonceux Castle, East Sussex, England.[10]	Rumbaugh J., Jacobson I., Booch G. The Unified Modelling Language Reference Manual. Rational Software Corporation, Addison Wesley, UK, 1999.[11]	Cockburn A. “Structuring Use Cases with Goals”, Journal of Object Oriented Programming, Sep-Oct 1997 and Nov-Dec 1997 issues.[12]	Rumbaugh J. “Getting Started: Using Use Cases to Capture Requirements”, Object Oriented Programming, Sept. 1994, pp. 8-12, 23.[13]	Allen P., Frost S. Component-Based Development for Enterprise Systems: Applying the Select Perspective. Cambridge University Press, Cambridge, UK, 1998.[14]	Pace D.K. “Development and Documentation of a Simulation Conceptual Model”, Proceedings of the Fall ‘99 Simulation Interoperability Workshop, Orlando, FL, September 1999.Author BiographiesPAOLO DONZELLI has recently joined the Department of Informatics, Telecommunication and Statistics of the Office of the Prime Minister in Rome, Italy, as Advisor.  The work reported in this paper was carried out while he was a Senior Research Fellow with the Computing Information Systems Engineering Group, in the Department of Informatics and Simulation, at RMCS.  Dr Donzelli has a variety of interests in the software engineering area, and his doctoral thesis was in software process quality modelling.MICHAEL MOULDING is Professor of Software Engineering, and Head of the Computing Information Systems Engineering Group, at RMCS.  Over the past decade his main research activities have been in the fields of high integrity software, requirements analysis, mathematically formal specification techniques, and the verification, validation and accreditation of Distributed Interactive Simulation systems. 