Determining RTI Suitability for the Joint Training ConfederationBryan YoumansThe MITRE Corporation7515 Colshire Dr.McLean, VA 22102-7508703-883-6614byoumans@mitre.orgKeywords:JTC, HLA, RTI, ALSP, JIS, ADAPTOR, FMTABSTRACT: The Aggregate Level Simulation Protocol (ALSP) Systems Engineer (SE) has spent several years exploring the feasibility of migrating the Joint Training Confederation (JTC) from an ALSP Infrastructure Software (AIS) based confederation to a High Level Architecture (HLA) based federation. During this time, the SE has built a suite of tools to promote a seamless transition on the part of the ALSP simulations, while exploring the potential of several HLA Runtime Infrastructure (RTI) implementations.  While extensive testing has enabled the SE to streamline its testing procedures and has highlighted specific areas of critical importance to a JTC federation, it has also failed to produce an RTI implementation that adequately meets the complete needs of the JTC. The SE has begun an analysis of several new RTI implementations, which will eventually include RTI1.3NGv5, the Pitch RTI, and the Mitsubishi RTI. The SE plans to subject them to its testing process in an attempt to compare the suitability of these RTIs for use in the JTC. This paper describes the history of the SE’s previous integration efforts, the unique requirements placed on the infrastructure software by the JTC, the testing process that has developed over the course of these investigations, and the results of subjecting a new RTI to this testing.1. IntroductionDespite over four years of migration development and integration testing, the Joint Training Confederation (JTC) still has found no viable infrastructure to support its migration to a High Level Architecture (HLA)-based federation.  While the federates have been continuously developed and streamlined over the course of this effort, the continued replacement of Run-Time Infrastructure (RTI) software has left the federation bereft of a similarly mature, tested infrastructure.  Earlier this year, the JTC’s Systems Engineer (SE) decided to investigate the source of these continued HLA migration problems.  The resulting reassessment of the JTC’s RTI requirements led to a revamped test plan and the pursuit of new RTI candidates upon which to conduct testing.  This paper describes the current results of this ongoing effort.JTC HistoryThe JTC consists of pre-existing, stand-alone service simulations that intercommunicate to produce an environment suitable for joint training.  Building upon experimentation begun in 1990, the JTC has supported joint training exercises since 1992 with great success. [1]The simulations which comprise the JTC (see Table 1.1) communicate using the Aggregate Level Simulation Protocol (ALSP), a text-based protocol and infrastructure enabling the coordination and management of time, object and interaction data, and synchronization between entities [2]. A suite of software components, the ALSP Infrastructure Software (AIS), provides the gateways and message transport mechanism for the confederation’s constituent simulations.  These include theALSP Common Module (ACM), which communicates directly to a single simulation and manages all time and object data for its simulation;ALSP Broadcast Emulator (ABE), which delivers the protocol messages between ACMs and other ABEs;Confederation Management Tool (CMT), which allows a technical controller to monitor and manipulate ACMs and ABEs.Figure 1.1 depicts the JTC AIS architecture [3].Since 1993, the ALSP Systems Engineering team has managed the development of the AIS and overseen the integration of new simulation capabilities into the JTC.  Additionally, the SE has been responsible for annually testing and fielding a JTC that supports the needs of the training community.  The JTC entered a maintenance mode in 1998 in preparation for its replacement by the Joint Simulation System (JSIMS).  AIS-based development ceased in the JTC, as the DoD M&S community prepared for the advent of HLA based simulation. [1]Table 1.1 2002 JTC SimulationsJTC SimulationPrimary FunctionalityCBS (Corps Battle Simulation)Represents Army combat operationsAWSIM (Air Warfare Simulation)Represents Air Force combat operationsRESA (Research, Engineering, and Systems Analysis)Represents Naval combat operationsMTWS (Marine Air Ground Task Force (MAGTF) Tactical Warfare Simulation)Represents Marine Corps combat operationsCSSTSS (Combat Service Support Training Simulation System)Represents Army logisticsJQUAD (consists of four related models:  JECEWSI - Joint Electronic Combat Electronic Warfare Simulation, JCAS - Joint Command and Control Attack System, JOISIM – Joint Operational Intelligence Simulation, and JNETS – Joint Network Simulation) Represents Electronic Warfare, Strategic Targets, Joint Intelligence, and Infrastructure AssetsTACSIM (Tactical Simulation)Represents Intelligence Assets and Information FeedsMDST (Missile Defense Space Tool)Represents Satellites, Theater Missile DefenseJTC HLA MigrationIn 1996, the MITRE SE began investigating potential paths to migrate the JTC from an AIS-based confederation to an HLA-based federation, in accordance with the Department of Defense’s mandate.  The resulting design allowed each JTC simulation to become an HLA federate while continuing to inter-operate using an ALSP interface. Three new components replaced the components of the AIS. The MITRE developed ALSP Data and Protocol Transfer Over RTI (ADAPTOR) replaced portions of the ACM functionality, and translated between ALSP messages and HLA services.  The RTI provided the remainder of the ACM functionality, as well as replacing the ABE’s message transport mechanism. Finally, the MITRE developed Federation Management Tool (FMT) replaced the CMT.  This new software system, shown in Figure 1.2, was termed the JTC Infrastructure Software (JIS). The MITRE ALSP Systems Engineering team led the effort to integrate the components and deploy the software for use with the JTC. [4]Since beginning the transition effort in 1997, the MITRE SE has tested three different RTI implementations with the JIS.  The first was RTI 1.0.3, a prototype RTI based upon the HLA 1.0 specification. This RTI was a proof-of-concept endeavor, with core sections of federation functionality, such as Save and Restore, unspecified in HLA 1.0.  After the formalization of the HLA 1.3 Specification, the SE worked with the DMSO sponsored RTI 1.3 from 1998 until 2000.  Problems never fully resolved with this version included save and restore functionality, throughput performance, and connectivity sensitivity [5].  Most recently, from 2000 to 2001, the SE worked to integrate with the commercially developed and supported RTI 1.3 NGv3.2.  Unfortunately, problems in critical areas required suspension of integration testing until resolution.  These problems included undependable save and restore mechanisms, resign cleanup, and an associated bug in the CORBA library used [6].  A new build that addresses these and other problems uncovered, RTI 1.3NGv5, should be nearing completion.Figure 1.1 AIS Supported JTC EMBED Word.Picture.8  Figure 1.2 JIS Supported JTCCurrent EffortAfter testing RTI 1.3NGv3.2 at the JTC Confederation Test (CT) in April ‘01, the MITRE SE re-evaluated the needs of the JTC concerning HLA infrastructure support.  This resulted in the redefinition of the SE’s HLA migration strategy for JTC as follows:Identify the JTC’s HLA critical issues.  Certain portions of RTI functionality remain unbeaten obstacles on the road to migration, even across multiple RTI implementations.  The SE seeks to promote a fuller understanding of these problems by examining the underlying JTC requirements, and perhaps determining what factors in RTI design have impeded the success of these functions.Refocus the test process around identified issues.  Previous in-house testing has focused as much on the developing ADAPTOR and FMT as on the RTI.  At this point, those two components of the JIS are relatively mature compared to the RTIs under consideration.  A new test plan should be devised to assist in the testing of difficult RTI implementation issues. Experiment beyond DMSO sponsored RTIs. The richly featured yet somewhat vague HLA 1.3 specification has resulted in today’s proliferation of vastly different RTI implementations.  The specification leaves room for enough interpretation that RTI customers must actively seek to match the needs of their federation with an RTI specifically designed to support the same focus. 2. JTC Infrastructure RequirementsAn understanding of JTC exercise expectations underscores the JTC’s infrastructure requirements that differ from many other federations.  Many of these requirements are by no means unique to the JTC, yet the RTIs tested by the JTC to date do not appear to have given enough emphasis to meeting these needs.  JTC DescriptionUnlike many federations that are analytical or experimental in nature, the JTC federation supports real world training.  Training exercises for commander’s staff officers may involve support from thousands of men and women in the field, plus hundreds more in technical support.  The scale and scope of this training necessitates several important requirements: Simulation time must advance in step with real-world, “clock” time.  This not only maintains training realism, but also allows synchronization with participants in the field.  The ratio of simulation time to real time is called the game rate, and exercises strive to maintain a ratio of 1.0 (1 simulation minute elapsing every 1 real minute).  The federation must run 24 hours a day, up to 7 days at a stretch.  In general, the equivalent amount of simulation time must elapse in order to meet scheduled training objectives.  Some exercises last more than one week, but usually break up into stages that last no longer than one week each.  This stands in stark contrast to some other federations, where the experimental or analytical nature of the federation allows for restarting from time 0.0 in the case of major catastrophe.  In those federations, results can usually be gleaned independent of the actual simulation time of the federation.  Downtime and turnaround time must be minimized wherever possible.  Exercise directors stress quick recovery from hardware failures and software crashes.  Exercises involving 100,000 or more people measure downtime in the hundreds of thousands of dollars.  In addition, lengthy interruptions in simulation execution translate to static, unrealistic C4I projections to the training audience, and impede progress towards achieving scripted training goals.  The JTC simulations depend upon time-ordered, reliable message transport.  This requires an infrastructure tuned much differently than one supporting real-time, best effort federations such as JSAF, MC02, and other DIS-based federations.The largest JTC exercises employ about 15,000 public objects, and about 10-12 federates. These load performance requirements are quite low compared to some federations, which boast 50 federates and hundreds of thousands of public objects.  Maximum data throughput is difficult to estimate; however, all 15,000 objects are rarely updated simultaneously.  As long as desired game rate is achieved under normal load conditions, throughput performance is not a critical issue.RTI RequirementsThe vast majority of functionality employed by the JTC federates has worked as desired in the RTIs tested.  Those portions of the HLA specification which practically every federate stresses – joining, declaration management, basic object management – have obviously received an enormous amount of testing and work well.  It is not surprising, then, that the problems encountered by the JTC are related to functionality implied by, but perhaps not directly stated by, the specification as well as functionality which lies beyond the scope of the specification.  This functionality includes the ability for federates to cleanly resign and rejoin, fault tolerance, and robust recovery.  These may seem like obviously necessary capabilities to someone familiar with long lifetime, constructive training federations, but to those unfamiliar with such federations, these can be foreign concepts.  Some RTI developers have expressed genuine surprise when they learn of such requirements in the JTC; they primarily concerned themselves with implementing the specification.  The JTC firmly believes that RTI design needs to plan for this functionality from the earliest stages for it to work well.  Federations like the JTC, as well as its imminent replacement JSIMS, depend upon strong reliability and efficient crash recovery.  The ability of the infrastructure to provide robust fault tolerance and recovery directly impacts the success of exercises.The maturity of the save and restore functionality of an RTI is of critical importance to the JTC.  To begin with, the JTC always operates in a post-restore state.  Normally, the federation is prepared prior to the formal start time of an exercise; once the federates have joined and registered their objects, the federation will be saved.  There might elapse a period of further testing and experimentation between this save and the actual beginning of the exercise. Then, when the exercise is scheduled to commence, the federation will restore to the start time save, and the exercise will begin.  Additionally, the JTC depends upon the ability to take periodic federation saves, and restore to them in the event of technical catastrophe.  This critical functionality ensures realistic training can continue in accordance with lengthy, scripted training objectives.  In systems as complex and distributed as the JTC, the potential for crashes of all kinds (network, federate, C4I feeds, electricity) is an ever-present reality.  Exercise commanders care less about assigning blame than recovering the federation as quickly as possible, while ensuring correctness of state, so that the training can continue unimpeded.In addition to save and restore, the JTC federates must resign and rejoin the federation cleanly and timely. Problem situations arise in which the easiest and quickest solution, depending on the federate in question, is to simply resign the federate, and have them rejoin.  In other cases of component crash or connection loss, JTC exercise success depends upon RTI provision of a means for effective, accurate recovery.  Some form of automatic connection loss detection, or a mechanism for manual removal of crashed federates, must exist in the RTI.  Whatever the mechanism, it must recover the federation to a clean, accurate state.    Other IssuesOne problem that pervades much of the HLA community is the confusion of RTI Verification for assurance that the RTI will perform correctly in all real-world situations which the RTI might be called upon to support.  The RTI Verification process, while decidedly very thorough, is merely a first step towards validation of an RTI.  It only tests adherence to the HLA specification; it does not test load performance, fault tolerance, or correct behavior under all conditions in which federations may attempt to make the RTI perform.  Also, because the specification is silent on issues that could negatively impact federation execution, the fact that the RTI verification process only tests specification adherence underscores the point that a verified RTI is completely untested in several areas of extreme importance to real world application.  While this is perhaps fairly obvious upon reflection, it is worth noting.  Another facet of the RTI implementation history which is interesting to note is that, to date, many of the largest federations have achieved success by utilizing RTIs tailored to the needs of their particular federation.  Federations like JSAF have enjoyed measurable success by employing RTI-S, an RTI developed by stripping out unneeded functionality from the original RTI 1.3. As another example, due to problems identified in early testing, the Millennium Challenge (MC02) federation will also employ a specialized version of RTI 1.3NGv5 [7].   Eliminating the need to implement all sections of the specification should reduce the complexity of the resulting RTI implementation.  This should in turn shorten the testing period and lessen the resources needed to ensure validity of the RTI for its particular federation.  In contrast, the RTIs that the JTC has worked with have been implementations of the entirety of the specification.  These RTIs are incredibly complex software systems, which are difficult to test thoroughly and debug.  Additionally, modifications to the RTI code base in one section of the code, which the JTC does not use, have negatively altered the operation of other portions of the code, upon which the JTC relied.3.  Testing ProcessIterative Testing CycleThe process the JTC uses to test an RTI consists of four phases, as illustrated in Figure 3.1.  If the RTI passes each phase of testing without discovery of serious problems, testing proceeds to the next phase.  When problems are uncovered, the developer is notified.  In the case of RTI bugs, the developer issues a verified bug fix release, and the JTC testing begins again from phase 1.  Phase 1 begins with the reception of a verified RTI candidate, and tests for basic compatibility with the JTC’s hardware, operating systems, and federates.  This phase concludes with installation and successful initiation of a federation. Figure 3.1 Iterative Test ProcessThe next phase involves substantial testing in the MITRE JTC lab, in which the SE runs through a lengthy test plan using a full federation of ADAPTORs and the FMT.  During this testing, test-simulations stimulate the federation by attaching to the ADAPTORs in lieu of the real JTC models.  This phase helps to uncover many minor and obvious bugs.  Given the difficulty and expense involved in coordinating test events at exercise sites (Phases 3 and 4), discovering new problems and verifying their elimination in the lab remains a high priority. Once the SE is satisfied with the RTI’s performance in the MITRE lab, the SE attempts to organize a short, one-week test event on site at a training center involving a subset of JTC simulations.  To reduce costs, only the simulation processes run from technical control are involved during this stage; even so, this stage of testing can uncover subtle bugs not seen before.  The addition of much more complex simulations, as well as human operators not yet accustomed to the nuances of the RTI test plan, stresses the infrastructure in ways largely impossible to replicate in a lab environment working with test-simulations.  Unfortunately, these testing events are very difficult to organize.  The sites that contain the necessary hardware, networks, and JTC simulations have full calendars supporting exercises and other federations’ test events.  Even when time can be arranged, coordinating with expert simulation operators can be difficult.  Typically, the schedule can support about three or four of these phase 3 tests per year. The final phase of testing involves the entire JTC federation.  All federates are employed, each involving all model processes, with functional testers stimulating the simulations as they would during an exercise.  This is the culmination of the JTC’s RTI testing, the most complete testing environment short of an actual exercise.  Each event in this phase of the testing will typically run for two weeks, during which time the infrastructure will receive its most thorough testing.  The order of magnitude increase in federation complexity, combined with the length and intensity of scrutiny, brings to light the most obscure of bugs and design discrepancies.  Historically, the majority of critical issues and bugs have been uncovered during this phase of testing.  Unfortunately, there are only two opportunities for such events held each year: the JTC’s All Actor Integration (AAI) in January, and the JTC’s Confederation Test (CT) in March/April.  These are currently the only two times per year when the resources are available to strenuously test the infrastructure with the entire JTC.Scheduling constraints are only one of the reasons the most rigorous test events are difficult to conduct in the JTC. The AIS currently satisfies the community’s infrastructure needs.  Because of the maturity and robustness of the AIS, some portions of the JTC community have historically perceived little incentive to migrate to an immature HLA infrastructure.  Fortunately, many models and exercise sites are beginning to voice an interest in increased HLA experimentation.  Perhaps more resources to test RTIs with the rigor of the full JTC federation will be made available as the desire to migrate grows stronger.  Initiating TestingIn the absence of a currently JTC-viable RTI implementation, the SE has suspended its efforts to field the HLA-based JIS.  Instead, the SE has elected to experiment with a variety of other available RTIs.  The goal of this experimentation is not to field an RTI, but to learn more about how various design decisions and differences in implementation affect federation execution, especially those areas identified as critical to the success of the JTC federation.  The most immediately eligible implementation to begin this effort was the Pitch Portable RTI (pRTI), a Java-based implementation available commercially from the Swedish company Pitch AB.  Having acquired the software and license for pRTI, the SE migrated the MITRE developed portions of the JIS, the ADAPTOR and FMT, to work with the new RTI.  This involved removing the proprietary C++ cap to allow native Java communication between components, and removing the tick mechanisms from the federates to make efficient use of pRTI’s multi-threaded design.  Once the federates were migrated and the RTI successfully installed, phase 2 of the iterative test process commenced in the lab.  4. Test PlanGeneral CharacteristicsPrevious HLA testing in the JTC community has focused equally on the ADAPTOR, the FMT, and the RTI.  However, at this point the ADAPTOR and FMT are fairly mature, and have required no functional changes since RTI-NG testing ended earlier this year.  As a result, a new test plan was written for phase 2 of the testing which focuses solely on the RTI.  This test plan highlights the issues of critical importance to the JTC, based upon experience testing three previous RTIs, and assumes verification has already adequately demonstrated thorough technical specification adherence.  The basic aim of this test plan is to test technical and functional behavior that lies just beyond what is covered by verification, areas of critical import to the JTC (see Table 4.1). Test SetupThis section of the test plan essentially covers Phase 1 of the testing cycle.  It checks installation and basic startup of the RTI, as well the remainder of the federation components.ConnectivityThis section verifies that federates can establish connections to the RTI, join the federation, resign cleanly, and subsequently rejoin a federation in progress without undue disruption of federation evolution.  Previous RTI implementations tested by the JTC have exhibited serious problems under the stress of repeated resigning and rejoining of federates. [6, 8]Declaration ManagementThis section checks the ability to alter subscription and publication sets during federation evolution.  The JTC has experienced no problems with this functionality in previous RTIs, and given the thoroughness with which verification tests this aspect of the RTI, this testing is cursory.Table 4.1 Test Plan SummaryTest Plan SectionMajor IssuesTest SetupInstallationConnectivityClean Resign, RejoinDeclaration ManagementNo issuesTime ManagementSustain game ratioObject OwnershipClean deletion, RTI object ID assignment Object ReflectionMOM object handlingAttribute AcquisitionNo issuesInteractionsMOM service available during save / restoreFederation SaveSequential saves, save pending & resign / joinFederation RestorePost restore correctnessCrash RecoveryClean & timely recoveryRobustnessRapid multiple federate join, lengthy inputOperator InterfaceCorrect representation, ease of useDiagnosticsNo issuesSimple Load TestSupport 10 federates, 15000 objectsTime ManagementThis section ensures the RTI can continuously maintain JTC exercise acceptable game ratios, and federates correctly evolve time using the Time Advance Request mechanism in conjunction with Time Regulation and Time Constrained settings.Object OwnershipThis section attempts to verify that object registration, updating, refreshing, and deletion are handled cleanly and accurately by the RTI.  If possible, the method of RTI object ID assignment is inspected for any possible impact on the JTC federation.  Previously, an RTI implementation assigned object IDs in such a way that after a restore federates received reflections on objects originating from the incorrect owning federate.  [6]Object ReflectionThis section verifies correct object discovery, reception of updates, and deletion of reflected objects.  Previous issues include reception of updates after notification to delete the object, which results in “zombie” objects in the federation unless manual intervention occurs.  Another issue of critical importance to the JTC involves the correct handling of the Management Object Model (MOM) objects throughout the lifetime of the federation.  The JTC relies exclusively upon the FMT’s accurate reflection of these manager objects to provide a clear and up to date understanding of the state of the federation.  Previously tested RTIs have exhibited behavior such as permanent loss of the manager.federation object, incorrect reflections of the manager.federate objects post-restore, and manager.federate objects never deleted from subscribed federates upon federate resignation. [6, 8]Attribute AcquisitionThe JTC employs unconditional attribute divestiture and both unconditional and conditional attribute acquisition.  This section of the test plan only briefly tests this functionality, relying upon verification for thorough testing.  The related service calls that return the current owning federate for an attribute are also tested.InteractionsSending and receiving interactions is briefly tested in this section.  One interesting test involves the ability to send the MOM Save and Restore service interactions, such as the Manager Federate Service federateSaveComplete, during a save or restore.  Attempting to send an interaction during a save or restore raises an exception according to the HLA 1.3 specification. The specification makes no provision for the specific interactions clearly intended for use during save and restore.  To date, no RTI tested has provided special consideration for this subclass of MOM interactions.  Given the JTC’s requirement for minimized downtime and turnaround time, this functionality could save valuable time in some cases when problems have been experienced during saves and restores.Federation SaveSaving federation state is crucial to the success of JTC exercises.  Typically, saves occur every two hours.  Critical issues include the ability to schedule and complete sequential saves and the ability for federates to resign or join the federation between scheduling and commencement of a save.  Problems encountered in past testing have resulted in hung federations when federates not included in the save set during scheduling are present at save execution, and bizarre behavior when all constrained federates have resigned prior to save execution. [8, 9]Federation RestoreRestoration of saved federation state is obviously as crucial to the JTC as saving the state to begin with.  This portion of functionality has repeatedly proven the least robust and prone to error in all RTI implementations tested.  The JTC almost always operates in a post-restore state, whether due to an unforeseen crash during the federation’s long lifetime or due to normal exercise planning.  The importance of the operational validity of restore in the JTC can not be over-emphasized.  Typical restore problems in past testing have included incorrect federate handle assignment, incorrect RTI object ID assignment, immediate core dumping of all local RTI components, delayed core dumping of random RTI components, and many other examples of hung federations.  Problems in the restore process are often the last to be discovered, since errors in other areas are often more obvious and thus receive the most immediate attention.  Typically, rigorous testing of save and restore gets postponed while there are other unresolved problems, such as advancing time and managing the state of objects and federates.  [6, 8, 9]Crash RecoveryThis section examines the behavior of the RTI when various components of the federation crash or lose connection unexpectedly.  Every component that executes as a separate process is manually terminated and the behavior of the remainder of the federation noted.  Each RTI implementation has different core processes without which the federation can no longer function; these are identified and noted.  Federate crashes, however, must be recoverable without recourse to a restore or federation restart.  Some mechanism needs to exist to detect unresponsive federates, remove them from the federation, clean up any owned objects and attributes, ensure no state machines remain dependent upon them, and allow the crashed federate to rejoin the federation smoothly.  The mechanism to achieve this can be either automatic internal to the RTI, or manual through external manipulation. [6, 8]RobustnessThis section tests that the infrastructure can handle unexpected, incomplete, or lengthy input.  It also includes more stressful examples of previous tests, such as checking that multiple federates joining or resigning in rapid succession do not have a permanent negative impact on the state of the federation.Operator InterfaceThis section assesses the accuracy and ease of use of the interface provided by the RTI for monitoring and managing the federation, as well as the various RTI components themselves.  Quick diagnosis of and recovery from problems demands an effective user interface into the inner workings of the RTI.  Typical features sought include: ability to monitor federations and federates, including federate names and handles; ability to manual remove and clean up crashed or unresponsive federates, if necessary; and the ability to generate verbose output to aid in determination of RTI state when difficult, such as during save or restore, to determine which step is currently being executed.DiagnosticsThis section briefly ensures that the proper diagnostic capabilities of the HLA specification are implemented.  This includes alert reporting, as well as service reporting.4.16	Simple Load TestThe final section of the test plan attempts to gain some confidence that the RTI can satisfactorily support the load conditions of a typical JTC exercise.  This includes testing number of federates, number of object registered and updated, and finally a realistic federation containing both large numbers of federates and objects.  This load test is by no means considered a definitive, scientific inquiry into the load performance of the RTI; rather, the goal is to verify that the RTI can adequately support the relatively low numbers with which the JTC typically stresses the infrastructure.5. Preliminary Test ResultsTesting to DateThe preliminary results after subjecting the pRTI to the first and second phases of the test cycle are encouraging.  Overall, this implementation of the RTI exhibited improved stability and robustness in areas important to the JTC over previously examined RTIs.The apparent centralization of some inner mechanics seems to have yielded huge gains in the ability of this RTI to not only detect unresponsive federates, but also to thereafter cleanly remove them from federation state.  This also applies to the JTC issues of resign and rejoin.  It is believed the previously examined RTI 1.3v7 and RTI 1.3NGv3.2 relied upon relatively decentralized control in largely autonomous LRCs, which potentially led to the morass of incomplete connections which plagued join, resign, crash recovery, and restore operations.  Unfortunately, pRTI exhibited problems during the save and restore portions of the testing.  Sequential timed saves hung the federation; constrained federates received the second Initiate Federate Save callback, but non-constrained federates, such as the JTC’s FMT, did not.  Furthermore, resigning a constrained federate with a save scheduled hung the federation, as if the RTI is awaiting a response from the resigned federate.  During restores, the LRCs throw several exceptions, and there appeared to be deficiencies in the reflection of federate objects after the restore.  5.2	Upcoming TestingThe testing reported here is merely the first iteration of what will hopefully be a continuing study of various RTI implementations.  There is still much left to test with pRTI, including working closely with the developers to diagnose and resolve the problems uncovered to date.  In addition, the infrastructure’s design needs strenuous testing utilizing real JTC simulations.  It would be unfair to directly compare the results of the JTC’s testing with RTI 1.3v7 and RTI 1.3NGv3.2, both of which have undergone extensive, on-site, fully functional federation test events, to these preliminary, lab-based tests with the Pitch pRTI.  Experience with those previous two RTIs has shown that some problems do not become apparent until the infrastructure bears the full force of a multi-week, full federation test event. In addition to further Pitch pRTI testing, the JTC is preparing to begin beta testing with the Mitsubishi RTI.  This is another commercial version which has only recently undergone and passed the verification process.  Also, the release of RTI1.3NGv5 is imminent; hopefully, the deadlock issue caused by third-party CORBA libraries has been resolved, with some attention to increased robustness of save and restore also having occurred.  Finally, it is fully intended that the test plan outlined here will undergo some revision, as new issues become known.6. ConclusionThe same critical issues continue to plague the RTI implementations the JTC tests.  Is this because the functionality is simply too difficult, too complex to implement?  Obviously not: the AIS has employed save and restore successfully for years.  Rather, it would seem that no one is sufficiently stressing the infrastructure’s ability to validly perform this functionality in real world application during the critical design and verification processes.  The reasons for this appear to be two-fold.  First, the developers responsible do not know the exact needs of their users during the design stage.  Even more to the point, it is impossible for the designers of general-use RTIs to know the exact demands of every possible federation expecting to utilize their RTI.  Compromises will have to be made in the name of generalization, or else the RTI will be tuned for one type of federation at the expense of another type.  Optimization for all federations is a very difficult endeavor.  Placing the tools to do so in the form of configuration files only increases the enormous task of debugging and validating every possible adjustment, as well as educating the community in their use.  Second, the developers do not have the environments necessary to fully test their products prior to fielding.  Developers need to realize the cooperative nature of federation development, which includes RTI integration and maturation, and become more involved from the outset.  Instead of merely responding to bug reports issued from federation testing events, perhaps they could seek to become an active member during the testing.  Perhaps greater resources for more rigorous testing would become available if the RTI community made known their need for such events.Both of these suppositions may lend weight to an argument for pursuing a partial specification implementation.  No one doubts the technical ability to build a fully tested, validated RTI which implements every portion of the HLA specification.  However, what do the additional resources of time and effort required to mature such complex software gain the community, if federation requirements are more easily and timely met by focusing solely on the needs for a specific user-group?  7. References[1] 	M. C. Fischer, A. Adams, G. Miller: “Aggregate Level Simulation Protocol (ALSP) - Training for the Future”, Military Operations Research Symposium 62, June 1994.[2]	A. Wilson and R. Weatherly: ”The Aggregate Level Simulation Protocol: An Evolving System”, Winter Simulation Conference, December 1994.[3]	R. Weatherly, D. Seidel, and J. Weissman, “Aggregate Level Simulation Protocol”, Summer Computer Simulation Conference, 1991.[4]	S. P. Griffin, E. H. Page, Z. Furness, M. C. Fischer, “Providing Uninterrupted Training to the Joint Training Confederation (JTC) During Transition to the High Level Architecture (HLA)”, "Proceedings of the 1997 Simulation Technology and Training (SimTecT) Conference”, March 1997.[5]	Z. Furness, M. A. Robinson, C. Chiang, J. Logsdon, M. Primas, Lessons Learned in Applying the HLA to the Joint Training Confederation, "Proceedings of the Fall 1999 Simulation Interoperability Workshop", September 1999.[6]	U. S. Army Simulation, Training and Instrumentation Command and The MITRE Corporation, “Aggregate Level Simulation Protocol (ALSP) 2001 Confederation Test Report”, May 2001. http://ms.ie.org/alspguest/documents/testing/ct/ct01/CT01_Report.doc[7]	“MC02 Federation Agreement Document, Version 5-011109”, December 2001.[8]	U. S. Army Simulation, Training and Instrumentation Command and The MITRE Corporation, “Aggregate Level Simulation Protocol (ALSP) 2000 Confederation Test Report”, May 2000. http://ms.ie.org/alspguest/documents/testing/ct/ct00/CT00_Report.doc[9]	U. S. Army Simulation, Training and Instrumentation Command and The MITRE Corporation, “Aggregate Level Simulation Protocol (ALSP) 1999 Confederation Test Report”, May 1999. http://ms.ie.org/alspguest/documents/testing/ct/ct99/CT99_Report_Final.docAuthor BiographyBRYAN YOUMANS is a software systems engineer at the MITRE Corporation.  He has supported the ALSP Systems Engineering Team since joining MITRE in 1997.  He holds a B.S. in Computer Science from Virginia Polytechnic Institute and State University.