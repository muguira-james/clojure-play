Real-Time Test Execution Data Transportation and Logging Using TENA (Test and Training Enabling Architecture) WrappersDavid R. BrowningU.S. Army Redstone Technical Test CenterHuntsville, AlabamaCSTE-DTC-RT-F-FL, Bldg. 7884Redstone Arsenal, AL 35898-8052 HYPERLINK "mailto:dbrowning@rttc.army.mil" dbrowning@rttc.army.milRyan NormanU.S. Army Redstone Technical Test CenterHuntsville, AlabamaCSTE-DTC-RT-F-FL, Bldg. 7884Redstone Arsenal, AL 35898-8052 HYPERLINK "mailto:dbrowning@rttc.army.mil" rnorman@rttc.army.milJason BolinU.S. Army Redstone Technical Test CenterHuntsville, AlabamaCSTE-DTC-RT-F-FL, Bldg. 7884Redstone Arsenal, AL 35898-8052 HYPERLINK "mailto:dbrowning@rttc.army.mil" jbolin@rttc.army.milChris EdwardsERC IncorporatedHuntsville, Alabama555 Sparkman Dr., Suite 1622Huntsville, AL 35816 HYPERLINK "mailto:darryl@amtec-corp.com" cedwards@rttc.army.milSteve JenkinsERC IncorporatedHuntsville, Alabama555 Sparkman Dr., Suite 1622Huntsville, AL 35816 HYPERLINK "mailto:darryl@amtec-corp.com" sjenkins@rttc.army.milAbstractIn the past, data was locally collected at the test range on a piece of instrumentation.  It was then manually moved from the instrumentation to a temporary storage location.  From here, the data was reduced by the engineers and manually moved again to a file storage database.  This process of constantly moving files was labor intensive causing much more work for the test engineers and took valuable time away from both analyzing and distributing test results.  A new method for streamlining this process became essential.  Thus, the Range Operations Components for Integrated Testing, or ROCIT, initiative was formed.  ROCIT, an effort funded through Virtual Proving Ground (VPG), is being developed to automate the test planning, execution, and post-test processes within the Firing Test Division at Redstone Technical Test Center.  The Test and Training Enabling Architecture, or TENA, is the platform for transporting test execution data real-time.  The ROCIT initiative also uses the Integration Level Hierarchy, or ILH, to log the data collected from TENA into a standardized Developmental Test Command database.ROCIT development was initiated in an effort to modernize range business processes through the enhancement of infrastructure, test planning, and test execution.  These enhancements provide personnel with up to the minute test status information during all phases of the test event process.  Test engineers no longer have to wait extended periods of time before test data is available.  Instrumentation groups are able to easily track equipment calibration dates, assign hardware to a test, and spot equipment shortfalls.  Due to various ROCIT improvements in the test execution processes, all test engineers are able to quickly access up to the minute status of ongoing tests, including how many rounds have been fired that day and the results of those firings.The Test and Training Enabling Architecture (TENA), part of the FI 2010 CTEIP Program, is an object-oriented data transport architecture.  TENA relies on Stateful Distributed Objects, or SDOs, within a Logical Range Object Model, or LROM, to publish test data in an object-oriented format and deliver that test data to any number of interested subscribers real-time.  TENA also allows for Remote Method Evocation, which permits a subscriber to remotely command its publisher to perform certain methods.  TENA allows for a publisher application to also be a subscriber application and for an application to be attached to multiple publishers or subscribers within the Logical Range in use.The Test and Training Enabling Architecture is written in the C++ Programming Language, making it difficult for range developers that do not know C++ to use TENA.  Therefore, ActiveX Control libraries are utilized by range developers to limit the number of TENA “experts” required.  These control libraries “wrap” TENA within another interface that can be called directly from any Visual Studio .NET written application.  The TENA “wrapper” provides all of the interaction to the TENA Middleware, allowing the range developer to only have to make API calls and handle API events on the “wrapper” for Initialization, Accessing (Get/Set), and, in some cases, Remote Method calls.For a proof of concept of the implementation of ROCIT test execution, we utilized the Range-in-a-Box (RIAB) instrument during an actual test program. The RIAB is a control device built by RTTC which consists of several A/D, DIO, and Relay Flag data points that need to be logged for a given test event.  RIAB uses a Test and Training Enabling Architecture (TENA) “wrapper” to publish these data points across the test network.  TENA then allows any amount of subscriber applications to capture the same published data from RIAB.  The first such application, a data logger, takes the data received from RIAB and writes it along with the corresponding ILH header information to an XML-based file.  The second, a 3D Viewer application, can be used to display the current test event in real-time on the virtual range.  Once the test event is complete, the Data Logger immediately moves the created XML log file to the ILH Database through an automated Windows Service.This proof of concept was very successful and current efforts and demonstrations are under way that further implements this information flow automation. Currently the test execution segment of ROCIT is in demonstration and early deployment. Final delivery of the end-to-end test execution data flow solution within the ROCIT program will occur by the end of FY04.Moving Towards Automated Data ManagementIn the past, data was locally collected at the test range on a piece of instrumentation.  It was then manually moved from the instrumentation to a temporary storage location.  From here, the data was reduced by the engineers and manually moved again to a file storage database.  This process of constantly moving files was labor intensive causing much more work for the test engineers and took valuable time away from both analyzing and distributing test results.  A new method for streamlining this process became essential.  Thus, the Range Operations Components for Integrated Testing, or ROCIT, initiative was formed.  ROCIT, an effort funded through Virtual Proving Ground (VPG), is being developed to automate the test planning, execution, and post-test processes within the Firing Test Division at Redstone Technical Test Center.  The Test and Training Enabling Architecture, or TENA, is the platform for transporting test execution data real-time.  The ROCIT initiative also uses the Integration Level Hierarchy, or ILH, to log the data collected from TENA into a standardized Developmental Test Command database. ROCIT at a GlanceROCIT development was initiated in an effort to modernize range business processes. This has enabled Redstone Technical Test Center’s (RTTC’s) Firing Test Division to test better, faster, cheaper and achieve capabilities to support testing for advanced weapons systems well into the 21st century. This was accomplished by implementing the technologies necessary to improve test planning, test execution, post test analysis/reporting and distributed test capabilities. Efforts were funded through Virtual Proving Ground (VPG), with goals of automating the test planning, execution, and post-test processes within the Firing Test Division at RTTC. With this in mind, tools were developed by leveraging as much technology as possible. At the end of FY ’04, ROCIT will be established at RTTC’s open air ranges and will be poised to support testing of Army transformation systems at Redstone and additional remote ranges.The various process components of ROCIT are tied together by a common database structure known as the Integration Level Hierarchy (ILH).  ILH allows a user to query distributed data centers across the Developmental Test Command (DTC) and retrieve information vital to their commodity area of interest. Data standards have been designed, developed, approved and promoted by all test centers, funded through VPG, to establish a standard database architecture. The ILH database schema is the minimum required data architecture each test center’s data system must use in order to communicate with other test centers. Metadata within the ILH provides a “card catalog” on what is being tested, who conducted the test, project information on tests being conducted, types of tests conducted, test event information and unique identification of test articles. All of this metadata is used to identify, store and retrieve digital objects known as resources. The referenced digital objects are items such as documents, test data, images, models, simulations and software.ILH metadata is initially attached to a test event in the test planning phase.  The ROCIT Test Planning Tools provide personnel with up to the minute test status information during all phases of the test event process.  Test engineers no longer have to wait extended periods of time before test data is available.  Instrumentation groups are able to easily track equipment calibration dates, assign hardware to a test, and spot equipment shortfalls. Improvements in the test execution processes allow all test engineers to quickly access up to the minute status of ongoing tests, including how many rounds have been fired that day and the results of those firings.  The test planning tools are composed of four distinct applications: Hardware Repository, Test Requirement, Hardware Assignment, and Test Schedule. The Hardware Repository is comprised of equipment inventory information, including serial numbers, calibration information, description, quantity, and is associated to different support groups. The Test Requirement application allows test engineers to enter test specific data and associate the test to the proper project and system under test through a back end database ILH. The test engineer is then able to enter data requirements that will allow the hardware support groups to assign equipment necessary to support the test. The Hardware Assignment application allows each support group lead to view the hardware inventory and associate equipment based on the data requirements entered by the test engineers. The Scheduling application combines information from the other 3 applications to produce a daily, weekly, monthly, and long range schedule.  The first release of the ROCIT Tools has been deployed and future releases will be deployed in the near future. The test planning phase goes hand in hand with test execution tools that can now be developed to facilitate the real-time data collection and data reduction process. The test execution tools can collect raw data and know programmatically, based on the test planning tools, what event to associate the data to. After the data has been collected, it can be inserted into ILH where the data reduction process can either be automated or the stored data can easily be located and manipulated through various search capabilities.  ROCIT Test Execution Tools are currently under development for a FY04 release.  TENA is the architecture chosen by RTTC to use in its tools and meet the scheduled release date.TENA at a GlanceThe Test and Training Enabling Architecture (TENA), part of the FI 2010 CTEIP Program, is an object-oriented data transport architecture.  TENA is technically driven by interoperability, reusability, and composability requirements.  Interoperability requirements necessitate TENA applications to work together to achieve the goals defined by a user or users.  Reusability requirements involve TENA components, applications, or systems that can be used in configurations beyond those for which they were originally designed.  Composability requires an ability to rapidly assemble, initialize, test, and execute a system from members of a pool of reusable, interoperable elements.  TENA sanctions real-time, distributed testing and simulation through the use of a Logical Range Execution, or LRE.  The LRE concept allows TENA to meet the interoperability, reusability, and composability goals as defined by the user community.  To meet the driving technical requirements listed above, TENA is object-oriented and, therefore, needs an object-oriented LRE to facilitate this data transportation process.  The object model used to describe the LRE is known as the Logical Range Object Model, or LROM.  A LROM integrates testing and training for a range exercise that may reside at a single test site or be distributed throughout a network of test and training centers.  This Object Model describes the boundaries of a LRE by encoding all information that is transferred between systems during a given range event.  All objects of interest found in the LRE must be modeled in the LROM.  Simply put, the LROM is the common understanding of the test execution environment and TENA is the language test applications use to communicate.  Communication between entities in the test execution environment using TENA is accomplished with servant objects and proxy references to these servant objects.  In terms of the publisher-subscriber paradigm, Servant SDOs are publishers and proxy SDOs are subscribers.  Together, servant objects and their corresponding proxy references form Stateful Distributed Objects (SDOs), the building blocks contained within every LROM.  In order to keep in line with object-oriented programming, SDOs contain both data attributes and methods.  TENA relies on SDOs within a LROM to publish test data in an object-oriented format and deliver that test data to any number of interested subscribers real-time.  With a SDO, the data attributes are updated across the network via an SDO’s publication state.  A publishing, also known as a servant, object represents the source of data and reports any changes made to the publication state to all applications that are connected to the servant object via a subscription, which is otherwise known as a proxy reference.  These updates occur atomically, meaning an object’s attributes are updated as one single entity to preserve the state of the published object.  Furthermore, a proxy is only notified about servants it has told TENA it is currently interested in; that is, a proxy only receives objects of types that it has “subscribed” to.  A SDO, however, facilitates more than just publishing and subscribing.  TENA also allows for Remote Method Invocation, which permits a subscriber to remotely command its publisher to perform certain methods.  Methods defined within an SDO’s object model design are set up by TENA for remote invocation.  To remotely invoke a method, TENA relies on SDO subscriber proxy references that use its middleware to connect with the publishing servant.  Applications can be defined to handle TENA servants and TENA proxy references simultaneously.  That is, TENA allows for a publisher application to also be a subscriber application and for an application to be attached to multiple publishers or subscribers within the Logical Range Execution in use.  In short, TENA is a complete real-time data transportation solution for test execution data.Why “Wrap” TENA?There are several reasons why it makes sense for RTTC to “wrap” The Test and Training Enabling Architecture into an ActiveX Control.  First, TENA code must be written in the C++ Programming Language.   This makes it extremely difficult for range developers that do not know C++ to use TENA.  Secondly, many applications developed historically at RTTC were written on Windows-based platforms using Visual Basic.  Rewriting software that is already proven to work would take far too long and would go against the technical requirement of reusability within TENA.  These Visual Basic applications had to be reused, with only minor changes to support TENA.  Third, learning how to program using TENA requires training and carries a learning curve with it.  RTTC needed a way to shorten this learning curve in order to migrate to TENA as quickly as possible.  These reasons led RTTC to adopting reusable ActiveX Controls within our range applications. 	ActiveX Control (OCX) libraries are being utilized by range developers in both new and existing applications to limit the number of TENA and C++ experts required.  A developer simply creates a library of OCX interfaces that “wraps” all of the functionality found in the TENA LROM.  The OCX library, also known as a TENA wrapper, includes an interface that any Visual Studio 6.0 or Visual Studio .NET application can use to interact with TENA.  In addition, the TENA wrapper can be incorporated within most ActiveX compatible environments including Internet Explorer, Microsoft Office, and LabVIEW.  These interfaces defined in the TENA wrapper must account for all communication mechanisms, including attribute updates and any remote method invocation, between TENA and the range application.  Figure 1 provides a conceptual idea of how a servant and proxy application would interact with a TENA OCX.  The TENA OCX provides meaningful attributes and methods accessible in Visual Basic that utilize TENA LREs for distributed object communications between range applications.Figure 1: OCX Wrapper Interaction with TENA Servant and Proxy ApplicationsThe TENA OCXAs previously stated, the resulting TENA wrapper provides all of the interaction to the TENA Middleware.  In order to create an effective TENA wrapper, each TENA LROM requires a custom OCX interface with specific control of all of an SDO’s attributes and methods found existing within the object model.  This allows the range developer to only have to make Application Programming Interface (API) calls and handle API events on the created wrapper for accessing data updates via servant Set() and proxy Get() Methods, and, in some cases, performing Remote Method calls.  These calls are handled through a number of OCX interfaces, which are explained at the end of this section.  Figure 2 displays a list of common API calls found within servant and proxy SDOs.  Range proxy applications are notified about servants of interest and servants leaving the LRE through the use of a discovery and destruction events, respectively, that are contained within the TENA wrapper.  A range proxy application is notified of data updates through the use of a state change event.  Similarly, servant applications are notified of remote method invocation requests through the use of events contained within the TENA wrapper.  Figure 2: Generic API for servant and proxy OCX interfacesSeveral issues must be addressed when creating a TENA wrapper.  First, OCX interfaces are applicable over such a broad spectrum of environments so it is inherent that, unlike a standard dynamic-link library (DLL), a standard set of attributes are used within their implementations.  Thus, implementing a TENA LROM into a TENA wrapper requires “flattening” the external OCX interface into standard data types for all SDO attributes and remote methods exposed. For example, a SDO in a TENA LROM may include a data structure called current_position, which contains three attributes, easting, northing, and elevation, of data type double.  TENA can pass current_position without altering its appearance.  Although these attributes combine to form a single value, the OCX interface must be defined to take in the three doubles as separate variables.  These values are then put together as current_position within the OCX interface in the TENA wrapper and passed on to TENA.  The second issue that must be addressed involves the number of OCX controls that are needed within a TENA wrapper.  Two OCX controls, one for the servant and one for the proxy, are created within the TENA wrapper for every SDO defined in the LROM.  In addition, TENA LRE Initialization is handled through the TENA wrapper for the range application through the use of another control within the TENA wrapper.  This means that for n SDOs in an LROM, a TENA wrapper will contain (2n + 1) OCX interfaces.  The final issue deals with the number of OCX interfaces needed within a range application.  Depending on its type, an OCX interface can only represent a single servant or proxy, respectively.  More interfaces must be defined if additional SDOs are needed for a given test execution.  For example, if an application needs two servants of the same type, two instances of that OCX servant interface must be instantiated.  Once these issues were addressed and resolved, TENA wrappers were ready to be used under the ROCIT Initiative at RTTC in a live fire test demonstration.RIAB TENA OCX Wrapper ImplementationFor a proof of concept of the implementation of ROCIT test execution using TENA wrappers, we utilized the Range-in-a-Box (RIAB) instrument during an actual test program. RIAB is a custom-made instrumentation control device built by RTTC used on the test range to collect test data from a GPS receiver along with several A/D, DIO, and Relay Flag data cards.  In this test case, RIAB was placed on a vehicle being used for Active Protection System (APS) Testing.  Please see Figure 3 for a diagram illustrating the setup for this test.  Additionally, the TENA Object Model for this test execution can be found in Appendix A.  Initially, a countdown is required to begin execution of any test.  The Range Fire Control Computer initiates the test countdown by providing a change in voltage over a line that runs directly into the Countdown Computer.  For this test, a simple voltage changer was used to emulate the Range Fire Control Computer.  The Countdown Computer then acts as a proxy to the RIAB Master Controller so that it may update the countdown for the current test execution via remote method invocation using the TENA wrapper.  The Countdown Computer may also stop or abort the test using remote method invocation.  The RIAB Master Controller then notifies all of its subscribers of the new countdown value.  See Figure 4 for a screen capture of the Countdown Computer and Figure 5 for a screen capture of the RIAB Master Controller.  Once the test begins, GPS and test data is collected on RIAB and then sent to the RIAB Master Control computer via free wave modems.  From there, the RIAB Master Control uses a TENA wrapper that contains OCX interfaces for GPS, APS Control, and five separate Munitions objects to publish all test execution data across the test execution network.   SHAPE  \* MERGEFORMAT Figure 3: RIAB Test Case Setup Diagram SHAPE  \* MERGEFORMAT Figure 4: RIAB Test Case Countdown Computer SHAPE  \* MERGEFORMAT       Figure 5: RIAB Test Case RIAB Master ControllerOnce the servant sends its data, TENA allows any amount and variety of subscriber applications to capture the same published data from RIAB.  The first such application type, a data logger, uses the same TENA wrapper as the RIAB Control to take all data received from RIAB and write it, along with the corresponding ILH header information needed for ROCIT, to an XML-based file.  SDO-specific data loggers log GPS, APS Control, and Munitions test data for this test setup.  See Figure 6 for a screen capture of the Data Loggers used for this proof of concept.  The second, a 3D Viewer application, is used to display the current test event in real-time on the virtual range.  The 3D Viewer subscribes to the GPS and APS Control SDOs in order to display the position of the vehicle RIAB is placed in within the virtual range.  For added redundancy, the 3D Viewer also provides main and battery power data from the RIAB in the event of a system failure.  See Figure 7 for a screen capture of a 3D Viewer used for this proof of concept.  Data is logged and displayed in the 3D Viewer until test execution is complete.  Immediately upon completion of the test event, the Data Logger automatically moves the created XML log file to the ILH Database through an automated Windows Service.   SHAPE  \* MERGEFORMAT Figure 6: RIAB Test Case Data Loggers SHAPE  \* MERGEFORMAT Figure 7: RIAB Test Case 3D ViewerSummaryThis proof of concept was very successful and current efforts and demonstrations are under way that further implements this information flow automation. Currently the first phase of the ROCIT planning tools has been completed and delivered to the range for initial testing and adoption. The test execution segment of ROCIT, which integrates with the developed planning tools, is in demonstration and early deployment.  Final delivery of the end-to-end test execution data flow solution within the ROCIT program will occur by the end of FY04.The OCX technology will continue to be used in the deployment of the RTTC ROCIT program. This wrapper technology will be used where legacy code exists and where the developers are not skilled in C++ or in TENA.  However, numerous applications being developed for the ROCIT program will be written in C++ utilizing the TENA middleware without the OCX wrapper technology.  In addition to the OCX capability, an effort is underway for conversion of the OCX technology to DLL capabilities. This technology will be used where applications are not written using Microsoft Visual Studio, such as Borland compilers utilized by Weibel on their tracking radar systems.ROCIT is moving quickly to provide a range capability this year. As the execution phase continues and additional hardware interface applications are prototyped and deployed utilizing the TENA architecture, the utilization of the OCX wrapper technology will be applied to the appropriate range applications to quickly advance the adoption of TENA as the RTTC ROCIT architecture. Appendix A, Range-in-a-Box (RIAB) Test Case TENA Object Model PAGE 8RIABData LoggerMaster ControllerCountdown ComputerILH DatabaseILH3D WorldRange Fire Control ComputerKey:TENA Data ConnectionOther Network Connection