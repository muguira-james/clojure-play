Realizing a Platform for Collaborative Virtual Environmentsbased on the High Level ArchitectureMarco BrasséTNO Physics and Electronics LaboratoryP.O. Box 968642509 JG, The HagueThe Netherlandsbrasse@fel.tno.nlNico KuijpersEindhoven University of TechnologyP.O. Box 5135600 MB, EindhovenThe Netherlandskuijpers@win.tue.nl Keywords:Distributed Virtual Environments, Collaborative Virtual Environments, High Level Architecture, Data Distribution ManagementABSTRACT: Collaborative Virtual Environments are of increasing interest to different user communities to support collaborative tasks of geographically dispersed teams. These tasks not only involve communication through speech and document exchange, but may also require some three-dimensional view on or interaction with the topic of interest. In this way discussion on design, architecture or integration can be supported.A platform for generic Collaborative Virtual Environment (CVE) applications has been proposed and is actually realized within the COVEN project. COVEN is part of the European Advanced Communication Technology and Services (ACTS) programme. The project mainly focuses on scalable networked architectures to support co-operative work between many users over large distances within a shared virtual environment.As part of the COVEN project, the requirements for a CVE reference architecture have been identified and are compared to the interoperability concepts offered by the High Level Architecture (HLA). It is investigated how HLA may support the realization of such a CVE platform. Simultaneously, concepts and ideas originating from COVEN are compared to the HLA approach.1.	IntroductionMulti-participant distributed virtual reality systems are emerging to support groups of people in collaborative work situations. The essence of Collaborative Virtual Environments (CVEs) is the use of natural metaphors, together with the integration of participants and data within the same and common spatial frame of reference. Combined with high representational capacities, this creates the potential to support a broad range of co-operative applications in the varied fields of design, visualization, simulation, training and education, as well as entertainment.COVEN (Collaborative Virtual Environments) is a European project within the ACTS (Advanced Communication Technologies and Services) programme. COVEN seeks to develop a comprehensive approach to the issues in the development of Collaborative Virtual Environment technology [1]. COVEN brings together twelve academic and industrial partners with a wide range of expertise in CSCW (Computer Supported Co-operative Work), networked VR, computer graphics, human factors, HCI and telecommunications infrastructures. In particular COVEN explores the requirements and supporting techniques for collaborative interaction in scalable CVEs. Taking advantage of a dedicated Europe-wide ISDN and ATM network infrastructure, much of the work consists of netwerk trials to investigate networkrequirements as well as usability and human factors aspects.As a main result of the COVEN project, a platform for generic Collaborative Virtual Environments (CVE) has been proposed. This paper describes the interoperability requirements for a CVE reference architecture. These requirements are matched with the capabilities of the High Level Architecture. In particular, it has been investigated how HLA can be applied and extended as a communication framework for CVE platforms. Furthermore, experiences within the COVEN project are compared to the HLA approach.2.	Interoperability Requirements for Collaborative Virtual EnvironmentsIn order to support co-operative work between many users over large distances within a Collaborative Virtual Environment, an architecture for scalable distributed virtual environments was realized within the COVEN project. Before we are able to compare the concepts and ideas from HLA to the COVEN approach, the requirements of distributed virtual environments need to be investigated. An extensive list of requirements with respect to interoperability is given below. General design requirements are identified based on experiences with the current distributed VE platforms DIVE [2,3], dVS [4], MASSIVE [5] and NPSNET [6]. The requirements listed below are based on research carried out by Nottingham University on this topic [7] as well as the experiences gained within the COVEN project when developing the demonstrator applications [8] .Collaborative Virtual Environments (CVEs) are networked virtual reality systems that support group work. Their central concept is a shared virtual world, i.e., a computer generated space where participants can meet and interact. Users are embodied in the world by an avatar, providing them with a 3D representation that follows the movement of their viewpoint. Using external devices that range from traditional mice to cyber-gloves, users can control motion and interact with the objects in the virtual environment. The content of the virtual work environment may represent data, other users or be an interface to application specific computer programs.At the architectural level, one of the goals of COVEN is to build a framework for handling the large data flows that are generated by CVEs. Multi-user virtual environments are in general large and complex worlds with many detailed and interactive objects. Many participants can interact simultaneously with each other and with the environment. To fulfil these requirements, specific techniques have been developed within the COVEN project.COVEN has addressed many different aspects of large-scale CVEs by developing its own platform based on Dive  from the Swedish Institute of Computer Science [2,3]. A reference architecture for a CVE platform was derived from the requirements and experiences from the platform prototype as well as the demonstrator applications build on top of it.General architectural design requirements for distributed virtual environment systems can roughly be classified in three broad categories: requirements associated with the general characteristics of virtual environments; requirements due to distributed systems aspects, and requirements related to scalability and heterogeneity issues. In the next two sections the requirements are presented from two perspectives, the first category requirements  addresses the development of applications based on the CVE platform, the second category requirements addresses system-level requirements for the CVE platform itself.3.	Application RequirementsIn order to develop Collaborative Virtual Environment applications, application developers expect certain features of the CVE platform. Below, the requirements to the CVE platform from an application developer’s point of view are described. Not all requirements that emerged within the COVEN project are presented here. Especially requirements related to co-operation support of large groups of people and the integration with the World Wide Web are left out. World DescriptionA Collaborative VE application is aimed at some sort of collaborative task and is defined by the description of the virtual world. This virtual world consists of complex objects represented by a 3D geometry, that may have some form of autonomous behavior. Behavior can be defined by callback functions that are invoked upon certain events, described by some kind of scripting language and/or programming language. Complex objects are composed  of other objects, by which a hierarchy of objects can be defined. Examples of complex objects are autonomous actors and crowds. In the case of complex virtual worlds, it should be possible to divide the world in regions to enable the CVE system to process merely the activities in one or several parts of the virtual world at one time.World DistributionThe description of the virtual world needs to be distributed to the participants initially. Thus, the CVE should provide a mechanism to distribute the description of the virtual world or particular regions. Furthermore, state changes of objects should be sent to all participants that show interest in them. The CVE should enable a mechanism to communicate series of basic state changes through a single message. The CVE should also be able to save and restore, and re-distribute, the complete state of the virtual world for replay and evaluation.Navigation and InteractionA user should be able to navigate through and interact with the virtual environment by means of a 2D non-immersive or 3D immersive user-interface. A CVE platform should offer support  for common devices such as a keyboard and a mouse as well as (immersive) VE equipment such as a space-mouse, shutter glasses, head-mounted displays and tracking devices. In some cases, even interaction through speech is envisaged.Object ManipulationParticipants in the CVE must be able to interact with the virtual world through manipulation of objects. A participant must be able to select an object before the the participant can change the object’s position and orientation. Furthermore, objects have embedded functionality that is executed by having a particpant invoke an object’s operation. Besides the manipulation of existing objects, it should be possible to extend the virtual world with new objects by creating new ones or by copying existing objects. Objects may also be removed from the virtual world. Extending or changing the virtual world itself is usually applied for (collaborative) modeling and design tasks. These tasks include the creation of new collaborative VE applications.Mutual AwarenessIn Collaborative Virtual Environments, users should be able to recognize each other and observe each other’s actions. This is usually realized by providing the user with some form of embodiment. This may either be a virtual human embodiment or a more abstract shape, as long as the identity, position, viewing direction and actions can be observed by other users. A limited amount of expressions could be supported to perceive desired emotions, body language, or scope of attention.CommunicationIn order to exchange information between users, different forms of communication need to be supported. The most important form of communication is speech. In some cases, voice communication can be supported by gestures for greeting, nodding, etc. Besides talking, users need to exchange documents and multimedia content, including spatialized sound and video, which may be processed in the local working environment. It should also be possible to address communication to individual users, groups of users or users present in a certain region. Participant RightsEach object in the virtual world can be associated with an owner and a group of users. Rights indicate which of the operations mentioned in Object Manipulation can be performed by the owner, a particular group of users and other participants. Rights can be defined per object, per hierarchy of objects or per region. In this way, certain operations, such as the creation of new objects, may be restricted by rights that are granted to certain users.Subjective ViewsThe representation of objects in the virtual world may be tailored to particular users. Depending on the role of the user, an object may be high-lighted or it may have a more detailed geometry. The application developer should be provided with a means to assign different appearances (for instance different geometries) to an object and to use different modifiers (for instance visible, transparant, or wireframe) [9].4.	Platform RequirementsIn this section, the system-level requirements of the CVE platform are described. All requirements are based on the notion that the system should perform optimal by using well-known techniques that are applied for distributed VE systems. The CVE application developer should be able to optimally use the computer systems as available.ScalabilityDesigning a scalable platform is perhaps the greatest challenge for CVE platform developers. There are several aspects to this problem such as the number ofparticipants; the complexity of the virtual world (both geometric and behavioral); the geographical distribution of participants; and the integration of media such as audio and video that require large amounts of bandwidth. Within the COVEN project a large amount of research was dedicated to cope with the problem of scalability. Techniques were developed to save computing power and network bandwidth in case of large, complex and geographically dispersed Collaborative Virtual Environments. Extensions to the COVEN platform with respect to scalability include variable complexity model extensions, semantic world structuring extensions, variable quality rendering extensions and a new distribution layer. For further information on scalability techniques we refer to [2].VisualizationA major concern when designing virtual environments is to ensure that users can navigate smoothly and continuously through the worlds, with the scene rendered as soon as a user or some object moves. It should be possible to run a large CVE application on any machine, not only on a high-end graphic workstation. Users are willing to see less detail and less fancy rendering, but a stable frame rate is required. NetworkComputer networks (both LAN and WAN) are used to distribute the virtual world description, to keep the local representation of the virtual world up-to-date and to provide communication between the users. In some cases, it should be possible to install a dedicated network based on ISDN or ATM, while in other cases the Internet could be used as data carrier. The CVE platform should be able to use different types of network communication protocols. For example, reliable communication may be used to communicate essential state updates, while unreliable communication is generally used for audio and video streaming. Three types of information distribution are distinguished: point-to-point (between two sites), multicast (between multiple sites) and broadcast (to all sites). For instance, reliable multicast protcols are typically used for state updates between participants within the same virtual world region but who are located on different sites. In order to further minimise the use of network bandwidth, compression techniques could be applied. StandardizationDistributed virtual reality systems should be open systems, such that data can be exchanged with other virtual reality, visualization or simulation applications. For example, it should be possible to import world or object descriptions created with third-party tools. For world descriptions we distinguish between internal and external file formats. Internal file formats can be directly interpreted by the CVE platform, while files in the external format first need to be converted. Most distributed VE platforms have their own internal formats, of which some are well-known formats, such as the VRML standard.Standards for network traffic that should be applied are IP and IP multicast (Internet Protocol family). On top of multicast, the RTP (Real-time Transfer Protocol) or enhanced protocols could be used to enable multiple usage of one multicast group for different applications, without mixing up the network packets. RTP is often used for audio and video teleconferencing [10, 11].SecuritySecurity services comprise an authorisation service for verifying that requested actions are permissable under specified access constraints, and an authentication service which validates the identity of both human and non-human objects in the system. For some applications, for instance military mission preparation, it is necessary to encrypt network traffic such that other parties are not able to intercept the messages and replay the CVE session. 5.	CVE Requirements and the HLAHLA offers an architecture for interoperability and exchange of data based on separation between communication related aspects and application domain aspects.  HLA provides several basic constructs that can be mapped onto the requirements in the previous section. Essentially, a virtual world may be represented by an HLA federation in which a federate  represents a particular participant or user. However, HLA does not support complex hierarchies of object relationships other than inheritance, this should be implemented by the CVE platform. On the other hand, regions in the CVE can be mapped nicely onto HLA Regions, provided a structured partitioning of the virtual world into regions. Object ownership and data distribution is treated differently in COVEN compared to HLA, although the HLA data distribution management and ownership management services can be used effectively to realize a CVE platform. In Section 7 the mapping of CVE requirements onto HLA will be further elaborated. Before that, we first describe the COVEN reference architecture.6.	The COVEN ArchitectureWithin the COVEN project a reference architecture for Collaborative Virtual Environments has been defined. The reference architecture is realized in the DIVE system [2,3]. A central feature in the programming architecture of DIVE is the shared, distributed world database, see Figure 1. All user and application interactions take place through this common medium. DIVE applications operate solely on the world abstraction and do not communicate directly with each other. A collection of application processes can interact with each other through a world, which is a hierarchical database of entities. The database is hierarchical to ease ordering of information and rendering. In addition to graphical information, DIVE entities can contain user-defined data and autonomous behavior descriptions [2]. Figure  SEQ Figure \* ARABIC 1 Each process holds its own copy of the relevant objects, but the whole virtual world can be thought of as residing on the network.The architecture is based on active replication of (parts of) the database, so that a copy resides at each application process. This model allows applications to access the world database directly from memory, which provides low-latency user interaction. Modifications to the database are applied locally first, then packed, transmitted and applied on all receiving copies. Thus, on the receiving side, world events are captured and transcribed into the database some time after they occurred. Differences introduced by latency and lost network packets are fixed by periodically synchronizing and updating the local versions of the world database.To remedy problems with network congestion and traffic overhead, and to offer the possibility of hundreds of participants sharing a common place, a mechanism is provided for dividing the world into sub-hierarchies that are only replicated and used in-between the small number of applications that are actually interested in them. Each sub-hierarchy may be associated with a multicast communication channel, called a lightweight group. When a modification message concerning an entity is to be sent, the algorithm will climb the entity hierarchy, starting from the entity. As soon as a multicast group is found, it will be used as a communication medium. Some parts of the hierarchy may be  considered local and modifications will not be distributed. Associations between objects and leight-weight groups can be modified in a dynamic manner, and preferably through a high level human computer interface or a script language.To minimize network load and to increase scalability, (peer-to-peer) multicast protocols are heavily used. Changing the state of an entity results in changes in the  copy of the local database. Essential database modifications are subsequently sent using a reliable multicast protocol, while continuous data streams are sent using an unreliable multicast protcol. A negative acknowledgement request / response scheme may be used to support reliability. If a peer detects a missing update message or just requests a state update, it requests the object on the associated multicast address. The closest peer with the latest version of the object will respond [15]. All accesses performed on entities in the database must originate from an actor – which is an abstract logical representation of an application that interacts actively with the database. In addition, an actor may be the owner of an entity to allow for an access control mechanism.COVEN Reference ArchitectureAs a reference architecture a layered approach has been defined. Each of the layers is relatively independent of the layers above and below. A specific software layer implements a specific set of functional requirements. This enables changes in a particular layer in order to incorporate new technological improvements without having to change other layers, assuming that the interfaces between the layers do not have to be changed. We refer to [13] for additional background information on layered software architectures.The COVEN reference architecture is best described in terms of four primary layers.Application layer - this topmost layer contains specific applications, exemplified by the COVEN business and citizen application, described in [8].Core system services – the next layer down is concerned with core system services such as graphical rendering, collision detection, real-time media handling, support for object behaviors, and animating humanoid embodiments.Distribution layer – the next layer down provides the core distribution platform and is concerned with the transmission of different kinds of CVE traffic (e.g., state updates, continuous media and distribution of world descriptions) between the different participants in a CVE application.Network layer – this lowest layer is concerned with the mapping of the distribution architecture onto a specific network technology and topology (e.g., a specific ISDN or ATM configuration).The core system services and the distribution layer are elaborated in [14], including references to the main research behind the core system. For a good description of the realization of a Collaborative VE platform within the COVEN project we refer to [15], which describes enhancements on network architecture, high level behavior, standards integration, rendering, scalability, end user tailoring and enhancements on CSCW (Computer Supported Co-operative Work). 7.	COVEN Platform and HLAHLA supports the development of scalable distributed simulations, which means the ability of a distributed simulation to maintain time and spatial consistency as the number of entities and interactions increase [16]. The HLA Declaration Management, Data Distribution Management, and Ownership Management services are intended to exchange data between HLA federates in an effective and efficient manner.  The HLA Declaration Management service is used by an HLA federate to inform the HLA federation of their interest in receiving object and interaction data of certain types, as well as its ability to send data of certain object and interaction types to the HLA federation. These so-called subscribe and publish interests should be consistent with the federate’s SOM and the federation’s FOM descriptions. The Declaration Management service enables the HLA Run-Time Infrastructure (HLA-RTI) to filter incoming data in which the federate has not expressed an interest, or to filter outgoing data in which no other federate has expressed an interest. However, it depends on the specific RTI implementation whether the data is filtered at the sending federate, at the receiving federate, or whether a mixed strategy is chosen. An optimal strategy, in terms of minimization of the network and synchronization overhead, depends on the expected number of publish and subscribe interest changes as well as the number of federates in the federation. This illustrates that CVE users and developers require knowledge about the RTI implementation to fine-tune the performance of their federation execution.The Data Distribution Management (DDM) service is used to support efficient data distribution across a federation based not only on data-types but also on the data-values. In fact, a federate may express an interest in receiving data not only of a certain type but also within a certain value-range. However, HLA consistenly tries to avoid interpretation (and therefore comparisons) of user-defined data. The DDM approach is to have the federate map a value-range or a single value onto a (canonical) N-dimensional  HLA region, for which an RTI implementation supplies implicit comparison operations [16]. A federate may express its interests in receiving data in a certain value-range by associating a subcribe interest with a specific region (called subscription-region). Conversely, the sending federate may associate a so-called update-region with the value of the attribute/interaction it is able to publish. Now only the federates whose subscription and update region overlaps can receive the data.Data Distribution Management offers a high-level application independent interface to the data distribution problem. From the perspective of scalability, it depends on the RTI implementation if certain time-critical performance requirements can be met. Therefore, the RTI implementation should allow straightforward configuration of network parameters, for example, by a user-defined mapping of routing-spaces onto multicast groups.The HLA Ownership Management service is a group of functions that allows federates to transfer the ownership of object attributes. Ownership of an attribute gives a federate the responsibility to provide new values for that attribute, and it allows the federate to remove an object if it owns the ‘PrivilegeToDelete’ attribute. Ownership transfer is commonly used for three purposes:to reduce network latency (and bandwidth) by locally simulating the behavior of objects;to perform load-balancing by re-distributing the objects over the available federates;to transfer the control or access to resources.The HLA supports the ownership transfer of a set of object attributes from one federate to another. The attribute values of an object can only be changed by the federate that owns the object attributes. HLA does not associate a behavior with an object or a certain set of object attributes. Simulating the behavior of an object is left to the application (or federate). Unfortunately, the HLA Interface Specification does not specify an atomic transfer of a set of attributes; if multiple federates are interested in different subsets of the attributes, the set of attributes is split into two parts with different owners [18]. Additionally, the owning federate cannot specify which federate should accept ownership of the attributes. Maybe this could be changed in a future version of the HLA Interface Specification.RTI InteroperabilityThe HLA Interface Specification is implemented by the Run-Time Infrastructure (HLA-RTI), which can be regarded as a distributed operating system for exchanging data. There are a few RTI implementations, but each with their own design decisions in order to optimize certain communication trade-offs. It is often very difficult to predict the real-time behavior and time-critical performance issues of a simulation, based merely on the usage of the RTI interface services without detailed knowledge of the RTI design. A potential problem for coupling different virtual environments is the RTI to RTI interoperability. Currently, all RTI versions from different vendors are known not to be link compatible. A solution could be in the support of inter-RTI protocols, possibly the Internet Inter-ORB Protocol (IIOP), which is an object-oriented protocol that enables distributed programs to communicate over the Internet (IIOP is a critical part of a strategic industry standard, the Common Object Request Broker Architecture (CORBA)).In the near future, different RTI implementations for different communication media are envisaged, using different communication protocols that can be mapped on different physical communication media, for instance by using shared-memory. The need for high-performance RTI versions is already identified within the scope of HLA simulator component based development strategies [19, 20]. Architectural issuesIn terms of the COVEN reference architecture, HLA fits into the Distribution Layer of a CVE. The services offered by the Distribution Layer should abstract from the RTI services. It has been investigated how the HLA can be applied within the Distribution Layer to realize a Collaborative Virtual Environment platform [12].The Distribution Layer of a CVE is composed of several modules, encapsulating and abstracting from the several capabilities of HLA required for a CVE framework. We envisage an Object/Event Manager, Region Manager, and a Media Stream Manager, all embedded within an HLA middleware layer, such as the Run-Time Communication Infrastructure (RCI), developed in the SIMULTAAN project  [19, 20].Object/Event Manager In the COVEN approach, we have peers that can connect to a world. In HLA terminology, it is tempting to map peers onto federates and worlds onto federations. However, a peer can connect to multiple worlds, whereas a federate can merely join a single federation. A more fundamental difference is the concept of a world versus the concept of a federation. A CVE world is a shared distributed hierarchical database of entities, whereas a federation is a set of federates -each owning several objects- using the same Federation Object Model (FOM).  The distribution mechanism proposed in COVEN is based on active replication of state updates, additionally supported by a concept called high-level messaging [1]. The Object/Event Manager is made responsible for the active replication of state changes. Every federate has a local copy of each HLA object it is interested in, and the federate is allowed to inspect and instantaneously modify its state. This is required for low local response latencies. An object’s state change is sent as an interaction to the owning federate through a dedicated region in a well-known routing space. Subsequently, the owning federate merges the state changes with the current state of the object and sends a new version of the object’s state to the interested federates as an ordinary HLA object state update. This approach enables an active replication mechanism using the HLA-RTI as the underlying communication layer.Besides active database replication, the Object/Event Manager must support the following tasks:assign a unique name to a dynamically created object for identification purposes by other federates;maintain complex object relationships since HLA merely supports class inheritance;maintain ‘persistent’ objects by adopting an object ownership transfer protocol, for example in [18], which guarantees that an object is owned by some federate at all times;provide an interface for associating behavior scripts that can be associated with objects;restrict object manipulations conform user defined access rights.Region Manager The essence of a CVE is that the shared space defines a consistent and common spatial frame of reference. In other words, there is a well-established co-ordinate system in which the relative positions and orientations of different objects can be measured. In order to partition the space into zones or regions, the HLA region concept can be used. For CVE applications, a 3-dimensional routing-space is probably chosen. In this case, an HLA region could be defined as a set of one or more cubes in a 3-dimensional routing space.  Rooms and buildings in the virtual environment can be mapped onto HLA regions in a straightforward manner when the virtual environment itself is partitioned into non-overlapping regions. The Region Manager is made  responsible for maintaining the HLA Region administration based upon (1) an agreed upon co-ordinate system that is described in the FOM, (2) an agreed upon partitioning of the VE space, and (3) the most recent position and orientation of a possible actor. Media Stream Manager The HLA Interface Specification does not differentiate between discrete and continuous update behaviors. The federate must therefore implement its own protocol on top of the HLA-RTI to communicate large amounts of data and flows of data such as multimedia contents and possibly large documents. Such a protocol is implemented by the Stream Manager in an HLA compliant manner. It also supports redirection of incoming data to the associated software layer that is able to process that particular type of data. However, it would probably be more easy to have the Media Stream Manager use a dedicated communicaton layer for audio/video content, and in the case of a non-RTI communication layer possibly violating HLA Rule number 3, see [16].RTI MiddlewareThe HLA Interface Specification has many technical intricate details. HLA has a steep learning curve and it is not easy to use for non-HLA developers. Therefore, the CVE application developer should be offered a more abstract API. A middleware layer approach has proven to be very successful [20]. In general, a middle-ware layer also handles domain invariant specific issues like scheduling and data-marshalling. The use of a middleware layer approach can be complemented with the use of automatic code generators which generate (object-oriented) source code from the user-defined SOM and FOM definitions, thereby minimizing development and debugging time [20].8.	ConclusionsThe COVEN platform will be an open system that can interact with other simulation and virtual environment facilities. The High Level Architecture is an important simulation standard to which a platform for Collaborative Virtual Environments could comply. The COVEN approach for the realization of a Collaborative Virtual Environment is presented in this paper. COVEN focuses on  scalable architectures that utilizes both reliable and unreliable communication protocols for different types of communications. It is investigated in what way HLA may provide support for the realization of generic Collaborative Virtual Environment requirements. HLA consistently separates communication aspects from functional or domain specific aspects. Many requirements of a Collaborative Virtual Environment (CVE) platform are not addressed by HLA as they turn out to be functional requirements from the HLA point of view. The COVEN reference architecture is used to illustrate a possible integration of a CVE platform which is HLA compliant. Based upon our experiences within the COVEN project, the HLA community should consider whether the HLA Interface Specification should provide support for the atomic ownership transfer of a set of attributes to a certain designated federate. Also the availability of media streaming services could further improve the applicability of HLA for CVE. Furthermore, it would be of benefit to have a description of the HLA in terms of a layered interconnection model such as the Open Systems Interconnection (OSI) reference model. Such a layered architecture could also provide support for future run-time interoperability of different RTI versions. Another recommendation is to apply an RTI middleware layer to achieve a higher level of reusability of simulation components.Developers of an HLA based CVE platform should take into account the high level of abstraction of the HLA Interface Specification. Developers of an HLA-RTI inevitably have to make design choices that contain assumptions and trade-offs which may, or may not, be consistent with the requirements and intented usage of the CVE platform. Design and critical implementation issues of an RTI release should therefore be made publicly available. HLA truly aims at simulation interoperability and the re-use of simulation components. Validated and well-documented simulation components stored in repositories could further improve the re-use of simulation components. A platform for Collaborative Virtual Environments will benefit from the simulation activities of the HLA community to achieve a truly open and interoperable system. 9.	References[1] Normand, V., Babski, C., Benford, S., Bullock, A., Carion, S., Farcet, N., Frecon, E., Harvey, J., Kuijpers, N., Magnenat-Thalmann, N., Raupp-Musse, S., Rodden, T., Slater, M., Smith, G., Steed, A., Thalmann, D., Tromp, J., Usoh, M., Van Liempd, G., and Kladias, N, “The COVEN Project: Exploring Applicative, Technical, and Usage Dimensions of Collaborative Virtual Environments”  Presence: Teleoperators and Virtual Environments, Volume 8, Issue 2, pages 218-236, MIT Press, April 1999. [2] Frécon E. and Stenius M., “Dive: A scalable network architecture for distributed virtual environments”, Distributed Systems Engineering Journal (Bristol UK: Institute of Physics Publishing) 5 (3), pp. 91100, 1998[3] Hagsand O, “Interactive Multi-User VEs in the DIVE System”, IEEE Multimedia Mag. 3 (1) pp 30-39, 1996[4] C. Grimsdale, "dVS - Distributed Virtual Environment System", Proceedings Computer Graphics 1991, London, UK.[5] C. Greenhalgh and S. Benford, “MASSIVE : a virtual-reality system for teleconfercencing”, ACM Transactions on Computer-Human Interfaces (TOCHI), ACM Press, pg. 239-261.[6] M.R. Macedonia, M.J. Zyda, D.R. Pratt, P.T. Barham and S. Zeswitz, “NPSNET: A network software architecture for large scale virtual environments”, MIT Presence, 3(4), 1994.[7] Dave Snowdon, Chris Greenhalgh, Steve Benford, Adrian Bullock and Chris Brown, "A Review of Distributed Architectures for Networked Virtual Reality", Virtual Reality: Research, Development and Applications, 2(1), 1996[8]  Nico Kuijpers and Harro Jacobs, Teleconferencing and Collaboration in Virtual Environments, HPCN     Europe '97, April 28-30, 1997, Vienna, Austria. [9]  Smith, G. and Mariani, J. "Using Subjective Views to Enhance 3D Applications", Proc. Conf. Virtual Reality Software and Technology 1997 (VRST '97), ACM Press, Lausanne, Switserland, Pages 130-146[10] H. Schulzrinne, S. Casner, R.Frederick, V. Jacobson, “RTP: A Transport Protocol for Real-Time Applications”, IETF RFC 1889, 1996.[11] Peter Parnes, “RTP extension for Scalable Reliable Multicast”,http://www.cdt.luth.se/~peppar/ docs/rtp_srm/draft-parnes-rtp-ext-srm-01.txt,  IETF[12] COVEN, “Contributions to the HLA Standard”, Deliverable7.3, ACTS Project N. AC040, September 1999.[13] Buschmann, Frank, “Pattern-Oriented Software Architecture: A System Of Patterns”, Wiley, 1996[14] COVEN, “Specification of Scalability Enhancements to the COVEN Platform”, Deliverable D1.5,  ASK DeliverableTitle “Title of deliverable” Initial specification of COVEN service ACTS Project N. AC040, 1998.[15] COVEN, “ ASK DeliverableTitle “Title of deliverable” Initial specification of COVEN serviceThe final COVEN multi-user VR platform”, Deliverable D1.4, ACTS Project N. AC040, 1998.[16] High Level Architecture-Technical Specifications,  http://hla.dmso.mil [17] US Department of Defense, “High Level Architecture Run-Time Infrastructure Programmer’s Guide 1.3 Version”, 31 July 1998.[18] Nico Kuijpers, Marco Brassé, Bas Huijbrechts, Johan Lukkien, “Applying Data Distribution Management and Ownership Management Service of the HLA Interface Specification”, Proc. 1999 Fall Simulation Interoperability Workshop, 99F-SIW-023, Orlando, FL, September 1999.[19] Nico Kuijpers, Paul van Gool, Hans Jense, “A Component Architecture for Simulator Development”, Proc. 1998 Spring Simulation Interoperabilty Workshop, Orlando, FL, March 1998.[20] Marco Brassé, Wim Huiskamp, Olaf Stroosma, “A Component Architecture for Federate Development”, Proc. 1999 Fall Simulation Interoperability Workshop, 99F-SIW-025, Orlando, FL, September 1999.[21] Greenhalgh, C. M., Benford S. D., Bullock, A. N., Kuijpers, N., Donkers K., “Predicting Network Traffic for Collaborative Virtual Environments”, Computer Networks and ISDN Systems, 30 (1998) 1677-1685, Elsevier, 1998.Author BiographiesMARCO BRASSÉ is a member of the scientific staff in the Command & Control and Simulation Division at TNO Physics and Electronics Laboratory (TNO-FEL). He is a software architect for several projects in the area of distributed simulation, both nationally and internationally with partners in the armed forces and simulation industry. His present activities are focused on component based federate development strategies for real-time simulators. He holds a M.Sc. in Computing Science and a Master of Technological Design in Software Technology, both from Eindhoven University of Technology. NICO KUIJPERS is assistant professor at the Department of Mathematics and Computing Science of Eindhoven University of Technology (TUE). His research interests are medical image analysis, large-scale (biomedical) simulations and distributed simulations. In his former job at TNO-FEL he was a member of the scientific staff in the Command & Control and Simulation Division. He was project leader for several collaborative projects in the area of distributed simulation, both nationally and internationally with partners in the industry and academic world. He holds a M.Sc. in Computing Science and a Master of Technological Design in Software Technology, both from Eindhoven University of Technology. This work has been carried out as a cooperation between TNO Physics and Electronics Laboratory and Eindhoven University of Technology.