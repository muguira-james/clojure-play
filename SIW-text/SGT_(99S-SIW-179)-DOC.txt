A New Paradigm for Developing and Maintaining Scenarios for Distributed Simulation SystemsKen HuntAEgis Research Corporation6703 Odyssey DriveHuntsville, AL 35806256-922-0802 HYPERLINK mailto:khunt@aegisrc.com khunt@aegisrc.comLT Eric HartenElectronic System Center5 Eglin StreetHanscom AFB, MA 01731hartene@hanscom.af.milABSTRACT: The Federation Development and Execution Process (FEDEP) continues to evolve and automated tool support continues to improve. One area that has received little attention, however, is that of scenario development. While the FEDEP explicitly mentions scenario development as a necessary activity, there has been little published regarding automated tools to support this activity. This paper describes a newscenario toolset being developed by AEgis Research Corporation in cooperation with the Modeling and Simulation Analysis Center (MASC) at Hanscom Air Force Base under the working name of Scenario Generation Toolset (SGT). The SGT leverages off of specific technical aspects of HLA and on the Conceptual Models of the Mission Space (CMMS). The SGT separates scenario maintenance into two distinct domains: the conceptual domain and the execution domain. By allowing the scenario to be developed in the conceptual domain, the scenario is defined in an environment natural to the conceptual analysis prescribed by the FEDEP, while at the same time maximizing the opportunity for reusing the scenario. Since the HLA federation object model (FOM) provides the necessary terminology to bridge the federation’s constituent simulations, a mapping between the conceptual model and the FOM enables the degree of automation necessary to make distributed scenario management a reality. This paper elaborates the characteristics of the SGT and the scenario management paradigm that it facilitates.IntroductionThe HLA is maturing in key areas such as RTI implementation, formalized specification, process description and supporting tools.  Early versions of the tools needed to establish a HLA federation have been released, including the Run-time Infrastructure (RTI), Object Model Development Tool (OMDT), and the Object Model Library.  Other HLA support tools have been identified [1] and several of these are under development due to a variety of initiatives, including both government sponsorship and independent commercial endeavors. One area that has received an under-whelming level of attention is that of scenario development. This is most likely due to the significant number of scenario editing applications that exist. A simulation-specific scenario tool accompanies virtually every simulation application that has ever been developed. Since every simulation has its own unique requirements in terms of supported file formats and specific data constructs, this proliferation of scenario editing tools is not entirely without justification. In the field of distributed simulation, scenario development and maintenance is complicated by the lack of a centralized tool for capturing the scenario. However, the first conclusion that most simulation professionals come to is that a single scenario editing tool that can satisfy the scenario definition needs of a large number of simulations is virtually impossible, and would require a greater level of effort to develop than the simulations themselves. Thus the practice of developing textual descriptions of the scenario with timelines of key events is typically applied to the problem. While text based solutions such as spreadsheets and timelines can help, these approaches are error prone, imprecise (i.e. subjective) and labor intensive.  It is inevitable that in the lifecycle of a federation of simulations that multiple iterations of a given scenario will be executed, with modifications of some sort typically occurring with each iteration. Given the key role that scenario development plays in the federation development and execution process (FDEP) [2], some form of automation to support a centralized definition of the federation’s scenario is called for. While we concur that a universal scenario editor capable of initializing any arbitrary simulation is a cost prohibitive endeavor, we believe we have identified a new way of looking at scenario development for the distributed simulation system that can be automated within reasonable budget constraints. The approach we have formulated involves two primary tasks. The first is to develop the federation’s scenario in the conceptual domain independent of the object perspective of any particular simulation system. The second task is to map the conceptual domain scenario objects to specific federates, using a mapping between the conceptual model and the HLA FOM as the basis for bridging the conceptual domain and the simulation domain. To enable developing scenarios in the conceptual domain we have designed a scenario development tool, currently known as the Scenario Generator, that adapts itself to a conceptual model. As described by Haddix [3], the term conceptual model is overloaded within the simulation community, and a potential point of misunderstanding. Using Haddix’s categorizations, we are referring to a Primary Conceptual Model, in particular the Federation Conceptual Model (FCM), which is defined in the FEDEP and summarized by Haddix as:A product of conceptual analysis which conceptually represents the intended problem space based on an interpretation of user needs, federation objectives, and the defined environment (of the federation); andAn implementation-independent (federation-dependent) representation (of the federation) serving as a vehicle for transforming objectives into functional and behavioral capabilities, and providing crucial traceability between the federation objectives (and requirements) and the design implementation.To facilitate mapping the objects created in the Scenario Generator to specific federates we have designed a second application, referred to as the Execution Planner, to automate this task. The Execution Planner should not be confused with the Federation Execution Planners Workbook (FEPW) [4]. While the Execution Planner can make use of some of the information contained in the FEPW (as later described), it is performing a much more detailed mapping of scenario information than the FEPW is capable of. The Execution Planner is also capturing information that provides a much higher degree of traceability than the FEPW alone can provide, and provides detailed reports that are invaluable in the validation process. The Scenario Generator and Execution Planner, together referred to as the Scenario Generation Toolset (SGT), are being developed under the direction of the Air Force’s Modeling, Analysis and Simulation Center (MASC) at Hanscom Air Force Base. The simulation experts at the MASC are providing real-world requirements to the SGT development based on the needs of their numerous distributed simulation projects. Figure 1-1 depicts the primary interfaces to and between the Scenario Generator and the Execution Planner. The next two sections provide a more detailed look at the design and implementation of the SGT.Scenario GeneratorTo enable developing a scenario in the conceptual domain, the Scenario Generator must read in the Figure 1-1: Primary interfaces of the Scenario Generation Toolsetdefinition of the conceptual model. In our initial implementation of the Scenario Generator we are importing object models from the Rational Rose CASE tool. We have plans to investigate data interchange formats developed in conjunction with the Conceptual Models of the Mission Space (CMMS). The types of information that the SGT is designed to make use from an object oriented perspective include class hierarchy, composition, associations, and of course class attributes.  Once the Conceptual Model has been loaded, the user can associate icons to each of the classes. Since the Scenario Generator recognizes inheritance, it is not necessary to specify an icon for every class in the conceptual model. A default icon can be specified as well. The Scenario Generator supports a freeform workflow once the conceptual model and icon relationships have been established. The user can perform tasks such as editing scenario properties (start time, end time, POC information, etc.), create object instances and position them on 2D map displays, specify geographic areas of interest (engagement zones, lines of battle, etc.) and plan routes and waypoints.  To make the process more efficient, the Scenario Generator supports the concept of prototype objects. Prototype objects are similar to object instances in that all of their attributes (as defined by the conceptual model) can be assigned values and relationships can be made with other prototype objects (via associations and compostion). However, a prototype object simply serves as a source to duplicate real object instances from. In essence, it serves as a pattern so that the user does not have to reenter common values within a given collection of objects. As an example, consider a conceptual model with a leaf level class of FixedWingAircraft. Within this class, there may be collections of objects with common values, such as F15s and F16s.  Rather than having to enter attribute values common to all F15s repeatedly, a prototype object can be made that contains the specific attribute values common to all F15s (such as the values for max_thrust and turn_radius). In addition to interfacing with objects on a 2D display or in dialog boxes, the Scenario Generator offers an Event Sequencer for displaying and adjusting the relative timing of scenario events. The types of events that can be specified within the SGT are assumed to be defined within the conceptual model and inherited from a specific class referred to as SGEvent. This class defines a single attribute, which is TimeOfEvent. It could be argued that this approach adds a simulation domain artifact into the conceptual model, but in our assessment it is preferable to make this minor requirement on the object model than to restrict the notion of events to a predefined set within the tool. Our goal is to provide a scenario editing capability completely open and extensible, and our preference is to make the tool extensible through the conceptual model.Typical events that we see being identified as subclasses of SGEvent include CreateObject, Engage, StartRoute, ArriveAtWaypint, and Transmit. (Note that an SGEvent subclass can define its own attributes, and may involve other objects. When other objects are involved, the class is very similar to the HLA concept of an interaction class. Also, the name and number of subclasses is completely arbitrary.) The dialog editor for any given object class with allow the user to add instances of SGEvent to an object instance. Within the Event Sequencer, the user can see a graphical display of all scenario events (color-coded by class) and adjust the timing of those events on the timeline. This is a powerful feature for both visualizing and editing all of a scenario’s events without having to edit each object individually.Other utilities that the Scenario Generator provides include: 2D drawing tools for defining geographic data of interest (such as lines of battle and engagement zones); an elevation profiler to assist in geographic positioning; motion preview of planned routes (using a simple linear motion model); and an Air Tasking Order (ATO) parser to rapidly create scenario specifications from an Air Force operational file format. For map displays, the Scenario Generator currently supports DTED data as well as raster bitmaps of arbitrary images in JPEG, TIF or BMP format. The Scenario Generator currently outputs the scenario specification in XML-based formatted files or to an Oracle database. Execution PlannerAs briefly mentioned earlier, the Execution Planner should not be confused with the Federation Execution Planners Workbook (FEPW). The Execution Planner is focussed on the task of designating modeling responsibility for specific scenario objects to the federates. A portion of the FEPW deals with designating which FOM classes each federate publishes and subscribes to [5], but this is only of limited use in establishing traceability from the conceptual analysis through the execution. The Execution Planner provides a much more detailed audit trail of scenario objects.Use of the Execution Planner begins, however, with the exact type of FOM partitioning that the FEPW prescribes. In fact, the FEPW DIF can be imported into the Execution Planner so that this task does not have to be repeated. For those who choose not to use the FEPW tool, the Execution Planner provides its own interface for performing this task. Once FOM partitioning is complete, a mapping between the conceptual model (which the scenario object instances are created from) and the FOM is performed. Inheritance is automatically exploited to expedite the process, and a utility for insuring that an exhaustive mapping has been made is provided.  Once this mapping is established, each scenario object, as defined in the scenario specification output by the Scenario Generator, can be assigned to a specific federate for modeling. The Execution Planner makes use of the conceptual model-to-FOM mapping to guide the user as to which federate is capable of modeling a given scenario object. The Transfer/Accept designation in the FOM is also used to determine where a given scenario object can be modeled by more than one federate. The Execution Planner offers two types of outputs. The first is a set of detailed reports that define the modeling responsibilities for each scenario object instance. A federation level report provides a list of scenario objects and responsible federates sorted by conceptual model class. A detailed report for each federate is also generated defining each scenario object the federate is responsible for, the conceptual class it is derived from, and the FOM class (or classes) that it is associated with. These reports provide an unprecedented level of traceability, with mappings between conceptual object instances, conceptual classes, FOM classes and federates automatically generated.The second type of output that the Execution Planner can generate is in the form of actual scenario initialization data for the each federate. The Execution Planner offers a plug-in capability so that simulation custodians can develop modules capable of generating their simulation’s own file or database format directly from the Execution Planner. Such plug-ins are being developed for both EADSIM and AWSIM in support of activity ongoing at the MASC and to serve as programming samples as to how to create such plug-ins for other simulations. While we don’t pretend to expect that every simulation in the DoD community will choose to develop plug-ins for the Execution Planner, it does offer an interesting opportunity for certain federations. With the advanced ease-of-use features being built into the SGT, we expect that quite a few legacy simulations with cumbersome scenario editors will view the SGT as an attractive alternative to retooling their own software. Status and Future DirectionThe SGT is well into a Phase II SBIR effort. The Phase I effort resulted in a working prototype that demonstrated capabilities specific to the needs of the MASC. The Phase II effort has attempted to apply AEgis Research’s extensive HLA expertise to creating a product that is widely applicable to the needs of the distributed simulation community.   The goal for this phase is to federate EADSIM with AWSIM and demonstrate that a centrally defined scenario can indeed be used to populate two different simulations.We can see these tools having a great impact on the way modeling and simulation for distributed exercises are handled.  By having a simulation-independent Scenario Generator, the scenario custodians can maintain configuration control of the scenario.  The Execution Planner will then allow the scenario to be directly distributed to the simulations in the federation.  This approach will prevent the redundant effort of loading certain scenario objects into every simulation separately.  This level of automation and centralization decreases the potential for human error. We envision a future where scenarios (defined in the conceptual domain) are archived and reused in a fashion similar to how HLA object models are currently being archived and shared. It is for that reason that our primary file formats are XML based, with publicly available documentation to facilitate reuse. We are also looking into the Order of Battle Data Interchange Format (OB DIF) being developed by DMSO as a likely format to support both by the Scenario Generator and as an output from the Execution Planner.  Conclusions We have described a new approach for managing the scenario specification for distributed simulation systems. It involves defining scenarios in the conceptual domain with a tool that can automatically adapt to the conceptual model specification. This approach allows the tool and the scenario to be independent of any particular simulation application, and thus highly reusable. In this paradigm, the HLA object models provides the necessary terminology to bridge the federation’s constituent members. The technique of object model cross-referencing, combined with the FOM partitioning information defined in the FEPW, facilitates the degree of automation required to make the task of assigning responsibilities for large numbers of objects manageable. The technical staff at the MASC has identified the requirements necessary to insure that the SGT not only addresses issues peculiar to HLA and distributed simulation, but also provides an intuitive and powerful interface that represents the best practices for the task of scenario generation.  References[1] R. Scrudder, R. Lutz, J. Dahmann, “Automation of the HLA Federation Development and Execution Process”, Fall Simulation Interoperability Workshop, September, 1998.[2] Defense Modeling and Simulation Office, “HLA Federation Development and Execution Process Model - Version 1.3 Draft”, 09 December 1998.[3] F. Haddix, “Mission Space, Federation, and Other Conceptual Models”, Fall Simulation Interoperability Workshop, September, 1998. [4] Defense Modeling and Simulation Office, “High Level Architecture Federation Execution Planner’s Workbook (FEPW), Version 1.3”, 10 June 1998.[5] M. Salisbury, D. Seidel, “Execution Planning for HLA Federations”, Fall Simulation Interoperability Workshop, September, 1998.Author BiographiesKEN HUNT is the Technology Group Leader for Software Development at AEgis Research Corporation.  In this role, he has oversight of all corporate software development activity, including the HLA Lab Works™ tool suite and DMSO’s OMDT. Since receiving a bachelor’s degree in Electrical Engineering from Auburn University, he has accumulated over 14 years of experience in software and simulation development.  His simulation experience includes designing discrete event simulation frameworks for DoD, finite element applications for NASA, and manufacturing simulations for the automotive industry.LT ERIC HARTEN as an electrical engineer serving in the US Air Force, Lt. Harten is involved in various modeling & simulation and HLA efforts.  Lt. Harten is the Air Force OPR for the HLA Advanced Exercise Scenario Generation Tool Suite.  In this role, he is guiding the development of this package for future use by the USAF in exercise planning and execution. EMBED Visio.Drawing.5  