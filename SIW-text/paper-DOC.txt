WebHLA - An Interactive Programming and Training Environment for High Performance Modeling and Simulation Geoffrey C. Fox, Ph. D.,  Wojtek Furmanski, Ph. D., Subhash Nair,  Hasan T. Ozdemir,  Zeynep  Odcikin Ozdemir, Tom A.  PulikalNortheast Parallel Architectures Center, Syracuse University111 College Place, Syracuse University, Syracuse NY 13244-4100315- 443-{2163, 1799, 4889, 4889, 4899, 4899}{gcf, furm, subhash, timucin, zeynep, tapulika} @ npac.syr.eduKeywords:HLA, RTI, Web, CORBA, Java, COM, XML, DirectX, Object Web, HPC, Metacomputing, Distance Training, SBAABSTRACT: The process of integrating DoD Modeling and Simulation paradigms around new HLA/RTI standards proceeds in parallel with the onset of new commodity standards for distributed objects and componentware, sometimes referred to as Object Web and emergent at the crossroads of CORBA, COM, Java, and W3C WOM models. In this paper, we describe our WebHLA approach that integrates both trends by offering an open implementation of the HLA framework in terms of the Object Web standards. More specifically, we are addressing WebHLA design and prototype development at NPAC in a set of FMS PET tasks within the DoD HPC Modernization Program at ARL and CEWES, including: a) Java CORBA based implementation of DMSO RTI 1.3; b) Visual  Authoring of HLA simulations; c) Parallel ports (to Origin2000) of selected computationally intensive M&S modules; d) Web linked database and data mining backends; e) real-time multiplayer gaming front-ends. We summarize here the status of the corresponding WebHLA components and we illustrate their integration in  some emergent WebHLA application domains such as: Distance Training, Metacomputing FMS, Cluster Management, Simulation Based Acquisition.1. IntroductionTechnology roadmap for High Performance Modeling and Simulation  (Fig. 1) which underlies our FMS PET program within the DoD HPC Modernization Program  explores synergies between ongoing and rapid technology evolution processes such as: a) transition of the DoD M&S standards from DIS to HLA; b) extension of Web technologies from passive information dissemination to interactive distributed object computing offered by CORBA, Java, COM and W3C WOM; and c) transition of HPCC systems from custom (such as dedicated MPPs) to commodity base (such as NT clusters). One common aspect of all these thrends is the enforcement of reusability and shareability of products or components based on new technology standards. DMSO HLA makes the first major step in this direction by offering the interoperability framework between a broad spectrum of simulation paradigms, including both real-time and logical time models. Figure  SEQ Figure \* ARABIC 1: Web/Commodity and  DoD M&S Technology Evolution Roadmap  which underlies our WebHLA, approach: both domains are switching now to distributed object technologies (CORBA insertion) and will soon acquire High Performance Commodity Computing capabilities, e.g.  via NT clusters.However, HLA standard specification leaves several implementation decisions open and to be made by the application developers - this enables reusability and integrability of existing codes but often leaves developers of new simulations without enough guidance. In WebHLA, we fill this gap by using the emergent standards of Web based distributed computing – we call it  Pragmatic Object Web [3][2] - that  integrate Java, CORBA, COM and W3C WOM models for distributed componentware. Traditional HPCC, dominated by data parallel MPP didn’t make significant inroads into the DoD M&S where the focus is on task parallel heterogeneous distributed computing. Recent trends towards commodity based HPCC systems such as NT clusters offer a new promising framework for new generation high performance high fidelity M&S environments such as addressed by JSIMS, JWARS, JMASS or Wargame2000 programs. We therefore believe that WebHLA, defined as the convergence point of the standardization processes outlined above will offer a powerful modeling and simulation framework, capable to address the new challenges of DoD computing in the areas of Simulation Based Design, Testing, Evaluation and Acquisition. We are addressing WebHLA design and prototype development in a set of PET FMS tasks at ARL and CEWES, including: JWORB based Object Web RTI (Sect. 2.1), WebFlow based Visual Authoring Tools (Sect. 2.2), Data Mining (Sect. 2.3) and HPC Simulation back-ends (Sect. 2.4), and DirectX based multiplayer gaming front-ends (Sect. 2.5).The overall architecture of our WebHLA prototype follows the 3-tier architecture of our Pragmatic Object Web [3]  (see Fig. 2) with the RTI-over-JWORB based middleware, backend simulation modules (given by CMS, ModSAF etc. libraries, wrapped via CORBA/COM as FOM or SOM objects) and with the WebFlow/DirectX based visual authoring / runtime  front-ends.  In the following, we describe in more detail in Chapter 2  the WebHLA components listed above, followed by a brief overview in Chapter 3  of the emergent WebHLA application domains such as:  Distance Training, Resource Management for Metacomputing and/or Commodity Clusters, and Simulation Based Acquisition2. WebHLA Components2.1 Object Web RTICurrent HLA is a custom distributed object model but DMSO’s longer range plan includes transferring HLA to industry as CORBA Facility for Modeling and Simulation. Anticipating these developments, we have recently developed in one of our HPCMP FMS PET projects at NPAC an Object Web based RTI [6] prototype which builds on top of our new JWORB (Java Web Object Request Broker) middleware integration technology.Figure  SEQ Figure \* ARABIC 2: Illustration of the communication protocol integration within our JWORB based Pragmatic Object Web. JWORB uses Java to integrate HTTP with IIOP and then it connects with NT clusters via COM/CORBA bridge.JWORB (Fig. 2) is a multi-protocol Java network server, currently integrating HTTP (Web) and IIOP (CORBA) and hence acting both as a Web server and a CORBA broker. Such server architecture enforces software economy and allows us to efficiently prototype new interactive Web standards such as XML, DOM or RDF in terms of an elegant programming model of Java, while being able to wrap and integrate multi-language legacy software within the solid software engineering  framework of CORBA. We are now testing this concept and extending JWORB functionality by building Java CORBA based  RTI implementation structured as a JWORB service and referred to as Object Web RTI (Fig. 3). Our implementation includes two base user-level distributed objects: RTI Ambassador and Federate Ambassador, built on top of a set of system-level objects such as RTI Kernel, Federation Execution or  Event Queues (including both time-stamp- and receive-order models). RTI Ambassador is further decomposed into a set of management objects, maintained by the Federation Execution object, and including: Object Management, Declaration Management, Ownership Management, Time Management and Data Distribution Management. To be able to run C++ RTI demo examples, we developed a C++ library which: a) provides RTI C++ programming interface; and b) it is packaged as a CORBA C++ service and, as such, it can easily cross the language boundaries to access Java CORBA objects that comprise our Java RTI. Our C++ DMSO/CORBA glue library uses public domain OmniORB2.5 as a C++ Object Request Broker to connect RTI Kernel object running in Java based ORB. RTI Ambassador glue/proxy object forwards all method calls to its CORBA peer and Federate Ambassador, defined as another CORBA object running on the client side, forwards all received callbacks to its C++ peer. Figure  SEQ Figure \* ARABIC 3: Top view representation of Object Web RTI: RTI  Ambassador is Java CORBA object maintained by JWORB middleware; Federate Ambassador is (typically C++) CORBA object maintained by the backend federate; WebFlow front-ends tools are available for visual authoring of  federation configuration.2.2 Visual Authoring Tools for  HLA SimulationsDMSO has emphasized the need to develop automated tools with open architectures for creating, executing and maintaining HLA simulations and federations. The associated Federation Development Process (FEDEP) guidelines enforce interoperability in the tool space by standardizing a set of Data Interchange Formats (DIF) that are mandatory as input or output streams for the individual HLA tools. In consequence, one can envision a high-level user friendly e.g. visual dataflow authoring environment in which specialized tools can be easily assembled interactively in terms of computational graphs with atomic tool components as graph nodes and DIF-compliant communication channels as graph links  (Fig. 4)Figure  SEQ Figure \* ARABIC 4: WebFlow based representation of DMSO FEDEP: individual FEDEP tools  are mapped on WebFlow modules and the DIF files are mapped on WebFlow communication channels.Within our HPCMP FMS PET project at NPAC we are building such visual HLA tool assembly framework [4] on top of the NPAC WebFlow [1] system. Figure  SEQ Figure \* ARABIC 5: Top view of the WebFlow system: its 3-tier design includes Java applet  based visual graph editors in tier 1, a mesh of Java servers in tier 2 and a set of computational (HPC, Database) modules in tier 3.WebFlow is a Web/Java based visual dataflow environment with the Web browser based computational graph editor and the runtime given by a mesh of interconnected Java Web Servers (Fig. 6), used to manage WebFlow middleware module wrappers and acting as proxies to the backend computational modules (Fig. 5). Through WebFlow linkage with HPC via modules / wrappers for Globus Metacomputing as well as support for database and visualization, our approach offers a natural platform for addressing HPC and HLA integration issues.Figure  SEQ Figure \* ARABIC 6: Architecture of the WebFlow server: includes Java servlet based Session, Module and Connection Managers responsible for interacting with front-end users, backend modules and other WebFlow servers in the middleware.Figure  SEQ Figure \* ARABIC 7: OMDT by Aegis Corporation (front window) compared with our OMBuilder (back window): both tools have similar functionality and look-and-feel but OMBuilder is constructed  via VBA scripting on top of Microsoft Excel.We started this project by analyzing currently existing tools in this area.  In particular, we inspected the Object Model Development Tool (OMDT) by Aegis Research Center, Huntsville, AL as a representative current generation DMSO FEDEP tool. OMDT is a Windows 95/NT-based application that supports building HLA Object Model Template (OMT) tables such as Class, Interaction or Attribute Tables using a spreadsheet-like user. We found OMDT useful in the standalone mode but not yet ready to act as a standardized reusable component in larger toolkits. We therefore decided to build an OMDT-like editing tool based on Microsoft Component Object Model (COM) architecture. Rather than building our sample tool from scratch, we construct it by customizing Microsoft Excel Component using the Visual Basic for Applications and the OLE automation methodology. Using this approach, we were able to emulate the look-and-feel of the OMDT tool, while at the same time packaging our tool, called OMBuilder,  as a reusable COM or ActiveX component that can smoothly cooperate with other visual authoring tools within the WebFlow model (Fig. 7). We also extended the OMDT functionality in OMBuilder by adding support for initializing and runtime steering the simulation attributes and parameters.Figure  SEQ Figure \* ARABIC 8: Proof-of-the-concept visual authoring tools for Jager: WebFlow editor (lower left corner) allows to specify the configuration for  the Jager game players. Both the original 2D (upper left corner) and our trial 3D viewer s are displayed.Next, we constructed a proof-of-the-concept demo that offers WebFlow and OMBuilder based visual authoring toolkit for the Jager game (available as part of the DMSO RTI distribution). Each Jager player (both human and robot) is represented by a suitable visual icon in the WebFlow editor. A particular game scenario is constructed by selecting the required player set and registering / connecting them as nodes of  a suitable connected graph (e.g. ring in the lower left corner in Fig 8). We also constructed a 3D viewer, operating in parallel with the standard 2D Jager viewer and used for experiments with parameter initialization via the extended OMBuilder editor (Fig 9).Figure  SEQ Figure \* ARABIC 9: Proof-of-the-concept visual authoring tools for Jager: a runtime extension of the OMBuilder tool allows the user to initialize, monitor and steer the simulation or rendering parameters.Parallel ports of selected M&S modulesIn parallel with prototyping core WebHLA technologies described above, we are also analyzing selected large scale M&S applications that could be used as high performance simulation modules in tier-3 of our framework (see Figs. 2,3,5).In particular, we were recently studying the CMS (Comprehensive Mine Simulator) system developed by Steve Bishop’s team  at Ft. Belvoir, VA that simulates mines, mine fields, minefield components, standalone detection systems and countermine systems including ASTAMIDS, SMB and MMCM. The system can be viewed as a virtual T&E tool to facilitate R&D in the area of new countermine systems and detection technologies of relevance both for the Army and the Navy.  We are currently analyzing the CMS source code and planning the parallel port of the system to Origin2000.CMS simulates mine and other minefield objects, and their interactions with vehicles. Major CMS objects include: a) Mine (landmines including several conventional or custom types); b) Component (a collection of mines of one type), c) Minefield (a collections of components enclosed within a terrain perimeter). The CMS user interface supports a number of functions for editing mines during their creation, such as specifying their location or type.Within CMS, a mine may interact with externally or internally simulated vehicles. Conceptually, the simulation objects operate largely independently. The control system allows these conceptually independent and autonomous objects to operate and interact without knowing whether other objects are on the same or other computer. In addition it controls the simulation timing. The control scheme uses messages to schedule and then execute processes that are conceptually independent. Due to well-defined granularity and independence of the simulation objects, parallel port of CMS to Origin2000 seems to be feasible even if the code is large and includes ModSAF libraries. Figure  SEQ Figure \* ARABIC 10: Main components of the CMS system: network, user, display and simulation objects.We are currently identifying the critical loops over messages, mines, components and minefields that need to be optimized or/and parallelized and we intend to address the actual parallel port implementation in Fall 98.Database and data mining back-endsOur database activities for the WebHLA backend include both research into the emergent transparent persistency models such as CORBA PSS, OLEDB, JDBC or XML/RDF [7], and the practical development of specific relational databases tailored for the individual components, projects and customers.  For example, we are building SQL databases with the software documentation and PowerPoint presentation for the FMS Training Space (Sect. 3.1) and the distributed resources databases for the Metacomputing FMS (Sect 3.2) and Commodity Clusters (Sect. 3.3). We are also interacting with the Virtual Proving Ground team at ARL/ATC in Aberdeen where we currently start providing help with the data mining services for the T&E historical test data. In particular, we received recently from the VPG a MS Access database with a vehicle engineering and testing information and we analyzed it using some selected Web and data Mining technologies. First, we made the VPG data accessible over the Web using Active Server pages for ease of access across workstations and network, and for use with future distributed datamining applications. An SQL query tool was written to run simple queries on this data and analyze their results.Figure  SEQ Figure \* ARABIC 11: Decision tree for the VPG test vehicle, constructed by the Data Mining algorithm described in this section.In the second step, we decided to use a simple decision tree based classification algorithm, for our Data Mining experiments. We choose one of the attributes from the incident data table as our target class, dividing the values into two classes Major and Minor (Fig. 11). We used a small subset of attributes that we thought would affect the classification process namely the subsystem, course condition and course type for our analysis. See5 from RuleQuest Research Ltd, was selected as the datamining  tool for our data. Training data and test data were randomly selected with the help of the query tool. The tool was used to run the algorithm over the training data to generate a  decision tree and ruleset with an error rate of 3.8%. On the test cases the error rate was found to be 12%, which indicates the abnormalities in the training set selection and the decision tree generation. We are in the process of refining this to get a lower error rate and to generate a better decision tree. We also calculated the information ratio for each of the selected attributes and thus were able to select the course condition as the root node. Data Mining experiments as described above allow us to become familiar with the large datasets and the high performance computational challenges of T&E. In the longer run, we view VPG as a promising testbed for WebHLA based virtual prototyping environments as envisioned in Section 3.4.2.5 Realtime multiplayer gaming front-endsIn our Pragmatic Object Web approach, we integrate CORBA, Java, COM and WOM based distributed object technologies. We view CORBA and Java as most adequate for the middleware and backend, whereas COM as the leading candidate for interactive front-ends due to the Microsoft dominance on the desktop market. Of particular interest for the M&S community  seems to be the COM package called DirectX which offers multimedia API for developing powerful graphics, sound and network play applications, based on a consistent interface to devices across different hardware platforms. Though DirectX was primarily developed for PC gaming, it makes an excellent candidate for building simulations for the PC platform, thus bringing HLA closer to the PC environment. DirectX uses fast, low level libraries, which provide a very good control of multimedia hardware - a feature that can be used to build smooth and responsive simulations. Figure  SEQ Figure \* ARABIC 12: DirectX Framework: includes low level Foundation objects  such as DirectSound or  Direct3D, Media objects such as DirectPlay, DirectShow or DirectAnimation, and high level components such as NetMeeting for collaboration or ActiveMovie for video streaming.DirectX comes as a set of APIs (Fig. 12), each of which cater to a different aspects of an application being developed - DirectDraw for graphics, DirectSound for adding sound, DirectPlay for networked gaming etc. Of these, the DirectPlay API is of interest to us while discussing HLA/RTI, because of it's similarities with the RTIFigure  SEQ Figure \* ARABIC 13: Sample multiplayer games (Duel, Paper Planes) based on the DirectX / DirectPlay engine.A DirectPlay session is analogous to federation execution in HLA, with each application (federate) interacting via an abstract communication medium. Both DirectPlay and RTI provide interfaces and methods to manage sessions/federations. The DirectPlay player management functions are similar to the RTI object management functions for creating and destroying players within a session. The notable difference is that DirectPlay does not provide time synchronization features, and only a simplistic version of the data management. On the other hand, DirectPlay has certain novel features, which are not available in the RTI. A good example is the Lobby object which offers the functionality of a real world lobby where players can meet, interact and find the right partner to play against. Due to the design proximity, one could naturally create an HLA simulation using DirectX, while still using RTI as a communication medium. The simulation would thus conform to the HLA/RTI standards and perform well in the PC environment [5].As a pilot project in this direction, we are currently replacing the front-end of the DMSO Jager by  suitable gaming front-ends from the DirectX arsenal  (such as Duel, Space Donuts or Paper Planes, see Fig. 13). We are also replacing DMSO RTI 1.3 C++ code by our Object Web RTI. As a result, we will obtain a commodity (Java + CORBA + DirectX) version of Jager which will offer an interesting testbed platform for experiments with and integration of the  individual  WebHLA components. 3. Emergent WebHLA ApplicationsIn parallel with developing focused WebHLA components discussed in Chapter 2, we also start identifying some promising  WebHLA application domains and we initiate the design and prototyping activities. In this Chapter, we conclude the paper with a brief overview of our current activities in the following emergent WebHLA application areas: Distance Training, Resource Management for Metacomputing and/or Commodity Clusters, and Simulation Based Acquisition3.1 Distance TrainingWe are developing an extensive electronic training space for the FMS users and developers, using our Object Web RTI as a core technology framework for the interactive collaborative distance training. In the HLA lingo, each participant of a training session becomes a federate, and so are their trainers/mentors as well as the particular M&S systems or technology modules selected as the current training target. The training session itself becomes a federation which follows the HLA rules for joining, participating, sharing the information, managing assets such as time, space or objects etc. Figure  SEQ Figure \* ARABIC 14:  Sample screen from the FMS Training Space: Manual pages for the DMSO RTI 1,.3 C++  implementation, extracted from the Microsoft World documents published ion the DMSO Web site.Such training federations can be naturally made World-Wide distributed within our WebHLA and given real-time interactive Web /Commodity based interfaces via suitable JWORB protocols (HTTP, IIOP, DCE RPC etc.).Our current suite of FMS training materials in the development pipeline includes: a) HLA/RTI itself, see Fig. 14 (including Web / distributed access to DMSO HLA demos); b) our Object Web RTI implementation; c) SPEEDES (Synchronous Parallel Environment for Emulation and Discrete-Event Simulation) training, seeFig.15; d)  CMS training (Sect. 2.3) ; e) ModSAF training  (as required for CMS simulation), see Fig. 16. Figure 15: Sample screen from the FMS Training Space: Rollbackable operations in SPEEDES and the associated UML class diagram.We are also interacting with FMS CHSSI projects and we plan to include other systems under development such as E-ModSAF, IMPORT, TEMPO / Thema into our evolving training suite. Figure 16: Sample screen from the FMS Training Space:A list of 500+ ModSAF libraries with hyperlinks to the on-line documentation pages.3.2. Metacomomputing FMSCMS system  discussed in Sect. 2.3, when viewed as an HLA federation, decomposes naturally into the minefield and vehicle (tanks, contermines etc.) federates. Each of these federates might require high fidelity HPC simulation support (e.g. for large minefields of millions mines, or for the engineering level countermine simulation), whereas their interactions (vehicle motion, mine detonation) requires typically only a low-to-medium bandwith. Hence, the system admits a natural metacomputing implementation, with the individual federates simulated on the HPC facilities at the geographically distributed MSRCs and/or DCs, glued together and time-synchronized using the Object Web RTI discussed in Sect 2.1. We are currently in the planning stage of such a metacomputing FMS experiment, to be conducted using ARL (Maryland) and CEWES (Mississippi) MSRC and perhaps also NRaD / SPAWAR (California) and NVLD (Virginia)  facilities in ’99. Figure 17: Illustration of the interplay between  DMSO RTI (running on  Intranets), Parallel RTI (running on HPC facilities) and Commodity (such as Object Web) RTI. The latter is running in the Web / Internet Domain and connects geographically distributed  MSRCs and DCs.We are also participating in the new FMS project aimed at developing HPC RTI for Origin2000 that will provide useful HPC infrastructure for the metacomputing level FMS simulations. Fig. 17 illustrates the natural relative interplay between the DMSO RTI (most suitable for local networks), HPC RTI (to run on dedicated HPC systems) and Object Web RTI (useful for wide-area integration and real-time control via the Web or CORBA channels).3.3. Commodity Cluster ManagementThe emergent Pragmatic Object Web, defined as  a merger of CORBA, Java, COM and WOM, needs some uniform cohesive force that could combine various competing commodity standards towards a cooperative whole. At the core  middleware level, this is realized by our multi-protocol JWORB server, but we also need some uniform framework to integrate higher level services coming from various commodity frameworks. In WebHLA, we view HLA/RTI as a potential candidate for such a uniform high level service framework [8]. In fact, the WebHLA application domains discussed in this Chapter can be viewed as various attempts at extending RTI beyond the original M&S domain towards: collaborative training (Sect. 3.1) metacomputing  resource management (Sect. 3.2), commodity cluster management (this section), and finally all assets management  framework (next section).Indeed, as illustrated in Fig. 18, RTI can be viewed as a high level abstraction of a distributed operating system with machines / nodes represented as federates, clusters as federations, with time management responsible for job scheduling, ownership management linked with security and so on. We are currently starting a project with Sandia National Laboratories which will explore RTI as such a high level operating and control framework for the Sandia’s new growable commodity cluster technology called CPlant and developed within the DoE ASCI Defense Program.Figure 18: Distributed object based architecture of DMSO RTI – originally constructed for the M&S domain but naturally extensible for other distributed computing management services such as cluster, metacomputing or collaboration management discussed in the text.3.4. Simulation Based AcquisitionFig 19 illustrates our envisioned end product in the WebHLA realm – a distributed, Web / Commodity based, high performance and  HLA compliant Virtual Prototyping Environment for Simulation Based Acquisition with Object Web RTI based software bus, integrating a spectrum of M&S tools and modules, wrapped as commodity (CORBA or COM) components and accessible via interactive Web browser front-ends. Such environments, currently operated only by large industry such as Bowing, become affordable within the current technology convergence process as envisioned in Fig. 1 and quantified in our WebHLA integration programFigure 19: Overall architecture of a planned WebHLA based Virtual Prototyping Environment for Simulation Based Acquisition: Object Web RTI acts as a universal software bus, managing a spectrum of resources for simulation, clustering, collaboration, training, data mining, data warehousing etc.Indeed,  the challenge of SBA is to successfully integrate M&S, T&E, HPC, Metacomputing, Commodity software for Real-Time Multimedia front-ends and Database back-ends, Collaboration, Resource Management and so on – these capabilities represent individual WebHLA components discussed in the paper and being now prototyped in a coordinated, Pragmatic Object Web based development and integration framework.4. AcknowledgementsThis work is partially supported by the DoD High Performance Computing Modernization Program (HPCMP) ARL and CEWES  Major Shared Resource Centers (MSRCs) through the Forces Modeling and Simulation (FMS)  Programming Environment and Training  (PET) programs based on contracts DAHC94-96-C-0010 with Raytheon E-Systems at ARL and  DAHC94-96-C-0002 with Nichols Research Corporation at CEWES.We are also grateful to Bob Wasilausky, the FMS Computational Technology Area  (CTA) Lead  for his interest in our work and the overall guidance.Several Syracuse University students contributed to the development activities discussed in the paper. OMBuilder was started by Balaji Natarajan and continued by Sachin Shanbhag. Bruno Goveas constructed WebFlow interface to Jager. Sunil Jos,  Mahesh Rengaswamy and Abbasaheb Yadev  contributed to the FMS Training Space. Shrideep Pallickara contributed to the Data Mining  project and to the CORBA services for collaboration.5. ReferencesD. Bhatia, V. Burzevski, M. Camuseva, G. Fox, W. Furmanski and G. Premchandran, HYPERLINK "http://www.npac.syr.edu/projects/webspace/doc/cpande/feb97/feb97.ps"WebFlow - a visual programming paradigm for Web/Java based coarse grain distributed computing , June '97, in Concurrency: Practice and Experience.Robert Orfali and Dan Harkey, HYPERLINK "http://www.wiley.com/compbooks/catalog/24578-X.htm"Client/Server Programming with Java and CORBA , 2nd Edition, Wiley 1998.G. C. Fox, W. Furmanski, H. T. Ozdemir  and S. Pallickara, HYPERLINK "http://www.npac.syr.edu/users/shrideep/book"Building Distributed Systems for the Pragmatic Object Web, Wiley 1998 book in progress.G. C. Fox, W. Furmanski, B. Goveas, B. Natarajan and S. Shanbhag, HYPERLINK "authoring.doc"WebFlow based Visual Authoring Tools for HLA Applications, in Proceedings of ITEA’98, July 98, Aberdeen, MD.G. C. Fox, W. Furmanski, S. Nair and Z. Odcikin Ozdemir, HYPERLINK "directplay.doc"Microsoft DirectPlay meets DMSO RTI for Virtual Prototyping in HPC T&E Environments ,  in Proceeding of ITEA’98, July 98, Aberdeen, MD.G. C. Fox, W. Furmanski and H. T. Ozdemir, HYPERLINK "owrti.doc"Object Web (Java/CORBA) based RTI to support Metacomputing M&S , in Proceedings of ITEA’98, July 98, Aberdeen, MD.G. C. Fox, W. Furmanski and T. Pulikal, HYPERLINK "db.doc"Evaluating New Transparent Persistence Commodity Models: JDBC, CORBA PPS and OLEDB for HPC T&E Databases , in Proceedings of ITEA’98, July 98, Aberdeen, MD.G. C. Fox, W. Furmanski and H. T. Ozdemir,  HYPERLINK "http://osprey7.npac.syr.edu:1998/iwt98/misc/furm/doc/pdpta98/abstract.html" Java/CORBA based Real-Time Infrastructure to Integrate Event-Driven  Simulations, Collaboration and Distributed Object / Componentware Computing, in Proceedings of PDPTA’98, Las Vegas, July 98.AUTHOR’S BIOGRAPHIESGeoffrey C. Fox is Director of NPAC and Professor of Physics and Computer Science at Syracuse University. He pioneered the use of Caltech Hypercubes and then the HPF language in a broad range of HPC applications for science and engineering ranging from data parallel to event driven simulations. His recent activities include Web based Computing areas such as High Performance Java, High Performance Commodity Computing and collaborative tools for Web based education.Wojtek Furmanski is Chief Technologist of NPAC, Research Professor of Physics at Syracuse University and President of Translet, Inc. His recent activities include Web / Commodity based computing domains such as WebFlow, Pragmatic Object Web and collaborative multiuser systems for telemedicine, distance learning and project management. He developed the FMS PET roadmap and he leads the WebHLA project at NPAC.Subhash Nair is Graduate Student at the CE Department, Syracuse University and Graduate Research Assistant at NPAC. His recent activities include development of a collaborative telemedicine system and early prototyping in the area of DirectX / DirectPlay front-ends for the HLA simulations.Hasan T. Ozdemir is Graduate Student at the CIS Department, Syracuse University and Graduate Research Assistant at NPAC. His recent activities include the prototype development of  JWORB and Object Web RTI components of the WebHLA environment.Zeynep Odcikin Ozdemir is Graduate Student at the CIS Department, Syracuse University and Graduate Research Assistant at NPAC. Her recent activities include  parallel CMS  planning, research into commodity cluster technologies  and 3D Jager front-end development.Tom A. Pulikal is Graduate Student at the CE Department, Syracuse University and Graduate Research Assistant at the CASE Center. His recent activities include system management support for the WebHLA components, database development for the FMS Training Space and data mining algorithms for the Virtual Proving Ground.