Some Tactics, Techniques and Procedures for Simulating and Analyzing Net-centric Warfare Concepts – Managing the Network, and Working TogetherMonte PorterMichelle HermanJohn W HughesThomas ScovillLewis HarmonComputer Sciences Corporation4090 South Memorial ParkwayM/S 4-2-06Huntsville AL 35802 HYPERLINK "mailto:mporter@csc.com" mporter@csc.com,  HYPERLINK "mailto:mherman@csc.com" mherman@csc.com, jhughes23@csc.coml,  HYPERLINK "mailto:lharmon@csc.com" lharmon@csc.com, tscovill2@csc.com800-477-1140Key Words: MATREX, JANUS, C4I, Modeling and Simulation Techniques, C2, Net-Centric Warfare. Abstract:  Net centric” technologies are touted as providing a force multiplier to enable the US to fight and win the next war.  To look at future concepts, models and simulations are used to represent the fight and then represent the command and control messages and command and control decisions of that fight.  This is typically expensive in resources because command and control problems happen more often at scale, in a larger battle where interfaces conflict, different command levels don’t understand what each other are doing, and synchronizing actions is difficult.  Monitoring the network in real time, managing links between elements, and setting and adjusting reporting policy are key ideas that need to be implemented, measured and evaluated.War fighting simulations are an excellent venue in which to look at new C2 concepts – the same issues that will face future commanders and their staffs can be represented and prototype solutions can be tested.  However, data collection hooks must be imbedded in the simulation to ensure that the effort produces analyzable data.This paper will inform you of general lessons learned while implementing network monitoring strategies in both MATREX (HLA) and JANUS (DIS) applications. It will also make the case for a standard message set for future requirements (beyond ABCS) and will discuss some current simulation issues.1. BackgroundDistributed Interactive Simulation (DIS) and the High Level Architecture (HLA) have been used for years to examine force on force scenarios across a broad spectrum of simulations for a broad set of purposes.  Some exercises have included fielded C4I hardware and software focusing on simulation links to JVMF, USMTF, Link-16 and other tactical messages.  These simulations have strict requirements of format, update rates, and have large database requirements (e.g., the AFATDS database in the T&E domain). To handle new information requirements, these simulations typically rely on free text messages which are hard to replicate (for analysis) and vary from node to node.Other simulations have   involved C4I prototypes that depart from tactical messages to some extent in order to capture new information exchange requirements and messages not part of the fielded C4I systems.  These simulations typically run with surrogate data and do not connect to live C4I systems but are very valuable for trying new Information exchange ideas (e.g., MATREX).  Yet other simulations have let the C4I play happen “in the minds of the role players”.  These simulations typically use “what the simulation knows” to reveal tactical C4I data to role players who then use voice commands to interact.(e.g. JANUS).  While this last variety of simulations are the most flexible of the three simulation types, it is hard to derive real C4I lessons learned – and analysts really can’t think through the process. Each of these simulations are used in different domains to look at future concepts, represent the future fight and represent the command and control messages and decisions of that fight.  2.  Integration required.  The Army, in an effort to make the most of the various investments in M&S, has launched the cross command collaborative environment (3CE). In this environment the Training and Doctrine Command (TRADOC),  the Research, Development and Engineering Command (RDECOM), and the Army Test and Evaluation Center (ATEC) have agreed to support, develop and use a cross command collaborative approach to sharing modeling, simulation and instrumentation (MS&I) capabilities (algorithms, authoritative representations, collection, analysis, review, etc.); tools (scenario generation, terrain generation, AAR, collaborative environment, etc.); services (network support, federation design and implementation, etc.); and interfaces (emulators, stimulators, C4I, HWIL, SWIL, instrumentation, etc.)1.This requires a vision of how to thread these capabilities together to form a cohesive whole.  Some of the early spirals for experimentation involve small unit vignettes that use tactical hardware and radios to experiment.  Because command and control problems happen more often at scale, there needs to be an effort to bring the future Information Exchange Requirements (IER) messages and new TTP into the fold to measure against the small vignettes to make sure we are considering the requirements at all levels and especially at load.The System of Systems Common Operating Environment (SOSCOE) is not mature enough to fully integrate into our simulations today nor are our simulation capabilities (OOS) mature enough to evaluate emerging concepts in all areas.  Recognizing the need for something that works now, we have turned to Situational Awareness servers, custom messages and “work arounds” to meet the ever increasing need for analysis.   This has led to the development of different message elements that do not yet connect.  Additionally, we need message standards and methods to provide for the monitoring and management of the network in real time, managing links between elements, and setting and adjusting reporting policies within the simulations.  With network management mechanisms in place, simulations can be a catalyst in implementing, measuring and evaluating how we make the network smart.3. Standardization.Lack of standardization between the various simulations and domains in the representation of information requirements (message content) limits the capability of domains to integrate seamlessly with each other thereby frustrating the efforts of planners and developers alike. The various domains do have different needs.  Therefore, we need to develop a collaborative standard instead of a one-size-fits-all.  The balance of this paper will describe the challenges of   naming/identification mismatches, message content mismatches, differences in level of ISR support, the separation of simulation cycle and C4I cycle and managing bandwidth and measuring load.3.1 Name/Identification mismatches.3.1.1 Identification.  One of the challenges is threading the identity of system platforms through the collaborative environment. Figure 3-1 shows a table of different identification references for an Infantry Combat Vehicle (ICV), a key player in future combat.a DIS Enumeration1-1-225-2-101-1-0MIL-STD-2525b Hierarchy1.X.3.1.1.2.2.6MC2 Role<Role RoleName="MC2 ICV" Description=" ICV" RoleType="632" ImageIndex="7"/>HLA Number423 (MATREX FOM)HLA Enumerated Data Type  FCS_FIFV (MATREX FOM)MC2 Icon Map<Image Role="0632" Relation="1" Bitmap="MC2 ICV.bmp"/>LIN/SRCNot yet establishedOTB .rdrvehicle_US_MIFV_FD1Figure 3-1 Identification Conventions3.1.1.1 The DIS enumeration for this and other future vehicles is not the same at every implemented site because there has not been a standard enumeration published in SISO-REF-2005 2.  These enumerations then have to be coordinated and disseminated for each event.  The work around is to map everything to a set of generic entities but this reduces the value of the data collected.3.1.1.2 The MIL-STD-2525b enumerations are part of the Military Simulation Definition Language.  The Simulation initialization file contains these values which must now be mapped for a DIS or HLA or C2 system to know what they mean.  The MIL-STD 2525b does not go down to the exact entity type; ergo there is some ambiguity here.3.1.1.3 The Mobile Command and Control (MC2 – used in FCS experimentation at Ft Knox) needs to map this vehicle to a role number and a role name for inclusion in the XML data files that support the C2 system.  It also needs an image mapping to ensure the right icon is presented on the map. 3.1.1.4 The HLA FOM number and enumerated data type must be cross referenced in HLA.  This differs from FOM to FOM.3.1.1.5 The SRC/LIN numbers are not available for this system but are required when mapping usage rates, logistics, and other planning factors in many of the live C2 devices.  A “ghost set” of SRC’s /LIN’s would allow different application users to standardize and interoperate. 3.1.2 Naming conventions. Figure 3-2 shows a table of different naming schemes for platforms.  3.1.2.1 HLA. The federate handle is one of the most worrisome in experimental analysis.  In too many instances, the FOM developers use the federate handle to name the federate for reference and data collection /analysis purposes.  In a perfect world there would be no problem but simulations hooked to large distributed exercises do not always join the federation in the same sequence each time.  Additionally one or more simulations are likely to join/resign the federation or crash.  This results in different federate handles given to the different federates at run time and eliminates the possibility of traceability and repeatability.  Another name needs to be given to each federate or platform that provides a clean “finger print” for updates and interactions.FederateHandle(this time) 2345DIS Site Host Entity 135-6-2Unit Reference Number (URN) 7110213Bumper Number/Tail Number/Hull Number U11A32/T5333/CSV017Bumper Number B1111H3010 (MATREX)UUID 76533005640881134488793714002Unit IDHQ31/HHC/1CAB/1 BCTCall-sign  “Skippy”Figure 3-2 Naming Schemes3.1.2.2 DIS Site-Host-Entity.  The site-host-entity schemes for naming DIS simulations, when used with unique bumper numbers, have allowed success in data collection and analysis.  However, in DIS/HLA implementations, the host in “DIS speak” becomes the bridge – traceability is lost.  Also, as we move to server or service modes of implementation, the server typically echoes the s-h-e of the platform it is providing the service for and there is no “finger print” to identify which server the message actually came from.  Therefore a unique finger-print identifier is required for each platform and computer.3.1.2.3 Unit Reference Number (URN).  The unit reference number is the “pointer” for many fielded systems and mappings such as the URN “7110213” to Unit ID “Security HQ31/HHC/1 CAB/ 1 BCT” are available for fielded organizations.  However, the FCS force is not fielded and no such standard database exists.   It must be noted that the O&O for the FCS Brigade Combat Team (formerly Unit of Action) has been quite stable since March 2003.  It stands to reason that a “ghost TOE/URN” mapping could be developed to support simulation of the FCS force and integration of simulator constituents.  This would also allow current fielded systems to play in some of the larger force on force experiments. 3.1.2.4 Bumper Number.  In some DIS implementations there is a limit of 10 characters in the label field of the DIS Entity State.  Therefore, implementers have developed naming schemes that are man readable and take up only the number of spaces available and provide data on unit ID, tail number or Hull number.  Figure 3-2 shows two examples – one with an OTB naming and the other with a MATREX implementation which allows for unit affiliations to be indicated up to Corps level.  3.1.2.5 UUID.  MSDL specifications show a UUID as the unique identifier for a Blue platform.  If all simulations in a federation are not “initialize-able” through MSDL then questions arise on who assigns UUID’s to non-initialized federates to ensure that the numbers are unique.3.1.2.6 Call Sign.  In some instances, the call-sign is used (e.g. TACO-1).  These are typically used liberally by Air Force and some Navy simulations.  There needs to be a place in the data elements to include the call-sign. 3.1.3 Overcoming ID/Naming mismatches.  To overcome the ID/Name mismatches, there needs to be a standard man-readable bumper number / tail number / hull number scheme to fill the label field for DIS traffic.  Planners need to plan exercises using URN, Unit ID, Bumper Number, Call-sign and UUID mappings to allow all to know how to map the naming convention internally. To improve integration as we move forward we should consider modifying MSDL, FOM and other interfaces to include these data elements native in the structure.3.2 Reporting Policies.  Once we understand what to call and name our Blue vehicles, there must be a standard set of reporting policies that govern Blue SA reporting.  These policies should exist in message form so they can be transmitted from the C4I systems to the simulations for execution.  This is the first key to separating the simulation cycle for the C4I cycle.  To put it in war fighter terms, we need just-in-time, just- right-quantity/quality and to-the-right-location awareness of Blue that doesn’t break the network. 3.2.1 In many implementations, Blue reporting follows some heartbeat that is standard for all entities, moving or otherwise.  This results in updates that add to bandwidth use but do not provide new information to the war fighter.  To tackle this problem in JANUS we went to event based reporting for Blue.  This provides a report at STARTEX, a report when Blue changes state, (moving to stop, stop to moving) and a threshold based update when the target moves.  This put Blue SA in the net when it is needed – not just because we can.  One downfall of this approach is that we can lose contact with our Blue systems.  To overcome this shortfall, a “pull” message is available to get updates when the C4I system needs to know (after a set period of time or when Blue is about to shoot into an old SA area).  This SA on demand is available as a whole dump (handles the case where a C2 system has just checked in and needs data, or vehicle by vehicle.3.2.2 Other Blue policies that need to be developed include those that manage differing heartbeats based on the domain of the vehicle as well as differing heartbeats for non-moving vs. moving vehicles.  3.2.3 Key simulations messages that have yet to be standardized include aggregation, push, pull rules.  These need to be spelled out as a reference standard.  Once standards are given, simulations need to be able to implement policies based on message.3.2.4 Network Organization.  There are currently no standard messages that provide for temporary teams, to provide unambiguous relationships and expedite execution.  In current implementations, the live C4I systems rely on free text messages to establish these relationships.  Use of free text message hides the need for new messages – doesn’t 	ensure network changes get made in a timely manner.3.2.5 Once these Blue SA policies are implemented, then simulations/C4I systems can be measured for compliance at run time and realistic experimentation with management of the network can be achieved. Simulation support to ISR.  3.3.1 Another area where there is a capability cap in our simulations is the support of ISR data feeds into the C4I system. Many of our simulations are able to model the sensor on a given platform but are unable to model the person viewing the sensor.  In some instances, our representations assume that the sensor will provide “heart beat like” red threat data as a rule – this is probably not achievable in the real world.  What is more probable is that the person viewing the sensor output will be able to send changes as they are sensed.  3.3.2 Red Situational Awareness.  Figure 3-3 shows a table of naming schemes for a BM 21 Multiple Launch Rocket System. Naming instances of threat systems are more important to correlate because we do not get push data from these platforms – we only receive perceived data.	 SHAPE  \* MERGEFORMAT DIS Enumeration at ID1-1-222-4-13-0DIS Enumeration at Recognize1-1-222-4-0-0MIL-STD-2525b Hierarchy1.X.3.2.1.3.2MC2 Role465HLA Number17(MATREX FOM)HLA Enumerated Data Type  BM_21 (MATREX FOM)MC2MRL SP Wheeled OPOTB .rdrvehicle_USSR_BM21Figure 3-3 Threat EnumerationsJust as with Blue SA, the simulation planner must thread the data through a set of type requirements.    The threat data types typically have clear enumerations in DIS – therefore the threat integration is less problematic.  However, there is a second problem with threat in that there are different levels of perception.  At the ID level of acquisition, the mapping is straight forward but as you move down the scale to recognition and classification, some capability gaps occur.  3.3.3 Figure 3-4 shows the hierarchy of naming for equivalents of classify and recognize in the MSDL specification. Figure 3-5 show a similar table of target types used for targeting while table 3-6 shows the MATREX FOM classify and recognize types for the same targets.   One of the MATREX lessons learned was that we need to modify the FOM types to more closely correlate to the targeting types.  This is true across the board for simulations that provide sensors for targeting.MIL-STD 2525b  Single Rocket Launcher  Light  Med  HeavyMultiple Rocket Launcher   Light  Med  HeavyHowitzer  Light   Light Self-propelled  Medium Self-propelled   Heavy   Heavy Self-propelledFigure  3-4 MSDL Specification– Selected TargetsTargeting TypesArty Mortar   Hvy SP   Hvy    Light SP   Light    Med SP   Med   Towed   Very Hvy   Unknown    Unknown  Missile Rkt/Msl   Hvy   Anti-Pers   Light   AntiTank   Med   Position Area    Unknown  Figure 3-5 Targeting Types– Selected TargetsMATREX FOMMortar   Mortar  MRL   RocketArtillery Artillery   Towed Artillery   SP Artillery  Figure 3-6 MATREX FOM – Selected Targets3.3.4 Developing the target in simulation.  It is not enough that our simulations report detection, recognition, and ID of a target; they need to provide more information about the target if it is able so that an informed targeting decision can be made. 3.3.4.1 Activities that support fusion should happen in the simulation at the lowest level possible.  If two elements of the same platoon see the same target – they should compare notes and only send one report above their leader’s level.  This is not currently implemented in many simulations and is an area where improvement is much needed.  -When a sensor operator is continually in contact and monitoring the target and knows the report is an update it should be marked as such.  -If the sensor operator has the ability to determine speed, then target speed and velocity vectors should be included, otherwise the report should not give speed.3.3.4.2 With some additional heuristics / rules, simulations could begin to provide better target data.  The sensor operator could develop the target before sending info.   -is target part of larger element?   -is target at least recognized? (this might allow the sensing element to only send actionable data above platoon level.)   -is target in urban, wooded or open terrain? (In JANUS, the sensor is able to determine if the target is in urban, wooded or open terrain.  This affects targeting and is included in the sensor message in the current implementation.3.3.5 Target Update Policies.  In addition to improving the quality of the target sensing, update rate policy messages must be developed to manage the ISR reporting.  Simulations must be able to access and respond to policy messages that route data quickly to the right decision maker thereby allowing the C4I cell to actively manage bandwidth demand.  3.3.5.1 Current implementations typically control sensing and update rates as inputs to the simulation before STARTEX.  This limits the user’s capability to manage the bandwidth.  In order for a policy to be changeable in real time, by sector, by target type, or other considerations, the policy needs to be defined as a message or a policy object. An example of this is the ISR reporting policy in the MATREX FOM.  When implemented in the simulation, this policy allows changes of an update rate to support a single engagement.  An example of this might be an engagement versus a moving target.  If a specified update rate can be given to the targeting sensor, update to the munitions can be affected on a case by case basis.3.3.5.2 In instances where a temporary teaming has been established for an engagement, the policy must allow directing of target data to a selected engagement team and releasing the ISR data flow/tasking when the mission is complete.3.3.5.3 Once policy messages are standardized in reference message sets, simulations can be changed to be able to receive and respond to ISR policy messages.  Current implementations of the ISR policy exist only in the MATREX C3Grid.  If a reference policy existed and was implemented, DIS and other elements could play more seamlessly.3.3.6 Process Control and Data Collection for ISR implementation.  ISR policies in force at run time and changes made during the battle must be monitored for compliance and logged to a file along with the SALUTE reports.  Fusion points should be annotated along with the capabilities/limitations of the simulations with respect to target development.  As different policies are presented to the federation, the reference messages described above would allow the experimenter to monitor techniques used to manage the flow of red SA / ISR and measure their impact on frequency of reports, such as settings for time/distance filters and settings for distribution of reports.3.4 Simulation Support to Effects.  Given that Blue and Red SA are in place, the last area of concern is delivery of effects.  Figure 3-7 shows a WDSL representation of the effects guidance as planned for implementation in MSDL and MATREX FOM 2.0.  This XML schema provides the elements of the High Payoff Target List, the Target Selection Standards and the Attack Guidance Matrix described in TRADOC’s Integrated Process 3 (IP-3).  This message/policy/interaction is changeable in real time and allows the guidance approver the ability to update the network with new guidances and priorities as the battle progresses.Figure 3-7 Effects GuidanceLastly, there needs to be a common fire mission.  Figure 3-8 shows a flow of a fire mission with the appropriate responses.  These messages are similar in many ways but are different in that one will use the URN of the sender and receiver, another will use the bumper number, yet another will use the UUID.  These messages need to be brought in line, expanded to include the collaborative requirements, and made available to the community for integration.4.0 Summary.  Lack of standardization between the various simulations and domains in the representation of information requirements (message content) limits the capability of domains to integrate seamlessly with each other thereby frustrating the efforts of planners and developers alike. A collaborative standard for representing C4ISR messages needs to be developed in order to realize the potential of 3CE. versus a one-size-fits-all standard needs to be developed.  These standards will be instrumental in meeting the challenges of naming/identification mismatches, message content mismatches, differences in level of ISR support, the separation of simulation cycle and C4I cycle and managing bandwidth and measuring load.6.  References[1] TRADOC Information Paper 6 July 2005Subject:  Army Modeling and Simulation (M&S) Cross Command Collaboration Effort (3CE) [2] SISO-REF-2005 Enumeration and Bit Encoded Values for use with Protocols for Distributed Interactive Simulation Applications 25 March 2005[3]  MATREX FOM 1.0 31 Dec 2005. [4] Specifications for Military Scenario Definition Language (MSDL) 6 April 2005[5] Porter Monte L. SIW-06S-021 Some Tactics, Techniques and Procedures for Simulating and Analyzing Net-centric Warfare Concepts – Representing Airspace Management Authors BiographiesMonte Porter has over 12 years experience in integration simulations to support C4I experimentation and is the primary developer of the Intelligent Exercise Monitor at CSC’s Modeling and Simulation Center of Excellence.Michelle Herman is a certified M&S professional and lead simulation engineer at CSC’s Modeling and Simulation Center of Excellence.John Hughes is the coordinating lead for MATREXNEC2 architecture at CSC’s Modeling and Simulation Center of Excellence.Lewis Harmon is a lead scientist at CSC’s Modeling and Simulation Center of Excellence and lead developer of the MATREX NEC2 Effects Engine and has been developing C4I simulation solutions for 20 years.Tom Scovill is a senior operations research analyst at CSC’s Modeling and Simulation Center of Excellence with over 20 years field artillery experience.PAGE  