Federation Composition Process and Tool Support in EUCLID RTP 11.13Marco BrasséTNO Physics and Electronics Laboratory (TNO-FEL)P.O. Box 968642509 JG The Hague, The Netherlands HYPERLINK "mailto:brasse@fel.tno.nl" brasse@fel.tno.nl Ole Martin MevassvikTom SkoglundNorwegian Defence Research Establishment (FFI)P.O. Box 25 N-2027 Kjeller, Norway HYPERLINK "mailto:ole-martin.mevassvik@ffi.no" ole-martin.mevassvik@ffi.no,  HYPERLINK "mailto:tom.skoglund@ffi.no" tom.skoglund@ffi.no Keywords:EUCLID RTP 11.13, SEDEP, Federation Composition, HLA, Tool Support.ABSTRACT:  EUCLID RTP11.13 is a major European initiative to promote the use of Synthetic Environments (SEs). The aim of the project is to overcome the obstacles that prevent SEs from being exploited in Europe. This is achieved by developing and demonstrating a process, together with an integrated set of prototype tools.This paper describes the concept of Federation Composition, which is a part of the Synthetic Environment Development and Exploitation Process (SEDEP) developed in EUCLID RTP 11.13. Furthermore, it describes the design of the Federation Composition Tool (FCT). The FCT assists the SE developer in specifying the federation design based on the federation specification (federation conceptual model, scenario and requirements), which is generated by other EUCLID RTP 11.13 tools. The FCT contains a set of integrated capabilities for both the selection of simulation assets and the composition of these assets into a working HLA federation. To realize this, innovative approaches in composing HLA federations are proposed, both in a process-oriented and tool-oriented manner. The approach for searching simulation assets in the EUCLID RTP11.13 Repository is integrated with the EUCLID RTP 11.13 asset characterization methodology. This allows effective search for specific simulation assets, and subsequent evaluation against specific requirements and project constraints.The FCT, and other EUCLID RTP 11.13 tools, support a hierarchical component based approach for HLA federations. The main concept is that a federation can be regarded as a (complex) federate in a multi-level federation (sometimes called a hyper-federation). This approach improves the level of reuse, since existing federates also can be used as functional components inside other complex federates. In this way, the FCT supports M&S for Simulation Based Design (SBD) activities in which engineering level models from different disciplines can be integrated more efficiently. The contribution of EUCLID RTP11.13 is an innovative approach towards the support of the federation composition process, in which multiple tool capabilities are identified and demonstrated. The FCT fits into the EUCLID RTP 11.13 SE Development Environment (SEDE), which is analogous to an Integrated Development Environment (IDE) used for software development.Introduction‘EUCLID’ is an acronym for European Co-operation for the Long-term In Defense. It provides a funding mechanism for European industry to collaborate on common defense problems, and is managed by the Western European Armaments Group (WEAG) Research Cell. The aim of the research and technology project RTP 11.13 is ‘to overcome the obstacles that prevent SEs being exploited in Europe by developing a process and an integrated set of prototype tools, which will reduce the cost and timescale of specifying, creating and utilising SEs for collective training, mission rehearsal and simulation based acquisition’ [1]. The focus in this paper is on Federation Composition, which is a subset of the SE development process  (SEDEP) (see  REF _Ref44756028 \h  \* MERGEFORMAT Figure 1). The subset conforms to the activities “Design Federation” and “Implement Federation” in SEDEP step 3 and 4, respectively. Federation Composition aims at defining the architecture of the SE, including the selection of federates and assignment of their responsibility within the SE. A description of the SEDEP is presented in [2]. The HLA Federation Development and Execution Process (FEDEP) model was taken as the starting point of the SEDEP. The SEDEP has added two additional process steps (see  REF _Ref44756028 \h Figure 1) and provides integrated support with the EUCLID RTP 11.13 Repository [2,8]. The repository provides the backbone infrastructure to exchange the data that is produced in the different steps. It is interesting to note that various concepts of the SEDEP are included in the latest draft versions of the IEEE 1516 Recommended Practice Guide (under development).Figure  SEQ Figure \* ARABIC 1 SE Development and Exploitation Process (SEDEP)This paper is organised as follows. Section 2 introduces the terminology used throughout the paper. Section 3 describe the Federation Composition Process in detail and put it into the context of the SEDEP. Sections 4 and 5 are dedicated to the tools supporting the process, and in particular the Federation Composition Tool, which is developed as a part of the project. Bridging federations is an important part of the concept and this topic is discussed in Section 6. Concluding remarks are presented in Section 7.Federation Composition nomenclatureThe SEDEP [2] adopts the notion of a nested HLA compliant federation structure. Such an hierarchical structure includes multiple levels of federations and was first pioneered and described in [3].The HLA standard states that a federation consists of a set of participating members (federates), connected by a single distributed communication backbone, the RTI. In contrast, EUCLID RTP 11.13, and SEDEP, assume that federates internally may be composed of a set of federates, and as such, constitute a federation. This type of federation is called a ‘multi-level federation’ or ‘hyper federation’. The internal structure of a federate may resemble a set of federates, which again have their own RTI and FOM. A Federation Bridge represents the architectural element that connects this set of federates to the (parent) federation it belongs to. EUCLID RTP 11.13 was one of the first major European projects to continue the study on this concept. Some important terms used in the context of Federation Composition are described in the table below.FederationThe top-level (HLA) federationComplex FederateA federate whose internal structure consists of a set of federates that is federated in the same architectural manner as the federation.Simple FederateA federate whose internal structure is considered a black-box (as opposed to a complex federate).Federation BridgeAn architectural run-time element that connects two different federations. Federation ArchitectureThe hierarchical structure of the federation, containing federates and their required capabilities. Federation/ System SpecificationInput for the composition process, i.e., the Federation Scenario, the Federation Conceptual Model, System Constraints, and Evaluation Data Requirements.Federation AgreementsFederation wide descriptions needed for implementation and execution planning not covered by the FOM.Table  SEQ Table \* ARABIC 1 Federation Composition termsFederation Composition ProcessThe Federation Composition Process lies in the centre of the SEDEP, transforming the System Specification into an SE architecture. This architecture identifies the assets comprising the SE and their responsibilities. The Federation Composition Process is a set of related activities in SEDEP step 3: “Design Federation” and step 4 : “Implement Federation” (see  REF _Ref45532445 Figure 2). Development cost and time have been identified as some of the main obstacles preventing the use of SEs. The SEDEP tries to overcome this by focusing on asset reuse. This may include previous designs, federations, federates, databases, and other types of assets. The ongoing work on federation composition focuses on simulation asset reuse and the federation architecture design. Furthermore, we merely consider simulation assets that are already packaged as federates.In order to facilitate asset reuse, four main drivers have been identified and are under development.A distributed repository lies at heart of the SEDEP, allowing data to flow between activities and to document reusable SE assets.An asset characterization methodology ensures a common standard of asset descriptions.The design of a component based architecture, in order to increase the reusability of assets.A SEDEP wide integrated tool set supporting SE development.Federation Composition is a set of interrelated activities, and may be viewed as a SEDEP overlay  (see [2]). This overlay is covering a part of the tasks of the Federation Designer. The input to the activities is the federation system specification consisting of:Federation Scenario,Federation Conceptual Model, andFederation System Requirements.Figure  SEQ Figure \* ARABIC 2 Federation Composition Process overview REF _Ref45532445 Figure 2 shows the overall process consisting of the following activities:Design Federation Components.Establish Federation Agreements.Develop Federation Object Model (FOM).The output of federation composition is:the Federation Design Specification (documenting the federation architecture), the identification of federation bridges and the selection of federates (i.e., assets);the FOM, being the main interface contract between the federates;the Federation Agreements, documenting interoperability decisions not covered by the FOM.The main purpose of the federation composition is to define the global architecture of the federation (system level), including the federate composition, their functional allocation and the interfaces between the federation components. Furthermore, it provides the foundation for doing detailed federate and simulation component design. This includes the allocation of the federation system specification to each component, and documentation of federation wide design decisions (such as the use of time services). This information is produced in order to ensure that the required information needed to implement the federation is traceable. Such documentation may typically include modification descriptions of assets to be used, or instructions on how to build new components, if applicable. Note that neither actual implementation of new federates nor modification of existing ones is part of the federation composition process.The federation system specification serves as the main input for the federation composition. It contains the conceptual model, which is SE implementation independent, and describes the entities to be represented in the SE. Furthermore, it contains the constraints requirements and the data requirements, possibly linked to conceptual model elements. Together, they form the overall picture of the required SE.The EUCLID RTP 11.13 conceptual model description is based on UML [4, 10]. It is constrained by two stereotypes: the notion of ‘SE Element’ and ‘SE Relation’. The former models  the entities (objects) required  in the federation, and the latter models the data to be exchanged among the SE elements (see [4] for a detailed presentation on conceptual modeling). The SE elements add semantics to the conceptual model, and facilitate automated tool support. The SE relations are to be viewed as high level interface requirements, and may serve as a basis for the FOM (and SOM) development.An important aspect of federation composition is the documentation of federation agreements. This is necessary to establish a fully consistent, interoperable distributed SE. Federation agreements are precise descriptions required for implementation and execution planning, which are not primarily covered by the FOM. These descriptions may include:Technical agreements, e.g.:federation initialisation mechanism;federation management procedure;database/co-ordinate system specs;data collection agreements;algorithms for ‘fair fight’ conditions;many other technical agreements.Resource agreements, e.g.:availability of resources (e.g., mock-ups).sharing of (restricted) data.Project specific agreements, e.g.:commercial licenses; demonstration agreements.The concept of ‘Complex Federates’ (see  REF _Ref45608058 \h Table 1) is an important feature of the hierarchically structured federation architecture employed by EUCLID RTP 11.13  REF _Ref45105653 \h  \* MERGEFORMAT Figure 3 shows for instance a two-level federation in which the F16 federate is composed of its functional building blocks. There are several reasons for exploiting such a construct, described below.Figure  SEQ Figure \* ARABIC 3 Complex Federate exampleCustomisation: traditional federates are monolithic in scope. They can be tailored through the use of input files. However, the selection of (internal) models is fixed. In contrast, a complex federate can be tailored to user requirements through assembly of specific compatible simulation models.Reuse: the functional pieces within a federate are often intertwined in such a way that it is difficult to extract and reuse any particular model. Complex federates promote a more modular approach by describing the interfaces between the various (internal) models explicit.Security: distinction between a set of components versus a set of federates enables different treatment of internal and external communications. Different physical networks can be used to separate the inter-federate data flow from the external data flow (between the federates). This addresses security issues since the data flow between components cannot be observed by other federates.Performance: component based architectures allow for the separation of inter-federate communications and intra-federate communications. This allows for the use of different network technologies in a single (hierarchical) federation, depending on the communication needs of the different component based federates.Other advantages includes the encapsulation of federate complexity and improved interoperability in general. However, one should be careful when introducing bridges; it should be ensured that they result from a ‘natural’ decomposition of the federation regarding the information flow between the components. Otherwise the bridge itself might become a performance bottleneck [5].Federation Composition Tool (FCT) OverviewThe Federation Composition Tool (FCT) is an R&D software tool that is being developed in EUCLID RTP 11.13 to investigate the requirements for tool support in the area of federation composition (SEDEP step 3). The FCT assists the SE developer in creating a Federation Design, based on the output of SEDEP Step 2 and Asset Descriptions in the EUCLID RTP 11.13 Repository. The FCT contains a set of integrated capabilities for both the selection of simulation assets, and the composition of these assets into a hierarchically structured HLA federation. In particular, the top-level requirements for the FCT are used to:specify the complete Federation Design;trace federate capabilities to requirements;search and assess simulation assets;document asset modifications and agreements. The FCT is a ‘native’ EUCLID RTP 11.13 tool with a certain intrinsic level of integration with other native EUCLID RTP 11.13 and COTS tools, such as: FC&I Editor (native EUCLID tool , see [11]); VTC Interdaptor TM (COTS Federation Bridge);IEEE 1516 FOM editor (e.g., Visual OMT);Acrobat Reader (for Federation Agreements);Rational Rose (for Conceptual Model editing). The FCT prototype implements the following capabilities:presentation and allocation of Federation System Specification (through GUI);support for iterative federation design, bookkeeping of design decisions and requirements tracing;specification of (hierarchical) federation designs;search templates to search for simulation assets;search and retrieval of simulation asset descriptions;consistency checking (and link with FOM editors);documentation of required asset modifications;documentation of federation agreements;creation of Federation Bridges to implement complex federates and federation gateways.Concept of ExecutionEUCLID RTP 11.13 is developing an Integrated Development Environment for SEs (SEDE) [6]. A distributed repository serves as the glue between the tools. Furthermore, an SE Management tool (SEMT) controls the data flow between them, and guides the user through the SEDEP process, step by step.  REF _Ref44756791 \h  \* MERGEFORMAT Figure 4 shows the FCT within this context. The FCT is connected to the EUCLID Repository and launched from the SE Management Tool SEMT [7]. Upon being launched, the FCT retrieves its input from the EUCLID Repository [8] as specified by the SEMT. This input is produced by the other tools associated with the SEMT.The FCT input is the federation system specification (see  REF _Ref45608058 \h Table 1). The output is a Federation Design Specification, which includes FOM(s), federation agreements, documentation of required modifications to existing federates, and Federation Bridges.Figure  SEQ Figure \* ARABIC 4 Federation Composition Tool contextAll the information that flows between native EUCLID RTP 11.13 tools is based on Repository Entries [8]. An entry is typically an XML document with some meta-data. The Federation Design Specification is such a document, which adheres to a specifically developed Federation Design Document Type Definition (DTD).FCT Process SupportThe FCT supports the SE developer in specifying a Federation Design. In general, this involves a set of related design activities whose complexity depends on the problem space, the design methodology, and the developer’s experience. The FCT supports various activities but it does not impose a strict sequence. As a result, it enables a highly iterative composition approach.  Figure  SEQ Figure \* ARABIC 5 Relations in asset assessmentThe key challenge of the SE developer is to create a Federation with Federates that are implemented by re-using Simulation Assets. Found Assets should comply with an identified allocated part of Federation System Specification (see  REF _Ref44772901 \h Figure 5).Basically, federation composition is a complex iterative process. The FCT supports the user in keeping track of all design decisions and the documentation of essential design issues. Tool support becomes even more required when developing complex multi-level federations. The federation composition process in EUCLID RTP 11.13 consists of typical steps supported by the FCT. These steps are summarized below in a top-down design approach.First, the federation system specification (from SEDEP Step 2) is processed and presented to the user, comprising:Federation Scenario;Federation Conceptual Model, andSystem Requirements.The user develops a federation architecture; FCT continually allows interactive updates and refinements to this architecture. The user decides on the number of federates, and the type of federates (either simple or complex).User details the (required) federate capabilities; the FCT maintains information links between federate capabilities and elements of the federation system specification. User formulates repository queries to search for suitable simulation assets (i.e., descriptions of suitable federate implementations);User selects a simulation asset description that is retrieved by the FCT from the repository. This asset is supposed to be a software/hardware component that can be used to implement a specific federate identified in the federation architecture. User is supported by the FCT in the assessment of the selected (candidate) simulation asset. The asset may not fully match the intended federate capabilities, or it may be difficult to integrate the asset because of technical incompatibilities with the federation. User documents design decisions. The FCT supports the documentation of:SOM data and required RTI services;FOM (through COTS tools);Modifications to Simulation Assets;Federation Agreements.The FCT does not enforce a specific format for agreements. Agreements are uniquely identified and allocated to federates. For each federate, it is stated whether the federate is compliant to the assigned agreements, or not. In this way, the FCT maintains an agreement matrix between agreements and federates (or simulation assets).Many federation composition problems encountered boil down to FOM agility problems. For example, the asset that implements the federate may have a SOM that is incompatible with the FOM. In some cases, the user might introduce a Federation Bridge to cope with some interoperability problems. On the other hand, introducing such an asset generally has an impact on other parts of the federation design. An important requirement on the FCT, from the process point of view, is to support both top-down and bottom-up federation composition. ‘Bottom-up’ means that the user is allowed to build the federation architecture based on the simulation asset descriptions found in the repository. This may be done with or without a federation system specification present. In addition, the user should be able to mix top-down and bottom-up design strategies while iterating through the composition steps. This is needed in order to support SE projects that require the use of a specific system engineering methodology and compatible tools. REF _Ref45611260 \h Figure 6 shows the GUI tabs of the FCT, each supporting a main step of the Federation Composition Process:Federation Design;Federate Details;Search for Assets;Assessment of Assets;Federation Agreements.The next sub-sections describe how some of these steps are supported within the FCT. In fact, the various GUI tabs represent software requirements for tool support in the area of federation composition support in SEDEP.Federation Design Tab REF _Ref45611260 \h Figure 6 shows an example of the Federation Design tab, and it also illustrates the FCT GUI concept in general. The GUI is organized as follows. At the bottom we have an output panel where messages are shown to the user. This panel, the process tabs, and the menu, are always present. The items in the tree on the left reflect the information needed when working in the currently selected process step. The panel to the right shows the content of the selected node(s) in the tree, which is context sensitive.In the Federation Design phase, the user reviews the federation system specification and creates the federation architecture. To review the input, the user selects the appropriate node(s) in the tree, and a HTML representation will be shown in the panel to the right. For a conceptual model entity, a UML like diagram showing inheritance and aggregations will be displayed. In the example ( REF _Ref45611260 \h Figure 6), we also see that the user has created a federation consisting of three federates; one of them being a complex federate. The complex federate contains a bridge specification and a new federation describing its components. The new federation has its own FOM and two federates (e.g., Visual and Dynamics components). Components may be decomposed again, but it may be unpractical to have too many levels, although theoretically this component-based structure has no limits with respect to the number of hierarchical levels. FOM development and bridge design are done in separate COTS tools. The COTS tools to be used can be specified in the settings dialog found in the File menu. The FCT can launch external tools with the necessary input data. In the case of the FOM editor, the updated FOM is reloaded upon closing the tool.Throughout the composition process, the user may create and refine associations between federates (or components) and elements of the federation system specification. This is done to specify the functional allocation of federates. In the FCT, this is achieved by using ‘links’.  REF _Ref45611260 \h Figure 6 shows a CGF federate associated with the federation conceptual model, the federation scenario and the system requirements. The currently selected node in the tree is a link to a requirement. As a result, information about the requirement is presented in the panel to the right (at the top), and associated comments to the association are found at the bottom. This link concept has turned out a powerful core facility of the FCT that enables the user to create various associations in designing the federation. Federate Details TabThe Federate Details tab allows the user to specify the detailed interface of a federate. This includes specifying the RTI services to be used, and each SOM. The SOM is defined by assigning relevant part of the FOM to each federate. Recognizing that Federation Composition is a highly iterative process, the FOM will not be stable in the early stages of the process. In order to cope with this, the FCT automatically checks whether a SOM allocation is consistent or not. Inconsistent states can occur when the user removes or renames objects, attributes or interactions in the FOM.Figure  SEQ Figure \* ARABIC 7 FCT link system illustratedAsset Search TabSearching for candidate assets in the EUCLID Repository is an another important feature of the FCT.  REF _Ref45009205 \h Figure 8 shows an example of the search view, together with the search specification (search template) in the right panel. The template contains four sections for input.General data: allows the user to specify some general parameters, e.g. the type of simulation and free text.Conceptual model: contains SE elements and SE relations of the entities to be represented in the SE.HLA characteristics: SOM object/interaction names and the RTI to be used.Optional data: real time mechanism, and support for a (EUCLID) state transition diagram for federation configuration and initialization [11].Figure  SEQ Figure \* ARABIC 8 FCT Search tabFor top-down design, the template is automatically populated with data and capabilities assigned to the federate in the previous phases. In  REF _Ref45009205 \h Figure 8, this is illustrated for the CGF federate. In addition, the user can select SE elements from the conceptual model and add them to the search criteria.If the repository search produces results, the user can view the asset descriptions, and subsequently assign found assets to a federate. If multiple assets are considered for implementing a particular federate, these can be marked as primary or alternative assets. After this step, the asset’s SOM and asset conceptual model can be inspected. In general, any detailed data associated with the asset is available for download from the repository.The Asset Search tab is also the starting point for users working in a bottom-up design fashion. The federation architecture may be built up iteratively based on simulation assets found by searching the repository.  A search can be based on a federation system specification, or by manually inserting keywords describing required assets. Federates Descriptions are further synthesized in the Federate Details tab. FOMs and SOMs are allocated accordingly by ‘reverse engineering’ of the selected simulation assets.Asset Assessment TabWhen assigning a simulation asset to a federate, the functional allocation of the federate should be matched with the asset capabilities and technical specifications. The FCT supports the SE developer in documenting to what degree the capabilities and characteristics of the selected assets match the assigned requirements and conceptual model characteristics. This provides the various stakeholders in the selection process with detailed information to select the most suitable set of assets for a certain federation. Federation Agreements TabThe closing step in the iterative composition is the documentation of the federation agreements. The agreements are captured in a free text format and assigned to each federate. Notes may be added for each federate, indicating a particular agreement compliancy. The federation agreements may have a large target audience including project managers, designers and implementers. In order to facilitate easy distribution, PDF documents can be generated containing all federation agreements and related data in a human readable form. Bridging HLA FederationsAs discussed in the previous sections, an important aspect of federation composition is the development of a Federation Bridge. A bridge enables the implementation of Complex Federates, and to link two distinct Federation Executions. The user builds the Federation Bridge as described below. The Federation Bridge has to process data between two federations. The FOM from one federation has to be mapped onto the FOM from the other federation, and vice versa (Bridge FOM Mapping). The FCT uses a (COTS) tool to specify FOM mappings.In addition, InterdaptorTM [9] from VTC offers a code generator to generate the glue code to implement the FOM mapping, and to create the run-time Federation Bridge executable.  To this end, a separate tool loads the FOMs and the FOM Mappings, and creates skeleton code with all relevant mappings, interface to RTI calls, and a Visual Studio project. The user may have to tailor some parts of the source code (for example to implement data encryption requirements) and compile and link the source code, together with relevant software libraries, into the Federation Bridge executable.Figure  SEQ Figure \* ARABIC 9 Federation Bridge generationAfter generating the Federation Bridge Executive, it can be stored in the EUCLID Repository and referenced by the Federation Design Specification (DTD). Concluding remarksThis paper presents the Federation Composition Process and the tool support developed in Euclid RTP 11.13.  The Federation Composition Tool (FCT) is an R&D effort within EUCLID RTP 11.13 to demonstrate required tool support capabilities to support the federation composition process within the SEDEP [2]. The federation composition process is based on the following premises:reuse of existing simulation assets characterized in the EUCLID RTP 11.13 Repository;use of multi-level federations to improve asset reusability and federate configuration;integrated tool support across the various SEDEP steps.The development of the FCT has provided a better insight in the requirements for integrated tool support in the area of federation composition within the SEDEP. The specification of an XML DTD to describe the Federation Design enables the exchange of federation design information through the Repository. Integrated support for the allocation of requirements, search, selection and assessment of assets is essential to promote the reuse of existing simulation assets. The FCT software will be demonstrated to the EUCLID RTP 11.13 Management Group in the fall of 2003.References[1]Keith Ford, “Euclid RTP 11.13 Realising the Potential of Networked Simulation in Europe”, 01E-SIW-011, Proc. European Simulation Interoperability Workshop, London, June 2001.[2]Keith Ford, Pascal Peyronnet, “The Euclid RTP 11.13 Synthetic Environment Development & Exploitation Process”, 01F-SIW-124, Proc. Fall Simulation Interoperability Workshop, Orlando, September 2001.[3]Marco Brasse, Wim Huiskamp, Olaf Stroosma, “A Component Architecture for Federate Development”, 99F-SIW-025, Proc. Fall Simulation Interoperability Workshop, Orlando, FL, September 1999.[4]Michel Keuning, Arjan Lemmers, “RTP 11.13 Gets To Grips with SE Specification”, 03E-SIW-097, Proc. European Simulation Interoperability Workshop, Stockholm, June 2003.[5]Len Granowetter, “RTI Interoperability Issues -  API Standards, Wire Standards, and RTI Bridges”, 03E-SIW-077, Proc. European Simulation Interoperability Workshop, Stockholm, June 2003.[6]Keith Ford, “The EUCLID RTP 11.13 SE Development Environment”, 02E-SIW-007, Proc. European Simulation Interoperability Workshop, London, June 2002.[7]Keith Ford, Marko Jokipii, “The  Euclid RTP 11.13 SE Management Tool”, 03E-SIW-093, Proc. European Simulation Interoperability Workshop, Stockholm, June 2003.[8]Marco Fabbri, Rui Nunes, Roger Davies, Erik De Koster, “The Repository in support of the Synthetic Environment Development and Exploitation Process (SEDE)”, ITEC 2003.[9]Virtual Technology Corporation,  HYPERLINK "http://www.virtc.com" http://www.virtc.com.[10]Unified Modeling Language (UML) specifications,  HYPERLINK "http://www.omg.org" www.omg.org.[11]Jan Jelle Boomgaardt, Magnus Johanssen, “Configuration and Initialization - Process Definition and Tool Development Within Euclid RTP 11.13”, 03E-SIW-059, Proc. European Simulation Interoperability Workshop, Stockholm, June 2003.Author BiographiesMARCO BRASSE is a member of the scientific staff in the Simulators Group at TNO-FEL. He is involved in several national and European projects focusing on HLA development. He holds an M.Sc. degree in Computing Science and a Master of Technological Design (MTD) degree in Software Technology, both from Eindhoven University of Technology, The Netherlands. His research interests include parallel and distributed computing, component based architectures, and embedded systems. He is a member of NATO Naval subgroup 61 ‘Virtual Ship’ on Simulation Based Design and Virtual Prototyping. In EUCLID RTP 11.13, he is work-element lead for Federation Composition.OLE MARTIN MEVASSVIK is a senior scientist at the Norwegian Defence Research Establishment (FFI). He holds a M.Sc. degree in Engineering Cybernetics from the Norwegian Institute of Technology (NTH). He has been involved in a broad range of research activities within in the area of maritime command and control including situation picture production, the development of data fusion techniques and systems engineering in general. His current research interests include simulations to C2 systems interoperability and ad hoc network concepts for network based defence. TOM SKOGLUND is a senior scientist at the Norwegian Defence Research Establishment (FFI). He is involved in both national and international projects on HLA development. He holds a MSc degree in Computer Science from the University of Bergen, Norway. His research interests include distributed computing, design of frameworks for distributed simulations and visualisation of simulations. He is a member of NATO Naval subgroup 61 ‘Virtual Ship’ on Simulation Based Design and Virtual Prototyping.Figure  SEQ Figure \* ARABIC 6 Federation Composition Tool GUI tabs