DIS to HLA Compliance in 21 Days Shirley M. PrattRolands & Associates ConsultantOrlando, FL 32817407-673-3610pratts@gdi.net MAJ Theodore D. DugoneTRADOC Analysis Center - MontereyP.O. Box 8692Monterey, CA 93940831-656-4057dugonet@trac.nps.navy.milKeywords:DIS, HLA Compliance, Janus, HLA Gateway ABSTRACT: The October 1, 2000 deadline for legacy Department of Defense (DoD) simulations to achieve compliance with the High Level Architecture (HLA) is approaching fast. Those that are not HLA compliant by that date face retirement even though a need for them may still exist in the user community. For legacy simulations using standard Distributed Interactive Simulation (DIS) network protocols, achieving HLA compliance need not be a costly, painful or time consuming effort. This paper presents a step by step guide for making legacy DIS simulations HLA compliant using the HLA Gateway. It is geared for developers with limited HLA backgrounds and funding to make their DIS-based simulations HLA compliant, when HLA compliance is needed fast, and when existing DIS capabilities for the simulation are to be maintained. The authors faced all three conditions recently when making Janus 7.06dc HLA compliant. Based on their experiences, the guide explains what to expect and what to do for each of the four steps of the test process when using the HLA gatewayGateway, which optional parts of the compliance testing process are worthwhile doing, which parts of the numerous HLA test documents are important to know about, which HLA test tools are worthwhile to learning to use, and some tips to make the test process go smoothly. The guide presents the main tasks that need to be done to complete the HLA Federate Compliance Test process in a 21 day schedule.1. IntroductionThe High Level Architecture (HLA) has been mandated as the architecture for Department of Defense (DoD) simulations [1]. Legacy DoD simulations must be brought into compliance with HLA or face retirement on October 1, 2000. Those that are not HLA compliant by that date face retirement even though a need for them may still exist in the user community. For legacy simulations using standard Distributed Interactive Simulation (DIS) network protocols, achieving HLA compliance need not be a costly, painful or time consuming effort.This paper presents a step by step guide for making legacy DIS simulations HLA compliant using the HLA Gateway developed by the Institute for Simulation and Training (IST) and sponsored by Simulation, Training, and Instrumentation Command (STRICOM) [2]. The guide is geared for developers with limited HLA backgrounds and funding to make their DIS-based simulations HLA compliant, when HLA compliance is needed fast, and when existing DIS capabilities for the simulation are to be maintained. A 21 day schedule for completing the main tasks is presented at the end of the guide.The guide is based on a recent effort by the authors to make Janus 7.06dc HLA compliant [3]. Janus is a stochastic, interactive, high resolution, multisided, model used throughout the U.S. Army for standalone and networked analysis and training applicationsI would use ref [7].. Janus 7.06dc has built-in support to network with other simulations using DIS. In a homogenous network environment, it can use either DIS or its own Janus network protocols [4, 5]. [4, 5]The information contained in this paper is being shared in the hope that it will be useful to others who need to make their legacy DIS simulations HLA compliant, but it is being provided WITHOUT ANY WARRANTY. The authors assume no responsibility for errors or inaccuracies in the paper, changes to HLA compliance test procedures or test related software, inability to adhere to the schedule presented in this paper, additional unforeseen tasks, or any other causes that might result in costs or damages.I think we may need to have such a disclaimer? If you agree, does it need to be reworded or augmented?2. Gateway ApproachThe approach presented here is to use a gateway to allow the legacy DIS simulation the ability to use the HLA. The gateway handles all the necessary DIS to HLA and HLA to DIS translations. Figure 1 shows how a standalone gateway is used together with a legacy DIS simulation to form a combined system that acts as a single HLA federate, a member of a an HLA federation or collection of applications that interact using a common agreement for exchanging data and supporting communications infrastructure [6].During HLA compliance testing process, this combined system is referred to as the Federate Under Test (FUT).The legacy simulation achieves HLA compliance by undergoing an the HLA Federate Compliance Test Process [7]. During the process, the combined legacy simulation – gateway system is referred to as the Federate Under Test (FUT). Use of the HLA Gateway represents one of the least cost and least amount of effort approaches to achieving HLA compliance. The software is available at no cost to DoD developers and generally, it requires no changes to the legacy simulation source code to use. Previous work by others have indicated that the HLA Gateway can be successfully used to achieve HLA compliance [8, 9, list any other refs]That’s enough and that its performance is acceptable for soft real-time needs [10].3. Planning for HLA Compliance TestingHLA compliance testing involves developing and submitting documentation about a federate’s capabilities to use the HLA and demonstrating those capabilities during a runtime test. Additional software and hardware, beyond those of the legacy simulation, is needed to complete the test process using the gateway approach. Some planning for the runtime test is also needed upfront. The next few sections describe what needs to be done in preparation for compliance testing.3.1 Supplemental DocumentationBeyond reading this guide before beginning the test process, some helpful official HLA compliance test documents to obtain and review include:HLA Federate Conformance Guide [add ref11]HLA Federate Compliance Testing Tutorial [12] (M. Loper and M. Horst, “HLA Conformance Guide,” version 1.3, June 1998.)Compliance test examples [add ref13, 14]Use HLA web site as ref(any others?)That’s all I thinkThese documents provide supplemental information about about HLA federate compliance testing and what to expect during the test process in general. Selected parts of several other HLA related documents are mentioned throughout this guide, with references, for those who wish more information.The next two documents provide detailed information about two major tests that are part of HLA federate compliance testing. The authors feel they are not necessary to read in order to get through the test process using this guide:Test Procedures for HLA Object Model Template  [add ref15] (M. Horst, “Test Procedures for HLA Object model Template,” version 1.3, April 1998.)Test Procedures for HLA Interface Specification [add ref16]]( M. Loper, “HLA Interface Specification,” version 1.3, May 1998)3.2 Other Necessary Software/Hardware Table 1 lists all the other applications that will be used to complete HLA compliance testing using this guide. The platforms listed are just meant to give developers an idea of what is currently supported. Version numbers have been omitted because the platforms are subject to change with later releases of the software. SoftwarePlatformsHLA GatewaySGI IRIX, Windows NTObject Model Development Tool Windows (others?)Sun Solaris 2.7, SGI IRIX, IRIX 6.3, Windows  95 / Windows NT  Runtime Infrastructure SUN, HP, DEC, SGI, Windows (check list) Sun Solaris SPRO C++, Sun Solaris GCC, SGI IRIX MIPSPro C++,Windows NT MSVC++, Windows 98 (2nd Edition) MSVC++, Linux (RedHat) x86 egcs, VxWorks Green Hills C++, Java Language Binding Sun Solaris, Java Language Binding Linux (RedHat) x86 egcs, Java Language Binding WindowsNT, CORBA Language Binding Sun Solaris, Ada 95 Language Binding Sun Solaris Auxiliary FederateVaries Table 1. 	Other applications used for HLA compliance testingThis section describes what each of the applications in Table 1 is used for, where to obtain the software, and other things that need to be considered before testing.3.2.1 HLA GatewayAs mentioned previously, the HLA Gateway is responsible for handling the DIS to HLA and HLA to DIS translations for legacy simulations. The translations are based on the Real-Time Platform-level Reference  (RPR) Federation Object Model (FOM) [17]. A FOM is an agreement among federates on data to be exchanged at runtime and the conditions of the data exchange (e.g., updates to be sent when changes exceed a certain value) [6]. The RPR-FOM represents the information contained in DIS protocol data units (PDUs) as equivalent HLA object classes and interactions. The HLA Gateway supports DIS 2.03, 2.04, 1278.1 and 1278.1A [2]. Provided the legacy DIS simulation is compliant with one of the four supported DIS standards, no simulation source code changes are usually needed in order to use the gateway software. The latest release of the HLA Gateway software should be obtained as soon as possible from PROJECT COORDINATOR, Synthetic Technology and Management Division, STRICOM, 12350 Research Parkway, Orlando, FL 32826-3276. Developers should also sign up for the HLA Gateway e-mail reflector [18] to obtain additional information and support from other HLA Gateway users. Allow one day to install, configure and learn the basics of how to use the gateway software (e.g., start up/shut down, how to enter commands). Some examples of basic commands that were used for the Janus 7.06dc test effort are shown in Table A2 of the Appendix.Note, that the HLA Gateway also has some limited built-in capabilities to generate Computer Generated Forces (CGF). For the purposes of this guide, the CGF capabilities are ignored.3.2.2 Object Model Development Tool (OMDT)The OMDT automates the process of creating HLA object models, key components in developing HLA federates and federations [19].  It is used offline early in the testing process to create a simulation object model (SOM) for the legacy simulation – HLA Gateway FUT. The SOM is a required document for HLA compliance. It contains a description of the entity types and PDU interactions supported by the legacy simulation in terms of HLA object classes and interactions. Because the legacy simulation uses a subset of all the available DIS PDUs, the FUT will use a subset of the classes and interactions in the RPR-FOM. Hence, the FUT SOM will be created by modifying the RPR-FOM, which is provided with the HLA Gateway software. To obtain the OMDT software, developers will need to register to with the DMSO software download web site (http://hla.dmso.mil/sdc/)http://. Then, a user name and password is are assigned to allow software downloading. Allow up to one day to install and learn how to use the software to edit an existing object model.3.2.3 Runtime Infrastructure (RTI)The HLA Gateway interfaces with the RTI when sending out and receiving HLA communications. The RTI is responsible for coordinating operations and routing data within a an HLA federation execution (FEDEX) [20], the runtime operation of HLA federates to conduct an exercise for some purpose. In this guide, the RTI is used like a "black box". That is, one launches the application, lets it run on its own and then shuts it down when it is no longer needed. During runtime, the RTI process is referred to as the RTI execution.As with the OMDT, developers can obtain the RTI software from the DMSO software download site. The HLA Gateway documentation will state what version of the RTI is supported. Allow up to half a day to install, configure and learn to use the RTI as needed for this guide.3.2.4 Auxiliary FederateAt least one other HLA federate must also be active during the runtime test. Among other things, this so-calledThis Auxiliary Federate will be responsible for generating HLA communications that will be responded to by the FUT. Thus, the Auxiliary Federate must be able to participate in a federation that uses the same RPR-FOM as the HLA Gateway.The Auxiliary Federate may have its own native HLA interface (i.e., it interfaces with the RTI directly) or it too may be a DIS-based simulation that uses a gateway to interact with other HLA federates. This guide recommends using an Auxiliary Federate that is comprised of another DIS simulation paired with a separate HLA Gateway. The second DIS simulation can be the same as the one undergoing HLA compliance testing or one that is otherwise regularly used together in DIS exercises as long as it is able to evoke responses from the simulation being tested (i.e., not just a data logger).The benefit of using another DIS simulation – HLA Gateway federate as the Auxiliary Federate is that the runtime scenario can be developed and tested using just familiar DIS network protocols. Then the HLA Gateways and RTI can be added later with relatively little effort so that the legacy simulations then communicate using the HLA with basically the same results.  A minimal amount of time is spent learning to use new HLA applications. Interoperability issues are minimized when dealing with federates that use identical DIS to HLA and HLA to DIS mappings.3.3 Runtime Test ScenarioThe FUT demonstrates the use of various RTI interface (IF) services during a runtime IF test. For the legacy simulation – HLA Gateway FUT, the HLA Gateway is responsible for actually using the services. Some services will have to be used with specific parameters that depend on the contents of the DIS PDUs sent/received by the legacy simulation. It is recommended that the scenario be kept simple and involve just one Auxiliary Federate if possible (the rest of the guide assumes one Auxiliary Federate is used). Consider starting with an existing scenario and modifying it rather than building one from scratch. One to three classes of entities, as defined by their DIS entity domain (e.g., land, air, surface, etc.) and DIS entity kind (e.g., platform, munition, life form, etc.), should be part of the scenario in sufficient numbers and under such conditions that interactions will take place amongst the entities. Namely, DIS PDUs such as Fire, Detonation, Collision, etc. will be sent out during the simulation. For Janus 7.06dc HLA compliance testing, a scaled-back version of an existing demonstration scenario was used with two separate Janus applications modeling the forces of two opposing sides.  Table 2 shows the forces used in the Janus IF test.Janus SideSystem NameNumber of Entities1M109A641M2A241TRK 21022S1932T-8062GAX-6610Table 2. Forces in the Janus 7.06dc IF testFor simplicity, the scenario was limited to a small number of land-based entities, only althougheven though Janus certainly has capabilities to model many more numbers of entities and many other classes of entities. However, more numbers of entities or interactions would not show the ability to use new HLA services. Furthermore, more classes of entities or interactions were not required because a comprehensive demonstration of simulation or modeling capabilities is not needed to pass the runtime IF test. Further details about designing the scenario are provided in Section 4.2.3.3.4 Allocate Manpower ResourcesMost of the steps of the HLA compliance test process are documentation steps that probably can be completed by one person with a good working knowledge of the legacy simulation within a reasonable amount of time. The step that may likely require the support of more than one individual is the IF test. The IF test will require the simultaneous operation of both the FUT and the Auxiliary Federate. The RTI and HLA Gateway applications require minimal, if any, user input during the FEDEX, however. The manpower requirements should be determined by how many people are needed to run the legacy DIS simulations that comprise the FUT and the Auxiliary Federate.4. HLA Compliance TestingHLA compliance is achieved by completing a relatively straightforward, four step test process using an online test system [21]. As mentioned previously, documentation about a federate’s capabilities to use the HLA is required along with a runtime demonstration of those capabilities. Listed below are a few things to note beforehand aboutbefore the test process:Most of the steps of the HLA compliance test process are completed by submitting information electronically.HLA capabilities are declared by the developer. A minimal set is required, but beyond that, it is up to the developer to declare what capabilities the FUT supports.HLA capabilities of the FUT refer to those of the combined legacy simulation – HLA Gateway system. Some capabilities may only be supported by using the HLA Gateway with no DIS equivalent.A DMSO appointed Certification Agent (CA) works together with developers to get the FUT through the test process. Results of each step are usually received within a day. Steps can be redone, if needed, until they are passed without having to restart the test process.In theThe following sections, highlight what to expect and what to do to satisfy each of the four steps will be explainedof HLA compliance testing. Again, the goal of this guide is to try to keep things as simple as possible.4.1 Step 1: Submit a Test ApplicationIn Step 1, the developers of a federate request a an HLA Federate Compliance Test from the CA by completing a test application online. The information shown in Figure 2 is required to complete the application.POC InformationDoD/Government AgencyDoD/Government Contract #	COTRFederate Name	VersionFederate DescriptionExpected IF Test Date	Test VersionRTI VersionFigure 2. Information requested on test applicationThe first three lines of the application are self-explanatory. The name and description of the federate should be those of the legacy simulation (ignoring for now the use of the HLA Gateway). The federate version should be a stable, mature release of the legacy simulation. If another version has significantly different HLA capabilities, it should undergo another separate HLA compliance certification [22].Assuming theOn a 21 day schedule presented later in this guide can be followed, the IF test date should be set approximately 20 working days after the application is completed. It can be changed later if needed. If the FUT lies behind a firewall and no special arrangements can be made to temporarily bypass it for the IF test, the test date will need to be scheduled when the CA can be onsite. Otherwise, the CA will oversee the IF test remotely using the internet.The test version is driven by what is supported by the online HLA compliance test system and what version of the HLA specifications is supported by the RTI. At the time of this writing, only test version 1.3 is available. The HLA Gateway version used for the Janus 7.06dc testing effort was version 3.2 and it was operated using RTI 1.3 Version 6. The number of the RTI release, 1.3, corresponds to the version of the HLA specifications that is supported.4.2 Step 2: Provide a Conformance NotebookIn Step 2 of the HLA federate compliance test process, the federate developer submits a Federate Conformance Notebook consisting of three documents: Simulation Object Model (SOM)Federate Conformance Statement (CS)Scenario Data (optional)The Federation Execution Planners Workbook (FEPW) is another optional document that may be created and submitted in Step 2. The authors felt that the FEPW editor was not really needed to plan the simple FEDEX for the Janus 7.06dc IF test, however.The three documents of the Conformance Notebook are uploaded via a web browser from the Step 2 web page of the HLA Federate Compliance System. Files can be resubmitted if previous versions need to be updated or corrected. The CA runs checks to ensure the proper format of the files and consistency of the contents. Each Conformance Notebook item is discussed further below. 4.2.1 Simulation Object Model (SOM)In accordance with Federate Compliance Checklist [23], a federate must have a SOM that describes the object classes, class attributes, and interaction classes of the federate that can be made public in a federation in Object Model Template (OMT) format. Furthermore, in order to facilitate automated testing, the SOM must be in OMT Data Interchange Format (DIF), a standard file exchange format used to store and transfer object models between object model development tools [24]. In this guide, the OMDT will be used to develop the SOM for the legacy simulation.The SOM will be based on the RPR-FOM provided with the HLA Gateway software (file called giant.omt). The "omt" file extension means that the file is already in the proper format (OMT DIF). Do the following steps to transform the RPR-FOM into a SOM for the legacy simulation:Make a copy of the RPR-FOM and rename it as the SOM for the legacy simulation. Delete leaf node object classes in the Class Table that are not one of the DIS entity types supported by the legacy simulation. Delete interaction classes in the Interaction Table that are not one of the types of DIS PDUs supported by the legacy simulation.Edit the Object Model ID Table to include point of contact and descriptive information pertaining to the legacy simulation. Save the file.Do not bother deleting any unused entity attributes in the remaining entity classes because the HLA Gateway will still send out values for all attributes, at least once, even if unused (sayi.e., left unspecified or zeroed out) by the legacy simulation. Do not bother deleting any datatypes that may now be unused as a result of making deletions to the object model. Use the OMDT Consistency Checker with all eight types of checks active to ensure conformance to the HLA OMT DIF standard. This is the same test used by the CA in Step 2 [11]. As an example, the classes and interactions for the Janus 7.06dc SOM are shown in Table A1 of the Appendix.4.2.2 Conformance Statement (CS)The CS is an ascii text file containing the name of every available RTI IF service followed by a YES or NO indicating whether the FUT supports the service. An example of the CS for version 1.3 of the HLA specifications can be found in [25]. Note that the informational comments at the top of the file must be deleted or else an error is obtained upon submitting the file. The file must contain only IF services followed by a YES or NO answer.In the case of a legacy DIS simulation – HLA Gateway federate, the IF services depend on what the HLA Gateway supports and what equivalent DIS capabilities the legacy simulation possesses. Figure 3 shows a basic set of RTI services that will likely be supported by most legacy simulation – HLA Gateway FUTs. The first four services are mandatory for federate compliance testing [11]. The others are used by the HLA Gateway when doing DIS to HLA and HLA to DIS translations during the course of most DIS simulation exercises involving entities and interactions among them. createFederationExecution destroyFederationExecution joinFederationExecution resignFederationExecution 		publishObjectClass 	publishInteractionClasssubscribeObjectClassAttributes 		subscribeInteractionClass 			registerObjectInstance discoverObjectInstanceupdateAttributeValues 	reflectAttributeValues 	sendInteraction 	receiveInteraction deleteObjectInstance removeObjectInstance requestAttributeValueUpdate provideAttributeValueUpdateFigure 3. 	Basic set of IF services used by most legacy simulation – HLA Gateway federatesThe services listed in Figure 3 were followed by a YES answer in the Janus 7.06dc CS while all the others were followed by a NO answer. Though some additional IF services were available through the HLA Gateway, these services best matched the capabilities of the Janus 7.06dc – HLA Gateway FUT, and they were the ones the authors prepared to be tested on as described later in this guide. Again, it is up to the developers to decide what HLA capabilities the FUT has and can demonstrate.4.2.3 Optional Scenario DataIn Section 3.3 it was mentioned that a comprehensive demonstration of legacy simulation or modeling capabilities is not required to prove the declared HLA capabilities of the FUT during the runtime test. To constrain what needs to be shown during the IF test, developers should submit the optional Scenario Data. The CA uses the scenario data to develop the requirements for the IF test, namely, what services in the CS will need to be demonstrated with what parameters (e.g., what classes of entities, entity attributes, interactions).  If no Scenario Data is submitted for Step 2, the CA will arbitrarily select one to three instances of object classes, attributes and instances to be tested from the FUT’s SOM [26]. The test scenario would then need to be developed based on those selections, which would likely involve more work than reusing or simplifying an existing scenario. Thus, a simple scenario with one to three classes of entities and interactions is sufficient. The realism or validity of the data used to describe the entities/interactions is irrelevant for HLA compliance testing. What matters is that the FUT demonstrate the use of a specific set of IF services from the CS using parameters from the SOM and Scenario Data.Optional Scenario Data is submitted as another OMT DIF file containing only the elements of the federate SOM that will be part of the scenario to be used for the IF test later in Step 4 [27].To develop the Scenario Data, do the following steps:Make a copy of the SOM and rename it to reflect its use as the representative SOM for the legacy simulation. Delete object classes in the Object Table representing DIS entity types that will not appear in the IF test scenario. Delete interaction classes in the Interaction Table representing DIS PDUs that will not be sent or received in the IF test scenario.Edit the Object Model ID Table information to reflect its use as the Representative SOM for the legacy simulation.Save the file.The resulting Scenario Data will contain a subset of the object classes and interactions in the SOM. As with the SOM, use the OMDT Consistency Checker to ensure the Scenario Data is a suitable OMT DIF file. Table A1 in the Appendix shows the Janus 7.06dc scenario data classes and interactions used to describe the simple scenario shown in Table 2.4.3 Step 3: Provide Environment DataIn preparation for Step 3 of the HLA federate compliance test process, the federate developer reviews an IF test sequence generated by the CA that must be satisfied during the IF test in Step 4. An actual test date and time is set. The developer submits information about the test environment and also two additional files, the RTI Initialization Data (RID) and Federation Execution Details (FED) files. Each aspect of Step 3 is described next.4.3.1 IF Test SequenceAfter the Step 2 files have successfully passed the Step 2 checks, the CA will e-mail an ascii text file containing an IF test sequence and offer a tentative test date to be confirmed by the federate developers. The sequence is aan alphabetized list of RTI IF services and parameters that need to be demonstrated by the FUT during the IF test. It is based on the SOM, CS and optional Scenario Data submitted in Step 2. Some of the services are order dependent (for example, a federate must first publish an attribute before updating it); some must be used with specific parameters in order to satisfy the test sequence while others need no parameters [28]. The Janus IF test Sequence is shown in Table A2 of the Appendix as an example.4.3.2 IF Test Environment SetupAssuming the Auxiliary Federate is another legacy simulation – HLA Gateway system, the runtime test scenario should be initially developed and tested using only familiar DIS network protocols. Once the distributed scenario is working properly using DIS, the HLA applications (HLA Gateways and the RTI) can be introduced so that the communications between the DIS simulations use the HLA vice DIS. The only change needed to the DIS simulations is to use different exercise numbers. Both of the HLA Gateways then need to be configured to use the proper exercise numbers in order to send/receive DIS traffic on the behalf of its DIS simulation partner. The different DIS exercise IDs ensure that the two DIS applications communicate using the HLA vice DIS. When joined as members of the same FEDEX at runtime, the two HLA Gateways will communicate with each other using only the HLA and with their respective legacy simulations using only DIS. The results of the distributed scenario should be basically the same. When the IF test environment has been established (i.e., the distributed scenario now works using the HLA), enter the following test environment data online for Step 3: Application Programmer’s Interface (API) Used - C++ (based on what the HLA Gateway software uses)RTI Hardware platform and Operating System – Enter the appropriate information for the machine running the RTI software.RTI Execution Host Information – Enter the host name and IP address of the machine running the RTI software.RTI Execution Port Number – Skip over. Unused remnant from HLA test version 1.0.Federation Execution Host Information – Enter the host name and IP address of the machine that runs the HLA interface for the Auxiliary Federate.  As explained later in Step 4, the Auxiliary Federate will create and join the FEDEX first and thus host the FEDEX process. Firewall Status – Enter Yes or No. If Yes, arrangements need to be made to carry out the IF test by either temporarily bypassing the firewall or having the CA come onsite to do the test.The Janus 7.06dc IF test environment is shown in Figure A of the Appendix. To minimize hardware costs, two PC laptops running Windows NT were borrowed and used where when possible to run the HLA applications (HLA Gateways and RTI). Due to the small size of the scenario, one laptop was able to be used to run both the RTI and the HLA Gateway of the Auxiliary Federate. 4.3.3 RTI RID FileThe RID file contains parameters that control the operation of the RTI software and generally, it can be used “as is” with default values [29]. For HLA compliance testing, however, one change to activate data logging is needed. The change can easily be made using a text editor by searching the file to find the parameter default_service_logging_state and changing its default setting from no No to yesYes. The CA will send developers an e-mail about this one necessary change to the file. The RTI RID file editor (RIDed) tool, available from the DMSO Software Download web site, can also be used to edit RID files. The tool provides a nice simple graphical user interface that allows easy point-and-click viewing and editing capabilities, but it is much quicker to just use a text editor to make the one required change. In fact, the authors encountered an unexplained (but apparently not uncommon) RID file checksum error which, according to the CA, may have been caused by using the RIDed or perhaps by an incompatibility between the NT platform running the RTI software in the Janus test environment and the SUN platform used by the CA’s test federate. In the end, a RID file provided by the CA with the one change already made was used for the Janus 7.06dc IF test. It is also noted that only one RID file was used during the Janus 7.06dc IF test. This implies that the IF service invocations for both federates were logged by the CA during the IF test. However, the CA stated in an e-mail that the FUT data could be sorted out and analyzed, so therefore, no effort was made to use two separate RID files.4.3.4 FED FileThe FED File lists all the objects and interactions used by a federation and the RTI [29]. Assuming that the legacy simulation – HLA Gateway FUT would normally be part of a federation that uses the RPR-FOM (namely, DIS-based federates), the FED file for Step 3 can simply be the giant.fed file that comes with the HLA Gateway distribution or a renamed copy of the file. Its contents, the objects and interactions in the RPR-FOM, can be viewed using the OMDT, but the file will fail the OMDT Consistency Checker because the FED file does not contain the information required for OMT DIF files to pass the checks. The HLA Gateway of the Auxiliary Federate will be launched using a shortcut command to autostart the FEDEX using the FED file (create and join the FEDEX and publish/subscribe to all the possible data in the file). It does not matter that only a subset of the RPR-FOM will actually be used by the FUT and Auxiliary Federate during the IF test. In general, they are able to participate in a federation execution that uses the RPR-FOM. 4.4 Step 4: IF Test/Certification Summary ReportThe IF test is executed by the federate developer and the CA. It ensures that the FUT can invoke and respond to all services for which it is capable (per its CS) and that the FUT is capable of invoking and responding to services using a range of data contained in its SOM [11]. The IF test sequence sent by the CA earlier includes all the necessary service calls required to satisfy both test requirements. The federate developer is responsible for reviewing the sequence and being prepared to execute the necessary services on the scheduled IF test date. The CA will log data during the IF test, analyze the data, generate results, and return a Certification Summary Report (CSR) to the federate developer. The CSR is the official record of HLA compliance for the specific version of the federate code tested. A couple additional “paperwork” related steps are also required before receiving final certification of HLA compliance.4.4.1 Pre-IF TestIF test procedures need to be developed prior to the IF test to ensure each item listed in the IF test sequence is used at least once during the runtime test. Developers should first “crosswalk” each of the services listed in the IF test sequence with what needs to be done during the IF test by the FUT or the Auxiliary Federate. Some of the services are invoked using the HLA Gateway alone and have no DIS equivalent. Other services are invoked automatically through the sending and receipt of DIS PDUs. The procedures need to incorporate the FUT/Auxiliary Federate actions identified in the IF test sequence crosswalk in a logical sequence. Results of the crosswalk for the Janus 7.06dc IF test sequence are shown in Table A2 of the Appendix.The procedures must also specify the proper join/resign FEDEX sequences of the federates so that the FUT’s join/resignFederationExecution services are properly logged by the CA [8]. Namely, the  CA’s Test Utility Federate has to join an existing FEDEX before the FUT so the joinFederationExecution service can be logged. This implies that the Auxiliary Federate has to be the first federate to create and join the FEDEX. Then, the CA Test Utility Federate will join and lastly finally, the FUT. The opposite ordering is needed for resigning from the FEDEX to demonstrate the resignFederationExecution service. Namely, the FUT will resign first from the FEDEX. The Test Utility Federate will log the FUT’s resignation and then resign. The Auxiliary Federate will resign last and be responsible for destroying the FEDEX. The procedures should be tested and practiced multiple times before the actual IF test date to ensure their correctness and smooth execution. The verbose executable of the HLA Gateway can be used (with the verbose option activated) to verify what IF services are invoked during runtime. However, the messages usually scroll past too fast to be read when numerous entities are present. Thus, IF service invocations should be verified using very few numbers of entities. Developers can then assume the services are being invoked when larger numbers of entities are present as well.4.4.2 IF TestThe CA initiates the IF test by contacting the federate developers by phone on the scheduled date/time and remains on the phone during the entire test. The CA requests the RTI Message Version that will be used during the IF test (an environment variable set during the RTI installation) in case more than one RTI is running on the same network during the test. When ready, the CA will request the developers to start up the FEDEX, which will be done by launching the Auxiliary Federate. The CA’s Test Utility Federate will then join the FEDEX to begin logging IF service invocations of the FUT. The rest of the planned IF test procedures should be carried out as practiced previously.During the Janus 7.06dc IF test, the CA confirmed when the various services of the IF test sequence had been successfully logged. Notice was given when the only service remaining to be executed was resignFederationExecution. The legacy simulation was halted and the HLA Gateway command to make the FUT resign from the FEDEX was executed. The CA verified that the resignation had been logged and the Test Utility Federate resigned from the FEDEX. The FEDEX was then destroyed by the Auxiliary Federate after it resigned. The CA then announced that the IF test had been passed and what to do next.4.4.3 Post-IF TestAfter successfully completing the IF test, the next steps are to apply for the CSR online. from Return to the Step 4 on the web site, complete an After Action Review (AAR) interview about the HLA compliance testing process, and submit the legacy simulation SOM to the HLA Object Model Library (OML). Figure 4 lists the self-explanatory information requested for the CSR application.Name and Address of Program Office (which will appear on Certification Letter and Certificate)POC for receipt of framed Certification Letter and CertificateModeling and Simulation Service OfficePOC for After Action Review InterviewFigure 4. Information requested on CSR applicationThe CA will provide the AAR questions so answers can be prepared and submitted prior to the interview. In some cases, a telephone interview may not be required. Instructions on how to submit the SOM to the OML will also be provided. Upon completion of these final tasks, the legacy simulation is considered to be HLA compliant. Receipt of the official HLA compliance letter and certificate may take a few weeks, but the simulation will be listed as an HLA compliant federate on the DMSO HLA web site soon after completing Step 4.5. 21 Day ScheduleFigure 5 shows a 21 day schedule for carrying out the main tasks discussed in this paper. The schedule is intended to serve only as a guide for what needs to be done and when. The number of days involved to do the tasks listed and the total number of days to carry out the entire HLA federate compliance process may differ for each test effort.DAYS  1 - 2Read this guide, obtain and review supplemental documents DAYS  3 - 5Plan software/hardware requirementsPlan general scenario to use for runtime testAllocate manpower Sign up for HLA Gateway reflector; review previous messagesRegister with DMSO Software Download web siteApply for HLA compliance test (Step 1)DAYS  6 - 7Install and learn to use OMDT Create and submit Step 2 documents (SOM, CS, Scenario Data) DAYS  8 - 10Develop and test runtime scenario using DIS onlyDAYS  11 – 15Install, configure and learn to use RTI and HLA GatewaysSetup the IF test environmentEnter Step 3 test environment information and submit RID/FED filesDAYS  16 - 18Develop IF test procedures Practice IF testDAY  19Conduct IF test Apply for CSRDAYS  20-21Complete AARUpload SOMFigure 5. 	21 day schedule for completing the HLA compliance test process6. Conclusions Legacy DIS simulations can be made HLA compliant relatively easily using the HLA Gateway. Some aspects of the HLA Federate Compliance test process are simplified when using the gateway while others are less clear and must be adapted for the legacy simulation-HLA Gateway federate. This guide seeks to help developers make their legacy DIS simulations HLA compliant using the HLA Gateway. Information has been compiled from various sources  (including previous HLA compliance test experiences) to help others get through the test process successfully. The steps and tasks involved in making legacy DIS simulations HLA compliant have been explained in this paper and presented in a 21 day schedule. Overall, the authors feel that the HLA compliance test process is geared for success. During the four step HLA compliance test process, responses from the CA and/or Federate Compliance System are received quickly following each step so corrections can be made, if necessary, or the next step can be initiated. The CAs not only administer the test process, they are helpful in getting developers through each step of the process. Again, the information presented in this paper is meant to serve only as a guide. Actual tasks, results and schedules may vary.7. References DMSO: "High Level Architecture Policy" Web page, http://hla.dmso.mil/policy/IST: “HLA Gateway Release 3.2 User Guide”  IST-TR-99-02, February 23, 1999.Dugone, T. and Pratt. S.: “Janus 7.06dc HLA Federate Compliance Testing Report” TRAC-MTRY Technical Report Draft, May 2000.Dixon, B. A.: “DIS Versions of Janus: Janus Versions 6.88D and 7.06D (HP-UX)” TRAC-WSMR technical document, December 1998.Dixon, B. A.: "Janus DIS Interface and User Guide: Janus Versions 6.88D and 7.06D (HP-UX)" TRAC-WSMR technical document, March 1999.DMSO, “HLA Rules Version 1.3” April 1998, http://hla.dmso.mil/misc/documents/tech/rules/rules1-3.pdfDMSO: "HLA Federate Compliance Testing" Web page, http://hla.dmso.mil/testing/Pratt, S.:  “Soldier Station HLA Federate Compliance Testing”  Unpublished TRAC-WSMR project report, December 1998.Hall, K, et al.: “Lessons Learned from the Submission of a Legacy DIS Simulation and a HLA Gateway for Acceptance via the DMSO HLA Conformance Tests" Proceedings of the Fall 1998 Simulation Interoperability Workshop, Paper 98F-SIW-137, September 1998.Hall, K, et al.: “Performance and Interoperability Observations of the Gateway Approach to HLA Compliance for Legacy VR Simulations” Proceedings of the Fall 1998 Simulation Interoperability Workshop, Paper 98F-SIW-131, September 1998.M. Loper and M. Horst: “HLA Conformance Guide version 1.3 Draft 1” http://hlatest.msiac.dmso.mil/HLATest_1_3/ftp-pub/1.3/html_docs/cg13/10CG1_3draft1.htm, April 15 1998DMSO: "High Level Architecture Federate Compliance Testing" 1998 Fall Simulation Interoperability Workshop Tutorial, September 1998.DMSO: “Federate Compliance Test Example:  Jager” Slide presentation, http://hlatest.msiac.dmso.mil/HLATest_1_3/ftp-pub/1.3/html_docs/jager_ex/ index.htm DMSO: “Federate Compliance Test Example:  HelloWorld” Slide presentation, http://hlatest.msiac.dmso.mil/HLATest_1_3/ftp-pub/1.3/html_docs/ helloworld_ex/ index.htmHorst, M. “Test Procedures for HLA Object model Template Version 1.3” http:// hlatest.msiac.dmso.mil/HLATest_1_3/ftp-pub/1.3/omtpro13draft6Apr.doc, April 1998.Loper, M. “Test Procedures for HLA Interface Specification Version 1.3” http:// hlatest.msiac.dmso.mil/HLATest_1_3/ftp-pub/1.3/IFTest_13.doc, May 1998.Simulation Interoperability Standards Organization (SISO): “Guidance, Rationale and Interoperability Modalities for the RPR-FOM Version 1.0” http://www.sisostds.org/doclib/doclib.cfm? SISO_CID_49, September 1999.IST HLA Gateway E-mail Reflector IST-HLA-GATEWAY. http://confs.sc.ist.ucf.edu/listprocedu /ViewAllMail.cfm?Reflector_ID=229&client=ISTDMSO: High Level Architecture (HLA) Object Model Development Tool (OMDT) User’s Guide Version 1.3” http://hla.dmso.mil/sdc/omdt/ rti13v4/omdtuser.pdf, June 1998.DMSO: “Runtime Infrastructure (RTI)” Web page, http://hla.dmso.mil/rti/DMSO: "HLA Federate Compliance Test System" Web page, http://hlatest.msiac.dmso.mil/DMSO: "HLA Frequently Asked Questions (FAQ)" Web page, http://hla.dmso.mil/faq/DMSO: “HLA Compliance Checklist: Federate Version 1.3 (Draft)". ftp://ftp.dmso.mil/ docslib/initiatives/hla/testing/chklst132d.pdf, May 4, 1998.DMSO: “SOM Data Format” http:// hlatest.msiac.dmso.mil/HLATest_1_3/ftp-pub/1.3/som13.txt.DMSO: “Federate Conformance Statement Format” http://hlatest.msiac.dmso.mil/ HLATest_1_3/ftp-pub/1.3/conform13.txt.Burkhart L., et al.: “The Federate Test Sequence Explained” Proceedings of the 1998 Fall Simulation Interoperability Workshop, Paper 98F-SIW-152, September 1998.DMSO: “Scenario Data Format” http://hlatest.msiac.dmso.mil/HLATest_1_3/ftp-pub/1.3/scenario13.txtMcLean T., et al.: “Understanding Federate-RTI Service Interaction During Federate Conformance Testing" Proceedings of the 1998 Spring Simulation Interoperability Workshop, Paper 98S-SIW-055, September 1998.Science Applications International Corporation: “HLA RTI 1.3v6 Next Generation Implementation Installation Guide” http://hla.dmso.mil/sdc /rti/rting-13v3/RTI-NG-v3-InstallationGuide.pdf, May 8, 2000.8. AcknowledgmentsThe authors would like to thank the Mr. Jeff Ingram of the U.S. Army TRADOC Analysis Center – Monterey and the following individuals from the U.S. Army TRADOC Analysis Center – White Sands Missile Range for their support:  Dr. Randall Parish, Mr. Chad Mullis, Ms. Susan Galloway, and Ms. Barbara Dixon.Author BiographiesSHIRLEY M. PRATT is an independent contractor in Orlando, FL, who has worked with various distributed simulations for Naval Postgraduate School and TRADOC Analysis Center at Monterey and White Sands Missile Range in for the past 6 years. Ms. Pratt has a BA in Applied Mathematics from U.C. Berkeley and an MS in Oceanography-Physics from U.C. San Diego. This work has been done under a contract with Rolands and Associates Corporation, Monterey, CA.MAJ THEODORE D. DUGONE is an Army officer with over twelve years of commissioned service. He graduated with a BS in biology from Pittsburg State University in 1988 and was commissioned in the Field Artillery.  He completed an MS in Operations Research from the Colorado School of Mines in 1998. He is currently an operations research analyst at the U.S. Army Training and Doctrine Command (TRADOC) Analysis Center (TRAC) in Monterey, California.MAJ Theodore Dugone is (need bio)Appendix.  Information from Janus 7.06dc HLA Compliance TestingClass1Class2Class3Class4Class5BaseEntity (S)PhysicalEntity (PS)Civilian (PS)CivilPlatform (PS)CivilSeaSurfacePlatform (PS)CivilLandPlatform (PS)CivilAmphibiousPlatform (PS)CivilAirLandPlatform (PS)MilitaryEntity (S)Soldier (PS)MilitaryPlatformEntity (PS)MilitarySeaSurfacePlatform (PS)MilitaryLandPlatform (PS)MilitaryAmphibiousPlatform (PS)MilitaryAirLandPlatform (PS)Interaction1WeaponFire (IR)MunitionDetonation (IR) Table A1. Janus 7.06dc SOM Classes and Interactions  (P = Publish, S = Subscribe). Gray shaded boxes are classes used in the Scenario Data.IF Test Sequence Service (* indicates FUT must accept service invocation [10])Initiating FederateAction Required to Satisfy ServicedeleteObjectInstance FUTResign from federation execution (Gateway command: h r) or use Janus hide entity capability to stop Entity State PDUs from being sent for an entitydiscoverObjectInstance*AuxFedSend Entity State PDUsdiscoverObjectInstance (MilitaryLandPlatform)*AuxFedSend Entity State PDUsjoinFederationExecutionFUTGateway command: h jprovideAttributeValueUpdate*AuxFedGateway command: h u BaseEntity.PhysicalEntity.MilitaryEntity.MilitaryPlatformEntity.MilitaryLandPlatformpublishInteractionClassFUTGateway command: h p ipublishInteractionClass (MunitionDetonation)FUTGateway command: h p i MunitionDetonationpublishInteractionClass (WeaponFire)FUTGateway command: h p i WeaponFirepublishObjectClassFUTGateway command: h p o publishObjectClass (MilitaryLandPlatform, EntityID)FUTGateway command: h p o MilitaryLandPlatformpublishObjectClass (MilitaryLandPlatform, ForceID)FUTGateway command: h p o MilitaryLandPlatformpublishObjectClass (MilitaryLandPlatform, HasRepairCap)FUTGateway command: h p o MilitaryLandPlatformreceiveInteraction*AuxFedSend Fire and Detonation PDUsreceiveInteraction (MunitionDetonation)*AuxFedSend Detonation PDUsreceiveInteraction (WeaponFire)*AuxFedSend Fire PDUsreflectAttributeValues*AuxFedSend Entity State PDUsreflectAttributeValues (EntityID)*AuxFedSend Entity State PDUsreflectAttributeValues (ForceID)*AuxFedSend Entity State PDUsreflectAttributeValues (HasRepairCap)*AuxFedSend Entity State PDUsregisterObjectInstanceFUTSend Entity State PDUsregisterObjectInstance (MilitaryLandPlatform)FUTSend Entity State PDUsremoveObjectInstance*AuxFedUse Janus hide entity capability  to stop Entity State PDUs from being sent for an entity (rather than having the AuxFed resign)requestClassAttributeValueUpdateFUTJoin federation execution late or Gateway command:  h u BaseEntity.PhysicalEntity.MilitaryEntity.MilitaryPlatformEntity.MilitaryLandPlatformrequestObjectAttributeValueUpdateFUTJoin federation execution late or Gateway command: h u BaseEntity.PhysicalEntity.MilitaryEntity.MilitaryPlatformEntity.MilitaryLandPlatformresignFederationExecutionFUTGateway command: h rsendInteractionFUTSend Fire and Detonation PDUssendInteraction (MunitionDetonation)FUTSend Detonation PDUssendInteraction (WeaponFire)FUTSend Fire PDUssubscribeInteractionClassFUTGateway command: h s isubscribeInteractionClass (MunitionDetonation)FUTGateway command: h s i MunitionDetonationsubscribeInteractionClass (WeaponFire)FUTGateway command: h s i WeaponFiresubscribeObjectClassAttributesFUTGateway command: h s o subscribeObjectClassAttributes (MilitaryLandPlatform, EntityID)FUTGateway command: h s o MilitaryLandPlatformsubscribeObjectClassAttributes (MilitaryLandPlatform, ForceID)FUTGateway command: h s o MilitaryLandPlatformsubscribeObjectClassAttributes (MilitaryLandPlatform, HasRepairCap)FUTGateway command: h s o MilitaryLandPlatformupdateAttributeValuesFUTSend Entity State PDUsupdateAttributeValues (EntityID)FUTSend Entity State PDUsupdateAttributeValues (ForceID)FUTSend Entity State PDUsupdateAttributeValues (HasRepairCap)FUTSend Entity State PDUsTable A2. Janus 7.06dc IF test sequence crosswalkFigure A. Janus 7.06dc IF test environmentHLA CommunicationsDIS   PDUsGatewayLegacy DIS Simulation Note: RTI run on the same machine as Gateway #2DIS Exercise  20, port 3000DIS  Exercise  19, port 3000Federate Under Test (FUT)NT (gateway1)HLA Gateway #1Janus #1Janus #2Auxiliary Federate(AuxFed)NT (gateway2)HLA Gateway #2HLA NTRTIFigure 1. Federate Under Test