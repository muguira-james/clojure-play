Virtual Reality Name Service (VRNS) – A Position PaperMichael D. Myjak, Sean T. SharpThe Virtual Workshop, Inc.,P. O. Box 98 Titusville, FL  32781<mmyjak@virtualworkshop.com><ssharp@virtualworkshop.com>KeywordsDynamic Real-Time Object Models, M&S, HLA, SimulationAbstract: Rapid deployment of Dynamic Federated Simulations still eludes us.  Today, our best approach is one based upon convention. First we have to agree upon the Federation Object Model (step 1). Next, we have to agree upon the process of starting the federation execution (step 2), followed by the joining of federates where in some cases, federates must be joined in some predefined order (step 3).  Then the process continues with the publication and then subscription of objects, followed by the registration of object instances (steps 4, 5, & 6).  Finally, we’re prepared to run the federated simulation (step 7).  But is this mechanism optimal? What if there was a better approach to development and deployment of federated simulations?At The Virtual Workshop, we’ve been researching a new mechanism by which to build, deploy, and distribute FOM and Base Object Model (BOM) information to federates and federations, dynamically.  We call this service the Virtual DNS or Domain Name Service (VRNS).  VRNS provides a mechanism by which object data and metadata can be stored in a namespace database, outside of the classical tabular FOM “Spreadsheet”.  Through VRNS, we can store object class information, object instance information, even object behaviors, in terms of the protocols that operate upon them.  More over, through VRNS, all of these attributes can be updated dynamically, even during federation run-time.  This has many implications for new types of federated simulations, where late joiners are supported, or dynamic behaviors are implemented.  In this paper, we describe our approach to developing the Virtual Reality Namespace Service.1.0	BackgroundNow in its second decade, the quest for simulation interoperability continues as a community-wide research issue.  This all began of course, with Capt. Jack A. Thorpe’s paper entitled  "Future Views: Aircrew Training 1980-2000."  In this paper, Thorpe hypothesized that, "... advances which are seen on the horizon are not simple improvements in teaching techniques or higher fidelity simulators, but rather bold concepts which tightly align training systems with real combat readiness and make them indistinguishable" from one another. (Thorpe, 1987) This paper was the catalyst for large-scale networked simulation systems. Jointly developed by the U.S. Army and DARPA, Simulator Networking (SIMNET) became a reality in the late 1980s.  The SIMNET architecture linked interactive tank, helicopter, and airplane simulators into a common realistic cyberspace battlefield.  SIMNET remains one of the best examples of the power of immersive computer-based environments.SIMNET provided a successful albeit homogeneous learning environment.  With the subsequent birth of the commodity Internet, heterogeneous simulator interoperability became an issue and eventually evolved a strict adherence to an a’ priori agreement or protocol.  The Distributed Interactive Simulation (DIS) protocol and the Aggregate Level Simulation Protocol (ALSP) both draw their lineage of extended SIMNET-like capabilities to offer heterogeneous networks of real-time or constructive simulations, respectively.  Now armed with workstations and general purpose PCs, simulationists began to evolve new simulation applications based on interoperability standards, which continue to evolve fundamental protocols in their own right.Following Moore’s Law, simulation programs continued to evolve in both complexity and performance at a rate much faster then the protocols upon which they were based.  This eventually leads to a situation that is untenable: protocols that are too rigid for the task at hand.  Non-standard extensions to standardized protocols lead to unwanted integration matters or development issues that “… ultimately restrict our ability to achieve and benefit from the information interchange of mixed simulations and live systems.”  (Gustavson, 2001)2.0	High-Level SimulationThe stage was set for our first experience with object-oriented or federated simulations based upon the evolving High-Level Architecture (HLA).  In 1996, the Defense Modeling and Simulation Office (DMSO) commissioned several experimental applications, called proto-federations, to test and refine the HLA concept.  Because HLA grew predominantly out of the ALSP community, most of the proto-federations involved constructive simulation exercises.  One of those experiments however, conducted by the Platform Proto-Federation (PPF), involved the integration of virtual real-time (i.e. DIS-type) simulations. (Harkrider Petty, 1996)2.1	From Modest BeginningsThe PPF consisted of four member programs: Battlefield Distributed Simulation-Development (BDS-D), Battle Force Tactical Training (BFTT), Close Combat Tactical Trainer (CCTT), and the Joint Tactical Combat Training System (JTCTS). The BDS-D federate was a crewed SIMNET M1 simulator connected to the HLA network using an HLA Gateway.  The HLA Gateway translated SIMNET (and later DIS) Protocol Data Units (PDUs) to HLA Run Time Infrastructure (RTI) service invocations, and vice versa. The Gateway approach was chosen for BDS-D to test the feasibility of integrating legacy simulations with HLA. It was for this purpose that during the summer of 1996 team at the Institute for Simulation and Training was asked to help resolve the Platform Proto Federation’s (PPF) issues with long-haul network communications and with distributed simulation time synchronization.  The PPF was to become the first shared, long-haul distributed federated simulation involving both time managed and interactive (i.e., disparate) federate applications. (Myjak, 1997) (Myjak, 1998)Network administration and a shared sense of managed time were by no means the only challenges that faced the PPF developers.  Indeed, these were only two of the issues that required specialized domain knowledge outside the area of the typical professional simulationist.  However, one challenge that spoke directly to the simulationist stood out particularly well from among all others, and that challenge was none other then the management and a’ priori agreement of the Federation Object Models (FOM).  FOMs “… prescribe the format and syntax for recording information in HLA object models” and include objects, attributes, interactions, and parameters.  FOMs however, do not define the specific data (e.g., vehicles, unit types) that will appear in the object model.  (IEEE-1516.2, 2000)  Rather the FOM is a template, an a’ priori agreement upon which a simulation execution will federate.  Today, FOMs, federates and an RTI comprise the basis for federated simulation Interoperability. 3.0	Weaknesses to the Current ApproachIn fairly short order, this round-table approach to solidifying the FOM for any given simulation exercise quickly became recognized as a rather arduous, time-consuming and costly event. (O’Connor, 2001)  But during the PPF deliberations of 1995, I jokingly referred to this process as the “FOM-a-Roma.”  FOM-o-roma: `fäm-ō-räm-ə  n: 1 a) the process of forming a FOM; b) the search, pursuit, investigation, for solidarity in object class and behavior; c) an act of object management convergence.3.1	The FOMIn theory, the flexibility offered by the FOM construct should have allowed for greater flexibility in the simulated environment. But flexibility and interoperability are inversely proportional to one another.  In the 5 years that HLA has been with us, only a handful of recognizable FOMs have been developed that we (as a community) appear to be content in using. (Gustavson, 2001) One of the best examples is the Real-time Platform Reference (RPR) FOM. (SISO-STD-001-1999)  The RPR-FOM v1 provides a transition FOM for those migrating from legacy DIS systems. (IEEE-1278.1)  Under development is draft standard RPR-FOM v2, which will support objects and interactions described in IEEE 1278.1a. Consequently, the objects and attributes described in version 1 and 2 of the RPR FOM are closely tied to DIS.  Many see this popular acceptance (and support by many DIS-like federates) as restricting HLA’s ability to share and reflect new types of system data.  “Furthermore, despite the increased availability of HLA implementation tools, and the well-regarded Federation Development and Execution Process (FEDEP) model, which provides insight into the sequence of activities needed to construct HLA federations (e.g. FOMs), the offering of other widely accepted FOMs has been slow and light…” notes Gustavson.The extensive effort and compromise required in developing a FOM is perhaps the key reason that the Modeling and Simulation (M&S) community has failed to deliver on HLA’s promise of interoperability and reuse.  Hence, the FOM-o-roma: deciding time and again which objects and attributes to simulate, as well as the interactions and their parameters. This is recognized by some as the single most daunting task involved in creating federations that are composed of federates developed through multiple, independent programs.3.2	Operational ConstraintsRapid deployment of Dynamic Federated Simulations still eludes us. Today’s best operational approach is still based upon convention. First we have to agree upon the Federation Object Model (step 1) around which to federate.  Next, all parties have to agree upon the exact process for starting the federation execution (step 2), followed by the joining of federates where in some cases, experience indicates that federates must be joined in some predefined order (step 3). Then the process continues with the publication, subscription and registration of object instances (steps 4, 5, & 6).  Finally, we're prepared to run the federated simulation (step 7). But is this mechanism optimal? What if there were a better approach to development and deployment of federated simulations?  How are late-joiners to be handled? What happens when new federates arrive on the scene to federate with objects not yet in the existing FOM? Is the whole federation required to return to Step #1? No!3.3  Functional Constraints Not WithstandingThere is also another issue outstanding that HLA has yet to address: the conformal issue of how object behaviors (i.e., methods) are handled across disparate federates.  Under the classical Object Oriented Architecture and Design (OOAD) methodology, the entire basis of Object Oriented abstraction, the object, is said to describe both class and method operations on a per-instance basis. (Brando, 1995) HLA diverges from this definition.  Instead, HLA objects can claim no-knowledge of the specific function or method associated with an HLA Object Class. In other words, the HLA Object Model Template only describes the Object Class and its attributes or Interaction-Class and its parameters. This leaves a huge loop-hole with respect to functional end-to-end interoperability in a federation: under HLA, there is no guarantee that an HLA object instance on Federate A will yield functionally equivalent results to that of an HLA object instance of the same object class on Federate B.In the following sections, we will describe our solution to these apparent dilemmas.EMBED Word.Picture.84.0	Our Pedagogical ApproachFor some time we at The Virtual Workshop have struggled to resolve these HLA dilemma, all the while continuing to believe that one day, even under HLA, we would be able to achieve the almost Plug-and-Play methodology we’ve grown accustomed to with SIMNET and DIS.  But how could this functionality be salvaged and yet still retain the most fundamental Publish-and-Subscribe framework of HLA? At first glance, the two approaches appear to be diametrically opposed to one another.  What we needed was a new way of thinking about this problem.  So we began to re-think some of the underlying tenants and constructs behind HLA. We examined object management, the harsh requirements for complete and a’ priori FOM-consensus, and even the federation development process itself.4.1	The Underlying ConstructsIn the spring of 2000, we were contracted to deliver a piece of the National Information Infrastructure program, lead by Jaron Lanier. In partnership with Brown University and the Naval Postgraduate School, Dr. Mike Zyda tasked us to construct a Virtual Name Space Service for inclusion into NPSNET-V.   Like its predecessors, NPSNET–V is based upon the DIS protocol.  Recent implementations of NPSNET have taken on a decidedly Java flavor and have incorporated advances made in the Virtual Reality Modeling Language (VRML) for display on a web browser.One of the ideas hypothesized by Dr. Don Brutzman at NPS was the desire to able to dynamically change the semantics of a given protocol dynamically at run-time. (Brutzman, 1997)  If this could be demonstrated by changing the execution model of an underlying protocol in mid-stream, then perhaps we could change or update the current definition of a class’s method as well. But could this be done?  Being able to alter the execution model at run-time would be a very powerful tool. In short, could we effectively alter dynamically the very behavior of an object?This is what we set out to do. Knowing full well that running code trumps all nay sayers, we set out to build a proof-of-principle demonstration to generate the emergent trait of dynamic semantics.4.2	The Virtual Reality Name Service, v1.0Early in our development cycle, we realized that the Java programming environment would attempt to constrain our run-time re-assignments of object instance methods. The Java Virtual Machine (JVM) uses a class loader to install a Class file, which is subsequently used to create or instantiate that class within the JVM.  However, most all JVMs do not provide an easy mechanism for removing object instances, short of killing the object’s class loader.  In addition, we also wanted to be able to load any kind of object using only a Universal Resource Locator (URL).  So instead of using the built-in class loader directly, we chose to write our own class loader and resolve both of these issues. This permitted programs like NPSNET-V or our own Javelin product, which contains the JAVA Real-Time RTI, to reference Java class objects and instances directly anywhere off the web.4.2.1	The Universal ApproachOur next step was to place the URL references into a standardized directory structure.  Cognizant of both scaling and performance issues, we chose to model our approach in part, after the scaleable, hierarchical Domain Name Service (DNS) that currently supports the Internet.  For our proof-of-principle demonstration, we chose to store our URL references in a directory service that supports the Lightweight Directory Access Protocol (LDAP). LDAP is an open-standard protocol for accessing information services. The LDAP protocol runs over Internet transport protocols, and can be used to access stand-alone directory servers or X.500 directories.  In this way, we could standardize our interface to support HLA-like Base Object Models (BOMs) referencing them through URLs, and gain all the benefits of having a common, sharable repository on the Internet.4.2.2	More Than A Class ActAfter a little experimentation, we found that we were not limited to reading or storing BOMs only as object classes: Java has the ability to serialize an object instance.  We quickly recognized the importance of this because it permits us to achieve our stated goal of creating dynamic behaviors.  Unfortunately, using the built-in serialize commands proved to be a performance-limiting move.  Although somewhat time-consuming, we decided to try our writing own serializable command. This proved to be just the ticket, for without storing all the additional ASCII data that the JVM associated with its serialized objects, we were able to satisfactorily improve the performance of instance serialization.4.2.3	Trajectories Outside The BoxWe are clearly thinking outside the HLA federation box here.  To date, all known HLA federations require the FOM data to be “load first, run later” by the RTI as a Federation Execution Data file.  To put the significance of this into HLA federation execution terms, we can now modify FOM objects, dynamically!  We can populate the FOM, BOM by BOM, as each federate joins the federation.  We can amend the FOM as new federates join late.  Further, late-arrivals can simply acquire the current state of the federation by recalling the last check-pointed data from the VRNS and quickly come-on-line with little interference (or fan fare) to the currently executing federation. What we’ve found is that we can actually reach beyond the a’ priori loading of FOM objects, attributes, interactions and parameters in their totality (as per existing HLA RTI implementations, and perhaps as implied by the HLA rules) and read or store object classes or interactions on-demand or Just-In-Time (JIT).Further, we aren’t limited to only object class or interaction data, we can also read or store run-time object instances as well. Complete object instances, either with initialized data values or running instances including their current run-time state information can be stored through the VRNS.  Indeed, we found that one could easily store or “check-point” an existing federation’s execution by simply saving away all of the public and private attributes (in HLA-speak) as well as well the class object’s methods. This idea was quickly incorporated into our proof-of-concept demonstration.4.2.4	Fair AccessSeveral key features emerged from our prototype VRNS demonstration.  First, we proved that we can feasibility support multiple, concurrent, distributed processes through VRNS.  Because VRNS was based on the LDAP Standard, performance is comparable to that of other LDAP applications.  Further, since each federate process or federation execution is for the most part mutually exclusive of VRNS, its impact on the running federation is minimal.  Consequently, network-based fair arbitration ensures all requests are handled in order of their receipt, and will likely continue up to the point where either network or LDAP congestion occurs (and which we have yet to experience).4.2.5	Multi-Federate State ConsistencyFederation-wide state-consistency is ensured using VRNS because each federate process within a federation requesting data from the VRNS server downloads state-equivalent object classes and instances using the same URL.  Different URLs subsequently result in forwarding pointers that lead toward different objects, QED.  In other words, each federate sees the same objects with the same behavior throughout the federation. Theoretically, this should also apply to a hierarchical “Federation of Federations” as well.4.2.6	A Dynamic SolutionThe VRNS repository can be managed dynamically.  As object classes or object instances demand changes, these changes can be recorded in the VRNS directory. Like DNS, a serial number would be automatically incremented, resulting in cached copies being pushed out to peering services.  In short, because we used URLs to reference our BOM objects, we were able to demonstrate a path to modifying an object’s method, create a new instance of that object, transfer the previous objects public and private instance variables from the currently executing instance over to the newly instantiated instance, and then transfer execution control over to the new instance while simultaneously deprecating the previous one to the garbage collector. 5.0	ConclusionAt The Virtual Workshop, we've been researching a new mechanism by which to build, deploy, and distribute HLA FOM and Base Object Model (BOM) information to federates, within federations, and across hierarchies of federations, dynamically and in real-time. We call this support service the Virtual Reality Name Service (VRNS).  The fundamentals of VRNS provide a mechanism by which OOAD object data and metadata can be stored in a namespace database, outside of the classical tabular FOM "Spreadsheet", and accessed anywhere through the Web.  Through VRNS, we can store object class definitions, object instance information, even object methods (i.e., behaviors) and their associated meta-data.  This information can be stored asynchronously with a federation execution (i.e., dynamically at run-time).  We now have the means to dynamically alter the semantics of various objects, protocols, behaviors, etc., that operate within a federated simulation.  In addition, by using VRNS, object attributes and interaction parameters can be updated dynamically. State-consistency is maintained during federation run-time through the use of internal, monotonically increasing digital signatures, as in DNS services. This has many implications for new types of federated simulations, where late joiners are supported, or dynamic behaviors are implemented.6.0	Future and Follow-On WorkWe recognize the need for integrating time-based queuing requests through VRNS.  Our own Javelin product is based upon time-stamp ordered delivery of every attribute update, so logically follows that we would enhance VRNS to likewise support this feature.Another area for future work involves performance measures and management of complete round-trip access times.  Since physical geographical distances affect round-trip latencies, unfair advantages can be obtained by federates (or hierarchies of federations) which are logically closer to the server.7.0	References(Bachinsky, 2000)	Bachinsky S., Briggs R., Gibson B., Turrell C., “How to Plan, Set-up, and Run a Distributed Simulation Exercise,” Proceedings of the 8th Simulation Interoperability Standards Organization (SISO) Simulation Interoperability Workshop, 00f-SIW-042, Orlando Florida, Sept. 2000.(Brando, 1995)	Brando, T. J., “Comparing DCE and CORBA,” MP 95B-93, The MITRE Corporation, Bedford, MA, March, 1995.(Brutzman, 1997)	Brutzman D., Zyda M., Watsen K., Macedonia M., “Virtual Reality Transfer Protocol (VRTP) Design Rationale,” Workshops on Enabling Technology: Infrastructure for Collaborative Enterprises (WET ICE): Sharing a Distributed Virtual Reality, Massachusetts Institute of Technology, Cambridge Massachusetts, 1997.(Gustavson, 2001)	Gustavson P. L., Hancock J. P., Stapleton C., “The Base Object Model (BOM) Primer: A Distilled Look at a Component Reuse Methodology for Simulation Interoperability,” Proceedings of the 9th Simulation Interoperability Standards Organization (SISO) Simulation Interoperability Workshop, 01s-SIW-086, Orlando Florida, Spring, 2001.(Harkrider, 1996)	Harkrider, S. M. and Petty, M. D., “Results of the High Level Architecture Platform Proto-Federation Experiment,” Proceedings of 15th Workshop on Standards for the Interoperability of Distributed Simulation, Orlando Florida, 1996 (IEEE-1516.2, 2000)	IEEE-1516.2, “Standard for Modeling and Simulation (M&S) High Level Architecture (HLA) – Object Model Template (OMT),” IEEE Standard 1516.2, the Institute of Electrical and Electronics Engineers, Inc., 345 East 47th Street, New York, NY 10017, USA, March, 2000.(Myjak, 1997)	Myjak, M. D., Giroux, R. E., Sharp, S. T., “DIS To HLA Integration, A Comparative Analysis,” Proceedings of the 1st Simulation Interoperability Standards Organization (SISO) Simulation Interoperability Workshop, 97s-SIW-131, Orlando Florida, March, 1997.(Myjak, 1998)	Myjak, M. D., Sharp, S. T. (1998), “Java Real-Time RTI,” Proceedings of the 4th Simulation Interoperability Standards Organization (SISO) Simulation Interoperability Workshop, 98f-SIW-244, Orlando Florida, September, 1998.(O’Connor, 2001)	O’Connor, M. J., Jones D. L., Gerding, J., and Reynolds, R., “Building on the Realtime Platform Reference and EnviroFed FOMs,” Proceedings of the 9th Simulation Interoperability Standards Organization (SISO) Simulation Interoperability Workshop, 01s-SIW-041, Orlando Florida, March, 2001.(SISO-STD-001-1999)	SISO Standard, “Real-time Platform Reference FOM,” Simulation Interoperability Standards Organization, Inc., SISO-STD-001-1999, P. O. Box 781238, Orlando, Florida USA 32878, USA, 1999.(Thorpe, 1987)	Thorpe, J.A., “Future Views: Aircrew Training 1980-2000,” U.S. Air Force Office of Scientific Research, Bolling Air Force Base, Washington D. C., 1987.(Wood, 1997)	Wood, D. D., Petty, M. D., Cox, A., “An HLA Gateway for DIS Applications,” Proceedings of the 19th Interservice/Industry Training Systems and Education Conference, Orlando FL, December, 1997.About the AuthorsMichael D. Myjak is Vice President of Research and Development, Chief Technical Officer and co-founder of The Virtual Workshop, Inc., where his current role is as chief architect of Javelin, a Java-based Run-Time Infrastructure for the Next Generation of Internet applications.  In 1982, Mr. Myjak received two Bachelor of Science Degrees from Clemson University, one in Computer Science and the other in Engineering Technology.  He obtained his Master of Science Degree in Computer Science - Systems from the University of North Texas in 1988 while employed with the Computer Science Laboratory, Corporate Research and Development labs at Texas Instruments.  Prior to founding The Virtual Workshop, Mr. Myjak was a Senior Research Scientist with the Institute for Simulation and Training, at the University of Central Florida where he also taught "Building Virtual Worlds."  Mr. Myjak has been an active participant in Modeling and Simulation standards activities for a number of years, and was recently re-elected as Chair of the Standards Activity Committee (SAC) of the Simulation Interoperability Standards Organization (SISO).  He has previously Chaired of the Run Time Infrastructure and Communications Forum and the Run Time Infrastructure Interoperability Study Group under SISO, and the Internet Engineering Task Force’s (IETF) Large Scale Multicast Application (LSMA) working group. Mr. Myjak is active in the Web 3D consortium's Virtual Reality Transfer Protocol Working Group, and the Internet Research Task Force’s Reliable Multicast Research Group.Sean T. Sharp is a recent graduate of the University of Central Florida, where he received MS and BS (Magna cum Laude) degrees in Computer Science.  Mr. Sharp is currently a Senior Software Engineer at The Virtual Workshop where he has principle design responsibilities for the JAVELIN project.  He previously worked as a research assistant at the Institute for Simulation and Training, where he received the 1997 Student Researcher Award for his work on the Platform Proto Federation. The HLA-to-DIS Gateway was developed at the Institute for Simulation and Training. Interestingly enough, according to (Bachinsky, 2000), these problems still plague federated simulation developers to date.  This is particularly true when a federation requires interfacing with legacy DIS systems through an HLA gateway. "The Java specification allows classes to be unloaded when they are no longer needed, but few current Java implementations unload classes." http://Securingjava.com DNS currently scales to support upwards of 4x109 hosts over the commodity Internet. LDAP is a lightweight alternative to the X.500 Directory Access Protocol (DAP) for use on the Internet.00F-SIW-037		00F-SIW-037PAGE  PAGE  3	 EMBED Word.Picture.8  