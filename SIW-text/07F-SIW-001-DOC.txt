A behavioral engine and a motivational engine: A joint operation. Christophe MeyerTHALES ‚Äì Security Solutions & Services ‚Äì ThereSIS1 rue du G√©n√©ral De GaulleOsny ‚Äì BP 226 ‚Äì 95523 Cergy-Pontoise CedexFRANCE+33 (0) 1 34 22 21 27christophe.meyer@thalesgroup.comKeywords:Computer Generated Forces, Artificial Life, Behavioral & Motivational Engines ABSTRACT: As military operations become increasingly urban and civilian oriented (Military Operation in Urban Terrain; Military Operation Other Than War and Peacekeeping), Modeling and Simulation systems have to embed new capabilities. These include simulation no longer limited to regular forces (exhibiting precise, stereotypical or "doctrinal" behaviors) but also civilians and atypical fighters (showing chaotic, irrational and even random behaviors).Regular forces simulation requires engine(s) which are able to define and reproduce a perfectly described reaction, related to specific battlefield events (perform actions on contact, react to indirect fire‚Ä¶).Civilians and atypical fighters simulation involves engine(s) able to deal with numerous possible reactions from the same actor facing the same event, depending on several parameters (internal state, external stimuli‚Ä¶).This paper discusses the opportunity to exploit such two engines in the same simulation, by providing the example of a CGF already used in several international programs. This CGF implements both a behavioral engine (rule based system) for doctrinal behaviors and a motivational engine (free flow based system) for civilian and atypical fighters' behaviors.This paper introduces these two engines, their interactions, the means to be parameterized and their possible evolutions.Computer Generated ForcesModeling and Simulation systems increasingly embed Computer Generated Forces (CGF) in synthetic environments. Such systems are in charge of animating virtual forces (agents). In Tactical individual/crew training systems for example, trainees (possibly in their simulators) are immerged in a virtual environment populated with virtual agents (adversaries, team mates, allies, neutrals‚Ä¶) that may interact (detections, firing‚Ä¶) with them.  The quality or operational efficiency of the Modeling and Simulation systems is then notably correlated with the fidelity of the behaviors exhibited by the virtual agents.For much of the last century, Western defense relied on the Cold War doctrines of Deterrence and Containment. It partially explains that before the relatively recent evolution of the military operations, CGF (most likely to be called SAF ‚Äì Semi-automated Forces at that time) used to exhibit a small hard-coded set of behaviors for virtual entities. These old-fashioned systems called upon basic paradigms to simulate virtual agent‚Äôs behaviors: finite states automata, basic rule-based systems‚Ä¶ In some cases, those strategies and doctrines still apply (with their corresponding Modeling and Simulation systems) as long as only stereotyped entities need to be simulated. But new theaters of operation and new threats emerge and require new thinking, new doctrines and new Modeling and Simulation systems.Doctrinal entities‚Äô SimulationEssentially, real military entities are supposed to fulfill precise missions and obey non-ambiguous and deterministic doctrines. Military missions consist in providing entities with objectives (occupy a specific battle position, move toward a specific point of observation‚Ä¶). Commanders are expected to exercise their own judgment in carrying out their missions by providing subordinates with precise steps (low-level actions) so as to achieve their own (sub-) missions. Figure 1.  Mission: Planned actions‚Äô sequences to reach specific objectivesMilitary doctrine, at unit-level, should be seen as tactics, techniques, procedures and reactions to be applied when specific battlefield events occur (react to indirect fire, take active air defense while moving, actions at an obstacle‚Ä¶).Figure 2.  Doctrine = Dynamic reactions to battlefield events during achievement of the missionsTo simulate doctrinal entities, a Modeling and Simulation system should embed a behavioral engine able to define and manage non-ambiguous and deterministic rules. Most of the recent CGFs call upon rules-based systems for doctrine and (mainly linear) actions graph for missions. Some CGF are characterized as open because they allow the user to create new rules after the complete system delivery.Atypical entities‚Äô SimulationCivilians and atypical fighters stand out from military (doctrinal) entities as they may exhibit chaotic, irrational and even random behaviors. To compare with previous concepts: Civilians missions may be considered as regular predefined behaviors (everyday life) such as waking up, getting dressed, eating, and going to work, They may correspond to similar military low-level actions (move to, observe‚Ä¶).Atypical fighters‚Äô missions cannot be clearly distinguishable from regular forces missions.Civilians‚Äô doctrine may appear intrinsically as an antinomy, as civilian do not behave in a deterministic way. However, by analogy, civilians doctrine consists in different kinds of reactions (deterministic, stochastic‚Ä¶) related to different kind of perceptible objects (even agents) or events.Atypical fighters doctrine may be a mix of military and civilians-like doctrine: specific deterministic military reactions mixed with fuzzy, random or unorganized individual reactions.SETHI OverviewDeveloped by Thales D3S, SETHI is a real time CGF which enables the creation of simulated actors, as well as their interactive animation and effects on a virtual battlefield. While a scenario is running, SETHI manages all the automated entities defined through scenario preparation. Through a user-friendly MMI (Man-Machine Interface), the operator can control any automated entities, modify their behavior or monitor the scenario parameters.Figure 3.  SETHIFunctional architectureThe Figure 4 gives an overview of the functional architecture of SETHI:  EMBED Visio.Drawing.11  Figure 4.  SETHI‚Äôs functional architecture The SETHI architecture is based on modular components: The simulation kernel sequences the other components, and allows an external player to take control over any SETHI entity or give back the entity to SETHI at any time.The physical models determine the trajectory/path, detection, firing sequences and damages of each entity. In these models, account is taken of the characteristics of each entity as defined in the Weapon System Database (WSDB), the terrain shape and features, the other virtual (i.e. manned simulators) or constructive (i.e. automated) entities.The behavioral / motivational models settle the behavior of each entity (e.g. a tank) within its unit (e.g. a platoon). These models comprise the mission parameters (e.g. firing authorizations, formations from the Force System Database ‚Äì FSDB).The terrain management process allows a very efficient exploitation of the SETHI polymorphous terrain to perform the following four tasks:Path-finding (including tactical movement and dynamic obstacle avoidance),Terrain following,Inter-visibility,Motion according to terrain type and entities‚Äô crossing abilities.This paper will focus on the behavioral / motivational models.SETHI behavioral engine In SETHI, the individual or aggregated reactions of the entities during the Simulation used to be only defined in a sophisticated Classifier System-based system.Figure 5.  The BDB (Behavioral Database)The BDB allows the user to define several ‚ÄúBehavior databases‚Äù (called Doctrines for typical ‚Äì military forces): for example, one Doctrine for each side (friend, enemy, neutral forces). EMBED PBrush  Figure 6.  Definition of a behavioral ruleThis system is used to specify the expected reaction of the entities facing synthetic environment events and their rule of engagement ‚Äì ROE ‚Äì (fire authorization, type and coordination) and their action on contact ‚Äì AOC ‚Äì (when being fired upon or when enemy is detected).The different types of reactions are:ImmediateParallelInterruptive EMBED Visio.Drawing.11  Figure 7.  ReactionsParallel and immediate reactions are simultaneous, successive or immediate (messages) actions that can be performed during the achievement of the mission. It provides the entities with autonomous behaviors that will not modify their ordered mission. Interruptive reactions are simultaneous or successive actions that can suspend the mission. After the achievement of an interruptive reaction (like withdrawing), the mission should be altered or automatically aborted.A rule is made of a condition part: related to the entity internal state, its personal perception of the environment, and a conclusion part: reactions to be performed (built on generic actions - action pattern ‚Äì with numerous parameters: move_to, operational_report, aim, shoot‚Ä¶).A hierarchical ‚Äúfitness‚Äù (priority management) system allows the engine to deal with conflicting rules. Rule-based systems may intrinsically raise some complex issues, such as combinatorial explosion (a typical problem in decision trees systems) when it becomes necessary to fine-tune the priority management of conflicting rules. The hierarchical ‚Äúfitness‚Äù system allows some automatic ‚Äúpruning‚Äù, so as to focus on proprietary reactions rule-sets. Military doctrine managementThe next paragraph describes some typical rules for military entities defined in the basic SETHI behavioral database:IF artillery_strike_detection_increase = True AND in_artillery_zone != True THEN send_tactical_situation_report ( Stop.Figure 9.  ‚ÄúIn front of an Artillery strike‚Äù ruleThis rule allows the entities to stop in front of artillery strikes and to send an operational message to the upper-level of command. The upper-level may have corresponding treatment (when a subordinate faces an artillery strike‚Ä¶) so as to provide subordinates with specific orders (e.g. ‚Äúaccelerate!‚Äù) who may interfere with natural reactions (‚ÄúStop‚Äù in this example). The final decision will depend on the entity level of obedience. IF opponent_detection > 0 AND (firing_authorization = True OR (firing_authorization = Tight AND recently_under_attack = True ) )THEN send_tactical_situation_report ( Aim  ( Shoot.This rule deals with ‚Äúactions on contact‚Äù. It defines the appropriate reaction when an entity (an aggregate) faces an opponent. SETHI manages variables of a behavioral system (see ‚Äúfiring_authorization‚Äù in the previous rule) that allows the user (or the battlefield events manager) to modify the mission parameters (for each entity) in real time.Figure 10.  Behavioral variables‚Äô managementAtypical doctrine managementTo manage atypical entities, SETHI behavioral engine allows introduction of random factors to the rules.The next paragraph describes some atypical rules for civilians entities defined in the basic SETHI behavioral:IF autonomous_behavior = True AND random < 0.30 THEN random_move.This rule allows entities to randomly (stochastically) choose a random position to reach. The action pattern ‚Äúmove_to‚Äù integrates numerous parameters to describe the type of movement and the position to be reached. It notably permits the specification of a random movement with radius, angles‚Ä¶ of random position finding.Figure 9.  Random move parametersIF my_feeling_for_detonation = flee AND detonation_detection_increases THEN flee_detonation.This rule allows entities to flee any detonation. The ‚Äúflee_detonation‚Äù action relies on a specific set of parameters for the action pattern ‚Äúmove_to‚Äù.SETHI behavioral engine relies on a Hierarchical selection of action Architecture / Classifier System-based. This engine may be called an ‚ÄúAdvanced Situated Artificial Intelligence‚Äù system.  Thanks to this architecture, SETHI manages doctrinal and autonomous behaviors.  Military (Basic Combat Actions from Platform to Company level):Posting at Woods and Village Edges,Tactical Moves,Basic/generic Missions: mission patterns,Reconnaissance Mission / Patrol,Battle Position Occupation,Check Point  Management,‚Ä¶Civilians (Pseudo-Random behaviors)Constrained, Random, Influenced Moves Stereotyped Behaviors (Gregarious Instinct)‚Ä¶SETHI motivational engine The behavioral engine is perfectly suited for either doctrinal reactions or simple atypical behaviors. But it does not allow finely dealing with human factors or with complex atypical behaviors. The behavioral engine is an improved ‚Äúflat decision structure‚Äù, where decisions are taken at each node of the hierarchical decision selection system. For example if an applying rule presents fitness (priority) of 100, it will be activated (and will determine the corresponding behavior) even if numerous other applying rules (with lower individual fitness but higher combined one) suggest a common behavior.Example:If these tree following rules apply:IF opponent_detection > 0  THEN Aim  [fit=100]IF danger_level > 10  THEN Flee  [fit=80]IF ammo_availability < 30  THEN  Flee  [fit=70]The priority system will naturally lead to the ‚ÄúAim‚Äù action even though the appropriate decision may be ‚Äúflee‚Äù (as two reliable rules suggest doing so).There are several possibilities to handle this kind of conflicts:Define new rules combining the appropriate ones (e.g. IF danger_level > 10  AND ammo_availability < 30  THEN Flee  [fit=150])Reverse the decision process so as to consider simultaneously all the advised actions with the corresponding rules and their relative priority (e.g. ‚ÄúAim‚Äù: 1 rule, fitness=100 ; ‚ÄúFlee‚Äù: two rules, fitness=f(80,70)>100; decision = ‚ÄúFlee‚Äù). The first solution brings to analyze all the possible conflicts and may lead to combinatorial explosion. The second may let situations arise, where numerous insignificant rules considered together surpass the appropriate one, leading to a bad decision. It will also bring to a deep analysis of the whole set of rules.SETHI implements a solution closer to the second one. The actions sequence with the highest fitness (non-linear combination of the corresponding rules) is selected in a ‚Äúwinner-take-all‚Äù process. If other applying rules suggest sequences of actions not in conflict with the selected one (some tank may fire during a movement), they will be simultaneously applied. In other respects, such ‚Äúflat decisions structure‚Äù is particularly inappropriate for ‚Äúhuman factors‚Äù (motivations, emotions‚Ä¶) introduction; for example, if the system requires simulating behaviors where the final decision will be function of the internal (emotional) state of an entity (e.g.: ‚Äúdepending of its spirits, an entity will face or flee‚Äù)Obviously, it is possible to imagine rules like: IF danger_level > 10  AND spirits_level < 70%  THEN Flee With such a solution, the problem becomes ‚Äúhow to manage the internal state dynamics?‚Äù (how to determine, in real time, the value of the spirits_level variable) and ‚Äúhow to deal with intrinsic relationships between internal states and external stimuli ‚Äì like received orders, detections‚Ä¶‚ÄùSETHI motivational engine has been developed in order to address these two aspects (conflicting decisions and ‚Äúhuman factors‚Äù). It is based on Free-flow architecture. Free-flow architectures were first introduced by Rosenblatt and Payton in [1]. Based on Tyrell work [2], Steegmans, Weys, Holvoet and Berbers proposed architecture for designing roles for situated agents [3]. Such a system relies on a hierarchy where internal state and action nodes are linked thru an activity network.The hierarchical activity network defines interactions between internal states (tiredness, aggressiveness‚Ä¶), external stimuli (entities detections, terrain perception‚Ä¶) and actions (decision processing).Each element may have a positive or negative link to others (seeing a friend being hurt may increase the aggressiveness and decrease the level of fleeing motivation). Figure 10. Schematic illustration of SETHI motivational free-flow architectureTo implement the SETHI motivational engine it is necessary to build a cognitive model of relevant motivations, behaviors and external stimuli. Then the engine will be parameterized accordingly (see later example). The build of such a cognitive model relies on operational expertise (‚Äútiredness should increase linearly over time with exponential increase when performing certain specific tasks‚Äù; ‚Äúin real conditions, the fleeing motivation is linked to tiredness this way‚Äù‚Ä¶). Different experts may set up different models. The motivational engine is nothing but a tool allowing the implementation a model given by an expert.Combining SETHI behavioral engine and motivational engineThe following figure shows a typical joint implementation of the two SETHI engines:Figure 11. Schematic illustration of joint SETHI Motivational & Behavioral enginesThis architecture combines the capacities of the two motivational and motivational engines.Internal state and motivations are separated as internal state will only concern objective data (casualties, fuel level, firing authorization‚Ä¶) and will be directly connected to the behavioral engine. When necessary, a motivation may rely on an internal state variable (e.g. Casualties‚Äô level may decrease aggressiveness‚Äô motivation).In systems where SETHI motivational and behavioral engines are simultaneously present, a large variety of behaviors may be simulated. In that joint engines system, agent may be simulated using one or the two engines:Regular forces will only implement the behavioral engine (no connection with any motivation)Purely reactive agents (animals‚Ä¶) may only implement the motivational engine (no behavioral rules)Atypical fighters and civilians may implement both engines (motivations and behavioral rules). Obviously, the architecture allows simultaneous managing of these different agents‚Äô kinds.Example of a MOOTW scenarioThe scenario takes place in a pure fictitious country where civilians are facing a dictatorial military force.The aim of the civilians is to overpass a checkpoint managed by the military force.  Civilians are modeled using both engines. Their mission is to move trough the checkpoint. Their behavioral rules are simple ones (‚Äúmaintain a short distance with your neighbors‚Äù - herding behavior; ‚Äúfollow any detected friend leader‚Äù‚Ä¶). They implement three ‚Äúmotivations‚Äù: Fear, Aggressiveness and Weariness (motivation of leaving the conflict).Table 1.  Simple model of Civilians‚Äô motivationsMotivationsAggressivenessFearWeary-nessEvolution speedSlowFastVery slowActivityExternal stimuliEnemies are close++ +Agitator is close+ + +--Close friends are aggressive++Close Friends are been hurt+ ++Close Friends are calm- --Over time--+Close friends are scared-+Close firing+ ++Internal StateBeing hurt- + ++Actions feedbackFighting++Fleeing-- -+ +Moving+The previous table shows a very simplified version of the model implemented in the scenario. However, it allows to overview some of the interactions between internal states, motivations, and external stimuli.As already stated, any expert may agree or totally disagree with this significantly simple model. Dictatorial military force only implements the behavioral engine with rules like: ‚ÄúKeep your position‚Äù, ‚Äúpush away close civilian‚Äù, ‚Äúshoot at trespassers‚Äù‚Ä¶Synopsis of the scenario‚Äôs run Figure 12.  Evolution of the motivations over time for a particular civilian1. Facing the military force, civilians stop and observe. Aggressiveness increases as military force becomes closer.2. Agitator harangues the crowd,   making Aggressiveness increase exponentially.3. Civilians threaten military force. Military force responds by aiming at them.4. Facing the menacing force, some civilians are frightened (Fear increases).5. Agitator harangues more and more making Aggressiveness increase.6. Some civilians stop, other feel frightened (depending on their surrounding friends‚Äô attitude)7. Fleeing Civilians decrease their fear. Aggressiveness increases for those who approach the agitator.   8. Military force now fire at some civilians. For them, fear increase exponentially.9. Some civilians give up (to high fear and weariness).10.  Some civilians under agitator‚Äòs control persevere in trying to overpass the checkpoint.11. Most of them are now exhausted and fearful. They resign themselves to leave the fight and the area.The realization of this scenario has been quite ‚Äútime-consuming‚Äù, as the motivational engine‚Äôs parameterization requires thought, both technical and operational experts‚Äô interventions, tests‚Ä¶Example of a human-factor modelingSETHI engines have been used for technico-operational simulation where the focus was ‚ÄúIntroduction of human factors in Modeling and Simulation systems‚Äù.The motivational engine has been used to deal with human factors (like ‚Äústress‚Äù, ‚Äútiredness‚Äù‚Ä¶).The model for intrinsic evolution of these human factors was quickly reached by consensus (between different operational experts): what makes stress increase, what makes it decrease‚Ä¶On the other hand, it has been particularly hard to focus on the same model for interactions between human factors and behaviors (‚Äúwith high stress, a regular soldier will behave this way‚Äù, ‚Äútiredness makes soldier devious,‚Äù etc‚Ä¶).That illustrates one of the difficulties of dealing with such engines: Even the ‚Äúpaper‚Äù model is difficult to define for operational experts.Conclusions: which engine(s) for which agents?While behavioral engine‚Äôs parameterization is quite simple (creating new variables and corresponding rules), Motivational engine‚Äôs parameterization is more complex.Generally speaking, Free-flow architectures used in Modeling and Simulation systems are always hard to parameterize and not only require operational expertise but also technical ones.The ‚Äúpaper‚Äù modeling of the agents should determine the architecture of any Modeling and Simulation systems. Some systems require only purely reactive agents (directly controlled by a set of animators). In this case a SAF based on finite state automats is perfectly suited (and will be very easily parameterized by users or operational without any need for technical expertise). Some systems only require adaptive agents, able to react to dynamic battlefield events (open area traditional fights). In this case a simple behavioral engine may be perfectly relevant.However, as military operations become increasingly urban and civilian oriented, Modeling and Simulation systems require more and more complex agents which may only be simulated with sophisticated systems.Beyond complexity issues, sophisticated systems are also definitively cpu-consuming. A free-flow based system used for simple agents‚Äô management is counterproductive: complex parameterization, underused capabilities, cpu-consumption, and difficulties for users to apprehend it. SETHI has been designed so as to simultaneously manage different complexity-level agents with appropriate software components, each with their corresponding parameters (cpu, memory‚Ä¶). A key solution for future CGF certainly relies on such open and modular architectures. The intrinsic possibilities of progressive expansion offered by this kind of incremental architecture are obviously powerfull, as the level of complexity for virtual agents may be progressively increased:Step 1: Simple behaviors. Definition of deterministic agents with simple rules within the behavioral engine (or any equivalent)Step 2: Enhanced behaviors. Progressive introduction of possibly conflicting rules with priority parameterizationStep 3: Motivations. Parameterization of the motivational engine (or any equivalent) only for requiring complex agents. Motivations are added with direct links with previously defined behaviors. Step 4: Human factors. If necessary and only for requiring agents, enhancement of the motivations by the introduction of dynamics internal states (and their interactions with existing motivations and behaviors).PerspectivesOngoing developments for SETHI are now focused on a third engine (the ‚Äúemotivational‚Äù engine ‚Äì for emotional & motivational) that calls upon a Learning Classifier System based architecture [4]. The idea is to provide virtual agents with the capability of optimizing their strategies so as to globally satisfy their motivations. The very first requirement for this system is to be compatible with the two previous engines (behavioral and motivational). Simultaneously, research and development efforts involve the development of adaptive opponents. Based on previous works described in [5] and [6], such ‚Äúhigh-level‚Äù adaptive agents will be used to assist (or replace in self-training systems) simulation manager / controller or animator(s) by managing autonomous (opponent) forces.  Such an adaptive opponent will build a model of the trainee so as to provide opponent forces with high-level (strategic) orders related to his/her forecasted actions.3. References[1] K. Rosenblatt and D. Payton, A fine grained alternative to the subsumbtion architecture for mobile robot control. International Joint Conference on Neural Networks, IEEE, 1989.[2] T. Tyrrell, Computational Mechanisms for Action Selection. Ph.D thesis, University of Edinburgh, 1993.[3] E. Steegmans, D. Weyns, T. Holvoet, and Y. Berbers, Designing Roles for Situated Agents, AAMAS Workshop on Agent-Oriented Software Engineering. AOSE 2004, New York, July 19, 2004. [4] J.H. Holland, Adaptation in Natural and Artificial Systems. MIT Press, 1998.[5] C. Meyer, J.-G. Ganascia, and J.-D. Zucker, Learning Strategies in Games by anticipation. Proceedings of the Fifteenth International Joint Conference on Artificial Intelligence IJCAI-1997, Nagoya Japan - Morgan Kaufmann 1997.[6] C. Meyer, I. Akoulchina and J.-G Ganascia., Two Approaches of Human Behavior Anticipation', Proc. of ICTAI'97 Conference, NewPort Beach, CA, USA 1998.Author BiographieCHRISTOPHE MEYER is Synthetic Environment R&D and Products Manager in Thales Security Solutions & Services Division. He is a graduate of Paris 6 University with a PhD in Artificial Intelligence. He has over a ten-year experience in human behavior modeling, Simulation and Game Theory.  He has absolutely no sense of humor.  Many other factors contribute to the global quality of the system: visual, interoperability with real equipments, reproduction of real sensations for the simulators, mechanical, physical, motion, detection, attrition models‚Ä¶ This paper will only focus on the virtual entities‚Äô behavior.  Synthetic environment mastering: each entity will interpret orders or autonomously adapt their behavior according to terrain. As said by operational experts: ‚ÄúTerrain commands!‚Äù Military Operation Other Than War11109876543121