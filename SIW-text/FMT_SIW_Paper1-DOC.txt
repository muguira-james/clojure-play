A Federation Management Tool:Using the Management Object Model (MOM) to Manage, Monitor, and Control an HLA FederationDeborah FullfordDarren WetzelMäK Technologies 185 Alewife Brook ParkwayCambridge, Massachusetts 02138617-876-8085deb@mak.com, wetzel@mak.com Keywords:Exercise Management, Exercise Control, Management Object Model, HLA ImplementationAbstract:  Recognizing the need to be able to monitor and control federations, the HLA developers created an object model, designed to provide insight into the operations of  federations.  This object model is called the Management Object Model (MOM). Based on input from current federations, such as the Joint Training Confederation, the MOM has been expanded to provide extensive information and control capabilities for the federation, the individual federates, and the RTI.  In addition, the MOM can now be extended with additional sub-classes, class attributes, or parameters that can be used for the control and monitoring of federation-specific data. Under a DMSO-sponsored effort, MäK Technologies, is developing a Federation Management Tool (FMT), based on MOM data, that can be used by any federation to monitor, control, and manage a federation. The FMT is an ideal debugging tool, providing both federation and individual federate status information.  In addition, during federation execution the FMT can be used to monitor the progress of the federation and to actively control the federation during emergency situations.  In this paper, MäK outlines how the FMT and the MOM can be used to ensure the proper execution of HLA federations.  IntroductionOver the last decade, the number and size of distributed exercises have increased dramatically. Part of this trend can be attributed to the reduction in the price/performance of computers, reducing the overall cost of exercises.  In addition, introductions of new enabling technologies, such as the High Level Architecture, provide a scaleable architecture that supports large-scale simulations.  While larger, more complex exercises are advantageous to the end user, they can be a challenge for those responsible for their execution.  These challenges become even more complex under the HLA’s dynamic data distribution.  For example, even if one federate successfully sends data over the network, if the other federates have not subscribed to the data, they will not receive it.  Now incorporate the added dimension of the Data Distribution Management’s routing spaces and the complexity of the problem has increased.HLA adds other complexities to federation management.  What FED file are the federates using?  What is the RTI version?  What’s a federate’s lookahead value?  These are typical questions that a federation manager may ask during federation testing. A lot of time, money, and effort goes into the planning of a distributed exercise.  That places a lot of pressure on the federation management to make sure the exercise is run properly.  To complete this task, federation managers need to be able to monitor and control the federation during execution.  Typical questions a federation manager may ask include:Who has joined the federation?When was the last federation save?What is the current federation time?What objects have been discovered?So where does a federation manager turn to get answers to these questions, tothe HLA’s Management Object Model (MOM).  Through the MOM’s objects and interactions a federation manager can successfully debug, monitor, and control a federation. 2.   The Management Object Model (MOM)Early on in the development of the HLA, the Architecture Management Group recognized the need to provide federates the ability to access management data about the RTI, the federation, and individual federates.  In 1996, the AMG formed a study group to determine what RTI, federation, and individual federate information is required.  The result of that group was version 1.0 of the MOM.  Based on feedback from the first large scale HLA exercises, such as the Joint Training Confederation (JTC) and the Synthetic Theater of War (STOW), the MOM was not only essential but also needed to be enhanced.  Their feedback was incorporated into the original MOM to create the current MOM as specified in the HLA Interface Specification, version 1.3.  The MOM was designed to provide management information and control of the RTI, federation, and individual federates through objects and interactions.  Similar to the way a federate would subscribe to simulation data, a federate can subscribe to management data.  However, as opposed to the information coming from another federate, it comes directly from the RTI.In addition to obtaining management information about the federation, the MOM provides federates with the ability to control the federation through interactions.  Under this mechanism, the federates initiate control interactions that are sensed and reacted to by the RTI.  In addition to the MOM’s default objects and interactions, federations can extend the MOM to provide federation-specific management functions.  Any of the MOM’s objects and interactions can be subclassed, providing a federation with a solid management infrastructure to build upon.  MOM-extended objects and interactions are no longer published by the RTI but instead by individual federates as specified in the FOM. 2.1   The MOM’s ObjectsThe MOM consists of two objects, a Manager.Federation object, and a Manager.Federate object.  These objects are used to provide persistent data about the federation, the RTI, and individual federates.  There is a default value associated with the update of these attributes (which can be modified through the MOM interactions).  The attributes of Manager.Federation provide federation information, such as:Federation nameList of federatesFED file IDRTI VersionSave statusThe attributes of Manager.Federate provide federate information such as:Federate type and IDHost name of computerTime management informationState of the federateObject and interaction informationNumber of objects and interactions sentNumber of interactions sent and receivedNumber of objects updated and reflectedNumber of objects owned2.2 The MOM’s InteractionsThe MOM interactions are divided up into four subclasses,  Adjust, Request, Report, and Service. Adjust interactions are used to control aspects of the federation, federate, and the RTI.  Request interactions are used to obtain RTI information from another federate.  Report interactions are used to report RTI data about a federate.  They are issued by the RTI in response to Request interactions.  The Service interactions are used to invoke RTI services on behalf of another federate.The type of control available through the Adjust interactions include Timing of attribute updatesOwnership of attributesSetting service and reporting loggingThe type of information available through the Report and Request interactions includeSubscription and publication informationOwnership information Update and Reflection informationAlert statusThe types of control available through the Service interactions include Resignation of federatesSaving and restoring of a federationPublication and subscriptions of federatesSetting ownership and transportation of attributesSetting federates time management parametersAs illustrated above, the MOM’s objects and interactions contain a wealth of information designed to assist a federation manager in the development, testing, monitoring, and management of an exercise.  The question now is how to take advantage of all this data.  3.  The Federation Management Tool The Federation Management Tool (FMT) is being developed to provide the HLA community easy and intuitive access to the MOM data.  The idea of a federation management tool originated in the Aggregate Level Simulation Protocol (ALSP) community to support the large Joint Training Confederation exercises.  When the JTC migrated into the HLA arena, MITRE modified the tool to communicate via the RTI and to use version 1.0 of the MOM, thus developing the first instantiation of the FMT.  MAK Technologies, under the direction of DMSO, is modifying the original ALSP-specific FMT, to create an intuitive, commercial grade FOM-independent tool that will enable the entire HLA community to easily traverse the MOM’s objects and over 50 interactions The FMT contains four windows, Startup window, Federation Overview window, Federation Monitor window, and Federate Monitor window.  Each window has on-line help to walk the user through the displayed data and menu options available In the FMT Startup window, you specify a name for the FMT federate, the FED file, and the mode in which you will be participating. You can also open a dialog box to change parameters before you join the federation execution. The Federation Overview window displays general information about the federation.  FMT users will most likely spend most of their time in either the Federation Monitor Window or the Federate Monitor window.  In these windows the user can obtain general and specific information about the federates and can actively control aspects of the federation.3.1  Federation Overview WindowThe Federation Overview window provides the user with the following information:Federation nameLocal timeFederation timeRate at which simulation is progressingCurrent status of the federationWhether or not any saves have occurred.Figure 1, depicts the Federation Overview Window. Figure 13.2  Federation Monitor WindowThe Federation Monitor Window lists all the federates in the federation and provides federate information and access to MOM control interactions.  In the Federation Monitor window, a user can Schedule saves and restoresRequest object updatesAdvance federate timeInitiate alert loggingCustomize the FMT displayIn addition to the default information available, the user can choose between four view modes.  The information available to the user will alter depending on the mode they choose.  The four modes are:Time Mode: A user can view the simulation time, set simulation time, toggle display between actual time and desired time, specify game rate, toggle display of game rate range, lookahead time, and simulation time.Object Mode: A user can query object count by class, select federates to display, toggle object display font and object count format, and show or hide subclasses of the Manager class.Communication Mode: A user can view network information, either graphically or in a text format.  File Mode: A user can view the FED file.  Figure 2 depicts the Federation Monitor Window.  EMBED Word.Picture.8  Figure 23.3  Federate Monitor WindowThe Federation Monitor Window displays federate specific information and provides access to some of the MOM Interaction classes.  A user can view time information, object information, or interaction information. The type of information available includes:Time since last advanceWhether a federate is constrained or regulating timePublication information about a federateSubscription information about a federateTotal number of Objects ownedObjects updatedObjects reflectedUpdates sentInteractions sentInteractions reflectedSpecific federate information about a particular objectBesides the large amount of useful information available in the Federate Monitor window, the user can control the RTI’s settings, a federate’s settings, an object’s setting, and federate actions, as follows:RTI Settings: A user can set MOM report periods, toggle service reporting, and toggle exception logging.Federate Settings: A user can alter a federate’s subscription and publication of both objects and interactions, and can enable a federate to be time constrained and time regulated, enable asynchronous delivery and specify lookahead time.Object Settings: A user can modify ownership status of an object and delete an object instance.Federate Actions: A user can cause a federate to resign from the federation, mimic the federate’s report of a save and of reaching a synchronization point, and advance a federate to next time or next event. Figure 3, depicts the Federate Monitor window. Figure 34.   ConclusionManaging an HLA federation is a complex task.  It requires knowledge of the individual federates, the federation, and the RTI.  Recognizing the need for internal RTI data, the HLA developers have created a Management Object Model that can be used by the federation to both control and monitor the RTI, the federation, and individual federates. Through the MOM’s Manager.Federate objects and the Request and Report interactions, any federate can obtain information about the state of the federation, a federates publications and subscriptions, a federates time management parameters, or the number of objects and interactions being updated and reflected in the federation. In addition, using the Adjust and Service interactions federates can control the federation by adjusting RTI parameters or invoking RTI services.  MäK Technologies, as part of DMSO’s HLA Tool program, has developed a Federation Management Tool that will enable HLA users to take advantage of the MOM during an exercise.  The FMT provides a graphical, intuitive view of the MOM data, and allows users to easily send any of the MOM interactions.  Using the FMTand the MOM, federation managers have a single tool that will assist in the debugging, analysis, and execution of a distributed exercise.  5. References[1] IEEE P1526.1, M&S HLA – Federate I/F Spec, Draft, July 1998.[2] MäK Technologies, FMT User Manual, January 1999Author BiographiesDEBORAH FULLFORD is the Director of Business Development at MäK Technologies.  She is a General Drafter on the HLA Standards Development Group.  She has a M.S. in Aeronautical Engineering from the Massachusetts Institute of Technology and a B.S. in Aerospace Engineering from Boston University. DARREN WETZEL is a senior engineer at MäK Technologies.  He is the principle investigator for the Federation Management Tool.  He has a B.S. in Electrical Engineering from Cornell University.