Architecture and Performance of an HLA-Based Distributed Decision Support System for a Semiconductor Supply ChainBoon Ping GanPeter LendermannChin Soon ChongProduction and Logistics Planning GroupSingapore Institute of Manufacturing Technology71 Nanyang DriveSingapore 638075bpgan@SIMTech.a-star.edu.sg, peterl@SIMTech.a-star.edu.sg, cschong@SIMTech.a-star.edu.sgBrett Marc DuarteJohn W. FowlerThomas E. CallarmanInstitute of Manufacturing Enterprise SystemsDepartment of Industrial EngineeringPO Box 875906Arizona State UniversityTempe, Arizona 85287-5906, USAbrett.duarte@asu.edu, john.fowler@asu.edu, tom.callarman@asu.eduKeywords:Distributed Supply Chain Simulation, Semiconductor Supply Chain, Time SynchronizationABSTRACT: Simulation has emerged as a powerful technology for virtual experimentation to support strategic, tactical and operational decision-making in manufacturing, particularly in the semiconductor manufacturing supply chain. In this paper, we address performance issues related to time synchronization of a semiconductor supply chain simulation that involves a wafer fabrication and an assembly and test facilities, in the context of the High Level Architecture. The simulation model comprises four federates, which represent a wafer fabrication facility, an assembly and test (A&T) facility, a lot allocation engine (LAE), and a demand generator. Two alternative interactions among these federates are discussed. The intuitive design of the interaction between the federates resulted in a lock step execution of the A&T and LAE federates, while the alternative design of the federate interaction exploited the parallelism between these federates. The analysis of the scenarios to be simulated suggests that external events can be represented through messages that are sent periodically. This relaxes the time synchronization among the federates as the federates can progress in time-step. Experimental results showed that we were able to achieve a savings of approximately 5 days of simulation execution by executing the simulation on 3 computers (compared to one computer). As we had limited processing resources available, workload distribution of each federate was considered for the purpose of assigning the federates to processing resources.IntroductionSimulation has emerged as a powerful technology for virtual experimentation to support strategic, tactical and operational decision-making for   manufacturing concerns,  particularly in highly capitalized environments with little steady state and subject to high variability. One area of application is the semiconductor supply chain with large capital investment and high value of end products  REF _Ref77327738 \n \h [1] that have short market lifespan due to rapid changes in technology  REF _Ref77327750 \n \h [2]. Simulation of such extended enterprises, possibly across company boundaries, is needed to explore its dynamic characteristics and to realize the impact of local decisions on the global operations. Manufacturers need to ensure seamless integration of their operations within their supply chain to ensure products reach the end-customers efficiently at minimal cost. The simulation can be used as a virtual laboratory for what-if analysis such as evaluation of alternative inventory replenishment policies that balance inventory holding costs and customer service levels (meeting the due date requirement of the customers).As supply chain simulation typically involves multiple manufacturers (across geographical boundaries and possibly involving different enterprises), distributed simulation based on the High Level Architecture (HLA) appears to be a good solution to overcome the problems of such large-scale simulation. A single simulation model that encompasses several manufacturers of the supply chain is not feasible as this would require manufacturers to share sensitive data about the way they do business.  Further, such a model is computationally intensive and would require much more computing resources. Collecting a set of statistics could take hours or days, depending on the granularity of the model. And it has been shown in  REF _Ref77327738 \n \h [1] that detailed modeling (high granularity) of such systems is mandatory to obtain high fidelity simulation results. Building a distributed model of such a simulation allows the computation load of the simulation to be shared among a few computing resources, and it avoids manufacturers having to share sensitive data as their models are within their plant and control. These distributed models interoperate with each other through message exchanges that model the flow of materials and information in their daily business. Through the adoption of the HLA standard as the backbone for distributed simulation, the execution of the distributed models is managed and controlled by the Runtime Infrastructure (RTI). Time synchronization is one of the services that is provided by the RTI, which synchronizes the (virtual) time advancement of distributed models. It is a critical factor that dictates the speed of simulation execution. It incurs extra overhead that could possibly degrade the performance of distributed simulation, to the extent that running a sequential simulation might be more efficient. It is thus important for the careful design and implementation of the distributed models to avoid such situations. In this paper, we share our experience in designing an efficient architecture for a semiconductor supply chain simulation that involves four simulation components (or federates), namely a wafer fabrication facility, an assembly & test factory, a demand generator, and a lot allocation engine. The architecture was designed with careful analysis of the simulation components and the message exchanges among these components. We also show how careful partition of the simulation components can make a significant difference in the performance of the simulation despite the limited computing resources available.This paper is organized as follows: Section 2 gives an overview of the semiconductor supply chain model. Time synchronization involving the four federates is then discussed in Section 3, with careful analysis of two alternative architectures. Following that, experimentsconducted to compare the performance of centralized simulation and distributed simulation are presented in Section 4. Section 5 concludes this study with an outline of future work.The Semiconductor Supply Chain ModelFigure 1 shows a typical semiconductor supply chain where the wafer fabrication (W/F) facility supplies wafers to the assembly and test (A&T) facility that produces Integrated Circuits (ICs), and the A&T facility subsequently supplies ICs to customers (end-users). The simulation model is comprised of four basic elements: manufacturing processes, business processes, transportation, and customer orders. The manufacturing process models the  transformation of material in the W/F and A&T facilities. Products are released into the facilities through the business process. In the wafer fabrication facility, a make-to-stock strategy (driven by forecast) is adopted as cycle time of wafer production typically takes weeks. It is generally too late for the W/F facility to release the raw wafers into production only after receiving orders. On the other hand, a make-to-order strategy is adopted in the A&T facility as cycle time of ICs production typically takes days. The transportation of wafers between the two manufacturing stages and the transportation of ICs to customers are modeled as well.Figure 2.1: Scope of the Semiconductor Supply ChainIn this study, the W/F facility, the A&T facility, and customer orders are modeled as separate federates.  Customer orders are generated with four typical demand profiles by a demand generator (D/G). A lot allocation engine (LAE) that plans customer orders of A&T into standard lot sizes is also modeled as a federate. Figure 2.2 shows the interaction among these federates of the semiconductor supply chain. The D/G generates customer orders for each type of IC on a daily basis, and places the orders in the A&T facility. The LAE receives these orders, plans the orders into standard lot sizes and subsequently sends the lot release information to the A&T facility. The A&T facility sends dispatching priority information that reflects shortage of wafer products periodically (planning cycle) to the W/F facility, where the W/F facility makes use of this information to determine if any of the wafer products needs to be given higher priority to go through the factory. Wafers and ICs are delivered to the A&T facility and customer, respectively, at the end of each day. More detailed information of the model can be found in  REF _Ref77332163 \n \h [3].Figure 2.2: Interactions between Components of Semiconductor Supply ChainTime SynchronizationTo ensure efficient execution of the semiconductor supply chain model discussed in Section 2, we analyze each component model and message exchanges to determine: 1) whether the message exchange should be delivered in timestamp or receive order, and 2) the time advancement mechanism (next event request or time advance request) to be used.Timestamp Order Versus Receive Order MessagesBased on the discussion in Section 2, we know that there are six different messages that are being exchanged among the four federates (W/F, A&T, LAE, and D/G). These messages are:Wafer delivery message that represents the material flow from W/F to A&TWafer inventory update message that represents inventory update from A&T to W/FIC delivery message that represents the material flow from A&T to D/GOrder placement message that represents customer order from D/G to A&TLot release information from LAE to A&T that initiates lot release into production at A&TLot completion information from A&T to LAEThe intuitive design for this simulation model is to have the wafer delivery, wafer inventory update, ICs delivery and order placement messages to be represented using timestamp order messages, while the lot release and lot complete messages to be represented using receive order messages. This means that the W/F, A/T and D/G federates must be both time regulating and constraint as they send and receive timestamp order messages while the LAE is neither. The lot release and lot complete messages can be delivered in receive order because the LAE is only triggered by an order placement message from the D/G. Based on the order placement, the LAE plans the order considering availability of wafers inventory and the A&T facility’s capacity, and sends a lot release message to the A&T to initiate the production if it is feasible. From this description, we can see that whenever the LAE is executing, the A&T defers its execution, pending the lot release instruction from the LAE. As the A&T federate is regulating the simulation time progress, the rest of the federates are constrained and not able to advance their time. This results in a sequential execution of the simulation, which will possibly slows down the simulation as the parallelism of the LAE and other federates are not exploited.Figure 3.1: Alternative Interactions between Components of Semiconductor Supply ChainAn alternative approach that is able to exploit the parallelism among these federates can be realized by representing the lot release message using timestamp order messages. The lot complete message remains as a receive order message as it does not change the state of the simulation and is used by the LAE to tally the orders that have been fulfilled for statistic collection purpose. Another modification required is that instead of sending the wafer delivery and order placement messages to the A&T, these messages are delivered to the LAE directly. Correspondingly, the wafer inventory update message is sent from LAE to W/F as the LAE is keeping track of the remaining wafer inventory at the A&T facility. With these changes, the LAE has to be time regulating and time constraint as it now sends and receives timestamp order messages. Figure 3.1 shows the alternative architecture for the interactions among these federates. With this, the LAE can always run in parallel with the A&T federate as will be illustrated in Section 3.3. An analysis on the execution time of the two alternative approaches will also be discussed.Time Advancement MechanismThe RTI of the HLA provides two alternatives mechanisms to advance the time of the simulation, namely next event request (NER) and time advance request (TAR)  REF _Ref77392839 \n \h [4]. NER is typically used when we do not know in advance when an external event (external events are sent to the destination federate via a message) will be triggered. In such a case, it is important that the federate issues an NER to the RTI prior to simulating every event. With NER, the time granted by the RTI will either be less than or equal to the requested time. On the other hand, TAR is typically used either to advance time with a fixed time step, or to advance time when it is always possible to determine exactly when an external event will be triggered (sent and received). Apparently, the latter approach reduces the communication with the RTI significantly and will guarantee a better performance as compared to using the NER mechanism.From our earlier discussion, we know that all the federates of the semiconductor supply chain trigger external events periodically. This means that we can adopt the TAR mechanism for these federates as we know the time at which the external events are sent and received. For the W/F federate, it delivers finished products (wafers) on a daily basis while receiving inventory update message monthly. The most conservative value has to be used here to ensure that the simulation adheres to causality constraint. Thus, the W/F advances its time with an interval of 1 day. For the A&T federate, it delivers finished products (ICs) and receives lot release messages on a daily basis. It is thus safe to advance the time of the A&T federate with a 1-day interval. Similarly, the D/G can advance its time with a 1 day interval as orders are generated daily and it also receives ICs delivery daily. The LAE delivers two types of external events, a lot release message daily and an inventory update message monthly. It receives an order placement message from D/G on a daily basis. Thus, LAE has to advance its time with a 1-day interval. To cater for the simulation models where external events are sent aperiodically, a preliminary study has been done in  REF _Ref77392546 \n \h [5].As we are using a conservative synchronization protocol in this study, lookahead is an important parameter that affects the performance of the simulation execution. Each federate that sends timestamp order messages must regulate the simulation with a lookahead value. For the W/F and A&T federates, the lookahead was set to 1 day as it takes 1 day to deliver the finished products. The LAE has to impose a zero lookahead to the simulation because a lot release message is triggered immediately (at the same virtual time) upon receiving the order placement message. The LAE federate thus needs to use the time advance request available (TARA) mechanism instead of TAR to avoid deadlock. The only difference between the TAR and TARA mechanism is that when a time grant is issued by the RTI on a TAR request, the RTI guarantees that all messages with the requested time are delivered to the federate. On the other hand, the RTI only guarantees partial delivery of messages with the requested time when a TARA request is issued.Intuitively, the D/G federate should impose a  zero lookahead to the simulation as well. This makes the whole simulation truly constrained. To eliminate this constraint, we let the D/G pre-generate orders one day in advance. This means that on Day t, the order placement message that is being sent represents the order quantity for Day t+1. The D/G model is still valid as the same set of orders will be generated whether we generate them on the day itself or a day ahead. By doing so, we are able to make the D/G federate to regulate the time of the simulation with lookahead of 1 day.Execution Time AnalysisFigure 3.2 shows the timing diagram for the intuitive design of interactions among components of the semiconductor supply chain (Figure 2.2). The W/F federate is not considered in this analysis to simplify the discussion. But the omission of the W/F federate does not invalidate the analysis.Figure 3.2 Timing Diagram for the Intuitive Design of Interactions between Components of Semiconductor Supply Chain (Figure 2.2)At the beginning of the simulation, the A&T has no events to simulate and thus attempts to progress to day 1 by issuing a TAR(1). At the mean time, the LAE federate is busy waiting for an order message to be delivered from A&T. While both federates are waiting, the D/G generates Day 1’s customer orders. The order is sent to the A&T as a timestamp order message (time-stamped at day 1). Following that, the D/G issues a TAR(1) which results in the TAR(1) of the A&T and itself being granted. The order (denoted as order@1 in Figure 3.2) message is delivered to the A&T which the A&T redirects the order to the LAE as a receive-order message. Based on the received customer order, the LAE runs through its algorithm and releases a number of lots to fulfill the order. The lot release message is sent to the A&T as a receive-order message to initiate the production of the customer order. The A&T federate attempts to process all the events with timestamp less than or equal to Day 1 before issuing the next time request, TAR(2). Apparently, the LAE and A&T are running in lock step, one after another throughout the simulation. The same execution pattern repeats until the end of simulation is reached. Thus, the execution time of this simulation can be estimated as:ExecutionTime1 = (E(LAE) + E(A&T)) * (n-1),where E(LAE) is the execution time for planning the order into lot releases for the LAE federate, E(A&T) is the execution time for the A&T federate to simulate all events from time t-1 to t (t is the granted time), and n is the simulation run length in days.Figure 3.3 Timing Diagram for the Alternative Design of Interactions between Components of Semiconductor Supply Chain (Figure 2.2)Figure 3.3 shows the alternative design for the interactions among the semiconductor supply chain components (Figure 3.1). At the beginning of the simulation, the LAE and A&T federates have no events to handle. Both of them issue a TARA(1) and TAR(1) respectively, attempting to advance their time to Day 1. As the D/G federate is yet to request for time advancement, the LAE and A&T’s time request will not be granted. At the mean time, the D/G federate generates customer order for Day 1 and sends the customer order as a timestamp order message to the LAE federate. Following that, the D/G federate issues a TAR(1), attempting to advance to Day 1. As all three federates have issued a time request to Day 1, the LAE federate is granted to progress to Day 1 (the TARA mechanism). The D/G and A&T federates are still pending for the time grant (the TAR mechanism) as there is still a possibility that the LAE federate will send out a message with timestamp of 1. The LAE federate receives the customer order upon the time grant, and initiates its algorithm to compute number of lots to be released to fulfill the customer order. A lot release message is then sent to the A&T. The LAE federate then issues a TARA(2) request. The time request by the D/G and the A&T federates will then be granted by the RTI as it is now safe for D/G and A&T to progress to Day 1. The D/G federate continues to generate the customer orders for Day 2, while A&T receives the lot release message, and attempts to simulate all the events with timestamp less than and equal to Day 1. At the same time, the time request of LAE is granted upon issuance of TAR(2) by the D/G federate. The LAE is now planning for Day 2 order, while the A&T is simulating the production for Day 1. As we can see, the A&T and LAE federates are running in parallel, opposing to the intuitive design whereby A&T always run in lock step with LAE. Thus, the execution time of this simulation can be estimated as:ExecutionTime2 = max((E(DG)+E(LAE)), E(AT)) * (n-1),where E(DG) is the execution time for generating customer order by the D/G federate, E(LAE) is the execution time for planning the order into lot releases for the LAE federate, E(A&T) is the execution time for the A&T federate to simulate all events from time t-1 to t (t is the granted time), and n is the simulation run length in days.Comparing the execution time of both the designs, we know that ExecutionTime1 is always larger than ExecutionTime2. Hence, the alternative design of interactions between components of the semiconductor supply chain is adopted in this study. And this exercise has shown that it is important to understand the simulation model such that we can exploit the parallelism of the simulation model. In some cases, changing the way the simulation components interact without altering its meaning can greatly enhance the execution speed of the simulation. Our example has illustrated that by replacing some of the receive order messages with timestamp order messages, we are able to achieve a better execution speed.Experimental ResultsUsing the semiconductor supply chain model discussed earlier and the alternative interaction design, we conducted an experiment to run the simulation model on 1, 2, and 3 computers. The configuration of the 3 computers is summarized in Table 4.1 below. As the computation power varies from a low-end Pentium II 266 MHz to a high-end Pentium IV 1.8 GHz, it is important that we partition the simulation components such that maximum efficiency is achieved. Before this can be done, we first run the simulation and collect the workload that each simulation component contributes. Table 4.2 gives an estimation of the processing power needed by each simulation component, with a one-year simulation run length. As can be seen, the W/F and A&T federates are most computationally intensive. It is thus important that these federates are assigned to run on a single computer exclusively. Based on this processing power distribution, Table 4.3 shows how the four federates are being distributed among the computers.ComputerProcessorMemory (MB)APentium IV 1.8 GHz512BPentium III 700 MHz256CPentium II 266 MHz256Table 4.1: Configuration of Computing ResourcesSimulation ComponentNumber of EventsCPU BusyExecution Time (mins)W/F40,348,20353.6%21A&T9,369,41335.9%21LAE12,33211.4%21D/G2,7480.2%20Table 4.2: Processing Power Distribution of Simulation ComponentsNumber of ComputersComputer(s) InvolvedFederate Distribution1AAll federates2ABW/F, D/GA&T, LAE3ABCW/FA&TLAE, D/GTable 4.3: Federate Distribution to 1, 2, and 3 ComputersFigure 4.1 compares the execution time for the 1, 2, and 3 computers scenario. As can be seen, there is a reduction in execution time from 51 minutes with 1 computer to 17 minutes with 3 computers. This is a significant saving as we used this simulation model to address various issues of the supply chain (results can be found in  REF _Ref77332163 \n \h [3]), such as the effect of changing dispatching rules or inventory replenishment policies to the supply chain performance. We ran approximately 200 experiments (including replication of runs for better statistical confidence), which and a reduction of simulation execution time by a factor of almost 2.8 was achieved (a savings of 5 days of continuous simulation execution). We managed to realize the savings through careful design of the interaction among simulation components with good understanding of the simulation model, exploitation of parallelism of the model and using the most efficient time synchronization mechanism, and partitioning of the simulation components considering the workload distribution of the federates and computing power available. EMBED Excel.Chart.8 \s Figure 4.1: Execution Time on 1, 2, and 3 ComputersConclusions and Future WorksIn this paper, we presented an application of the High Level Architecture standard for a semiconductor supply chain model, which involves a wafer fabrication and an assembly and test facility. The simulation is comprised of four federates: W/F, A&T, LAE, and D/G. These federates interact with each other using timestamp order messages to exploit the parallelism between the A&T and LAE federates. Also, the D/G federate pre-generates the customer orders one day ahead such that a better lookahead can be used (better lookahead means closer synchronization among the federates).  As we know the time at which the messages will be sent and received, we used the TAR/TARA mechanism to advance the time of the federates. This significantly reduces the number of times that the federates need to synchronize their time (relative to cases when NER is used).  Due to limited availability of processing power, we also paid special attention in distributing the federates to computers, by considering the workload of distribution of each federate. Considering all these issues, we managed to save a total of 5 days of simulation for 200 experiments that we conducted.Moving forward, we would like to address the efficiency issues of time synchronization when the time to send or receive external events cannot be pre-determined. Also, instead of distributing the simulation components manually by measuring the workload distribution, we would also like to devise an algorithm in which the workload of federates can be estimated and the federates can then be assigned to computing resources based on this workload estimation.ReferencesS. Jain, C.C. Lim, B.P. Gan, and Y.H. Low: “Criticality of detailed modeling in semiconductor supply chain simulation” Proceedings of the 1999 Winter Simulation Conference, pp. 888-896, December 1999.S.J. Turner, W. Cai, and B.P. Gan: “Adapting a supply chain simulation for HLA” Proceedings of IEEE 4th International Workshop on Distributed Simulation and Real Time Applications, pp. 71-78, August 2000.C.S. Chong, B.M. Duarte, P. Lendermann, J.W. Fowler, B.P. Gan, T. Callarman: “Analysis of a Customer Demand Driven Semiconductor Supply Chain in a Distributed Simulation Testbed” To appear in Proceedings of the 2004 Winter Simulation Conference, December 2004.R.M. Fujimoto: “Time Management in the High Level Architecture” Simulation, Vol. 71 (6), pp. 388-400, December 1998P. Lendermann, B.P. Gan, Y.L. Loh, H.K. Tan, S.K. Lieu, L.F. McGinnis, J.W. Fowler: “Analysis of a Borderless Fab Scenario in a Distributed Simulation Testbed” To appear in Proceedings of the 2004 Winter Simulation Conference, December 2004.AcknowledgementsThis research is funded by The Institute for Manufacturing Enterprise Systems (IMES), Modeling and Analysis for Semiconductor Manufacturing Laboratory (MASMLAB), both of Arizona State University (ASU), Tempe, USA, and SIMTech, Singapore. The research is supported under a collaborative project, entitled Analysis of Coordination Mechanisms and Relationship in Supply Chain Using Distributed Simulation, between ASU and SIMTech.Author BiographiesBOON PING GAN is a Research Engineer with the Production and Logistics Planning Group at Singapore Institute of Manufacturing Technology (formerly known as Gintic Institute of Manufacturing Technology). He is currently leading a research project that attempts to apply distributed simulation technology for supply chain simulation. He received a Bachelor of Applied Science in Computer Engineering and Master of Applied Science from Nanyang Technological University of Singapore in 1995 and 1998 respectively. His research interests are parallel and distributed simulation, parallel programs scheduling, and application of genetic algorithms.PETER LENDERMANN is a Senior Scientist in the Production and Logistics Planning Group at Singapore Institute of Manufacturing Technology (SIMTech). Previously he was a Managing Consultant with agiConsult in Germany where his focus was on the areas of supply chain management and production planning. He also worked as a Research Associate at the European Laboratory for Particle Physics CERN in Geneva (Switzerland) and Nagoya University (Japan). He obtained a Diploma in Physics from the University of Munich (Germany), a Doctorate in Applied Physics from Humboldt-University in Berlin (Germany) and a Master in International Economics and Management from Bocconi-University in Milan (Italy). His research interests include parallel and distributed simulation and advanced methods for supply chain planning and production scheduling.CHIN SOON CHONG obtained his degree in Electrical and Electronics Engineering from the City University of London, UK. He joined Singapore Institute of Manufacturing Technology (SIMTech), a research institute in Singapore, twelve years ago and is currently in the Production and Logistics Planning Group. He obtained his Master of Engineering in Computer Integrated Manufacturing from Nanyang Technological University, Singapore. He is certified by the American Production and Inventory Control Society as a Certified Production and Inventory Manager (CPIM). During twelve years in SIMTech, he has been involved in simulation, scheduling and optimization related projects in logistic and manufacturing IT domains. The industrial projects include cargo container operation and yard capacity planning simulation, dairy-printing process simulation, manufacturing cycle-time modeling, scheduling and optimization for various MNCs. His current research interests include intelligent and integrated simulation, planning, scheduling, optimization in the area of manufacturing, logistics and supply chain.brett marc duarte is a PhD student in Industrial Engineering at Arizona State University. He has a Masters degree in Industrial Engineering with a specialization in the manufacture of semiconductors, and his interests lie in simulation and modeling, with an emphasis on supply chain management and integration.JOHN W. FOWLER is a Professor in the Industrial Engineering Department at Arizona State University. Prior to his current position, he was a Senior Member of Technical Staff in the Modeling, CAD,, and Statistical Methods Division of SEMATECH. His research interests include modeling, analysis, and control of semiconductor manufacturing systems. Dr. Fowler is the co-director of the Modeling and Analysis of Semiconductor Manufacturing Laboratory at ASU. The lab has had research contracts with NSF, SRC, International SEMATECH, Infineon Technologies, Intel, Motorola, ST Microelectronics, and Tefen Ltd.THOMAS E. CALLARMAN is an Associate Professor of Supply Chain Management and has been on the faculty of Arizona State University since 1980. Dr. Callarman received his bachelor’s degree in Business Administration from West Texas State University, his MBA from Arizona State University and his Ph.D. from Purdue University. Currently, he teaches Operations and Logistics Management in the ASU & MBA High Technology program programs, and he previously served as the Associate Dean for Student Support in the Graduate College. He is currently the Director of the Institute for Manufacturing Enterprise Systems. Dr Callarman has published articles in Decision Sciences, the European Journal of Operational Research, the International Journal of Purchasing and Materials Management, and other research and practitioner journals. His current research interests are in the areas of process analysis and process improvement. He is president-elect of the Decision Science Institute. A TARA request will be granted when a subset of the messages with timestamp at the requested time and all messages with timestamp less than the requested time are delivered A TAR request will only be granted when all the messages with timestamp equal and less than the requested time are deliveredLot CompleteLot ReleaseLot CompleteLot ReleaseWafer Fabrication(W/F) ModelLot Allocation EngineAssembly & Test (A&T) ModelCustomer Demand Generator ModelWafersWafer InventoryICsOrdersfor ICsWafer Fabrication(W/F) ModelLot Allocation EngineAssembly & Test (A&T) ModelCustomer Demand Generator ModelWafersWafer InventoryICsOrdersfor ICsD/GTAR(1)TAR(2)201TAR(2)order@2release@1order@1order@1LAEA&TD/GLAEA&Torder@1order@2release@1TAR(2)TARA(3)1TARA(2)TAR(1)02TARA(1)TAR(2)TAR(1)