An Approach for Using DII COE Components to Link Simulations and C4I Systems: A Case Study Using the CMPDonald H. TimianComputer Associates5502 Leesburg Pike, Suite 1200Falls Church, VA  22041(703) 824-4020don.timian@ca.comMike W. HicksJB Management, Inc.ATTN:  SFAE-C3S-AT-CSFort Monmouth, NJ  07703(732) 427-4991 HYPERLINK mailto:mhicks@c3smail.monmouth.army.mil mhicks@c3smail.monmouth.army.milMichael R. Hieb, Ph.D.IITRI/AB Technologies Group1901 N. Beauregard StreetAlexandria, VA  22311-1705(703) 933-3376mhieb@iitri.orgKeywords:AMDWS, ASAS, ABCS, AFATDS, ATCCS, CSSCS, C2R, C4I-M&S Interface, CMP, DII COE, FAADC2I, FBCB2, Ground Communications Server (Comms Server), HLA, JCDB, JTA, MCS, M&S, and WARSIMABSTRACT:  Annually, the Army spends in the neighborhood of ten million dollars to maintain limited interoperability between its suite of analytical and training simulations and its division-and-below Command and Control (C2) systems.  Because reuse, standardization, and interoperability were often not key design criteria, most of these interfaces link a specific simulation to a specific C4I system and typically handle only a small sub-set of the messages or data the "target" – or stimulated – C4I system can accept and/or the simulation can pass.All future Army (and Department of Defense) C4I systems will design to the Defense Information Infrastructure Common Operating Environment (DII COE) Architecture, the key to the interoperability of simulations with C4I.  The DII COE includes specific software reusable components that must be used in future simulation interfaces.  However, because M&S has not been involved with the development of DII COE components to date, many needed interfaces for linking M&S-to-C4I are lacking.This paper gives a general approach to how to develop those many needed interfaces, as well as a case study using a foundation DII COE component, the COE Message Processor (CMP).  Specifically, this paper will describe the DII COE Technical Working Group structure and process,the CMP and the Application Programming Interfaces (APIs) developed for it to use with M&S, and how a key Army Simulation, the Warfighter Simulation 2000 (WARSIM), is incorporating the CMP, along with the DII COE Ground Communications Server and two Army Foundation Software components – the Joint Common Database (JCDB) and the Command and Control Registry (C2R) – into its C4I interface.In the future, the process used to develop WARSIM’s CMP-based, M&S "friendly" interface should be used for other DII COE components.  In order to make seamless interoperability a reality, each DII COE component needs to incorporate M&S requirements and develop the required interfaces.IntroductionAnnually, the Army spends in the neighborhood of ten million dollars to maintain limited interoperability between its suite of analytical and training simulations and its division-and-below Command and Control (C2) systems; specifically the Army Tactical Command and Control System (ATCCS) and the Force XXI Battle Command Brigade and Below (FBCB2).  This interoper-ability is accomplished via a set of specific software interfaces linking Modeling and Simulation (M&S) to Command,   Control,   Communications,   Computers  andIntelligence (C4I) systems.  Unfortunately, because reuse, standardization, and interoperability were often not key design criteria, most of these M&S-to-C4I interfaces link a specific simulation to a specific C4I system and typically handle only a small sub-set of the messages or data the "target" – or simulated – C4I system can accept and/or the simulation can pass.With the advent of the Joint Technical Architecture v2.0 [12], the Army’s C4I community has defined a set of overarching standards that facilitate reuse and interoperability.  The Army’s M&S community is also moving to standardize certain protocols and architectures, including the High Level Architecture (HLA).  If the Army, or for that matter the Department of Defense (DoD), is to achieve information dominance, it must have a set of low cost, interoperable M&S-to-C4I interfaces that can support the needs of its analytic, training, and acquisition communities.  Needless to say, this goal can only be achieved by defining a set of standards that apply to both the Army’s C4I systems and its M&S.The key to common, reusable M&S-to-C4I interfaces is the Army Foundation Software Suite and the Defense Information Infrastructure Common Operating Environment (DII COE).  Specifically, from the Army Foundation Software suite, the Command and Control Registry (C2R) and the Joint Common Database (JCDB) and, from the DII COE, the COE Message Processor (CMP) and the Ground Communications Server (Comms Server).  Recent interface projects such as the Modular Reconfigurable C4I Interface (MRCI) [13] provide lessons learned that have shaped our recommended approach on how to develop M&S-to-C4I interfaces.Several papers have already been published pointing to the need to develop M&S interfaces to the CMP and describing technical approaches to doing so [3, 9, 11, 14, & 18].  Newcomb et al [14] described the Warfighter Simulation 2000’s (WARSIM) initial CMP-based C4I interface.  In this paper, we will provide an update on WARSIM’s integration of common C4I components into its M&S-to-C4I interface.The scope of this paper is at the software component level and deals with issues associated with integrating a DII COE component into a simulation/interface.  We do not address issues of how M&S or M&S-to-C4I interfaces could achieve DII COE compliance.The remainder of this paper is organized as follows.  Section 2 will introduce the DII COE and the Army Foundation Software Suite plus explain why it is important for Army M&S-to-C4I interfaces to use common C4I components and architectures.  Section 3 will describe the CMP.  Section 4 will describe an approach for integrating DIICOE software into an M&S-to-C4I interface.  Section 5 will describe WARSIM’s integration of the CMP into its M&S-to-C4I interface; as well as describe WARSIM’s ongoing efforts to integrate the Comms Server, C2R, and JCDB.  And, in conclusion, Section 6 will make recommendations on how best to influence the DII COE to incorporate M&S requirements.2.	C4I Architectures and Software ComponentsIn Timian et al [18] and Hieb and Timian [9], we proposed the incorporation of DII COE components in M&S-to-C4I interfaces and in the M&S themselves.  In order to understand the rationale behind this, we need to describe the joint C4I Architecture that has been specified for Army Tactical C4I systems (the Army Battle Command System – ABCS), as well as the software components themselves, both Joint (DII COE) and Army specific (Foundation Software).2.1	The DII COEThe DII COE was born in 1995 from the Global Command and Control System Common Operating Environment (GCCS COE), which was adopted at the Department of Defense (DoD) level as a replacement for the World-Wide Military Command and Control System.  Because it is not only an architecture for configurable mission applications, but is also a philosophy, a process, and a practice, the DII COE has been mandated as the basis for the creation of future C4I systems.  The JTA [7] gives the overall framework for developing systems within the DoD and specifies the use of the DII COE.The users and developers of C4I systems recognized the need for standardization to reduce system-to-system interoperability issues and rampant redundancy.  The Services have adopted the DII COE concept and mandated its baseline, integration, and runtime specifications [12].It is sometimes convenient to think of the layered software of the DII COE as an Operating System (OS).  Since the DII COE may either be resident on Windows™ or UNIX platforms, it is obviously not an OS.  Rather it is a collection of software that collates common support applications and augments infrastructure/kernel functions.  This results in a DoD specific DII COE/Windows™ or DII COE/UNIX operating system.  As such, the DII COE is not a system, but a foundation for building systems.As a system foundation the DII COE is mission application independent, as well as: An architecture; An approach; A collection of reusable software; A software infrastructure; and A set of guidelines and standards.Per the DII COE Architecture Oversight Group Charter [4], portions of the DII COE are being updated using requirements generated by 19 Joint Service Technical Working Groups (TWGs).  Several of these TWGs are critical to M&S-to-C4I interface developers:Message Processing (responsible for the CMP; Army lead);Communications Services (Army lead);Data Access Services (Army lead);Alerts (Army lead);Common Operational Picture;Visualization; and Mapping, Charting, Geodesy, and Imagery (responsible for the JMTK); andM&S (Defense Modeling and Simulation Office lead;  HYPERLINK http://diicoe.disa.mil/coe/aog_twg/twg/mstwg/ http://diicoe.disa.mil/coe/aog_twg/twg/ms twg/).Figure 1.  The DII COE ArchitectureDevelopment of a DII COE compliant software component ultimately results in that software going through a segmentation process.  This step is crucial for the independent and distributed development of applications.  Thus, when a software component is made to work within the DII COE “environment” it is said to be segmented, and then can be submitted to the Defense Information Support Agency (DISA) for compliance testing.  The segmentation process requires that public Application Programmer’s Interfaces (APIs) be identified in the file structure or “Segment Directory.”  This means that there is a process-enabled method for application developers to reuse previously accepted, compliant software with well-established public interfaces.The DII COE ArchitectureFigure 1 depicts the DII COE as a layered software architecture comprised of Mission Applications, Common Support Applications, Infrastructure Services, Kernel Services, and Database Applications and Services.  The cubes shown are software modules.With the exception of Databases, the software layers are organized from the most common and generic at the Kernel level to most unique and specific at the Mission Application level.  Since their use is required by software existing in all the layers Databases can exist anywhere along the range from common to specific.  The Databases layer contains intelligence, combat support, tactical specific, and strategic specific databases.The Kernel software runs on all DII COE compliant platforms and contains such things as Security System Management, Windowing Software (X-Windows, Windows™), executive management, network configuration, disk management, install/de-install, kernel patches, printing, runtime services, and the operating systems (Windows™ and UNIX).  The Kernel contains critical services that all infrastructure, common applications, and mission applications either directly or indirectly depend upon.The Infrastructure layer software emphasizes the movement of data through the network of DII COE systems and contains communications, distributed computing, presentation and web, network management and data, and object management services.  The Infrastructure layer allows common and mission applications to take advantage of the distributed nature of DoD computing.The Common Support Applications layer begins to address interoperability through an emphasis on a common view of the data and contains message processing, alerts, on-line help, office automation, correlation and data access functions.  The API provide access to essential software functions in the layers below them.We call Mission Applications “lightweight” or “heavyweight” depending on their reuse of functionality available through the software layers below them.  A Mission Application is considered “lightweight” after it ascends through the DII COE compliance levels shedding redundant functionality.  It adapts itself to use capability from Common Support Applications, Infrastructure, Kernel, or Database Services.  It still is “heavyweight” if it is self-reliant upon capabilities from its internal, redundant software and consequently, little reuse or interoperability occurs between it and other DII COE applications.There are currently no standard Simulation Infrastructure Components in the DII COE, although work is ongoing to segment the HLA’s Run Time Infrastructure (RTI), under the DII COE M&S TWG.  Segmenting the RTI is only a first step, however. The challenge is to identify which functionality is needed to perform M&S within the DII COE and modify the DII COE Software Modules appropriately.  This issue is more fully described in Hieb and Sprinkle [8], who delineate four different technical approaches for integrating simulation functionality into the DII COE.Army Foundation SoftwareA significant lesson learned during Army Experiment 4 was that a M&S-to-C4I interface must be viewed as an end-to-end system comprising the simulation, the interface software, and the C4I system [2].  In other words, in order to accomplish full interoperability with C4I systems, it is not sufficient for M&S developers to build in better messaging capabilities to their systems.  C4I systems must also have automated interfaces and simulation functionality “built-in” per a system specification rather than added on ad-hoc at a later date.There are two areas where C4I systems will change in ways that make interoperability easier.  First, C4I systems will increasingly utilize database updates as opposed to sending messages with a particular message protocol.  Second, C4I system developers will increasingly use common data models that will utilize standard data elements.As an example of the future C4I system architecture, with the January 2000 release of ABCS 6.0 the Army has begun an effort to make its ABCS system interoperable via a common architecture (the DII COE) that uses the specified Joint DII COE components plus specific Army C2 software components (the Army Foundation Software Suite).  The Army Foundation Software Suite is used in the Army Common Information Infrastructure (ACII), which was developed by the Horizontal Integration Technology Office of the Program Executive Office – Command, Control, and Communication Systems (PEO-C3S).  The ACII is shown in Figure 2 and provides a flexible capability to achieve Army, Joint, and Coalition interoperability.  It is based on an information management model rather than a message transaction model, while still providing support for current formatted messages for data distribution.  The ability to use current and evolving message, data distribution, and data replication technologies permit the implementation to support interoperability across a wide spectrum of operations and interfacing systems.The ACII architecture is database centric with the database being the focus of all information operations.  It is based upon Joint DII products as well as the Army Foundation Software thus having a high degree of software reuse.Figure 2: Army Common Information InfrastructureTwo key Army developed components within the Army Foundation Software Suite are the Joint Common Database (JCDB) and the Command and Control Registry (C2R).  The JCDB is an American National Standards Institute (ANSI) Standard Query Language (SQL) database management system.  The JCDB conforms to the DoD and NATO standards.  The JCDB focuses on data, which is shared by two or more ABCS systems.  Functional areas supported by the JCDB include – but are not limited to – intelligence, logistics, communications, network and system management, fire support, Army aviation, air defense, and maneuver.The JCDB used to be called the Army Common Database (ACDB) [10].  It was renamed because of on-going work between the Director for Information Systems for Command, Control, Communications, and Computers (DISC4) and DISA, as well as the incorporation of enemy tables and data elements from the Modern Integrated Database (MIDB) into the ACDB.The C2R is a means of dynamically and consistently coordinating and collaborating C2 naming, addressing, net structures and configurations, operations, and relationships across many different types of systems potentially deployed globally.  Used by battlefield applications, system service software, and warfighter personnel of the Army Signal Corps, the C2R will also support Joint and Allied interoperability.3.	The CMPThe Army currently chairs the DII COE Message Processing TWG [5].  The primary function of the TWG is to manage a baselined set of requirements for messaging and provide traceability between these requirements and the current COE releases and build plans.  This TWG is comprised of one voting member from each Service/Agency, to include the Army, Navy, Air Force, and Marines.  TWG decisions are made based on consensus of the voting members.  TWG participation is encouraged by all agencies within each service and allows members to:Assess and develop proposed change requests;Coordinate requirements with other TWG chairs Support technical reviews;Assure requirements are defined and implemented in accordance with the Service/Agency needs; and Propose API retirement or expansion.DII COE Messaging requirements are published in the DII COE Message Processing Software Requirements Specification (SRS).  A formal call for Message Processing requirements from Joint services is done every six months.  These requirements are submitted and reviewed by the TWG, and if accepted, prioritized and added to the SRS.  All CMP software development efforts strictly adhere to the requirements defined in the SRS [6].The CMP is a multi-functional automated message processing system which contains state-of-the-art technology to process both inbound and outbound messages using a standard Graphical user Interface (GUI).  Functional capabilities include:Internal routing;Extraction of data from messages and their headers for forwarding to other applications or databases;Standing request for information;Automatic and interactive message generation;Validation of inbound and outbound messages;Autofill of data from the database of a message or application;Journaling of both character oriented and bit oriented messages; andError handling.Figure 3.  Functional Description of the CMPAs shown in Figure 3, CMP software is logically bound by the Comms Server on one side and processes specific to a Mission Application on the other.  Processing of inbound messages from the communications front end includes essential functions such as field/format validation, profiling, standing request for information, parsing and routing.  Extracted data from inbound messages can be automatically posted to a database and/or application.  The processing of messages for hand off to the DII COE Comms Server includes essential functions such as message and header preparation, validation, and coordination/release.  Messages may be manually or automatically generated by pulling data from a database and/or application and transferred to the communications module for forwarding.  The message processing module permits components to be employed independently, or in combination with other components, to perform a single, or group of, function(s).The message processor is capable of processing any formatted or unformatted message which is validated by tables derived from the Joint Interoperability Engineering Office (JIEO) Central Data Base System (CDBS).  The CMP software has been officially certified to run on all DII COE Operating Systems.Figure 4 shows the interfaces to the CMP.  Currently, most systems do not take full advantage of the CMP APIs to perform automated message processing, and only use the CMP Graphical User Interface (GUI) and validation functions.  APIs are being developed to allow M&S systems and other C4I Mission Applications to 1) use the CMP to format both message headers and message bodies and 2) use the CMP to parse messages and extract data from the message headers and message bodies.  The CMP program is not developing specific APIs for M&S, but rather APIs that allow automated message processing for any mission application. CMP software and documentation is free to U.S. Joint Services with no up front cost.  Requirements determined to be Service unique, rather than Joint, may be implemented at an additional cost.The WARSIM effort to develop a common M&S-to-ABCS tactical messaging interface began in April 1998.  Simulation specific requirements are continually being developed and added to the CMP SRS for implementation.  Many of these requirements have been addressed in the most recent Java version of CMP.  With the use of a generic Java object to store both inbound and outbound message data, the CMP is now being used to parse and format specific United States Message Text Format (USMTF), Joint Variable Message Format (JVMF), and Variable Message Format (VMF) Package 11 messages to provide two way communications between WARSIM and ABCS systems.  API calls allow the parsing of incoming data, format outgoing data and create C4I classes.  Attendance at monthly software engineering meetings to discuss CMP integration and ongoing communication between WARSIM and CMP developers, guarantees the continual successful accommodation of simulation specific requirements.Figure 4. CMP InterfacesIn addition to WARSIM, the CMP customer list includes 26 Army, Air Force, Navy, Marine Corp, and Joint C2 Systems.An ApproachOur experience with the CMP has shown us an example of how to work with a DII COE component to make it usable by simulations.  It is important to understand both why a program would want to do this, as well as what the likely difficulties are.  There are many areas that have to be considered besides technical considerations.  One must also consider factors such as program schedules, requirements, participation in the TWGs, and coordination with other M&S-to-C4I Interfaces.One initial question might be – “Why do you need to modify this DII COE component for M&S?”  DII COE components were developed for reuse, and the APIs should be sufficient for other applications.  However, we discovered with the CMP that the existing APIs were not sufficient for use by WARSIM.  The CMP API’s were too generic.  WARSIM required more specific definition of the CMP APIs than what had been developed up to that point.4.1	Why Use Common C4I Components?In order to improve interoperability between M&S and C4I systems, it is not sufficient for M&S developers to build better “custom” software to link their simulations to C4I systems.  Reuse and standardization must become the key design criteria.Because M&S is not a warfighting skill – but command and control is – whenever possible, M&S developers should attempt to integrate into their simulations common C4I components.  Obviously, if the appropriate APIs are available, this option has the potential of saving the M&S developer both time and money.  It also eases the amount of time needed to integrate future drops of C4I software the M&S developer continues to ensure that the appropriate common C4I components are in fact common.  (In other words, the version number of the common component(s) being used by both the C4I system and the simulation are the same.)An excellent example of the power of using common C4I components can be seen in Figure 5.  By the spring of 2001 the vast majority of DoD’s C4I systems will have implemented the CMP.  Thus, an M&S developer who elects to use the CMP to interface their simulation to a specific C4I system – say the FBCB2 – will have built into their simulation the ability to interface with all of the Army’s Tactical Command and Control Systems (ATCCS), as well as the Global Command and Control System (GCCS), the Contingency Theater Automated Planning System (CTAPS), and GCCS-Maritime  (GCCS-M).Figure 5.  DoD CMP ImplementationProcessFrom our experience we can define a process that could be used for incorporating DII COE components into M&S software.  One of the major lessons learned is that it is essential to participate in the DII COE TWGs, both to obtain the current status of the DII COE component software development, and also to be able to formally specify requirements.  It is also very important to collaborate with other M&S users, to ensure that a robust interface is developed.  If each M&S program deals with the TWG separately, there is the potential for many redundant APIs to be developed.The process we propose for an M&S program to use is:Step 1: Identify DII COE components needed and identify the associated TWG.Step 2: Perform an engineering analysis to determine the current functionality of the DII COE component, what the current API’s are and compare these to what is required for the M&S-to-C4I interface.  From the difference between what is needed and what exists, determine what functionality needs to be added and/or API’s developed.Step 3: Request these changes through the TWG requirements process.Step 4: Work with the TWG software development team as they are developing the requested changes.  Test prototypes and perform preliminary integration.Step 5: Evaluate new versions of the DII COE software to determine if requirements have been met.  If so, incorporate into software.  If not, revisit Steps 3 and 4.A tradeoff analysis is also recommended.  Factors to consider are both technical and programmatic.  Some specific factors to consider are given below.  As can be seen, there are serious issues that must be addressed in such an analysisTechnical factors include:Software Components were developed for C4I and not for M&S, resulting in inadequate interfaces;DII COE components are not intended to be used standalone.  There are dependencies on other DII COE components;Many of the DII COE components assume an operator in the loop.  An operator is often unavailable or costly in C4I-M&S interfaces;Often there is one DII COE component per platform, where a C4I-M&S interface may need to have one DII COE component per many platforms;Development and maintenance costs can be eliminated after upfront integration is done, and;Better interoperability can be achieved by using the same components as C4I as opposed to creating unique, ad hoc interface software.Programmatic factors include:Lack of control over program schedule due to dependencies on DII COE software;Insight into DII COE Software Component Development;Ability to work towards DII COE compliance.5.	Case Study:  WARSIM's use of the CMP in its C4I InterfaceIn August 1998 the Simulation, Training, and Instrumentation Command’s (STRICOM’s) Project Manager (PM), WARSIM/C4I Simulation Systems (C4ISS) submitted to the Message Processing TWG simulation requirements for the CMP.  A Technical Interchange Meeting between WARSIM and CMP to exchange requirement information preceded this submission.  The requirements for simulations submitted included bi-directional messaging, multi-threaded messaging, auto message formatting without the CMP User Interface, multiple instances of CMP on single platform, and parsing to support C++ and Java data structures.Since then, these requirements have been incorporated in the CMP SRS and APIs were added to the Java version CMP.  Team WARSIM has been actively involved in Beta testing and prototyping with this version of CMP since September 1998.  The CMP is currently incorporated into the WARSIM development baseline for message processing and dependencies have been identified and placed upon CMP functionality.Figure 6 shows a block diagram of the prototype design of the WARSIM C4I interface.  From the “Training Unit” (i.e., the object in WARSIM representing the maneuver unit) a Command and Control Data Interchange Format (C2DIF) event – a standard Joint Simulation System (JSIMS) C2 interaction – is passed to the WARSIM C4I Interface.  Because the Java version of the CMP uses a generic Java object to store message data, outbound messages are formatted from these objects and inbound message are parsed into these objects.  However, if the information being passed to the Training Audience, in their Tactical Operations Centers (TOCs), is a Situational Awareness message, once formatted into the appropriate message format, it passed as a message (in accordance with the Army’s First Digital Division Architecture) to the TOC Server’s JCDB, and then replicated – via the JCDB’s APIs – to all of the appropriate ATCCS systems inside of that TOC.As one would expect, outbound messages (USMTF, JVMF, and VMF Package 11) are passed to the CMP and then via the Comms Server to the Training Audience’s TOCs.  Needless to say, before either the CMP passes the message to the Comms Server or the Comms Server passes the message to the Training Audience, the address of the “target” ABCS system is obtained from the C2R.The WARSIM C4I interface will eventually use many of the same DII COE and Army Foundation Software components that the ABCS systems do.  In addition to the CMP, the JCDB, the C2R, the Comms Server are all currently being used in the prototype C4I interface.  Due to security considerations, it may be impossible to interface to future ABCS systems without use of some or all of these components.  Certainly, as the ABCS systems increase their use of the JCDB, there will be more opportunities for the use of common data elements.The WARSIM C4I Interface uses the Java version of the CMP.   The supplied CMP JAVA APIs were inadequate as they provided all of the USMTF messages into one class.  Therefore, it was necessary for WARSIM to develop separate classes for each USMTF message, as well as JVMF and VMF Package 11 messages.One of the benefits of using common software components is that they can be reused.  Recently the Army’s DISC4 and the Army’s Deputy Under Secretary of the Army for Operations Research (DUSA(OR)) charted a specific Integrated Product Team to manage and coordinate Army M&S-to-C4I efforts.  This is the Simulation to C4I Interoperability Overarching Integrated Product Team (SIMCI OIPT; http://www.simci.org).  One of the working groups within the SIMCI OIPT is a “Consortium” of Army M&S-to-C4I Interfaces.These include the primary Army interfaces used today, and are shown in Figure 7.  The interfaces shown are WARSIM, the Tactical Simulation Interface Unit (TSIU) developed by the Space and Missile Defense Command [1]; the Run Time Manager (RTM) developed by the National Simulation Center [16]; and Eagle, the dominant federate in an HLA federation designed to stimulate the Army’s ATCCS systems, developed by the TRADOC Analysis Center [15].All of the Consortium members are cooperating in their integration of the CMP and other Army Foundation Software.  It is hoped that by the end of calendar year 2000 the Consortium members will have a set of the Army M&S-to-C4I requirements that can be incorporated into the CMP SRS and, if necessary, assist in building additional CMP APIs.Figure 6.  WARSIM C4I Interface6.	ConclusionFigure 7. Conceptual SIMCI  API to CMPIn this paper, we have presented an approach to using DII COE components for linking simulations to C4I systems.  Our purpose is to show the issues involved when one uses a C4I component to interface to a simulation.  We have described the DII COE, the Army foundation Software Suite, and the CMP in order to present a detailed example.Our case study shows that it is possible to use a DII COE component in simulations, after consideration of the current design of the DII COE, the C4I systems in question, and the Army simulations that will be stimulated.  However in many cases it is necessary to add functionality to the component so that it is more suited to simulation requirements.  Many times, these simulation requirements are also needed for other C4I systems doing advanced information processing.  As pointed out in Hieb and Sprinkle [8], it is necessary for the two communities – simulation and C4I – to perform advance planning, engineering, and architecture development for integrating M&S within the DII COE architecture.Modifying DII COE components leads itself to the design of embedded simulation.  If the simulation is resident on a DII COE platform as a mission application, it will still be able to use the functionality it needs though the APIs developed for simulation use (e.g., APIs for time management).  A C4I/M&S Interoperability Technical Reference Model [3, 11, & 17] addresses what functionality is needed from the DII COE.The HLA provides an excellent initial set of services necessary for simulations.  The HLA Run-Time Infrastructure (RTI) is software that implements a specified interface to these services.  It still remains a priority to build the actual services themselves into the DII COE.  Thus, the HLA specification can be used to identify necessary APIs in the DII COE.  Existing APIs can be mapped to the required specifications, and new APIs can be identified for development.  The DII COE M&S TWG has the potential to serve as the “coordinator” for M&S requirements to other DII COE TWGs, and develop specifications for how simulations will work with the existing DII COE components.  New DII COE components for M&S should only be developed if they do not duplicate the current DII COE functionality.The DII COE has most of the technical and process components needed for a comprehensive solution to interoperability problems with simulations.  It is still necessary to align or merge the data models that the C4I domain uses with the object models that the simulation community uses as pointed out in Hieb and Blalock [10].  The DII COE components provide a unique opportunity to perform integration of simulation infrastructure and functionality into the C4I domain.7.	AcknowledgmentsFrom the WARSIM C4I Interface Team, the authors would like to thank Ms. Lori Toper and Mr. Ed Harris from Computer Associates and Mr. Reed Redmond from Lockheed Martin for their help and assistance.  Mr. Ron Sprinkle from the AEgis Technologies Group contributed the material for the description of the DII COE in Sections 2.1 and 2.2.  In addition the authors would like to thank Ms. Barbara McArdle from AVERSTAR (who supports the PE0 C3S CMP Development Team), Mr. Stephen Whitson from MITRE (who supports the National Simulation Center's Digital Integration Office at Fort Hood, Texas) and Mr. William Dunn from IITRI/AB Technologies Group, as well as the various presenters from the SIMCI meetings and IPRs the authors attended, whose information and assistance was invaluable in the preparation of this paper.  Mr. Mike Hicks was supported by PEO C3S and Dr. Michael Hieb was supported by the Army's Office of the Director for Information Systems for C4I and the Army Model and Simulation Office while writing this paper.References [1]	Anderson, J.R., Anderson, T., and Hardin, G.:  “The Tactical Simulation Interface Unit (TSIU) Program,” Paper 00F-SIW-046, 2000 Fall Simulation Interoperability Workshop, 2000. [2]	Brennan, J.M.: “The Army Experiment 4 Simulation to Army Battle Command System Experiments,” Paper 98S-SIW-002, 1998 Spring Simulation Interoperability Workshop, 1998. [3]	Carr, F.H. and Hieb, M.R.: “Issues and Requirements for Future C4I and M&S Interoperability,” 7th Conference on Computer Generated Forces and Behavioral Representation, 1998. [4]	Defense Information Infrastructure Common Operating Environment (DII COE), Architecture Oversight Group (AOG) Charter, Defense Information Systems Agency, http://diicoe. disa.mil/coe/ aog_twg/aog/aog_page.html, January, 1997. [5]	Defense Information Infrastructure Common Operating Environment (DII COE), Message Processing Technical Working Group, Defense Information Systems Agency, October 1999.  HYPERLINK http://diicoe.disa.mil/coe/aog_twg/twg/mptwg/mptwg_page.html http://diicoe.disa.mil/coe/aog_twg/twg/mptwg/ mptwg_page.html, December 1999.[6]	Defense Information Infrastructure Common Operating Environment (DII COE) Message Processing Technical Working Group Software Requirements Specification (SRS), Defense Information Systems Agency,  HYPERLINK http://diicoe.disa.mil/coe/srs/srs_base_page.html. http://diicoe. disa.mil/coe/srs/srs_base_page.html., July 13, 1997. [7]	Defense Information Infrastructure Common Operating Environment (DII COE), Integration and Runtime Specification (I&RTS), Version 4.0, Defense Information Systems Agency;  HYPERLINK http://dod-ead.mont.disa.mil/cm/general.html http://dod-ead.mont.disa.mil/cm/general.html [8]	Hieb, M.R. and Sprinkle, R.:  “Simulation Infrastructure for the DII COE Architecture: The Army Vision,” Paper 00F-SIW-035, 2000 Fall Simulation Interoperability Workshop, 2000. [9]	Hieb, M.R. and Timian, D.H.:  “Using Army Force-on-Force Simulations to Stimulate C4I Systems for Testing and Experimentation,” Paper 1999 Command and Control Research and Technology Symposium, 1999. [10]	Hieb, M.R. and Blalock, J.:  “Data Alignment between Army C4I Databases and Army Simulations,” Paper 99S-SIW-034, 1999 Spring Simulation Interoperability Workshop, 1999. [11]	Hieb, M.R. and Staver, M.J.:  “The Army’s Approach to Modeling and Simulation Standards For C4I Interfaces,” Paper 98F-SIW-259, 1998 Fall Simulation Interoperability Workshop, 1998.[12]	Joint Technical Architecture, Versions 1.0, 2.0. 3.0, 3.1, and 4.0 draft 1, Defense Information Systems Agency, http://www-jta.itsi.disa.mil, 14 April 2000.[13]	Lightner, M., Schanduaa, J., Cutts, D., and Zeswitz, S.: “The High Level Architecture Command and Control Experiment Lessons Learned in Designing an Extended Federation,” Paper 98S-SIW-93, 1998 Spring Simulation Interoperability Workshop, 1998. [14]	Newcomb, M., Gustafson, J., and Nguyen, P.:  “The WARSIM C4I Interface,” Paper 99F-SIW-036, 1999 Fall Simulation Interoperability Workshop, 1999.[15]	Ogren, J.:  “Command and Staff Training and the Practical use of the HLA,” Paper 00F-SIW-061, 2000 Fall Simulation Interoperability Workshop, 2000. [16]	Paola, A.R. and Ressler, R.L.: “Stimulating the Army Tactical Command and Control System Using the Run Time Manager: Concepts and Implications,” Paper 98S-SIW-162 1999 Spring Simulation Interoperability Workshop, 1999. [17]	Ressler, R.L., Hieb, M.R., and Sudnikovich, W.:  “M&S/C4ISR Conceptual Reference Model,” Paper 99F-SIW-60, 1999 Fall Simulation Interoperability Workshop, 1999. [18]	Timian, D.H., Hieb, M.R., Glass, J., and Staver, M.J.:  “Using Standard C4I Components to Interface to Simulations,” Paper 98F-SIW-035, 1999 Spring Simulation Interoperability Workshop, 1999.Author BiographiesDON TIMIAN is a System Analyst at Computer Associates.  Prior to joint Computer Associates, Mr. Timian served over 20 years in the United States Army.  While in the Army, he served as an Operations Research and Systems Analyst/Simulation Specialist in all three of the Army’s Modeling and Simulation (M&S) domains; Analytical Concepts and Requirements (ACR), Research Development and Acquisition (RDA), and Training Exercises Military Operations (TEMO).  Just prior to retiring, Mr. Timian was assigned as Deputy, Policy and Technology Division, Army Model and Simulation Office where he helped to develop a pair of prototype interfaces to link M&S and C4I systems via common C4I components.  Mr. Timian has a Bachelor of Arts degree in Chemistry from the University of Arizona and a Master of Science degree in Operations Research from Kansas State University.MIKE HICKS is a Senior Program manager at JB Management, Incorporated.  For the last three years he has been responsible for the software development and architecture of the Common Operating Environment Message Processor (CMP).  Mr. Hicks currently Chairs the Defense Information Systems Agency Message Processing Technical Working Group.  Prior to joining JB Management, Mr. Hicks served over 20 years in the United States Army and eight years as a Department of Army civilian assigned to the United States Army Missile Command were he worked a Deputy Project Manager and Project Manager overseeing multiple software development efforts.  Mr. Hicks has a Bachelor of Science degree in Business from Cameron University in Lawton, Oklahoma.MICHAEL HIEB is a senior scientist with the IITRI/AB Technologies Group. Dr. Hieb is the chief architect of the Army SIMCI OIPT and was the technical supervisor of the Defense Modeling and Simulation Office (DMSO) Modular Reconfigurable C4I Interface project while at SAIC.  He received his PhD in Information Technology at George Mason University in 1996 and performed his doctoral research at the Center for Excellence in Command, Control, Communications and Intelligence at George Mason University.  He has published over 35 papers in the areas of learning agents, knowledge acquisition, interface technology and multistrategy learning.  Previously, he worked as a Nuclear Engineer for General Electric. Dr. Hieb received his Bachelor of Science degree in Nuclear Engineering from the University of California in Santa Barbara and received his Masters of Science degree in Engineering Management from George Washington University.Figure 1. The DII COE Architecture