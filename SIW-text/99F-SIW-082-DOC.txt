Embracing Temporal Relations in Composable Behavior TechnologiesDr. Jenifer S. McCoramckSAIC12479 Research ParkwayOrlando, FL 32826-3248(407) 207-2746 HYPERLINK mailto:jenifer.mccormack@cpmx.saic.com mccormackj@saic.com Sonia von der LippeSAIC12479 Research ParkwayOrlando, FL 32826-3248(407) 207-2747vonderls@orl.saic.comKeywords:Temporal relations, composable behaviors, Computer Generated ForcesThe first phase of the Composable Behavioral Technologies (CBT) project, Task !, focused on creating a graphical user interface (GUI) which allowed an end-user to easily compose behaviors from a set of pre-defined primitive and predicate behaviors.  During prototype development discussions with an RWA ATKHC Commander on ATKHC deep attack missions included the use of time-based or temporal conditions.  Examples of temporal constraints included limiting the amount of time spent in an Attack By Fire (ATF) position and the ability to cross the Forward Line of Troops (FLOT) within a three-minute interval.  For the follow-on effort under task 8, a concerted effort was made to review current research in temporal relations into the CBT architecture.  Support for temporal relations was implemented through the use of start and stop conditions.  These conditions can be applied to both primitive and composite behaviors.  They allow the user to specify the conditions that must exist in order to begin or complete execution of a primitive or composite behavior.  For each start and stop condition, the user may specify a type of temporal relation.  The user, through the Behavior Editor, may set these conditions.  The temporal relations included in CBT include Sequence, Continue Previous Until, Proceed Next After, and Wait on Previous and Next.  These relations are based on the temporal relations defined by Allen for his temporal logic called Interval Algebra. Allen developed Interval Algebra specifically to reason about time intervals (Allen, J.F, 1983). 1. IntroductionThere is a growing need for advances in techniques and methods for semi-automated representation of friendly and opposing forces within Advanced Distributed Simulation (ADS).  Force modernization has caused an evolution in the tactics and doctrine of friendly and opposing forces.  In addition, the focus has shifted from a large monolithic force to forces supporting more regional threats.  These events have created a situation where existing battlefield behaviors within simulations must be modified and new battlefield behaviors must be created in a timely manner.  This is particularly challenging as the specifications for behaviors are costly and time-consuming to develop, and once specified, implementation of those behaviors is labor intensive.  A cost-effective methodology for evolving and developing Semi-Automated Forces (SAF) behaviors must be developed.The first phase of the Composable Behavioral Technologies (CBT) project, Task 1, focused on creating a graphical user interface (GUI) which allowed an end-user to easily compose behaviors from a set of pre-defined primitive and predicate behaviors.  The GUIs developed during the initial phase gave the user a simplified means of creating, storing, and executing complex behaviors.  Therefore, the initial idea of a behavior repository, use of a logic-diagram for behavior creation, and the main architecture of the system was developed during the first phase.  The effort for the current phase, Task 8, was to extend from that main architecture and correct the limitations noted in Roll Your Own Behaviors Final Report.  Specifically, the objectives for this phase were to extend the current capabilities and add additional functionality in the areas of reactive and command and control (C2) behaviors.The current phase of the CBT project involves the addition of new functionalities such as temporal relations, reactive behaviors and improved command and control (C2) behaviors.  While it is hoped that these additional capabilities will allow the user to compose more tactically realistic behaviors, CBT is not intended to emulate the decision-making capabilities of a military commander (e.g., Command Forces (CFOR) and Adversarial Planner projects).  During Task 1 prototype development, discussions with an RWA ATKHC Commander on ATKHC deep attack missions included the use of time-based or temporal conditions.  Examples of temporal constraints included limiting the amount of time spent in an Attack By Fire (ABF) position and the ability to cross the Forward Line of Own Troops (FLOT) within a three-minute interval.  (A summary of the types of temporal conditions extracted from that meeting is presented later in this section).  Based on this knowledge, a concerted effort was made to review current research in temporal relations and determine how to incorporate the concept of temporal relations into the CBT architecture.2. CBT Temporal Relations RequirementsAs previously discussed at the beginning of this section, CBT needs to provide users with the ability to specify temporal relations in composite behaviors.  The following describes the types of temporal information that is required in an ATKHC mission, based on discussions with an ATKHC Company Commander:Ingress/Egress SEAD Clock: Speed of RWA is determined by the SEAD (Suppress Enemy Air Defense) clock which requires tight synchronization in order for the ATKHC to reach the FLOT and other ACPs (Air Control Points) at specific times.  Typically, the ATKHC reach all ACPs within 30 seconds of scheduled times.  Schedule ACPs: Need to be able to schedule/define timing of ATKHC arriving at specific ACP, or waypoints.Duration parameter: The period of time spent in the ABF is limited, for example, if OPFOR does not arrive in the Engagement Area (EA) when expected then ATKHC can change the mission to movement_to_contact or return home.  The course of action enacted by an ATKHC under this condition is determined by the commanding battalion.Time Hacks: Engagement can be started through the use of time hacks (e.g., if the RWA vehicles do not hear anything by a specified time then start engagement of the enemy. This assumes the pre-condition that the enemy is in the EA (Engagement Area) and within weapons range.)The current CBT architecture does not include any form of temporal representation.  The review of literature on temporal relations research indicates that this is a difficult task that has several NP-hard problems (e.g., frame problem).  In addition, much research involved with representing and reasoning about time is conducted under the guise of developing automated planners.  While CBT is not intended to automate the decision-making capabilities of a military commander (e.g., CFOR or AP), in order to model tactically realistic behaviors for SAF entities, an explicit representation of time is required.  A proposed approach for incorporating temporal relations into CBT is through the use of temporal start and stop conditions.  These conditions can be applied to both primitive and composite behaviors.  They would allow the user to specify the conditions that must exist in order to begin or complete execution of a primitive or composite behavior.  For each start and stop condition, the user may specify a type of temporal relation.  The user, through the Behavior Editor or the Mission Editor, may set these conditions.  A summary of these temporal relation types is presented in  REF _Ref420224364 \h  \* MERGEFORMAT Table 1.Table  SEQ Table \* ARABIC 1. Proposed CBT Temporal RelationsTemporal ConditionDescriptionsequenceStart execution of behavior as soon as possible.  Sequence will be the default condition type.Start-of-other <behavior>Start or complete execution of a behavior when the specified <behavior> starts execution.  (Requires the ability to concurrently execute behaviors.)End-of-other <behavior>Start or complete execution of a behavior when the specified <behavior> ends execution.  (Requires the ability to concurrently execute behaviors.)on-orderStart or complete execution of a behavior upon receipt of an order. The order can be sent by the operator or from another behavior.on-time <time>Start or complete execution of the behavior at the specified <time>task-time <time>Behavior must complete execution within the specified <time> limit.Some of the proposed temporal conditions ( REF _Ref420390240 \h  \* MERGEFORMAT Table 2) are implementations of Allen’s interval relations.  The sequence condition is equivalent to the before/after interval relation.  The start-of-other condition is equivalent to the starts/started-by interval relation.  Likewise, the end-of-other condition is equivalent to the finishes/finshed-by interval relation.  The proposed temporal conditions also implement the overlaps/overlapped-by relation (concurrent execution).  The on-time and specific time conditions are based on the point time model since the behavior must begin or end at a particular point in time.  The task-time duration allows the user to implement a temporal constraint that a particular behavior should be executed within a particular time limit (e.g., cross the FLOT within a 3-minute interval).  The on-order temporal condition shall be used to allow primitive and composite behaviors to be initiated or terminated by the operator (user), another behavior, or another unit.In modeling complex domains such as battlefield simulations, external spontaneous events will occur that must cause the entities in the simulation to react with an appropriate behavior.  Reactive behaviors shall be used to handle these external events.  A discussion of how reactive behaviors will be incorporated into the CBT architecture is presented in section 3.3.2.Extract from task analyisis paper2.1  Overview of Related ResearchNumerous areas of Artificial Intelligence (AI) have employed temporal reasoning and include knowledge representation, natural language understanding, commonsense reasoning, qualitative reasoning, diagnostic reasoning, plan generation, plan recognition and scheduling.  Examples of applications for temporal reasoning include planning, prediction, explanation, scheduling and the ability to answer temporal queries. Most of the published research on temporal representation and reasoning is conducted within the context of planning systems.  This is because planning systems require temporal information to constrain the ordering of the steps generated by the plan. Traditional planning systems minimally require the following: a list of actions, temporal information to constrain the orders of actions, preconditions for the actions, and parameter bindings for the variables in the actions.  There are two models for representing time: points and intervals.  These models can be viewed as equivalent for the purposes of temporal reasoning since a time interval can be represented as a set of time points.  Formal logics (Point Algebra and Interval Algebra) have been developed to support each representation framework.Allen has developed a temporal logic called Interval Algebra (IA) to reason about time intervals (Allen, 1996).  In IA, Allen defines 13 different types of interval relations.  These relations are presented in  REF _Ref420390240 \h  \* MERGEFORMAT Table 2.Table  SEQ Table \* ARABIC 2. Interval Algebra Basic RelationsRelationInverseExamplebeforeafterX before Y, Y after X=====X                   =====YmeetsMet-byX meets Y, Y met-by X=====X           =====YoverlapsOverlapped-byX overlaps Y, Y overlapped-by X=======X        ======YduringContainsX during Y, Y contains X       ====X  ========YstartsStarted-byX starts Y, Y started-by X====X=======Yfinishesfinished-byX finishes Y, Y finished-by X    ====X======YequalequalX equals Y, Y equals X=====X=====YOnce a formal representation for time has been selected, a mechanism for reasoning about actions and events with temporal relations must be considered.  Situation Calculus and state-based approaches (e.g., STRIPS) have traditionally been used to implement planning systems. Situation Calculus (SC) represents the world as a potentially infinite set of situations.  Each situation is described by a set of facts or propositions that correspond to the way the world could be at a given time.  Situations are temporally represented as discrete time points.  The performance of an action can change the properties in the current situation thereby causing a transition to a new situation (Gerevini, 1997).  External events can also cause actions to execute that change the situation.  Time is implicitly represented by the set of facts that define a situation.  STRIPS is a state-based domain-independent planner that is more restrictive than SC.  An initial state of propositions with a desired goal, or end-state, describes the current world.  Operators are applied to achieve the desired end-state.  The actions incurred by the operators cause new propositions to be added or deleted from the current world state.  To simplify the planning problem, STRIPS applies a set of underlying assumptions:All effects and actions are known.Changes in the world are only effected by the actions of an agent executing the plan.Concurrent actions can never occur, and all actions have only deterministic effects.While SC and STRIPS provide simple paradigms for reasoning about actions and events, this simplification comes at a cost.  Both approaches contain several well-known, NP-hard problems.  They include the frame problem, the ramification problem, and the qualification problem.  These problems are intrinsic and are independent of the reasoning formalism used (i.e., change-based vs. time-based) (Shoham and McDermott, 1988).  A brief description and example of each problem type is presented below.frame problem:  The frame problem deals with the persistence of change based on an action. In general, the frame problem is the difficulty of formalizing the properties of the world that are unaffected by the performance of an action, without explicitly enumerating all such properties (Gerevini, 1997).  For example, if a blue book is placed on the table, one cannot prove that the color of the book did not change to black, or that the height or the size of the table remains the same.  In other words, whether the state of things before a change occurred will persist after the change. The frame problem is also referred to as the persistence problem.ramification problem:  The ramification problem, in a sense, considers the opposite effect of the frame problem.  While the frame problem is concerned with formalizing the things that do not change as a result of an action, the ramification problem is the formalization of all changes (i.e., effects) that result from an action.  For example, when driving a car to the store, the relevant effect would be a change in the car’s location from home to the store’s parking lot.  The fact that all the sub-components of the car have also moved or that the amount of wear incurred to the tires during the trip are effects that would generally not be considered relevant to the problem.qualification problem:  While the ramification problem concerns exhaustively listing all effects of an action, the qualification problem is the formalization of all preconditions of an action.  In general the qualification problem is to avoid exhaustively enumerating all the preconditions of an action (Gerevini, 1997).  To handle the qualification problem, the relevant preconditions for an action within a specific domain need to be determined. The STRIPS assumptions simplify the planning problem and circumvent the frame problem since only the effects of an action are known (i.e., external events are not allowed).  This is also known as the closed world assumption (Cohen and Feigenbaum, 1982).  Neither STRIPS nor SC support reasoning about actions and events in a complex domain, such as battlefield planning.  They have limited to no abilities to handle external and simultaneous events.  Time is implicitly represented based on their states or situations.  Complex planning domains require an explicit representation of time (Allen and Ferguson, 1997).Applications of Temporal RelationsState and Event Time NetThe state and event time net is a paradigm for representing temporal systems and uncertainty for industrial applications.  This paradigm can be used to recognize the significance of events and state variables with respect to current plant conditions and predict the future propagation of disturbances (Arroyo et. al, 1996).  The state and time net can handle both causal and time dependencies.  Probability distributions are used to represent causal dependencies, while fuzzy linguistic terms are used to represent temporal dependencies.The state and event time net is a directed acyclic graph consisting of a set of nodes and arcs.  The nodes can represent events or state variables, while arcs are directed edges that represent causal dependencies between state variables and direct temporal dependencies between events (Arroyo et. al., 1996).  The net uses a time point representation.  The state variables represent the value of a state at a specific point in time.  The temporal dependencies between events can be managed using fuzzy linguistic variables.  Examples of fuzzy linguistic terms include “several minutes” and “about 3 minutes.”Adversarial Planner (AP) The Adversarial Planner (AP) system was developed to support automated planning by intelligent/adversarial agents in the battle management domain.  Traditional non-adversarial planners focus on interactions between steps within its own single plan, whereas, an adversarial planner must consider conflicts between two opposing plans (Applegate, et. al., 1991).AP uses the STRIPS assumption to handle the frame problem in automated planners.  It assumes that all effects of an operator (action) will remain unless explicitly changed by another operator.  To handle the qualification problem, AP assumes that the set of relations operators defined by the user provides an adequate model for change appropriate for the level of abstraction chosen for the plan (Elsaesser, 1997).AP is implemented using a state space representation where the state of the world is represented by a set of propositions (facts).  Operators are applied to the current state of the world (i.e., situation), that cause some propositions to change resulting in a new situation.  AP will develop and execute a plan of a partially ordered series of operators that meets the goals and subgoals of a mission. The first level of the plan, the concept of operations, will usually be a conjunction of temporally ordered activities that correspond to the phases of a mission.Temporal relations implemented in AP are used to specify the order in which the subgoals are planned, monitored and executed.  Temporal relations are also used to constrain which agents can execute the subgoals since AP assumes that no agent can be doing two things at the same time.  The :plot statement within AP operators is used to specify temporal relations and to represent hierarchical abstraction.  Operators that do not contain :plot statement are referred to as primitive actions.  Several different types of temporal relations including sequential, parallel and simultaneous relations can be defined between subgoals of an agent. An example of temporal relations to order subgoals within a :plot statement is presented below (Elsaesser, 1997)::plot (Sequential	(Parallel (location ?agent1 ?left)	               (location ?agent2 ?right))	(Simultaneous (attack ?agent1 ?enemy-agent)	                        (attack ?agent2 ?enemy-agent))A listing of AP temporal relations and the effects of using them is presented below:Parallel:  Parallel means order of actions is unconstrained.  For a single agent only the sequential and parallel operators are legal.Sequential:  The first sequential action starts with the ?input-situation for the sequential block, subsequent actions start from the situation that resulted from the previous action.  This is equivalent to the before/after temporal interval relationship identified by Allen.Simultaneous:  The operations that carry out the listed subgoals must all start and end at the same time.  This is equivalent to the equal temporal interval relations defined by Allen.Covers:  The first action should start before and end after the action selected to execute the second, or covered sub-goal.  This is equivalent to the during/contains temporal interval relation defined by Allen.A version of the Adversarial Planner has been implemented as a ground forces company commander in Eagle-AP.  Eagle is a ground combat analysis simulation.  Eagle was developed using KEE (Knowledge Engineering Environment), a commercial, rule-based reasoning system.  In Eagle each resolution unit is implemented as a local rule base that senses its environment and reacts in an intelligent manner.  The motivation for adding AP to Eagle was to add replanning at the echelons above the resolution units (Elsaesser, 1996).4.	ApproachFigure 1 displays the Behavior Editor with the available temporal constraints.  The timing constraints are specified in pairs, and for each statement, the timing constraint pair indicates: the constraint that, if satisfied, will terminate the current statement, and the constraint that must be satisfied before proceeding to the next statement.Figure 1.  CBT Version 2.0 Behavior EditorIn the Behavior Representation Grammar (BRG), timing constraints are implemented as a class hierarchy.  The OtherBehaviorBasedTimingConstraint family of constraints deals with relationships between behaviors.  Those constraints are only satisfied when certain conditions are true for other behavior statements, such as another behavior starting or ending.  Constraints dealing with time are supported by the OnTime constraint which is satisfied when a specific simulation time is reached, and the OnDelay family of constraints which are satisfied when certain delays after other behaviors start or stop are satisfied.  Though not used in CBT 2.0, a system of notifications was supported to enable arbitrary events to be used as constraint conditions.  An example of a notification might be a user-defined on-command order.  Also, the constraint system supports combinations of constraints via AND and OR logical operators, via timing constraint expressions, however no GUI controls were developed to input such constraint expressionsThe rest of this section will be completed in the final version.  5.	ConclusionThis section will be completed in the final version.6.	AcknowledgementsThe work described in this paper was carried out by SAIC for STRICOM under the Composable Behavioral Technologies BAA contract, number N61339-98-C-0010.  The authors wish to express thanks to STRICOM and the SAIC CBT development team.7.	ReferencesApplegate, C., Elasaesser, C., and Sanborn, J.  An Architecture for Adversarial Planning. IEEE Transactions on Systems, Man and Cybernetics, 20(1), 1990.Booker, L., Burke, C., and Wittaker, G. M. 1998.  Toward Motivational Control of Tactical Behaviors.  In Proceedings of the Seventh Conference on Computer Generated Forces and Behavioral Representation, May 12-14, Orlando, Florida. [5]	Courtemanche, A., von der Lippe, S., McCormack, J., “Composable Behavioral Technologies” (97F-SIW-xxx), 1997 Fall Simulation Interoperability Workshop, Simulation Interoperability Standards Organization.Elsaesser, C. 1996.  Command Decision Modeling, System Assessment: Eagle-Adversarial Planner.  In Command Decision Modeling Technology Assessment, US Army AI Center.Elsaesser, C. 1997. Adversarial Planner User Guide.Gerevini, A. 1997.  Reasoning About Time and Actions in AI: Major Issues. In Spatial and Temporal Reasoning, O. Stock, ed.  Kluwer Academic Publishers.Gustavo, A. F.  Temporal Reasoning Under Uncertainty for Industrial Diagnosis.  In Proceedings of the ISAI/IFIS 1996.Shoham, Y. and McDermott, D. 1988. Problems in Formal Temporal Reasoning. Artificial Intelligence, 36.Van Beek, P. 1997.  Reasoning about qualitative temporal information.  In Spatial and Temporal Reasoning, O. Stock, ed. Kluwer Academic Publishers.Author Biographies DR. JENIFER MCCORMACK is a Scientist for SAIC and has extensive academic and industry experience in developing simulation-based training systems.  Dr. McCormack was Task Analysis lead for the CBT version 1.0 and 2.0.  She has been involved in several SAF-based projects and government programs including WARSIM 2000.  Dr. McCormack received her Ph.D. in Industrial Engineering in 1995 from the University of Central Florida.  Her dissertation focused on knowledge acquisition and student modeling for simulation-based training systems.Sonia R. von der Lippe has over thirteen years experience in software engineering focusing on user interfaces, software process, and system and software architectures.  At SAIC, Ms. von der Lippe is a Staff Scientist in the ASSET Research Programs Division and is the Principle Investigator for the CBT project.  Ms. von der Lippe received her Bachelor of Science in Computer Science from Clemson University in 1987.