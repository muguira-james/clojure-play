1. IntroductionIn the late summer of 2006, Lockheed Martin Simulation, Training, and Support was given the challenge of developing a simulation system capable of modeling the inhabitants of a regional populace, such as the New York City Tri-State Area or the Hampton Roads, VA.  The population of the regions would potentially be several million in magnitude.  The system would be required to represent the normal daily activities of the populace such as commuting to work, going out to dinner, etc.  In addition, the populace must react to external events such as an evacuation, terrorist attack, natural disaster, or citywide emergency response measures.  The populace’s actions would be used to drive utilization of resources such as roads, hospitals, and other regional and national assets. Our starting point for this effort was the CultureSim model [1], which developed for the US Joint Forces Command (JFCOM).  CultureSim is an entity level urban populace model capable of generating realistic urban populations.  The population behaviors exhibited by CultureSim are both realistic at the entity level (e.g. following the rules of the road) and at the aggregate level (e.g. rush hour).  In addition entities respond to each other, entities simulated by other simulations, and events such as weapons fire.  CultureSim has been used to generate populations of over a million while running on a large cluster computer.  However, we wanted to make our product available to a broader customer base including customers who do not possess massive supercomputers.  Since CultureSim has some of the best scalability features of any entity level distributed simulation, it became apparent that an entity level approach would not work satisfy the requirements.In an aggregate simulation, individual entities are joined into logical groups or aggregates.   Aggregate simulations have been used in numerous military models such as JWARS and WARSIM.    The hierarchical and highly structured nature of a conventional military organization is well suited to an aggregate simulation.  Since units move and work together they can be sensibly modeled as a single construct.  The specific level of aggregation will depend on the resolution and dynamics of the model and scenario, but the concept is the same whether the aggregates are at the platoon, company, brigade or higher level.For a civilian populace with the resolution and dynamics of the scenarios our model requires, no suitable aggregate existed.  Aggregating based upon home location is not possible because inhabitants of a region exhibit different daily activity profiles, such as commuters, students, 2nd shift workers, etc.  If we expand our aggregates to include one aggregate per home location per daily activity profile, we find that students attend different schools, commuters work in different locations, etc.  Additional parameters, such as health, hunger,   thirst, or vehicle fuel supply further complicate our calculations or fragment the aggregate and increase the ratio of aggregates to entities simulated towards one.  Events injected during the simulation can further complicate matters by affecting some but not all members of the aggregate in a way that may require additional tracking.Consequence Management Simulation (CMSim) is the model we have implemented to provide a region wide dynamic populace model.   A mixed resolution approach is used to overcome the limitations of a strictly entity or aggregate based approach.  In this paper, we discuss our mixed resolution technical approach, its implementation and its performance results versus CultureSim.2. Mixed Resolution Simulation2.1 DesignThe key issue to overcome in the design of CMSim was the conflict between the scalability and resolution requirements.  A mixed resolution distributed simulation approach was used to achieve both requirements simultaneously.  In standard mixed or multi resolution models a high resolution models are run in the area of interest while lower resolution models are run to provide the context for the high resolution area [2].  CMSim uses a different approach.  In CMSim the following model is used:Each vehicle and person is represented and modeled at the entity level.  Network representations are aggregated.CMSim entities react to other CMSim entities only through aggregate data.Thus each simulator in the distributed system is responsible for simulating a sub-set of the individual entities.   The individual entity data is not transmitted on the network as it typically would be in a DIS or RPR FOM HLA implementation although the system does provide a query capability for instances where one would like to find all the entities in a given area.  Instead each simulator publishes the local contribution to systems such as a road traffic model, a grid based population census, or the entry and exit of entities from facilities such as hospitals or shelters.  Each simulator can then determine the overall state of these systems based upon the combination of the appropriate aggregate data from each of the other simulations.  Section 3 of this paper goes into greater detail as to how this design was applied to several component systems of CMSim.2.2 AdvantagesThe primary advantage of disallowing entity-to-entity level interactions between CMSim entities is that it reduces the order of magnitude of the number of operations to perform.  The basic order of magnitude of running models that would allow CMSim entities to interact with each other would be N^2, where N is the number of entities in the simulation; each entity would have to interact with each other entity.  This could be pared down significantly by filtering which models interact with each other; indeed, a significant amount of effort has been spent on such optimizations for CultureSim and other simulations that have interoperated with CultureSim  [1], [3].By limiting ourselves to interacting with the aggregate, however, we lower the basic complexity to N, where N is the number of entities in the simulation; each entity runs its models once using the aggregate data.  There is the additional complexity of combining the aggregate data, but the number of simulators is trivial relative to the number of entities within the simulation.  A sample simulation, for example, might have 20 simulators and 2,000,000 entities.One additional benefit is that by not publishing the movement of individual entities, their behaviors need not be as high fidelity.  Much of the expense of CultureSim consists of providing realistic individual entity movement and collision avoidance [1].  While CMSim monitors entity movement so that factors such as traffic congestion are simulated, it does not need to provide individual collision detection or calculate an entity's movement behaviors as often.Finally, by aggregating our data we potentially improve our network scalability.  The traffic model, for example, sends a single integer vehicle count per road instead of an update for each vehicle on the road.  In addition to being a much smaller amount of information, the overall amount of information sent asymptotically approaches the number of roads within the simulated area as the number of entities increases, instead of linearly increasing with the number of entities.3.2 LimitationsThe scalability improvements discussed in the previous paragraphs require tradeoffs from the strictly entity level simulation.  The key difference is that the state of individual remote vehicles is not known.  This restricts how we can display and interact with remote vehicles.  An entity-level 2D or 3D display of the simulation is not readily available, for example.  Simulation models that need to view all entities in an area on an individual level are similarly unable to function.  These limitations can be overcome by querying for the necessary data, but widespread use of such a system would remove the scalability advantages of the system.One of our initial assumptions was that the operators using our simulation would not expect to have visual sensors displaying traffic.  However, currently many operations centers have links to traffic cameras and other visual inputs.  For a small number of cameras, or for systems requiring direct interaction with CMSim entities, a query system could be used.  If the cameras are too numerous, however, the advantage of publishing an aggregate instead of individual entities is lost.To support a more widespread display of CMSim entities as individuals, initial work has also begun on a system that generates traffic from the aggregate data.  The entities generated by this system do not match the vehicles they represent on a one-to-one pairing, but appear and move in the correct regions with the correct quantities.  As such, the system is inappropriate for roles that require direct interaction with individual CMSim entities but well suited for traffic cameras intended to model the quantity and flow of traffic within a region.3. Implementation3.1 Traffic ModelingThe first system developed for CMSim was the traffic modeling capability.  CMSim entities travel along roads determined according to their behaviors.  By default, CMSim entities use a “commuter” behavioral profile system developed for CultureSim.  Each commuter entity has a daily schedule consisting of a set of actions.  Each action has times and days associated with its execution, probabilities of occurrence, and a building or category of buildings associated with it.  The entities generate their schedule on a day-by-day basis using the buildings and transportation networks provided by the simulation's terrain.  This schedule generates destinations that are then fed into the movement model as the entity travels around the world in real time.CMSim periodically queries the movement model to determine what roads the vehicle has traveled over recently.  Each simulator sums the number of entities on each road, and then publishes this sum for each road on a regular basis.  This published data is then in turn used by each simulator to determine the total traffic burden on each road.  CMSim's 2D display can display this traffic by colorizing the roads according to traffic density.CMSim entities react to this aggregated traffic data as it is published.  The CMSim movement model, for example, takes traffic density into account when determining how rapidly a CMSim entity can move along the roads in its path.  This allows for heavy traffic to slow road travel without expensive per-entity collision avoidance or the need to constantly update the vehicle and road state as vehicles individually enter, exit, and move along the road.The flow of traffic can additionally affect an entity's decision making and higher level behaviors, as well as the entity's rate of travel.  If a road or set of roads becomes sufficiently congested the entity might decide to seek an alternate route or park and travel on foot.  If reaching a particular objective proves prohibitively difficult, the entity might even abandon its present task altogether.3.2 Regional DataCMSim also provides regional data on its entities.  The aggregation is handled similarly to roads; each simulator publishes an entity count for each cell on a grid, and the simulators locally sum the number of entities from each simulator.  The data can be displayed on the screen as a overlay that indicates entity density with color.The grid is dynamically defined at run-time from a data file.  This allows for changes in the grid's size, placement, and grid cell density without requiring a recompilation.  Multiple data sets are published for each grid to allow for different population views such as number of pedestrians, number of moving entities, or number of casualties.3.3 Interacting with CMSim EntitiesEvents that interact with CMSim entities must be designed to work within the constraint that data on remote entities is not available without specifically querying for it.  Generally speaking, interactions that have been implemented for CMSim fit into three categories: immediate events, persistent effects, and direct entity interaction.3.3.1 Immediate EventsMany interactions within CMSim occur as an instant event that produces an immediate result and then has no further direct impact on the simulation.  The source of these events usually does not require any feedback from the entities it affects.  An explosion is an example of such an event.In these cases, the source of the event advertises the event, and each simulator runs its own copy of the appropriate model and applies the results independently.  If an explosion occurs, for example, the source of the explosion publishes the explosion's parameters and then each simulator checks if its local entities are damaged and applies damage as needed.  If entities are killed or injured, the results will show in changes to aggregate data; the population may decrease and the casualties increase in a grid cell, for example, or traffic may increasingly flow to or away from the area of the explosion.3.3.2 Persistent EffectsAnother category of events are persistent effects that have a continuous effect on the simulator.  Police officers directing traffic and facilities providing services to the populace behave like this.  Although they are published as a persistent object rather than an instantaneous message, these effects are handled much like immediate events; each simulator observes the effects and apply the results locally.Additionally, immediate events may also have persistent results.  The explosion given as examples in 3.4.1 above might damage or block the road network in addition to damaging entities.  There is a need to have the road damage be consistent from simulator to simulator and to advertise the road damage to late joining simulation participants, as unrealistic traffic patterns may be produced if each simulator has a different state for the road network.In this case, the simulators choose an authoritative "master" simulator to calculate and publish the effects spawned by an event.  The master is responsible for publishing the results of non-deterministic effects and advertising the current state to late joiners.  Because this data does not increase with the number of entities in the simulation, it does not pose scalability difficulties.Persistent data published by a "master" system is in most cases remembered by all simulations so that another simulation can take over data publication responsibilities and become the new master if the old master is shut down.3.3.3 Direct Entity InteractionThe most difficult category of interactions is interactions that need to directly interact with specific CMSim entities in a multi-step process.  The main time when this is necessary is when a non-CMSim entity has a specific task it wishes to perform on a finite number of CMSim entities, such as transporting entities from one location to another.  Making this possible is a multi-step process.  First, the non-CMSim entity needs to locate entities to interact with.  A CMSim entity data query, usually filtered by location and entity status, is sent out and the simulators each respond with a list of entities that fit the query.  To minimize the data sent, only a unique identifier for the entity is sent, consisting of an integer unique to the simulator simulating the entity and an integer uniquely identifying the simulator. Upon receiving the list of entities, the requestor- in this case, a non-CMSim entity- selects an appropriate number of entities from the query results.  If more detailed entity information is needed, it can query for that data.  Once it has selected the entities to interact with, it requests control over the entities.  At this point, the entities' local simulators freeze the state of those entities and the simulator that made the request is responsible for managing the state of the entities.  When the acting simulation has performed all desired operations on the requested entities, it sends the results back to the local simulators and the entities resume normal simulation.4. ConclusionBy simulating entities at an individual level but substituting entity-to-aggregate interaction for entity-to-entity interaction, many of the benefits of entity level simulation can be maintained while greatly increasing the scalability of entity count.  This solution has several limitations, and such a system may not be appropriate for domains that required detailed entity-level views or frequent interaction with individual entities.  In higher level simulations where maximizing simulation scope while minimizing resource requirements is important, however, this approach can yield significant results; given the same quantity of computational resources, CMSim can simulate roughly ten times the number of entities than it's predecessor, CultureSim.5. References[1] Moyer, D.  2006.  Obstacles to Producing Realistic Urban Traffic in a Distributed Environment.  2006 Spring Simulation Interoperability Workshop. (SIW)[2] Painter, Ronald, Jones, James III, Macannuco, David and Carole Snow.  Multi-Resolution Engagement Modeling Through a JSAF-JWARS Federation.  2005 Spring Simulation Interoperability Workshop. (SIW), 05S-SIW-107[3]  Speicher, D. & Wilbert, D.  2004.  Simulating Urban Traffic in Support of the Joint Urban Operations Experiment.  Interservice/Industry Training, Simulation & Education Conference (I/ITSEC).A Mixed Resolution Simulation For Highly Scalable Urban and Regional Populace ModelingDale MoyerDavid MacannucoLockheed MartinSimulation, Training, & SupportAdvanced Simulation Center35 Corporate DrBurlington, MA 01803HYPERLINK "dale.moyer@lmco.com"dale.moyer@lmco.com, HYPERLINK "dan.speicher@lmco.com"david.j.macannuco@lmco.comABSTRACT:  Scalability is a key issue when attempting to simulate regional populace over a large area, especially when simulating urban areas featuring a high population density. Aggregation is a common solution to scalability issues and works well for domains such as military simulation, where the hierarchical organization of military units provides an inherent basis of aggregation. We had the need for a model that could simulate a large, dynamic civilian populace that responded to changes in the simulated environment in real time while providing information such as the location and state of the populace and the loading of a detailed road network within the simulation worldThe desired number of entities was an order of magnitude above what our existing entity-level population model, CultureSim, could provide without access to a large supercomputer. In order to achieve this goal, we were willing to sacrifice model resolution to achieve the desired scalability. Unable to find a reasonable aggregate model for the populace that would meet our requirements and understanding the scalability implications of an entity level model, we began to look for a middle ground. The middle ground at which we arrived is a mixed resolution simulation. In our model, each member of the population is represented at the entity level. Each entity, however, only interacts with aggregate data rather than interacting directly with other entities. This paper discusses the implementation and presents results of a mixed resolution urban populace model.Figure 3-1 Traffic Jam On Bridge Represented by Red Coloring of RoadFigure 3-2 Population Density Display