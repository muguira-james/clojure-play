Leading Edge Architecture for Prototyping Systems (LEAPS)A Framework for Modeling Complex StructuresRobert M. AmesRichard T. Van EseltineNSWC/Carderock DivisionComputer Modeling and Simulation Department9500 MacArthur Blvd.West Bethesda, MD 20817301-227-3657, 301-227-1922 HYPERLINK "mailto:amesrm@nswccd.navy.mil" amesrm@nswccd.navy.mil,  HYPERLINK "mailto:vaneseltinert@nswccd.navy.mil" vaneseltinert@nswccd.navy.milKeywords:SBA, M&S, Product Modeling, Virtual PrototypingABSTRACT: This paper describes the role of three related software development efforts in: (1)geometric modeling; (2)topology modeling; and (3)common product representation and multi-discipline integration. The first, Geometry and Engineering Mathematics Library (GEML), provides a mathematical framework for geometry, grid data structures, analysis characterization, and behavior modeling. The second, Geometry Object Structure (GOBS), is a new geometry topology framework that provides a unique modeling capability to represent typical CAD-related geometry, as well as provide more complete functionality for discretization, evaluation, modeling of complex boundary representation solids of different material elements, logical view construction, and bi-directional communication of topology between CAD systems, modelers, and analysts.  The third element is LEAPS, which provides the product information representation methodology required to facilitate the work of an integrated product team.  This paper will describe the unique role of GEML, GOBS, and LEAPS in the design and analysis of complex structures.INTRODUCTIONThe integration of design and analysis has been given a lot of attention lately with “Smart Product Models”, “Simulation Based Design”, “Integrated Design Environment”, and “Integrated Product Data Environment”.  This paper will describe a new approach to product modeling through the use of new representational methods.  This approach starts with the assumption that all disciplines need product model data; that the need for a common representation exists; and that the product model must contain sufficient information to convey design intent and detail for all disciplines. The fundamental premise is made that product model data is composed of geometry, performance, and process data.  The approach taken includes the needs of manufacturing, but this paper will concentrate on how this method applies to design and engineering analysis.  A premise is made that product and process integration occurs through a common representation and characterization (model) being designed, assessed, or manufactured.  In essence, a common product model supports the application of information technology to all aspects of product development, manufacturing, and operation. It is based on a unified view of information captured in a product throughout its life cycle.  Consider the following notional architecture that could support such a product model ( REF _Ref514644257 \h Figure 1.1).Figure 1. SEQ Figure \* ARABIC 1 - Notional Product Model ArchitectureIn  REF _Ref514644257 \h Figure 1.1, a product model is depicted showing a relationship between functional domains.  These domains include design and analysis as well as utilities and tools common to all users.  We have all been “Powerpoint Engineered” with similar diagrams depicting an environment we’d all like to believe we have or can attain easily.  While we tend to focus on the boxes, very few of us understand the arrows.  Consider requirements for these arrows.  First, we’ll leave off the communication mechanism and concentrate of the data requirements.  The annotation of  REF _Ref514644257 \h Figure 1.1 now looks like  REF _Ref518185411 \h Figure 1.2 when we looks at these requirements for design and analysis.Figure 1. SEQ Figure \* ARABIC 2 - Notional Architecture Data RequirementsA cursory review of the requirements imposed on a common product model shows the complex and extensive need for geometry and its topology, domain decompositions of product space, performance and property data, materials, and many other data.  As product life cycles evolve from concept to manufacturing to maintenance, it is clear that for a product model to characterize reality it must be flexible, extensible, and a superset of all requirements imposed on it.  If the domains we call design and analysis utilize applications like CAD, FEA, and CFD to fulfill these functions then the product model must be capable of representing and communicating this data to these applications.  If individual domains performing simulations require dynamics, a product model should be capable of representing movable components like radars, mobile components like forklifts, and static models containing fluids like piping and HVAC.It has become evident over the years that one of the major roadblocks to integration is geometry as geometry plays a vital role as the common element in the design and analysis of complex systems. In essence, computational geometry is the closest data representation of the actual product of any piece of information. The form of geometric representation can determine the level of effort involved in generation of analysis data, the means to communicate the design for product review and mockup, and the ability to present the product for manufacturing. As important as the role geometry plays, different organizations and disciplines have different ‘views’ of the geometric product.  In addition, these ‘views’ or representations are sometimes imposed on, and constrain, the design team through the use of commercial software through pre-established representations, or by the designer composing the model.  The translation of design intent through geometry representation can cause considerable ambiguity or make assumptions that are not explicit in the representation.  Similarly, the association of analysis data to the product geometry determines the ability to couple multi-discipline analysis.  It is not surprising then that when complex systems are designed, the integration of performance data with geometry becomes critical and similarly more problematic.   The product representation has a tremendous impact on the cost and ability to perform analysis.Product models start with methods and algorithms that are used to characterize shape, behavior, and content.  These methods are fundamental to the modeling process.  Likewise, the use of these mathematical methods and the associations made among them provides the building blocks for system design, topology, and coupling.  Through proper model topology a framework can be built that provides application development and multidiscipline integration necessary for a fully capable design environment.  This structure is shown in  REF _Ref422016023 \h Figure 1.3.Figure 1. SEQ Figure \* ARABIC 3 – Product Model Architectural DependenciesThis framework in  REF _Ref422016023 \h Figure 1.3 is described by their component technologies.  GEML provides a mathematical foundation necessary for characterization of geometry, analysis, and their coupling.  GOBS takes this mathematical foundation and builds unique topology models that allows for multidiscipline access to the design without duplication and redundancy.  Finally, LEAPS combines the modeling of GOBS with an application framework from which an environment can exist for designing and assessing complex systems.  The following three sections describe these building blocks and the relationship among them.MATHEMATICAL BASIS FOR MODELING – GEMLThe Geometry and Engineering Mathematical Library, GEML, provides a mathematical basis for modeling.  GEML is a C++ implementation of the DT_NURBS subroutine library.  The objective of GEML is to provide a suite of mathematical objects for design and analysis.  This object library includes functions to: 1) import, export, modify, and evaluate CAD-generated data; 2) develop, modify, adapt, grid or mesh data with associated spline functions; and 3) store resultant geometry, grid, and analysis data in a common framework with dependencies maintained.  Using these objects, a GEML based framework can contain and control all information relating to geometry, grids, and analysis.  Since analysis is dependent on grids, and grids on geometry, the coupling of these elements in an object-oriented data structure is logical. GEML provides for flexible representation and object dependency.  It includes such features as geometry varying with time; mapped geometry; grids defined in the geometry domain, and n-dimensional functions for analysis characterization and behavior modeling. In order to model geometry, grids, and analysis data it is necessary to have a mathematical basis which facilitates representation of all three and allows for both implicit and explicit coupling of the data.  A fundamental element in GEML is the notion of n-dimensional spline functions, combined with composition, select, and affine functions. N-dimensional splines in GEML allow for the modeling and interpolation of any number of geometric and analysis variables; and by any number of independent parameters such as time, frequency, or iteration.  This n-dimensional spline is the building block for dynamic, variational geometry, and representation of analysis data as a function.  N-dimensional analysis functions are also ideally suited for use as performance behavior models. Consider a traditional spline surface as depicted in  REF _Ref419617370 Equation 2.1.  GEML extends this representation to n-dimensions as in  REF _Ref419617438 \h Equation 2.2.  (x, y, z) = f(u, v)Equation 2. SEQ Equation \* ARABIC 1 - Traditional CAD Surface vs. GEML(x, y, z, Vx,Vy,Vz,Cp, temp,...) = g(u, v, time,…)Equation 2. SEQ Equation \* ARABIC 2 - GEML N-Dimensional FunctionOf the GEML functions, the spline and composition functions provide the essential building blocks for geometry and analysis characterization and coupling.  The removal of dimensional constraints affords tremendous flexibility in the modeling of objects.  Additionally, the ability to map these functions to each other extends this flexibility by removing parametric issues as a modeling constraint.  GEOMETRY OBJECT STRUCTURE – GOBSGEML provides a framework for representation of geometry and analysis data, but multi-discipline design integration requires that the topology of the design model be sufficient for discretization and analysis.  Simply having the math objects and methods still leaves an almost infinite number of topology representation options.  The phrase “sufficient for discretization and analysis” is equally undefined unless the presumption is that the transfer of design knowledge and model topology are explicitly defined in the model and not inferred by a rendered image of the concept.  Consider the following view of CAD geometry as a source for discretization shown  REF _Ref420131083 Figure 3.1. Figure 3.1 - Multiple Geometry RepresentationsThe depicted geometry illustrates that in reality geometry comes in many forms.  These forms can all contain the same mathematics, (i.e nurbs entities), but the use of these entities in the topology of the model can vary widely.  The typical CAD solids representation treats the ship as a collection of solid blocks each containing its own entities and these entities containing no knowledge of its relationship to the other entities. The untrimmed surface model makes no assumption about the logical relationship between spaces and surfaces.  Generally, the boundaries are implicit not explicit, meaning, further information about the geometry and its relationships are not explicit in the geometry itself but are assumed (i.e the deck is bounded by the hull).  There are issues with this model in resolving boundary issues such as when a surface is bounded by another surface which side of the intersection is kept.  Consider the case where the port and starboard side of a hull bound each other or when a compartment is defined as the boundary of eight surfaces forming an “L-shaped” compartment.  In some areas the surfaces are parallel and coincident and in others they may not be close enough to determine an intersection. In general, as long as the geometry is carefully controlled and not too complex the model has some advantages. This model becomes more complex as the number of entities gets larger or the geometry becomes more complicated. Trimmed surfaces generally provide the most visually correct representation, but lose all associations between surfaces. For example, there is no knowledge about the relationship between hull and deck and that the two adjacent surfaces are connected.  They look connected, but are they?  A unique and patent pending technology was created called Geometry Object Structure, or GOBS.  GOBS is not an application, but rather a geometry technology.  It has been implemented in the LEAPS architecture, which will be discussed later.  GOBS is typically referenced as LEAPS/GOBS, but since LEAPS has not been introduced yet we’ll refer to it simply as GOBS.  The GOBS topology model provides the means to resolve complex product modeling requirements pertaining to geometry. While GOBS utilizes GEML mathematics, LEAPS has yet to implement all of its functionality.  The extensibility of the LEAPS architecture will allow for enhancements to GOBS as interface requirements push these objects to the fore. The GOBS technology allows CAD system geometry and attributes to be presented to engineering modelers and analysts in a form, which allows for convenient discretization according to the requirements of their models. GOBS contains connection entities that define common boundaries between objects like the intersection at a deck edge and the hull.  The boundary of the deck knows where it is located on the hull and visa versa.The GOBS model also purports that geometric product model data is defined and represented as ‘views’ of geometric objects.  The word “view” is in quotes because it is actually an object that appears as geometry. This is not to say that GOBS does not allow geometric objects to represent geometric product model data only that another more powerful approach is available. This is contrary to most CAD representations where the geometry defines the view and the part simultaneously.3.1 Product Model ViewsIn GOBS  “views” of product model data are actually objects that compose existing geometry into unique physical objects.  Similarly there are views that associate physical objects into like groupings.  Views that create physical objects from geometry elements are called Topological Views. Views that associate Topological Views into like groups are called Common Views.3.1.1Topological ViewsThe term Topological View is foreign to most familiar with geometric modeling.  Think of Topological View’s as traditional surfaces, trimmed surfaces, and boundary representational (BREP) solids, with additional knowledge.  The construction of Topological Views allows for member shape objects, like surfaces and solids, used in the creation of a Topological View, to also play a role as geometric members in others Topological Views. 3.1.2 Common ViewsCommon Views do not have any spatial constraints, unlike Topological Views, they are simply a logical grouping of Topological Views.  Common Views can also have other Common Views as members.  Common Views are the primary vehicle by which domain analyst or designers will view or interrogate the product model.  One example of a Common View could be “Habitability Spaces on Deck 3”.  Another Common View called “Ship Habitability Spaces” could contain the Common View  “Habitability Spaces on Deck 3” as a member.  Similar uses of Common Views could include “Exterior Surfaces”, “Compartments”, “Machinery Spaces”, or “Mast”.   REF _Ref514732293 \h Figure 3.1 below shows an example of a “Weather Exposed Structure and Components” Common View.Figure 3.1 - Weather Exposed Structure and Components Common View3.1.3 Shape ObjectsSome distinctions should be made of the differences between GOBS shape objects and what can be considered typical geometric entities in applications that use and compose geometry such as CAD systems.  In GOBS, geometry (Topological Views) is the association of shape and Properties. Current shape objects are Surfaces, trimmed surfaces (Faces), and manifold BREP Solids. One major difference in GOBS modeling is the representation of Faces.  Currently CAD systems today consider a Face to be composed of a single Surface bounded by a single outer boundary and any number of inner boundaries. The typical CAD model does not allow the underlying Surface to be used in the construction of any other Face.  It requires that a copy of that Surface be made.  GOBS, on the other hand, allows for a single Surface to be used in the construction of any number of Faces, where the Face object contains reference to one Surface, one outer EdgeLoop, and any number of inner EdgeLoops.  This concept is illustrated more clearly in Figure 3.1 where the deck on a ship is shown highlighting three Faces used as compartment boundaries.  All three Faces share a common deck Surface and are defined by a selection of Edges that compose a bounded EdgeLoop. Because Surfaces, Faces, and Solids are shape objects they have no Properties.  In GOBS the Topological View class associates member shape objects with physical characteristics or Properties and can be thought of as a geometric component, or part.   The Topological View has Properties of a physical or performance nature, where the underlying Surface, Face, or Solid object, is simply providing information on its shape.  As Topological Views are composed, the grouping into Common Views is the next natural step.  GOBS takes the position that topology is a view of space not the space itself.  An office room, ship’s compartments, or other like space, can be viewed as the collection of faces that make the walls, floor, and ceiling.  To the occupant the wall of the room extends to the intersection of other walls, ceiling, and floor.  The wall, however, may be defined as the space bounded by the outside walls of a building.  Thus, the office room could be represented as a list of connected faces where the view of the wall is the region of the larger wall surface with local boundaries applied.Previously referred to as connecting topology, GOBS implements a unique CoEdge object.  Essentially, a CoEdge knows all edges located on each surface and declares them to be equivalent in Cartesian space,  REF _Ref514731899 \h Error! Reference source not found..  A CoEdge contains the knowledge about any number of Edges and is able to map a parametric location of an edge with the Cartesian equivalent parametric location on all other CoEdge edges.  This allows for the continuity of points along one surface to migrate to another surface without having to perform closest point approximations.With this topology the ability to traverse boundaries, both logically, explicitly, and with information on the relationship of surface parameter space affords many advantages.  Clearly the ability to grid or mesh across trimmed surface boundaries with node continuity is the most obvious.LEADING EDGE ADVANCED PROTOTYPING FOR SHIPS A brief overview of the GOBS topology, which is built on GEML mathematics, has been presented as the foundation for development of a new suite of tools.  An environment for integration, however, requires a complete framework for development not just geometric objects. The Naval Surface Warfare Center, Carderock Division (NSWCCD) developed a framework called Leading Edge Architecture for Prototyping Systems, LEAPS. The LEAPS framework supports product modeling for the generation of virtual prototypes.  As mentioned earlier LEAPS implements the GOBS technology along with other framework elements.“framework - In  HYPERLINK "http://www.dictionary.com/cgi-bin/dict.pl?term=object-oriented" object-oriented systems, a set of  HYPERLINK "http://www.dictionary.com/cgi-bin/dict.pl?term=class" classes that embodies an abstract design for solutions to a number of related problems.“: The Free On-line Dictionary of Computing, © 1993-2001 Denis HoweLEAPS has to date demonstrated an ability to support conceptual and preliminary ship design and analysis, but was designed to support product modeling in general and is not specific to ships.  The complexity and diversity of naval ship design and analysis is similar in nature to general product modeling which, we conclude, stipulates that information is complex, extensive, ambiguous, and dynamic.  To support these assumed realities, the LEAPS architecture takes a “meta-model” approach to product model development.  “A meta-model is usually developed using a simple information or object modeling technique that provides (meta-)classes/-entities, (meta-)relationships/-associations, (meta-)attributes and some more (few) other concepts.”   HYPERLINK "http://www.metamodel.com" meta-model.comTo understand the LEAPS architecture it is necessary to have a taxonomy for concepts such as Application Programming Interface, Product Model, Meta Model, and other terms used today in discussing integrated environments and their computational framework.  The intent is not to find agreement with the terminology, only to give it context within the LEAPS architecture.  Figure 4.1 illustrates some of the relationships in the LEAPS architecture that may prove helpful in understanding the following concepts.  Definitions for each element follow the figure.  A brief introduction of these terms and relationships is presented here to help with the digestion of this framework.LEAPS processes and applications communicate to a product model database, LEAPS/PM, using an Application Program Interface, LEAPS/API.  These applications write objects that are instantiations of a set of generic classes, LEAPS/MM.  These objects and their associations are named and instantiated in compliance with a formalized Product Meta-Model, LEAPS/PMM, where the Product Meta-Model is specific to a class of products (i.e. ships, planes, automobiles, etc.).  The LEAPS Meta-Model (LEAPS/MM) is a set of generic classes that describe that can be used in defining a smart product model.  In the LEAPS/MM these classes/entities allow for complex engineering representations for product modeling.  For example, there are entities for geometric representation, performance behaviors, component and subsystem definition, and processes such as studies.  While this meta-model was designed to meet the requirements for ship design and analysis, it is general enough that it could be used in the development of almost any product.   The LEAPS/MM is formally defined using the Unified Modeling Language (UML), see Figure 4.2.  Fundamental to product development is the notion that a design progresses through various concepts and that these concepts must perform in some condition or scenario.  Similarly, product development centers on a given set of functional requirements against which a concept’s design is measured. The LEAPS/MM supports the notion of Studies that contain Scenarios and Concepts, and Concepts contain product model data. The LEAPS Application Programmers Interface (LEAPS/API ) is a set of C++ classes available for software development that implements the LEAPS/MM.  The LEAPS/API is a library written using ISO standard C++ and is accessible in both static and dynamic link libraries. This API is used to write translators (LEAPS/APP or LEAPS Applications) to retrieve and store data associated with the LEAPS/PM (Product Model). The LEAPS Product Meta-model (LEAPS/PMM) is the object oriented schema or product characterization of a category of products, (i.e. combatant surface ships).  The LEAPS/PMM defines a specific category of products as objects and/or templates of objects.  The formalization of these objects occurs as a UML model where the objects represent the agreed upon instantiation of the LEAPS/MM classes. A Product Meta-Model for a submarine would formalize the objects typical for submarines and likewise be different than a Product Meta-Model for an airplane. The LEAPS/MM supports the development of all Product Meta-Models.  See  REF _Ref518460795 \h Figure 4.3 for an example of a Product Meta-Model.The LEAPS Product Model (LEAPS/PM) is the instantiation of the LEAPS/MM using the LEAPS/API in compliance with a specific LEAPS/PMM into objects.  The LEAPS/PM resides in the LEAPS/DB as a particular Concept within a Study.  It an be thought of as a single, unique virtual prototype of a class of products (e.g. the instantiation of Study LHA, Concept LHA4, using Focus 2000 PMM).Figure  SEQ Figure \* ARABIC 4.2 - LEAPS/MM using UMLFigure 4.3 – LEAPS/PMM for Combatant Surface Ships (Focus 2000)The LEAPS Data Base (LEAPS/DB) is the persistent store for any LEAPS/PM.  A LEAPS/DB can be shared by multiple distributed computers and operating systems: UNIX, Windows 95/NT, and Macintosh.LEAPS Applications (LEAPS/APP) are individual applications that communicate with the LEAPS/DB through the LEAPS/API.  These individual applications come in many forms and can be implemented to meet individual needs.  Examples include but are not limited to the following:Wrappers/translators to legacy applications Services running browser/virtual navigation applications Services participating in HLA federationsUtility applications providing navigation or data base editing To summarize the LEAPS processes, applications communicate to a product model database, LEAPS/PM, using an application program interface, LEAPS/API.  These applications write objects that are instantiations of a set of generic classes, LEAPS/MM.  These objects and their associations are named and instantiated in compliance with a formalized Product Meta-Model, LEAPS/PMM.  LEAPS provides support for information sharing and exchange requirements of scientists and engineers through an Application Programmers Interface, API.  Through this interface, LEAPS has the capability to integrate the assessment efforts of multiple organizations.  The classification of tools as Design vs. Analysis is more about process than architecture.  In the LEAPS architecture everything is an application communicating with the Product Model.  Data requirements for each application suggest that computational analysis will require a design before any analysis can be performed.Figure 4.4 – LEAPS Architecture Block DiagramThe benefits of these translators have been demonstrated and are note worthy.  Sample metrics for two analysis applications are shown below.•Data Preparation (Extraction and Transformation)–IRENE (Ship Infrared Signature Prediction)•Pre-LEAPS: 13.5 work-days•LEAPS:  0.5 work-days–RTS (Radar Target Strength)•Pre-LEAPS: 20 work-days•LEAPS:  1 work-days LEAPS HLA Simulation Services LEAPS product model data supports the initialization of HLA federates.  This would allow multiple military assets to be fully described at the product level while publishing performance data to an HLA simulation.  This performance data for each asset is available at the required fidelity of the simulation enabling simulations requiring intimate knowledge and detail about a particular assets performance and behavior.  The architecture would appear as in Figure 4.5.SUMMARYIn summary, the requirements for modeling complex systems involve three components; a mathematical basis, a topology model, and an application framework.  These three components are the basis for a specific design environment implementation.  The GEML library provides the necessary mathematical tools to compose advanced structures and models.  The GOBS classes take advantage of GEML’s technology to provide explicit geometry relations and analysis views of the design.  LEAPS integrates these classes into a development environment designed for information-sharing in a teaming situation. The LEAPS architecture also provides for the inclusion of legacy software into the product model via the LEAPS API.  Finally, LEAPS enables HLA Federate Object Model development by way of dynamic object and property creation, and using common taxonomy for common attributes; thus allowing products like ships, planes, and tanks to participate in a battlespace HLA simulation..Figure 4.5 – LEAPS Architecture Block DiagramREFERENCESConference PapersMyles M. Hurwitz, “Leading Edge Advanced Prototyping for Ships (LEAPS): An Integrating Architecture for Early Stage Ship Concept Assessment Software”, 2nd ASNE Modeling, Simulation, and Virtual Prototyping Conference, Arlington, VA, Nov 24-25, 1997, pp. 135-141. [1]Bob Ames and Dave Ferguson, “Applications To Engineering Design Of The General Geometry, Grid & Analysis Object In DT_NURBS”, 5th International Conference on Numerical grid Generation in CFD and Related Fields, Mississippi State University, April 1-5, 1996. [2] Bob Ames and Richard Van Eseltine, “A Framework for Modeling Complex Structures”, Hydrodynamic Technology Center – 1st Symposium on Marine Applications of Computational Fluid Dynamics, March 10, 1991. [3]	 EMBED Word.Picture.8   EMBED Word.Picture.8   EMBED Word.Picture.8   EMBED Word.Picture.8   EMBED Word.Picture.8   EMBED PowerPoint.Slide.8  