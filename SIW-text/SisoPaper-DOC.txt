On the Development of a Synthetic Tactical Real-Time Interactive Virtual EnvironmentStéphane ValadePeter B. HowellsEric SimonFrançois GagnonCAE Electronics LimitedSaint-Laurent, Quebec, CanadaKeywords:Synthetic Environments, Object-oriented code, HLAABSTRACT:  The use of Synthetic Environments in simulation based acquisition is becoming common practice. This implies that the next generation of simulation software must satisfy a wide range of requirements from support for detailed physical models catering for equipment evaluation and test, to the development of doctrine that will maximise the effectiveness of new equipment on the battlefield. This paper gives details of such a new simulation package – STRIVETM -  for Synthetic Tactical Real-Time Interactive Virtual Environments. The key features of the new software are expandability, the use of the HLA Run Time Infrastructure (RTI) for all inter-process communications at the component level, an object-oriented model development environment with distribution of the simulation across multiple processors and PC’s, native Windows-NT implementation, and scalability from single applications to large distributed exercises.1. IntroductionA key element in simulation based acquisition is the selection of a Synthetic Environment.  The available software packages satisfy many, but rarely do they satisfy all of the user requirements.  By and large, this is due to the fact that very few systems provide for expandability.In general, currently available Synthetic Environment software packages are either tools specific or application-specific.  Tools specific packages allow the end user to integrate existing system models, but provide minimal support by way of complementary models.  These types of tools, for example, would permit the integration of an external missile model but would offer little by way of a representative environment encompassing hostile air targets and countermeasures.  On the other hand, the application- specific packages provide for a comprehensive target rich environment, but often preclude the integration of external models.Many of the problems associated with the development of open expandable systems, however, are being addressed within the networking community.  The requirements to expand the simulation (include more federates) and to manage distributed data (the RTI) are common to both networked and local (single CPU) simulations.This paper gives details of a simulation package - STRIVETM that supports the development of a Synthetic Tactical Real-Time Interactive Virtual Environment.  STRIVE is an open, extensible, composable, distributed object based architecture written in C++.  HLA is the basis for the distributed architecture and the inter-process communication at the federate level using the Run Time Infrastructure (RTI).  The system is extensible in that it allows new models to be developed with the synthetic environment application software.  The simulation can be composed from a range of models available from the application library. Selection can be made based on application specific needs of fidelity such as simplified point mass models for war gaming scenarios, or detailed physics based models for equipment evaluation or training.  The distributed architecture allows the simulation load to be spread over multiple executables across multiple CPU’s, or computers. The architecture comprises a series of Frameworks.  The Simulation Framework provides for data distribution (publish and subscribe), object management (delete, create) and mathematical libraries (vectors, matrices). The Computer Generated Forces (CGF) Framework resides on top of the Simulation Framework and provides the definition of the physical models based on the Real-time Platform Reference Federation Object Model, or RPR-FOM. The physical models reside in various libraries accessible by the CGF Framework.2. Software ArchitectureThe software is shown in Figure.1. It is based on a series of Frameworks that isolate the domain applications, thus allowing various implementations to be used.  For example, the Expert System Framework that provides access to the knowledge base could be replaced by an alternative design. Interfaces between the Frameworks need to be respected, but there is no requirement to rework the core software. EMBED Visio.Drawing.5  Figure  SEQ Figure \* ARABIC 1 STRIVE CGF Framework ArchitectureAs indicated in Figure.1, a number of lower level Frameworks have been created: the Expert System Framework, the Terrain Framework, Weather Framework, and the Computer Generated Forces Framework. These lower level Frameworks in turn reside on top of the base Framework, referred to as the Simulation Framework.As indicated in Figure.1, the mathematical models form part of the model library. A plug-in concept based on DLL (Dynamic Link Library) using a COM (Component Object Model) approach is used to allow greater distribution and composability. The developer stores a completed model, in the model library. This model is then available for other developers or scenario builders to use. This philosophy maximises the reuse of software. Existing legacy models can be added to the library by integrating them with the framework plug-in that allows them to communicate with the rest of the simulation, effectively wrapping the model. One limitation is that the legacy models cannot make maximum use of object oriented concepts such as wrapper and inheritance, but the procedure does allow reuse of well validated and documented software. EMBED Visio.Drawing.5  Figure  SEQ Figure \* ARABIC 2 STRIVE Framework ArchitectureAn expanded view of the Simulation Framework is shown in Figure 2. It provides a number of services associated with object management, namely: exercise management, scenario management, network interface, interest management, scheduling, access interface, ownership management, event management, database interface, basic types, adapter management, plugin management, type management, and provider management. Further details can be found in Reference 1. A key feature of these services is that they lend themselves to any object management software.Another feature of STRIVE is that it is based on HLA and uses this paradigm for communication between the mathematical models and the framework communication layer (create object, delete object etc.). The RTI portion of HLA is used whenever the models or framework do not reside in the same process. For example, the tactical map, and the stealth view can reside on separate computers and communicate with the simulation via the HLA link. Internally to one STRIVE process, models publish and subscribe directly to the data that needs to be exchanged.3. Development EnvironmentSTRIVE is written in C++ using Microsoft Development Studio as the development environment. The use of Frameworks and Design patterns such as composite, factory and adapter are used throughout to allow developers to focus their attention on modelling. The simulation engine in effect protects the developers from concern with infrastructure issues such as the attribute manipulation and the real-time scheduling.On-line documentation is available for model developers and is generated from comments in the code. Every mention of an object is replaced by a hyperlink to its documentation. Undocumented arguments are flagged as warnings.  A class interaction diagram is produced that shows the relationship between the different classes and member functions.The system has been developed under Windows NT, although there are plans to port to Linux/Unix. Windows NT was chosen for the first release because it offered low-end hardware costs and compatibility with the Microsoft development environment.4. Creation of Player TypesThe basic entity within a CGF synthetic environment is referred to as “player”. A helicopter, for example, is a player. The helicopter will have associated with it a flight dynamics model that governs its position and attitude in space (usually derived from the continuous integration of the time dependent differential equations) and a range of weapon and sensor systems. As indicated previously, the mathematical models for these systems are written in C++ and deposited in the library of available models. Player types once created may be used many times. They can also be copied and modified to create new players. Similarly, component models of weapons and sensors can be copied and modified to create new types. A range of different model types of varying degrees of fidelity may be added to the component library to cater for a multitude of applications.The baseline for the physical models developed to date is the RPR-FOM. This allows compatibility with members of the real-time simulation community. However, extensions have been made to these models that allow increased fidelity beyond that achievable with the RPR-FOM alone. For example, the current radar model allows for the inclusion of multi-path, clutter effects, and beam shape that are not part of the RPR-FOM, but that have a significant effect on real world performance. The interaction between the player and the on-board weapon and sensor systems takes place via the CGF Framework (see Figure.1). The detection of a hostile threat via sensors and the subsequent launch of a weapon is an example of such an interaction. The Simulation Framework handles the creation of the weapon, or object, which did not exist until the moment of launch.5. Creating ScenariosScenarios are created using the player types available in the player library. As shown in Figure.3, players are selected from the tree view at the left of the screen simply by selecting the player type and positioning it on the map. Waypoints, or mission routes, are defined via the map through selection of the waypoint insertion button located on the toolbar at the top of the screen.A key feature of STRIVE is that it uses the same graphical user interface (GUI) for both creation and control of player, exercise and federation. Standard symbology and Microsoft look and feel are used throughout.   As an aid to scenario development, events are logged during the course of the simulation and displayed in the window at the bottom of the screen.  Typical events include the launch of a missile and the destruction of a player, or the activation of a particular rule-set. The events can be filtered so that only specific information is displayed.A special utility called “InDepth” has also been created. InDepth monitors all traffic on the RTI. It gives details of all publishable objects that are updated in real-time. 6. NetworkingSTRIVE is HLA based. Connection to the outside world is achieved through the network layer within the Simulation Framework (see Figure.1). The models have been developed using the RPR-FOM class structure and attribute list for the various components, to ensure maximum compatibility at the component level.  However, STRIVE is not limited to any specific FOM, or even any specific protocol, since the adapter pattern is used to map information internal to STRIVE to the network layer. 7. ConclusionSimulation based acquisition is driving the next generation of Synthetic Environment Software.  The wide range of requirements associated with equipment evaluation and doctrine development can only be satisfied using open extensible software architectures.  These, in turn, rely on modern day concepts associated with, frameworks, Dynamic Link Libraries (DLL), Component Object Models (COM) and Object Oriented principles.In this paper, details are given of a simulation package, STRIVE, that encompasses these new technologies.  The key features of STRIVE include: Native Windows NT implementation, Object-Oriented model development environment, use of HLA Run Time Infrastructure (RTI) for all inter-process communications at the component level, distributed simulation across multiple PC’s, and scalability from single model applications to large distributed simulation exercises involving large numbers of players.8. References[1] Gagnon, Howells, Simon: On the Use of Frameworks for Real-Time Simulation Applications.  Simulation Interoperability Workshop, Fall  1999.Author BiographiesSTEPHANE VALADE  is a senior software analyst at CAE Electronics. He is the principal architect and designer responsible for the Computer Generated Forces component of the STRIVE application. He holds a bachelor degree in Electrical Engineering from Ecole Polytechnique de Montréal. François GAGNON is a senior software analyst at CAE Electronics Ltd.  He is the principal architect and designer of the virtual environment.  He has over thirteen years of experience in real-time simulation software at the system level (scheduling, networking, etc).  He holds a bachelor and a master degree in computer science from the University of Montreal.PETER B. HOWELLS is manager of the Virtual Environment department at CAE Electronics Ltd., St-Laurent, QC. ERIC SIMON is a group leader at CAE Electronics Ltd., St-Laurent, QC.  He is overseeing virtual environment, networking, tactical, DBMS and R&D projects.  He has over thirteen years of experience in real-time simulation software at the system level.  He holds a bachelor degree in computer science at the University of Montreal. Figure 3 STRIVE Scenario GUI