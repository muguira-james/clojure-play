Benefits and Pitfalls of Composable SimulationJesse AronsonDavid M. WadeScience Applications International Corporation1100 North Glebe RoadSuite 1100Arlington, VA 22201703-907-2553, 703-907-2560jaronson@std.saic.com, david.m.wade@cpmx.saic.comdavid.m.wade@cpmx.saic.com david.m.wade@cpmx.saic.comKeywords:Simulation, Components, Composition, JSIMS, Software Engineering, Domain Models, Federation Object ModelABSTRACT: Component-based techniques have become popular throughout the software world and have been proposed as a mechanism for making simulations more flexible and maintainable. Over the course of the DARPA Model Based Simulation Composition program we identified advantages of component-based architectures for simulations but also came to recognize a number of challenges. This paper analyses the application of component-based techniques to simulation in an attempt to identify the challenges that must be overcome as the community moves towards the useful application of composition.IntroductionAs the military works to maintain readiness in a climate of shrinking operating budgets and as the range of missions the military faces grows ever broader, simulation becomes an ever-more significant way for war-fighters to train for and analyze operations. As a consequence, simulations today must be able to represent a broad and ever-changing set of scenarios, missions and equipment. The resultant challenge to simulationists is to create simulations that can be rapidly created, reconfigured and customized for particular exercises.One software approach which has been proposed to meet these requirements is composable simulation. Composability means that a highly customized simulation can be created from a pool of reusable elements. This approach mirrors developments in the larger software world where there has been tremendous growth in the use of component software such as Microsoft ActiveX [1], CORBA [2] and Java Beans [3] However, composability is not a panacea for simulation creation. Tailoring a simulation in support of exercise or analytical requirements is an already complex process that can take many man-months of effort. The introduction of composable simulation, while providing improved flexibility in simulations can actually increase the level of complexity in creating a particular target simulation. As noted in a paper from the JSIMS program, “more work must be done during [the Scenario Generation] phase with composability than without because with composability there are more decisions to make, more variability to create, and less default structure to rely on.” [4]Composition presents challenges in selecting a complete, correct and self-consistent set of components. Consequently, composition can be made much easier through standardized component descriptions (metadata) and decision support aids for composition. Component descriptions must describe several aspects of a component: its signature, or interface definition, its semantics, or what it does and its interface mechanism, or how it can be connected to other components. As described in [6], simulation component metadata must also describe the domain aspects and development/accreditation pedigrees.Composition support tools must perform several functions: they must formulate component queries based on simulation requirements (component specification), they must select components from a repository based on these queries (component retrieval) and they must create compositions (composition synthesis). Composition tools may also include the possible adaptation of appropriate components to application-specific requirements (model wrapping).This paper describes lessons learned in the challenges of composable simulations derived during the course of research under the DARPA ASTT Model Based Simulation Composition project. MBSC has focused on developing an automated method and prototype tools for selecting components of simulated systems based on the training objectives of an exercise. MBSC expands exercise objectives to form target system specifications, maps the specifications to abstract components and then searches a repository for a mutually compatible set of components to instantiate the abstract components.Goals of Composable SimulationsBefore looking at techniques and challenges of composable simulation it is worthwhile to enumerate the desired benefits of building simulations out of components. The goals of composable simulation architectures are as follows:Customization: Traditional simulations are monolithic in scope. They can be tailored through the use of input files, however the target computing resource requirements and selection of models are fixed. In contrast, a composable simulation has the goal of being able to be tailored to user requirements through assembly of discrete units of software. Reuse: Traditional simulation architectures also have problems in that they do not facilitate reuse. While a great deal of effort may go into creating models and infrastructure, the functional pieces of a simulation are often intertwined in such a way that it is difficult to extract and reuse any particular model. Component-based simulations have the goal of better supporting reuse by making models and infrastructure more modular. Creating simulation components as cleanly defined modules of software with well defined interfaces facilitates model reuse and therefore amortization of development cost across multiple applications.Interoperability: When assembling simulations through composition or federation, it is important that they be able to interact in a meaningful and correct way. This starts with the ability to exchange data as managed by such processes as use of a common Federation Object Model (FOM) [5]. It extends to ensuring that each piece of composed or federated software handles the data appropriately, e.g., that a detonation has an acceptably correct effect on simulated platforms and environments. The well-defined interfaces of composable simulation provide a mechanism to examine interoperability, however dynamic composition of many piece-parts to create a simulation increases the number of interoperability challenges in creating a simulation.Model Management: In the traditional software world it can be difficult to find particular models or even whole simulations because software is often not cataloged in consistent, complete ways. A side benefit of component metadata descriptions used for composition is that they naturally create catalog data. A goal of composable simulation is to make use of this data to ease retrieval of software components.Definitions of Composable and Component-Based SoftwareIt is also worthwhile to define what is meant by composable simulation. Szyperski provides a good definition of composition as “assembly of parts (components) into a whole (a composite) without modifying the parts. Parts have compositional properties if the semantics of the composite can be derived from those of the components.” [7] Applied to the simulation domain, it means any simulation that is put together from more than one separable piece can be considered composable. By this definition, an HLA federation is a composition.The JSIMS program formulated a definition of simulation composition as “the ability to rapidly configure, initialize and test an exercise by logically assembling a simulation from a pool of reusable elements”. They further defined three levels of composition: component level, where simulations are composed from fine-grained elements which represent individual models or algorithms, package level, where a simulation is composed by selecting pre-assembled packages which carry numbers models designed to form a consistent subset of the battlespace and simulation level, where a complete simulation can be modified by parameterization. [8]The various levels of composition described by JSIMS are ordered by complexity and it is important to note that they are neither mutually exclusive nor in contradiction with federation under HLA: a federation can be made of simulations which are made out of packages which can be made out of components. In fact, one of the significant findings of the MBSC research is that the simulation world should consider formalizing multiple levels of composition: in addition to federations, there should be consideration of creation of standardized component frameworks within individual federates. This concept is discussed further in Section 6.ChallengesGiven the mature state of software of software component technologies, it might seem sufficient to simply build simulations using a technology such as CORBA or ActiveX and leave it at that. However, while these standards deal with interface mechanisms and provide a way to specify signatures, they do not deal at all with interface semantics (note that the same can be said for the HLA RTI and FOM). Simulations, however, carry additional composition challenges: as noted above, interoperability must be considered. Model fidelity, or the closeness of the simulated representation to real-world phenomena, must be taken into account – particularly where composed models have different levels of fidelity and a measure of the fidelity of the composite must be assessed. Correctness and completeness must be taken into account, both at the domain and software levels. At the domain level, this means have all of the right domain elements been included and in the appropriate ways (e.g., does the simulation contain F-15Es and do they model sensing in a way which is appropriate for this composition?). At a software level, simulation engineers have to deal with issues of the correct functioning of the software: whether the components can work together and maintain synchronization, are there possible locking or race condition problems, etc. Last, there is VV&A - a union of components is different than the sum of the parts, and there must be a way to assess compositions, even if they are made completely from accredited parts. All of the above point further toward the need for tools to support composition.MBSC ExperienceThe MBSC project provided experience in implementation of tools to support creation of component-based simulations.  MBSC was developed in the context of joint training simulations such as JSIMS and will be described in those terms, however many of its principles apply across different domains and scales. MBSC has two major elements: Requirements Expansion, which expands exercise objectives (typically using tasks, as defined in the Joint Mission Essential Task List (JMETL) for an exercise, and a selection of training audience, force and geographic area requirements) into a detailed definition of all of the elements to be included in the simulation scenario, andComposition, which looks to a simulation repository, such as the JSIMS Modeling and Simulation Requirements Repository (JMSRR), to implement the simulation scenario described by the Requirements Expansion process. The two elements of MBSC are implemented in terms of four major steps as shown in the ovals within Figure 5.1. The first two steps capture target system requirements and constraints to form a simulation specification. The paradigm for specification creation is based on a domain model for both the mission space (real-world elements to be represented within the simulation) and the user space (support elements such as data collectors to be included with the simulation). The latter two steps synthesize a composition that satisfies the specified/generated system requirements.  EMBED PowerPoint.Slide.8  MBSC focused its research on:Development of a consistent data/knowledge model encompassing exercise requirements, component capabilities and resultant compositions.Development of knowledge-based approaches to expanding exercise objectives into simulation requirements.Development of a constraint-based approach to selecting simulation components based on simulation requirements. Prototype integration with other portions of the scenario generation process.MBSC Process FlowFigure 5.2 shows an example trace through the MBSC process. The inputs to the system, shown at the far left, are at a minimum the JMETL for the exercise. Using a combination of domain model information and user inputs, MBSC selects a set of operations and lower level tasks to satisfy the top level objectives. In the second step in the figure, these operations are assigned to the forces and equipment which form the actual domain objects of the simulation. In the third step, a specification is created for each mission space object (e.g., F-15E) in the simulation. This specification identifies the real-world entity to be simulated and associates with it requirements and constraints on the behaviors it must exhibit, computers it must run on, aspects it must consider (e.g., weather), etc. The output of this process is effectively a system specification for a simulation.This specification is passed to the composition process, which first checks to see if any parts of the specification can be satisfied using entities it has previously composed (pre-builts). For those mission space objects for which there are no adequate pre-builts, an architecture-driven composition process is employed: for each mission space object an architectural template is selected and then models are selected to populate the template. Finally, as the composition is created, consistency and global constraint checks are performed to assure that the various composed mission space objects interoperate with each other. The final output of the entire process is a software specification for assembling the simulation out of components.5.2 Data Modeling for Scenario Generation and CompositionMBSC is driven by data and significant effort has been focused on creating a data model to capture scenario requirements, domain models and simulation component capabilities in such a way as to provide linkages throughout the MBSC process. This representation has formed the central core of MBSC and has recently been echoed by other simulation composition efforts (as an example, see [9]). To address the challenges of the composition process, MBSC developed the Unified Scenario Data Model (USDM). The USDM is an object-oriented data model implemented via an object-oriented database; the component packages of this data model are described below. The USDM contains several packages which allow the user to specify a particular scenario; it also contains static packages which represent the military domain, component metadata, simulation centers, etc.Translation between exercise requirements and composition requirements offers challenges in the simulation development process.  System requirements for simulations are typically expressed in domain terms, not software component terms. The correspondence between the composition of the physical world and the set of software components used to model that world may not be one-to-one, and so any composition support method for simulations must take into account the required mapping from domain to software models.The Training Requirements package captures the first step in the MBSC process. This package contains the Road To War, training audience, JMETL, and scenario script.  The Road To War identifies the location of the exercise, the initial forces, and their placement. The training audience is a list of the trainees and the roles that they will fulfil in the exercise; the JMETL identifies the tasks, measurements, and constraints that are essential to the exercise. Training requirements are populated via a combination of user inputs and requirements expansion.The Composition Specification (CCL) is the second prescriptive part of the data model. It contains a detailed list of all the elements and objects that must be included in the simulation. It is created from the Training Requirements by determining which mission space objects and operations can satisfy Training Requirements. Over the course of an MBSC run the CCL is augmented to include a description of the components selected for a simulation, the supporting runtime environment, identifies where components must run, and the hardware and software requirements, forming a system specification for the composition.  The Simulation Environment package projects the simulation into simulation centers. It contains descriptions of the simulation and response cells for a simulation.  This is represented by storing a set of military simulation centers in a common database along with the available hardware and software for a particular simulation.Retrieval of components from a repository is a critical step in simulation composition and so searchable metadata descriptors of repository components are an important additional element. Individual simulation components may represent fairly complex physical objects and behaviors and so can be difficult to describe. Formal specifications are impractical to use for components of this level of complexity.  Retrieval of components via signature matching would fail since many components may have virtually identical interfaces. The MBSC Component Model forms a catalog of MBSC component metadata, such that the knowledge bases in MBSC can intelligently select components that satisfy military operation requirements.  In addition, the component model contains sample equipment templates that allow for the creation of ‘ready to use’ equipment types to match those described in the military domain model.The last two packages provide a common language for use in the remainder of the system. The Military Domain Model contains the operations, tasks, force types, forces, equipment types, personnel roles, and measurements that make up a military operation.  The Military Domain Model package augments the data available in the UJTL and Service Tasks to create a list of default operation configurations that can be used for simulations.  Last, the MBSC Ontology contains classes that are used throughout the remaining classes in the model. The ontology contains the standard terms, base classes, and object types for functions, roles, conditions, interfaces, document type definitions, and data items. These are used by the other packages to pass, store, and compare data in an orthogonal way. The ontology was not a major focus of MBSC, but incorporates elements of standardized data descriptions such as are used in the Base Object Model concept. [10,11]5.3 MBSC Requirements ExpansionAs mentioned earlier, MBSC has two major elements: Requirements Expansion and Composition. Requirements Expansion starts with user requirements, which are usually provided at a level of detail which is insufficient to fully specify a simulation (e.g., “the simulation shall include a composite air wing capable of performing DCA, OCA and SEAD”) and expands and infers the details of the requirements. MBSC uses a combination of task decomposition knowledge and domain model expansion to extend and complete the given requirements. Each requirement is mapped to a set of mission space objects and behaviors needed to implement the requirement. The net effect of the first step is to build a list of items – mission space objects, support objects, etc. – which need to be included in the target simulation.Nothing in this process, however dictates how the selected set of mission space objects should be simulated. The Domain Model Tailoring step assigns constraints of several types to mission space objects to create a software specification for each mission space object. Functional constraints require that the right domain entities, activities and behaviors be represented to create a reasonable representation of the physical world. Structural constraints apply to the software architecture view of assembling components: that selected components are properly connected and inter-operate consistently. Non-functional constraints relate to the performance of the system and its viability within the constraints of the target computing environment. Last, the software coordination aspect focuses on the overall synchronization and low-level communication within the program. The output of the Domain Model Tailoring step is a set of model descriptors – effectively a set of queries to be used against the component repository. These descriptors are formulated as a set of constraints on components and form a specification for use in composition, described in the next section.Results of the MBSC project showed that application of intelligent algorithms to a small number of scenario input parameters could yield a highly fleshed out scenario. The only caveat in this area is the large amount of one-time domain analysis that needs to be done to create the source database for this tool. 5.4 MBSC CompositionMBSC composition is the process of selecting a set of models which satisfy the specifications and constraints developed as the output of Requirements Expansion. Composition takes into account several considerations:Allocation of requirements to components.Selection of a component architectureValidation of information flows Validation of the compositionRequirements validation and information flows are addressed through the MBSC concept of functions. A function within MBSC describes dynamic interactions that are performed within the simulation. At a minimum, a function describes the data exchanged between mission space objects in the context of some sort of interaction; functions can, in addition describe characteristics of behavior and interaction protocols. The actors within a function are described as fulfilling functional roles. Functions are orthogonal to mission space object types. A given mission space object will generally be assigned multiple functional roles. Likewise, a given functional role can be assigned to more than one mission space object type.Functions are used in several ways within MBSC. First, the collection of functional roles which a mission space object must perform defines the set of public interfaces for the MSO. Second, functions are used to check interoperability between mission space objects. Each mission space object needs to be interoperable with the other mission space objects with which it interacts. Since all mission space object interactions are described via functions, this provides a catalog of interoperability constraints. The situation within a mission space object (e.g., the models which are comprised by an F-15) is similar to that between mission space objects (e.g., between an F-15 and a munition). In model-level composition the same behaviors or phenomena can be represented in differing ways, offering differing levels of resolution and fidelity and consequently consuming differing levels of computing resources. The benefit of this level of composition is that appropriate representations for modeled phenomena can be selected at a very fine-grained level in response to exercise requirements. Any given mission space object can conceivably be implemented via one of a number of different component topologies (as shown in Figure 5.3) and there may be a choice of components to fill each slot in a topology. Composition has the job of selecting appropriate topologies and populating them with components based on the given specifications.		 EMBED Word.Picture.8  Figure 5.3: Three component topologies for an aircraft modelThus, assembling a mission space object such as an F15E aircraft includes determining what the pieces of an F15E are in an abstract sense (e.g., an F15 has an APG-63 radar, a 6DOF kinematics model, etc.) and then finding mutually compatible components for each piece such that one can assemble a representation of an F15. The global composition problem is to do these local compositions while ensuring that all the composed mission space objects properly interoperate.Components are evaluated against specifications by comparing their metadata attributes with the specifications and then calculating an overall “closeness” metric to determine how well a component satisfies a specification. This component constraint satisfaction algorithm assigns a match percentage to an MSO based on the comparison between like properties within the two compared entities.ConclusionsComponent-based simulation offers many challenges. Components must be described in ways that facilitate selection, composition, and composition validation. This points out three requirements on the simulation community: first, there is a need to develop data and domain models which can be used to describe components and their interfaces. Second, if component-level composition is to be supported, then standards analogous to HLA must be created at the component level. This means the creation of standard metadata descriptions of components and possibly standard component frameworks which should integrate with the RTI) to support both component-level and federate-level composition (as described in [12]). Third, the community must invest in tools for repository management and automated composition support. Fourth, the community must invest in domain modeling and repository building.The Base Object Model effort within SISO and the domain modeling efforts within DMSO provide bases for the first area. MBSC and the efforts of programs such as the JSIMS Lifecycle applications provide a basis for the third. These efforts should be expanded to include a community-wide basis. In addition, they must be considered in the context of HLA and so should drive an expanded simulation architecture which adds component-level composition to HLA in a meaningful, integrated way.Bibliography[1]See www.microsoft.com/activex[2]See  HYPERLINK http://www.omg.org www.omg.org[3]See java.sun.com/beans[4]Butler, B. Simulation Composability for JSIMS. Proc. 1998 I/ITSEC. [5]See www.dmso.mil.[6]Sheehan, J., et. al. Authoritative Data Sources: Metadata Standards – Tools, Tips & Techniques for Efficiently Locating Data. Fall 1999 SIW, paper 99F-SIW-069.[7]Szyperski, C. Component Software: Beyond Object-Oriented Computing. Addison-Wesley. Harlow, England. 1998.[8]JSIMS Composability Roadmap. 30 September 1997. Available at  HYPERLINK http://www.jsims.com www.jsims.com[9]JSIMS Exercise Composition Data Model. Available at www.jsims.com.[10]Gustavson, P., et. al. Object Model Use Cases: A Mechanism for Capturing Requirements and Supporting BOM Reuse. Spring 1999 SIW, paper 99S-SIW-115.[11]Hancock, J. A Structural Description of Base Object Models (BOMs). Spring 1999 SIW, paper 99S-SIW-185.[12]Howells, P. B. On the Use of Frameworks for Real-Time Simulation Applications. Fall 1999 SIW, paper 99F-SIW-070.Figure 5.1: MBSC Functional FlowFigure 5.2: MBSC Process