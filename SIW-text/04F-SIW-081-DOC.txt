EAMA Case Study: Federating COTS Based Simulations to Support Multi-Agency PlanningThomas J. Pawlowski IIIKenneth C. HoffmanFrancis H. Carr IIIKidest Mimi HailegiorghisDavid L. Payne Paula K. SowellE. Gordon ThomasMeghan M.  Williams Kangmin ZhengThe MITRE Corporation7515 Colshire DriveMcLean, VAPOC:David Payne703-883-6366dpayne@mitre.orgKeywords:Multi-agency, Enterprise Analysis, Process Models, Interoperability, HLA, COTS Simulations, Enterprise Architecture, Executable Architectures, Bonapart®, ReThink®, G2®, JMACE, NS-2, Homeland Security, COTSFed, EAMA, EAMA-CSABSTRACT: The Executable Architecture Methodology for Analysis (EAMA) Case Study (EAMA-CS) leverages prior EAMA work in federating combat simulations with process and network models, to provide an environment for hosting executable architectures. In the US government, and especially in the US DOD, standardized sets of architecture product templates, called frameworks, are used to document the business (or “operational”) architecture, the systems architecture, and the technical standards for complex systems of systems. These systems of systems have a high content of information systems, but also include specific documentation of organizations, processes, business rules, and non-IT systems. One shortfall of the static architecture packages, though, is that they poorly depict the dynamic behavior of the complex networks of human and machine interactions that occurs when the actual system of systems is fielded, and poorly support developmental analysis of the emerging design. The original EAMA independent research effort has been working over the past few years to develop tools and techniques for translating static architecture artifacts into executable simulations, which then provide the means to explore the dynamic behavior of  those architectures and the systems of systems they represent. The EAMA-CS effort takes advantage of the knowledge gleaned from the main EAMA effort to provide an executable architecture environment for non-DOD agencies facing similar multi-agency, systems of systems, integration problems long faced by DOD. EAMA-CS has resulted in an HLA federation consisting of a combat model, JMACE, process models built in two COTS modeling environments, Bonapart and ReThink, and a communications network model, NS-2. JMACE was extended as well as federated to support non-military operational scenarios. The process models model the decision, command and control, and work flow processes affecting the behavior of the entities in the JMACE operational model. JMACE in turn serves as a scenario driver for the process models. This paper describes this modeling environment in detail, suggests specific uses for the environment to facilitate improved multi-agency planning, and provides specific lessons learned in adapting and federating the component models.1. IntroductionThe Executable Architecture Methodology for Analysis (EAMA) Case Study (EAMA-CS) is a MITRE Center for Enterprise Modernization (CEM) internal research and development project. EAMA-CS has two goals. First, it provides key enabling technology to a CEM MITRE Sponsored Research (MSR) project called Multi-Agency Planning (MAP). Specifically, EAMA-CS provides an analysis and exercise support simulation environment that allows planners from multiple government agencies (Federal, State, and/or local) to model their business rules and technology architectures dynamically, synchronized with and in the context of the overall multi-agency mission or operation. The secondary goal of EAMA-CS is to migrate and explore the use of executable architecture technology developed in yet another MITRE Washington Command, Control and Communications (WC3) Center Mission Oriented Investigation and Experimentation (MOIE) program research effort, the original EAMA project [1]. This goal has expanded to include bringing a different operations simulation, the US Army National Simulation Center (NSC) Joint Military Art of Command Environment (JMACE) into the EAMA-CS Federation in place of the EAGLE combat simulation used in the original EAMA federation, as well as bringing in the Gensym Corporation’s ReThink process simulation environment. The PIKOS GmbH Bonapart process simulation environment and the NS-2 communications network model from the original EAMA federation are retained and used with the other two models (JMACE and ReThink) in EAMA-CS.  Finally, EAMA-CS involved implied requirements to “demilitarize” JMACE for homeland security, civil agency and law enforcement scenario modeling, and to integrate JMACE with the Gensym G2 HLA Bridge to federate JMACE with Bonapart and ReThink. ReThink also uses this same COTS G2 HLA Bridge product [2]. 1.1 Multi-agency PlanningOur research team saw a need for enhanced multi-agency planning over a year ago. Last fall we were able to initiate a multiyear research and development project to identify better practices and technology to improve multi-agency planning.  Our original motivation, described in the following quotation from our Fall 2003 SIW paper, remains valid:“Increasingly, government initiatives such as e-Government, along with new governmental challenges such as homeland security, require groups of agencies to interoperate at the mission activity and organizational levels, as well as at the information system support level.  Investment plans and resource allocation must be based on the cost and value of assets of, and mission activities performed by, individual agencies – information that is contained or described in architectures and business/mission process models.The collaborating agencies typically have incompatible architectures at varied stages of development and sophistication. Additionally, key aspects of successful interagency collaboration depend also on the interplay of human and IT and non-IT systems forming a work flow or activity network. Issues include timing, synchronization, priorities, bandwidth, systems compatibility, and agency-unique syntaxes. The syntax issues exist at both the data and information exchange levels, with information exchange syntax differences impacting both human and machine information exchanges.” [3].We are now beginning to discover ways to help multi-agency collaborations and operations, and have achieved some success in prototyping tools to assist the multi-agency planning process.1.2 Enterprise ArchitectureFor at least the past decade many, if not most, government and commercial institutions have seen the value of formally documenting their information infrastructures using one or more formal architecture approaches.  As experience and thinking in this field have evolved, there is increasing agreement that the enterprise itself, that is the combined relationship of people, processes, and technology, should be included in architectures. This approach has evolved into the notion of enterprise architecture. Simply put, enterprise architecture relates the business or operational goals of an enterprise to its organization, processes, and supporting technology. Both information and enterprise architectures are typically referred to as both blueprints and roadmaps for enterprise improvement and modernization. They are blueprints in that a specific evolution of an architecture shows how the enterprise is organized, where and how processes are performed, and how technology supports the organizations as they perform processes. And a good architecture relates all of this to the enterprise mission and vision. As a roadmap, a set of architectures show how the enterprise will transform itself sequentially or through time to increase its effectiveness and adapt to changing business or operational conditions. A number of formats for documenting enterprise architecture exist, and several, such as the Federal Enterprise Architecture Framework (FEAF) and the (US) Department of Defense Architecture Framework (DODAF), are mandated for US government organizations and are required for justifying new or updated information infrastructure investments. Architectures for multi-agency collaboration are not well developed. One motivation for our research is to improve our understanding of what types of architecture products are useful in facilitating or improving multi-agency operations. Another motivation is to explore ways to harmonize individual agency architectures with one or several overarching multi-agency architectures in which the individual organizations want to, or are required to, participate. Finally, we want to explore how to measure, and then improve, the performance of these multi-agency coalitions, using a combination of static and dynamic architecture products as the authoritative documentation of the multi-agency coalition.1.3 Executable ArchitecturesA well appreciated limitation of current architecture frameworks is that they produce only static products. That is, they document the enterprise at rest, but not how it behaves when actively executing its missions and supporting operations. These static products also fail to depict the spatial and temporal relationships of the various components depicted in the architecture, which greatly affects actual system and organizational performance in those enterprises that have mobile infrastructure, have to operate in close coordination, or deal with external entities that move about in space over time.  So there is a need for dynamic, or “executable”, architecture products to complete the depiction of the enterprise. Typically, some form of simulation is used to portray executable architectures, which further supports performance analysis, exploration of spatial and temporal relationships and dependencies, and resource needs over time. Only a few executable architectures have been developed. Most of these use a single simulation tool or technology to attempt to model the entire enterprise architecture. Our research, in agreement with prior findings from the earlier (and ongoing) EAMA work, indicates that an approach using a set of simulations works better than a single simulation approach. This is because the enterprise is a complex entity made up of processes, work flows, organizations, people and skills, a number of different technologies (and typically even more specific systems), and one or more networks (with unique performance characteristics), all functioning in an even more complex environment of customers, partners, competitors, and nature. Different COTS and purpose built tools and simulations best support modeling of one or another of these areas. And we have found no one tool or approach that comes close to modeling the full range of effects that are important to understanding the dynamic performance of an enterprise at any level of interesting complexity. Therefore, in EAMA-CS (and in EAMA) we take the approach that a federated set of models, each modeling what it models best, is the most effective simulation approach currently available. (Note: we see great promise in web-based simulation when that technology matures, but for our research purposes we view web-based simulation as a variant of distributed simulation, as currently enabled by a federated technical approach.)1.4 The EAMA-CS ScenarioWe have implemented a simplified variant of an actual multi-agency contingency plan called Vigilant Sentry as our EAMA-CS experimental scenario. Vigilant Sentry is an operations plan involving a number of agencies and organizations participating in the response to a mass migration event. Vigilant Sentry applies to any attempt by a large number of migrants to illegally enter the United States by sea, on any coast. We implemented a scenario involving a mass migration in the Caribbean, with migrants attempting to reach southern Florida. We model notional elements of the Department of Homeland Security (including the Headquarters, Coast Guard, Customs and Border Protection, and Immigration and Customs Enforcement) FBI, State Department, Drug Enforcement Agency, Florida National Guard, US Navy, and state and local law enforcement, among other organizations. Subject matter experts who have seen the EAMA-CS demonstrations have been supportive, and have also given useful insights to improve our depiction of the scenario.2. The EAMA-CS FederatesEAMA-CS currently federates four simulation environments. Each currently performs a specific role in the federation, however, EAMA-CS is flexible in that each environment could host more than one of the several different specific federates. For example, several JMACE federates could host different regional scenarios that run simultaneously, and thus may create a contention for scarce resources when working through a centralized control center. Or, several ReThink or Bonapart federates could be used to model different work flows or decision processes in the different agencies making up the multi-agency coalition. Furthermore, the two COTS process modeling environments are capable of hosting similar models of work or decision flow, and thus could be used in lieu of each other if licensing or some other consideration made one environment more attractive to a given agency or coalition.The fourth federate is the communications network model. We currently use NS-2 for this role, but may eventually use OPNET.   The network model allows us to explore systems architecture performance and trade offs, as well as the impact of communications latencies, lost messages, and other technical impacts on enterprise performance.2.1 JMACEJMACE was developed at the US Army National Simulation Center as a lightweight but powerful combat simulation environment to support combat operations officer training, specifically in training operational planning. JMACE extended work began at the US Army Combined Arms Support Command (CASCOM) which resulted in a robust operations level logistics model called SIMULOGS. Most, if not all, of the resource management capability provided by SIMULOGS appears to be carried through to the JMACE evolution, although EAMA-CS is not currently taking advantage of this innate capability. What we are using though is the extremely rich set of Joint, coalition, and non-military player types and behaviors built into JMACE.JMACE is built in the Gensym G2 simulation environment (as was SIMULOGS). G2 combines discrete and continuous simulation engines with a rich object oriented modeling and programming environment. Behavior is modeled in procedures (non-object oriented routines) or methods (object oriented routines). Additionally, due to its roots in artificial intelligence, G2 also provides a capable rule based production engine. Finally, Gensym was an early adopter of HLA, and developed the G2 HLA Gateway as an add-on product for G2. [4]The EAMA-CS team did find limitations with JMACE that we needed to surmount before we could use JMACE as our multi-agency, non-combat, operational scenario driver. Key extensions included “de-militarizing” JMACE to stop hostile behavior between the US search platforms and migrant vessels; additional behavior for both US and migrant player types to support modeling of detection, intercept, escort, and personnel transfer; and integration of JMACE and the G2 HLA Gateway, including the additional code to send and receive interactions in response to events in JMACE and the other federates. We also ensured that our federated version of JMACE retained its full capability to both run as an independent (non-federated) model, and as a combat simulation.2.2 BonapartBonapart is a COTS business process modeling tool with a simulation environment based on Colored Petri Net (CPN) technology. CPN has some mathematically rigorous characteristics that make it a popular choice for information architecture modeling. [5] Additionally, EAMA has developed an extensive set of validated US Army command and control process models, which we were able to leverage for EAMA-CS. For EAMA-CS, Bonapart provides the decision flow models in place at the hypothetical multi-agency Incident Control Center (ICC) managing the overall operation.  JMACE passes reports of significant operational events, such as detection of migrant vessels, to the ICC modeled in Bonapart, in the form of HLA interactions. Bonapart then models the decision flow which results in orders and directives, which are sent back to the JMACE entities, again as interactions. Bonapart also supports modeling of resource commitments, resource costs, and activity costs, making it even more attractive for future comprehensive modeling of complicated enterprises.2.3 ReThinkReThink, like JMACE, is also implemented in the G2 environment. ReThink is a so-called “layered product”, and is the Gensym process simulation solution. ReThink is streamlined to provide non-programmers a powerful graphic process modeling environment, but supports robust extension of the out of the box capabilities through full support of the G2 object oriented environment and language. [4]We use ReThink to model work flows in EAMA-CS, specifically the migrant screening process. This function involves a number of stations that collect information from migrants that is used to determine their standing and disposition, based on US law and policy. In the multi-agency EAMA-CS environment, the ReThink federate could easily be extended to interact with the Bonapart hosted ICC, sending facts about specific individuals and receiving disposition instructions back. The ReThink federate does interact with the JMACE federate. The migrant screening process takes place on the Coast Guard cutters modeled in JMACE and ReThink effectively provides a detailed “on-deck” rendition of events going on notionally in JMACE. ReThink also supports modeling of resource commitments, resource costs, and activity costs, again making it attractive for future comprehensive modeling of complicated enterprises.The G2 language and object system along with the ReThink customization approach recommended by Gensym was used to implement special process blocks that in turn leverage the G2 HLA Gateway API. These allow a simple graphical interface of a Rethink model to an HLA federation.  However, due to time and resource limitations in the EAMA-CS program, this was done in a federation specific manner. Our original goal of developing a way to interface ReThink to a more generic “COTS federation” remains a goal for future work. [2]2.4 NS-2NS-2 serves as the communications network federate. The NS-2 model implemented for EAMA-CS receives requests for delay times from Bonapart and sends back to Bonapart an interaction with the delay time between two nodes. NS-2 is a freeware application available from University of Southern California Information Sciences Institute. [6]3. The EAMA-CS Federation EMBED PowerPoint.Slide.8  Figure 1. EAMA-CS Federation Architecture3.1 Federation DesignAs we’ve described above, the EAMA-CS federation consists of four supported types of federates. The JMACE and ReThink federates run in a G2 environment, on any of several supported operating systems, and interface to the HLA RTI via a G2 HLA Gateway software module. The Bonapart federate interfaces to the HLA RTI via custom code developed as part of the original EAMA research effort. The NS-2 network simulation federate also uses MITRE developed software for the interface between NS-2 and the RTI. Although we currently have only one of each type federate, the federation design is flexible enough to easily allow multiple federates of any supported type-- JMACE, ReThink, Bonapart, or NS-2, as well as a potential for other G2 based simulations using the same G2 HLA Gateway code and the EAMA-CS fed file.The EAMA-CS fed file defines a number of interaction classes. The design decision was made early on to use unique interaction classes for each required interaction, in order to provide for fine grained subscription for specific federates, which in turn is expected to provide highly efficient federation execution, even in large federations. A downside of this design decision is that new interactions need to be defined as both interaction classes in the HLA files as well as in the native class hierarchies of each federate.Figures 1 through 6 show The EAMA-CS federation architecture, the fed file class hierarchy, and each of the four federates of the EAMA-CS federation. EMBED PowerPoint.Slide.8  Figure 2. EAMA-CS Class Hierarchy EMBED PowerPoint.Slide.8   Figure 3. EAMA-CS JMACE Federate EMBED PowerPoint.Slide.8  Figure 4. EAMA-CS Bonapart Federate EMBED PowerPoint.Slide.8  Figure 5. EAMA-CS ReThink Federate EMBED PowerPoint.Slide.8  Figure 6. EAMA-CS NS-2 Federate3.2 The Gensym G2 HLA GatewayOur experience with the G2 HLA Gateway is generally favorable, given that the package has not been sold or supported for a number of years (although Gensym is at last report again selling the package on a limited basis). On the positive side, the code performed as documented, and seems to perform reliably and efficiently. On the downside, the APIs were not very clear to the HLA interface team, and the documentation, such as it was, did not help much. However, the demonstration applications provided with the G2 HLA Gateway package did provide reusable code patterns that our team was able to leverage to develop working HLA interfaces for both JMACE and ReThink federates.4. Using the EAMA-CS FederationA big advantage of a federated enterprise simulation approach is that the best simulation environment can be used to model each specific aspect of the enterprise. This greatly reduces the need to find creative workarounds to get a particular simulation environment to adequately model a given feature or behavior. The problem changes to one of matching the best available federate to the simulation problem at hand.We have found that JMACE is very robust in modeling operational scenarios, as well as proving a highly graphic visualization environment for planners, exercise participants, and decision makers. Bonapart provides a theoretically rigorous environment for decision modeling, and also provides a highly intuitive user interface for eliciting, explaining, and understanding decision flows. ReThink also provides a similarly clear decision modeling and visualization environment, while also supporting modeling of work flows, either as abstract process flows or reasonably accurate depictions of specific facilities (for example, factory floors, offices, etc.). We will now share what we have learned so far about how to best use the various EAMA-CS federates to model a complex multi-agency enterprise.4.1 Setting Up the Scenario in JMACEJMACE has evolved over nearly ten years, and has a tremendous amount of functionality, instrumentation, and player entity types. So we recommend that users explore that functionality before deciding to write extensions. The JMACE User Manual provided by NSC is a good starting place to learn about JMACE functionality and how to use that functionality. [7]However, much more functionality exists at the code level. G2 provides a powerful “Inspect” tool that helps find entity classes, functionality, and instrumentation in the vast amount of accumulated JMACE code. Knowledge of G2 is required to effectively explore this hidden functionality.Basic scenario set up involves locating a GIF or JPEG map of the scenario areas, loading the map into the proper directory and creating a JMACE image object to display the map as well as make JMACE aware of the latitudinal and longitudinal bounds the map. We found that the instructions explaining how to do this in the JMACE User Manual, using a provided menu driven tool, no longer worked, and found through analysis of the current code that we had to do this at the G2/JMACE object level. Luckily the currently required approach is clear and dependable, given an adequate basic knowledge of G2 programming. Once this is done users can easily navigate from a global map to the scenario region and JMACE offers the set of loaded maps available for that region. A simple mouse click then brings up the selected map.Next the user lays out his or her course of action (COA). JMACE uses COAs to model as well as store specific user designed scenario vignettes. An existing COA can be used as a starting point for a new COA, or the COA can be built from scratch. Player entities are selected off an extensive set of pallets and placed on the map at their starting locations with the mouse. Entities may be stored inside other entities, so behavior such as aircraft stationed at a base or on a carrier can be readily modeled. Finally, routes with way points are laid out using the mouse. The way points can be tied to JMACE events, such as crossing of phase lines or movement of other entities. These events then trigger entity behavior, such as starting movement along the route or waiting at a specified way point. The routes and way points can be hidden, giving the appearance of free entity movement. We leveraged the JMACE events, as well as a well implemented JMACE message display capability, as entry points to send and react to EAMA-CS federation interactions. We also implemented new behavior that allows free movement of player entities, using a heading and speed approach. This better supports exercise use of the federation that we see as a primary role for the EAMA-CS federation. It also lends itself well to interaction driven redirection of entities during the simulation. These redirections would come from either human or process model federate decisions based on events in the simulation. We see this as a promising way to add more intelligent behavior to JMACE player entities. For example, a search aircraft could trigger a decision sequence in Bonapart that determines its reaction to various sightings, rather than simply continuing along the pre-scripted route as we have to do now.  A future extension would be to provide users a capability to specify interactions of interest to specific entities. Currently we must implement interactions at the code level, so supported behavior is rather limited and extensions have to be requested, designed, and programmed before they become available for use. This extension will likely have to wait for future sponsorship of the model, since our research scope is currently limited to proof of principle demonstrations.4.2 Modeling Business RulesBonapart is currently our primary environment for modeling business or decision rules. These rules are modeled as logical trees and can take advantage of many factors in deciding which path to follow, and hence which outcome results. Then this outcome triggers an interaction that other subscribing federates receive, causing those federates in turn to react appropriately. The decision rules are based on doctrinal or owner stated business or operational rules, and wherever possible implement the written policies of the organization modeled. Rules can be developed and modeled quickly, so in an exercise support role the Bonapart federate can be used to model proposed rules made up by participants in near real time, and then those rules can be tested against the JMACE scenario. We expect this capability to then support rapid evolution of effective multi-agency policy in the course of multi-agency planning exercise or conference.Alternatively, ReThink can be used in the same way as Bonapart to model decision flows.4.3 Modeling Work FlowsReThink is our primary federate for modeling work flows. Standard business process engineering approaches are used to model work flows, and ReThink provides an extensive set of instrumentation, charting and reporting tools. Each step in the work flow is modeled using either standard ReThink graphical programming entities, called blocks, or with user defined custom blocks easily defined as extensions of the standard block classes. These custom blocks can be redrawn to represent specific entities unique to the modeled work flow, and may even be depicted by a GIF or JPEG image of the modeled object or activity. The blocks are connected together with paths, using the mouse, and logic blocks can be used to control alternative work flow paths. ReThink also supports tracking of fixed and variable costs associated with each step in the work flow, as well as resource usage, blocking, and resource cost tracking. Our HLA extension to ReThink allows work objects to appear to flow into the ReThink model from other federates, and then leave the ReThink model to go to other federates. Alternatively, the ReThink work flow can trigger interactions that serve as triggering events for other federates.4.4 Concept for a Multi-agency Planning Exercise We envision using the EAMA-CS federation to support actual multi-agency planning exercises, especially in the homeland security arena. One part of our team, working on the related Multi Agency Planning MSR, has developed a five level model for typifying and improving collaboration and interoperability within a multi agency coalition. The model describes five levels or degrees of interaction that may be necessary between pairs of agencies as they participate in a given operation. This model can serve as a framework for one or more multi-agency exercises aimed at determining 1) the required level of interaction between participating pairs of agencies and 2) whether those agencies are prepared to interact at the required level.  As a precursor and input to the simulation, a high-level architecture is developed that describes the multi-agency operation and shows which agencies participate. The participating agency pairs are characterized in terms of the level of interaction required between them; the agency-pair levels combine to form the overall operation’s required interaction level. Then, the agencies’ respective architectures are mined for information that describes (or implies) how each agency would participate in the given operation. This architecture mining process provides additional detail for the multi-agency architecture, and can also serve as an evaluation of the sufficiency of the architectures.  We think that by working through a simulation enhanced scenario, using the unique capabilities provided by each EAMA-CS federate, multi-agency teams can quickly work through scenarios, discover coordination problems, identify solutions, and then formally adopt the new policies and procedures. These policies and procedures can then go into contingency plans and training packages that will support actual multi-agency operations when required.5. Lessons LearnedSeveral important lessons learned have come out of our efforts to create this federation. These will continue to influence our work on EAMA-CS, and may be the subject of future independent research efforts.5.1 Time ManagementIn the traditional RTI sense, time management is used to synchronize simulations that share a common concept of time, and its influence on activities within the simulation. In our case, we had several discussions as to what the concept of “elapsed time” meant to an executable architecture, and how this would be manifest with “time regulating” and “time constraining” capabilities of the RTI. We believe the answer lies in synchronizing the behavior of the decision entities so that the time required for making a decision is reflected in the operational model. However, the other entities in the operational model need to be able to continue tasks while the decision entities make up their minds on a course of action or response.  There also remains a “fair fight” issue to resolve, in that the decision entities have their decision processes, and decision cycle times, explicitly modeled, while other entities are allowed to rapidly execute scripted behavior. 5.2 Reactive BehaviorsMilitary simulations have a tendency to be robust with, and default to military solutions (reactions) to unanticipated situations. The advantage to this for these simulations is that they inherently reduce the number of human interventions required in order to execute a robust scenario. However, as was described earlier, this work is focused on a mixed military/civilian scenario, and we have frequently have had to fight against these reactions. More desirable (in our case) would be fewer reactive behaviors, or tailorable ones, which allow for the settings of “Rules of Engagement” in unanticipated situations as part of tasking to units. This might include a “seek guidance” default setting, which would allow for a more flexible and natural interface point, regardless of whether that interface was to another simulation (in this situation) or to some form of external human control device.Another consideration is that the reactive behavior built into combat simulations is (or definitely should be) based on established doctrine, that is formal decision rules and procedures. We believe that a primary issue for the kind of multi-agency planning exercises we imagine EAMA-CS supporting will be devising, testing, and then agreeing on such operational decision rule sets.  So we really have to address both structured decision making, as captured in rule sets, and the more difficult challenge of cognitive decision modeling. The later is beyond the resources available to our team at this time, and is at the limits of modeling technology. Nonetheless, a fifth type of federate, which would be a true cognitive model, would be useful for a federation that seeks to explore the complex interplay between people, processes, and systems.5.3 Decision Making Vice Process ModelingWe found that it is important to consider the separation between decision making versus process modeling. An executable architecture can be a simulation of the decision making process, but it is only a decision making tool when all choices are manifest based on information provided and automated selection can occur. So although it is valuable to model established (or proposed) decision rules and procedures, there remains a need for modeling human reaction to scenario events and circumstances. This may be accommodated by human intervention, cognitive process modeling, and reactive behaviors.Although we implemented simple decision rules and process models for the sake of expediency in developing the case study, it is clear that anything approaching cognitive decision making was beyond this implementation means. In a more complete and robust approach to the federation it would be advantageous to have separate real world simulations, executable process models, as well as cognitive models that did the human thinking.5.4 Interface Definition MethodAs described earlier, the established interface between the simulations was through RTI interactions that were defined based on the particular events which occurred. These could have also been implemented as messaged “reports” in the military sense, and returns from the process model instantiated as “orders” in a Battle Management Language (BML) style [8]. 6. ConclusionEAMA-CS has demonstrated that a federated simulation approach is effective in providing a multi-agency executable modeling environment. It has also provided useful extensions to several federates, most notably JMACE. These non-combat and HLA extensions will be provided back to NSC for possible incorporation in future versions of JMACE in use in the Army and DOD. We have also successfully federated a ReThink model, learning valuable lessons about how to do that, as well as gaining insights into how we could federate ReThink in a more generic way. The EAMA-CS federation is now ready to explore how simulation helps achieve actual multi-agency planning. Homeland security is a natural and appropriate place to try this out, but other multi-agency coalitions can also benefit from this new capability.7. References[1] Pawlowski, Thomas,     “Executable Architecture Methodology for Analysis” briefing, The MITRE Corporation, 2003      HYPERLINK "http://www.mitre.org/news/events/tech03/briefings/architecture/pawlowski.pdf" http://www.mitre.org/news/events/tech03/briefings/architecture/pawlowski.pdf[2]	Payne, David. “COTSFed Update”, (04S-SIW-023), Spring 2004 Simulation Interoperability Workshop (SIW), April 2004, Arlington, VA. HYPERLINK "http://www.sisostds.org"http://www.sisostds.org .[3]	Payne, Hoffman, and Zheng.  “Using Interoperable Process Models in a Multi-Agency Planning Toolkit for Enterprise and C4ISR Architecture Analysis”, (03F-SIW-014), Fall 2003 Simulation Interoperability Workshop (SIW), September 2003, Orlando, FL. HYPERLINK "http://www.sisostds.org"http://www.sisostds.org . [4] G2 and ReThink information: Gensym Corporation Web site:  HYPERLINK "http://www.gensym.com" http://www.gensym.com. [5] Bonapart information: PIKOS GmbH Site     :                                HYPERLINK "http://www.pikos.net/english/" http://www.pikos.net/english/ . [6] Network Simulator, NS-2,  HYPERLINK "http://www.isi.edu/nsnam/ns/" http://www.isi.edu/nsnam/ns/.[7] National Simulation Center  , “JMACE Users Guide”, Fort Leavenworth, (no date).         See the NSC public Web site   HYPERLINK "http://www.leavenworth.army.mil/nsc/" http://www.leavenworth.army.mil/nsc/ for instructions on how to obtain a user id to access other NSC information.[8] Sudnikovich, Kleiner, Heib, and Brown, “Developing the Army’s Battle Management Language Protype Environment”, 04S-SIW-113, Spring 2004 Simulation Interoperability Workshop (SIW), March 2004, Washington, DC.  HYPERLINK "http://www.sisostds.org" http://www.sisostds.org .[9]   Pro UBIS, GmbH, “Reference Manual: Bonapart,” 1999.[10] Pawlowski, T., Barr, P., Ring, S., Williams, M., Segarra, S., “Executable Architecture Methodology for Analysis, FY03 Report,” MITRE Technical Report 03W-0000081, February, 2004. [11] DOD Architecture Framework, V1.0, Vol. I and II, 15 August 2003.[12]. T. Pawlowski, P. Barr, S. J. Ring, “Applying Executable Architectures to Support Dynamic Analysis of C2 Systems”, C2 Assessment & Tools, #113, 2004 Command and Control Research and Technology Symposium, June 2004. ©2004 The MITRE Corporation. All rights reserved.  Approved for Public Release; Distribution Unlimited, PR Case # 04-0818