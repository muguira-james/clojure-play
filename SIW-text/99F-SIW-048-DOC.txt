The Federation Verification ToolDavid RosenbaumMargaret LoperJohn MurphBen DefnetGeorgia Tech Research Institute347 Ferst DriveAtlanta, GA  30332404-894-3464, 404-894-4663, 404-385-0349, 404-894-3467david.rosenbaum@gtri.gatech.edu, margaret.loper@gtri.gatech.edu, john.murph@gtri.gatech.edu, ben.defnet@gtri.gatech.eduKeywords:HLA, FEDEP, integration, testing, MOMABSTRACT:  When a Federation Object Model (FOM) is developed for an HLA federation [1,2,3], decisions must be made about the responsibilities of the individual federates in the maintenance of the federation's shared data.  In particular, for each federate, it must be decided which attributes of which object classes the federate updates, which it reflects, which parameters of which interaction classes the federate sends, and which it receives.  Correct fulfillment by all federates of these federate responsibilities is essential to successful integration of the federation.Under sponsorship of the Defense Modeling and Simulation Office (DMSO), GTRI has developed a Federation Verification Tool (FVT) to assist in the Integration and Test phase of the Federation Development and Execution Process (FEDEP) [4] by verifying the successful fulfillment of federate update/reflect and send/receive responsibilities.  Information about these responsibilities can be entered directly into FVT, or it can be imported from files in the Federation Execution Planners Workbook (FEPW) Data Interchange Format (DIF).  After the responsibilities information is provided, FVT joins the federation as a federate and monitors federation update/reflect and send/receive activity to verify whether the responsibilities were fulfilled.  The results are indicated in FVT's graphical user interface and can be saved in a variety of report file formats.This paper describes FVT's features and usage.  It also gives an overview of how FVT is implemented.1. IntroductionA necessary part of the process of creating a Federation Object Model (FOM) [1] for an HLA federation is the assignment of responsibilities to the federation’s individual federates for the maintenance of the federation’s shared data.  For example, a Tank federate might be expected to update all the attributes of object Tank, while a Plane federate might be expected to reflect all of these attributes.  For each federate in the federation, it must be possible to answer the following questions:Which object attributes does the federate update?Which object attributes does the federate reflect?Which interaction parameters does the federate send?Which interaction parameters does the federate receive?The answers to these questions can be documented using the Federation Verification Planners Workbook (FEPW) Editor available from the DMSO Software Distribution Center.  The FEPW Editor allows many other federation characteristics to be documented, including the expectation for each federate of what HLA services that federate will call during federation execution.The failure of a federate to uphold its update, reflect, send, or receive responsibilities is a common cause of many federation integration errors and a common symptom of many others.  The Federation Verification Tool (FVT) is designed to assist in federation integration by detecting such failures.  Additionally, FVT can detect whether a federate calls the expected set of HLA services.FVT’s operation can be summarized as followsEdit federate responsibilities information, or import it from a file in the FEPW Data Interchange Format (DIF).Join the federation; monitor federate service invocations, including updates, reflects, sends and receives; and update the graphical display.Resign from the federation and finalize the test results.Save test results reports.2. User InterfaceFVT’s user interface is designed to provide “at-a-glance” information about the status of the current test session and to help the federation integrator quickly locate any potential discrepancies between expected and observed data exchange patterns.  FVT’s outer window has a menu, a toolbar, and a status bar.  Within the outer window, the Responsibilities View and Services View windows can be displayed and arranged.2.1 The Responsibilities ViewThe left-hand pane of the Responsibilities View (Figure 1) displays the federation’s object classes, attributes, interaction classes, and parameters as defined in the federation’s Federation Execution Details (FED) file.  The subclasses of a class can be hidden or revealed by a collapser/expander control to the left of the class; the attributes or parameters of a class can be hidden or revealed by a separate collapser/expander control below the class.  The top pane displays the federation’s federates.  At the intersections defined by the top pane’s columns with the left-hand pane’s rows are two kinds of “association cells”.The first kind of association cell displays the association between a federate and an attribute or a parameter.  These cells are divided into upper halves for update or send information and bottom halves for reflect or receive information.  Each half consists of a circle with an outer border, and a count indicator.  The circle’s outer border is colored yellow to indicate a responsibility or gray to indicate no responsibility.  The interior of the circle is filled in with dark gray to indicate no activity, blue-green to indicate successful fulfillment of the responsibility, or red to indicate a discrepancy.  The count indicator displays the number of updates, reflects, sends, or receives that have occurred.The second kind of association cell displays the association between a federate and an object class or interaction class.  These cells display object instance counts or interaction send counts.  They also contain room for the display of “hidden activity indicators”.  A hidden activity indicator shaped like the subclass collapser/expander control appears to the left of the cell if there has been activity in a subclass whose display is hidden by being collapsed.  This indicator is colored red if there are any hidden discrepancies or blue otherwise.  A hidden activity indicator shaped like the attribute/parameter collapser/expander control appears near the bottom of the cell if there has been activity for an attribute or parameter whose display is hidden by being collapsed.  This indicator is also colored red if there are any hidden discrepancies or blue otherwise.  The purpose of the hidden activity indicators is to allow the user to quickly find hidden activity by making use of the corresponding collapser/expander controls.2.2 The Services ViewThe left-hand pane of the Services View (Figure 2) displays a list of HLA services whose invocations can be monitored by FVT.  The services are grouped according to the categories defined in the HLA Interface Specification.  Each grouping can be hidden or revealed by a collapser/expander control to the left of its category.  The top pane displays the federation’s federates.  At the intersections defined by the top pane’s columns with the left-hand pane’s rows are two kinds of cells.The first kind of cell displays the association between a federate and an HLA service.  These cells consist of a circle with an outer border, and a count indicator.  The circle’s outer border is colored yellow to indicate that the federate is expected to call the service or gray to indicate that it is not expected to call the service.  The interior of the circle is filled in with dark gray to indicate no activity, blue-green to indicate successful fulfillment of the expectation, or red to indicate a discrepancy.  The count indicator displays the number of service invocations that have occurred.The second kind of cell is empty except for the ability to display a hidden activity indicator shaped like the service group collapser/expander control.  This indicator is colored red if there are any hidden discrepancies or blue otherwise.3. UsageFVT is designed to be as easy to use as possible. The following sections describe the steps of FVT’s usage in detail.3.1 Configuring a SessionFVT uses a subdirectory to store all files associated with a single test session.  To configure a session, the user chooses the following:The subdirectory for the sessionThe federation’s Federation Execution Details (FED) fileWhether to import responsibilities information from a FEPW DIF file, and if so the FEPW DIF file to use3.2 Defining ResponsibilitiesFVT supports the import of responsibilities information from files in the FEPW DIF format.  In addition, FVT’s user interface supports the editing of responsibilities information.  When no FEPW DIF file is chosen for the session, the Federate List dialog is invoked to give the user the opportunity to indicate which federates are expected to join the federation, and editing is enabled by default.  When a FEPW DIF file is chosen for the session, the FEPW DIF file is read and reconciled with the federation’s FED file by discarding information about object classes, attributes, interaction classes, or parameters that do not exist in the FED file.  In this case, editing is disabled by default.  Editing can be disabled or enabled at all times via a menu choice.Responsibilities information is edited similarly in both of FVT’s views.  When editing is enabled, an association cell can be created by clicking on an empty association cell space, and an association cell that contains no affirmative responsibilities can be deleted by clicking on it.  A responsibility within an association cell can be toggled by clicking within the outer circle that indicates the responsibility. 3.3 Joining the FederationFVT can create the federation if necessary.  FVT must join the federation to monitor the service invocations of its federates.  Creating, joining, resigning, and destroying the federation can all be initiated via menu choices or toolbar buttons.3.4 Monitoring Federation ActivityAs long as FVT is joined to the federation, it monitors the service invocations of the federation’s federates.  All service invocations are tallied in the Services View, and invocations of update, reflect, send, and receive services are tallied in the Responsibilities View.  When an invocation is tallied, the appropriate count indicator is incremented and the appropriate success/discrepancy indicator is updated.  If the invocation represents the successful fulfillment of a responsibility, the success/discrepancy indicator is colored blue-green; if the invocation represents a discrepancy, the success/discrepancy indicator is colored red.  For example, if federate Tank is responsible for updating attribute Position of object Tank and such an update is observed, the success/discrepancy indicator is colored blue-green, but if federate Plane is not responsible for updating attribute Position of object Tank and such an update is observed, the success/discrepancy indicator is colored red.  In either case, the update count indicator is incremented.3.5 Resigning from the Federation and Finalizing ResultsAfter the user initiates FVT’s resignation from the federation via a menu choice or toolbar button, FVT finalizes its test results.  For each association cell component with a zero activity tally, the success/discrepancy indicator is colored blue-green or red according to whether no activity was the expected outcome.  For example, if federate Tank is not responsible for updating attribute Position of object Plane and such an update was never observed, the success/discrepancy indicator is colored blue-green, but if federate Plane is responsible for updating attribute Position of object Plane and such an update was never observed, the success/discrepancy indicator is colored red.3.6 Creating ReportsAfter test results are finalized, FVT can create two reports: the Summary Report and the Discrepancies Report.  Creation of these reports is initiated by a menu choice; the reports are text files that are saved in the session directory.  The Summary Report includes all the information from both of FVT’s views, while the Discrepancies Report only includes information about discrepancies.4. ImplementationFVT’s operation is based on receipt of the ReportServiceInvocation interaction of HLA’s Management Object Model (MOM), which allows FVT to monitor the service invocations of the federation’s other federates.  To establish this monitoring, FVT takes the following steps after it joins the federation:Publish the MOM interaction class SetServiceReporting.Send a SetServiceReporting interaction to turn off service reporting for FVT itself.  (To avoid an infinite regress of service reports on the receipt of service reports, the RTI does not allow a program to subscribe to ReportServiceInvocation if its service reporting state is on.)Subscribe to the MOM interaction class ReportServiceInvocation.Subscribe to the MOM object class Federate.After subscribing to Federate, FVT discovers an instance of Federate for every federate that is joined to the federation and every federate that joins the federation afterward.  Upon each of these discoveries, FVT takes the following steps:Request an attribute value update for the Federate instance.Obtain the federate’s handle upon receipt of an attribute value update for the Federate instance.Send a SetServiceReporting interaction to turn on service reporting for the federate.After service reporting has been turned on for the federate, FVT begins receiving ReportServiceInvocation interactions that report the federate’s service invocations.  The information in each such interaction is used to update FVT’s internal data.  When the internal data is updated, the user interface’s views are notified of the update and can update the appropriate areas of their displays.5. ConclusionFVT is an easy to use tool for verifying that a federation’s federates fulfill their responsibilities in the maintenance of the federation’s shared data.  It is available for free download by registered users of DMSO’s Software Distribution Center web site (http://hla.dmso.mil).AcknowledgementsThis work is sponsored by the Defense Modeling and Simulation Office (DMSO) under contract DAKF11-97-D-0001-0032.References[1]	Defense Modeling and Simulation Office, High Level Architecture Rules, Version 1.3, February 1998.[2]	Defense Modeling and Simulation Office, High Level Architecture Interface Specification, Version 1.3, April 1998.[3]	Defense Modeling and Simulation Office, High Level Architecture Object Model Template, Version 1.3, February 1998.[4]	Defense Modeling and Simulation Office, High Level Architecture Federation Development and Execution Process (FEDEP) Model, Version 1.4, June 1999.Author BiographiesDAVID ROSENBAUM is a Research Scientist in the Distributed Simulation Systems (DSS) group at the Georgia Tech Research Institute (GTRI).  He is the current Project Director of the FVT project.MARGARET LOPER is a Research Scientist at the Georgia Tech Research Institute (GTRI), and the founder of GTRI’s Distributed Simulation Systems (DSS) group.  She was formerly Project Director of the FVT project.  She is a Ph.D. student at the Georgia Institute of Technology focusing on advanced time management techniques.JOHN MURPH is a Research Engineer in the Distributed Simulation Systems (DSS) group at the Georgia Tech Research Institute (GTRI).  He is FVT’s principal programmer.BEN DEFNET is a Graduate Research Assistant in the Distributed Simulation Systems (DSS) group at the Georgia Tech Research Institute (GTRI).  He has participated in the FVT project as a programmer, tester, and graphic designer.Figure 1: The Responsibilities ViewFigure 2: The Services View