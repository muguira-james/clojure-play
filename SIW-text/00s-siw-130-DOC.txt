Data Distribution Management (DDM) Issues for HLA implementationsErik S. Hougland, Ph.D.Daniel J. PatersonResearch and EngineeringNaval Air Warfare Center Training Systems Division12350 Research ParkwayOrlando, Florida 32826-3275407-380-4670, 407-380-8564 HYPERLINK mailto:houglandes@navair.navy.mil houglandes@navair.navy.mil,   HYPERLINK mailto:patersondj@nvair.navy.mil patersondj@nvair.navy.milKeywords:High Level Architecture, Data Distribution Management, Simulation Middleware Object Classes, SMOCABSTRACT:  This paper describes the implementation of Data Distribution Management (DDM) in the Simulation Middleware Object Classes (SMOC) code that was developed by NAWCTSD Orlando Florida.  One purpose of the SMOC is to provide a migration to high level architecture (HLA) by existing, or legacy, simulations.  This paper uses a Navy research F-14 simulation application as the vehicle to demonstrate the uses and applications of DDM available in the High Level Architecture (HLA) runtime infrastructure (RTI) version 1.3v6.  This paper characterizes the services of the original SMOC HLA interface that were modified in order to incorporate DDM. The ”Lessons Learned” in incorporating DDM into legacy simulations using the SMOC package are presented. The SMOC provides HLA services to a simulation that are to be used to facilitate interoperability across a diverse set of networked application domains. The services include Declaration Management and Data Definition Management.  The domains include distributed platform simulations, Command, Control, Communications, Computer and Intelligence (C4I) simulations, mission planning and rehearsal, simulation based acquisition, virtual prototyping, virtual manufacturing, financial models, cognitive models, distance learning or electronic training environments. The two basic approaches presented in this paper to add the DDM service to those already provided by SMOC to legacy simulations required redesign and coding of the SMOC architecture. The first approach is having SMOC provide static service, i.e. defined and initialized by the scenario service. The second approach is having SMOC provide a dynamic service, i.e. defined in the scenario, and controlled by the simulation.1.  INTRODUCTION:  The mandated use of High Level Architecture (HLA) as the basis for distributed, i.e. networked, and interactive Department of Defense simulations [1] created a requirement for tools to convert existing, or legacy, simulations to HLA.   Many have been developed and presented in the interoperable simulation literature and are described below. Among the services that the HLA provides are methods for managing the large amounts of data that must be transmitted across a network during a simulation.  The filtering of data to insure that only needed data is placed on the network is one of these management functions.  Two types of filtering are provided, by data type and by data value.  These are named Declaration Management (DM), and Data Distribution Management (DDM) respectively.  DM services use the Federation Object Model (FOM) and individual federate Simulation Object Model (SOM).  They ensure that only those data types that are declared to be available or needed by the SOM of each individual federate are incorporated into the FOM.  The DM Publication and Subscription services ensure that only these data are transmitted on the network.  For example, air conditioning status may be a publishable object attribute value defined in a SOM, but if no federate requires that value and subscribes to it, it will not be transmitted on the network.  Landing light status is an attribute that would likely be required for proper visual display of an object.  It would be transmitted.   REF _Ref471628677 \h Table 1.  Data TYPE Filtering, illustrates this type of filtering. Data TypePublishable? (SOM)Subscribed to? (SOM)Transmitted on Network (FOM)LocationYesYesYESAir Conditioning StatusYesNoNOLanding Light StatusYesYesYESTable  SEQ Table \* ARABIC 1.  Data TYPE FilteringDDM services use data values to ensure that only relevant data published and subscribed to using DM by federates is placed on the network.  For example, ships may publish their data and subscribe to the data of other ships, but a ship in the South China Sea may be relevant to a ship in the Sea of Japan, but not necessarily be relevant to a ship in the English Channel.  In this case, DDM creates a value filter based on location to prevent irrelevant data from being transmitted.  DDM can also create value filters based on attributes and properties such as radio channel..   REF _Ref471629461 \h Figure 1 illustrates this sample case.Figure  SEQ Figure \* ARABIC 1.  Data Value Filtering (DDM)2.  REVIEW OF EXISTING TECHNOLOGY2.1 HLA ServicesDDM, DM, and other HLA services are defined in the HLA Interface Specification (HLA-IF).  They are implemented in a Run Time Infrastructure (RTI) which meets the HLA-IF.  The current HLA-IF is Version 1.3.  [2]  The RTI used for this study is RTI 1.3v6 dated (SPRING, 1999).  The services are managed by two executable programs, RTIEXEC and FEDEX, which communicate with federate programs via the RTI library, libRTI.  2.2  HLA Conversion. Three basic HLA conversion schemes have evolved. The first is incorporation of HLA in the native code.   The second is the development and use of "Gateway" processor and software to convert existing data communication constructs to HLA.  The third is "Middleware" which adds HLA implementation code to the data communications code of the simulation to provide an "Internal Gateway" function on the simulation processor.  The following table 2 lists the major advantages and disadvantages of each approach.HLA Conversion Approach ComparisonApproachProcessorsCostConversion TimeSpeed of operationNative1HighLongestFastestGateway2LowShort (~0)Slowest (multi-processor latency)Middleware1MediumMediumFastestTable 2. HLA Conversion Approach	HLA Gateway packages include the Army Simulation, Training and Instrumentation Command's Gateway and the Naval Air Warfare Center Training Systems Division's Simulation Middleware Object Classes (SMOC) using the GATEWAY option.   REF _Ref471876981 \h Figure 2.  HLA Conversion Approaches (Illustrated using SMOC) shows the three conversion approaches and the location of the RTI components. The package used for this study is the SMOC.  SMOC was developed to provide both Gateway and Middleware HLA conversion for legacy simulations.  Section 3.2 will provide a more detailed description of SMOC.  Figure  SEQ Figure \* ARABIC 2.  HLA Conversion Approaches (Illustrated using SMOC)3.  INCORPORATION OF DDM INTO SMOC3.1 Data Distribution Management (DDM)3.1.1 IntroductionData Distribution Management (DDM) Services are defined in chapter 9 of the HLA Interface Specification, Version 1.3 [2], and implemented in the Run-Time Infrastructure (RTI) version 1.3 [4].  The service is intended to reduce the network traffic by reducing or eliminating the transmission of  irrelevant object attribute updates and interaction parameters by filtering on selected data values.  The overview covers a definition of the terms used, service usage context, and relation to declaration management services for federates using DDM.  To use DDM, a routing space is defined using one or more common variables in each SOM and in the FOM.  Publication and subscription regions are then defined in the routing space.  Each region is defined as one or more "extents" of the routing space dimension ranges.   REF _Ref471879359 \h Figure 3 shows how, when the publication region of Federate A overlaps the subscription region of Federate B, transmission of object attribute updates and interaction parameters occurs.  The publication region of Federate C is not in the subscription regions of Federates A or B, therefore updates and interactions are not transmitted from C to A or B until the Federates move and region overlap occurs.  The regions can be static, set at simulation initiation, or they can be dynamic, changing with the federate values of the federation routing space variables.  The RTI implements DDM using network "Multicast" groups based upon routing space dimension value overlap or non-overlap for each publication and subscription region [6]. For dynamic regions, too frequent updates can cause the RTI to spend too much time on multicast group updates.  [5]   Therefore, the frequency of DDM region updates is a federation execution planning parameter. Figure  SEQ Figure \* ARABIC 3.  DDM Routing Space and RegionsThe basic Simulation Middleware Object Classes (SMOC) were modified to support the use of the DDM service in HLA/RTI networks based on specified publication and subscription regions.  SMOC provides static and dynamic DDM services.  Static services are initialized by the scenario, and dynamic services are controlled by the simulation. REF _Ref474743764 \h Table 2 lists the basic DDM services from the Interface specification, a brief description, the implementation thereof in the HLA RTI 1.3v6, and whether they are implemented in SMOC. Interface Specification Service [2]DescriptionRTI 1.3v6“RTI::RTIAmbassador::” [3]SMOC1. Create Region (9.2)This service allocates a new region object.CreateRegion()   (A.6.2)Yes2.  Modify Region (9.3)This service informs the RTI about changes to the regionNotifyAboutRegionModification ()    (A.6.4)YesFirst, modify federate bounds using Region Member Functions:  (C.1.13)Set Upper BoundSet Lower Bound3:  Delete Region-(9.4) This service removes an unused region objectDeleteRegion()     (A.6.3)No4:  Register Object Instance With Region-(9.5)This service registers a new object with the federation and associates some or all of the object’s attributes with DDM regions.RegisterObjectInstanceWithRegion  )(A.6.5)Yes#5:  Associate Region For Updates-(9.6)Associates update region and instance attributes for specific object instanceAssociateRegionForUpdates()  (A.6.1)No6:  Unassociate Region For Updates(9.7)Removes association with region and instance attributesUnassociateRegionForUpdates()    (A.6.10)No7:  Subscribe Object Class Attributes With Region (9.8) This service allows the delivery to the federate of updates of instances of a specified set of class-attributes occurring in a specified subspaceSubscribeObjectClassAttributesWithRegion()    (A.6.9)Yes8:  Unsubscribe Object Class With Region (9.9)Terminates discoveries of classUnsubscribeObjectClassWithRegion ()  (A.6.12)No9:  Subscribe Interaction Class With Region-(9.10)This service allows for interactions of a specified class occurring in a specified subspace to the federate to be delivered.SubscribeInteractionClassWithRegion()       (A.6.8)Yes10:  Unsubscribe Interaction Class With Region-(9.11)Terminates sending of interactionsUnsubscribeInteractionClassWithRegion()     (A.6.11)No11:  Send Interaction With Region (9.12)This service delivers an interaction to federates that have declared a subscription interest in a specified subspace of the routing space bound to the interaction class.SendInteractionWithRegion()     (A.6.7)Yes12:  Request Attribute Value Update With Region (9.13) Stimulate update of values of specified attributes.RequestClassAttributeValueUpdateWithRegion ()   (A.6.6)NoTable  SEQ Table \* ARABIC 2 Data Distribution Management Services: Specification, RTI, and SMOC3.2 Simulation Middleware Object Classes (SMOC)The NAWCTSD Scalable DIS/HLA project (Office of Naval Research 6.2) originally centered on the development of a product called the Simulation Middleware Object Classes (SMOC) as shown in Figure 4. The purpose of the SMOC was to separate an interactive simulation application from specific interactive environment data protocols, architectures, and transport mechanisms.  The SMOC uses virtual-data-transport-channels for sending/receiving data, and performs automatic translations between different data protocols and architectures, effectively acting as a simulation environment interface and a bridge/gateway/translator at the same time.  The SMOC can be configured in Middleware mode as part of a simulation, or it can run in Gateway mode, or both at the same time.  SMOC source code, with an F14 demonstration federate, has been released to U.S. Government Labs and Contractor organizations on a CD with supporting documentation. The SMOC release supports all DMSO HLA tools. This release completed NAWCTSD work on SMOC and a commercial research and distribution agreement (CRDA) was signed with Distributed Simulation Technology, Inc. (DiSTI) ( HYPERLINK http://www.simulation.com www.simulation.com). Project goals for the current fiscal year include improving upon the SMOC product line with designs for scalability and cross Federation Object Model (FOM) translation.  These capabilities are not found in the current SMOC release.  Part of the effort to improve scalability in SMOC included implementing the use of the DDM services of the HLA RTI.Figure  SEQ Figure \* ARABIC 4.  SMOC ConceptWith the Navy’s significant investment in legacy trainers comes the realization that a native implementation of HLA is not possible due to the high modification cost. The only two other approaches left are to use software in a middleware layer or software in a gateway computer. These two approaches were shown earlier in   REF _Ref471625683 \h Figure 2.SMOC is used in Middleware mode when the simulation can support the RTI natively. In this mode the simulation must reside on an NT, SGI, Sun, HP or other RTI supported machine. By using SMOC as a standardized middleware interface, the simulation developer can isolate the original code from the HLA interface by writing to the SMOC interface. Good use of middleware products such as SMOC can have the benefit of removing the burden of maintaining the infrastructure required to support the HLA interface.3.3 IMPLEMENTING DATA DISTRIBUTION MANAGEMENT IN SMOC3.3.1 DDM for Middleware and GatewaysThe Data Distribution Management (DDM) services of the HLA RTI are intended to reduce network load using the concept of routing spaces.  Publication and Subscription Regions in these routing spaces are set up and managed by individual federates.  As described earlier, the RTI uses the regions defined by the federates to route (or to not route) traffic accordingly.The Scalable DIS/HLA project currently utilizes an aircraft simulation as a testbed application for the SMOC.  Uses of DDM services for such an application might include developing a routing space to filter out externally generated federate objects that are outside a certain radius from ownship position.  This is referenced through a routing space called SmocGeo and explained later in this report. Another use might be to filter on federate interaction types. We have an example later in this report that uses a routing space called SmocChannel to filter on radio channel interactions. Another use might be to filter on federate object types.  An air-to-air combat aircraft might not be interested in ground based dismounted infantry objects, for example.  Although the SMOC was originally designed to service drive-and-shoot types of federates in general, it is now being improved to service a much wider range of simulation applications.  With this in mind, a dual aspect approach is needed for determining how to best implement the DDM services. The reader is referred to [7] for additional implementations.The first aspect is to look at the SMOC as a service provider for a heterogeneous set of simulation application types.  In other words, the SMOC can be thought of as a sort of server, with a particular federate, group of federates, or a group of entities, as its client(s).  With this in mind, SMOC must provide a generic architecture independent way to implement DDM services as requested by its client(s).  The initial approach will be to implement a representative set of DDM services for a representative set of clients.  This might include allowing a drive-and-shoot type of client to request filtering based upon ownship position, or perhaps on object type as referenced to the object hierarchy defined in the FOM.  Another example might be to allow a virtual manufacturing type of client, perhaps a simulation of a melting process on an assembly line, to use something like a time-of-day routing space.  In this example, the melting process takes place over a set number of minutes or hours, and only during this time period is the process susceptible to such things as a power failure or the introduction of an incompatible material type.From these examples, it is clear that the SMOC cannot anticipate the needs of all possible clients.  Instead, an approach must be used that allows the SMOC to service DDM requests from clients, regardless of the type of client application.  The SMOC also has the responsibility of implementing these DDM requests on the different types of virtual channels supported.  These are shown in  REF _Ref474744192 \h Figure 4.  In the case of DIS, which does not support DDM routing spaces, the SMOC would have to implement a filtering scheme to produce the same effect as DDM, from a client point of view.  Implementing data filtering on behalf of a client or clients requires that the routing space variables used to filter data be compared for the objects and interactions of interest.  These routing space variables are specified in the FOM or some equivalent for non-HLA channels, like DIS.  They can be based on entity position, time-of-day, object ID, etc. The decision to transmit, or not transmit data is a function of the networked operating system, usually the multi-cast function of the system.  The HLA - RTI DDM system uses the routing space definition in the High Level Architecture Interface Specification [2] to assign federates, such as SMOC, to multi-cast groups for data transmission based on the overlap, or non-overlap, of routing space variables3.3.2 DDM Support in SMOCThe SMOC additions to support DDM must support arbitrary numbers of routing spaces, regions in those spaces, and extents in each region for both the static and dynamic cases A routing space consists of a set of named dimensions.  Each Federate must have its regions and their extents defined.  Some data are defined as part of the Federation Development Process (FEDEP) and apply to all Federates.  Other data are part of each Federate.  The cases used to date have been “Static,”  defined at scenario initialization.  The ability for each federate to modify its regions during the simulation must be added.  A DDM Data “Object” was defined to hold these data.  It consists of nested lists to hold routing space, region, extent, and dimension bound data.   REF _Ref471886716 \h Table 3 lists the data requirements and sources for the SMOC DDM Data “Object.” [3] [4]  These data are supplied in a file, "DDM.DAT.3.3.2.1 Static SMOC DDM ServicesA static set of HLA DDM services is provided by SMOC in gateway mode or middleware mode. SMOC allows the federate developer to configure the HLA DDM interface in a static fashion using a single DDM.dat file. This file is utilized by SMOC at run time to initialize the DDM services. By using a static DDM.dat initialization routine, SMOC allows the federate to utilize the filtering provided by HLA DDM and not add any code to the federates application. This implementation provides DDM as a new HLA service with no impact on existing federates.3.3.2.2 Dynamic SMOC DDM ServicesA dynamic set of HLA DDM services is provided by SMOC in gateway mode or middleware mode. SMOC allows the federate developer to configure the HLA DDM interface in an integrated fashion using a single DDM.dat file along with simulation controlled data. In this case the DDM.Dat file is utilized by SMOC at run time to initialize the DDM services along with the interface to the simulation to gather data used by SMOC to provide filtering. By using a simulation provided data along with the DDM.Dat setup data, SMOC allows the federate to utilize dynamic filtering provided by HLA DDM and not add any code to the federates application. This implementation provides a dynamic DDM implementation as a new HLA service with no impact on existing federates.SMOC – DDM Data Requirements And SourcesDDM ParameterParameters and PropertiesDeveloped DuringFound InSPACESpace NameDimension CountFEDEP.FED FileDIMENSIONSpace NameDimension NameBound ValuesFEDEPDDM.DAT File (Federate Specific)UpperLowerREGIONSpace NameRegion Name# ExtentsSimulationDDM.DAT fileEXTENTNamesRangeSimulationDDM.DAT FileRegionExtentDimensionLowerUpperOBJECT or INTER-ACTIONClass NameRegion NameType:  Publication SubscriptionTable  SEQ Table \* ARABIC 3.  SMOC DDM Data Requirements3.3.3 DDM Initialization in SMOCA DDM Data Object for SMOC is constructed from a file, “DDM.DAT” which is read by SMOC.  The Federation Data of the Routing Space Bounds is entered via this source, as it is not in the Federation Execution Data (.FED) file.  All static Regions are initialized for each Federate after the Federation was created, if need be, and joined.  Dynamic Regions will also be constructed from the “DDM.DAT” file, which is read by SMOC. However in addition to the static data provided by the “DDM.DAT” file the Federate will supply dynamic data such as position for SmocGeo or channel data for SmocChannel.The DMSO supplied DDM documentation was unclear as to the difference between EXTENTS and DIMENSIONS.  After queries to developers, the SMOC DDM implementation was completed. A recommendation from the users of the DDM documentation is to publish additional drawings of how EXTENTS and DIMENSIONS work to make the distinction clear in the documentation.  [5]3.3.4 DDM Dimensions and Routing Spaces in SMOCStatic one dimensional and three dimensional routing Spaces were used.  The following table lists the names and dimensions.  Space Name and Number of DimensionsDimension Name(s)SmocChannel1ChannelSmocGeo3XYZTable  SEQ Table \* ARABIC 4 SMOC Routing Spaces and DimensionsThe SmocChannel space is set up to filter using radio communications channels, or other single dimensional quantities.   The SmocChannel can be used to implement a general training channel using static data, or a Radio channel with dynamic data supplied by the federate.  The SmocGeo space was established to perform geographic filtering using ownship position supplied by the federate.A typical DDM.DAT file using the two above default SMOC spaces to create subscription and publication regions for each is in the following table. SAMPLE SMOC “DDM.DAT” FILERECORD TYPEDATASPACESmocChannel   1DIMENSIONSmocChannel   Channel    0  100 SPACESmocGeo       3DIMENSIONSmocGeo       X          0  100DIMENSIONSmocGeo       Y          0  100DIMENSIONSmocGeo       Z          0  100REGIONSmocChannel  SC_PUBLISH1   1EXTENTSC_PUBLISH1  SC_EXTENT1    Channel     10  20REGIONSmocChannel  SC_SUBSCRIBE1 1EXTENTSC_SUBSCRIBE1 SC_EXTENT2  Channel     15  25INTERACTIONWEAPONFIRE    SC_PUBLISH1   PUBLISHINTERACTIONWEAPONFIRE    SC_SUBSCRIBE1 SUBSCRIBEREGIONSmocGeo       SG_PUBLISH1      1EXTENTSG_PUBLISH1   SG_EXTENT1       X     10  20EX1TENTSG_PUBLISH1   SG_EXTENT1       Y     10  20EXTENTSG_PUBLISH1   SG_EXTENT1       Z     10  20REGIONSmocGeo       SG_SUBSCRIBE1    1EXTENTSG_SUBSCRIBE1 SG_EXTENT2       X     15  25EXTENTSG_SUBSCRIBE1 SG_EXTENT2       Y     15  25EXTENTSG_SUBSCRIBE1 SG_EXTENT2       Z     15  25OBJECTMilitaryPlatformEntity  SG_PUBLISH1   PUBLISHOBJECTMilitaryPlatformEntity  SG_SUBSCRIBE1 SUBSCRIBETable  SEQ Table \* ARABIC 5.  Sample SMOC "DDM.DAT" FIle4.  TEST and EXAMPLE  CASESThe test cases for each the SmocGeo and SmocChannel routing spaces tested the ability to receive object attributes and interaction parameters using static regions.  Tests were done with objects  in the same region of the space, not in the any overlapping regions of the space, and in one or more overlapping regions.  In all cases the DDM service performed as documented and HLA update and interaction data were transmitted only when one or more regions of a space overlapped.  The extension to dynamic regions of the spaces is currently scheduled to be completed as a future SMOC enhancement. LESSONS LEARNED and FUTURE WORK5.1  DDM.DAT WizardThe basic DDM.DAT file used by SMOC to implement DDM services at start up was considered to be too complex for the intended federation developer. To reduce the complexity and thus the cost of DDM implementation a SMOC-DDM.DAT Wizard was written. The wizard loads the Federate's federation execution detail, FED, file and parses the file for DDM information (routing spaces and dimensions). Using data found in the FED file, the wizard tries to find a single dimension routing space called SmocChannel or a multiple dimension routing space called SmocGeo. If these spaces are detected, they are loaded and the correct data elements are turned on for data input. If a space is just detected with no known SMOC functionality, a generic input screen is provided to the federation developer. An example screen from the main SMOC-DDM wizard is shown below.5.2   DDM Extensions to dynamic caseThe basic extension for the SmocChannel dynamic case is to change the EXTENT BOUNDS when a RADIO TRANSMITTER or RECEIVER channel is changed, or when an entity position changes to the point where the subscription and publication regions are invalid.  The timing of the changes is a tradeoff between efficiency of region size and the cost of forcing the RTI to revise “multicast” groups to reflect the region changes [6].  FED File Parser/DDM WizardThe basic FED file parser was written to automate the DDM data gathering requirements shown in  REF _Ref471886716 \h  \* MERGEFORMAT Table 3. A lesson learned early in the DDM project showed a high correlation between the Fed File and Publishing and Subscribing Objects and Interactions with a region. Any discrepancy between the implementation and the FED file causes a RTI error call back. This error is easy to repair and can be eliminated with the Fed File Parser, The final output of the Fed File Parser is a call to the DDM Wizard which generates the DDM.dat file from inputs supplied by the Federation Developer and the result of parsing the Fed File.  5.4  SMOC Control ConsoleA possible SMOC enhancement is a "Control Console" to replace or supplement the current configuration data file.  If this is developed, the DDM Wizard described above would become a part of the control console. 6. DDM IMPLEMENTATION CONCLUSIONSFrom this quick discussion, it is evident that implementing DDM through a gateway or Middleware can be a complicated issue.  The approach that we took to implement DDM in the SMOC, was the same approach that has been used in implementing all of the SMOC functionality to date; that is, to implement a representative set of services and functionality on a proof-of-concept basis, and then include additional functionality as time permits and as needed to address our customers’ requirements.The initial DDM implementation into SMOC is static in nature and uses a DDM.DAT file for setup.  The FED File Parser/DDM Wizard allows for the automation of DDM Data requirements required for DDM setup. As a standardized middleware interface for federates to the HLA, SMOC is isolating the original code and providing the benefit of DDM filtering without the burden of the federate to write a single line of code. By adding the dynamic filtering for SmocGeo, we hope to add the ability to geographically filter, again with no additional lines of code in the federate implementation.  Also by adding SmocChannel in a dynamic filtering mode, we hope to add the radio channel filtering normally seen by the federates, again with no additional lines of code in the federates implementation.6.1  MilestonesThe following milestones have been established for this research initiative.Analysis of DDM and HLA specifications and protocols (2/98 to 10/98) COMPLETED 10/98HLA Federate Under Test (2/98 to 7/98)  Completed for RTI 1.03HLA Federate Under Test (12/98) Completed for RTI 1.3V5Add functionality for DDM services (8/99) Completed for Static cases Final Summary Report:  Post-Implementation (9/99) COMPLETED 10/996.2  ProductsThe products of this effort are two-fold:A final DDM report detailing the design lessons learned involved with DDM migration of the SMOC, with a representative F-14 simulator running under a modern and popular PC operating system.  The report’s quick look and hands-on view should serve as a valuable reference for engineers implementing HLA interfaces.A reusable portion of a Windows NT-based HLA implementation, which should significantly reduce the task of upgrading NT-based simulations to be HLA compliant.7.  REFERENCES[1] USD (A&T) Memorandum, "DoD High Level Architecture (HLA) for Simulations,"    September 10, 1996, URL:  http://www.dmso.mil/docslib/mspolicy/usdat.html[2] Defense Modeling and Simulation Office, "High Level Architecture Interface Specification, Version 1.3", dated 2 March 1998.[3] Defense Modeling and Simulation Office, "High Level Architecture Run-Time Infrastructure Programmer’s Guide, Version 1.3", dated 12 March 1999.[4] Defense Modeling and Simulation Office, "High Level Architecture Object Model Template Specification, Version 1.3", dated 5 February 1998 (20 April 1998 Document Release). [5] Katherine L. Morse, “The Object Model Template Routing Space Table: recording Federation-Global DDM Decisions” Science Applications International Corporation.[6] A, Berrached, M. Beheshti, O. Sirisaengtaksin, A. deKorvin, “Approaches to multicast group Allocation in HLA Data Distribution Management” Department of Computer and Mathematical Sciences, University of Houston-Downtown.[7] Daniel Van Hook, James Calvin, "Data Distribution Management in RTI 1.3" MIT Lincoln Laboratory.8.  AuthorsERIK S. HOUGLAND is an electronics engineer with the Naval Air Warfare Center Training Systems Division, Battle Force Simulation Branch.  His work interests include the implementation of HLA compliance in Navy training systems.DANIEL J. PATERSON is an electronics engineer with the Simulation & Models Division, Modeling & Simulation Development Branch.  His work interests include the implementation of HLA in Naval training systems.9.  AcknowledgementThe assistance of the Defense Modeling Simulation Office in performing this work is acknowledged and appreciated.  			