CYBERWARFARE DISTRIBUTED Training considerations and requirements for operators in Network Centric WarfareSheila B. Banks, Ph.D.Martin R. Stytz, Ph.D.Calculated InsightOrlando, Fl  32828Washington, DC HYPERLINK "mailto:sbanks@calculated-insight.com" sbanks@calculated-insight.com HYPERLINK "mailto:mstytz@att.net" mstytz@att.netKeywords: Network centric warfare, distributed simulation training, cyberwarfare, Unified Modeling LanguageAbstract: The network centric paradigm for warfare in the future spans the entire spectrum of conflict.  However, a number of issues arise that must be addressed in order to assure accurate information operations within a network centric warfare environment.  When performing military planning and operations in a network centric warfare environment, the operation and use of computer networks and software will increase in importance.  This increasing reliance points to a need for training of operators that use the network so that they can gain the maximum advantage from the available information and also be able to recognize when the information is incorrect and/or the network and software are not functioning properly.  However, in spite of the clear need for the development of operators with broad and deep expertise in defending against information attacks, we currently have no capability to address the need to train operators to recognize and counter cyber attacks upon network resources.  Development of expertise, let alone the deep and broad capability for conducting rapid, effective defensive actions, is currently beyond the ability of any currently available training system.  This situation is not acceptable and calls out for research to address the shortfall.  Of paramount importance, given the importance of computers and software to the success of the network centric warfare paradigm and information operations, is proper diagnosis of circumstances as they arise in the network environment and rapid, effective selection of countervailing techniques when network centric resources are under attack.  Because operators must be able to recognize and manage defense against attacks in real-time, cyber battlespace training is important to the success of a network centric warfare approach.In this paper, we will examine the need for network and software attack and defense training environments for operators and other users who rely upon networks and software within a network-centric warfare paradigm and discuss the requirements and capabilities needed for distributed training systems for network centric warfare.As we embrace the network centric warfare model as the paradigm for military operations, our general thesis and motivation for our research is that the network and associated software will become increasingly important and lucrative targets for an adversary.  In light of this thesis, operators and information technology specialists must be able to recognize and counteract an attack or attempt to conduct an exploit against information resources.  The operators and information technology specialists must also differentiate between an attempted exploit/attack and a system failure or fault.  In brief, as we increase our reliance upon computers and communications systems in a network centric cyber battlespace, information technology specialists, commanders, and other users must be able to determine if an attack is underway, diagnose the attack, and take appropriate corrective action within the cyber battlespace.  Clearly, since the battlefield will be the computer, we must be ready to operate effectively within this new and important battlespace.  The key for preparation for this new battlespace is new distributed training systems that provide the cyberwarfare experience and expertise needed to make NCW possible.1.	IntroductionThe US military is undergoing a great change in its philosophy, approach, and technologies used for warfare.  The change in warfare is toward small formations, small but extremely accurate weapons, and high speed movement, all augmented by rapid, automated transfer (push) of information between and among all military components.  This new form of warfare, in which a premium is placed upon timely, accurate information, is called network centric warfare (NCW 1-10].  For NCW to be achieved and be effective there are a number of issues that must be addressed and solved in the real-world and in the simulation world.  In the NCW battlespace of the future, warfighters will become dependent upon the unprecedented level of detailed information available concerning the situation within a battlespace in order to conduct NCW-oriented operations and to function within a battlespace by applying NCW tenets.  This reliance upon information, and the systems that gather and transport it, will induce foes to attempt to disrupt the information flows to gain an advantage over friendly operations.  The interplay between the efforts of friendly efforts to maintain their information operations and the efforts of enemy forces to disrupt them will inevitably result in conflict in the cyberworld, or cyberbattlespace.  As a result, given the importance of information flows to future combat operations, we believe that distributed simulation and computer-generated actors (CGAs) within the distributed simulation can and should be used to aid in an effort to enhance military readiness by simulating attacks upon friendly information resources.  Therefore, in this paper, we will concentrate on the development of distributed simulation techniques to be used to prepare NCW operators to address cyberwafare threats to their information flows.Cyberwarfare11-19 is the broadly defined term used to describe any type of hostile activity taken against computer systems, computer networks, and computerized databases with the objective of degrading or disabling the targeted system(s).  Cyberwarfare attacks make these systems unusable, degrade performance, may lead commanders to make poor decisions due to faulty data, reveal valuable secrets, and may leave behind code that could provide continuing back-door access or be activated on a predetermined event to take obstructive action.  The vulnerability of Department of Defense and commercial systems will continue to increase due to the growing interconnection of systems and connection to the Internet.  As a result of these increased vulnerabilities and of the growing realization of the strategic and tactical advantage that can be gained by attacking or degrading systems, the Department of Defense and commercial sectors are striving to develop a variety of defensive cyberwarfare technologies.  The required cyberdefense technologies must provide defense against attack, enable attack assessment, provide rapid, autonomic response to attack, insure continued operation in the presence of attacks and degradation, and increase network resilience to attack.  Simulation, especially distributed simulation, is a key component in the development of cyberdefense capabilities because distributed simulation can provide an economical, standardized, scientific environment within which to develop and evaluate cyberwarfare defensive technologies.The conduct of cyberwarfare distributed simulations would also be a dramatic departure from current practice for cyberwarriors.  Currently, cyberwarfare practitioners typically operate alone or in small groups and, of necessity, respond to threats in a reactionary, uncoordinated, and narrow manner with products that are of limited utility to the remainder of the cyberspace community.  As a result of the general urgency that accompanies cyberwarfare applications development and the ad hoc nature of the defensive solutions, the cyberdefense designers and implementers lack insight into the side effects, vulnerabilities, and effectiveness of their defensive systems.  While cyberwarfare simulation cannot address all of the shortfalls in the current cyberdefense technology development process, cyberwarfare distributed simulation can serve to introduce rigor into the process.  Cyberwarfare distributed simulation can also provide insight into the operation of defensive tools and techniques, aid in the allocation of resources for research and development, and enable effective cooperation between larger, distributed development and research teams.  Finally, cyberdefense distributed simulations can provide insight into the form of future attacks on information systems.The network centric paradigm for warfare in the future spans the entire spectrum of conflict.  However, a number of issues arise that must be addressed in order to assure accurate information operations within a network centric warfare environment.  When performing military planning and operations in a network centric warfare environment, the operation and use of computer networks and software will increase in importance.  This increasing reliance points to a need for training of operators that use the network so that they can gain the maximum advantage from the available information and also be able to recognize when the information is incorrect and/or the network and software are not functioning properly.  However, in spite of the clear need for the development of operators with broad and deep expertise in defending against information attacks, we currently have no capability to address the need to train operators to recognize and counter cyber attacks upon network resources.  Development of expertise, let alone the deep and broad capability for conducting rapid, effective defensive actions, is currently beyond the ability of any currently available training system.  This situation is not acceptable and calls out for research to address the shortfall.  Of paramount importance, given the importance of computers and software to the success of the network centric warfare paradigm and information operations, is proper diagnosis of circumstances as they arise in the network environment and rapid, effective selection of countervailing techniques when network centric resources are under attack.  Because operators must be able to recognize and manage defense against attacks in real-time, cyber battlespace training is important to the success of a network centric warfare approach.In this paper, we will examine the need for network and software attack and defense training environments for operators and other users who rely upon networks and software within a network-centric warfare paradigm.  We will also discuss the resultant requirements and capabilities needed for distributed training systems for network centric warfare.  While this list of requirements and capabilities is not exhaustive, it does address the needs and issues posed by cyberwarfare issues within a Network Centric Wargare context.Our general thesis and motivation for our research is that, as we embrace the network centric warfare model for warfare as the paradigm for military operations, the network and associated software will become increasingly important and lucrative targets for an adversary.  This importance will be magnified by the presence and use of the Global Information Grid (GIG) to support all facets of military information processing and management.  The GIG will be a key factor in achieving the NCW vision, as the GIG includes all owned and leased communications and computing systems and services, software (including applications), data, security services, and other associated services necessary to achieve Information Superiority, which is itself a key objective and enabler of NCW.  In light of this thesis, operators and information technology specialists must be able to recognize and counteract an attack or attempt to conduct an exploit against information resources.  The operators and information technology specialists must also be able to differentiate between an attempted exploit/attack11- 36 and a system failure or fault.  In brief, as we increase our reliance upon computers and communications systems in a network centric cyber battlespace, information technology specialists, commanders, and other users must be able to determine if an attack is underway, diagnose the attack, and take appropriate corrective action within the cyber battlespace.  Clearly, since the battlefield will be the computer, we must be ready to operate effectively within this new and important battlespace.  The key for preparation in this new battlespace is new distributed training systems.The remainder of this paper is organized as follows.  Section Two holds a summary of background material and the setting for our researchk.  Section Three contains a discussion of the foundations for cyberwarfare training.  Section Four contains a discussion of our approach to identifying cyberthreats that should be addressed within a training environment.  Section five contains a brief summary of the paper and suggestions for further research in this field.2.	BackgroundThe greatest new challenge for NCW training is imparting to the trainees the ability to manage cyber operations and to develop a capability to deal with information uncertainty and information security issues that will inevitably arise as a result of the increased reliance upon information in order to succdessfully conduct NCW operations.  In this section we will discuss technologies that serve to provide security for information and also discuss the Unified Modeling Language as a prelude to a discussion of its use for NCW training.A cyberwarfare distributed simulation environment can provide a broad range of services and capabilities in a low-risk and low-cost setting; a setting in which experimental controls can be applied, analysis supported, and experiments conducted in a manner that is impossible or simply too dangerous for the real-world20-36.  For example, a cyberwarfare simulation environment can be used for the evaluation of cyber science/information assurance technologies and the hosting of experimentation to develop and evaluate cyber science theories. Furthermore, a cyberwarfare simulation environment can also be used to develop and evaluate tools used for cyber command and control and to train personnel in their use.  A cyberwarfare simulation environment can also be used to train personnel and to develop and evaluate the strategies and tactics used to assess and respond to cyberwarfare attacks.  A cyberwarfare simulation environment can be used to develop and evaluate the analytical tools, decision support tools, and intelligent agents that assist humans in responding to cyber attacks.  The cyberwarfare distributed simulation environment can also be used to evaluate implemented systems in order to determine their vulnerabilities and strengths and to devise information assurance strategies.  Because of these capabilities, we believe that a cyberwarfare simulation environment must be a central component of any network centric warfare training system.  In the remainder of this section, we will discuss the capabilities needed by a cyberwarfare simulation environment if it is to support network centric warfare training.  One significant benefit that distributed simulation can play is in the development of defensive systems against large-scale cyberattacks of the type that would be aimed at a force that relies upon networking technologies as a force multiplier. Distributed simulation can also provide an environment for the development, testing, and evaluation of defensive layering technologies, technologies that are essential for protecting the communications backbone of a NCW-enabled force.  A layered defense strategy consists of a balance of avoidance, detection, and response techniques that are designed to improve security.  The techniques are selected based upon their capability for security protection as weighed against the financial, computational, and network costs incurred by their use.  The challenge is to make these mechanisms scalable, efficient, language- and host-independent, and extensible to resource usage.  Currently, defensive system layering is typically confined to a single computer.  Distributed simulation can provide the conditions needed to accurately emulate the computational and networking milieu and uncertainties of the real world and thereby aid in the development of a defense capability for large-scale networks and grid computing.Distributed simulation can also play a role in the development of command and control tools for NCW and for cyberdefense to protect NCW.  The advantage of distributed simulation lies in its ability to provide a controlled environment that accurately emulates real-world cyberwarfare conditions.  Cyberdefense command and control requires situation awareness coupled with automatic, intelligent responses.  Achieving cyberwarfare situation awareness requires combining information from a variety of sources in order to detect system disruptions, determine the status of system functions, and assess whether an attack is occurring and the type of attack.  When an attack is underway, cyber situation awareness helps in the estimation of likely attacker objectives and intent and anticipated future attacker activity.  Because automated attacks happen too rapidly to permit humans to analyze the situation in-depth and to consider alternatives and appropriate responses, automated and intelligent defenses that can autonomously employ counter-measures that can either block the attack or minimize its damage are necessary.  To help a decision-maker assess defensive options, we believe that an intelligent response system and decision aiding capability are also necessary and distributed simulation can also play a key role in the development of this capability.  The development of intelligent responses to cyberattacks requires controlled experimentation in order to evaluate automated analysis and defensive responses.  It is in this area that distributed simulation can have its greatest impact.Given that the previously described capabilities are required for a cyber distributed simulation, we now turn to a discussion of the environment in which they will operate.  The articulation of the requirements for cyberwarfare simulation requires a framework for analysis.  To provide this framework, we suggest using the phases of a cyberwarfare engagement:  1) determination if an attack is underway, 2) characterization of the attack, 3) counteract and neutralization of the attack, and 4) counterattack.  Within the framework, each phase assists in understanding the defensive capabilities that are needed.  Within each phase, proper simulation of an attack and evaluation of defensive tools and techniques requires the modeling of the system.The Unified Modeling Language (UML) 37-53 is a standard graphical language used for developing and composing software blueprints of software systems.  The UML approach to system documentation and specification focuses on the conceptual and physical representation of a system and permits models of a system to be developed from a variety of perspectives or views.  UML provides a means for visualizing the components of a system, for specifying the building blocks of a system, for visualizing the system, and for documenting a system.The vocabulary of UML is formed from three building blocks:  things, relationships, and diagrams.  Things are the major abstractions in the model, relationships tie things together, and diagrams portray aspects of the model.  There are four types of things: structural, behavioral, grouping, and annotational. Structural things are the static parts of a model and represent parts that are either conceptual or physical.  There are seven types of structural things: classes, interfaces, collaborations, use cases, active classes, components, and nodes.  Behavioral things are the dynamic parts of the model.  There are two primary types of behavioral things in UML:  interactions and state machines.  Grouping things are the organizational parts of UML and are described using packages.  Finally, annotational things are the explanatory parts of UML.  Annotations within an UML diagram are comments applied to a model to describe or remark about an element.There are four types of relationships in UML: dependency, association, generalization, and realization.  A dependency is a semantic relationship between two things wherein a change to one thing causes a change to the other thing.  An association is a structural relationship that describes the links between things or objects.  A generalization is a relationship wherein the objects of the specialized element are substitutable for objects of the generalized element.  Finally, a realization is a semantic relationship between classifiers wherein one classifier specifies a contract that another classifier guarantees to execute.  These building blocks are used to build the UML diagrams for a system.In UML, there are nine types of diagrams: class, object, use case, sequence, collaboration, statechart, activity, component, and deployment.  A class diagram shows a set of classes, interfaces, and collaborations and presents the static design view of the system.  The class diagram displays the associations, aggregation hierarchy, composition hierarchy, dependencies, and the generalization / specialization hierarchies present among the classes in a system.  An object diagram shows a set of objects and their relationships, and portrays a class diagram while the objects in it are performing a particular activity.  A use case diagram shows a set of use cases and the entities involved in each case.  A use case shows how the system and a number of users and/or classes interact to accomplish a task.  Use cases can be organized hierarchically and employ inheritance.  Interaction diagrams, which can be either sequence or collaboration diagrams, show a set of objects, relationships, and the messages passed between them.  An interaction diagram presents a view of the system in operation.  A sequence diagram shows interactions organized according to their relative timing sequence.  A collaboration diagram highlights how an interaction takes place by emphasizing the transmission and reception of messages between the objects/components of the system.  A statechart diagram presents a view of the system as a state machine.  A statechart, or state transition, diagram is used to describe the event-ordered behavior of a system.  In this diagram, states are represented using nodes and transitions are represented using arcs.  Statecharts are organized hierarchically.  An activity diagram shows the flow from activity to activity within a system.  A component diagram presents the organizations and dependencies among the classes, interfaces, and collaborations in a system according to the way that it has been implemented.  A deployment diagram shows how the system software is allocated among the computer systems.In concluding this section, allow us to mention some related work.  While this other work did not play a work in our work reported here, it may be of use to others who would follow our work or build a distributed simulation system of the type we have discussed previously54, 60, 61 or discuss in the concluding section of this paper.  Several researchers have discussed simulation of the GIG or one of its subsets 55, 59, 62 or have addressed network centric warfare simulation issues 56, 57, 58, 63.  These efforts point the way toward building an infrastructure for simulation of the CIG and NCW operations, both of which are important issues for the development of a simulator for training NCW operators to deal with cyberattacks upon NCW resources.3.	A Foundation for CyberWarfare Training in a NCW SettingKey considerations in the training of operators to deal with the challenges of cyberwarfare in a NCW environment are determining the targets of cyberwarfare attacks and the techniques and tactics that are likely to be used against each target.  To date, the NCW literature has not addressed these issues and neither has the cyberwarfare literature.  Nevertheless, these targets and attack techniques are important components of the preparation of NCW operators for cyberwarfare, as they will aid in properly focusing the training and in determining the types of attacks that will be encountered.  We can address these matters by determining the interfaces that are most likely to be attacked and the manner in which each interface can be attacked and the tactics likely to be employed in an attack.  In this section, we address the tasks of determing the targets to be attacked and prioritization of training for cyberthreats to these targets.  In the next section we will delve into the problem of determining the threats and the means by which an attack will be conducted, and, as a result, the cyberattacks that the NCW operator must be prepared to confront. However, as in all things, there are limits to the breadth of the training in cyberwarfare that can be conducted.  Because no cyberwarfare training process can cover every security attack and vector, it is important to focus the training upon the most important and/or vulnerable parts of the NCW systems first.  In order to do so, we must be able to prioritize the threats against the systems.  Barring the presence of Trojans or other backdoor forms of malware implanted within the software system during its development, the most serious class of threat to a software system are attacks upon the interfaces within the system.  As a result, NCW operators should be prepared to address threats and attacks against software and network resources used in NCW.  However, it is clear that not all interfaces are equally at risk, have equal importance, or equal vulnerability; therefore, the interfaces should be assigned different priorities for their training and for the degree of expertise required by the cyberwarfare defender.  One means for prioritizing the training vectors is presented Table 1.  The threat assessment process proceeds by computing a threat value for each interface for each system.  Once the values are computed, training for cyberthreats for each system is prioritized and organized so that training for threats occurs in order of decreasing score for each interface for each system.  This approach is useful since the lower valued interfaces have less importance and also have less threat against them.  This chart can serve as the basis for determining the types of attacks and the targets of the attacks that should be used in training.  Higher valued targets shoud reqeive greater training and should also be the targets of multiple, simultaneous attacks.Attack Vector - CharacteristicPointsThe process hosting the interface/vector runs at a high privilege level such as SYSTEM or root.2The interface/vector handling the data is written in a higher-level, more strongly typed language than C or C++.-2The interface/vector handling the data is written in C or C++1The interface/vector takes arbitrary-sized buffers or strings1The recipient buffer for the interface/vector is stack-based2The interface/vector has no or few access control mechanisms1The interface/vector or the resource has good and appropriate access control mechanisms-2The interface/vector does not require authentication1The interface/vector is, or could be, server based2The feature provided by/through the interface/vector is provided by default1The feature provided by/through the interface/vector executes by default1The feature has been found to have security vulnerabilities1Table 1:  Points Attributed to Interface/Vector Characteristics in Order to Assess the Security Importance of Vector/Interface.4.	Cyberthreat Identification for NCW TrainingAs discussed above, there are two components of cyberwarfare-oriented NCW training.  One component is identification of the targets for attack and prioritization of the targets so as to focus training.  The other component is the identification of the techniques and tactics likely to be used against each target. The NCW operator must be aware of how attacks will proceed and the likely tactics that will be employed.  Ths identification will aid in determining the training elements and scenarios that should be developed and also help NCW operators to determine if an attack is underway or if a simple failure has occurred.One way to determine the techniques and tactics likely to be used against each target is to construct threat cases for each target using the UML, after the manner described by Alexander[20], but with some modifications to enable determination of the training components easier.  These modifications consist of identification of the knowledge (about both cyber attack and the target) that must be obtained in order to execute the attack.  The threat cases that we use are composed of both sequence diagrams and use cases.  Sample use cases and sequence diagrams that present the documentation of cyberwarfare behavior that occurs when a system is attacked are presented in Figures 1 and 2.  In these figures, we described the knowledge needed, knowledge relationships, and attacks states that occur for the specific type of software attack class, which is to block access to software libraries used by a software application.  Once the cyberwarfare threat cases and sequence diagrams are constructed, the behavior for the software system when it is under attack via each attack vector using the identified attack techniques can be determined and the visible characteristics of the attacked system can be determined as well.  With this visible behavior for the software system in hand, training can then commence.  The training environment can provide the NCW operator with exposure to accurate portrayals of attacks upon their NCW software systems, regulate the training so that the most important and at risk portions of each system receive the most training, and provide the trainees with the information they need to both identify the type of attack andhow to defend against it.  To continue the process of preparing for NCW cyberwarfare training, to date, we have identified 21 classes of attacks and developed the threat case diagrams and sequence diagrams for each case.Conclusions and Future WorkIn this paper, we examined the need for cyberwarfare training environments for operators and other users who rely upon networks and software to execute operations within a network-centric warfare paradigm.  We also discussed the requirements and capabilities needed for distributed training systems for network centric warfare.  Our thesis and motivation for the research reported here is that as we advance in the use of the NCW paradigm for military operations, the network and associated software will become increasingly important and lucrative targets for an adversary, and we must be prepared to address their attempts to wrest information superiority from our grasp.  In light of this, operators and information technology specialists must be trained to be able to recognize and counteract a cyber attack against NCW information resources.  The operators and information technology specialists must also be able to differentiate between an attempted exploit/attack and a system failure or fault, which is not an easy task even for specialists.  Since in the NCW world, the most important part of the battlefield will be the computer and its software, we must be ready to operate effectively within this new and important battlespace.  Our current capabilities for cyber defense and cyberwarfare training in the face of a concerted attack are not up to the challenge and leave our systems dangerously exposed.  In this paper, we addressed but one of the many concerns before us, that of training NCW participants to deal with cyberwarfare attacks upon NCW information assets. The key to preparation for this new battlespace is the development of new distributed training systems that provide the cyberwarfare experience and expertise needed to make NCW possible in the face of cyberwarfare.  To provide a guide for training prioritization, we discussed a means for identifying the portions of the NCW systems that are most crucial and/or vulnerable to attack.  We also presented a means for determining how attacks will proceed and the likely tactics that will be employed.  This information also supports the training process since it will help to determine the training elements and scenarios that should be developed and also helps NCW operators to determine if an attack is underway or if a simple failure has occurred.Of even greater concern in the cyberwarfare arena is the overarching goal of the provision of Global Information Grid Enterprise Services.  This capability, which will serve NCW but is much broader in scope, points to the day where information is the key component of all military power.  This overarching shift in DoD reliance upon information to achieve dominance in all aspects of its operations and effectiveness also serves to increase the value of the GIG and its information as a target.  This move to the GIG further places all DoD activities under the threat of cyberattack, which in turn indicates the need for even broader training and preparation of all personnel to face the cyberwarfare threat.In addition to improved training, other activities should be pursued in order to improve our cyber defenses and enable them to defeat increasingly sophisticated attacks.  One activity is the development and deployment of new strategies for defense.  To date, software defense has been a relatively minor consideration in the development of software, this is a poor strategic choice.  Software defense is an important software property and should be granted greater priority in the software development process.  Strategically, software security is clearly increasing in importance relative to other software properties and a new software development methodology that emphasizes application security coupled with language specific defensive methodology enhancements and guidelines that support this strategy are needed.  Another need that is evident is that a major step that must be taken in order to improve the state of software protection is the development of an ontology that can be used for the categorization and acquisition of software protection knowledge. A further need is for the cost effective but accurate provision of training services.  Our research indicates that there is much to be gained by the development of an automated tool for cyberwarfare training. The impetus for the development of a cyberbattlespace red team for training, or cyber warfare opposing force (CW OPFOR), is the increasing reliance by US forces upon information dominance to enable NCW and the ever increasing value of US software assets coupled with the need for standardized, broad, and cost-effective cyberbattlespace training.  However, before a minimally useful cyber warfare opposing force (CW OPFOR) can be fielded for training purposes, further research and development that builds upon the effort reported here is clearly needed.  Research targeted at advancing cyberbattle understanding, human behavior modeling, intent inferencing, information display, data mining, reasoning, and knowledge base expansion all within the context of NCW and cyberwarfare must be conducted.  As a result of these further research efforts, the resultant CW OPFOR can be used to generate and conduct realistic information warfare exploits for training.  While it is clear that training will benefit from the use of a CW OPFOR, the question of the necessary characteristics of a CW OPFOR naturally arises.  While a complete discussion of these characteristics exceeds the scope of this paper, three of the key qualities can be identified here and briefly discussed.  Firstly, the CW OPFOR must be able to employ any form of reasoning and have a capability for adaptive learning in order to provide realistic and unpredictable attacks against friendly NCW structures.  Secondly, the CW OPFOR must be able to autonomously analyze the results of its actions and to modify its behavior in response to the results of the analysis so as to maximize its ability to provide accurate cyber attacks and thereby improve training.   However, we cannot expect the CW OPFOR to learn a wide variety of productive attacks on its own nor should we expect it to be able to provide specific types of exploits on demand, as it were, in order to provide a specific training experience or command and control defenses test.  Therefore, and thirdly, the CW OPFOR must be able to be readily programmed with new plans and forms of attack as well as specific actions that form part of an attack. As regards future work to implement CW OPFOR, we have four major recommendations.  The first recommendation is to populate the knowledge base with knowledge that can be used for a test of a prototype CW OPFOR.  The second recommendation is the development of a prototype system, which we believe should be a distributed intelligent agent software architecture for the CW OPFOR.  The third recommendation is for the development of an intelligent interface between the CW OPFOR and existing software reverse engineering/attack tools (these are reverse engineering tools such as disassemblers, decompilers, debuggers, port scanners, scripting engines).  The fourth and final recommendation is that a single type of attack should be selected for test and demonstration of the prototype and that its performance should be compared to an actual human red-team’s performance.In sum, as we move toward network-centric warfare, the network and software applications will become ever more tempting and profitable targets for attack by an enemy.  Therefore, it is apparent that in order for NCW to be successful as an operational paradigm, the people who operate within the new NCW battlespace must be prepared to deal with attacks upon the information resources that make NCW a viable strategy.  To date, little work has been done to prepare for cyberwarfare in the NCW environment.  This paper reports on our first steps toward addressing this training shortfall by enabling those in the NCW battlespace to deal with cyber attacks upon their most crucial resources.  But, this is but a first step, and as we have indicated above much remains to be done.  Information operations and defenses will determine whether NCW will succeed as a warfighting paradigm.  Those people who will work and fight within the NCW context must be prepared to defend against cyber attacks and to deal with the information uncertainty and lack of information that will attend cyberattacks upon NCW resources.  There will be a struggle for information superiority in the NCW battlespace and we must be prepared for the struggle in all of its facets.ReferencesCommand and Control/Network Centric WafareAlberts, D.S.; Garstka, J.J.; Hayes, R.E.; and Signori, D.T. (2001) Understanding Information Age Warfare. CCRP Press, CCRP Publication Series: Washington D.C.Alberts, D.S. and Papp, D.S. (2001) Information Age Anthology, Volumn 1: The Nature of the Information Age. CCRP Press, CCRP Publication Series: Washington D.C.Alberts, D.S.; Garstka, J.J.; and Stein, F.P. (1999) Network Centric Warfare: Developing and Leveraging Information Superiority. CCRP Press, CCRP Publication Series: Washington D.C.Alberts, D.S. (2002) Information Age Transformation: Getting to a 21st Century Military. CCRP Press, CCRP Publication Series: Washington D.C.Alberts, D.S. and Hayes, R.E. (2003) Power to the Edge CCRP Press, CCRP Publication Series: Washington D.C.Command and Control Research Program (2002) The Code of Best Practices for Experimentation. CCRP Press, CCRP Publication Series: Washington D.C.Garstka, J.J. (2000) “Network Centric Warfare: An Overview of Emerging Theory,” PHALANX, Military Operations Research Society, Alexandria, VA.Miller, G.A. (1956) “The Magical Number Seven Plus or Minus Two: Some Limits on Our Capacity for Processing Information,” The Psychology Review, vol. 63.NATO SAS026 (2003) Nato Code of Best Practice for C2 Assessment. CCRP Press, CCRP Publication Series: Washington D.C.Smith, E.A. (2003) Effects Based Operations: Applying Network Centric Warfare in Peace, Crisis, and War. CCRP Press, CCRP Publication Series: Washington D.C.ThreatErickson, J. (2003) Hacking:  The Art of Exploitation.  No Starch Press: San Francisco.Deursen, A. and Burd, E. (2002) 9th Working Conference on Reverse Engineering.  IEEE Computer Society:  Los Alamitos, CA.Howard, M. and LeBlanc, D. (2003) Writing Secure Code, 2nd Edition, Microsoft Press:  Redmond.Huang, A. (2003) Hacking the XBox, No Starch Press: San Francisco.McCkure, S.; Scambray, J.; and Kurtz. (2003) Hacking Exposed: Network Security Secrets and Solutions, 4th Edition.  McGraw-Hill: New York.Skoudis, E. (2004) Malware: Fighting Malicious Code.  Prentice Hall: Upper Saddle River, NJ.Wang, W. (2003) Steal This Computer Book, No Starch Press: San Francisco.Whittaker, J.A. (2003) How to Break Software.  Addison-Wesley:  Boston.Whittaker, J.A. and Thompson, H.H. (2004) How to Break Software Security.  Addison-Wesley: New York.Secure Software DevelopmentAlexander, I. (2003) “Misuse Cases: Use Cases with Hostile Intent,” IEEE Software, vol. 20, no.  1, January, pp. 58-66.Amoroso, E.G. (1994) Fundamentals of Computer Security Technology. Prentice Hall: Englewood Cliffs, NJ.Anderson, R. (2001) Security Engineering. John Wiley & Sons: New York. Denning, D.E. (1999) Information Warfare and Security, Addison-Wesley: Reading, MA.Gamma, E.; Helm, R.; Johnson, R.; and Vlissides, J.M. (1995) Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley: Reading, MA.Garfinkel, S. and Spafford, G. (1991) Practical Unix Security. O’Reilly & Associates: Sebastopol, CA.Gollmann, D. (1999) Computer Security.  Wiley: Mew York.Howard, M. and LeBlanc, D. (2002) Writing Secure Code.  Microsoft Press: Redmond, Washington.McClure, S.; Scambray, J.; and Kurtz, G. (2003) Hacking Exposed: Network Security Secrets and Solutions, 4th Ed. Osborne: New York.Rubin, A. (2001) The Whitehat Security Arsenal: Tackling the Threats.  Addison-Wesley: Boston, MA.Summers, R. (1997) Secure Computing: Threats and Safeguards.  McGraw Hill: New York.Viega, J. and McGraw, G. (2002) Building Secure Software: How to Avoid Security Problems the Right Way. Addison-Wesley: Boston, MA.Redwine, S.D. and Davis, N. (eds.) (2004) Processes to Produce Secure Software, National Cybersecurity Partnership Task Force Report.Davis, N. and Mullaney, J. (2003) The Team Software Process in Practice, A Summary of Recent Results, Software Engineering InstituteHall, A. and Chapman, R. (2002) Correctness by Construction: Developing a Commercially Secure System,” IEEE Software, vol.  19, no. 1, pp. 18-25.Barnes, J. (2003) High Integrity Software: The SPARK Approach to Safety and Security, Addison-Wesley.Davis, N.; Redwine, S.T.; Zibilski, G.; McGraw, G.; and Humphrey, W. (2004) Processes for Producing Secure Software, IEEE Security and Privacy, vol. 2, no. 3, pp. 18-25. UMLAlbir, S.S. (1998) UML in a Nutshell, O'Reilly Press, Sebastopol, CA.Awad, M.; Kuusela, J.; and Ziegler, J. (1996) Object Oriented Technology for Real Time Systems, Prentice Hall, NJ, 1996.Bell, A.E. and Schmidt, R.W. (1999) "UMLoquent Expression of AWACS Software Design," Communications of the ACM, vol. 42, no. 10, October, pp. 55-62.Booch, G. (1998) The Unified Modeling Language User Guide.  Addison Wesley, Reading, MA.Booch, G.; Rumbaugh, J.; and Jacobson, I. (1999) The Unified Modeling Language User Guide, Addison Wesley, Reading, MA.Calvin, James O. and Weatherly, Richard. (1996)  “An Introduction to the High Level Architecture (HLA) Runtime Infrastructure (RTI),” 15th Workshop on Standards for the Interoperability of Distributed Simulations, Orlando, FL, 11 - 15 March, pp. 705-715.D'Souza, D. and Willis, A.C. (1998) Objects, Components, and Frameworks in UML: The Catalysis Approach, Addison-Wesly Reading, Mass.Fowler, M. (1996) Analysis Patterns: Reusable Object Models.  Addison Wesley, Reading, MA.Fowler, M.; Scott, K.; and Booch, G. (1999) UML Distilled; A Brief Guide to the Standard Object Modeling Language, 2nd Edition, Addison-Wesly Reading, Mass.Gamma, E.; Helm, R.; and Vlissides.  (1995) "Design Patterns:  Elements of Reusable Object Oriented Software. Addison-Wesly Reading, Mass.Gomaa, H. (2000) Designing Concurrent, Distributed, and Real-Time Applications with UML, Addison-Wesly Reading, Mass.Henderson-Sellers, B. and Unhelkar, B. (2000) Open Modeling with UML, Addison-Wesly Reading, Mass.Kobryn, C. (1999) "UML 2001: A Standardization Odyssey," Communications of the ACM, vol. 42, no. 10, October, pp. 29-37.Kulak, D.; Guiney, E.; and Lavkulich, E.  (2000) Use Cases:  Requirements in Context, Addison-Wesly Reading, Mass.Larman, C. (1998) Applying UML and Design Patterns, Prentice Hall, Cambridge, MA.Larsen, G. (1999) "Designing Component-Based Frameworks Using Patterns in the UML," Communications of the ACM, vol. 42, no. 10, October, pp. 38-45.Page-Jones, M. (2000) Fundamentals of Object-Oriented Design in UML, Addison Wesley, Reading, MA.Related WorkStytz, M.R. and Banks, S.B.  (2000) “Requirements and Issues in Cyberwarfare Simulation,” Proceedings of the 2000 Fall Simulation Interoperability Workshop, Orlando, Florida, 17-22 September, pp. 1-10.Webster, S.G. and Gallant, D.S. (2002) “Joint Virtual Battlespace (JVB) Command Control and Communication (C3) Grid, Proceedings of the 2002 Fall Simulation Interoperability Workshop, Orlando, FL; 8-13 September, pp. 84-95.Alexander, R.S. (2002) “Joint Virtual Battlespace (JVB) – Representing Network Centric Warfare with New and Legacy Simulations,” Proceedings of the 2002 Fall Simulation Interoperability Workshop, Orlando, FL; 8-13 September, pp. 418-423.Harkrider, S.; McDonnell, J.; Braudaway, W. (2002) “JVB Federation Design,” Proceedings of the 2002 Fall Simulation Interoperability Workshop, Orlando, FL; 8-13 September, pp. 428-437.Johansson, U.M. and Ancker, G. (2002) “Modeling and Simulation Issues in the Swedish Network Centric Warfare Demonstrator Demo 02,” Proceedings of the 2002 Fall Simulation Interoperability Workshop, Orlando, FL; 8-13 September, pp. 647-653.Russell, J. (2003) “Modeling Digital Communication Networks with JMASS and DIS,” Proceedings of the 2003 Spring Simulation Interoperability Workshop, Orlando, FL; 30 March – 4 April, pp. 188-193.Stytz, M.R. and Banks, S.B. (2004) “Issues In Software Protection For Military Simulation,” Proceedings of the 2004 Spring Simulation Interoperability Workshop, Washington, DC; 18-23 April, pp. 96 - 104.Stytz, M.R. and Banks, S.B. (2004)  “Toward Computer Generated Actors As Cyberspace Opposing Forces Used In Network Centric Warfare Simulations,” Proceedings of the 2004 Spring Simulation Interoperability Workshop, Washington, DC; 18-23 April, pp. 84-95.Valentine, P.R. and Nguyen, A. (2004) SEIT: Modeling Radio Network Connectivity in a Real Time Distributed Simulation,” Proceedings of the 2004 Spring Simulation Interoperability Workshop, Washington, DC; 18-23 April, pp. 977-981.Legand, P. (2004) “A Security Approach for Multi-National Exercises/Experiments,” Proceedings of the 2004 Spring Simulation Interoperability Workshop, Washington, DC; 18-23 April, pp. 242-250.Figure 1: Threat/Use Case Diagram:  Attack Name - Block Access to LibrariesFigure 2: State Chart Diagram:  Attack Name - Block Access to Libraries The Global Information Grid is a globally interconnected, end-to-end set of information capabilities, associated processes, and personnel for collecting, processing, storing, disseminating, and managing information on demand to warfighters, policy makers, and support personnel.  See  HYPERLINK "http://www.disa.mil/ns/gig.html" http://www.disa.mil/ns/gig.html  The vision for GIG Enterprise Services (ES) is to provide anytime, anywhere access to reliable decision-quality information through the use of cutting-edge, web-based, networked services.  The GIG ES will improve the decision-making ability of warfighters and business people by transforming the way they receive information. Information producers will post information and advertise its availability. End users will pull mission-tailored information quickly and precisely from anywhere within the network.  The chief problem to be overcome in order to achieve this vision is information assurance, which drives the need for broad-based preparation for cyber attack. The GIG and NCW are mutually supporting and mutually reliant concepts; the GIG enables NCW at its envisioned degree of competence, NCW brings the GIG to the battlefield and serves as a force multiplier.		PAGE  IIFYesNoNoYesAnother library availableENoYesDZNoYesDNoNoUnsuccessful attackExploitationSuccessful AttackECAnother library vulnerability availableCSelect library to attackBYesNoAssemble Threat MatrixReverse EngineeringConduct AttackIdentify VulnerabilitySelect Tactic to attack vulnerabilityDetermine libraries that are usedDetermine functionality of each libraryDetermine failure modes of each libraryBDetermine programming languageAZASelect target operating systemSelect target CPUSelect target ApplicationSelect target networkCorrelate functionalities and failure modesEvaluate library attack resultsOther vulnerability attack tactics availableFData miningSpoofing  optionDetermine defenseDetermine application behaviorDetermine memory mapExamine output from attacker toolsModify procedure link tableDetermine library APIsDetermine library functionsDetermine LibrariesDecision SystemProgramming LanguageSelect TacticIdentify TargetAccess knowledge base for threat case knowledgePerform assessmentAccess knowledge base for situation assessment knowledgeModifiersObjectiveExploited VulnerabilitiesStrategyExpertiseCPU TypeOperating System TypeNetwork TypeApplication TypeMajor Threat CaseATTACKMinor Threat CaseHuman behavior model, communication, cooperation