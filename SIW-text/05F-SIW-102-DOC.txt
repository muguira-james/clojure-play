MRMAide Enhancements to Support Multi-Resolution Federation DevelopmentMs. Maria Valinski1 , Dr. Robert McGraw2, Craig Lammers2, Dr. Jeffrey Steinman3RAM Laboratories, Inc.10525 Vista Sorrento Parkway, Suite 220San Diego, CA 92121858-677-92071mvalinski@ramlabs.com 2 rmcgraw@ramlabs.comMr. Jacob BirminghamU.S. Army, Research Development and Engineering Command (RDECOM)AMSRD-STTC, 12423 Research ParkwayOrlando, FL 32826407-384-5442Jacob.Birmingham@us.army.milKeywords:Keywords: dynamic situation and assessment, simulation, effects based operations, dynamic re-planningABSTRACT:  The High Level Architecture (HLA) standard was originally developed by the US Department of Defense. It is the prescribed standard for military simulation interoperability within the US and is adaptable for any kind of simulation. The modeling and simulation community has continued to support HLA developed systems specifically for interoperability and model reuse. Many federates have been developed that utilize this standard; however, reusing these federates can potentially be a complex problem due to federates that are designed to accomplish a specific task for a federation. When attempting to integrate these federates with other federations, many times developers are mapping federates that operate at different levels of resolution. The complexity of having multi-resolutions models across a domain of federations is very problematic and a solution needs to be easily obtainable, and usable to the federation developers.To aid in the design and integration of multi-resolution federations, the MRMAideTM (Mixed Resolution Modeling Aide) toolset is being enhanced to apply techniques designed for Mixed Resolution Modeling (MRM) to multi-resolution federations. MRMAideTM is a tool that enables the integration of multi-resolution models and simulations at the component, entity, and federates levels. MRMAide™’s development methodology is being modified to follow the Federation Development and Execution Process (FEDEP), so each step directly maps to the process used in the development of federations. This methodology utilizes a graphical user interface (GUI) with separate views to provide visual mechanisms to map the Source and Target Simulation Object Model (SOM) or Federation Object Model (FOM).This paper will discuss MRMAide™’s support for the FEDEP process and its extension to support Multi-Resolution Federation Development, Integration, and Testing. We will also discuss additional enhancements in support of different Geographical Coordinate Systems and federate synchronization mechanisms. The use of MRMAide will be demonstrated by designing a multi-resolution federation, like the Army Constructive Training Federation (ACTF) that has been developed using our tool.The Department of Defense is developing a Global Information Grid (GIG) that provides its users with a seamless, secure, and interconnected information environment to meet real-time and near-real-time needs of the warfighter. Several communities of interest exist in support of GIG application thrusts, including a Modeling and Simulation Community of Interest (M&S COI) that focuses on applications enabling improved common operating environments for providing combat support, Command and Control, intelligence, and combat service support. RAM Laboratories, in conjunction with the Air Force Research Laboratory, is developing a DSAP (Dynamic Situation Assessment and Prediction) Software Infrastructure that will address the needs of the GIG M&S COI by leveraging computing resources across a distributed grid to provide a dynamic planning and analysis capability through the simulation of desired Courses of Action and alternative plans while calibrating its analysis process with the real-time operational picture. The DSAP Infrastructure distributes simulations using JSAF for predictive analysis, and subscribes to C4I data via TBMCS for providing the real-time operational picture in order to evaluate plans and alternatives. This paper will discuss the status of the DSAP Infrastructure and provide a roadmap for enhancing the DSAP Infrastructure with features to work with Network Centric Enterprise Services (NCES) in a Service Oriented Architecture. The paper will discuss how the DSAP Communications Infrastructure can be augmented with publish/subscribe functionality in order to address net-centric concepts by enabling processing nodes to (1) publish data or information, (2) subscribe to published data or information, and (3) support query on demand operations for posted data. The paper will discuss how TBMCS updates (and its subsequent replacement services) can be provided to the DSAP Infrastructure as a web service in a SOA architectureIntroductionBattlefield simulation is a complex, multidimensional, multi-perspective problem that requires models and simulations of all resolution levels in order to capture its many facets and to replicate its complexities. While a vast number of models and simulations exist today, most of these models have been developed in a stove-piped fashion; each designed to perform its own specific and individualized task varying dramatically in both resolution and scope. In order to reuse such models and simulations and integrate them with C4I systems, the simulation or federation developer must deal with issues surrounding differences in resolution, fidelity, and scope for the data representations used in these simulations as well as fidelity and resolution of algorithms represented in the models themselves. To assist analysts and developers faced with this daunting integration task, RAM Laboratories is working with the U.S. Army Research, Development, and Engineering Command (RDECOM) to enhance its Mixed Resolution Modeling (MRM) technology, known as MRMAide, to aid in the identification, visualization, comparison, and ultimately the alignment of both simulation and C4I system data that will enable better overall comprehension of modeling disparities.MRMAideTM is a tool that enables the integration of multi-resolution models and simulations at the component, entity, and federate levels of composability. We are enhancing MRMAideTM to address Multi-Resolution Federation Development and Planning by extending MRMAideTM’s current methodology to support (1) the alignment of multi-resolution data and data mapping, including C4I data, (2) the resolution and translation of differences in the algorithms used by different representations, including design patterns through Base Object Model (BOM) concepts, and (3) better overall alignment with the Federation Development and Execution Process (FEDEP).This paper details MRMAideTM’s support for the FEDEP process and outlines our roadmap for support multi-resolution federation development. Section 2 presents a general background in the area of mixed resolution modeling. Section 3 presents a study detailing some of specific needs of the M&S community with respect to integrating federations with federates residing at multiple levels of resolution. Section 4 discusses the original implementation of the MRMAideTM tool, while Section 5 discuss research and enhancements provide through this effort to address multi-resolution FEDEP. Section 6 outlines future work in this area. General Mixed Resolution Modeling OverviewThe DoD’s modeling and simulation efforts involve simulations that range from high-fidelity engineering simulations to campaign-level simulations involving all of the joint forces. These simulations utilize all types of models, simulators, and paradigms that address the entire range of the modeling and simulation (M&S) spectrum. This range includes applications such as education, training, analysis, research and development, test and evaluation, production, and logistics. Traditionally, M&S efforts have focused on building models and developing simulations that target a single application for a given agency. This process of developing models and simulations for each application has resulted in the existence of a wide variety of different representations (models) of any system. These representations often differ greatly in terms of simulation platform support, simulation infrastructure, modeling language, timing, scope, and fidelity.Over the past several years, the goals of the DoD’s modeling and simulation effort have shifted toward promoting a joint forces training, acquisition, and assessment capability that combine all existing M&S modeling applications into a single M&S vision. This M&S vision has pushed the emphasis away from developing simulations that target single applications, and toward developing interoperable multi-resolution simulation model sets that address a wide range of applications as shown in  REF _Ref102795690 \h  \* MERGEFORMAT Figure 1.Figure  SEQ Figure \* ARABIC 1: Multi-Resolution Simulation DevelopmentIn order to satisfy these expanded requirements, simulation models and federations must support a wide variety of paradigms and representations. Design and integration programs require federations that support disciplines such as computational fluid dynamics, computational structural mechanics, computational electromagnetics, logistics, computational thermodynamics, electronic circuit design, environment modeling, terrain modeling, supply, climate, weather, ocean simulation, C4I forces modeling, civilian and military infrastructure modeling, and analytic attribute evolution modeling. These programs must include provisions for achieving interoperability of a variety of modeling domains including discrete or continuous simulation, modeling of ordinary and partial differential equations, model synchronization, finite element analyses, and simulation involving models containing differing degrees of fidelity through aggregation and de-aggregation. To address these issues, a variety of Mixed Resolution Modeling (MRM) techniques have been used.MRM refers to building models where the resolution at which phenomena is represented can be varied either to communicate with other models at different resolutions, or to alter the speed of the simulation to accommodate computational resources by reducing complexity [SIS98][BOW02]. Four of the key issues that MRM addresses are:(1) What levels of detail are present in the synthetic environment in which these models exist?(2) How does one connect the data for models of disparate resolutions?(3) How does one handle differences in the manner in which simulations manage time? (4) How does one handle the algorithmic differences between the simulations?Formal attempts have been made at resolving these differences in resolution. Efforts have been made at implementing MRM techniques or by developing special SOM/FOM (Simulation Object Model/Federation Object Model) representations to handle resolution differences through both the data representation and the fidelity of the algorithms [MCG00][MAC95][BOW02][BOW03]. Implemented techniques include the use of statistical approximations, use of data clustering techniques, use of substitution algorithms, use of aggregation and de-aggregation techniques, and use of abstraction mechanisms [DAV00][SIS98][TRE00][LEE97]. The process of developing these translations often involves hand-coding wrappers, or translators, that implement MRM techniques. This process is often tedious, error-prone, time consuming, and usually cannot be ported from federation to federation.needs of multi-resolution development effortsIn order to more specifically examine the requirements for a tool that could promote multi-resolution federation development, our effort examined ongoing and recently completed multi-resolution federation development efforts. There were three multi-resolution federations examined during our effort: Army Constructive Training Federation (ACTF), which supports Basic Force and Command Structure simulations and will look to include the Joint Deployment and Logistics Model (JDLM) in the future; Joint Mixed-Resolution Model (JMRM), which combined Joint Warfare System (JWARS) and Joint Semi-Automated Forces (JSAF) to provide a joint campaign analysis/mission training simulations; and JCATS)/JTLS, which combined Joint Theater Level Simulation (JTLS) with the Joint Conflict and Tactical Simulation (JCATS). Conferences were conducted with the developers of each of these federations to identify their accomplishments, lessons learned, and elements that could be improved for future multi-resolution federation development. 3.1 ACTF, JDLM, and other FederatesThe first study researched the ACTF FOM. The ACTF FOM combined object models to jointly support Warfighter’s Simulation (WARSIM) and One Semi-Automated Forces (OneSAF) in the same overarching federation. The ACTF FOM provides entities and interactions that are required to support Force Structure and Combat models through Basic Command and Attrition Analyses. The Object Model Development Tool document (.OMD) from this FOM was used to assist with the design of MRMAideTM. MRMAideTM was modified to read-in the .OMD information and graphically display the FOM in Unified Modeling Language (UML) format. The ACTF FOM was graphically viewed with a Knowledge Framework (KF) Testbed FOM to demonstrate the Conceptual Design of a multi-resolution FOM. The KF Testbed FOM is a subset of the Real-time Platform Reference (RPR) FOM generated from one of our earlier efforts to develop Commander Federates built around reasoning engines as part of a KF Testbed integration effort for the Defense Modeling and Simulation Office (DMSO) through the SPAWAR System Center San Diego (SSC-SD). 3.2 Joint Mixed Resolution Model (JMRM)The second study examined the JMRM Federation. The JMRM Federation consists of JWARS Federates performing campaign analysis and interacting with JSAF federates to examine the effectiveness of specific mission plans on the overall campaign strategy. To develop the multi-resolution federation, Joint Warfare System (JWARS) and JSAF developers had to make changes to each model (federate). These changes included: (1) enhancing the JWARS SOM to correctly interpret the RPR FOM (from JSAF) attributes and packing structures, (2) modifying the JSAF federate to de-aggregate JWARS entities to satisfy the JSAF level of resolution, (3) modifying JSAF to send updated state vector information to aggregated entities on the JWARS side, and (4) providing synchronization points to manage time across the multi-resolution federation while handling the aggregation/de-aggregation of entities.3.2.1 Key Issues in JMRMIn discussing JMRM Federation Development with JWARS and JSAF developers, several accomplishments and lessons learned were brought to our attention as features that would greatly enable future multi-resolution federation development efforts. First, techniques had to be provided that would enable one federate to correctly translate data from one federate to another federate. This translation process includes the aggregation/de-aggregation of information between federates, and it could be provided through two main approaches: (1) providing the translation mechanisms local to the translating federate, or (2) by providing a translation federate that could plug into the Run-Time Infrastructure (RTI). Both approaches were examined during JMRM federation development. The implementation of a Translation Federate was the most straightforward approach and easiest to implement. This approach however, resulted in some limited performance degradation due to extra “hops” across the RTI to translate information between federates. The second approach involved implementing translation mechanisms internal to one of the participating federates. In the JMRM case, this alleviated the performance issues: however, this approach was more difficult to implement because it required knowledge of a federate’s internal implementation. In the case of JWARS, it also required knowledge of Smalltalk as a programming language.The second key issue faced by the JMRM team was the method used to synchronize time between time-managed and non-time-managed federates. For the current implementation of JMRM, the federation used synchronization points to manage simulation time while the aggregation/de-aggregation functions took place. The developers recommended using a 3rd party federate that could be generated and used to manage time, including pausing simulation time during the aggregation/de-aggregation process.Finally, the JMRM developers recommended that a tool must have the ability to address disparities in coordinate systems and handle terrain resolution. This is not a problem that they encountered during their initial development of JMRM. However, this is a problem they foresee when they integrate additional entity-level JSAF federates that utilize different coordinate systems.3.3 JTLS/JCATS FederationThe third study examined was the JTLS-JCATS federation. The JTLS-JCATS federation was developed to satisfy warfighter requirements for multi-level training. This federation development involved integrating JTLS, which simulated aggregate objects at the battalion and brigade levels through time-stepped Lanchester equations, with JCATS, where an event-based entity level simulation uses individual vehicles and combatants. Multi-resolution federation development for the JTLS-JCATS federation addressed three main goals: (1) handling differences in the level of detail of the synthetic environment in which aggregate theater-level or tactical level objects exist, (2) handling differences in the methods in which each federate handles time, and (3) addressing algorithm differences between the federates. The JTLS/JCATS federation allocated functionality among simulations as defined by the Concepts of Operation (CONOPS) for the federation. It should be noted that initial implementations of the JTLS/JCATS federation allocated functionality geographically between JTLS and JCATS regions. Objects entering the higher resolution federate, as defined by the CONOPS, have their control passed to JCATS. Objects leaving JCATS to the theater-level JTLS have their control passed to JTLS. Air objects are primarily JTLS-controlled with the exception of Close Air Support or Armed Reconnaissance missions. In addressing the interface between federates, aggregation and de-aggregation functions were key. For instance, in handling area munitions, JTLS calculates attrition based on indirect fire shots or bombs dropped over a period of time while JCATS treats each shot or bomb drop as an individual occurrence. Likewise, JTLS munitions fire that target a battalion or brigade had to be resolved or de-aggregated to target individual platforms/entities in the JCATS federate [BOW02][BOW03].3.3.1 Key Issues in JTLS/JCATSIn discussing JTLS/JCATS development issues with the development team, there were two outstanding issues that needed to be addressed: (1) management of time between the time-stepped and event-based simulations, and (2) generation of values during the de-aggregation process. In the JTLS/JCATS federation, both JTLS and JCATS are time regulating and time constrained federates, meaning neither federate will advance time until the other federate has also requested time advancement beyond the current time. Even though each federate used different time advancement mechanisms, time management was handled in a fairly straightforward manner through the use of existing High Level Architecture (HLA) time management services. One implementation of these services that was employed on the JTLS/JCATS effort was a Pacer Federate, developed by Rolands and Associates, which provided a graphical user interface (GUI) to manage time advancement as a function of real-time.The second major issue concerning the JTLS/JCATS federation was the aggregation and de-aggregation of information across the multi-resolution interface. The de-aggregation of information to the entity level from the aggregate level often requires information (attributes and parameters) that may not be present at the aggregate level. This information must be generated based on federation state or through knowledge of a federate’s operating conditions. Generating these values is a critical problem faced in multi-resolution federation development.MRMAideTM OverviewPreviously, we have attempted to address the integration of mixed resolution models at the component, entity and federate level through the use of our MRMAideTM tool. MRMAideTM supports model integration and interoperability by extending the life of models and simulations by promoting reusability and composability for use in other programs [TRE02][FAU03A][FAU03B]. This tool addresses data alignment issues by assisting the user with the application of techniques to resolve Mixed Resolution Modeling issues by suggesting ways of resolving differences in fidelity and resolution across diverse modeling paradigms. MRMAide™ provides this capability by semi-automating the multi-resolution simulation development and integration process through three phases of operation: (1) Pre-Processing, (2) MRM Technique Application, and (3) Validation and Verification. The phases of the MRMAideTM methodology are depicted in  REF _Ref103597194 \h  \* MERGEFORMAT Figure 2 and described in further detail in the following subsections.4.1 Pre-ProcessingThe first phase of the MRMAide™ process is the Pre-Processing phase. During this phase, information is retrieved from the standalone model, component, the federation’s Federation Object Model (FOM), or the federate’s Simulation Object Model (SOM). This Pre-Processing phase allows the analyst to define the interface for the multi-resolution simulation or federation by graphically analyzing or parsing the model interface code. Figure  SEQ Figure \* ARABIC 2: Original MRMAideTM MethodologyParsing model or federate code allows the analyst or developer to define and identify the model variables and functions for the source and target models and federates that are being mapped in the multi-resolution simulation/federation. MRMAideTM guides the user in identifying the key variables and functions for each interface through a process of code instrumentation, sensitivity analysis, and data clustering. This part of the Pre-Processing phase is used to identify unnecessary information or detail in the model. Many model parameters have very little bearing on the outcome of the simulation [MAC95][MCG00][MCG01]. Pre-Processing aids development by helping to identify and remove these parameters from consideration. Once the key parameters have been identified, data clustering algorithms coupled with sensitivity analysis mechanisms are used to aggregate behaviors based on these key parameters. Clustering algorithms supported in the Pre-Processing phase of MRMAideTM include Radial Basis Function Networks and Multi-Scalar clustering techniques [CAS00][CHA93].4.2 MRM Technique ApplicationThe second phase of the MRMAideTM process is the MRM Technique Application phase. This phase involves the Application of MRM techniques and the generation of mapped or translated code. During this phase, the analyst or user can graphically design the federation by linking the elements of the interface by applying user-defined transfer functions. These links, or associations, are used to generate code as part of the multi-resolution model or federate integration process. An example of this mapping process is shown in Figure 3.Figure  SEQ Figure \* ARABIC 3: MRMAide™ Mapping ViewMRMAide™ provides several built-in data abstractions and mapping algorithms to choose from that have been used to implement mixed-resolution models, simulations, and federations to support abstraction of components for the Joint Modeling and Simulation System (JMASS)-JTEST simulations [FAU03A] and multi-level model integration of Joint Simulation System (JSIMS) components and federates [FAU03B].4.3 Validation and VerificationThe third phase of the MRMAideTM process is the Validation and Verification (V&V) phase. The V&V process designed for MRMAideTM addresses the model development process as it uniquely applies to this tool. Since the input for MRMAideTM is assumed to be a simulation model that has already been developed and certified to be creditable, existing V&V processes were extrapolated to develop the MRMAideTM V&V process, depicted in  REF _Ref102533964 \h  \* MERGEFORMAT Figure 4 [VAL03][MCG04]. This process ensures that the multi-level or abstracted model behaves in a manner that is consistent with the operation of the original validated representation.Figure  SEQ Figure \* ARABIC 4: V&V ProcessExtending MRMAideTM to Support FEDEPOur goal for this effort was to enhance the design of MRMAideTM to support a multi-resolution FEDEP process. In order to support the development of multi-resolution federations, the tool needed to be modified to dynamically parse and display FOM and SOM data in a manner that could be easily understood and analyzed. In addition to addressing SOM/FOM visualization and data alignment issues, MRMAide™ also had to provide mechanisms to address HLA specific problems. This included enabling the tool to address both Ownership and Time Management services in support of multi-resolution federation development. To address these issues, the MRMAideTM methodology was expanded to provide new enhancements designed to support multi-resolution federation development. Table 1 shows the mapping of the MRMAide™ Methodology and Functionality to the FEDEP [LUT]. Mechanisms were implemented to graphically support the steps of Define Federation Objectives, Develop Federation Conceptual Model, and Design Federation, and performed research to address the Develop Federation and Integrate and Test Federation steps.Table  SEQ Table \* ARABIC 1: MRMAide™ Methodology versus FEDEPMRMAide™ MethodologyMRMAide™ FunctionalityFEDEP Process ModelPre-ProcessingUser Specified Graphical Entry onto MRMAide™’s Federation Development Canvas PanesDefine Federation ObjectivesParse and Visualize SOM/FOM data from OMDT Document DataDevelop Federation Conceptual ModelAnalyze Federate using MRMAide™’s Sensitivity AnalysesDevelop Conceptual DesignMRM Techniques ApplicationCreate Links Between FederatesDesign FederationDefine Mapping Translations using MRMAide™’s GUIDevelop FederationGenerate Code based on Defined MappingsIntegrate and Test FederationCompile, Test, and Execute FederationValidation and VerificationExecute Federate or FederationExecute Federation and Prepare ResultsValidate Model using Validated ScenariosAnalyze Data and Evaluate Results5.1 GUI Design for Conceptual Federation Development and Federation DesignTo support the early stages of FEDEP, our effort designed a GUI that allows users to quickly analyze SOM/FOM data to facilitate the mapping of a multi-resolution federation. This resulted in the design of four different graphical views, or windows, in MRMAideTM. These views are the Object Model Development Tool (OMDT) Data List, Federation Mapping Canvas, Federation Mapping Table, and the Translation Mapping Canvas. The implementation of these views in MRMAideTM is shown in  REF _Ref102795789 \h  \* MERGEFORMAT Figure 5 and the description of these views is discussed in the following subsections. Figure  SEQ Figure \* ARABIC 5: MRMAideTM Federation Development GUI5.1.1 Initializing MRMAideTM by Reading OMDT Information into the Windowing SystemSOM/FOM simulation data and C4I system data are read-into MRMAideTM through the use of formatted .OMD files. This data format was chosen as input for existing SOMs and/or FOMs is the OMDT Document (*.OMD). To support this requirement, an OMDT Document Reader was developed. The OMDT Document is the most detailed version of the standard HLA file formats used to define SOM/FOM data. This file format is the primary output of the OMDT Tool and other HLA development tools. This reader dynamically parses all OMDT Document (*.OMD) data and uses the data provided to populate the OMDT Data List, and the Global Federation Mapping Canvas View for both Object and Interactions, and the Translation Mapping Canvas.In addition to parsing an OMDT Document, the output of this tool also generates an OMDT Document from the SOM/FOM mapping. This file is generated in the standard format and can be used as input into other HLA development tools including DMSO’s OMDT. This generated file can then be used to generate the Federation Execution Data (*.fed) and the HLA OMT Data Interchange Format (*.omt) for input into the HLA Run-Time Infrastructure (RTI).5.1.2 Displaying the OMDT Data List and List ViewSOM/FOM data supports multiple levels of composability and is most conveniently displayed for viewing in hierarchical fashion. To address this requirement, the OMDT data is hierarchically displayed in the List View using a Windows Explorer-like format. This view breaks down OMDT data hierarchically to preserve Object and Interaction inheritance information. Data displayed in this view includes Objects, Interactions, Complex Data Types, and Enumerations. Each of these types contains the full detail of information that is contained in the OMDT Document. An example of the List View is shown in  REF _Ref102795789 \h  \* MERGEFORMAT Figure 5. One instance of this view is created for the Source SOM/FOM and the Target SOM/FOM.The List View supports the addition of icons on each list element to designate the differences between Objects, Interactions, Complex Data Types, Enumerations, Attributes, and Parameters. To support the analysis of the SOM/FOM data, common icons were chosen to represent the same type of list items within the list view. In other words, the icon that represents an Interaction is different for the Parameter icon and the icon that represents an Object is different from an Attribute icon. This helps the user to quickly identify which elements are derived elements and which elements are member elements.5.1.3 Federation Mapping Canvas ViewThe Federation Mapping Canvas View displays data in a hierarchical manner similar to the List View. However, the Federation Mapping Canvas View is more closely tied to program language constructs in order to more visually understand and represent data alignment issues. To represent these constructs in the Federation Mapping Canvas View, the Unified Modeling Language (UML) syntax was chosen. An example of the Object Mapping version of this view is shown in  REF _Ref102795789 \h  \* MERGEFORMAT Figure 5.This Federation Mapping Canvas View allows the users to map and associate translations between the Source and Target SOM/FOM. Each association is represented as a line from the Source to the Target. There two types of Federation Mapping Canvas view which are (1) the global view and (2) the custom view. The global view contains all the Objects and Interactions for the associated mapping. This view can become cluttered when dealing with large FOM/SOM mappings. To address this issue, the user also has the ability to create a custom view of the Federation Mapping Canvas. This view allows the user to add individual Objects or Interactions to view or create mappings without displaying all the mappings associated with every Interaction or Object contained in the multi-resolution federation.The Federation Mapping Canvas View contains a zooming capability to allow the user to focus on individual areas of the mapping. In addition to zooming, the Phase II effort implementation of this view will allow users to reorganize individual Object and Interaction instance to better facilitate their mappings.5.1.3.1 Federation Mapping Canvas View for ACTF/HBR FOM ExampleAn example of a federate mapping is shown in  REF _Ref102795696 \h  \* MERGEFORMAT Figure 6. This example shows the mapping of the Human Behavior Representation (HBR) FOM and the ACTF. These FOMs were chosen to implement the Proof-of-Concept MRMAideTM Translation GUI in the Phase I effort. In this view, the Source FOM is on the left hand side in the yellow UML diagrams and the Target FOM is on the right hand side in the blue UML diagrams. A connection line shows each mapping between the Source and Target FOMs. In some cases, multiple lines may represent a single mapping. The HBR FOM is at a lower level of resolution than the ACTF FOM, so the Aircraft Object in the HBR FOM must be translated to the FIXEDWING, HELICOPTER, and TEMP_HELO Objects in the ACTF. For this multi-resolution federation mapping, only one translation corresponds to each line. A full listing of mappings between the HBR and ACTF FOM is shown in Table 2.Table  SEQ Table \* ARABIC 2: HBR to ACTF MappingHBR Object (Source)ACTF Object (Target)AircraftFIXEDWINGAircraftHELICOPTERAircraftTEMP_HELOSubmersible VesselSUBSURFACESurface VesselBOATAmphibiousVechicleLANDING_CRAFTGroundVehicleCOMBAT5.1.4 Federation Mapping Table ViewThe Federation Mapping Table View keeps a list of all the mappings. These mappings are listed by the name provided by the user during the creation of the mapping. Each mapping can be viewed by double clicking on the list element in the Federation Mapping Table View. This will open a new window containing the instance of the Translation Mapping Canvas View corresponding to the element in the list.5.1.5 Translation Mapping Canvas ViewsThe associations made in the Federation Mapping Canvas View are used as input to the Translation Mapping Canvas View. This view provides the user with the ability to define the details of the individual translations associated with each mapping. In this view, the user defines the individual translations between Interaction Parameters and/or Object Attributes of the Source and Target SOM/FOM. Similar to the Federation Mapping Canvas View, the user has the ability to delete, add, and move elements on the canvas to help facilitate the translation mapping.Figure  SEQ Figure \* ARABIC 6: FOM Mapping of HBR and ACTF in MRMAideTMThese translations are defined by creating links between the Source and Target Parameters and Attributes. During the creation of these links, the user can configure the links to specify the MRM algorithms to apply. In many cases, these created translations may have intermediate steps and/or require data from external sources (i.e. database). To support this functionality, this view allows the creation of translators and translator objects. Translators have the same capabilities as the translation links, so the user can specify any combination of MRM techniques, custom code, or library translations. Translator objects store the data through each intermediate step of the translation. These objects keep their values after the translation is completed to allow the translation to be executed when only one value is supplied in an update.A notional view of the Translation Mapping Canvas is shown in  REF _Ref103597146 \h  \* MERGEFORMAT Figure 7. In this figure, the source object is represented by the yellow box, the target object is represented by the blue box, and the grey boxes and circles represent the intermediate steps of the translation. The grey circles represent translation objects and the grey boxes represent intermediate translation data points. This example presents, a mapping of a two dimensional object into a three dimensional object with terrain. The first step is to translate the two dimensional object into a three dimensional coordinate system. This is accomplished by the 2DTransObj and the 2Dto3DTranCon. The 2DTransObj mirrors the information in the source object or Tank. This object is responsible for holding the values of the current tank object until an update occurs, so if an attribute update occurs for only one of the objects attributes the translation can still be executed. The values held in the 2DTransObj are sent to the 2Dto3DTranCon. The 2Dto3DTranCon is responsible for converting the two dimensional values into three-dimensional values (x, y, and z) and passing them to the 3DTransObj. The 3DTransObj then passes the values to the 3DtoLatLonCon. In the 3DtoLatLonCon, the coordinates are converted to latitude, longitude, and latitude and passed to the LatLonTranObj for storage. Finally, the information is updated on the target object Vehicle and the translation is complete.Figure  SEQ Figure \* ARABIC 7: Notional Translation Mapping CanvasFuture Support for Federation Development, Integration and TestOur work to date has addressed the Conceptual Design and Federation Design steps of the FEDEP process. Our future work involves providing support for Federation Development, Integration and Test in support of multi-resolution federation design. Our research in support of a FEDEP implementation in MRMAideTM is described below.6.1 Addressing Federation Development Issues through the Translation Canvas ViewOur efforts have researched techniques to address how MRMAideTM will support the Federation Development step of the FEDEP. These techniques will be implemented in the Translation Mapping View as translation mechanisms. Our research identified candidate translations mechanisms for implementing Federation Development as those currently utilized by the original implementation of MRMAideTM (see Section 2), along with translation mechanisms in support of disparate geographical coordinate systems.MRMAideTM currently provides several built-in data abstractions and mapping algorithms to choose from that have been used to implement mixed-resolution models, simulations, and federations. These mechanisms include Substitution, Statistical Distribution, Equation, Aggregation, and Custom Techniques. These techniques will be linked to the Translation Mapping Canvas View to provide MRMAideTM-FEDEP with the same capability.In addition, we will extend available translation mechanisms by addressing geographical coordinate system transformations using our Motion Library. This Motion Library provides a comprehensive suite of motion algorithms, coordinate system transformations, and utility algorithms. These motion algorithms include: great circle, rhumbline, loiter, linear, extrapolated, polynomial, and constant position. Coordinate system transformations include: Earth Central Inertial (ECI), Earth Central Rotating (ECR), Round Earth, and World Geological Survey 84 (WGS84). Utility algorithms include: range finding between two moving objects to determine when objects enter and exit a specified range, and intercept algorithms between moving objects.6.2 Translation Code Generation ModuleTo address the Federation Integration step of the FEDEP process, our efforts will focus on generating code to implement the translation mechanisms. Generation of the OMDT Document in conjunction with Translation Code Generation Module provide the functionality to automate the mapping of Source and Target SOM/FOM. This module will generate C++ code that will automate the mappings between the Source and Target SOM/FOM and satisfy the Federation Integration step. Three implementation approaches have been investigated to address the translation process. These approaches include a (1) Standalone Translation Federate, a (2) Middleware Solution, and (3) Existing Federate Integration. Each of these approaches has strengths and weaknesses to their implementation. An overview of each approach, along with a detailed discussion of the strengths and weaknesses followed by a conclusion section will be presented in the following subsections.6.2.1 Existing Federate IntegrationThe Existing Federate Integration approach requires implementing the translation code for the federation in either the Source or Target Federate. This approach is the most commonly used by developers of Multi-Resolution Federations. The is often the case because this method does not require the creation of a new federate, so there is less overhead associated with its implementation when compared to a standalone federate solution. Plus, the Multi-Resolution Federation developers are usually knowledgeable with the internals of at least one of federate, so it requires a minimal effort to translate information on sends and receives. While this is ideal for developers that are hand generating the translation code, the implementation is the most complicated for providing an automated capability. Any code generated would need to be created in the native programming language (i.e. C, C++, or Smalltalk) and directly inserted into the code, so code-parsing modules would need to be developed for each language that the tool would support. In addition, the model that contains the federation mappings code will need to be recompiled after each update to the federation mappings. This potentially could be a problem with validated models that may need to go back through the Validation and Verification process after each build.6.2.2 Standalone Translation FederateThe Standalone Translation Federate approach requires implementing the translation code for the federation in a separate federate as shown in  REF _Ref102813931 \h  \* MERGEFORMAT Figure 8. This federate would be completely generated by the tool and directly connected into the RTI. This federate would be required to subscribe to all Interactions and Objects that contain mappings in the federation. Because the federate is not directly associated with either federate, recompilation or re-validation of the model is not required. This federate would be directly responsible for accepting, translating, and updating/resending translated data. In some cases, acquiring ownership management of the Objects may be necessary to update the values through the RTI. Because translations are implemented in a single federate for the federation, each translation is done just once, and recompilation or revalidation of the existing federates is not required.Figure  SEQ Figure \* ARABIC 8: MRM Translation FederateThis implementation is a better alternative than the Standalone Translation Federate method, but it still has some disadvantages. Because all translations are implemented in a single federate, this could potentially become a performance bottleneck. Another mapping problem is when the source and target federate have the same names for Interactions or Objects that are at different levels of resolution. Using the Standalone Translation Federate, the names of the Interaction or Object would have to change in one federate and the code updated to support mapping of the Interaction or Object.6.2.3 Middleware SolutionThe Middleware Solution approach to the code generation module would be implemented by providing wrappers for both the Run Time Infrastructure (RTI) and Federate Ambassadors. By wrapping these classes, the interface to the RTI is preserved ensuring that the solution will work with any RTI. These wrappers will provide a direct interface to capturing run-time data without significantly impacting run time performance. Translations could be implemented directly on the sending or receiving federate depending on the preference of the user, so acquiring ownership management of objects is not required. Because the wrapper classes generated sit between the federate and RTI, only minimal modification of the federate code is required.One disadvantage to this solution is that existing federate code would need to be modified to update the include files for the RTI and Federate Ambassador classes, so each federate updated with the translation would need to be recompiled. Another potential problem with this implementation is that the wrapper generated is specific for each federate, meaning redundant translation may occur.6.2.4 Code Generation ConclusionsBased upon the information presented in the above sections, the only solutions recommended for implementation is the Standalone Translation Federate and the Middleware Solution. Both approaches have strengths that could be more beneficial than the weaknesses of the other approaches when applied to specific Multi-Resolution Federations. Using this tool, the user will have the ability to choose between the Standalone Federate or Middleware Solution based on federation requirements.6.3 Base Object Model (BOM) SupportIn addition to generating translation code, one of our objectives is to investigate the use of Base Object Model (BOM) constructs in supporting multi-resolution federation development. The BOM is a HLA extension standard that supports the creation of sequence activity diagrams associated with patterns of interplay that represent a common purpose, capability, or objective [GUS04]. This standard helps to further define how the HLA Objects and Interactions interact with each other to promote model reuse. We believe that the MRMAideTM Multi-Resolution Federation design tool can incorporate BOM functionality to graphically aid in the Conceptual Design Process for multi-resolution federations. Use of BOM concepts will allow specific “building-blocks” of composable interaction sequences to occur at the entity level. The use of BOM concepts will allow us to enhance the aggregation/de-aggregation process between aggregate and entity levels.Summary This paper has discussed MRMAideTM’s support for the FEDEP process and its extension to support Multi-Resolution Federation Development, Integration, and Testing. This paper has also discussed enhancements in support of different Geographical Coordinate Systems transformations and code generation in support of federate synchronization mechanisms. The end goal of our effort is to ensure that MRMAide will support multi-resolution FEDEP and can be used in designing a multi-resolution federation, such as the Army Constructive Training Federation (ACTF).AcknowledgementsThis work is being supported by RDECOM through a Phase I SBIR contract number N61339-05-C-0034. Special recognition is due to Mr. Mark McAuliffe and Mr. Michael Wright for their assistance in this effort. Previous versions of the MRMAideTM tool were implemented for the Air Force Research Laboratory under contract number F30602-01-C-0058. Special recognition is given to Ms. Dawn Trevisani and Mr. Alex Sisti for their support on those efforts.References[BOW02] Bowers, A. and D. Prochnow. “JTLS-JCATS: Design of a Multi-Resolution Federation for Multi-Level Training.” Simulation Interoperability Workshop, Paper 02F-SIW-034. Fall, 2002.[BOW03] Bowers, A. and D. Prochnow. “Multi-Resolution Modeling in the JTLS-JCATS Federation.” Simulation Interoperability Workshop, Paper 03F-SIW-067, Fall 2003.[CAS00] C.G. Cassandras, C.G. Panayiotou, G. Diehl, W-B. Gong, Z. Liu, and C. Zou, “Clustering methods for multi-resolution simulation modeling,” Enabling Technology for Simulation Science IV, Proceedings of SPIE Vol. 4026, pp. 37-48, 2000.[CHA93] S.V. Chakravarthy and J. Ghosh, “Scale-based clustering using the radial basis function network”, IEEE International Conference on Neural Networks, 1993.[DAV00] P.K. Davis, J.H. Bigelow, and J. McEver, “Exploratory analysis and a case history of multiresolution, multiperspective modeling”, Enabling Technology for Simulation Science IV, Proceedings of SPIE Vol. 4026, 2000. [FAU03A] Faulds, Anthony, McGraw, Robert, and Dawn Trevisani. “Using MRMAideTM for Abstraction” SPIE Enabling Technologies for Simulation Science VII” Orlando, FL. 2003.[FAU03B] Faulds, Anthony and McGraw, Robert. “Using MRMAideTM to wrap Mixed Resolution Models”. SPIE Enabling Technologies for Simulation Science VII” Orlando, FL. 2003.[GUS04] Gustavson, Paul, et al. “Applying Design Patterns for Enabling Simulation Interoperability.” Spring 2004, Simulation Interoperability Workshop. Alexandria, VA.[LUT] Robert Lutz. “FEDEP V1.1” Spring 1998 Simulation Interoperability Workshop. Paper: 98S-SIW-236.[MAC95] R.A. MacDonald and R.M. McGraw, “Assessing candidates for model abstraction”, Enabling Technology for Simulation Science IV, Proceedings of SPIE Vol. 4026, pp. 180–191, 2000. [MCG00] McGraw, R. and R. MacDonald, “Abstract Modeling for Engineering and Engagement Level Simulations” Wintersim, Orlando, FL, 2000.[MCG04] McGraw, R. and D. Trevisani. “Using MRMAideTM for Simulation Integration and Interoperabiltiy” Spring 2004 SIW Conference, Washington, DC. Paper 04S-SIW-060.[SIS98] Sisti, A. & Farr, S. Model Abstraction Techniques: An Intuitive Overview. Proceedings of SCSC, 1998.[TRE00] D. Trevisani and A. Sisti, “The Air Force Hierarchy of Models: A Look Inside the Great Pyramid”, Enabling Technology for Simulation Science IV, Proceedings of SPIE Vol. 4026, pp. 150-159, 2000.[TRE02] Allyn Treshansky and Robert McGraw MRMAide™: A Mixed Resolution Modeling Aide. SPIE Enabling Technologies for Simulation Science VI, Orlando, FL, 2002[VAL03] Valinski, M., McGraw, R., “MRMAideTM Model Validation Process”, SPIE Enabling Technologies for Simulation Science VII, Orlando, FL 2003.