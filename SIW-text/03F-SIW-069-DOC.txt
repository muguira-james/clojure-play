The C4I Team Training System (CTTS)Dennis McGroderDynamic Animation SystemsFairfax, VA 22033(202) 404-3813 HYPERLINK "mailto:dmcgroder@d-a-s.com" dmcgroder@d-a-s.comGene Layman, Ph.D.Naval Research LaboratoryWashington, DC 20375-5000(202) 767-6873 HYPERLINK "mailto:layman@nrl.navy.mil" layman@nrl.navy.milKeywords:C4I, Training, CTTS, C4ITTS, Training Host Application, Global Command and Control System-Maritime (GCCS-M), Common Operating Environment (COE), Modeling and Simulation (M&S), Software Development Kit (SDK)ABSTRACT:  CTTS is a scenario-based training application that provides Command, Control, Communication, Computer and Intelligence (C4I) team training aboard Navy ships and at ashore training facilities.  The CTTS is a Training Host Application, developed at the Naval Research Laboratory, which provides many basic training software functions.  Specific training objectives are achieved through the use of plug-in simulations that perform specialized tasks.  The initial delivery of CTTS hosts a single embedded simulation, the Cruise Missile Trainer (CMT) Simulation, a plug-in that was developed by the Naval Undersea Warfare Center-Division Newport (NUWC).  Development is underway at the Space and Naval Warfare Center (SPAWAR) for additional CTTS training plug-ins for Cryptological On-Line Training (COLT) and Predator Down-link Training.The CTTS will be in the upgrade release (4.x) of the Navy’s Global Command and Control System-Maritime (GCCS-M) scheduled for summer ’03 and will be used by trainers to develop scenario-based training to be executed on the GCCS-M local area network (LAN).  CTTS is fully embedded within shipboard GCCS-M systems and provides training while underway without interfering with normal C4I operations. The core CTTS contains a set of sharable Modeling and Simulation (M&S) software components to link simulated data to internal C4I functions and data bases, generate training scenarios, manage variable time bases, display training data, and many other services required of training systems.  The CTTS was developed in the standard software development environment for DOD systems, the Common Operating Environment (COE), and is compatible with the GCCS family of systems (GCCS-J, GCCS-M, AGCCS, etc).  It is a Java application that runs on Windows 2000/NT and Sun Solaris platforms with the COE installed.  Future enhancements are also discussed, such as a platform database feature to allow various sources for scenario entities, and a track visibility control function to handle multiple trainee views of the scenario.This paper describes the C4I Team Training System concept of operations, design architecture and software implementation.  The Navy’s Space and Naval Warfare System Command (SPAWAR) provided the requirements and sponsors the development and distribution of the CTTS and some of the training plug-in simulations.1. OverviewThe C4I Team Training System is a training application for C4I systems that allows a training coordinator to build dynamic training scenarios and run them in a team training environment, aboard Navy ships and at ashore training facilities. The CTTS provides advanced scenario generation and editing capabilities, plus the capability to integrate multiple embedded simulations by loading them as software plug-ins. The CTTS also provides a Simulated Common Operational Picture (SIM COP) on the Global Command and Control System-Maritime (GCCS-M) local area network for training participants. The CTTS was developed at the Naval Research Laboratory, based on the concept of a Training Host Application that builds on initial work done at NRL for the Navy’s Embedded Simulation Infrastructure (ESI) program. [1], [2], [3].A Training Host Application is a Mission Application shell which is tailored to the specific domain of training and serves as a host to multiple embedded simulations applicable to training.  It contains a set of “core” components and functions that would be necessary for any basic C4I training capability.  Specific features and simulation components, which are known as plug-ins, can be added to build a comprehensive training application for the specific training desired, in this case, the C4I Team Training System.  These Training Host Application components are derived from the standard Modeling and Simulation (M&S) Software Development Kit (SDK) components, developed as part of the ESI program for Common Operating Environment (COE) based systems, in order to manage simulated data, handle variable time bases, generate training scenarios, and many other services required of simulations for training.  The specific components included in a Training Host Application and provided in CTTS are the Scenario Editor, Common Operational Picture (COP) Capture, the Virtual Track Manager, Scenario Preview, Dynamic Run, Simulation COP Display, and Archive/Replay.  Additional domain specific components can then be added to CTTS to tailor its use for team training.The software design of the CTTS follows the COE guidelines and principles, yet involves some unique and innovative design concepts for integrating various components of the CTTS.  The idea of a simulation plug-in is introduced, which is a software module designed to provide some simulation or algorithmic model for how scenario tracks behave or are reported.  This plug-in module is developed separately from the core CTTS components, using the Application Programmer Interfaces (APIs) of the M&S SDK, and then loaded at runtime into CTTS to perform some additional simulation function, such as operating on or adding data elements to the scenario’s tracks, running a complex physical model, generating alerts or messages, or communicating with another external system or server.  The plug-in must connect to the virtual track manager (VTM) within the CTTS to handle the scenario “events”, and whenever these events occur, generate some output from the simulation.  The plug-in provides the algorithms and models for applying to the scenario and related data, while the VTM provides the connection to the data.  Thus any changes to the scenario data, during editing or runtime, is available to the plug-in.  This paper will mainly address the Cruise Missile Trainer (CMT) Simulation Server plug-in which was developed for the first release of CTTS.  Other simulation plug-ins under development include a plug-in to connect the CTTS to the Cryptological On-Line Trainer (COLT), an interface with a Predator Unmanned Aerial Vehicle Down-Link Trainer, and a plug-in to use the outputs of an Air Tasking Order Viewer to drive a CTTS scenario.2. Concept of OperationsThe CTTS will provide Navy ships and schoolhouses with a robust capability to exercise their C4I systems via a comprehensive scenario modeling engine. The outputs will drive tactical and operational level training on IT-21 block 1, on their own platforms, and at a Battle Group (BG) level over the Wide Area Network (WAN).The C4I Team Training System will be used by fleet trainers aboard Navy ships and ashore, by training coordinators in classroom instruction, and by training personnel in other naval C4I and simulation environments.  Examples of some other simulation environments are scheduled fleet exercises, fleet battle experiments, distributed simulations, and war gaming environments such as the Naval War College (NWC).3. Functional RequirementsThe functional requirements for CTTS were derived from many sources including a General Functional Description from SPAWAR, the GCCS Embedded Training Segment, GCCS-M Reconstruction Segment, the C4I Embedded Simulation Infrastructure Program, the Cruise Missile Trainer and its Reference Manual, and discussions with SPAWAR and training organizations. General requirements for the CTTS were initially provided by SPAWAR PMW-157 in a General Functional Description document. In this document, four major areas were addressed:  the Scenario Generator, the Output Generator, Record and Playback Features, and Implementation Details.  A summary of this general requirements document is given here.The Scenario Generator function shall allow the development of a scenario with various red, white and blue units.  It shall be easy to use (i.e., create Position and Intended Movement (PIM) tracks using a map-based function), and it shall allow the automatic and/or manual generation of contact reporting information. The scenarios shall be stored in a definable data directory which permits collection and sharing among various commands.  The CTTS database shall model all common US sensors and automatically generate contact reports when the sensor is in range of the targets, allowing user modification of detection ranges from defined defaults. The sensor and track parameters, characteristics and performance databases shall be based on existing databases.For the Output Generator, the system shall be capable of producing these track types for the training scenarios: Platform, Electronic Intelligence (ELINT), Link, and Signal Intelligence (SI).  All training exercises shall be properly designated as containing simulated tracks and should not contaminate the real world COP, Military Intelligence Database (MIDB), or other databases.  During training execution, the message times shall reflect the tactical system time, and the system shall be capable of the playback functions: play, stop, pause, rewind, fast forward, and dump (archive). The trainer shall be able to modify the scenario during execution, including options to activate and deactivate tracks while the simulation is running.  For Record and Playback features, the operator shall be able to record data from external sources, as well as from the internal Tactical Management System (TMS).In the area of Implementation Details, some specific requirements were declared for the major components of CTTS.  The system shall be delivered and fielded as a GCCS-M mission application consisting of one or more segments. The Scenario Generator software shall run in a standard COE PC client. The Output Generator software shall run in a standard COE PC client or the COE TMS server. The recorder and playback shall run in a standard COE PC client, and record data in the h/data/global directory.  The 4.x version of the CTTS software shall be COE level 7 compliant.  Based on evaluations of other systems, it was determined that the CTTS shall be as easy to use as the AIMPOINT and CMTpc training systems.  As an overall requirement for the CCTS, the system shall provide a help function, including a software user manual and context sensitive help for major features.These initial requirements were taken into consideration as a more detailed requirements document was formulated for reviewing, planning, and reference purposes, before any further design or software development was done.   Some specific requirements for the types of tracks and track editing features were worked out for the VTM, COP Capture, and Scenario Editor components, and these were based a lot on lessons learned from the GCCS Embedded Training tools, including its scenario generation tool.  Also, standard file management features were found to be necessary and were defined, such as new scenario, open scenario, save scenario, etc.  But some requirements were based on more modern and advanced features and data types now available in the COE 4.x environment, and it was decided to take advantage of them.  For example, click-and-drag features, or rubber-banding, for creating and modifying map overlays and graphical objects in the COE, now commonplace in drawing and presentation software such as MS PowerPoint, so it was logical to further refine the requirement that “the scenario generator function shall be easy to use (i.e., position platforms and create PIMs using a map-based function).” Additionally, other requirements were further refined later, during the actual development process, especially for the interfacing of the Dynamic Run component with the CMT Simulation plug-in, the first simulation plug-in to be developed for the initial release of CTTS.  For these components, much of the development was based on a rewrite of parts of the original CMTpc system, developed by NUWC Newport, and requirements changed as design and development of the plug-in progressed.4. Software Functional DesignA block diagram of the CTTS Functional Design is shown in Figure 1.  The components in blue (with an asterisk * in the list below) are Modeling and Simulation (M&S) SDK components that are part of the Training Host Application core  (and thus, CTTS) and are reusable for other simulation based applications under development. The components in gold (without *) are unique to the CTTS application.  These functional components of CTTS, as designed and implemented for the initial delivery, which includes the CMT Simulation Server plug-in, are discussed here.  These components correspond to the component boxes in the block diagram of Figure 1:Scenario Manager Scenario Editor*COP Capture*Virtual Track Manager*Scenario Preview*CMT Database Setup ClientDynamic Run*CMT Runtime Client CMT Simulation Server Sensor Detection AnalysisContact Report GeneratorDatabase ManagementSimulation COP CMT Output Client SIM COP Display*Archive/ReplayArchive*, Replay*, Debrief Author*HelpUser Manual, Context-Sensitive Help4.1 Scenario ManagerThe Scenario Manager is comprised of the M&S sharable software components related to scenario generation and management, plus a specific CMT Simulation component.  These components are the Scenario Editor, the COP Capture function, the Virtual Track Manager, Scenario Preview, and the CMT Database Setup Client.   SHAPE  \* MERGEFORMAT Figure 1 – CTTS Functional Design with the CMT Simulation ServerThe Scenario Editor component is a robust scenario generation and editing capability.  It is used in the CTTS to create and edit the time based scenarios stored in the VTM, and saved in Extensible Markup Language (XML) or Over-The-Horizon Targeting Gold (OTG) formatted files.  The Scenario Editor has an intuitive user interface and contains features that allow a user to rapidly create and modify scenario track and waypoint objects.  The Scenario Editor acts as the core functionality of the CTTS, around which other features and plug-ins are built.COP Capture is a function used to extract the real-time C4I common operational picture and provide it to the CTTS as a starting point for a scenario to be built, or to initiate a course of action or plan. Several filters are available to limit track types, time period and geographical areas.The Virtual Track Manager (VTM) component is the low-level software for storing and manipulating scenarios made up of simulated forces. The VTM stores the time based scenarios in memory as tracks, waypoints, and events. The VTM contains functions (Java methods) for creating and manipulating the tracks. Unlike the other services, the VTM has no graphical user interface but interacts with other M&S components such as the Scenario Editor, COP Capture, Scenario Preview and Dynamic Run.  An application accesses the VTM through application programmer interfaces (APIs), which are public Java classes and methods.The Scenario Preview capability is used to run and preview a scenario stored in the VTM during its development. It is used in conjunction with the Scenario Editor and can display all waypoints and tracks in the scenario in the form of PIM tracks. The scenario may be automatically time stepped or viewed in time slices by adjusting a time slider bar. The scenario is displayed on the GCCS-M default system map but not inserted into the TMS, therefore the GCCS-M system functions cannot operate on the scenario during preview (see Figure 2).The CMT Database Setup Client is the part of the CMT Simulation that handles the sensor and emitter database setup, which defines emitting and detection parameters for the tracks in the scenario.   Organic sensors can be added for individual tracks, and non-organic or remote sensors can be defined for the entire scenario.  Emission Control (EMCON) settings can be made for tracks in the scenario, controlling the intervals at which emitters are on and off, during the scenario runtime.  All settings are stored in the CMT Database, a Microsoft Access database that is accessible by the CMT Server and the CTTS.4.2 Dynamic RunThe Dynamic Run function processes the VTM scenario during CTTS runtime. Several options are available that effect how the dynamic scenario is provided. The output can be inserted into the GCCS-M TMS or provided to the simulation to process, depending on the training requirements. For example the stored scenario could be the “ground truth” input which gets converted to a “perceived picture” by the simulation, which is the case for the CMT Simulation Server plug-in in CTTS.  The Dynamic Run function generates the Figure 2 – CTTS Scenario PreviewSimulation COP (SIM COP), which provides CTTS with the means to display simulated data in the common operational picture map display so that it protects the real world C4I data but allows all COE and GCCS-M software segments to operate on the simulated data in the same manner as if it were real.The CMT Runtime Client is the part of the Dynamic Run component that is specific for the CMT Simulation, and it handles the interface between the VTM scenario in memory and the CMT Simulation Server’s sensor detection analysis functions.4.3 CMT Simulation ServerThe first release of the CTTS contains an embedded plug-in, the Cruise Missile Trainer (CMT) Simulation Server plug-in, which is pre-loaded at runtime.  The CMT Simulation Server was adapted from the Cruise Missile Trainer – Personal Computer (CMTpc) training system. The CMTpc was initially designed to meet a list of fleet requirements identified during Training Aid Consolidation meetings conducted in 1995. Additional requirements were assumed from CMT Simulation Server's predecessor, the Cruise Missile Training Aid which provided an OTH scenario generation module and reconstruction functions for TLAM and submarine encapsulated HARPOON.  Although Windows PC based, the CMTpc is not compatible with, nor does it interface with, the COE 4.x or GCCS-M 4.x environments on the PC platform. Much of the scenario generation and playback capabilities, map display features, and graphical user interface (GUI) options in the CMTpc are now provided for with the COE-based M&S components along with the core COE services.  So SPAWAR tasked the CTTS developers with the job of converting the unique components of CMTpc that were not part of the GUI and not scenario or map related, essentially the sensor/emitter based simulation engine, into a CMT server.  This CMT Simulation Server should interface with the scenarios in the CTTS, and thus the common operational picture of GCCS-M. The basic functionality of the simulation engine of the CMTpc is preserved in the CMT Server for CTTS.  The original CMTpc provided a solution to support cruise missile scenario generation and reconstruction for surface ships and submarines. It supplied elements to produce a cruise missile exercise: contact definition, sensor and emitter definition with detection parameters, track entry, real-time exercise execution, tasking messages, and missile missions and engagement reconstruction.  CMTpc also contained report generation and exercise playback features to support the presentation of results.  A CMTpc exercise was defined as a collection of contacts, sensors (organic and non-organic), emitters, and engagement plans, all in one file. As contact parameters are defined, as well as the sensors that will detect them, essentially a scenario is defined, which can be run in real-time or stored for scripted playback.  Since the scenario contacts and the PIM tracks are defined via the Scenario Editor component of CTTS, the only scenario setup features needed to be converted from the CMTpc were sensor and emitter definition and related database setup and editing functions.  These functions that are performed prior to scenario runtime make up the Database Management component of the CMT Simulation Server.The Sensor Detection Analysis and Report Generator components are the main runtime components of the CMT Simulation server.  The significant effort in the CMTpc conversion to the CMT server involved the sensor analysis and report generation algorithms in the original simulation engine, which creates the perceived picture for trainees on their workstations.  This perceived picture for CTTS is derived from the VTM scenario provided by the Dynamic Run component to the CMT Simulation Server.  Scenario tracks are then modified to simulate sensor inaccuracies and deviations, according to database setup parameters, and they are made visible or are hidden based on when they are actually detected.  Then, the reports for the perceived scenario finally make it to the GCCS-M LAN via the TMS as controlled by the CMT Output Client component of the Simulation COP.Further information on the performance of the original CMTpc system and its detailed databases for contacts and emitters can be found in the original CMTpc user’s guide documentation [6].4.4 Simulation COPThe Simulation COP (SIM COP) provides the CTTS with the means to display simulated track data in the Common Operational Picture map display format in a manner that protects the real world GCCS-M tracks but allows all GCCS-M segments to operate on the simulated data as if it were real.  The SIM COP is shown Figure 3, with the CTTS Dynamic Run window.The CMT Output Client handles the translation of track updates from the CMT Server’s Report Generator into TMS formatted track reports that will be sent to the Simulation COP Display, and thus distributed on the GCCS-M LAN.  At time intervals controlled by the CMT Server, based on sensor detection and user-defined reporting intervals, the output client generates track updates, causing symbols to move on the SIM COP display. The Simulation COP Display is similar in appearance to the real world COP display, except that the track data being displayed is simulated, being generated from the CTTS scenario, and not from real world input or sensor sources.  4.5 Archive/ReplayThe Archive/Replay components allow the CTTS to archive real world tracks or simulated scenarios generated within the Scenario Editor and replay them within the system as simulated data. All C4I applications are active during replay and operate on the data the same as on real world C4I data. The Debrief Author component  provides additional authoring tools that allow the user to define an animated playback, import slides, screen captures, photo or other graphical images, etc., for briefing purposes, add pause and stop points, adjust playback speed and control the COP display (e.g., center the map or zoom, activate a tactical overlay, etc).  This Debrief Author component is also used in conjunction with a tutorial feature for operator-level C4I training, called the Tutor.   Development is underway for an embedded training application that will use many of the M&S components within CTTS, plus these Author and Tutor components.  A beta version of this training host application, tentatively named the C4I Embedded Training System, incorporates basic step-by-step training instructions with a dynamic scripted scenario in a tutorial mode for individual operators, plus advanced training authoring tools for the training content developer.  Future planned developments will also allow free-play training sessions for team training purposes, where simulated forces and certain actions can be controlled by training participants, while events and outcomes can be determined by the training coordinator.  Much initial work has been done by NRL in this area for the COE/GCCS 3.x environment, including the GCCS Embedded Training software.  The current CTTS has laid the groundwork for more advanced embedded training enhancements in the 4.x environment [4], [5].Figure 3 – CTTS Dynamic Run and Simulation Common Operational Picture (SIM COP)4.6 HelpThe help features developed for the CTTS include a comprehensive user’s manual that is accessible directly from the main Help menu, as well as context sensitive help that is Extensible Markup Language (XML) and Hyper-Text Markup Language (HTML) based.The user’s manual was built using the Microsoft Front Page tool and follows a convention used some COE documentation, which provides a dynamic table of contents page with hyperlinks to a manual contents page.  All major software features of the CTTS, plus the CMT Server features, are included in the user’s manual.  The context sensitive help uses the Document Management Infrastructure (DMI) help system being provided with the operational GCCS-M builds.  The DMI system employs a document server where all help content files are stored, which is accessed from the CTTS running on a client machine.  Each main tab of the CTTS GUI has a help button, which accesses a DMI help page describing the various options in that tab.  There is also an overview help page accessible from the main CTTS menu.  As a backup, if the DMI system is down or non-accessible, then a backup help page provided with the CTTS segment is displayed in a browser.The CTTS help system will be expanded in future releases to include more exhaustive context sensitive help for all necessary GUI dialog windows and user actions.5. Software Segment ArchitectureThe software design of the CTTS follows the guidelines and principles of the standard architecture for Department of Defense’s (DOD) systems, specifically the COE architecture. The COE provides the core system services necessary for C4I systems such as the GCCS-M, some of which are directly utilized by the CTTS.  Specifically, the Joint Mapping Toolkit-Visualization (JMV), the Tactical Management System (TMS), and the Application Framework (AFW), which are part of the Integrated C4I System Framework (ICSF) provided with the COE, are used extensively for the preview, editing, and dynamic execution of scenarios in CTTS. SHAPE  \* MERGEFORMAT Figure 4 – COE Segment Architecture of the CTTS Host ApplicationThe COE also provides a standard software development environment containing several software development kits (SDKs) which provide many useful APIs for mission application development.  The APIs for the JMV and TMS, as well as other core services and libraries in the Integrated Foundation Library (IFL) and the TMS-Visualization (TMS-V) library are used by some utilities, VTM, and Scenario Editor functions of the CTTS.  In addition, the Microsoft Office database management software, Microsoft Access, which is a COTS product available for the COE, is also used to store and manage the CMT Database, part of the CMT Simulation plug-in.The COE Segment Architecture of the CTTS Host Application is shown in Figure 4, where the components and services are color coded.  The light blue boxes designate common components that are part of CTTS and are reusable by other training and simulation based host applications, where gold boxes represent CTTS specific components and plug-ins.The standard segment architecture is used for the CTTS directories that contain the executable Java archives of class binaries; for data files such as scenarios, menu definitions, configuration files, contact database files, and help function files; and for segment descriptors, scripts, and integration files.  The CTTS Segment Directory Structure is shown in Figure 5.The CTTS is a COE Level 7 compliant segment that has been delivered to SPAWAR and is being included with the most current GCCS-M build for integration, testing, and technical/operational evaluation during the summer and fall of ‘03. SHAPE  \* MERGEFORMAT  SHAPE  \* MERGEFORMAT Figure 5 – CTTS Segment Directory Structure6. Software ImplementationThe CTTS software is a 100 percent Java application that can run on the standard COE platforms, Windows 2000 based personal computers and Sun Solaris (UNIX) based workstations.  The major components of the CTTS were developed at the Naval Research Laboratory, Command and Control Section, with portions of the CMT Simulation Server plug-in developed jointly with the Naval Undersea Warfare Center Division Newport (NUWC).  The CMT Database Utilities were converted and developed entirely by NUWC as an added feature.The Java software development tool used was Borland’s JBuilder Enterprise version 7, which is a complete Integrated Development Environment for Java applications and enterprise solutions.  The software is organized as Java packages for the major components of CTTS, which are then built as Java archive files (JAR files), and included within the “bin” directory of the segment.  The segment’s scripts add all of these JAR files to the class path, as well as the necessary ICSF classes and the main CTTS application is executed in the Java Run Time Environment (JRE) provided in the COE.A standard approach that was taken for the graphical user interface was to organize the logical components of the application in tabs, such as for the main CTTS window, with the Scenario, Track, and Dynamic Run tabs (as in Figures 2 and 3).  When a plug-in is loaded into CTTS, it is merely appended to the set of tabs and the user can quickly access its functions and settings.  In many cases, software that was designed initially as a stand-alone application can be converted to a plug-in for CTTS or other Training Host Application, by writing an ESI plug-in class and changing the main application window (frame) to a tab.  Other GUI standards were used to increase the user friendliness and ease of learning the CTTS, including commonly recognizable icons for option buttons, extensive use of the convenient “combo boxes” for list selections, and double-click capability in the scenario and track tab tables.7. SummaryThe CTTS is a complete, robust solution for team training in the current Navy fleet and training facilities, as well as an expandable training application core that can be tailored to specific uses through the development and use of simulation plug-ins.  Since it is fully COE compliant in the 4.x environment, it is envisioned that in conjunction with the M&S SDK, many useful simulation and training applications could be developed to run in the GCCS-M and other COE-based systems.  These developments will hopefully further bridge the gap between operational C4I systems and Modeling and Simulation systems, allowing better interoperability and more effective training in the future.The CTTS is being supported by the Space and Naval Warfare Command (SPAWAR), Naval Command and Control Systems Office, PMW-157, which oversees the  development, integration, and fielding of the Global Command and Control System-Maritime (GCCS-M).References[1]	Layman, G., Weatherly, J., “C4I Host Applications,” Paper 03F-SIW-053, Simulation Interoperability Workshop, Fall 2003; Orlando, FL.[2] Layman, G., Daly, J., Robinson, D, Weatherly, J., “Integrating Simulations into DII COE Compliant C4I Systems,” Paper 02F-SIW-048, Simulation Interoperability Workshop, Fall 2002; Orlando, FL.[3] 	Layman, G., Daly, J., “C4I Tactical Applications Utilizing Embedded Simulations” Command and Control Research and Technology Symposium (CCRTS), June 11-13, 2002; Naval Post Graduate School, Monterey, CA.[4] 	McGroder, D.P., “Embedded Training Tools for Large Real-Time Systems,” NRL/FR/5750--95-9749, September 1995; Naval Research Laboratory, Washington, DC.[5]	Layman, G., Daly, J., McGroder, D., “Embedded Training Courseware Developer’s Manual,” September 2001; Naval Research Laboratory, Command and Control Section, Washington, DC. [6]	Cruise Missile Trainer – Personal Computer (CMTpc) Version 1.1.1 User Guide - Rev. B, August 1999; Naval Undersea Warfare Center Division Newport, RI.Authors BiographiesDENNIS MCGRODER is a Principal Systems Engineer for Dynamic Animation Systems, and is the project manager for the C4I Team Training System at the Naval Research Laboratory.  He has acted as a lead software designer and developer for several COE based projects, including Embedded Training, Training Author, and Scenario Generator for the Joint GCCS, plus Training and Event Reconstruction for the Navy’s JMCIS.  He has been involved with advanced software development for over fifteen years, specializing in the areas of C4I, training, graphical user interfaces, and tactical decision aids.  He has had several applications deployed in operational C4I systems.DR. GENE LAYMAN is a Research Engineer at the Naval Research Laboratory and directs a Command and Control Development Team that has been active in GCCS and GCCS-Maritime developments since their conceptions. Earlier he managed the Radar Branch and the Guidance Branch at the Naval Surface Weapons Center. Before that, Dr. Layman was a Program Manager in the Missile and Ordinance Division at Texas Instruments, Inc. and a Circuit Designer at The Boeing Company on the Minuteman Program. He has led or participated in the design of over two-dozen military systems with more than half becoming fully operational.AcknowledgementsThe authors acknowledge these team members for their contribution to the definition, design, and development of CTTS: William Harrington, NGIT; Charles Schwartz, SPAWAR; John Daly, BAH; Dan Robinson, SFA; Nam Le, ITT; Trinh Nguyen-Phan, NRL; Jennie Womble, ITT; Linda Egan, NUWC; John Schlotter, NUWC; Robert Rossi, Anteon; Cheryl Boergesson, Anteon; Robert Rodehorst, SEA CORP; Christina Bell, NUWC./h/C4ITTS	/bin		CTTS JAR 		(main application)		Scenario Editor JAR		Dynamic Run JAR		ESI Library JAR		Database Access JARs		CMT Library JAR		DMI Help JAR		Run CTTS perl scripts and batch files		CMT Database Access perl scripts and batch files		/plugins			CMT Plug-in JAR	(included in CTTS)			[Debrief Author JAR]				[COLT Plug-in JAR]	(additional plug-ins)			[Predator Plug-in JAR]			…/data	/CMTPCDBMaster CMT Database file (MS Access .mdb file) with:	Contacts tables	Sensors / Emitters tables	/Exercises		CMT Database Exercise files (.mdb files) with:  			scenario infosensor / emitter parameter settings	/Scenarios		XML Scenario (.xml) files		OTH-T GOLD Scenario (.gld) files	/Icons	/Menus/Scripts	CTTS runtime environment batch file		CTTS class path batch file/SegDescrip	Standard COE segment descriptor files	SegInfo file:CTTS Requires: IFL, JMV, TMS, AFW, TMS-VTrack Reports to CMT Output ClientDebriefAuthorReplayArchiveExerciseAnalysisSIM COPDisplayCMT OutputClientCMT RuntimeClientSensor DetectionAnalysisReportGeneratorDatabaseMgtVirtual Track Manager (VTM)ScenarioPreviewCOPCaptureCMT DatabaseSetup ClientScenarioEditorCMT SimulationServerArchive & replay ground truth & perceived scenarios, annotate briefsTMS Track Reports to SIM-COP DisplayTrack Object Updates to CMT ServerProvide parametric database interfacesScenario ObjectsTraining Scenario SetupArchive/ReplaySimulation COPDynamic RunSensors  Org & Non-OrgEmittersEMCONNTDSScenario ManagerScenario Files  - XML  - OTGScenario Objects  - Tracks    - WaypointsINTELREADOPSCMTSimulation COPCTTSJavaJRESolarisNTW2KWebUCPMS AccessOfficeTMSJMVAFWM&SComponentsArchive/ReplayDynamicRunScenarioManagerDB SetupCMT ClientsOutputRuntimeCMTSimulationServerM&S SDKApplication Programmer InterfacesData MgtCommsMapCorrelation…SupportApplications…Kernel…InfrastructureServicesDatabasesCTTS Host ApplicationCOE