                                Using Open Source software in Simulation:                                        The IDF GF Battle lab experienceCpt. Maxim NovoselskyMaj Einav KipermanIDF GF Battle Lab+972-37311337maxnovosel@gmail.com, einavkip@yahoo.comShahar KostiSimlat Ltd.+972-9-9517675shahar.kosti@gmail.comKeywords:IDF Battle lab, Open Source Software, Licenses, GPL, BSD, Copyleft, CGF, Ground Vehicle Modeling, Movement Modeling, ODE, OpenSteer, Feasibility Study, Test-bed, WrappersABSTRACT: One of the major challenges the Israel Defense Forces (IDF) Ground Forces (GF) Battle Lab (BL) has been facing in recent years is the introduction of new simulation technologies and methods, under tight development schedule constraints. Introducing new technologies requires a "proof of concept" process in order to decide on the profitability of further development. Using Open Source software solutions in the BL helped make this process quicker and more efficient. The BL has been developing its proprietary Computer Generated Forces (CGF) for approximately 10 years. This CGF is mainly intended for simulating ground entities and has various capabilities for autonomous movement. Over the years, as the visual systems have improved and due to the introduction of urban environments simulation, the need for realistic movement characteristics, especially human, became important. An in-house solution, developed by the CGF team, appeared to consume too much development effort and was not extendable enough. After analyzing the problem and reviewing various third-party solutions, the CGF team decided on using an Open Source (OS) library called OpenSteer. Until recently, ground vehicle simulations in the BL used a low fidelity non-physical movement mode, based on ground clamping. In 2006 the BL got involved in research areas related to Unmanned Ground Vehicles (UGVs) and human-robotics interactions. During early research stages it became clear that it would be necessary to simulate the UGV dynamics in higher fidelity than was done before. The development team decided to initiate the "proof of concept" process before full scale development. Therefore a quick solution for a high-fidelity vehicle simulation was searched for. After a brief review of third party solutions, an OS library, Open Dynamics Engine (ODE) was chosen. Developing a UGV simulation required an autonomous movement model which appeared to have similar characteristics to the one developed by the CGF team based on OpenSteer. Since OpenSteer was not originally intended for simulating rigid-body vehicles, the development team faced the challenge of integrating both products, OpenSteer and ODE. This paper will describe the steps taken in order to assimilate OS products in the BL simulation test-bed and lessons learned.1. IntroductionThe IDF GF BL is a research installation dealing with military research questions.  Research is conducted on new and future weapon systems and their utility in the battle field.  Operational concepts, techniques, tactics and procedures to be used for future weapon systems are the main questions usually asked.  Issues stressing organizational processes and decision making are examples of research topics in the BL.  The BL deals with a wide range of issues from the level of Human Machine Interface (HMI) for a single system to developing and testing operational concepts for combined weapon systems.The main research method used is virtual simulation with human in the loop.  An experiment test-bed is under continuous development, used for the sundry studies conducted in the BL.  Experiments drive the requirements of the test-bed.  Tight test-bed development scheduling is a major issue since BL customers usually want answers to their research questions as soon as possible.  The BL is also a scarce resource in the IDF.  There are many clients and more studies to be conducted than possible.Until recently, the vast majority of the programming tools used in BL where third-party COTS. However, the tight schedule constraints forced the BL developers to search for tools helping to shorten the development cycle while keeping the high software quality standards.  This search brought the developers to evaluate the profitability of using open soure software elements alongside the existing COTS tools.2. Open Source Software (OSS)The Open Source Software (OSS) is a subgroup of computer software for which the source code is available under a license that meets the Open Source Definition (OSD). The Open Source Definition was first created by Bruce Perens and Eric Raymonds to concretize the term of free software. In both cases the word “free” does not essentially mean free of charge, but rather implies the user’s freedom to run, copy, distribute, study, change and improve the software  REF _Ref195973117 \r \h ‎[1]. In February 1998, Raymonds and Perens formed the Open Source Initiative (OSI) which currently maintains the OSD. One of the goals targeted by OSI was to present the open source case to commercial community  REF _Ref195973125 \r \h ‎[2]. 2.1 Licensing The Open Source Definition contains a set of ten rules used by the Open Source Initiative (OSI) to determine whether a certain software license can be considered an open source one. The ten principles are:Free redistribution:  The license shall not restrict selling or giving away the software as a component of an aggregate software distribution.Source code availability: The program must include source code and must allow distribution of source code as well as compiled form.Derived works: The license must allow modifications and derived works, and must allow them to be distributed under the same terms as the license of the original software.Integrity of the author’s source code: The licenses may require that modifications are redistributed only as patches.No discrimination against persons or groups: The license must not discriminate against any person or group of people.No discrimination against fields of endeavor: The license must not restrict anyone from making use of the program in a specific field of endeavor. For example, commercial users may not be excluded. Distribution of license: The rights attached to the program must apply to all to whom the program is redistributed without the need for execution of an additional license by those parties.License must not be specific to a product: The program cannot be licensed only as part of a larger distribution.License must not restrict other software: The license must not place restrictions on other software that is distributed along with the licensed software. For example, the license must not insist that any other software it is distributed with must be open-source software.License must be technology-neutral: No click-wrap licenses or other medium-specific ways of accepting the license must be required.In contrast to the commercial copyright, the OS inventors intoduced the term “copyleft” REF _Ref195973137 \r \h ‎[3]. Copyleft is a play on the word copyright and describes the practice of using copyright laws to remove restrictions on distributing copies and modified versions of a work for others and requiring that the same freedoms be preserved in modified versions. There is a wide variety of licenses approved by OSI. Though all the licenses are OSD compliant, some licenses are more restrictive than others. The GNU Public License (GPL) is the most popular example of a strong copyleft license that requires the derived work to be available under the same copyleft. The GPL grants the users of a software freedom required by the OSD but ensures this freedom will be preserved.  This later statement is one source of criticism against open source adoption. The license appears as “viral”, which prevents it from being adopted by commercial software vendors.The standard example for more permissive licenses is the family of BSD licenses. The license is named after the Berkeley Software Distribution, a Unix-like operating system. This license has few restrictions compared to GPL. The BSD license allows the incorporation of the software released under it in propriety commercial systems. The finest example of this fact is the use of BSD networking code in Microsoft’s Winsock implementation.2.2 ExamplesIt won’t be an overstatement to say that almost every commercial software has an open source alternative.  It is barely possible to list all the open source products, so the following paragraph will focus on open source software related to the simulation world.OpenEagles: provides an open source multi platform framework for building Distributed Interactive Simulation (DIS) Protocol compliant virtual, constructive, stand-alone, and distributed simulation applications.OpenHLA: provides an open-source implementation of the HLA RTI spec 1.3 and IEEE 1516. It is available under the Apache License v2.0.OpenDIS: provides an open source implementation of the Distributed Interactive Simulation (DIS) IEEE-1278 standard in C++ and Java.  It is available under BSD license.Delta3D: provides a full functional game & simulation engine. The engine integrates other well-known open source projects such as the Open Dynamics Engine (ODE), Open Scene Graph, Character Animation Library and OpenAL. It is available under a GPL license.When looking for open source software, SourceForge REF _Ref195973148 \r \h ‎[4] is the place to start . The SourceForge site was opened in 1999 as an archive to open source projects  REF _Ref195973156 \r \h ‎[5]. To the date of writing these lines it counts 173,818 registered projects and 1,823,740 registered users3. The IDF Battle Lab experienceRecently the IDF BL started introducing open source SDK’s into the development process. Examining the various aspects of the OSS made the BL project managers to believe it can increase the efficiency of some phases in the development process and shorten the “time to deliver”. A set of strict criteria was defined to decide whether a certain open source SDK may be assimilated into the development process:Features: The SDK has to provide all the features listed in the requirements document.Embedding: The SDK API should allow an easy embedding into the existing development environment It has to provide a clear and intuitive C++ API, since it is the main development language in the IDF BL.  In some exceptional cases, using another language API may be considered, but the overhead of embedding it into a C++ environment would probably make the effort non worthwhile.Extendibility: The library design should support easy extending without extending its actual source code. Stability: The SDK library must provide a stable release.  Immature library version, beta versions or not fully tested versions must be rejected.Documentation: The SDK has to be supplemented by a proper documentation. The documentation must include both a comprehensive API reference and a general overview of the library along with actual examples.Support: Although the OSS is often accused for lacking a formal support, it provides an alternative in terms of a user community. The user community strength may be tested by th number of active mailing lists in the forum.  In addition, some open source tools offer a formal support, like the various LINUX redistributions.License: The license under which the SDK is provided should not contradict with the organization’s doctrine. 3.1 Feasibility StudyOne of the cases when using OSS is the most beneficial is when creating a system test bed.  Test beds are often used for studying the system feasibility before going into a full scale development process, thus lowering the risks in the project. The need for a feasibility study often arises when a company has to evaluate the profitability of developing a new product or entering into a new research area. As a preliminary stage in the project development cycle the IDF BL managers require the feasibility study to be efficient in terms of time and costs. The study might examine different aspects of the project, depending on the company profile (commercial or not), but must include a technical feasibility study and a schedule feasibility study. The technical feasibility phase examines the technological aspects of the project. Are the technologies required in existence or should new technologies be developed? How difficult would it be to build the system using the technology? Do the developers have the skills required to use those technologies? Unless an organization develops a ”state of the art” system, the technologies required probably exist and can be reused.  In the software development area, the term technology might equally refer to SDK (Software Developer Kits), programming language or any other software tool that might be used. The high costs and usually long procurement process for COTS products makes them of no practical use in this stage. Quite to the contrary, the freedom offered by an OSS solution might be fully exploited..Most of the OSS solutions are free (or low cost), thus satisfying the cost efficiency requirement. They are also easily obtainable, usually a few minutes long download from the internet, and therefore also satisfy the time efficiency requirement. Another benefit of using OSS in the feasibility study stage is the source code availability. The development team may gain a lot of knowledge in the new area by reading the source code. By analyzing the source code, developers make better assumptions about the software capabilities, such as performance, stability, security etc. Those processes might considerably lower the project’s risks and improve the quality of the software developed.The schedule feasibility study examines the time-management aspect of the project.  It involves questions such as how much time will it take to build the new system, the amount and type of resources required etc. Those questions are usually the most difficult to answer at an early stage of the project, and not rare are the cases when the estimated and the real development time differ by months.  Using OSS in the feasibility study will allow the development team to get familiar with the technology. This “hands on” experience helps the development team to estimate the development time more accurately and avoid “guessing”.To complete the subject, two important notes must be taken:Different solutions might be used for the feasibility study and the development process itself. As long as the two solutions don’t differ too much, from a conceptual or technological point of view, all the benefits described in the previous sections remain valid.As a consequence of the previous bullet, commercial companies can use OSS with restrictive licenses, like GPL, in a feasibility study. Nevertheless, the final product must not be developed under this license if the company does not wish to release its source code.3.2 Software Architecture and DesignThe OSS is all about freedom. When using OSS the developers are not tied by commercial agreements or financial pressure.  Various SDKs might be exchanged with others, if the latter provide a better solution, at any phase of the development process.  However, in order to take advantage of this freedom the developed system’s design must support the exchange of  its core libraries with others.  In other words, the simulator’s code and its servicing third-party SDKs must be loosely coupled.Loosely coupled design is achieved in the IDF BL through wrappers.  Wrappers encapsulate the third-party SDK while exposing an abstract API to the high-level simulation code. SHAPE  \* MERGEFORMAT Fig 1. Data flow between the simulation code and the third party SDK when using wrappers4. The IDF Battle Lab experience4.1 Modeling Movement in CGF The BL developed its proprietary Computer Generated Forces (CGF) during the years 1997-2007.  The BL CGF is mainly intended for simulating ground entities and has various capabilities for autonomous movement.  Over the years, as the visual systems have improved and due to the introduction of urban environment simulation, the need for realistic movement characteristics, especially human, became important. The BL CGF movement capabilities were designed for large formations of vehicles (e.g. tanks) moving on roads.  Therefore, new capabilities were needed.  A solution to this problem had to meet several requirements:Realism: autonomous entities should move in a realistic way, meaning a human observer should not be able to tell them apart from human-controller entities. This results in a movement which is smooth and constrained by physical laws, and was tested by drawing the entity movement path on 2D graphs and looking for spikes or sharp turns.Types of Movement: entities should be able to wander randomly, move on paths or roads, avoid collision with obstacles and avoid other entities. Movement types can be combined, for example wander randomly and avoid obstacles at the same time.Human controller interference: a human controller (the CGF operator) can interfere with entity movement at run-time, changing the movement type, speed, direction, etc.Performance: it should be possible to simulate up to 200 entities on a single PC, moving and avoiding collision with obstacles and entities in an urban area.Fast delivery: the project had to be developed for an upcoming experiment during a short period of time, having low human resources (1-2 developers). This requirement only left time for development, so no research could be done.At first it was decided to upgrade the existing movement module in the BL CGF, so that it would support the requirements stated before. The first version of the new movement module, used in a BL experiment, was an improvement over the previous one, mainly in the area of realism. However, it was still poorly designed and lacked an easy way to combine different types of movement. Continuing to develop this module for future use required too much development effort, so it was decided to look for an external solution. After studying the subject of steering behaviors REF _Ref195972971 \r \h ‎[6] REF _Ref195972972 \r \h ‎[7], we came to the conclusion that using them will help us meet our requirements from the movement module. It was decided to look for an open source library that implements steering behaviors and has the following attributes:Easy integration: integrating with existing CGF C++ code should as easy as possible.  This includes using Battle Lab terrain and physical data.Extendibility: the library design should allow for easy extending, for example changing an existing steering behavior or adding a new one.Active user community: one of the greatest benefits of using open source software is having a user community which can provide feedback, documentation, bug reports and new features. This was tested by looking for an active mailing list or forum.A wide research over the internet and literature led to the some alternatives, each had its strengths and weaknesses:OpenSteer REF _Ref195972993 \r \h ‎[8]: Based on his articles REF _Ref195972971 \r \h ‎[6] REF _Ref195972972 \r \h ‎[7], Craig Reynolds created an open source C++ library that provides a steering behaviors toolkit and should be easy to integrate in game engines. Full source code is included, as well as an OpenGL demo ("OpenSteerDemo") that serves as a showcase for the library.  Although lacking some documentation, the OpenSteer is feature rich and has an active user community.MetaAgent REF _Ref195973008 \r \h ‎[9]: Started as "a playground for testing generic programming and meta-programming", this library provides a C++ toolkit for steering behaviors, that uses Policy Based Design REF _Ref195973018 \r \h ‎[10] as a design guideline.  MetaAgent seemed to be in preliminary stages and did not contain as many features as OpenSteer.Programming AI by Example  REF _Ref195973036 \r \h ‎[11]: A book about AI programming by Mut Buckland that has a chapter on "How to Create Autonomously Moving Game Agents". This chapter describes a vehicle model, some basic and advanced steering behaviors for individuals and groups, spatial partitioning and smoothing.Robin Green SIGGRAPH 2000 course  REF _Ref195973045 \r \h ‎[12]: The SIGGRAPH 2000 conference held a course titled "Games Research: the Science of Interactive Entertainment". This course had a lecture about Steering Behaviors by Robin Green, who was an R&D developer in Bullfrog productions and responsible for autonomous movement in the game Dungeon Keeper 2. The written material of the course describes steering behaviors programming from an experienced developer’s point of view, but does not provide much code.Out of the alternatives, OpenSteer seemed to fit most to our requirements from a steering behaviors library.  In terms of features, there was no substantial difference between the libraries. However, OpenSteer was the only library to have an active user community (a mailing list on Source Forge), and had successful reports on integration with different terrain models and physical engines.  Moreover, it had a large existing code base that was not needed to be developed or tested, which was not the case with the other libraries. Thus, OpenSteer was chosen to be used in the movement module of BL CGF, and the integration process of the library has begun.The CGF team encountered several issues during the integration process:Packaging: At first, a modified version of OpenSteer was created, excluding external dependencies that were not needed such as OpenGL. Then, a wrapper library (BLSteer) was introduced in order to integrate OpenSteer in the CGF movement module.Other simulations: every OpenSteer entity had to be linked to an existing BL CGF entity, so other simulations would know about it. Moreover, all entities had to be known by OpenSteer, so it can avoid them when using dynamic obstacle avoidance.Terrain database: the Battle Lab terrain databases had to be incorporated with BLSteer. By following a successful integration of OpenSteer with the Newton/Irrlicht environment REF _Ref195980135 \r \h ‎[13], available by OpenSteer community, this issue was quickly resolved.Combining steering behaviors: In his documents REF _Ref195972971 \r \h ‎[6] REF _Ref195972972 \r \h ‎[7], Reyonolds discusses several ways to combine steering behaviors. After an extensive tryout of configurations, it was decided to use a mix of hard decisions (Use A OR Use B) and weighted sums.Lack of documentation: OpenSteer is lacking proper documentation about using and extending the library. This issue was solved by reading the provided source code and using the mailing list.After these issues were addressed, OpenSteer was integrated in the BL CGF. It was successfully used in a Battle Lab experiment and had met the expectations from it. During 2007, it was decided to gradually abandon the proprietary CGF and use the MAK VR-Forces instead. Several of the existing CGF modules (urban warfare capabilities, for example) had to be ported to VR-Forces so it can be used in Battle Lab experiments. However, since VR-Forces already has support for autonomous human movement in the form of the B-HAVE module, OpenSteer was not one the modules to be ported. The positive experience with steering behaviors as a way to model human movement, acquired by using OpenSteer in BL CGF, was one of the main reasons to purchase B-HAVE. 4.2 Simulating UGV In 2006 the IDF Battle lab got involved in research related to Unmanned Ground Vehicles (UGVs) and human-robotics interactions.  The task of simulating an unmanned ground vehicle is actually composed of two subtasks.  The first is modeling the complex dynamics of a ground vehicle and its interactions with the environment, while the second subtask is modeling some steering and movement controller. The existing ground vehicle model was developed several years before, for purposes that did not require a highly detailed simulation of the vehicle dynamics and hence was a low fidelity model based on ground clamping.  The vehicle was modeled as a single rigid body that was re-oriented according to the terrain slope at the vehicle location and the steering input.  A realistic behavior of the vehicle dynamics was achieved by introducing constraints on the vehicle’s velocity, acceleration and steering angles into the equation of motion.  More complicated effects such as drifting, sliding and other physical effects were neglected.  This vehicle model was sufficient for a wide variety of military research topics but failed to produce the immersion required for research involving a human operator interacting with the vehicle.  Since one of the research subjects was the interaction of the human operator with the remote unmanned vehicle, it was clear that a new ground vehicle model, satisfying the immersion requirement, must be developed.Development of a high fidelity vehicle model involved a detailed modeling of articulated rigid body dynamics. The introduction of this new, unfamiliar concept into the project was marked as the critical chain by the project manager.  It was decided to develop a rapid test bed before initiating a full scale system development.Since developing a feasible dynamics library is a time-consuming task that requires specific knowledge, the IDF BL decided on using a third party, open source solution as it best served the feasibility study.  After testing various open source dynamics libraries against the criteria described in section 3, ODE was preferred.The ODE (Open Dynamics Engine)  REF _Ref195973061 \r \h ‎[14] is an open source, high performance library for simulating rigid body dynamics.  The ODE provides a BSD license that allows using the code free of charge even in commercial products.  It is used widely in the game industry (Call of Juarez, Stalker). Using ODE allowed the BL programmers to develop a feasible, high fidelity vehicle model in a very short time.The development process included developing an abstract layer encapsulating the dynamics services implemented by ODE.  This step was taken to assure a loose coupling between the ground vehicle simulation code and the ODE API making the latter exchangeable. SHAPE  \* MERGEFORMAT Fig 2.  Illustrates the relationship between the vehicle simulator and the dynamics libraries. Only the ODE Adapter is currently implementedAs stated before, a ground vehicle dynamics simulation is only half of the work to be done when simulating a UGV.  The other half is building a movement controller for the vehicle.  The UGV has to be able to perform a close  set of missions based on the ability to follow a path at a given speed  This basic requirement must be satisfied by every proposed solution, whether an in-house or third party solution. Moreover, the movement controller must be able to interact with the vehicle steering mechanism.  The latter problem becomes more complicated with the introduction of a high fidelity vehicle model.  For example, in order to turn the vehicle, the movement controller should imitate the actions of a human driver and actually turn the wheels in the required direction.Since the BL CGF team gained some positive experience with the OpenSteer library for movement modeling, The UGV development team decided to deploy the same solution to the vehicle movement.  The problem faced was “translating” the output of the movement module, implemented through OpenSteer, so it can be used as an input to the vehicle dynamics, implemented through ODETo deal with this problem, the design of the ground vehicle module exposed a set of interfaces for actuating various vehicle devices. Those actuator interfaces encapsulate the translation mechanism and allow a loose coupling between the vehicle dynamics and the steering controller.Conclusions & RecommendationsThough assimilation of open source software tools into the IDF BL’s development process undoubtly proved to be beneficial in both the schedule and the software quality terms, it will be erroneous to assume that the open source software tools are generally better than their COTS counterparts. Nevertheless, the assimilation process must follow an extensive preliminary planning. The planning must include the following:Defining strict rules for evaluating certain open source software. The IDF BL defined rules are explained in section 3.Finding “weak spots” in the development process where introduction of open source software can be most effective. The IDF BL decided to set OSS as it’s main tool for feasibility studies and system test-beds, especially when approaching a new domain of research problems.Designing the system properly so it will allow exploiting the developing “freedom” implied by the OSS. The IDF BL is practicing a loosely coupled design by separating the system code from the service libraries with abstract layer APIs and wrappers as explained in section 3.2Another practice that proved to be beneficial in IDF BL, Appointing a technically oriented person responsible for exploring the OSS domain and bringing fresh ideas and solutions.Finally, the strength of the OS domain is directly dependent on its user community as it is the only drive for the domain’s progress and renovation. The more simulator developers will join the user community, the more will this domain evolve. 6. ReferencesThe Open Source Definition by Bruce Perens., Open Sources: Voices from the Open Source Revolution, January 1999, ISBN 1-56592-582-3History of the OSI. Open Source Initiative. 2006.What is Copyleft by Richard Stolleman,<http://www.gnu.org/copyleft/copyleft.html><http://sourceforge.net/>The SourceForge Story by James Maguire, 2007.<http://itmanagement.earthweb.com/cnews/article.php/3705731>Reynolds, C. W.. “Flocks, Herds, and Schools: A Distributed Behavioral Model“, Proceedings of SIGGRAPH ’87, Computer Graphics, 21(4), pages 25-34, 1987.Reynolds, C. W.. “Steering Behaviors For Autonomous Characters “, GDC 99. pp. 763-782 A. Yu (Ed.) San Fransisco, 1999.Reybolds, C. W. "OpenSteer: Steering Behaviors for Autonomous Characters". SourceForge. 25 October  2004. Retrieved 27 March 2008. <http://opensteer.sourceforge.net/> Jonathan de Halleux. "MetaAgent, a Steering Behavior Template Library". CodeProejct. 21 May 2003. Retrieved 27 March 2008. <http://www.codeproject.com/KB/library/metaagent.aspx>Andrei Alexandrescu: “Chapter 1: Policy Based Design”, Modern C++ Design, Generic Programming and Design Patterns applied, Addison-Wesley Professional (February 23, 2001)Mat Buckland: "Chapter 3: How to Create Autonomously Moving Game Agents", Programming Game AI by Example, Wordware Publishing, 2005.Robin Green. "Games Research (SIGGRAPH 2000, Course 39)". Reynolds Engineering & Design. 1 September  2000. Retrieved 27 March 2008. <http://www.red3d.com/siggraph/2000/course39/>Irrlicht Game Files by Don Henton. <http://s-fonline.com/webhosting/dhenton9000/steerdemo.php >Open Dynamics Engine Homepage by Russel Smith. <http://ode.org/>Author BiographiesMAXIM NOVOSELSKY has over four years of experience in simulation system development. He earned his B.Sc in physics at the Technion - Israel Institute of Technology. For the past 2 years he has been leading the Ground Systems development team in the IDF GF BL. EINAV KIPERMAN has over fourteen years of experience in developing military combat systems, with past emphasis on operational evaluation and procurement.  He earned his M.E. in mechanical engineering in the field of CAD at the Technion - Israel Institute of Technology.  For the past eight years he has been working in the BL, starting out as a software developer, promoted to a team leader, and finally appointed to head the IDF GF BL.  These days, together with his colleagues, he draws the future vision for the BL. SHAHAR KOSTI has three years of experience in developing CGF applications. He earned his B.Sc in computer science in the Open University of Israel.  He was a senior software engineer in the IDF BL CGF team. Today he works as a senior software engineer for Simlat Ltd – UAV training solutions.<< implements>><< depends>>ODE APIODE AdapterAbstract Dynamics LayerGround VehicleSimulation CodeWrapper Library APIThird Party SDK API<< implemented in terms of>>Other AdapterOther API