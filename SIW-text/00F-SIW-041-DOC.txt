Optimal Usage of CORBA for Soft Real-time Simulation ApplicationsThomas UsländerReinhard HerzogDr. Kym WatsonFraunhofer IITBFraunhoferstr. 1D-76131 Karlsruhe, Germany+49-721-6091-480   +49-721-6091-492   +49-721-6091-486usl@iitb.fhg.de, hzg@iitb.fhg.de, wat@iitb.fhg.deKeywords:HLA, real-time, CORBA, OPERA, training. ABSTRACT: The OPERA Platform is a CORBA-based distributed real-time computing platform to easily couple existing simulation models and run them in a federated mode on a synchronized time-basis. The first and primary application has been simulation-based training for chemical operators. The Platform is based on CORBA middleware to enable a standard and cost-effective integration of existing simulation models available in heterogeneous environments (diverse hardware platforms and multiple programming languages such as C, C++, Java or FORTRAN). In addition, the OPERA Platform provides built-in CORBA facilities for time-based exchange of simulation data, the synchronization of the logical simulation time, model integration support and system monitoring at run-time.  First, the paper discusses the overall design requirements such as provision of a realistic system view to operators, i.e. meet soft real-time deadlines in spite of complex computing process models, cost-effective integration of heterogeneous legacy simulation software and applications and integration of  hybrid simulation models. The paper shows how market constraints required a cost-effective solution, heavily relying on widespread standards, and offering open interfaces that enable a close integration with Web-based solutions as well as MS-Windows based office systems. This combined requirement set of both high performance, real-time, flexibility and low-cost is not met satisfactorily by the Run-time Infrastructure of the HLA. Thus, the design solution has been, though using the basic HLA time management concepts, to build the OPERA Platform from scratch in a standard IT environment and to carefully apply proven standard object technology. Finally, the paper presents the architecture of the OPERA platform and gives a detailed insight into the design approach for the optimized simulation protocol deducted from intensive benchmarking of CORBA products.OverviewThe OPERA Platform is a CORBA-based distributed real-time computing platform to easily couple existing simulation models and run them in a federated mode on a synchronized time-basis.The first and primary application has been simulation-based training for chemical operators. The OPERA Platform was developed by Fraunhofer IITB as part of the ESPRIT project 24950 OPERA (Operator Training using Distributed Real-Time Simulations) between 1997 and 1999 [1]. It comprises the heart of a complete operator training system that has been evaluated by professional operators and students in a training plant for chemical operators. This training plant producing ammonium sulphate is run by the technology center TCL in Heerlen, The Netherlands. TCL aims to replace a centralized and monolithic training system running on a VAX/VMS machine by the OPERA Platform. Beyond the TCL training plant, the object-oriented modeling approach of the OPERA Platform as well as some of its components are  further used for chemical plants of the project partners ICI and DuPont.RequirementsThe design of the OPERA Platform had to be tailored to the following overall requirements for operator training systems as expressed by the OPERA end-users (TCL, DuPont and ICI):provision of a realistic system view to operators, i.e. meet soft real-time deadlines in spite of complex computing process models,cost-effective integration of heterogeneous legacy (commercial or in-house) simulation software and applications,integration of  hybrid simulation models (i.e. either based on discrete events or on a common logical time),easy adaptation to changes made in the actual chemical plant.In addition, market constraints required a cost-effective solution, heavily relying on widespread standards, and offering open interfaces that enable a close integration with Web-based solutions as well as MS-Windows based office systems. This combined requirement set of both high performance, real-time, flexibility and low-cost is not met satisfactorily by existing standard simulation platform implementations (e.g. the Run-time Infrastructure of DoD's High-Level Architecture). Thus, the design solution has been to build the OPERA Platform from scratch in a standard IT environment but heavily re-using and carefully applying proven standard object technology and existing components both from the market and from the OPERA partners.Integration of hybrid modelling techniquesThe OPERA problem domain is quite hybrid and complex: After several years of research and development in the modeling of physical phenomena,  it is widely recognized that both discrete-event and continuous models are required [1]. Despite the fact that the discrete-event paradigm has proven to be theoretically more general [2], no model alone is able to optimally cope with full reality. Moreover, model integration at the software level is complicated by the different implementation of simulation models in terms of programming  languages (often still in FORTRAN) or simulator frameworks.As the design from scratch of an ultimate simulation framework satisfying all of the above design requirements would be too costly, a platform and component-based IT approach has been chosen.  The High-Level Architecture HLA [3] for federated simulations has shown the feasibility to achieve value-added simulations by coupling heterogeneous simulator units. This basic idea has been re-used by OPERA. However, despite the time management concept, the OPERA platform design significantly differs from the HLA Run-time Infrastructure (RTI) specification as the OPERA system has to  achieve both high performance, real-time and flexibility requirements. These features in combination are not satisfactorily realized by the current RTI implementations. Within OPERA, the coupling of autonomous simulation models is supported through an interface to so-called Proprietary Simulation Environments (PSE). The PSE run-time interface mainly controls simulation states (e.g., run, freeze, pause). OPERA System ArchitectureThe OPERA Platform is based on CORBA middleware to enable a standard and cost-effective integration of existing simulation models available in very heterogeneous environments (diverse hardware platforms and multiple programming languages such as C, C++, Java or even FORTRAN). The OPERA Platform provides built-in CORBA facilities fortime-based exchange of simulation data, the synchronization of the logical simulation time, model integration support andsystem monitoring at run-time. As illustrated in figure 1, the OPERA Platform couplesa relational data base containing meta-data for the legacy simulators,existing proprietary simulator engines and simulation models running upon these engines,engineering tools in order to configure the distributed simulation,existing or new simulation applications, e.g. client stations for the operators (trainees) and the training instructors,a Web Content Management System to dynamically store supplementary information such as multi-media information about the chemical process.For the operator training application running at TCL,  the OPERA platform has successfully integrated the following complementary simulator frameworks provided by the OPERA partners:Thalie (Thomson Training & Simulation, France): a simulation system mainly using the continuous paradigm and a time-stepped approach,OOST  (Fraunhofer IITB, Germany): a discrete-event simulator based on process control function blocks.CheOps (ProSim, France): a modeling framework for the chemical industry.Each simulator framework may still use its own way of modeling dedicated to its specific application domain. However, in order to run them together in a simulation federation, a common simulation object modeling approach has been developed and is applied throughout all components coupled to the OPERA platform. Standard Microsoft office tools (MS-Excel, MS-Project) extended by additional Visual Basic modules are used to configure the elementary simulation entities, their grouping within simulation components and the mapping of the simulation components to the available networked computing resources. Through COM/CORBA gateways, the resulting configuration is stored in a relational model database that offers standard object-oriented interfaces (based on CORBA and Java, and recently XML technology). Light-weight  simulation clients for control and monitoring have been realized with Java technology, allowing the OPERA Platform to be accessed through the Web.The OPERA object model The OPERA object-oriented framework relies on a so-called Distributed Simulation Object Model (DiSOM) (see  REF _Ref444680238 \h Figure  2):Elementary Components typically model an atomic component (i.e. a component that cannot or need not be broken into smaller parts). Such an elementary component is also the unit of distribution in a distributed OPERA run-time environment. It is called an Atomic DiSOM Component (ADC).ADC Ports model an interface point with other ADCs.Composite Components comprise a configuration of ADCs and/or other Composite Components.ADCs can be connected through their type-compatible ports to build bigger simulation systems, called DiSOM Configurations. Connected ADC ports share the same data.  EINBETTEN Word.Picture.8  Figure   SEQ Figure_ \* ARABISCH 2: Elements of the OPERA FrameworkBeyond their initial purpose as a unit of distribution, the ADCs exhibit the following set of additional properties :Configuration properties enable an ADC to be statically or dynamically configured (e.g., load Initial Conditions, activate malfunctions, tune physical parameters ...),Monitoring properties used by the OPERA framework to monitor the performance of  an ADC and entire DiSOM configurations. Time managementThe time management concept is the “key” to distributed simulations. From the external user point of view, the time perception of a simulation system is manifold as the internal time may be warped in various ways (e.g. run faster, slower ...). Furthermore, time synchronization is a cornerstone to enable interoperability of event-driven and continuous  models. Within OPERA, as off-the-shelf PCs connected through a standard LAN are used, synchronization of hardware clocks is not available. Nevertheless, soft real-time requirements have to be satisfied. For the OPERA platform design, the principal HLA Time Management concepts have been re-used as described below.OPERA simulation components just work on the basis of a logical time concept. The logical time is a non-linear function of the scaled wall clock time [3]. The relationship between the scaled wall clock time and the logical time is illustrated in  REF _Ref444676718 \h Figure  3. The scaled wall clock time is based upon single points in time within a continuous time flow. For the logical time there is no continuous time flow, but only discrete points in time.Advancements of the logical time points are controlled by a central component in the OPERA real-time platform. Logical time advances only when all participating simulation components have reached a new time-coherent state. For time-stepped simulation components, this is at the end of a simulation cycle. For event-driven simulation components, this is after the computation related to an event of the current logical time has been carried out and it is ready to receive an  event for a future logical time point.EINBETTEN Word.Picture.8Figure   SEQ Figure_ \* ARABISCH 3: Logical Time vs. Scaled Wall Clock TimeAdvancements of the logical time points are controlled by a central component in the OPERA real-time platform. Logical time advances only when all participating simulation components have reached a new time-coherent state. For time-stepped simulation components, this is at the end of a simulation cycle. For event-driven simulation components, this is after the computation related to an event of the current logical time has been carried out and it is ready to receive an  event for a future logical time point. The cycle duration is chosen according to the following compromise:supply the MMI and the stimulated equipment with updated values often enough to give a  continuous-like view of the state,give sufficient delay to compute the next time-coherent model state.When model computation exceeds the cycle duration  a lag phenomenon appears. The OPERA system detects the occurrence of such lag phenomena through the built-in monitoring tool. It then forwards a real-time violation warning message to the user who may take the appropriate action (e.g. restart the simulation with a changed DiSOM configuration). A limited occurrence of such lag phenomena may be tolerated if they do not invalidate the results of the simulation (soft real-time approach).Architecture The physical architectureThe OPERA physical architecture comprises the following elements (see  REF _Ref444677283 \h Figure  4):End-users hardware stations (Engineer, Instructor and Operators stations) supplying the man-machine interface (MMI) tools.Figure   SEQ Figure_ \* ARABISCH 4: The OPERA Physical ArchitectureThe first-layer software bus is based on CORBA technology and runs over a standard LAN. This layer has moderate real-time requirements ( ~200ms) due to the fact that 1., it has only to handle requests initiated by manual (so rare) actions, and 2., replies are time-stamped and do not require a strict timing policy. This layer uses the native CORBA/Orbix implementation with little design constraints. The second-layer software bus  supports the core of the OPERA real-time platform called the HPCS/RT (High Performance Computing Simulations in Real-Time). It has more stringent real-time requirements (< 10ms latency) and thus should preferably run on a high-speed standard LAN (e.g. 100 Mbit/s Ethernet). Furthermore, the OPERA platform  needs at run-time an exclusive access to this LAN segment combined with a controlled usage of the CORBA/Orbix technology (see below). The OPERA Master Simulation Server manages sessions and requests between OPERA clients and  the real-time platform.Auxiliary Simulation Servers mediate the operations between the real-time platform and the components of the proprietary simulation environments.  Auxiliary Clients are administration and additional simulation animation applications using Java.The logical architectureThe software design of the real-time platform comprises two principal software components interconnected by CORBA: 1. the Central Conductor (CC), and 2. the Local Conductors.  The CC runs of the OPERA Master Simulation Server and is the primary access point of OPERA instructor and operator applications. It mediates these user operations to its counterpart, the Local Conductors (LC), running on the OPERA Auxiliary Simulation Servers. The CC manages the synchronization of operations and the advancement of the logical time. The LCs request the time advancement of their logical time at the CC and the CC grants the time advancement. For an LC representing a time-stepped simulator this is done with a timeAdvanceRequest/timeAdvanceGrant sequence, for an LC representing an event-driven simulator this is done with a  nextEventRequest/timeAdvanceGrant sequence. The time advance grant means that a local proprietary scheduler can execute its simulation independently until its logical time reaches the granted time point. Then, the next global synchronization must follow. If the simulation is to be stopped, paused, frozen or synchronized with the real time, this is controlled by the CC only.The following methods of data exchange are supported by HPCS/RT:Time based Data ExchangeSignal based Data ExchangeThe former one transfers updated ADC port values from the Local Conductors to the Central Conductor together with the above described time synchronization operations in the same CORBA message. The latter one is carried out directly between the LCs within one simulation cycle. The execution order is defined in the ADC Execution Plan in which signal based data exchange is inserted as a remote signal. This method is mainly used for the distributed calculation of time-stepped models. Its messages are not time-stamped.Technically, the OPERA Platform is a logically distributed system consisting of one master simulation server with an interface to simulation clients and a series of auxiliary servers providing the interface to the proprietary simulation environments. The servers may run both on a single computer or on multi-processor LAN clusters. End-users stations (e.g. for the plant engineer, the training instructor or the trainee operators) that host specific simulation client applications are coupled to the master simulation server through a native CORBA/Orbix implementation over a standard medium-speed LAN with little design constraints. This communication layer has moderate real-time requirements ( ~200ms) due to the fact that it handles requests initiated by manual (so rare) actions and just has to periodically update the process data values for which the simulation clients have subscribed. A second-layer software bus  (the real-time core of the OPERA Platform) couples the master and the auxiliary simulation servers. The core platform has more stringent real-time requirements (< 10ms latency) and thus should preferably run on a high-speed standard LAN (e.g. 100 Mbit/s Ethernet or higher depending on the complexity of the simulation models). The following example of the TCL pilot illustrates the benefits of OPERA platform implementation: When distributing the model for the chemical processes from one single simulation server to four simulation servers coupled through the OPERA Platform, the simulation cycle time could be reduced by a factor of three without any modification in the model software itself.Benchmark resultsIntensive and dedicated benchmark tests of CORBA products guided the design of an optimized simulation protocol. First of all, the pure communication performance of CORBA implementations have been compared with the performance of the RTI implementation (at that time, the RTI distribution 1.0.3). Two basic benchmarks have been applied:CommS1: a ping-pong test to measure the basic communication properties of message exchange. A process P1 sends a message of length n  to a process P2.CommS2: an extension of CommS1 where two processes send two messages simultaneously carry out CommS1.The CommS1 and CommS2  benchmarks have been executed for the CORBA/Orbix implementation of Iona Technologies and RTI under the following comparable conditions:usage of the same PC’s for remote testing,Orbix and RTI Profile 1 (receive order) with reliable transport service.The measured latency is illustrated in figure 5. The diagram demonstrate clearly the better performance of CORBA/Orbix with respect to RTI Version 1.0.3. In addition, it shows the non-monotonic behavior of RTI when increasing the message length. This behavior is not acceptable for real-time applications. Thus, the first choice has been to use CORBA instead of RTI having in mind that none of them had built-in support for a real-time quality of service. EINBETTEN Excel.Sheet.8  Figure   SEQ Figure_ \* ARABISCH 5: Benchmark results for an OPERA Time-AdvanceRequest using Iona's Orbix 2.3c02 The CORBA services within the HPCS/RT platform must provide time advancement and port value exchange as real-time sensitive services. This means that all communication between the CC and the LC that is required to compute the next state of a simulation must occur with minimum latency. As CORBA does not yet provide built-in support for real-time, i.e. time is not explicitly taken into account in the transfer of CORBA object requests, basic benchmarking of CORBA implementations has been performed beforehand with different network types (10 Mbit/s and 100 Mbits/s Ethernet), different CORBA products (Orbix, TAO and Visibroker), different CORBA data types and variations in parameter sizes [5]. Apart from considerable differences in  the latency times between the different CORBA implementations, the tests revealed, however,  that in order to achieve a real-time behavior, it is more importantto carefully select the CORBA types that are used in the LC/CC communication (e.g. avoid recursive occurrences of IDL structs as this dramatically increases the (de-)marshalling times),to minimize the number of messages within one simulation cycle, since, at least for small messages, the size of a CORBA message has only a negligible impact on the latency times. This approach also leads to a better control of the communication resources (e.g. reduce the number of  collisions on an Ethernet).EINBETTEN Excel.Sheet.8Figure   SEQ Figure_ \* ARABISCH 6: Latency of CORBA/Orbix vs. RTI 1.0.3These results have led to the principal idea to combine the exchange of control information (e.g. the request to advance the logical time) with the exchange of simulation data between the simulation servers in one single message. As a result, the overhead for communication and time synchronization is just about 10 ms in an OPERA Platform configuration of five distributed simulation servers. Delays of the logical simulation time with respect to the real-time are detected by the master simulation server and are reported to the simulation clients. The benchmark tests have been repeated with the CORBA interfaces of  the CC and LCs (see  REF _Ref444677335 \h  \* FORMATVERBINDEN Figure  5 for the TimeAdvanceRequest operation). The Windows-NT PC machines for the 10Mbit/s and 100Mbit/s Ethernet tests were both with 300Mhz and 256MB main memory. The test results show that the effect of a Fast Ethernet is negligible up to a message size of 512 bytes which corresponds to a transfer of about 50 port values in one TimeAdvanceRequest operation. For higher numbers of port values, however, the usage of a Fast Ethernet is required.System BenefitsThe major benefits of the OPERA Platform are:Maximum re-use of existing simulation models and applications: This is very important for the end-users as often the company knowledge about the topics to be simulated (e.g. characteristics of a chemical process) is confidential or not easy to re-build in a new system.Low-cost solution based on commercial off-the shelf components (software and hardware) wherever possible:  Simulation applications today are often too expensive and require a specific hardware to be used in a company.Usage of innovative standard concepts such as the HLA Time Management approach tailored to the requirements of a soft real-time environment.Usage of future-proof innovative and platform-independent technology (e.g. CORBA, Java): This facilitates the integration of complementary tools (e.g. in the application operator training these are existing distributed control stations of chemical plants that give the trainees the perception of a "real plant")Flexibility to adapt the simulator configuration whenever required with reasonable costsThese combined features of the OPERA Platform in the application field "operator training" enable end-users to bring the cost of simulation-based training down to a range that can be afforded also by medium-sized chemical plants. Furthermore, the benefit is to use the training system for learning and understanding as well. Operators should be encouraged to play with the simulator, to enjoy their session, to test out the limits and let them experience the risks of a chemical plant in a safe environment, to be as close to the constraints and the optimal operation as possible. When the process simulation models of the end.-user companies (whose development costs are usually very high !) are used for all these tasks as part of the ongoing culture of a company, then their cost per application becomes very small. The OPERA Platform aims at enabling simulation applications to be a mainstream technology of the future.Furthermore, it aims at contributing to the discussion within the HLA community of efficient run-time infrastructure implementations, especially when facing soft real-time requirements.AcknowledgementsThe work described in this paper has been partly funded by the European Commission under its 4th Framework Programme. Special thanks also to all contributing partners of the OPERA consortium. References[1]	ESPRIT Project 24950 OPERA: White Paper. http://opera.iitb.fhg.de[2]	Y. Monsef, , Complex Systems Simulation Modelling, Lavoisier Tec Doc.[3]	B. Ziegler, Object Oriented Simulation with Hierarchical Modular Models : Intelligent Agents and Endomorphic Systems, Academic Press, San Diego.[4]	US Department of DefenseDMSO: "Department of Defense High-Level Architecture Interface Specification", http://www.dmso.mil/projects/hla[5]	“Evaluation Report about Candidate Middleware for HPCS/RT”. Technical Document OPERA 1998.Author BiographiesTHOMAS USLÄNDER graduated from University of Karlsruhe with a masters degree in computer science in 1987. As a research scientist and systems architect at Fraunhofer IITB and Conware Computer Consulting, Karlsruhe, he has developed kernel components of distributed systems, e.g. for ISO/OSI and Internet network management. Since 1995, he is group and project manager at Fraunhofer IITB working on tailored CORBA-based integration platforms and client/server information systems.REINHARD HERZOG studied computer science at the University of Karlsruhe and received his masters degree in 1989. After then he joined the Fraunhofer Institute IITB where he is currently working on simulation and training systems.KYM WATSON studied at the Flinders University of South Australia. He was awarded a B.Sc (Hons) in 1974 and a Ph.D. in mathematics in 1978. Kym Watson has been with the Fraunhofer Institute IITB as a research scientist since 1982. His major fields are performance evaluation of computer networks, simulation, test of communication protocols and fieldbus. He has contributed to and led many R&D projects in the area of information technology and is currently deputy head of the department Telematic Systems. EINBETTEN Word.Picture.8  Figure   SEQ Figure_ \* ARABISCH 1 : The OPERA Platform Architecture