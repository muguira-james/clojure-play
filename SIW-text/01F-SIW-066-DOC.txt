Attribute Level Advisories and ScalabilityKatherine L. Morse, Ph.D.Epsilon Systems Solutions2550 Fifth Avenue, Suite 725San Diego, CA  92103619-702-1700, 619-702-1711 HYPERLINK "mailto:kmorse@epsilonsystems.com" kmorse@epsilonsystems.comFrank J. HodumScience Applications International Corporation5400 Shawnee Road, Suite 110Alexandria, VA  22312703-333-5437 HYPERLINK "mailto:kmorse@epsilonsystems.com"  fhodum@dctd.saic.comPeter M. WickisLockheed Martin Information Systems – Advanced Simulation Center37 North AveBurlington, MA   01803781-505-9526 HYPERLINK "mailto: peter.m.wickis@lmco.com"  peter.m.wickis@lmco.comKeywords:RTI, scalability ABSTRACT: As increasingly larger HLA federations are built, we challenge the limits of scalability.  A recent experience with a large federation identified a scalability issue with attribute level advisories, specifically Turn Updates On for Object Instance.  A workaround was found which met the requirements of the federation, but the issue led to investigation of the fundamental requirements for supporting this functionality.  Here we investigate the underlying data requirements for supporting attribute level advisories, including the impact of the requirement for reliably delivering these mesages and late joiners or subscription changes, and the relationship of the advisories to Object Management services and other Declaration Management services.  We describe a set of alternate approaches which may be adopted according to a federation’s requirements to obtain similar functionality.  Finally, we discuss some potential implementations for the advisories in the context of possible OM/DM architectures ,including the specific implementation within the RTI-NG and investigate design trade offs.IntroductionOften Federation developers pay no attention to the RTI RID file beyond ensuring that the data is identical on all systems, assuming that no connectivity will be possible if they are inconsistent.  However, conflicting RID files can occasionally cause other problems.  We will describe how a RID modification needed to improve the performance of one federate ,Joint Semi-Automated Forces, (JSAF) disabled the operation of another federate, Environmental Data Server (EDS).  Reasons for the performance problem will be investigated, and a simple modification to re-enable the second Federate will be given.  As part of Enviro Fed III [1], the Ocean, Atmosphere and Space Environmental Services (OASES) System EDS [2] is being integrated with JSAF.  Because EDS produces very large arrays of data for individual weather features, e.g. fog and clouds, it is necessary to prevent the generation and distribution of weather features which are not used by other federates.  The first approach to limiting these attributes was to use attribute level advisories, i.e. Turn Updates On/Off For Object Instance.   REF _Ref509749115 \h Figure 11 illustrates a logical design for the use of attribute level advisories between EDS and JSAF.  As we will see, this is not the same as the physical implementation in the RTI.Figure  STYLEREF 1 \s 1 SEQ Figure \* ARABIC \s 1 1.  Attribute Level Relevance Advisory Sequence DiagramIn intial tests, EDS used the attribute level relevance advisory switch with approximately 100 JSAF entities triggering advisories, and the performance degradation was significant. By default, updates are turned off for all attributes and only turned on when an advisory is received.  After that they're never turned back off because JSAF never unsubscribes.  By turning on detailed diagnostics within the EDS, the following behavior was observed with RTI-1.3NGv3.3:EDS	publishes object class XJSAF	subscribes to attributes A, B, C and D of class XEDS	notified by RTI to begin registering objects of class X and does soJSAF	begins to discover objects of class XEDS	notified by RTI to turn attribute A on for update for each registered object of class XEDS	notified by RTI to turn attribute A and B on for update for each registered object of class XEDS	notified by RTI to turn attribute A, B  and C on for update for each registered object of class XEDS	notified by RTI to turn attribute A, B, C and D on for update for each registered object of class XA test of the effects of enabling the Attribute Advisory Heartbeat in the RTI RID file was performed using RTI-1.3NGv3.3 and JSAF5.  A scenario was run involving 72 vehicles.  It performed acceptably with the usual JSAF RID file, which contains the following Advisories section:(Advisories   (ClassRelevanceAdvisorySwitchDefault Disabled)   (AttributeRelevanceAdvisorySwitchDefault Disabled)   (AttributeScopeAdvisorySwitchDefault Disabled)   (InteractionRelevanceAdvisorySwitchDefault Disabled)   (RelevanceAdvisoryInteractionClassHeartbeatIn Seconds Off)   (RelevanceAdvisoryInteractionClassTimeoutIn Seconds Off)   (RelevanceAdvisoryObjectClassHeartbeatInSeconds Off)   (RelevanceAdvisoryObjectClassTimeoutInSeconds Off)   (RelevanceAdvisoryAttributeInstanceHeartbeatIn Seconds Off)   (RelevanceAdvisoryAttributeInstanceTimeoutIn Seconds Off)   (ProvideAttributeValueUpdateDelayTimeInSeconds 5.0)   );; End of FederationSection.AdvisoriesHowever, when the test was re-run with the following two settings:(RelevanceAdvisoryAttributeInstanceHeartbeatIn Seconds 10.0)(RelevanceAdvisoryAttributeInstanceTimeoutInSeconds 20.0)JSAF exhibited a 15-18 second pause after each 10 seconds of execution.  The length of the pause was somewhat variable, but the time between them was not.  Further, the changing the advisory settings to: (RelevanceAdvisoryAttributeInstanceHeartbeatIn Seconds 20.0)(RelevanceAdvisoryAttributeInstanceTimeoutIn Seconds 40.0)brought the uninterrupted runtime up to 20 seconds, without effecting the length of the delay.Another experiment was performed to determine how the quanity of objects effects the delay time.  Resetting to (Heartbeat, Timeout) = (10, 20) vehicles were added progressively, and the delay time was observed.  With 16 or fewer vehicles, the delay was imperceptible (the user-visible clock only has 1 second of resolution) as illustrated in  REF _Ref391034782 \h Table 11:Table  STYLEREF 1 \s 1 SEQ Table \* ARABIC \s 1 1. Delay per Vehicle# of VehiclesDelay (seconds)20124228332336440544648652856106011641268147216....84249632This behavior led to investigation of the RTI 1.3 NG implementation of attribute level advisories and the impact of the implementation on the Enviro Fed architecture.RTI 1.3 NG Implementation Based on the 1.3 Interface Specification [3], the Turn Updates On For Object Instance command is generated whenever an update to an owned object instance attribute would be reflected by any other federate within the federation.  The Turn Updates On For Object Instance command is generated when no other federates would receive a reflect for an update to an object and a previously received Turn Updates On For Object Instance command was generated.In RTI 1.3 NG, every FederationSection.Advisories. RelevanceAdvisoryAttributeInstanceHeartbeatInSeconds seconds, the Local RTI Component (LRC) of each federate uses a TCP exploder to broadcast a list of discovered object instances with the object’s actively subscribed attributes and its subscribed region list, the latter of which is irrelevant to this version of Enviro Fed.  LRCs maintain a list of all owned object attribute instances, the Data Transmission Controllers (DTCs).  DTCs are defined for object class instances as a DTCobject object.  A DTCobject instance has a collection of DTCattributes that maintains the current state of publication, subscription, and ownership for each attribute in the object class instance.  Whenever an LRC receives an discovered object instance list, the current wall-time is stamped onto each DTC attribute entry contained in the sent list only if the attribute is published (and the associated region intersects with the sent subscription region if Data Distribution Management (DDM) is in use) as illustrated in  REF _Ref391038204 \h Figure 21.If the stamped object instance was previously considered “off”, then a Turn Updates Off For Object Instance command is generated.  Every FederationSection.Advisories. RelevanceAdvisoryAttributeInstanceTimeoutInSeconds seconds, the DTC registry is searched and the timestamps checked.  If the timestamps are older than FederationSection.Advisories. RelevanceAdvisoryAttributeInstanceTimeoutInSeconds and the object instance was considered “on”, then a Turn Updates Off For Object Instance command is generated.The size of the broadcast list grows with the number of discovered objects, the number of active attribute subscriptions, the number of regions associated with the subscription, and the size of each region (number of extents & dimensions).  The maximum size of the list is unbounded, although it is generally a function of the number of objects discovered.  Each item is a minimum of about 16 bytes.The advantages of this approach are:The timestamp is the only significant memory overhead for this mechanism, 4 bytes per object class in the FED.The user has control over how frequently the broadcasts occur as well as how often the tables are checked.It uses relatively low bandwidth compared with a strategy using instantaneous knowledge and frequent subscription/publication changes.The user can turn off all bandwidth overhead via the RID parameters.Figure  STYLEREF 1 \s 2 SEQ Figure \* ARABIC \s 1 1.  Maintaining Attribute Instance Subscription InformationThe disadvantages of this approach are:It may have higher latencies as compared with instantaneous knowledge strategies.It requires the user to tune the RID to the application.The federation can exhibit poor performance if the RID parameters are set too low.It has potentially high bandwidth utilization with large numbers of objects.It was this last disadvantage which contributed to Enviro Fed’s performance problems.  Because the objects involved have large numbers of attributes, the broadcast of discovered object instances and the timestamp checking are significantly larger than they would be if only object instance information were shared.The analysis that followed focused on both near term workarounds for Enviro Fed and the data requirements for supporting attribute level advisories which drove the original design.Data Requirements for AdvisoriesAt a minimum, an LRC must know if any owned instance attributes of the local federate are in scope for any other federate in the federation at the current time.  In the absence of DDM, this means that some other federate is subscribed to the associated object class and attribute.  The feasibility, or lack thereof, of maintaining complete, instantaneous, global knowledge in a distributed system has long been the subject of research, but no perfect solution exists.  So, some relaxation of the requirement must be accepted.  Either the information must be delayed, or it must be incomplete.  The situation is complicated for an RTI by the fact that a federation may have late joiners.Alternate ImplementationsThe design decision for RTI 1.3 NG was maintain complete information whose currency, or lack thereof, is controlled by the user.  The issue of late joiners is managed by broadcasting complete information from all federates.Another approach would be to use broadcast, but only to send changes.  This approach has the potential to significantly reduce the volume and frequency of data sent, particularly for federations which perform publication, subscription, and registration at the beginning and perform very few changes throughout the federation execution.  Note that the use of DDM with region changes has the same impact on this problem as frequent subscription changes.  Information must be sent reliably because a missed data set results in an inconsistent federation view which is not easily remedied.  Bringing late joiners up to date must be handled by a separate mechanism.  A central server could be responsible for collecting and maintaining all subscription information.  The LRC at a late joiner would be responsible for querying the server for the entire current data set with the potential resultant performance impact.  There also exists a potential race condition during the period of time between when the LRC requests and the data and when it receives it with respect to whether the LRC or the server is responsible for information broadcast in the intervening time.  Such a central server would have to be highly reliable because it’s loss during federation execution would cause late joiners to be “blind,” and any publication, registration, and subscription information generated during the server’s down time would be lost.  Restoring global consistency would be challenging.A refinement on the preceding two approaches is to limit the data sent to only the subscriptions of interest, i.e. “subscribing for subscriptions.”  This refinement has the potential to reduce the volume of data sent by the preceding approaches, but at the cost of additional complexity.  When an LRC publishes an object class for its federate, the publication is distributed through the federation.  Based on the publication information, subscriptions may be focused by the subscriber’s LRC at the appropriate publishers.  The disadvantages of this approach are twofold.  Sending the publication information has the potential to be as onerous as sending all subscription information, in terms of either bandwidth utilization or complexity depending on the approach taken.  Bringing late joiners up to date is even more difficult since there’s no way of guessing their publication and subscription needs a priori.The point that this exposition should have made clear is that any design of attribute level advisories is a tradeoff between currency and completeness of data which must be paid for in complexity of network bandwidth utilization.Alternate Approaches for FederationsWhile attribute level advisories are challenging to implement efficiently for all forseeable federation scenarios, the fact remains that there are some federations that require their functional equivalent.  Enviro Fed uses a separate configuration file which lists the weather attributes which will be used for the federation execution.  EDS reads the file and only sends the indicated attribute updates.A more dynamic approach may be achieved by sending the information in an interaction, allowing the list of attributes updated to be changed during federation execution.References[1] Robert Lutz and Robert Richbourg.  “The Environment Federation: Simulated Environments Impact Tactical Operations,” in Proceedings of the Spring 2001 Simulation Interoperability Workshop, March 2001.[2] Robert A. Reynolds, Haig Iskenderian, and Steve O. Ouzts. “The Ocean, Atmosphere and Space Environmental Services (OASES) System,” in Proceedings of the Spring 2001 Simulation Interoperability Workshop, March 2001.[3] Defense Modeling and Simulation Office (1998)  “Department of Defense High Level Architecture Interface Specification, Version 1.3,” April 2 1998, Online document at  HYPERLINK "http://hla.dmso.mil" http://hla.dmso.mil.Author BiographiesKATHERINE L. MORSE is the Chief Scientist and Director of Epsilon Systems Solutions’ Modeling & Simulation Business Unit.  She received her B.S. in mathematics (1982), B.A. in Russian (1983), M.S. in computer science (1986) from the University of Arizona, and M.S. (1995) and Ph.D. (2000) in information & computer science from the University of California, Irvine.  Dr. Morse has worked in industry for over 20 years in the areas of simulation, computer security, compilers, operating systems, neural networks, speech recognition, image processing, and engineering process development.  Dr. Morse is a longstanding member of DMSO’s HLA development and technical support team, and is the vice-chair of the IEEE Simulation Interoperability Standards Committee.FRANK J. HODUM is a Deputy Division Manager with Science Applications International Corporation (SAIC) in Alexandria, VA.  He is the program manager for the RTI-NG (Next Generation) program and has been involved with HLA related development for four and a half years.  He has worked on distributed simulation infrastructures for a variety of simulation domains from engineering level simulations to real time human in the loop training simulations to very large scale virtual event driven simulations over the past seven years.  Mr. Hodum received his B.S. in Engineering Physics from Worcester Polytechnic Institute in 1994 and his M.S. in Engineering Management from the University of Central Florida in 1999.PETER M. WICKIS is a Software Engineer with Lockheed Martin Information Systems Advanced Simulation Center where his work focuses on agile FOM interface and networked natural environment development.  Mr. Wickis received his B.S. in computer science from Boston University in 1999. The material in this section is excerpted from the RTI 1.3 design notes.