WARCON JSB Test Bed: A Case Study For Interoperability Of Disparate Simulation ArchitecturesEdward B. Roberts, P.E.Roy R. Newton IIIBMH Associates, Inc. 5425 Robin Hood Road, Suite 201Norfolk, VA 23513-2441757-857-5670roberts@bmh.comnewton@bmh.comKeywords: HLA, DMSO, RTI, ProModel, WARCON, BMH, Joint Semi-automated Forces (JSAF)ABSTRACT: The simulation of large-scale systems may involve the representation of several subsystems or operations by separate simulations or models.  Frequently, simulation models exist for the component subsystems that are not easily integrated for reasons such as model fidelity, implementation language, hardware platform, and other interface issues.  Specifically in the WARCON project baseline, it is of interest to simulate the overall operation of an aircraft carrier and both the tactical and engineering environment in which it operates. For this baseline effort there are three initial areas, each having an existing legacy simulation model with fidelity appropriate for its domain.  A proof of concept simulation has been developed to show that ProModel discrete event simulations and DMSO HLA based distributed simulations can be effectively and efficiently integrated using the facilities of the DMSO RTI.  This paper presents the techniques used in the proof of concept simulation. Time synchronization, data exchange, and control between the simulations are demonstrated through these simulations.1.0 Motivation The WARCON project includes the development of an Integrated Acquisition Environment in which the decision process for the procurement of future aircraft carrier systems and capabilities will be enhanced through the use of computer based technologies.  Included is the integration of multiple simulations to represent the behavior of on-board and theater operations and systems.There exist legacy simulations that operate independently to represent components that are of interest to the WARCON integrated acquisition environment.  Several of these simulations are implemented with the ProModel discrete event simulation package.  The opportunity to achieve considerable cost savings exists with direct use of the existing ProModel simulations.Additionally, the Joint Semi-automated Forces (JSAF) facility, a result of the DARPA Synthetic Theater of War (STOW) program, is a mature, distributed simulation capable of representing theater operations that can be expanded readily to support specific model behaviors required in the WARCON environment[1].  Accordingly, means is sought to integrate the following legacy simulations:JSAF, version 5.0, with SOAR intelligent agents;The Newport News Shipyard Fight Deck Operations simulation, a ProModel simulation;The Newport News Shipyard Weapons Handling model, a ProModel simulation[2].A preliminary analysis concluded that the three simulations could be integrated using the facilities of the DMSO RTI [3].  An experimental test bed was conceived to validate that conclusion.2.0 Initial ExperimentationAn experimental effort was undertaken to demonstrate the feasibility of integrating the three legacy simulations using the DMSO High Level Architecture.  To expedite this effort, two very simple surrogate ProModel simulations were constructed to represent the Newport News Shipyard flight deck operations and weapons handling models.  A simple time step federate, implemented in C++, was used to approximate a JSAF interface with the ProModel simulations.  By working with simplified models, attention was focused upon the issues surrounding the federation of the ProModel package simulations and interface techniques.Three principal criteria for experiment were established:Demonstrate that ProModel simulations can be federated under the DMSO HLA;Demonstrate that time synchronicity between the federates can be achieved;Demonstrate that data can be exchanged between ProModel and other federates.It was decided that the test bed would be throwaway code and the implementation would proceed only to the extent necessary to confirm that the three principal criteria could be reliably achieved.3.0 The Test Bed SimulationsThis section provides an overview of the simulations implemented in the proof of concept test bed.  These are very low fidelity surrogates of the legacy models that will ultimately be employed.3.1 Aircraft Launch/Recovery ProModel Discrete Event SimulationThe first ProModel simulation developed for the test bed mimics the Newport News Shipyard Flight Deck Operations model.  See Figure 1, AC3 Simulation Graphic, above.The operational scenario is as follows:When an aircraft arrives at the catapult, it will remain there until the arming station is vacant.  It is then moved to the arming station where it waits to be armed with a prescribed number of missiles.  If missiles are not available, the aircraft will wait at the arming station until these become available.  When armed, the aircraft is moved to the catapult and is launched. After the launch operation has completed, the aircraft is moved (along the prescribed “flight path”) to the mission station (in the clouds).  ProModel effectively relinquishes control of the aircraft to an external simulation when it is in the mission station.When a land interaction is received, the AC3 simulation determines the specific aircraft that is to land and moves it from the mission location to the recovery holding pattern and then to the recovery station on the carrier deck.  It then leaves the simulation.The AC3 simulation subscribes to two interactions: When a missile built interaction is received from the missile assembly simulation the missile count of the flight deck ready locker is incremented.When a land interaction is received from the time step simulation, the designated aircraft is caused to land.The AC3 simulation publishes a TakeOff interaction when each aircraft leaves the catapult.3.2 Missile Assembly SimulationThe second ProModel simulation mimics the Newport News Shipyard weapons model.  It represents the assembly of components into a final missile assembly and the delivery of the assembled missile to the carrier flight deck ready magazine. This simulation is implemented in ProModel and is federated under the DMSO RTI.  The graphic of this simulation is illustrated in Figure 2, Missile Assembly ProModel Simulation Graphic, above. Each of the supply spaces is initially populated with “missile component” entities. A missile shell is moved from the shell supply space to the first workstation where it is married with a tail cone. The assembly is then moved to the second workstation where it is joined with four fin components. The assembly is then moved to the third workstation to be joined with a nose cone component.  Finally, the completed missed is placed on the conveyance to the flight deck ready magazine.  It leaves the assembly simulation at this point.When the assembled missile leaves the conveyance to the flight deck ready magazine, a missile built interaction is initiated. The aircraft launch and recover simulation subscribes to the missile delivery interaction and adds a missile to its flight deck ready magazine upon receipt of this interaction.  3.3 Time Step (SAF surrogate) SimulationThis C++ simulation is an HLA federated simulation. It interfaces with the ProModel simulation in a manner that illustrates the mechanisms that can be used when JSAF is integrated.  The time step simulation responds to a launch interaction from the ProModel simulation as each aircraft is launched. The mission of the aircraft is simulated (simply wait for the duration of the mission). At the end of the mission a land interaction is initiated which is recognized by the AC3 simulation that then takes control of the simulation of the aircraft to recover it on the carrier deck. The time step simulation is self-regulating to wall clock time.  It is “time regulating” within the HLA federation and therefore causes other federates to advance time at wall clock speed. This simulation utilizes a command line interface and terminal output, which is illustrated in Figure 3- Time Step Simulation Terminal Output, above. 3.4 JSAF 5.0 IntegrationAlthough not initially part of the planned test bed, JSAF version 5.0 was integrated into the test bed with the ProModel Federates.  JSAF 5.0 was augmented with a new behavior so that when a launch interaction was received from the AC3 model, JSAF would launch an aircraft from a CVN Model.4.0 Time SynchronizationA principal objective of this study is to demonstrate that time can be synchronized across an HLA federation using ProModel federates.  To achieve this, each ProModel simulation includes a time synchronization oscillator (TSO) model.The TSO moves an entity (time slice entity) between two ProModel locations at a defined rate.  Each time the entity arrives at the first location, CURRENT TIME is advanced by the duration of one complete circuit between the two locations.  Through a XSUB (ProModel external interface facility) call, a time advance request is made to the RTI to advance time to the value of the updated CURRENT TIME.  The ProModel simulation is halted until the time advance request is granted.  Thus, the ProModel discrete event simulation is throttled into time synchronization with the other HLA federates.  The TSO is illustrated in the lower half of Figure 1, AC3 Simulation Graphic on a previous page.The time for the time slice entity to transition between the two ProModel locations is specified to be 0.05 seconds.  Thus, a request for time advance is made to the RTI every 0.1 seconds or ten (10) times per second.  The specific timings can, of course, be tailored to best fit the time resolution required for a specific simulation.5.0 Test Bed ArchitectureThe simulations in the test bed are primarily Intel based processes requiring the use of a PC based machine such as a Pentium computer with memory sufficient for running the simulation.  JSAF is a Linux-based simulation requiring a minimum of 256 megabytes of memory for operation.  It was decided that for test bed configuration, the RTI would be run on the same machine as JSAF or the time step within the Linux environment.  Windows NT was chosen as the operating system platform to host the ProModel simulations.  Networking facilities include a typical 100baseT ethernet network with all federate machines connected to an off the shelf hub.  The RTI uses standard TCP/IP networking protocols as the foundation of its communications so operating system implementations of TCP/IP were entirely sufficient to run the test bed. 6.0 ProModel HLA InterfaceProModel includes a facility to allow developers to call out to external code written in a common language, such as C++, that has been compiled into a windows dynamic link library (dll).  The ProModel XSUB facility can call a routine that resides in an external dll, passing an arbitrary number of arguments then returning a value generated by the external routine.  Additionally, dynamic link libraries can be made to link against existing dynamic link libraries, such as the DMSO RTI.  Using this functionality, wrapper functions are constructed to encase the RTI routines in a way that is compatible with the ProModel XSUB facility.  These wrapper functions can then be used to interface a ProModel simulation with an HLA federation.  The federating process includes making calls via XSUB to the ProModel/HLA interface to create the federation execution and then join the newly created federation.  Subscription to objects and interactions may be achieved in the same manner with the dll storing information returned from the RTI, such as interaction class handles, on behalf of the ProModel federate.  Time services are initialized in much the same manner.  Wrapper functions forward requests from a ProModel federate to the RTI for enabling time regulation and time constrained operation.  The initial federation time returned from the RTI is then passed back to the ProModel federate via the XSUB facility.  At this point, the ProModel federate may begin making time advance requests, again via XSUB, to the RTI.  The wrapper time advance request routine is constructed to return from the call after a time advance grant callback from the RTI has been received.  This suspends the ProModel federate processing until the federate logical clock can be advanced in synchronization with the federation.7.0 Test Bed Application Data/Interaction FlowsFigure 4, on the following page, graphically describes the interaction and data flow between the ProModel simulations and JSAF/time step simulation.  The governing time synchronization oscillator mechanism makes time advance requests to the dll, which forwards the request to the RTI.  A time advance grant is issued by the RTI when it is safe for the ProModel federate to advance its logical clock.  This process continues through out the execution of the simulation. Each ProModel federate initiates a series of events that result in the federate creating the federation execution, if it does not currently exist, and then joining the newly created federation.  After the initialization process, aircraft begin to arrive at the flight deck elevator.  Once present in the system, the plane advances to the arming station to obtain ordnance and then proceeds to the catapult for take off.  When a plane leaves the catapult, a TakeOff interaction is sent containing the plane’s flight duration.  At this point, JSAF receives this interaction and begins simulating the flight of the aircraft for the specified duration.  Once this duration has expired, a Land interaction is sent back to the flight deck model, which proceeds to land the aircraft.  In order to allow retrieval of multiple values from an interaction, a mechanism was created which basically produces a representation of the entity within the dll.  When an interaction occurs, this entity is put on an internal queue, which is later retrieved by the ProModel federate during its time advance request processing.During flight deck operations, the assembly model is constantly producing ordnance for use by aircraft.  After a missile has finished its build phase, it is placed on the conveyance to the flight deck. At this point, a MissileBuilt interaction is sent and received by the flight deck, which in turn increments, the count of the ready magazine by one. 8.0 ConclusionsAfter initial successes were achieved, the test bed criteria were expanded to address several additional areas of interest to the WARCON project.  Each of those issues along with the conclusions reached are presented below:Can ProModel simulations be federated using the DMSO HLA RTI?The ability of a ProModel simulation to be federated under the DMSO HLA RTI has been effectively demonstrated.Can time synchronization be achieved between ProModel federates and other federates using the time management facilities of the DMSO HLA RTI?It has been demonstrated that simulation time between three separate simulations, two ProModel and a third C++ simulation can be synchronized.  Further, it has been demonstrated that the federation can be regulated to real-time.  In the case of this study, the regulation was provided by the C++ time step simulation initially and later by JSAF 5.0.Can a ProModel federate publish Interactions to be received by federates other than ProModel federates.This capability has been demonstrated.  The time step simulation receives TakeOff interactions from the AC3 ProModel simulation.  It, in turn, publishes land interactions to control the reentry of the aircraft entities into the ProModel domain.Can a ProModel federate subscribe to Interactions and use these to modify its behavior?In the study simulations, the AC3 simulation subscribes to both land interactions and to missile built interactions.  In each case, control of the ProModel simulation is exercised by these interactions. 	What is the level of effort required to integrate ProModel simulations in an HLA federate?Approximately 6 man-weeks were required to develop a prototype interface scheme for supporting ProModel simulations as HLA federates.  People not familiar with ProModel did this from “ground zero”.  Knowledge has been gained that will support the development of a more robust and generalized interface.  While the effort is not trivial, the interface lends itself to a structured, object-oriented implementation.  Its development for WARCON is viable and efficient.	Can data be passed between separate ProModel simulations using the DMSO HLA RTI?In the study simulations, data is passed from AC3 to the Time Step simulation.Can one ProModel simulation influence the control flow of a second ProModel simulation using the DMSO HLA RTI?This capability is demonstrated as in (4) above.  Additionally, in the study simulations, aircraft are not launched until sufficient missiles are ready in the flight deck magazine. Hence, the assembly simulation is controlling the flow of the AC3 simulation by means of supplying it with missiles.What are the performance limitations or concerns associated with federating a ProModel simulation?No performance limitations have been identified.  We had concerns that the ProModel XSUB call can return only one real value at a time.  Initial tests indicate that this is not a significant limitation.What are the limitations or concerns related to ProModel sending and receiving federation data?No limitations have been identified. Further study of throughput under various conditions and simulation objectives is deemed advisable. Can any strengths be identified for using ProModel for components of a larger HLA based federation?The relative ease with which simulations can be constructed in the application domain is an easily recognizable strength.  It has further been demonstrated that to integrate multiple ProModel simulations as HLA federates can be accomplished efficiently and with little risk.Can any weaknesses be identified in using ProModel for components of a larger HLA based federation?It is apparent the ProModel lends itself well to the over all objectives of distributed simulation using the DMSO RTI.  Throughput of the RTI is likely to be the most constraining factor.  None has been identified in ProModel other than the limitation of XSUB to return but one value per call.  As previously stated, this does not appear to be a significant constraint.Can a well-structured and cohesive interface be designed and implemented in a reasonable amount of time, to facilitate rapid integration of ProModel simulations into the JSB?Based upon the success of the initial study simulations, we believe that a sufficiently robust interface can be developed efficiently and with minimal riskReferences:[1] Budge, Larry D. MG (Ret) (1997) Synthetic Theater of War (STOW) 97 Overview.[2] ProModel, Manufacturing Simulation Software, ProModel Corporation, Utah 84097[3] Defense Modeling and Simulation Office, website, www.dmso.comAcknowledgements:The authors wish to acknowledge the contributions of Mr. William Marshall Denny II who assisted in the implementation of the test bed software development and those of the Newport News Shipbuilding, Inc. Carrier Innovation Center technical staff who assisted in the development of the application scenarios and their introduction to the ProModel Simulation facility.  Mr. Mike Cox of Lockheed added logic to JSAF to enhance its ability to represent ProModel initiated events.Authors Biographies:Edward B. Roberts, PE is a senior software engineer with BMH Associates, Inc., a Norfolk, VA based simulation systems engineering and software development company.  Formerly with IBM, Scientific Systems Services, Inc. and Harris Corporation, he has been involved with a wide variety of computer based real-time supervisory control, data acquisition, communications, and manufacturing control systems projects.  He received a Bachelor of Science in Electrical Engineering degree from North Carolina State University in 1970 and is a Registered Professional Engineer in the State of North Carolina.Roy R. Newton III is a software engineer with BMH Associates, Inc.  Mr. Newton began his career with BMH Associates in the summer of 1996 at which time he was exposed to simulation projects ranging from the STOW ACTD to systems administration of medium to large-scale experiments.  Since that time, Mr. Newton has received an Associate of Science degree in Computer Science from Tidewater Community College and a Bachelor of Science in Computer Science from Virginia Tech in 1999.   RTI  NG 1.3 v3RTI calls and callbacksJSAF/Time StepMaintain wall clock timeSubscribe to  TakeOff interactionsDetermine aircraft landing timePublish land interactionsTime regulating federateDestroy FederationDLL-request time advance-provide updated federation time to the ProModel simulations-       create federation executionjoin federationpublish and subscribe to interactionspublish launch interactionsubscribe to land interaction and initiate cleared to land upon receiptsubscribe to missile built interaction and initiate missile delivered  update to ProModel simulationPublish missile built interaction - leave federation and clean up DLL working memoryMissile builtinteractionMissile deliveredCleared to landLaunch interactionCreate/Join federationTime advance grantTime advance requestEnd SimulationConveyance to FD Ready Magazine(Missile Assembly)FD Ready Magazine(AC3)Mission Process(AC3)Launch Process  (AC3)Initialization Process     CURRENT TIMETime Synchronization        OscillatorProModel Simulations                                                     Figure 4- Federation Data/Interaction Flow                                                        Figure 4- Federation Data/Interaction Flow                                                Figure 1- AC3 Simulation Graphic                           Figure 2- Missile Assembly ProModel Simulation Graphic                                Figure 3- Time Step Simulation Terminal Output