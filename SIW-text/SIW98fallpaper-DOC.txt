Implications of Developing an HLA-Compliant Logistics Model:Lessons LearnedCharles M. Macal Zhian Li and Michael R. NevinsDecision and Information Sciences DivisionArtificial Intelligence SectionArgonne National LaboratoryArgonne, IL 60439630-252-3767, 630-252-3388, 630-252-6901 macal@dis.anl.gov, liz@smtplink.dis.anl.gov, nevins@dis.anl.gov Melvin J. Sutton, Jr.Military Traffic Management Command Transportation Engineering Agency720 Thimble Shoals Blvd., Suite 130Newport News, VA 23606757-599-1638Suttonm@baileys-emh5.army.milKeywords:Logistics, HLA, Interoperability, Federation Creation, Data Mapping, Data Aggregation, Time ManagementABSTRACT: The U.S. Department of Defense (DoD) High Level Architecture (HLA) provides the military simulation and modeling community with a common implementation standard and integration environment for promoting and facilitating the development of interoperable and reusable models.  The DoD simulation and modeling community has expended substantial effort and has made significant progress in migrating military simulation models to HLA compliant standards.  While most of the technical issues related to developing HLA-compliant simulation models have been solved, the issue of what HLA compliance implies for a model has not yet been adequately addressed.  One lesson learned in developing HLA-compliant logistics models is that making models HLA compliant is not sufficient to guarantee that the models will work with each other.  Some additional issues must be resolved when developing a federation in the HLA environment: (1) The federation developer must make sure that at least one federate will be responsible for creating the federation execution process. In turn, the model developer must have prior knowledge about what federates the model being developed will federate with in a possible future federation.  (2) Appropriate actions must be implemented in the federate so that it can capture incoming events and take meaningful actions. Determining the response of a federate to incoming events from other federates in a federation, however, requires a thorough analysis of the entire federation design, as well as each individual federate in the federation.  (3) Data aggregation and disaggregation problems must also be solved if federates are developed at different scales.  (4) The time advancement needs to be determined, and the timing for each federate to join the federation is also important to guarantee that federates interact correctly.  (5) Special problems, such as the object ownership transfer problem, must also be solved.  This paper summarizes the lessons learned in developing HLA-compliant models, and its purpose is to bring up this important issue to our logistics community, as well as to other forums. I.  Introduction Reusability and interoperability are critical issues in simulation and model development. Developing interoperable and reusable models has long been the aspiration of the modeling and simulation community for software reliability and economic benefits. Software development costs and the risk of software failure can be substantially reduced if models are interoperable and reusable.  The U.S. Department of Defense (DoD) High Level Architecture (HLA) [1] provides a common implementation standard and integration environment to the military simulation and modeling community for promoting and facilitating the development of interoperable and reusable models.  It is a significant step toward the realization of developing interoperable and reusable models.  Creating a federation (integrating models) from the HLA-compliant models (federates), however, can be a major challenge because making all models HLA compliant is not sufficient to guarantee that models can be integrated in the manner of “plug and play.”  Several additional issues must be resolved when HLA-compliant models are integrated to form an application.   First, in the HLA environment, model integration is not achieved by bonding models together. Models participate in integration by joining the federation.  A federation execution process must be created before any federates can join the federation.  A federation execution process, however, can only be created at the time models are integrated.  The federate developer cannot predict what federation the federate will join in the future.  Second, HLA requires that all federates in a federation agree to the format and content of the data to be exchanged.  In the HLA environment, a federate provides data and/or interactions to other federate(s) by publishing the data and interactions to the Run-Time Infrastructure (RTI). A federate receives data and/or interactions by subscribing to these data and/or interactions from the RTI. Each individual federate must interpret the data and/or interactions it receives.  As a result, the federate developer must know in advance what data and interactions the model is going to receive. Third, models may have been developed at different levels of detail.  Data aggregations and disaggregations may be needed in developing application federations from different models, especially for legacy models, because legacy models are usually developed for a specific type of analysis.  Model interoperability and reusability are normally not emphasized in the development of legacy models. Finally, time management is also a critical component of HLA model integration. In the HLA environment, integrating models is not achieved by mechanically linking them together or compiling them into a single load module.  Instead, federates voluntarily come together to form a federation.   A federate can join a federation at any time.  The federation can neither require nor request a federate to join. To guarantee that models interact consistently, models must synchronize not only their time advancement but also the timing for them to initially join the federation. In addition, issues specific to domain or model integration must be resolved.  The HLA object ownership transfer issue, for example, is a special case for model integration that involves logistics models [2].   The HLA does not directly address this issue, and direct RTI service is not available.  Federation developers must find ways to solve problems, such as the object ownership transfer,  that are specific to their applications using available RTI services.Beyond the above-mentioned problems and other technical problems that may be specific to a federate or  a federation, a good federate or federation development strategy is also important. HLA is a relatively new architecture to the modeling and simulation community, and so a phased approach will substantially reduce the level of complexity in both the federate and the federation development stages.    In summary, the HLA architecture has established a common implementation standard and integration environment for developing interoperable and reusable simulation models.  However, making models HLA compliant is not sufficient to guarantee that they can be assembled to form a meaningful application integration.  Additional efforts are needed.  This paper explores the implications of HLA compliance, together with lessons learned in developing HLA federations in the HLA environment. II.  Creation of the Federation ExecutionProcess In the HLA environment, a model integration is created by federating federates together. To develop a federation, a federation execution process must be created first by a federate using the RTI service createFederationExecution(“FederationName”, “Name of the FED File”) [3].   Other federates can then join the federation execution process by calling the RTI function joinFederationExecution(federate_name, federation_name, &federateAmbassador) [3]. These requirements show that at least one federate in the federation must be responsible for creating the federation execution process.  In addition, all federates must know the name of the federation they are going to join. For a federate to carry out these tasks, computer code must be implemented in the federate.  The question then becomes which federate in the federation should be responsible for creating the federation execution process. The answer to this question is that none of the federates in the federation bears this responsibility.  A federate developer does not know, cannot predict, and is not supposed to guess what federation(s) the federate is going to join in the future.  On the other hand, federates should not be implemented for creating a specific federation.  The merit of software reusability, which is the foundation of the HLA architecture, is corrupted if a federate is implemented for creating a specific federation execution process, because the federate will not be able to participate in other federations that have different names. The solution to this problem is either to allow the federate to accept command line input of the federation name or to develop a federation creation federate at the time of federation development.  To use the first strategy, all federates must be implemented to allow for command line federation name input.  This issue is not addressed adequately in the HLA documentation, nor is it a requirement of the model HLA compliance test.  The issue, however, is directly related to the interoperability and reusability of the HLA-compliant models.  We suggest that this issue should be addressed as part of HLA compliance testing.  Once models have passed this testing and been put into the Modeling and Simulation Resource Repository (MSRR), resurrecting the federates that are already in the MSRR could be time consuming and costly.III.  Data and Interaction Bonding One of the most important, and most difficult, issues to resolve in developing interoperable and reusable models and model integration applications is data and interaction bonding. This issue stems from the essential requirement that models that are to be integrated must understand the data and interactions to be exchanged.  In other words, models in a federation must consent on the formats and contents of the data and interactions that need to be exchanged.  Any ambiguity in the data and interaction bonding leads to unexpected results. This fact is also true in the HLA environment.In the HLA environment, data exchanges are made through the RTI in the form of HLA objects.  Interactions are delivered through the RTI in the form of HLA interaction classes.  An HLA federate (model) provides data and interactions by publishing HLA objects and interactions to the RTI.   Other federates in the federation obtain data and interactions by subscribing to these HLA objects and interactions from the RTI.  To do so, the abstract class of the objects and the interactions to be published must be defined in the Federation Execution Data (FED) file.  A federate must create instances for these object classes and register these instances with the RTI before any data can be sent.   Once the RTI receives object registration, it informs all federates that have subscribed to the object class that a new object of this class has been discovered. The method of the FederateAmbassador class FederateAmbassador::discoverObjectInstance(…) [3] must be implemented to capture the object ID for the object that has been discovered.  The data communication channel is thus created.  The federate that publishes the object class can now provide data by updating the objects registered with the RTI.  The RTI informs all federates that subscribe to the objects through the federateAmbassador that data have been provided. The method reflectAttributeUpdate(…) of the federateAmbassador of each federate must be implemented to capture and save the data received by the federate.  The interaction delivery mechanism works on the same principle, but in a slightly different manner.  The above recapitulation of the data and interaction delivery mechanisms used in the HLA architecture indicates that it is essential that both the providers and the receivers of an object to agree upon the structure and the contents of the object.  The receiving federates must be able to interpret precisely the data they receive.  Any ambiguity will result in erroneous results.  Therefore, the federate developer must know in advance what data and interactions the model is going to receive.  Despite the great effort in attempting to establish standard taxonomies, a Real-time Platform Reference Federation Object Model (RPR-FOM), and Reference FOMs in the DoD simulation communities [4], [5], [6], creating a set of common taxonomies and RPR-FOMs across the board will be extremely difficult (if not impossible) because of the complexity and diversity of simulation models. First, it is almost impossible for the federate developer to predict all possible models that the federate will interact with in the future.   Therefore, the federate developer cannot decide what objects and interactions the federate should publish and subscribe to.   Even if the federate developer knew what models the federate would interact with and the exact formats and contents of the objects and interactions that the federate would publish and subscribe to, the federate would have to cater to all potential federates, which would be a very heavy burden.   Second, objects and interactions may be represented with different names and attributes in different models.  The same object may also have different significance in different models.   An attribute that is very important in one model may have little or no importance in another model.    For example, the weight of a tank is a very important parameter in a logistics model.  This parameter is, however, of little concern in a warfighting model.  The weapon capacity of a tank, which is important to a warfighting model, on the other hand, may be completely ignored by a logistics model.  If a federation involves both warfighting models and logistics models, one of the models must be modified so that all models in the federation can interpret the objects they receive, even if these objects are defined with different attributes.Third, most of the simulation models are developed at a specific level of detail.  When models with different levels of detail are to be integrated, data aggregation or disaggregation may be needed in certain federations.   For example, a berth is defined as an attribute of a port in a port simulation model.  It is, however, defined as an area by a set of geographic reference points in a warfighting model.  If a port simulation model is to federate with a warfighting model, the data aggregation issue must be resolved by either modifying the federate or using a third-party federate to dynamically translate the data between models.  All of the above issues that may emerge in developing a federation from HLA-compliant models suggest that a data/interaction mapping federate may substantially increase the interoperability and reusability of HLA-compliant models and reduce the effort expended on developing standard objects and reference FOMs.  A data and interaction mapper will be especially helpful in problems that require data aggregation and disaggregation. Solving data aggregation and disaggregation problems will also increase scalability and interoperability of the model.IV.  Time ManagementTime management is the third important issue to resolve in developing federations from HLA-compliant models.  Although the RTI provides time-stamped data and interaction deliveries, it is not sufficient to guarantee that models will receive correct data and interactions.  A critical factor that contributes to the data and interaction deliveries is the timing for a federate to join the federation.   In the HLA environment, it is up to the individual to decide when to join the federation.  The federation has no control over a federate until the federate successfully joins the federation.   Figure 1 is an illustration of the relationship between federate and federation time axes.Figure 1 shows that Federate A will not be able to request updates for objects published by the other federates, namely, Federates B, C, and D, until these federates join the federation.  The same is true of all other federates.  It is important to point out that Federate A will not be constrained at least until Federate D joins the federation, because there is no federate in the federation to generate time-stamped messages.   For example, if Federate A in Figure 1 needs input from Federate C at time T and Federate C will not join the federation until time T’ = T + dT on Federate A’s time axis, Federate A will keep rolling on to time T’.  If Federate C starts providing data at this point, Federate A may no longer need the data, or the data may be obsolete. Hence, the timing for a federate to join a federation is also important for guaranteeing that the federation can produce meaningful results.  The HLA architecture, however, does not provide any mechanism for enforcing the order for the federates to join the federation. The order of data exchange is affected, at least initially, by the order in which the federates join the federation.  This implies that the federation developer has to guarantee not only the federates’ consent to the formats and contents of the objects and interactions to be exchanged, but also the correct order and timing for the federates to join the federation.  Failure to do so will result in incorrect federate synchronization. Figure 1.   Relationship of Federation Time Axis and Federate Time AxesV.  Object Ownership Transfer In addition to the above-mentioned common issues that may arise in developing federations, the federation and federate developer must also solve problems specific to certain federations.   If direct RTI service functions are not available or the architecture does not directly address these specific issues, the federation developer must solve these problems by using the existing RTI functions.  The object ownership transfer problem is one such problem, a special problem for federations that involve logistics model(s) [2].  In such applications, the functionality of the logistics models in the simulation federation is to transport personnel and equipment from their origins to their required destinations, usually combat models.  The combat models must possess and be able to update the objects when they receive them. Conceptually, transferring the ownership of the attributes is not equivalent to transferring the ownership of the objects themselves. However, no direct RTI service is available to handle the object ownership transfer issue. The federate and federation developer must find a way to resolve this problem.  Converting this problem to an interaction problem is a good solution strategy [2].  VI.  HLA Federate Development Strategy: A Phased Approach   One lesson learned in developing HLA-compliant models is that a good approach is very important to the success of federate development.  Practical experience suggests that a phased approach will help the federate developer understand the capability of the architecture and the implications of HLA compliance (i.e., what a federate developer must do when developing HLA-compliant models to make the model truly interoperable and reusable). An HLA-compliant model can be developed in three phases. Each phase implements a key HLA functionality, namely, object publication and updating, object subscription, and time management.  The purpose of using this approach is to isolate problems and hence reduce the complexity of implementation. In Phase I of this approach, a “middle-ware” can be developed.  The middle-ware creates a federation execution, joins the federation execution, and publishes and registers objects to be published.  A static linkage is established between the middle-ware and the model that is to be made HLA compliant.  The model itself is kept intact.  The middle-ware runs the model once and reads the output of the model.  The middle-ware then updates the HLA objects at given time steps.  In Phase II, which is a continuation of Phase I, subscriptions to the incoming data and interactions are implemented.  The middle-ware runs the model after the creation of federation execution and publication and registration of objects have beencompleted.  The middle-ware then reads the output of the model and uses the new data to update the objects at the current time step. Because the middle-ware has subscribed to the objects and interactions published by other federate(s), it must capture the updates of the objects and interactions it subscribes to and update the input files of the model.  The middle-ware then runs the model again with the updated input.  A quasi-dynamic HLA federate can be obtained with minimal disturbance to the legacy model.In Phase III, the full dynamic RTI capability is  implemented.   The middle-ware now merges into the model.  The time advancement of the model should be turned to the RTI time management if the federate is time-regulating and/or time-constrained.  An HLA federate with full HLA capability is obtained for the model.Practical experience suggests that the three-phase approach significantly reduces the complexity of federate development because it isolates problems and allows the developer to solve them one at a time.  This approach is especially effective for cases in which legacy models are to be made HLA compliant.VII.  ConclusionsThe High Level Architecture (HLA) provides the military simulation and modeling community with a common implementation standard and integration environment for promoting and facilitating the development of interoperable and reusable models. Creating a federation (integrating models) from the HLA-compliant models (federates), however, can be a major challenge because making all models HLA compliant is not a sufficient guarantee that models can be integrated in the manner of “plug and play.”  Several additional issues must be resolved when HLA-compliant models are integrated to form an application.   First, a federation execution process must be created before any federates can join the federation.  The corresponding RTI service call must be implemented in at least one of the federates in the federation.  A federation, however, can only be created when model integration is developed.  None of the federates in the federation is responsible for creating the federation execution process.  The model developer(s) are not assumed to possess any knowledge about what federation the model will join in the future.  Second, and more important, is that HLA requires that all of the federates in a federation must consent on the format and content of the data to be exchanged.  Individual federates must interpret the data and/or interactions they receive.  This requires that the federate developer know in advance what data and interactions the model is going to receive.  Despite the great effort in attempting to establish standard taxonomies, Real-time Platform Reference Federation Object Model (RPR-FOM), and standard Reference FOMs in the DoD simulation communities, creating a set of common taxonomies and standard reference FOMs, including RPR-FOM, across the board will be extremely difficult if not impossible.  The same objects and interactions may not be represented in the same formats and contents in different models.  Data and interactions may have to be transformed, translated, or mapped into different formats and contents.Third, data aggregations and disaggregations may be needed in the data transformation, translation, and mapping processes.  Models have been developed at different scales, especially legacy models.The time management issue is also a critical component of HLA model integration.  To guarantee that models interact consistently, the federation must coordinate the timing for a federate to join the federation.  Failure to do so results in false object and interaction updates.In addition, issues specific to domain or model integration must be resolved.  The HLA object ownership transfer issue, for example, is a special case for model integration that involves logistics models. The federation developer must find ways to solve such problems by using available RTI services.Besides technical problems that may be encountered in the development of federates and federations, a good federate or federation development strategy is also important.  One of the lessons learned in the development of HLA federates and integration is that a phased approach substantially reduces the complexity of federate and federation development. VIII.  ReferencesDefense Modeling and Simulation Office (DMSO), “High Level Architecture Interface Specification Version 1.3,” April 1998.Z. Li, C. M. Macal, and M. R. Nevins, “Ownership Transfer for Non-Federate Object and Time Management in Developing an HLA Compliant Logistics Model,” Proceedings of  the 1998 Spring Simulation Interoperability Workshop, Orlando, FL, March 1998.Defense Modeling and Simulation Office (DMSO), “High Level Architecture Run-Time Infrastructure Programmer’s Guide Version 1.3,” March 1998.J. Boyd, L. Olsen, and T. Nabors, “Crossing a Taxonomy with a Standard Data Model Yields Superior Offspring,” Proceedings of  the 1997 Fall Simulation Interoperability Workshop, Orlando, FL, September 1997.M. G. Rybacki and M. Blackman, “Evolving a Logistics Modeling and Simulation Taxonomy,”  Proceedings of  the 1997 Fall Simulation Interoperability Workshop, Orlando, FL, September 1997.D. D. Woods, “DIS Radio Protocol Representation and Translation in the RPR FOM,” Proceedings of  the 1998 Spring Simulation Interoperability Workshop, Orlando, FL, March 1998.IX.  AcknowledgmentWork supported under a military interdepartmental purchase request from the U.S. Department of Defense, Military Traffic Management Command Transportation Engineering Agency, through U.S. Department of Energy contract W-31-109-Eng-38.Author BiographiesCharles M. Macal directs the Artificial Intelligence Section and leads the Logistics Modeling and Simulation Program at Argonne National Laboratory. His research interests include simulation modeling and architectures, and agent-based modeling, He received a Ph.D. in operations research from Northwestern University and degrees from Purdue University.  He is a registered professional engineer in Illinois and a member of INFORMS, the American Association for Artificial Intelligence, the Society for Computer Simulation, and Tau Beta Pi.Zhian Li is a research software engineer at Argonne National Laboratory, who has worked in many research areas.  His main research interests include computer simulation and modeling, operations research, and geographic information systems. He received a Ph.D. from The Pennsylvania State University, an M.S. from the Institute of Atomic Energy, and a B.S. from TsingHua University.  He is currently working on the development of HLA federates for the logistics models developed at Argonne.Michael R. Nevins is a software engineer in the Decision and Information Sciences Division of Argonne National Laboratory. He received an M.S. in computer science from DePaul University and a B.S. in computer science from Elmhurst College.  He is the developer of the PORTSIM model. His research interests include simulation modeling and object-oriented software design and development.  He is a member of Phi Kappa Phi, Pi Mu Epsilon, and the Society for Computer Simulation.MELVIN J. SUTTON, Jr., is a senior project engineer in the Systems Integration Division of the Military Traffic Management Command Transportation Engineering Agency (MTMCTEA) in Newport News, VA.  He received a B.S. in mechanical engineering from Old Dominion University and is a graduate of the Army Management Staff College.  His current duties include ensuring the HLA migration of several MTMCTEA force projection modeling and simulation tools, participating in DoD and Army M&S management activities, and acting as the Army Standards Category Coordinator for Deployment/Redeployment. 