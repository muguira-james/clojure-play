Integrating Simulations into DII COE Compliant C4I SystemsGene Layman, Ph.D.Naval Research LaboratoryWashington, DC 20375-5000202-767-6873 layman@nrl.navy.milJohn DalyITT, NRLWashington, DC 202-767-6766  HYPERLINK "mailto:jjdaly@ninja.nrl.navy.mil" jjdaly@ninja.nrl.navy.milDaniel RobinsonSFA, NRLWashington, DC 202-767-5728  HYPERLINK "mailto:drobinson@nrl.navy.mil" drobinson@nrl.navy.milJim WeatherlyOPNAV N60MBAlexandria, VA703-601-1496 HYPERLINK "mailto:weatherly.jim@hql.navy.mil" weatherly.jim@hql.navy.milKeywords: C4I, DII COE, Modeling and Simulation Software Development Kit (M&S SDK), Simulation based C4I Applications, Embedded Simulation Infrastructure (ESI), Decision Aids, Planning, Course of Action Analysis, Simulated Common Operational Picture (SIM COP). ABSTRACT: This paper reports progress on the Navy’s Embedded Simulation Infrastructure (ESI) Program and describes the ESI methodology for  integrating  embedded models and simulations into those C4I systems that are compliant with the Defense Information Infrastructure Common Operating Environment (DII COE). The ESI Modeling and Simulation Software Development Kit (M&S SDK), under development, provides standard software tools to link simulations to internal DII COE and C4I functions. It also provides software methods to manage both simulated data and variable time bases in C4I systems. These M&S services are being used in the design of five new Mission Applications in four separate C4I systems and will be available to developers in FY 03. OverviewThe purpose of the Embedded Simulation Infrastructure (ESI) is to facilitate the development of simulation based applications within DII COE compliant Command, Control, Communications, Computer and Intelligence (C4I) systems. DII COE compliant examples include the Global Command and Control System (GCCS), Navy maritime version (GCCS-M), Army Global Command and Control System (AGCCS), Integrated Intelligence & Imagery (I3) System, Air Force Theater Battle Management Core Systems (TBMCS) and the Global Combat Support System (GCSS). Several previous papers have described the evolution of interoperability between C4I and simulations and made the case for simulations within mission applications. [1], [2], [3], [4]The ESI provides: first, an architecture model for integrating simulations into C4I systems; second, software links to interface simulations to internal C4I functions and services, and third; common Modeling and Simulation (M&S) software functions that can be integrated within application designs. These capabilities will be available to developers in 2003 in the Modeling and Simulation Software Development Kit (M&S SDK). Applications under Development The following simulation based Mission Applications are being developed using the ESI Architecture and the M&S software services that will be available in the M&S SDK:Weapons of Mass Destruction Analysis (WMDA) Mission Application – GCCS and GCCS/M.C4I Team Training System (CTTS) – GCCS/M.Embedded Training (ET) – I3, GCSS, GCCS, and GCCS/M.Reconstruction Segment – GCCS/M and GCCS.Large Area Tracking Range (LATR) C4I Segment – GCCS/M.Two of these applications, WMDA and CTTS, will be discussed in later sections to illustrate the ESI Architecture.ESI Class of Mission Applications A fundamental purpose of all C4I systems is to support the Command and Control continuum which is to assess a situation, plan a course of action, supervise the execution of the plans and repeat this cycle continually.  C4I systems operate in real world situations to analyze and/or clarify facets of tactical situations. As such, they process real world data and present a common operational picture (COP) as accurate as possible and as close to real time as possible. In contrast, simulations often work with synthetic data in non real time. Planning and course of action (COA) analysis, for example, deal with postulated situations that may occur in the future. The ESI architecture and M&S services are being defined and developed to support Mission Applications that have the following characteristics not normally performed:  Simulate tactical situations. Insert simulated data into operational C4I systems.Operate with a variable time base (e.g., time projection).Access C4I environmental and technical data bases to support simulations.Perform scenario based analysis on postulated situations.Display simulation outputs into the C4I Common Operational Picture (COP).Integrate simulation products with other C4I applications. Two of these characteristics, inserting simulated tactical data into operational C4I systems and operating with a variable time base, have historically been very challenging.The DII COE ArchitectureA simulation based application, like any other type, is built over the DII COE.  This C4I/DII COE Architecture is shown in Figure 1. SHAPE  \* MERGEFORMAT Figure 1DII COE/C4I ArchitectureThe DII COE is represented by the three middle layers in the figure, designated as Common Support Applications, Infrastructure Services and the KernelAlthough many other DII COE components exist within each level, those shown are by far the most significant to the class of applications of interest and represent the most complex interfaces. They include the Joint Mapping & Visualization (JMV), Data Access Services, Tactical Management System (TMS) and Universal Communications Processor (UCP). Mission Applications are shown at the top.  A C4I system will contain dozens of Mission Applications and several Data Bases, shown at the bottom. Mission Applications and Data Bases are not a part of the DII COE, but along with the unique communication interfaces, characterize the differences between individual C4I systems. The Mission Application illustrated in Figure 1 contains an embedded simulation which is the topic of this paper. In general, Mission Applications do not contain simulations.ESI Architecture RequirementsThere are several fundamental requirements for the establishment of an M&S architecture and M&S Services. They must:Be compatible with the DII COE. Be usable by multiple C4I systems.Apply to a range of Mission Applications.Simplify the software development process.Comply with the design requirements of the C4I systems in which they reside.Design ConceptsThe ESI approach is based on these basic design concepts. Common M&S Software Services: Many simulation based C4I applications require a number of very similar software functions. Common M&S software functions and standard links to DII COE services are being designed to support the general class of applications described earlier. This can relieve developers of those tasks, reduce integration problems and enable interoperability with other applications. Functional Domains: The standard M&S functions or services are grouped into a relatively small number of functional areas and designed to interact. These functional domains provide the organization for developing a number of standard M&S services such as force generation, time management and common display functions. Hence, very complex tasks can be performed by structuring several relatively simple software functions. Application Server: C4I Mission Applications use the client-server configuration extensively. The JMV, TMS and UCP shown in Figure 1 are servers. Mission Applications are the clients. The ESI concept for embedding simulations extends that concept. A simulation embedded within an application should be implemented as a simulation server. Embedded Simulation Architecture: An architecture concept was defined that ties together Application Servers and Functional Services, and simplifies the process of defining requirements, design, coding and integration of simulation based applications. Two of the applications under development will be presented and compared followed by the definition of a general ESI architecture.WMDA Application ExampleThe purpose of the Weapons of Mass Destruction (WMDA) Application is to analyze the effects of chemical, biological and nuclear weapon releases and to assess effects of conventional attacks on facilities that contain those types of materials. The WMDA Application will be used to assess force deployment and protection plans by analyzing the effects of potential hostile WMD occurrences. It will also be used to analyze WMD events as they occur and quantify the danger that forces are exposed. These assessments require time projection capabilities, postulating potential hostile WMD activities, developing alternate courses of action, and assessing own force vulnerabilities and protection options.As stated, the Embedded Simulation should be developed as a server or converted to a server if the simulation already exists. This is an extension to the normal client-server relationship between the applications and the DII COE servers except the embedded simulation server is contained within the application, as shown in Figure 1. The embedded simulation that performs the WMD analysis is the Hazard Prediction Assessment Capability (HPAC) [5] developed for the Defense Threat Reduction Agency. The HPAC simulation used in this application has been converted to a server. A block diagram of the WMDA Application is shown at the top of Figure 2. The Mission Editor Module, used for planning, passes simulated WMD event parameters to the HPAC Server via the HPAC Client. HPAC produces time stepped predictions of the contamination cloud extent and its hazard and lethality characteristics. These results are converted to a dynamic Cloud Track Object and inserted into the Virtual Track Manager.The HPAC Server consists of several complex simulations that assess a postulated or actual WMD event. These simulations are based on physical models and easily partitioned from other parts of the application. The Dynamic Run Module processes the planning data, controls the time base and inserts data into the Simulation Common Operational Picture (COP) Module with a variable time base. The result is a time varying display of planned force maneuvers with an overlay of projected contamination clouds. The Archive/Replay Module shown in the figure is used to store and compare alternate courses of action. Archiving and a variable time based replay are very common requirements for many simulation based applications.Real world assessments are similar to WMDA planning but use actual data and insert the information in the real world COP. The Mission Editor is then used for time projection analysis. CTTS Application ExampleThe second, slightly more complex, example is the C4I Team Training System (CTTS) shown in the lower half of Figure 2. The CTTS is a training capability that will be used to train shipboard C4I users and Missile crews.The CTTS generates training scenarios within the Navy’s GCCS/M that replicate typical situations, including scenarios that involve targeting ship launched cruse missiles against land and ship targets. The CTTS Application Server is the Cruise Missile Trainer (CMT) Server which is based on the existing Navy CMTpc training system used to train and qualify US Navy shipboard Harpoon and Tomahawk Missile Crews.  SHAPE  \* MERGEFORMAT Figure 2WMDA and CTTS Mission ApplicationsIn the diagram, the Mission Editor creates a scenario “ground truth” picture that is modified by the CMT Server to produce a “perceived” picture (some incorrect, ambiguous and missing information) for the C4I system and Missile Weapons Control Systems.  The Data Base Client is used to set up the situation. This includes establishing the parameters associated with platforms, communications, weapons, sensors, etc. The Runtime Client provides the CMT Server the dynamic time-based scenario. The Output Client collects time synchronized output data and inserts it into the C4I system and the Simulated Common Operational Picture (SIM COP).  Comparisons The two examples illustrate two significantly different applications. The WMDA is a tactical analysis application. The CTTS is a training application. The former incorporates a single client interacting with the application server, the latter contains three clients. A further distinction is that the WMDA server (HPAC) functions as a batch process. That is, all data is entered at one time and results are produced. The HPAC Server is provided with chemical, biological or nuclear event data, weather and terrain. It provides detailed information about the contamination cloud that is produced and predicts its behavior over time.By comparison, the CMT simulation is a run time process. Data is continually provided and processed. The output, a “perceived” operational picture, is dependant upon the space-time dynamics of its input. The CTTS is best defined and implemented with three clients within the application that interact with the CMT Server. These multiple clients can be real separate clients or a notional design implemented within a single client. In both cases, existing systems (HPAC and CMTpc) were converted to servers and successfully embedded within C4I applications. The noteworthy point is that significantly different applications that fall within the broad class described earlier can be developed with the ESI architecture and share the same functional M&S services. Three other applications are currently being developed that use the same functional services shared by these two.The ESI ArchitectureThe ESI Architecture is evolving. [6] The evolution is tied to the design and development of the five mentioned applications. The object is to define a general ESI Architecture with enough flexibility to accommodate new requirements and variations among applications.Figure 3 shows the general high level ESI architecture.  This configuration contains four functional modules surrounding an application server (i.e., the simulation), all layered over the DII COE. The term “Application Server” is used to describe the embedded simulation. The term “Functional Module” is used to describe an aggregate of functions organized to produce a limited scope capability. For example, the Mission Editor (Force Maneuvering) Module in each of the two systems in Figure 2 contains the following common services: COP Capture, Scenario Generator, Plan Review and the Virtual Track Manager, as well as a unique Application Client.These modules and the embedded simulation interact as client-servers. The general architecture, illustrated in figure 3, shows a single embedded simulation server and three embedded clients: the Data Base (DB) Client, Runtime (RT) Client and the Output (OP) Client. As was seen in Figure 2, the WMDA required only a single client.The Functional Modules in this top level architecture are derived from the class of applications that ESI addresses. They generally require the generation of simulated forces that are maneuvered over a time period and analyzed in some fashion by the embedded simulation. The simulated forces and the simulation output are entered into the C4I system tactical data base so other applications can access and interact with. Finally, the application must display the products in a common operational picture (COP) and other displays. Other functional modules could be required. SHAPE  \* MERGEFORMAT Figure 3General ESI ArchitectureModeling & Simulation Software Development Kit Many DII COE support applications have software development kits (SDK) containing software, APIs and documentation. (e.g., the Track Management System Software Development Kit – TMS SDK).Likewise, the Modeling and Simulation Software Development Kit (M&S SDK) will provide a robust set of services that simulation based mission applications can adapt within their design, Application Program Interfaces (APIs) that link simulations with DII COE, and a full set of documentation. M&S SDK services are organized into functional domains. The following have been identified based on the five Mission Applications currently under development. Other applications could require additional functional domains. Scenario GenerationTime base ManagementSimulation COP/DisplayArchive/Replay/DebriefStatic and Tactical Data Base AccessDistributed Application ServicesFunctional Domains allow us to group reusable functions into common areas to provide an organization that facilitates the design. Supporting functions need to interact and be integrated into applications; hence their designs must include interoperability among one another. As an example, the Scenario Generation domain is comprised of a number of functions used to generate and manipulate planning or training scenarios of simulated forces. The Mission Editor Module, used in both the WMDA and CTTS Applications, contain the following components from the Scenario Generation Domain: COP Capture, Scenario Generator, Virtual Track Manager and Plan Preview.Many of the services have both Graphical User Interfaces (GUI) and Application Program Interfaces (API). Figure 4 shows the GUI used with the COP Capture function. An application developer has the choice of adapting this GUI or interfacing to the service through its API to achieve the function. An example of the latter would be an application in which the simulation, rather than the operator, selects the desired track types and geographic area. The simulation will interface with the COP Capture service through APIs, rather than adapting the GUI shown in Figure 4.Some of the source code will be protected and not available to an application developer. In particular, those functions that insert simulated data into the DII COE and control the time base. However, all the APIs and some of the source code will be available to the developer so that additional functions can be easily developed and added.  SHAPE  \* MERGEFORMAT Figure 4COP Capture GUIAs an example, the WMDA Application required the development of a new type track. It was possible to add a “cloud track type” to the Virtual Track Manager using the “generic track” class. Simple code changes were also required in the COP Capture GUI to accommodate this new type. Source code for all GUIs will be available.Mission Application DevelopmentDesigning a C4I Mission Application is different than designing a stand alone system. There are many more constraints. The application will be embedded within the C4I system and must comply with the general DII COE architecture and the ESI extensions. Assuming that operational requirements have been defined, the following process could be applied in the development of a new application. If done properly, the coding will be straight forward.Select an Appropriate Architecture It is very important that the software organization is appropriate, one that will aid in defining functional requirements that can be easily implemented. Several ESI Example (Case) Architectures (e.g., Such as those shown in Figure 2) will be available in the M&S SDK documentation as starting reference points. If an appropriate match is available, selecting an existing Case Architecture provides a good starting point.  These case architectures were carefully structured to enhance the use of DII COE components and M&S Services within the Application as well as accommodating an embedded simulation.For example, the WMDA Architecture shown in Figure 2 could be an appropriate selection for a Mission Application that performs snapshot analyses. An example would be an Application that performs sensor detection capability analysis and jamming vulnerabilities for various force dispositions and times within a proposed operational plan. Develop Functional RequirementsThe Functional Requirements should be organized in accordance with the Application Architecture.  Although a purist may argue that the Functional Requirements should be defined without regards to implement methods, that approach is not recommended. A C4I Mission Application must operate within a well structured environment. Organizing the functional requirements within the DII COE and ESI architecture and recognizing the constraints early in the development process will greatly simplify the design effort and produce a better product. If an ESI Case Architecture was selected as a reference point, its functional requirements can be found in the M&S SDK. Selecting the architecture of a similar application and using its Functional Requirements as a starting point has been very successful. Many of the requirements of one application have satisfied new applications. Others will need to be modified and added. Regardless if the functional requirements are modified from similar applications or created anew, they should clearly define:Functions that will be provided by the DII COE and M&S Services.The core functionality that must be provided within the Application Server. The functional requirements for the Functional Modules.Requirements for the Embedded Client(s) and how they interact with the Application Server and functional components.The following sections contain a few more points about the Application Server and Embedded Clients.Application Server Modeling the application as a client-server readily captures the key elements and client-server interactions within the application. It was not particularly difficult to partition the functions between the embedded server and the embedded client(s) in the two applications cited once the functional requirements were organized. This should be the general occurrence if the developer establishes a proper software architecture and understands the functions available within the DII COE and M&S SDK. The implementation of the two applications discussed in this paper required the conversion of existing stand alone simulations to client-servers. Part of the design task was simpler from the mere fact that requirements for the existing simulations were thought through during their developments. The HPAC system was already configured as a client-server. The client functions were redeveloped within the WMDA Application.Embedded ClientsEmbedded Clients serve several purposes. They contain communication software to interface with the server. They contain graphical user interfaces required to set up and run the embedded simulation. And since object and data models are often badly aligned between the application and the embedded simulation, they act as ambassadors that translate between the two.The embedded Client and HPAC Server communicate using the Common Object Broker Request Architecture (CORBA). The CMT Client - Server uses Java Remote Method Invocation (RMI). Other applications nave used the High Level Architecture (HLA) Run Time Infrastructure (RTI). The client-server communications mechanisms are contained totally within the Embedded Clients and the Application Server. Therefore, they have little impact on the DII COE and M&S Services.Implementation If the Functional Requirements are properly defined and assigned to the Application Server, Embedded Application Clients and Functional Modules, implementation should be straight forward. In some cases coding the embedded clients will be the preponderance of the work. A few implementation guidelines are recommended:Use, do not duplicate, DII COE and M&S SDK services. Avoid the trap of developing a concept around a technology not in the DII COE. The DII COE stays relatively modern. Live with it.If the required functions are already developed in a client/server configured simulation, consider using the Server as is and duplicate the Client functions in the application.If the simulation is not a Client/server, convert it and develop the Client functions in the application.If not written in JAVA, the Applications Client will require JAVA APIs to interface with the DII COE and the M&S Services.Develop the Application Clients in conformance with the DII COE Style Guides.Final Note: Distributed Applications During FY 03 the ESI program will be developing technologies to support:Distributed Mission Applications.Applications interfacing with non-DII COE compliant simulations on the C4I network. Mission Applications that interface with remote simulations. AcknowledgementsAgencies participating in the efforts include the Naval Modeling and Simulation Management Office (NAVMSMO), Defense Threat Reduction Agency (DTRA), Space and Naval Warfare Systems Command (NAVSPAWAR), Naval Undersea Warfare Center, Defense Information Systems Agency (DISA), Naval Air Systems Command (NAVAIR) and the Defense Modeling and Simulation Office (DMSO).References[1] Layman, G. E., Conover, J., Kunkel, P & Robins, D . : ”JMCIS/GCCS Interoperability with External Simulations.” Paper 97S-SIW-132, Simulation Interoperability Workshop, Spring 1997.[2]	Furness, Z., Isensee. E., Fitzpatrick, M.: “Realtime Initialization of Planning and Analysis Simulations Based on C4ISR System Data” Command and Control Research and Technology Symposium (CCRTS), June 11-13, 2002; Naval Post Graduate School, Monterey, California.[3] Hieb, M., Sudnikovich, W.,Sprinkle, R., Whitson, S., Kelso, T.: ”The SIMCI OIPT: A Systematic Approach to Solving C4I/M&S Interoperability” Paper 02F-SIW-067, Simulation Interoperability Workshop, Fall 2002; Orlando, Florida. [4] Layman, G., Daly, J., Furness, Z. & Womble, J.: ”C4I-Simulation Interoperability Using the DII COE and HLA.” Paper 01S-SIW-044, Simulation Interoperability Workshop, Spring 2001; Orlando, Florida.[5] Defense Threat Reduction Agency, web site: http://www.dtra.mil/td/acecenter/td_hpac.html. (As of August 5, 2002)[6] Layman, G., Daly, J., Weatherly, J.: “C4I Embedded Simulations” Paper 01S-SIW-082 Simulation Interoperability Workshop, Spring 2001; Orlando, Florida.[7] Layman, G., Daly, J.: “C4I Tactical Applications Utilizing Embedded Simulations” Command and Control Research and Technology Symposium (CCRTS), June 11-13, 2002; Naval Post Graduate School, Monterey, California. Authors BiographiesDr. Gene Layman is a Research Engineer at the Naval Research Laboratory and directs a Command and Control Development Team that has been active in GCCS and GCCS-Maritime developments since their conceptions. Earlier he managed the Radar Branch and the Guidance Branch at the Naval Surface Weapons Center. Before that, Dr. Layman was a Program Manager in the Missile and Ordinance Division at Texas Instruments, Inc. and a Circuit Designer at The Boeing Company on the Minuteman Program. He has led or participated in the design of over two-dozen military systems with more than half becoming fully operational.John J. Daly is a Research Engineer with ITT AES at the Naval Research Laboratory, and works in the Command and Control Development Team with responsibilities for C4I/Simulation Interoperability, the development of an Electronic Warfare Mission Application for the GCCS-Maritime, and Embedded Training Technologies for C4I. A retired Naval Officer, John previously worked on the staff of the Director, Defense Information Systems Agency, as well as in the Modeling and Simulation Directorate on C4I and simulation interoperability. Daniel Robertson is an Electrical Engineer with SFA at the Naval Research Laboratory. He is the Embedded Simulation Infrastructure Project Leader responsible for the software development for both the M&S Software Developers’ Kit and the Weapons of Mass Destruction Analysis Mission Application. Prior to joining the NRL team, he was employed by General Dynamics working on the design, programming and deployment of robotics.Jim Weatherly, OPNAV N6MT, is the Deputy Director of the Navy Modeling and Simulation Management Office (NAVMSMO), and the Director of the Department of Navy Modeling and Simulation Technical Support Group. This organization provides management, direction, and technical expertise to senior organizations for Modeling and Simulation use in Acquisition, Research, Engineering, Test & Evaluation, Training, and Force Assessments. He has performed as Head of the Engineering Support and Integrated Assessment Environment Division, Supervisory Electronics Engineer within the Warfare Systems Architecture and Engineering Directorate (WSA&E), and Head of the Test Facilities Section within the WSA&E Directorate.SIM-COP ScenarioGeneratorVirtual Track Manager (VTM)COPCapturePlanPreviewMission EditorHPACServerArchive/ReplayDebriefAuthor. . .Embedded SIM. . ..  …. .RT ClientOP ClientDB ClientDII COESimulation-COP/displayArchive/Replay/DebriefTime BaseManagementApplicationServerForceManeuvering   . .. . . . . . . . . . . . . . . . . . . . . .Data AccessM&S SDKData BasesNT OSUCPTMSJMVSupportApplicationsInfrastructureServicesKernelMission ApplicationDynamicRunReplayArchiveWMDACTTSVirtual Track Manager (VTM)COPCapturePlanPreviewMission Editor     Dynamic Run ReportGeneratorCMT ServerDataBasesSimulation COPSIM-COPArchiveReplayDebriefAuthorArchive/ReplayCMTRuntimeClientSensorAnalysisHPACClientCMTData BaseClientScenarioGeneratorSimulation COPCMTOutputClientDynamicRun