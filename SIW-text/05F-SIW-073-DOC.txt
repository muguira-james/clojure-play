Initialization of Distributed Simulations: A Better Way?David ProchnowThe MITRE Corporation7515 Colshire DriveMcLean, VA  22102 HYPERLINK mailto:prochnow@mitre.org prochnow@mitre.orgMichael FogusJohn VintilescuBenton BorumVirtual Technology Corporation5510 Cherokee AvenueSuite 350Alexandria, VA  22312 HYPERLINK "mailto:mfogus@virtc.com" mfogus@virtc.com HYPERLINK "mailto:jvintilescu@virtc.com" jvintilescu@virtc.com HYPERLINK "mailto:hborum@virtc.com" hborum@virtc.comKeywords:MATREX, MSDL, simulation initializationAbstract: While great strides have been made in the advancement of distribution simulation, one area that has lagged behind is the development of initialization data for a diverse set of simulations that must interoperate in a meaningful way.  Typically, this process involves multiple organizations developing data to initialize their respective simulations, along with a concurrent or subsequent process to ensure that the simulations have a common understanding of the data that will be shared.  Although this process has been executed successfully, it could be improved greatly.  Difficulties exist with configuration management, as data changes made for any single simulation can have impacts on other simulations in the distributed system.  An even larger challenge is the ability to repeat a distributed simulation execution, as each simulation has one or more associated input files that must be reused.The Modeling Architecture for Technology, Research, and Experimentation (MATREX) is developing a mechanism and software for an improved distributed simulation capability.  The MATREX approach employs a common, standardized, data source for all simulation components.  This approach leverages the Military Scenario Definition Language (MSDL) and the Military Scenario Development Environment (MSDE), as used with the OneSAF Testbed Baseline (OTB) and the OneSAF Objective System (OOS).  In addition, MATREX also employs both commercial software and MATREX-developed software to allow for the consolidation of simulation configuration data, as well as for the instantiation and initialization of many additional simulations.  Ultimately, the goal is to store all initialization data for a distributed simulation execution in a single data file.  As data is accessed from a common source, simulations receive consistent representations of simulated entities, and repeating a simulation execution just requires retention of a single data file.1. Issues Associated with Initialization of Distributed SimulationsWhile great strides have been made in the advancement of distribution simulation, one area that has lagged behind is the development of initialization data for a diverse set of simulations that must interoperate in a meaningful way.  Typically, this process involves multiple organizations developing data to initialize their respective simulations, along with a concurrent or subsequent process to ensure that the simulations have a common understanding of the data that will be shared.  Although this process has been executed successfully, it could be improved greatly.  Difficulties exist with configuration management, as data changes made for any single simulation can have impacts on other simulations in the distributed system.  An even larger challenge is the ability to repeat a distributed simulation execution, as each simulation has one or more associated input files that must be reused.As Carlton [1] states, the simulation initialization process of legacy systems is “complex, de-centralized, sequential, and primarily manual, which is time consuming, costly and yields data inconsistencies.”  As new technologies emerge, the situation is improving, but the adoption of new systems that address these issues is slow.1.1 Scenario Development TimeIn preparation for a distributed military simulation execution, an inordinate amount of time is spent on the generation of initialization data.  In fact, rapid scenario generation was identified as a top priority in a 2003 memorandum authored by the Executive Council on Modeling and Simulation (EXCIMS).  The EXCIMS memo states “The current M&S systems are hampered by a series of non-standard tools for building the detailed environment, force composition and operational details needed to conduct either analytic or training simulations.  The current preparation time for conducting large joint training events is measured in terms of months (on the order of 18) and is largely driven by the data requirements to build the detailed synthetic environments needed for realistic training or mission rehearsals.  The current database process for scenario building is time and resource intensive.” [2]1.2 Data MappingsWhen data is developed for a distributed simulation execution, it is essential that each component (i.e. federate) has a common understanding of enumerated values.  Otherwise, if there is not a common understanding of enumerations, then a federate may send or receive data that cannot be interpreted correctly by the receiving federate.  When this occurs, the receiving federate must either discard the data or replace it with default data.  Neither of these options is good, so it is best to avoid this problem altogether.The resolution of data mappings is a time-consuming and, typically, labor-intensive process.  Although some systems have developed mechanisms and software tools to manage enumerated data [3], the resolution of data mapping issues still requires some agreement on the enumeration specification.  Compounding this issue is the fact that input data is frequently modified, sometimes shortly before execution, thus requiring simulation developers to be continually modifying their data mappings.  Even though a High Level Architecture (HLA) federation will have an associated Federation Object Model (FOM) that lists and describes enumerated values, it is not unusual for an exercise director or federation manager to request that an additional item be represented, thereby requiring that the system adapt a new FOM change and have some mechanism for ensuring enumeration consistency.1.3 Configuration ManagementBecause data for distributed simulation executions is typically developed for each individual simulation, there is rarely an overarching management of this data.  Rather, each individual simulation usually has configuration management over its particular input files.  When control of the data is partitioned to multiple organizations in this manner, there may be no single individual who has a good overall understanding of the data in the system.  This can result in unfulfilled data dependencies, unexpected events, superfluous data, and even software crashes when “bad” data is not handled gracefully.Another issue is that decentralized data complicates the process of ensuring that all data comes from authoritative sources.  While some systems may be successful at using metadata to identify data sources, other systems may use data of unknown lineage.  As Scrudder [4] states, “To judge data trustworthiness, one must know its derivation history and understand the conditions under which it is valid.”  For a distributed simulation with decentralized control of data, it is nearly impossible to ascertain the validity of the full data set.1.4 Lack of Reuse of Scenario Data between SimulationsData developed for a particular simulation typically has little or no value for any other simulation.  While it is common that a scenario used for one simulation is reused many times for that same simulation system, it is rare that the same data is used for another simulation system as well.   Given the large amount of resources required to assemble simulation input data, this lack of reuse means that significant money and time will be spent building a similar scenario for a different simulation system.2. Rationale for a Common Standardized Data SetMany of the problems described in the previous section would be alleviated by initializing from a common point using a standardized data format.  These include data consistency, simplified configuration management, and reusability.As indicated in an earlier section, one of the biggest challenges for initializing distributed simulation is ensuring that simulations have a common understanding of data that is to be mapped between them.  This problem is solved by having each simulation derive common names and enumerations from a centralized data set.   This avoids the situation of each simulation developing its own set of enumerated data and then having to map its representations to those of other simulations.In addition, a single source of data simplifies configuration management (CM).  By using a monolithic data set, then all CM activities can be limited to this single set of data.  This facilitates traceability and avoids surprises caused by unexpected data sent by a particular federate. While the arguments above would be sufficient for employing a common, standardized data set for distributed simulation, another strong argument is that the data can be reused by multiple simulation systems.  Scenario data developed in a standardized format would be usable by any system that worked with the standard.  3. Distributed Simulation Initialization in MATREXThe Modeling Architecture for Technology, Research, and Experimentation (MATREX) Army Technology Objective (ATO) is addressing the simulation initialization issues described aboveMATREX OverviewThe US Army Modeling Architecture for Technology Research and Experimentation (MATREX) Army Technology Objective (ATO) provides a persistent, secure distributed simulation environment that reduces the time and cost of experimentation.  Unlike other DoD simulation environments, the MATREX is a reusable simulation environment that enables efficient integration of arbitrary multi-resolution models, represents key characteristics of Network Enabled Battle Command (NEBC), scales to Unit of Action (UoA), supports human-in-the-loop interactivity, and provides the ability to incorporate real hardware.  MATREX emerged from a combination of two previously existing efforts, the Joint Virtual Battlespace (JVB) Science and Technology Objective (STO) and the Army Virtual Distributed Laboratory for Modeling and Simulation (VDLMS) STO.  (See [5, 6] for background on JVB.) MATREX provides the Army with a set of Simulation and Modeling for Acquisition, Requirements and Training (SMART) tools that will support a wide variety of analyses of system designs and operational concepts (see [7] for background on the Army SMART efforts).  The MATREX program is sponsored by the US Army’s Research, Development, and Engineering Command (RDECOM) and includes participation by the various Army Research and Development (R&D) centers.MATREX is a simulation environment that includes:A Federation Object Model (FOM) suitable for simulating current and future military forcesSoftware libraries that can be used by developers to employ HLA and exchange MATREX object dataThe OneSAF Testbed Baseline (OTB) and, eventually, OneSAF Objective System (OOS), to simulate battlefield entitiesA collection of federates developed by the US Army Research and Development (R&D) centers,  allowing high-fidelity representation of particular functionalities Software tools for simulation input, federation management, and data collectionAn efficient and powerful simulation initialization approach, as discussed in the next section3.2 MATREX Simulation Initialization ApproachAs stated in the prior section, one of the goals of MATREX is to reduce the time and cost associated with experimentation.   The MATREX program accomplishes this by providing a mechanism, as well as associated software, to allow initialization from a common point in a standardized format.   The value of this approach is that configuration management is simplified and data consistency is ensured through this approach.  This prevents time-consuming errors that bog down integration and testing of distributed simulation architectures.  In the longer run, if other systems adapt the same standards for scenario input, then the MATREX initialization data will be reusable by other systems as well. SHAPE  \* MERGEFORMAT Figure 1.  MATREX Simulation InitializationThe MATREX simulation initialization approach is shown in Figure 1 above, and described further in the following subsections.  This initialization approach has been employed successfully on efforts related to Networked Effects Command and Control (NEC2) and Joint Close Air Support (JCAS), as well as being currently used for RDECOM’s participation in the Cross Command Collaborative Environment (3CE) with the Army Test and Evaluation Center (ATEC) and the Training and Doctrine Command (TRADOC).3.2.1 Use of the Military Scenario Definition Language (MSDL)The MATREX program is leveraging the Military Scenario Definition Language (MSDL), a product that originated on the One Semi-Automated Forces (OneSAF) program.  MSDL employs the Extensible Markup Language (XML) to specify characteristics of a military scenario.  It is designed to be independent of the application of the scenario data, and it is therefore independent of any particular simulation.  Wherever possible, MSDL relies on existing military standards for data types and enumerations. [8]Elements of the MSDL schema include:Forces and sidesTask organizationPlansEquipmentInstallationsTactical overlaysTactical graphicsTerrain [8]In addition to using MSDL, the MATREX program is working directly with OneSAF personnel to incorporate additional MATREX data into the MSDL standard.  The MATREX program is also an active participant of the current MSDL Study Group of the Simulation Interoperability Standards Organization (SISO). [9]MATREX uses the Military Scenario Development Environment (MSDE) tool to generate data in an MSDL format.  MSDE is a windows-based system built on top of Microsoft PowerPoint.  MSDE allows a user to place units on a digitized map (as shown in Figure 2), with the capability to disaggregate units down to platforms, and move object locations at different levels of aggregation. SHAPE  \* MERGEFORMAT Figure 2.  MSDE Graphical User InterfaceCurrently, MSDE is the only tool that outputs data into MSDL, but that will not be the case for long.   For one, MATREX plans to also use MSDL data produced by the C4ISR Systems Architecture Process and Tools (CSAP&T) and the Army C4I and Simulation Initialization System (ACSIS).  Data from these additional systems will be essential for representing Network Enabled Battle Command (NEBC), the command and control associated with Future Combat Systems (FCS).3.2.2 Inclusion of Non-Scenario Data Needed for InitializationWhile scenario data is available through MSDL, additional simulation-specific data is also needed to initialize a distributed simulation.  This includes simulation configuration data, including specifications of host machines, display options, data logging options, and other parameters that are not directly associated with the scenario.  These parameters may include the name of the HLA federation and RTI RID file selection.In order to accommodate the full set of data needed to initialize a distributed simulation, the MATREX program has built a tool called the Configuration and Static Analysis Tool (CSAT).  CSAT ingests a scenario produced in MSDL format and then allows a user to supplement the scenario data with simulation configuration data.  CSAT outputs data into an XML file that is then used by another program called hlaControl HYPERLINK "http://www.virtc.com/Products/prdFulltext.jsp?ID=b_Ctrl" ® to instantiate and drive an HLA federation.Because MSDL is an evolving standard, there are some data fields that can be accurately categorized as scenario data, yet they do not exist in MSDL.  This is especially true of information to represent advanced future concepts.  CSAT is also designed to handle this data, but in the long run, the preference is for all scenario data to come from the MSDL file.3.2.3 Launching of a Distributed Simulation from a Common PointIn MATREX, all federates are remotely started from a single workstation using hlaControl HYPERLINK "http://www.virtc.com/Products/prdFulltext.jsp?ID=b_Ctrl" ® [10], a commercial tool for federation management.  Through use of hlaControl HYPERLINK "http://www.virtc.com/Products/prdFulltext.jsp?ID=b_Ctrl" ®, the sequence of startup events can be coordinated by a single user.  This includes starting the RunTime Infrastructure (RTI), creating the federation execution, and remotely starting the individual simulations.  Prior to this remote startup process, the RTI and all participating federates would have to be manually started and joined before the initialization process could begin.Next, hlaControl HYPERLINK "http://www.virtc.com/Products/prdFulltext.jsp?ID=b_Ctrl" ® is used to populate the simulation by instructing remote federates to create and instantiate scenario objects.  These instructions are conveyed via HLA interactions published by hlaControl HYPERLINK "http://www.virtc.com/Products/prdFulltext.jsp?ID=b_Ctrl" ® at the user’s request. Federates will have no information a priori to indicate the types and quantities of scenario objects to be instantiated.  This ensures segregation of the input data from the algorithms that act upon the data.4.0 Counter-Arguments to MATREX ApproachThis section plays “devil’s advocate” to the prior section, indicating why the MATREX simulation initialization approach may not be the best approach.4.1 Reliance on MSDLAs the MSDL standard is evolving, it presents a moving target.  Until the standard is finalized, each system that uses MSDL must be flexible enough to adapt to changes made to the schema, thereby always playing “catch up” as each version of MSDL is released.However, having a final standard may be more problematic than an evolving standard.  Once the MSDL standard is approved, it will be an arduous process to add new constructs to MSDL.  If MATREX, or any other program for that matter, determines that it needs scenario data that is not contained in MSDL, then it will have to define it elsewhere.  This will present a problem if different developers start developing unofficial extensions to MSDL, as files generated in such a manner would not be compatible with the tools that read and write MSDL.According to Randolph [11], data needed for MSDL requires detail that is not readily available.  If this is the case, then significant time will be spent just finding or deriving data needed for MSDL.  Worse yet, if the data cannot be found from an authoritative source, then someone has to make it up.  Preferably, this would be a Subject Matter Expert (SME), but there may not be a SME available, especially if the item being modeled is not well understood or represents a future concept.  Of course, lack of authoritative data may be the case whether data is represented in MSDL or some other format, point being that MSDL will not resolve all scenario initialization issues.4.2 Argument for Input Files for Each SimulationWhile this paper has discussed the benefits of a centralized data set, there are also arguments why it may be better to have each simulation maintain its own set of input data.   For one, each simulation may use data differently, so the specific data fields needed by each simulation in a distributed environment may be different enough to warrant each simulation developing its own data.  For instance, simulation of different resolution may use vastly different data.  An aggregate-level military simulation may require inputs for Lanchesterian combat, while an entity-level simulation may require probabilities of kill for platform-on-platform engagements.Also, those with the strongest understanding of how an individual simulation works may set data in such a way to make best use of that simulation.  For example, the experts of a particular simulation may know that their software bogs down when sensor acquisition is attempted too often.  In this case, the data developers may set the time between searches higher than what is realistic, so that their simulation runs fast enough to be responsive to data received from other simulations.Additionally, it is certainly easier for the simulation developers if they can maintain their own data, as they do not need to rely on other program or other databases for their integration and testing.  Yielding control of data to a centralized database developer may be risky if a simulation is not robust enough to handle wide ranges of data.5.0 Final AssessmentThe initialization of distributed simulations is an area that is ripe for improvements.  MATREX is exploring how to use mechanisms and software to reduce data development time, improve data quality, and simplify configuration management.   Although Section 4 is presented to give some balance to the paper, the authors believe that the MATREX simulation initialization approach advances the state-of-the-art and provides a guidepost for other distributed simulation systems wishing to optimize their simulation initialization processes.6. AcronymsACSISArmy C4I and Simulation Initialization SystemATOArmy Technology ObjectiveCSAP&TC4ISR Systems Architecture Process and ToolsCSATConfiguration and Static Analysis ToolEXCIMSExecutive Council for Modeling and SimulationFCSFuture Combat SystemsFOMFederation Object ModelHLAHigh Level ArchitectureJCASJoint Close Air SupportJVBJoint Virtual BattlespaceMATREXModeling Architecture for Technology, Research, and ExperimentationMSDEMilitary Scenario Development EnvironmentMSDLMilitary Scenario Definition LanguageNEBCNetwork Enabled Battle CommandNEC2Networked Effects Command and ControlOneSAFOne Semi-Automated ForcesOOSOneSAF Objective SystemRDECOMResearch, Development, and Engineering CommandRTIRunTime InfrastructureSMARTSimulation and Modeling for Acquisition, Requirements and TrainingSMESubject Matter ExpertUoAUnit of ActionVDMLSVirtual Distributed Laboratory for Modeling and SimulationXMLExtensible Markup Language6. References[1]	Carlton, B., Scrudder, R., Black, C., Hopkins, M., “Initialization of C4I Systems and Simulation Federations Today and in the Future,” Fall 2004 Simulation Interoperability Workshop, September 2004.[2]	Mayberry, P., Deputy Undersecretary of Defense (Readiness), “Readiness and Training Modeling and Simulation Priorities,” Memorandum for DoD Executive Council for Modeling and Simulation (EXCIMS) Secretary, Octover 24, 2003. [3]	McFadden, G., Babineau, W., “An Approach to Management of Enumerated Data in Federation,” Spring 2000 Simulation Interoperability Workshop, March 2000. [4]	 Scrudder, R. Graves, D., Teigen, T., Johnson, C., Hix, S., Hollenbach, J., “The Critical Role of Metadata in JSF Development,” Fall 2003 Simulation Interoperability Workshop, September 2003. [5]	Briggs, R., “Joint Virtual Battlespace (JVB) Framework and Architecture Explained”, Fall 2002 Simulation Interoperability Workshop, September 2002, Orlando, FL.[6]	Harkrider, S., “JVB Federation Design”, Fall 2002 Simulation Interoperability Workshop, September 2002.[7]	US Army Research, Development, and Engineering Command. National Capital Region Experimentation Portal, RDECOM Magazine, November, 2003. [8]	Abbott, J., “Military Scenario Definition Language,” March 2005 briefing. [9]	Thakkar, N., Lindy, E., “Initialization of the MATREX Environment using MSDL,” Fall 2005 Simulation Interoperability Workshop, September 2005. [10]	Perkinson, P., Berglie, S., Thomas, N., Corbett, S., Kuzeja, A., “A Comprehensive Federation Management Capability for the Joint Simulation System (JSIMS),” Fall 2001 Simulation Interoperability Workshop, September 2001.[11]	Randolph, W., King, D., “Scenario Generation: XML to the Rescue,” Spring 2002 Simulation Interoperability Workshop, March 2002.Author BiographiesDAVID PROCHNOW is a Principal Software Engineer in the Modeling and Simulation Engineering department at the MITRE Corporation.  Currently, he leads the simulation initialization activities of the MATREX program.  He has also served as the technical lead on several simulation programs at MITRE.  While at BDM International and Control Data Systems, Mr. Prochnow developed software for various corps-level and theater-level wargames.  He received a B.S. in Computer Science from the University of Virginia in 1983.MICHAEL FOGUS is a software engineer at Virtual Technology Corporation working in the distributed simulations arena.  Currently he is the lead software developer for the MATREX simulation initialization initiative.  He received a B.A. in Computer Science from St. Mary's College of Maryland in 1999, and a M.S. in Computer Science from Johns Hopkins University in 2005.JOHN VINTILESCU is a software engineer at Virtual Technology Corporation.  He works in the distributed simulation arena. Currently, Mr. Vintilescu is working on the MATREX program focusing on simulation initialization.  He received a B.S. in Computer Science from Florida Atlantic University.BENTON “HOWARD” BORUM is a simulation specialist at Virtual Technology Corporation.  He is currently working on the MATREX program focusing on simulation initialization.  He holds a B.A. in European History from the Detroit Institute of Technology and an MBA from the University of Puget Sound.PAGE  2PAGE  7	…….Fed 2Fed 1MSDECSATMSDLFed XHLA RTIHLAControlMSO