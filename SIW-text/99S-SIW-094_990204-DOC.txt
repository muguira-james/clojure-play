The Dynamic Simulation Environment (DSE) Flexible Federation Object Model (FOM) InterfaceRandall E. BarkerPaul T. BarhamJames R. DamianoReality by Design910 Major Sherman LaneMonterey, CA  93940  U.S.A.831-655-0440, 831-655-0885 (fax)barham@rbd.com, barker@rbd.com, jdamiano@rbd.comKeywords:HLA, FOM, SOM, federate, federation, federation executionABSTRACT: The High Level Architecture (HLA) promotes reuse and interoperability among distributed simulations (federates) by defining a common approach and framework that still allows for customization.  However, before federates can operate together in a federation execution, they must agree on the simulation data to be exchanged between federates by defining a Federation Object Model (FOM).  A federate’s ability to participate in a federation is based on the federate’s capabilities as defined and described in its Simulation Object Model (SOM).  To increase the number of federations supported by a particular federate and to promote quick integration of a federate into a federation, several standardized reference FOMs have been developed or proposed.  In order to fully maximize the versatility and adaptability of HLA while sharing the stated objectives of reference FOMs, RBD has developed a flexible and dynamic FOM interface under contract to the Defense Modeling and Simulation Office (DMSO) for the Dynamic Simulation Environment (DSE) project.  This paper describes the flexible FOM architecture used in DSE and illustrates its usefulness in quickly adapting a DSE federate to a new federation without reliance on a reference FOM or the need to change or recompile software.  The power and use of dynamic linking and object-oriented programming principles are illustrated in building a flexible and extensible federate.  An example is presented of linking a new DSE 3D stealth application with HLA ModSAF.1. BackgroundFor more than a decade, advanced distributed simulation has been widely used and accepted for multiple purposes including training, advanced concepts research, and development and acquisition.  Traditional approaches for implementing distributed simulations focused on the specific problem domain of how to share data about entities and events in an efficient, minimally complete standardized format.  Some of these simulation systems were designed to utilize the limited computing resources that were available at the time the systems were built.  From a desire to build simulators for a specific purpose (e.g., part task trainers), communication standards were developed that were influenced by both a desire to provide interoperability as well as to remain efficient.  As distributed simulation became more prevalent to address a wider range of problems and users, these communication standards were expanded.  This approach of defining a single communications standard to address the widest possible audience, led to monolithic solutions that were rigid and difficult to extend in a manageable way.To take advantage of existing and emerging computing technologies, the High Level Architecture (HLA) approaches the distributed simulation problems and challenges in a top down fashion as opposed to the more traditional bottom up approach.  By standardizing at the interface level, HLA enables developers to rapidly adapt to new computing technologies at the lower implementation levels without requiring changes to the standardized interfaces.  Standardizing at the architecture level allows HLA to address other relevant distributed simulation components other than just data sharing and communications.  HLA provides a framework or common approach for integrating heterogeneous distributed simulations without dictating data content and format.  HLA allows a group of users to define and develop a distributed simulation solution using a well-defined process that meets their specific needs and best addresses their problem space at the data content level.  Thus, the various groups of simulation users can each produce a modular solution without being required to process irrelevant data or otherwise being tied to overhead resulting from a larger than necessary problem space.This unconstrained and powerful ability to create customized solutions at the data content level can lead to a lack of interoperability between groups of simulation users.  To improve quick interoperability between related groups of users, reference FOMs are being created which attempt to standardize data communications and content.  Another approach for providing rapid interoperability between related groups of users is to develop federates which utilize a flexible FOM interface to allow the federate’s SOM to be translated to a specific FOM.  Using modern object-oriented software design principles, a dynamic, adaptable, and modular HLA federate can be created to address the needs of many groups of users by being capable of executing with multiple FOMs in a variety of federation executions.  RBD has developed the Dynamic Simulation Environment (DSE) software architecture to benefit from these modern principles and to provide a flexible and extensible solution for a wide variety of HLA simulation users using a flexible FOM interface.2. ApproachThe DSE project is a Defense Modeling and Simulation Office (DMSO) sponsored and funded effort being implemented by Reality by Design (RBD) [].  Since its inception in the spring of 1997, DSE has grown from being an avenue for Distributed Interactive Simulation (DIS) applications to become HLA-compliant [], to being a tool for HLA education, expanding outreach, and addressing HLA as a virtual worlds architecture [].  DMSO is using DSE for assisting virtual worlds development using HLA, for testing HLA run-time infrastructure (RTI) software run-time loading, for experimenting with man-in-the-loop virtual simulation federations, and as an educational tool for universities.DSE is a software component architecture consisting of a collection of C++ software libraries designed to provide many of the commonly required core distributed simulation and virtual world components (see Figure 2.1).  These components include: entity management, synthetic environment management, 2D and 3D computer graphics, human-computer interfaces, and distributed communications via the HLA RTI.  DSE uses a layered architecture to provide additional simulation capabilities in a cross-platform computing environment (see Figure 2.2).  Hardware and operating system specific details are hidden and abstracted away from the higher level implementation layers so that DSE applications use standardized application programming interfaces (APIs) to implement their operations.Figure 2.1 - DSE Layered ArchitectureDSE is an HLA-compliant cross-platform simulation architecture and software tool kit that enables a software developer to efficiently build HLA simulation applications in a modular fashion.  By utilizing DSE, distributed virtual worlds projects in both the government and commercial sectors can leverage from the HLA-compliant core functionality it provides.  The result is a savings of time and costs, allowing more resources to be focused on the specific functional requirements of the project.  Like HLA, DSE addresses more than the communications requirement for distributed simulations.  This paper focuses on the communications component and describes in detail the flexible FOM interface used to allow a DSE federate to communicate with the RTI.Figure 2.2 - DSE Modular ComponentsThe DSE communications module has been designed and developed using a flexible FOM interface to enable DSE applications to both extend the DSE base SOM and to enable mapping of the extended SOM to a variety of FOMs.  The flexible FOM interface builds upon the HLA RTI infrastructure to further provide for data conversions and data marshalling.  DSE is dynamic in nature and is designed to be continually extended and refined to provide an HLA-compliant, customizable simulation solution for a large group of simulation users.  The first target audience is identified as the real-time, entity-level simulation community (such as the DIS community).  In the future, additional capabilities will be added to address a larger community using the extensible framework of DSE.3. DSE Flexible FOM InterfaceThe DSE flexible FOM interface is designed to perform byte swapping and alignment via data marshals, to provide data type translations via adapters, and to provide SOM extensibility via an API.  The goal is to provide a multi-layered capability to DSE-based federates for adapting to multiple FOMs by leveraging reusable software components.  DSE is configurable at the user level via the use of human-readable text files.  DSE is also extendable at the software developer level via a well-defined API.  The flexible FOM interface allows users and developers to map DSE internal SOM capabilities to a variety of external FOMs (see Figure 3.1).Figure 3.1 - DSE SOM MappingThe DSE flexible FOM interface consists of three tiers.  The first tier consists of the implementation of the native core DSE SOM and basic data marshalling capabilities.  The second tier consists of a collection of adapters, which allow a DSE federate to map the native SOM to a wide variety of FOMs.  The third tier consists of an API, which allows a DSE federate to extend the native SOM, to provide adapters to map the newly extended SOM to various FOMs, and to provide additional data marshalling capabilities.The first tier of the DSE flexible FOM interface provides access to the native SOM implementation.  The DSE native SOM is a minimal set of attributes and parameters targeted for real-time, entity-level simulations.  The native SOM currently has one class object and three interactions.  The first tier also provides the default data marshalling implementation as well as default adapters which allow a DSE federate to participate in a DSE native FOM based federation execution (i.e., a pure DSE-compatible federation execution).The second tier of the DSE flexible FOM interface allows the user to override the first tier DSE defaults by utilizing existing adapters and data marshals to provide a mapping to an alternative FOM.  The development and availability of a wide variety of reusable adapters and data marshals will facilitate the integration of DSE with many different FOMs by simply editing a text configuration file.  DSE is built to dynamically load software components at run time.  Only the software components that are needed for a particular execution are loaded thus minimizing the memory and processing required by the system.  So, while many adapters and marshals can exist to allow DSE to address a wide variety of FOMs, only the software components that are actually needed are used for any given execution.The third tier of the DSE flexible FOM interface is intended to be used by software developers.  An API is provided to allow developers to extend the DSE native SOM by developing and registering new data adapters and marshals.  This API allows developers to create new software components to map their DSE federate to many FOMs not natively supported by the DSE SOM or by any existing adapters or marshals.  As with all DSE software components, the loading and binding of user-defined adapters and marshals occurs at run time thus the core DSE application does not need to be recompiled to use these new software components.The operation of the DSE Flexible FOM Interface can be best described by discussing the data path between the RTI and the internal DSE representation of data.  To describe the data path, we will focus on and present the way that data is received and processed by DSE with a generic FOM.  The following steps describe the interpretation of an arbitrary handle value pair set by DSE:1)	Receive handle value pair set from the RTI2)	Determine FOM object class for the handle value pair set using the object handle (performed by lookup table defined in DSE configuration file)3)	Determine mapping to internal SOM:-	Pick collection of adapters for identified object class (one adapter required for each attribute/parameter as defined in DSE configuration file)-	Pick data marshals (can be specified per FOM, per class, or per attribute/parameter as defined in DSE configuration file)4)	For each attribute/parameter in handle value pair set:-	Extract attribute/parameter buffer from handle value pair set-	Extract data values through data marshaller (which also performs byte alignment and swapping as necessary)-	Convert data to internal SOM format using adapter5)	Make internal representation of data item available to layers above DSE communications module.A similar process is used to migrate data from the internal DSE representation out to the RTI.  This layered and extensible approach to providing data communications via the HLA RTI allows users to map existing DSE federates to new FOMs and enables engineers to develop new software components to further extend the interoperability of DSE federates.4. Real World ApplicationRBD demonstrated a DSE-based 3D stealth viewer at the 1998 Interservice/Industry Training Simulation and Education Conference (I/ITSEC 98) held in Orlando, Florida from November 30 to December 3, 1998.  RBD demonstrated three instances of the stealth federate running on three different computing platforms (SGI, Linux PC and Windows NT PC) integrated with an HLA version of ModSAF converted by the Lockheed Martin Burlington, Massachusetts office under contract to DMSO.  During the exercise, a maximum of 65 entities were modeled and various platforms were simulated, including the M1, M2, T72, BMP, AH64 and A10.  The Chorwon Korea database was used as the synthetic environment terrain in S1000 format for the visual system and CTDB format for ModSAF.  Over four days, many DIS-like exercises were demonstrated showing dynamic entities and battlefield effects.The RTI executive, federation executive, HLA ModSAF federate, and a DSE stealth federate were all executing on a single CPU Linux PC.  One of the other DSE stealth federates ran on an SGI Octane and the third DSE stealth ran on an Intergraph PC system.  All DSE stealth federates used the RBD SEDRIS Navigator OpenGL-based rendering and terrain paging engine for the 3D graphics subsystem [].HLA ModSAF used its agile FOM interface and DSE used its flexible FOM interface to provide HLA interoperability during the show [][ NOTEREF _Ref439663052 \h  \* MERGEFORMAT 1].  In less than a week, a simple FOM was agreed upon and mapped accordingly to each federate.  The result was a federation execution that allowed DIS-like capabilities with synthetic environment and simulation interoperability without the need for a reference FOM.  HLA ModSAF and all DSE federates used a native HLA implementation using the RTI version 1.3r4 and did not use a gateway or bridge to achieve interoperability.5. SummaryThe DSE flexible FOM interface is an extensible and flexible way to achieve federate interoperability with multiple FOMs.  The object-oriented and dynamic-loading software principles utilized by DSE combined with the flexible FOM interface provide a modular federate that can address a wide range of users.  DSE provides flexibility both to users by the use of easy to read text configuration files and to developers by the use of an extendable API and dynamic loading.  The flexible FOM interface enables a federate to adapt to a new FOM without reliance on complex reference FOMs.  The flexible FOM approach also provides a framework on which to expand efficiently in the future with data items yet to be discovered and without the need for group consensus or unnecessary overhead.  The full potential of HLA can be exploited through the use of flexible FOM interfaces to maximize reuse and interoperability.6. References []	Barham, Paul T., Barker, Randall E., Metzger, Joanne L.,  “Dynamic Simulation Environment" to be published in the Proceedings of the 1999 International Training and Education Conference, The Hague, The Netherlands, April 13-15, 1999. []	Barham, Paul T., Barker, Randall E., Beckwith, Robert E. “Implementing a Simple HLA Federate: Lessons Learned from a DIS Perspective” in the Proceedings of the 98 Spring Simulation Interoperability Workshop, Orlando, FL, USA, March 9-13, 1998. []	Barham, Paul T., Barker, Randall E., Metzger, Joanne L., Damiano, James R.  “HLA as a Distributed Virtual Worlds Architecture” to be published in the Proceedings of the 1999 International Conference on Virtual Worlds and Simulation (1999 Western MultiConference), San Francisco, CA, USA, January 17-20, 1999. []	Metzger, Paul J.  “SEDRIS Viewer for Internet Browsers” in the Proceedings of the 98 Spring Interoperability Workshop, Orlando, FL, USA, March 9-13, 1998. []	Macannuco, D., Dufault, B., Ingraham, L.  “An Agile FOM Framework” in the Proceedings of the 98 Fall Simulation Interoperability Workshop, Orlando, FL, USA, Sept 14-19, 1998.AcknowledgmentsReality by Design would like to thank the guidance and sponsorship of DMSO on this project, especially Dr. Judith Dahmann for her interest and desire to help build tools and learning aids for teaching people about the HLA.  Also, thanks to Bill Wallace, Ed Simpson and Chris Turrell for all of  their assistance.  Special thanks to Dan Coffin and David Macannuco of Lockheed Martin for their help with HLA ModSAF during the planning and execution of the I/ITSEC demonstration.Author BiographiesRANDALL E. BARKER is a simulation engineer with Reality by Design.  He is a key contributor on the design, architecture, and implementation of software simulation products. Mr. Barker is the lead developer on the DSE project. He is the primary engineer responsible for converting the RBD HMMWV DIS driving simulator to be the first certified HLA Federate. Mr. Barker worked in many areas of visual simulation on the Naval Postgraduate School’s NPSNET-IV program. He holds a Bachelor of Science in computer science from the University of California, Davis.PAUL T. BARHAM  is a Lead Simulation Architect and Principal Investigator at Reality by Design.  Mr. Barham is responsible for new projects and initiatives at RBD. A large focus of his efforts relates to individual combatant simulation and the High Level Architecture.  Prior to his work at RBD, Mr. Barham was the senior architect and lead programmer on the NPSNET-IV Project at the Naval Postgraduate School (NPS).   Before coming to NPS, he taught Software Design and 3D Computer Graphics courses at N. C. State University, where he earned his Masters degree in Computer Science.  He is a member of ACM, ACM SIGGRAPH, IEEE, IEEE Computer Society and SID.JAMES R. DAMIANO is a virtual environments technology specialist at Reality by Design.  His background includes virtual simulation project management, systems integration, computer modeling and graphic design for virtual environments including systems featuring human anatomy, planetary exploration, and archeological site reconstruction.  He has exhibited virtual environments systems before the members of the U.S. Congress and has collaborated on development of an immersive telepresence system.  Mr. Damiano has a Bachelor of Arts in Economics from Cornell University.