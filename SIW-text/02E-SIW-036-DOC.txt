A Web-based Environment for building Distributed SimulationsJenny UlrikssonFarshad MoradiOlof SvenssonSwedish Defense Research AgencySE-172 90 Stockholm, Sweden HYPERLINK "mailto:jenny.ulriksson@foi.se" jenny.ulriksson@foi.se,  HYPERLINK "mailto:farshad.moradi@foi.se" farshad.moradi@foi.seKeywords:Web-based simulation, Collaborative simulation, High Level Architecture (HLA), Hierarchical federation development, Mobile agents, Peer To Peer (P2P) computing, JXTAABSTRACT: Internet communication in general and the World Wide Web specifically have been revolutionizing the computer industry. It has affected the way computer systems have been designed, developed and executed. Web-based simulation is a relatively new topic within the field of modelling and simulation (M&S), which represents a connection between the web-technology and M&S. Although the discipline is young it has the potential to fundamentally change the simulation modelling methodology.An ongoing project within the Swedish Defense Research Agency (FOI) is investigating the potentials of web-based simulation by studying the possibilities, requirements and feasibility of developing methodologies for building web-based distributed simulations, e.g. HLA federations. In order to achieve the above goal an environment has been designed and partially developed for collaboratively building distributed simulations, using a standard web-browser on the client side. One key requirement for the environment has been the ability to build component-based simulations with a hierarchical structure.In this paper we will present our initial results and findings when developing our environment, present different techniques and some of our implementations, based on HLA standard and continue with a discussion on how to construct federations in a hierarchical fashion. We will discuss how HLA federations can be integrated with the web technology, without burdening the client with heavy calculations, often associated with execution of simulations. We will also discuss the component-based development approach as a quick and cost effective method for building software systems and how it could be used with web-based simulations.1. IntroductionIn the last decade the World Wide Web has had a tremendous influence on the computer industry. It has affected the way computer systems have been designed, developed and used. The area of modelling and simulation (M&S) is no exception. Fishwick [1] early predicted the benefits that the web could bring to the M&S community. Now web-based simulations is an area by itself and much related research and development is today evident in many organisations, such as for example the defence industry. One of the research topics at issue is: What possibilities may the WWW bring to the development and executions of M&S, and how?The year 2001 a project “Web-based HLA Federations and Simulations”, shortly named the WebSim project, was initiated as a two-year project at the Swedish Defence Research Agency (FOI). This paper reflects the result from the first year. The main activities of the project have been to investigate the area of web-based M&S. What benefits could be achieved in terms of platform independence, availability and reusability etc.? And how would this most suitably be accomplished?The project was divided in two main parts, of which the first one was investigating and evaluating how to make legacy models web-based. The other part, and on which this paper is focusing, concerned development and execution of web-based HLA federations. The latter resulted in a prototype environment for experiments and demonstrations. The environment is described in this paper. The main requirements for the environment were that it should be web-based, platform independent and server-centric, making it possible for also thin clients to use the environment services. During the work some interesting issues arose which are presented later in this paper.A web-based simulation environment in this context means that a simulation environment is adapted to the web, and in that environment it is possible to develop and use simulations. The simulations may be located on the same computer as the client, or on a central server which the client can reach through a web user interface (a browser), or the simulations may be distributed over a network. In fewer words, the client has access  to and may develop and execute simulations and see the result, only needing a web-browser.1.1 Distributed simulations and the HLAThe area of Distributed Simulations started with SIMNET (Simulator Networking) in 1986. SIMNET was the result of several years of research within one of the DARPA projects [2] at the US Department of Defence (DoD). SIMNET initiated some major changes within the M&S community and the new area of distributed simulation was a fact. Soon a need arose for standardizing the way models interact, and as a result of this the DoD mandated DIS (Distributed Interactive Simulations). DIS was used for many years, and is still used to some extent. But to form a more complex and all-suitable standard, supporting interaction between all kinds of models and supporting simulation model reusability, DoD initiated the High Level Architecture (HLA) [3].HLA is a framework that allows development of component-based distributed simulations. It has rapidly gained many users world-wide, much due to its availability and many benefits, and the over-all need for such a standard. Most users are found within the defence industry, although HLA usage is rapidly growing within the commercial community as well. Though HLA is an excellent approach for facilitating model and simulation interoperability and also supporting reuse of simulation components, more could be won if some additions were provided. Hierarchical reuse and a higher level of platform independence are two topics which are discussed and handled later in this paper, and of which HLA lacks to some extent.1.2 Collaborative environmentsThe WWW has had a great influence on collaborative (simulation) model development. People now can work collaboratively on the same model, independent of their, or the models’, physical locations. The benefits of collaborative applications have been identified, and many different environments have been developed to provide this. However the  collaborative applications often have limitations such as platform dependence, limited capacity and poor model interoperability since they are neither component-based, nor standardized.One of the overall goals of the project is to extend the prototype environment to include user collaboration. Here collaboration is not meant only in terms of common model availability and common access to tools for development and communication. Collaboration here also includes that users are developing and executing a model or simulation together and at the same time. It does not mean that users reload updated versions of the simulation or the model from a shared library, which is the most usual approach. Making the prototype web-based makes a good foundation for extending the environment to be collaborative (in a decentralized way), and this discussion is presented later on in this paper.2. Methods and techniquesBefore developing the prototype for the web environment some investigation and evaluation was carried out regarding how simulations can be adapted to the web, and what techniques would be most suitable for this. The result is presented in this section.2.1 Component-based simulationsA component is a piece of software that can be distributed and used in other applications than it was originally intended for. When developing a simulation it can be created as a whole application (or program), or it can be built by joining separate components into a complete federation. A federation can shortly be described as a component-based simulation, where the components are called federates.The idea of a component-based approach for development of products, models, and software is not anything new and it has been adapted by many industries for quite some time. However, it is somewhat novel for HLA, where it has been realized through the Base Object Model (BOM) methodology [4]. The BOM concept was formally introduced in 1998. BOM by definition represents a single set of Object Model data [4]. It provides a distinct way to represent individual simulation interaction components and can be used as a Lego block for building FOMs (Federation Object Models) and SOMs (Simulation Object Models).The main advantage of component-based development of simulations, is the reusability of simulation models. However, this might also bring some limitations. To be able to connect the components, they have to be based on the same standard. The standards available are often platform dependent, and there is no commercially accepted standard format for this purpose.When developing our web-based simulation environment one of the goals is to support reusability, and easily available simulations. A good and general solution for accomplishing this, is to use component-based simulations. In the WebSim project the component-based approach was implemented. As a standard for this the HLA framework was chosen, since HLA has a widely spread use in the defense community, and since it is already in use at FOI.2.2 Suitable web techniquesWhen distributing a component-based simulation over a network, there is a need for a standard as described above, but there is also a need for a technique that remotely enables the users to access and execute the simulation components. A number of techniques were analyzed with respect to the purpose and the result is shown below.The common gateway interface (CGI) is a standard way for a web server to pass requests from a client to an external program [5]. The output of this program is then sent back to the client. CGI was one of the first techniques used for creating dynamic content in web pages, and since it is user-friendly it is widely used for this purpose.The initial purpose of CGI was not to create dynamic web pages, but rather to let information servers talk to external applications. This partly explains the CGI:s lengthy lifecycle. With CGI a new process is created for every request, which requires time and significant server resources. This limits the number of requests a server can handle, and hence restricts the use of CGI when distributing simulations.FastCGI is a CGI improvement and is more efficient than its origin, since it creates one single persistent process for each FastCGI program [6]. FastCGI is a plug-in to the web server and is a program that handles multiple CGI requests within a single process. But if the program is to handle concurrent requests, it needs a pool of processes. This is quite inefficient and does not scale very well, and thus does not suit the purpose here.The Enterprise JavaBeans (EJB) provides a Java framework for components that may be “plugged in” to a server (so called server-side components), hereby extending the server’s functionality [7]. The EJB is based on distributed object technologies and combines server-side components with distributed objects. The original JavaBean is also a component model, but not a server-side model. Thus the JavaBeans were not intended for distributed components, in contrary to the EJB:s. The EJB technology is an excellent approach for the purpose discussed here and it has also previously been used by Housand and Hudgins for federation management [8].A servlet is a generic server extension, a Java class that can be loaded dynamically to expand the functionality of a server [6]. The servlet can be thought of as a server-side applet that is loaded and executed by a web server in the same manner as the applet is loaded and executed by a web browser. There are several reasons for choosing servlets for developing web-based HLA federations. They offer a number of advantages over other approaches including portability, efficiency, endurance, safety and extensibility.Server Extension Application Programming Interfaces (API:s) are used to enhance or change the functionality of a server, without the use of external programs (like CGI) [6]. The server extension APIs use linked C or C++, which makes them run very fast. They exist within the main process of the (web) server, and hence can take full advantage of the server’s resources. This might be efficient, but it also means that server extension API:s are closely tied to the server and the operating system, which makes them not so well suited for distributed simulations.An Active Server Page (ASP) is Microsoft’s technology for deploying active content on the web [9]. An ASP is an HTML page that includes scripts, as for example JScript or VBScript, that are processed on a Microsoft web server before sent to the user. This allows developers to create web pages with dynamic content. ASP was designed to work on the Windows operating system, which might complicate running ASP pages on non-Windows platforms.The main advantages of ASP are low cost, good support for database connections and relatively good performance. The main disadvantages are the lack of platform and server independence.Java Server Pages (JSP) is an API developed by Sun to deploy web-based applications [10]. JSP is like an ASP page and even borrows a lot from ASP technology. It allows a developer to easily write static HTML with embedded dynamic content by enclosing active components in tags. The main difference between ASP and JSP is that in ASP active content is written with a scripting language, while in JSP active content is written in Java. This makes it possible to write complex logic in JSP that may not be possible in ASP. In fact, behind the scenes JSP pages are compiled into servlets, and hence has many of the advantages that servlets have.3. Implementation of our web-based environmentIn the WebSim project an environment was established in order to study how simulations could be adapted to the web, how difficult it was, and what possibilities it might bring. In this section we discuss the environment requirements, how an HLA-federation could be adapted to the web and how the environment was implemented.3.1 Environment requirementsIn section 1 a short presentation was made of the simulation environment that was developed and partially implemented in the project. The main requirement for the environment was that it should be web-based. This brings advantages such as platform independence and great availability and hence also supports model reusability.Another requirement to consider was that also very thin clients should be able to access and use the simulation environment, without the need to download and install great amounts of software. In order to achieve this easily, the environment was made server-centric (centralized), with the ulterior motive to minimize the burden for the client. A last requirement was that the environment should be developed very generally. Even though it was only a prototype, and not a fully implemented environment, it should support modification to be easily made and further experiments for distributed simulations to be easily performed.3.2 Web-based HLA federationsThe HLA framework allows independent simulations (federates) to be joined by a common software (RTI), that connects the federates to a complete simulation (federation) during execution [11]. The requirements are that the federates follow the HLA directives and rules and that the computer running the federation has an RTI software installed.In a distributed simulation exercise, every federate is usually executed on the computer where it is located. This means that any simulation program or other common software has to be installed on every computer where a client wants to use the simulation or develop new ones. If the simulation environment is web-based this wouldn’t be necessary. A client could then build and execute an HLA federation without needing for example the RTI, but only by using a standard web browser and sending the execution commands over the WWW to a server where the federation would be initiated. Afterwards, or during the execution, the result would be sent back to the client, and presented in the client’s browser. In this case it means that the HLA-federates should be able to be used by a client in the network through the web interface, no matter the physical location of the federates or the client. In other words, the federates have to be web-based to some extent, which means that they should be platform independent and easily used in and modified for networks.When developing web-based programs, in this case the HLA federates, there is a range of available programming languages to choose from. For this specific project the Java 2 platform was chosen. The main reasons for this choice were advantages such as platform independence, object-orientation and simplified network programming among others.3.3 The environmentThe environment consists of three main parts. The first part is the user interface, a client layer, from which a user can use, manipulate and execute simulations, and also see the simulation results. This is web-based and is in other words provided in the client’s browser. There also has to be some communication layer for the communication between the client and the location (or locations) where the actual simulation resides. In this case a server is used for hosting the simulation. The last part needed is the actual simulation or simulation environment, consisting of the simulation which in this case is an HLA-federation, and the common software - in this case an HLA-RTI.3.4 The user interfaceThe user interface is accessed from a web page. In this the user can develop federations through choosing federates available in the network, and combining them in a federation. Then a command with the federation information is sent to the location where the simulation resides. The execution is initiated and the result is continuously sent back to the user and presented by the client applet.When building the user interface we had some requirements to fulfil as described above. It should for example be possible for a thin client to use the environment and it should also be possible to access the environment from as many different types of browsers as possible. Therefore the interface application should be as platform independent as possible, and the simulation burden should be distributed to some other location than the client, in this case a server since the architecture is server-centric.For the web interface the Java applet was chosen, in this way the least burden possible is left to the client. The applet is downloaded to the client computer, and the user can choose federates from lists, name the federation and execute the federation remotely on a server. For the software development the Java language was chosen since it is platform independent and facilitates network programming.For the communication layer there are several solutions, and some techniques were investigated and evaluated for this purpose. The result is presented below.3.5 CommunicationFor the communication between the client and the federation a number of techniques could be used, as discussed in section 2.2 and of which some were disqualified for this specific case.The communication procedure can be divided into three major steps:The client communicates a request to execute the federation.The server initiates the federation execution.The execution data is transferred from the federation to the client.For this particular implementation the servlet technique was chosen for the communication layer. A servlet offers a very general solution to the problem, and it is suitable for distributed applications, which in this case are distributed federates. The figure below describes how the servlet was used, and shows one possible solution to how this can be done.Figure1: Depicting the communication between the client,  the servlet on a server and the federation on the  same or on another server.In this implementation the servlet has two functions: the first is to start the federation in a correct manner, and the second is to retrieve the execution data from the federation.The servlet triggers the execution with the exec() command. The federation executes and the federate responsible for the visualization of the federation sends the execution data using the multicast network services. The sending is done that way since the federates could be anywhere in the network, and the information transfer needs to be as universal as possible. The servlet listens to the correct port and returns the updates to the applet where the result is presented graphically by the applet.Using a servlet as a communication layer between client and server has shown to be good and general approach. However there are other solutions for this purpose, such as EJB or a combination of EJB:s and servlets. This combination was discussed and implemented by Housand and Hudgins [8]. Housand and Hudgins experimented with the idea of integrating one of the federates (preferably the visualization federate) with the servlet. They offer two alternative approaches, one server-centric and one browser-centric. We consider the possibility of implementing one of these in the web-based environment, and for the moment this is evaluated.3.6 Peer To Peer and JXTAOne of the goals of the WebSim project is to develop a collaborative environment, supporting web-based collaborative M&S development. To achieve this goal, the need for another software was identified when working on the prototype. This software would be integrated with the environment, in order to support the collaboration services. The software could be any binding layer between the clients, such as an agent network or a Peer To Peer (P2P) technology, that allows connection of nodes in a network and manages the information transfer between them.In the WebSim project some P2P techniques were investigated and evaluated. One technique was to be used in some experiments, and for that the JXTA platform, from SUN, was chosen.JXTA is an open-source project, originally developed by Sun, and it is platform independent as it is based on Java and XML. Since all source code is available at the project web site [12], this is a very suitable platform for further development and experiments. JXTA experiments are currently one of the priorities in the project, and tests are performed with attempts to use JXTA from a web environment and study what benefits this could bring. So far no distinctive JXTA results from WebSim are available.4. Hierarchical federation developmentSince simulation models often consist of complicated algorithms, the need for reusable simulations is obvious. In the HLA there is a built-in support to simplify the reuse of simulation components. But this support does not include hierarchical component reuse. If there exists a federation and you want to reuse this as part of a new federation, you have to rebuild the complete federation together with the new one, in order to allow all the federates in the new federation to communicate.To facilitate a more dynamic reuse, a new kind of federation was developed in the WebSim project, in order to extend the HLA component reuse support. This federation was here called a super federation and it consists of super federates, where the super federates are acting as federates in the super federation but are federations themselves.An illustrative example: Suppose there exists a federation representing the air dynamics for a specific type of military aircraft. It might then be feasible to add this federation to other federations representing other parts of the aircraft system, to create a realistic aircraft simulator. This aircraft federation can then be joined with other aircraft federations to form a squadron, which in turn can be joined with enemy aircraft to form a war scenario, and so on.4.1 Methods and techniquesThe HLA strictly depends on the requirement that all existing communication passes through the RTI. In order to make federations act as federates in a super federation, there is a need for some kind of technique, a bridge, between them that enables communication through the RTI. The bridge must consist of at least one “extra” federate. Here two alternatives were studied. The first alternative is to build a “centralized communication federate” that handles all communication between the different federations connected to the super federation. The second alternative is to let each federation, joining the super federation, have their own communication federate, i.e. the technique is based on “distributed communication federates”. The communication federate would be connected both to the joining federation and the super federation.A centralized communication federate needs one RTI ambassador for each joining federation. This makes the communication federate rather complicated, especially when the number of joining super federates increases.The distributed communication federate approach increases the number of communication federates needed, but it also simplifies the coding for each communication federate. That is why this technique was chosen for a test implementation.4.2 ImplementationThe idea with the implementation of the super federation was not to build a complex simulation, but only to test if the theories developed worked as expected. The technique chosen was the one based on distributed communication federates, as described in the figure below, where the super federation here is called the Communication federation. SHAPE  \* MERGEFORMAT Figure2: The use of distributed communication federates for building hierarchical federations.A communication federate was implemented. This federate was able to connect to both the actual federation (the super federate) and then to the super federation. It was also possible to let the super federate publish and subscribe to data in the intended way. Experiments including more federations are currently in progress.5. Discussion and Future workAt the moment the simulation environment allows a user to develop and execute HLA federations through a web interface (an applet) in a centralized way. However research in the project is currently being carried out to extend the environment to be decentralized and to allow users to develop and execute simulations together, at the same time, i.e. collaboratively. This would require an environment architecture including some software to  support and manage the network regarding communication, simulation visualization and shared resources.For this purpose two possible solutions are at issue. The first one is regarding integration of a P2P network  with the web environment, and in this case the JXTA platform would be a potential candidate. This would require some modifications of the JXTA platform, and such experiments are being carried out.The other solution is to include an agent architecture in the environment. This solution has been tried before in for example [8], but mostly it has been done in centralized networks. Our aim is to achieve this in a decentralized network. This is also part of the current work within the WebSim project.6. ConclusionsIn this work we have investigated how HLA federates could be fairly easily adapted to the web in order to achieve distributed, component-based, platform independent simulations. An environment prototype for this was built, in order to test the techniques and experience the amount of work that this would require. In this environment users can develop and execute HLA federations, without the need for any other software than a browser and a WWW connection.The prototype today is server-centric using a servlet for communication between the server and the client. The user interface is based on an applet that is communicating with the servlet, which in turn is controlling the client’s execution of Java-based HLA-federations on a server. This solution turned out to be easily implemented and functional. However the architecture would benefit from being decentralized. In a decentralized network resources would be distributed and not residing on a central server and thus depending on the server’s capacity. This could be achieved by for example integrating a P2P network in the environment, where clients and resources would be nodes. Another interesting modification would be to use EJB:s instead of servlets.An attempt was made to extend the HLA to allow hierarchical reuse. Two approaches were discussed and one of them was implemented in a very simple way to verify its functionality. This theory is based on distributed communication federates and means that every participating federation (super federate) has a communication federate that handles the communication between the super federates and the RTI, in the super federation.7. References[1]	Fishwick, P.A. “Web-based Simulation: Some Personal Observations”. In: Proceedings of the 1996 Winter Simulation Conference, pp. 772-779, Coronado, CA, 8-11 December 1996.[2]	DARPA. URL:  HYPERLINK "http://www.darpa.mil//" http://www.darpa.mil//, (Last visited: March 2002).[3]	DMSO, ”HLA”. URL: HYPERLINK "http://www.dmso.mil/index.php?page=64" http://www.dmso.mil/index.php?page=64, (Last visited: February 2002).[4]	SISO, May 2001 “BOM Methodology Strawman (BMS) Specification”. SISO-REF-006-2001.[5]	NCSA, Common Gateway Interface. URL: HYPERLINK "http://hoohoo.ncsa.uiuc.edu/cgi/" http://hoohoo.ncsa.uiuc.edu/cgi/, (Last visited: February 2002).[6]	Hunter, J. “Java Servlet Programming (2nd edition)”. O’Reilly. ISBN: 0-596-00040-5.[7]	Monson-Haefel, R. 2000 “Enterprise JavaBeans (2nd edition)”. O’Reilly. ISBN: 0-596-00040-5.[8]	Housand, C., Hudgins, B. “Bringing HLA to the Web: The Incorporation of Enterprise Java Technology into HLA Federations”. The Aegis technologies group, Inc. 2000 Spring SIW Conference, pp 00F-SIW-105.[9]	Microsoft, .”Active Server Pages”. URL: HYPERLINK "http://msdn.microsoft.com/library/default.asp?URL=/library//psdk/iisref/aspguide.html"  http://msdn.microsoft.com/library/default.asp?URL=/library/psdk/iisref/aspguide.html, (Last visited: February 2002).[10]	Pelegrí-Llopart, E. 2001 (August) “Java Server Pages Sprecification v.1.2”, Sun Microsystems. URL:  HYPERLINK "http://java.sun.com/products/jsp/" http://java.sun.com/products/jsp/, (Last visited: February 2002)[11]	Kuhl, F., Weatherly, R. and Dahmann, J. 2000 “Creating Computer Simulation Systems: An Introduction to the High Level Architecture”. Prentice-Hall. ISBN: 0-13-022511-8.[12]	Sun, JXTA. URL:  HYPERLINK "http://www.jxta.org/" http://www.jxta.org/, (Last visited: February 2002).Author BiographiesJENNY ULRIKSSON has worked as a Research Engineer at the Swedish Defense Research Agency since May 2001, after she had finished her M.Sc. education in Vehicle Engineering at the Royal Institute of Technology (KTH), Stockholm. Her main research interests are in the fields of Distributed Simulations, Web- and net-based M&S, and collaborative Modeling and Simulation.FARSHAD MORADI is a senior research officer in the Department of Systems Modelling at the Swedish Defence Research Agency (FOI). He has been working on modelling and simulation for the past seven years and has led projects at FOI since August 2000. He holds a Master of Science in Computer Science and Engineering from Chalmers University of Technology, Gothenburg, Sweden, and is pursuing his PhD at the Royal Institute of Technology (KTH). His research interests are in the area of Distributed and Web-based Simulations, Computer Generated Forces and Information Operations and Warfare.OLOF SVENSSON is a student at the University of Stockholm. He worked at the Swedish Defense Research Agency for a short time within the WebSim project, as a part of his Master’s Thesis. High Level Architecture, shortly named HLA. Java version 1.2.1 was chosen since this is supported in most web browsers today. Peer To Peer, shortly named P2P, is an alternative network technology where units (nodes) communicate directly, and not through a central layer.PAGE  PAGE  8