RICOS, an Experimental Secured Distributed Simulation NetworkLessons LearnedNathalie Le RestDominique CanazziMINDEF/DGA/D4S/CADnathalie.le-rest@dga.defense.gouv.fr, dominique.canazzi@dga.defense.gouv.frKeywordsDistributed Simulation, HLA, Network, Causal correctness, Security, Time Management, Performance, Ownership ManagementABSTRACT: The main objective of the experimental project RICOS (a French acronym for “Secure network for interconnection of distributed simulations”) was to assess the suitability of constructive distributed simulation for conducting technical and operational analyses involving the French procurement agency (DGA, "Délégation Générale pour l'Armement") and the Forces.This project was made of two steps. The first step consisted in establishing a federation using a wide area network interconnecting two centers in order to: define functional/technical requirements of analysis simulations, provide a first estimate of distribution and time management cost, implement the accurate security procedures for the network.This first step of this project was presented in 02F_SIW_036.During the second step, a larger federation was developed on wide area network including four nodes in order to evaluate:the reusability of the federates developed during the first step, the interoperability via HLA between two different simulation frameworks (ESCADRE in Ada under Linux, DUCTOR in C++ under Windows),the implementation and use of HLA ownership management,the global performance overhead.This paper discusses the results of the experiments that have been conducted during this second step and focuses on encountered difficulties, the measured performances and the best practices for distributed simulation applied to technical and operational analyses domain.IntroductionBy 1998, the interconnection of several simulations, supported by an adequate methodological framework, was supposed to enable:The sharing of the Modeling and Simulation (M&S) capabilities of several research centers, even far away from each other, while achieving a cost-effective global capability improvementThe simulation of complex joint exercises, as the simulation of landings supported by naval forces (landing craft, fire support …), in a hostile environment (land forces and air strikes)The carrying out technical and operational analyses involving NATO allies, while preserving some confidential models. As an example, allied OOTW exercises could be planned, each country remotely conducting his own virtual force at home, avoiding an expensive physical co-localizationThe development of modular and reusable simulations. Models developed for some specific needs will be more easily reused in other contexts, avoiding expensive rewritingsDespite some real needs and the expected benefits, distributed simulation stayed very uncommon in France in the analysis area. This was mainly due to the lack of a common infrastructure. So, creating the seed of a national, dedicated and secure simulation network sounded like a good idea.RICOS ObjectivesThe main objective of the RICOS (a French acronym for “Secure network for interconnection of distributed simulations”) experimental project was to assess the suitability of constructive distributed simulations for conducting technical and operational analyses involving the French procurement agency (DGA, "Délégation Générale pour l'Armement") and the Armed Forces. This project was divided in two steps:“RICOS Phase 1” interconnecting two centers“RICOS Phase 2” interconnecting four centersThe first step consisted in establishing a federation using a wide area network in order to: define functional/technical requirements for operational analysis simulationsprovide a first estimate of distribution and time management costimplement the accurate security procedures for the networkThis first step of the project was presented at 2002 Fall SISO Workshop (02F_SIW_036 [6]).The current paper treats the second step of the project. It discusses the results of experiments conducted during the second step and focuses on encountered difficulties, performances measured and best practices for distributed simulation applied to technical and operational analyses.RICOS Phase 2During this step, the federation was extended to a wider area including four nodes. The aim was to evaluate:the reusability of the federates developed during the first stepthe interoperability via HLA between two different simulation frameworks (ESCADRE in Ada under Linux, DUCTOR in C++ under Windows)the implementation and use of ownership managementthe global performance overheada proposed exercise methodology.Technical architectureThe extended network linked the LANs of the different centers. Figure 1 - Phase 2 extended networkThe transport network was based on three, military encrypted, specialized data links (SDL) connecting four centers (nodes) acting as gateways of LANs. The central node located in CAD also did routing for other nodes. The whole system acted in a unique IP space. The SDL throughputs were 2 Mbps, except the longest one (CAD-ANPROS) which was 512 kbps.Figure 2 – Interconnection networkThe Local Area Networks used an identical structure. The only exception concerned the central node (CAD) which had a supplementary workstation, dedicated to Network monitoring.Figure 3 – Local networkStudy background assumptionsBenefit assessment of distributed simulation concerned miscellaneous domains. Planning and training require heavy resources, both material and human, but deal with low technical challenge. On the opposite, technical and operational analyses have challenging requirements in a distributed context that firstly include causal correctness, repeatability, and multiple and as fast as possible execution. Finally, the study had been focused on operational analyses.As seen above, the selected scenario was a joint operation, involving four distant centers of different services. The network infrastructure was dedicated, and therefore was reducing noise sources on results.Federation design and scenario elaboration were based upon the assumption that each center brought in its own simulation application and was actively involved in the process.Phase 2 ScenarioThe scenario used during step 2 extended the scenario in Phase 1 [6]. It was supporting the reuse of the models and applications used in “RICOS Phase 1”, forcing to add a preexisting simulation (developed independently for navy intend), and was illustrating joint forces interactions.Operational ContextThe RED team had invaded an island and set up an anti-aircraft defense. The BLUE team had to neutralize the Anti Aircraft weapons and some strategic targets. The last action’s aim was zone control.Objective The objective was to plan and conduct air strikes (SEAD then bombing) in preparation of to planning and performing a landing onshore.Initial StateThe RED side heavily protected two strategic sites: a power plant and an ammunition dump. RED resources included army (infantry and armored), coastal batteries equipped with ground-to-surface missiles and anti-aircraft defense systems.The BLUE side had to destroy the power plant and the ammunition dump in order to recover terrain control.BLUE joint forces might involve aircraft operating from an air base, naval units and naval aviation units operating from off the island, and army forces embarked on naval landing units.Sequence of actionsThe choice mode of operation of the RED side was static defense. BLUE actions were countered by ground-to-air and ground-to-surface fire.BLUE operations were phased as follows:- air reconnaissance raid to potential target location and defense assessment- SEAD cruise missile wave attacking identified defense- second air reconnaissance raid for SEAD result assessment- an air bombing raid on the two target sites in order to neutralize their capabilities- finally, the landing of army forces, aimed to get control of the terrain, around the two sites. This phase went after a support air raid against RED army units.TerminationThe simulation stopped at a given date.Federation ImplementationThe federation design (federate allocation) reflected the competences of the three involved centers: Air/Army/Navy.ReusabilityAs an extension of “RICOS Phase 1”, “RICOS Phase 2” included new models and new interaction protocols related to ownership management. At least 4 federates were involved: The BLUE Air federate was adapted from the “RICOS Phase 1”-CASI application. It implemented the following models: Air Base, raids, aircraft, air to ground missiles, bombs and proxies for coastal batteries, SA6 and SA16, cruise missiles and ground targetsThe RED Land federate reused the “RICOS Phase 1”-CAD federate. In addition to the ground to air arty systems, it implemented models for armored light vehicles, infantry groups, cruise missiles and coastal batteriesThe BLUE Land federate reused the “RICOS Phase 1”-CAD federate. It implemented models for Army HQ, armored and transport vehicles, infantry groups, and proxies for coastal batteries, cruise missile, SA6 and SA16 systems and ground targets.The BLUE Navy federate was a DUCTOR application implementing models for aircraft carriers, frigates with cruise missiles and landing unitsSome passive federates might join the federation:The Plan View Display, adapted from the “RICOS Phase 1”-PVDThe Stealth Viewer, a 3D visualization application, COTS from Mäk TechnologiesThe FMT (Federation Monitoring Tool) from the DMSO software suite.InteroperabilityBLUE Air, BLUE Land, RED Land and PVD were ESCADRE/HLA applications, written in Ada and running on Linux boxes.BLUE Navy was a DUCTOR application, written in C++ and running on Windows 2000.The development had been made by two distinct teams in a heterogeneous environment, with respect to the FEDEP. A real team independence had been enforced (no sight on the code developed by each other), which led to real issues. The FOM had been built by a real negotiation between the two teams. Each team had developed their application according to this FOM before an integration phase.HLA Services implementedThere were 5 of the 6 HLA service groups used by the “RICOS Phase 2” federation:Federation Management: create/destroy federation execution, and join/resign; Declaration Management: publication and active subscription of object classes and interaction classes;Object Management: object creation, discovery, deletion and removal, attributes update and reflection, interactions sending and reception;Ownership Management: transfer of attributes update from BLUE Navy to BLUE Air, BLUE Navy to RED Land, and way back. The unconditional (not negotiated) transfer was used, with the risk of leaving attributes without owner, and the need for an applicative interaction protocolTime Management: coordinated time mode (both constrained and regulating for all the active federates), lookahead zero and time advances using NERA (Next Event Request Available).About Time ManagementThe main requirements for analysis simulations are a strict repeatability and causal correctness (events are always strictly ordered and must be processed at their exact logical date). In addition, execution must be as fast as possible and must support Monte-Carlo mode (multiple, non interactive replications with different random seeds) In an HLA distributed context, this implies strictly coordinated time management, time stamp ordering and reliable transportation of all attributes and interactions.About Ownership ManagementUsing this service in several models (bomber aircraft, infantry unit, cruise missile), including their proxies, led to a general ESCADRE “Transferable” agent creation.Implementing these services raised no noticeable issue. We already underlined the heterogeneous environment on the one hand with operating system (Linux, Windows), on the other hand with frameworks and languages (ESCADRE/Ada, DUCTOR/C++).We chose the RTI 1.3 NG v6 and FEDEP v1.5.SecurityThree security issue layers can be isolated: Layer 1: protection of the whole system against external attacks. Layer 2: protection of each center against each other: the global access clearance is more restricted than each internal site clearance. Layer 3: layer 2 requirements must be enforced during a federation execution (models must be protected against malevolent stimulation)During this project, the three layers have been analyzed; solutions have been designed and implemented for layers 1 and 2, and some guidance provided for layer 3:Level 1 : The SDLs are protected by military line encryption and classified areasLevel 2 : IP routing (address spaces controlled by routers),General disabling of potentially dangerous services (news, telnet, RPC, rlogin, etc.)Disabling of FTP services, except locally and on the dedicated server (logged and non anonymous access only).Results“RICOS Phase 2” suffered important delays, due to problems beyond the scope of this paper. Consequently, effective experimentation had been limited to integration and validation tests.Unsolved problems, mainly due to the poor quality of available diagnostics, have prevented the completion of a full completion of the planned scenario.Nevertheless, some tests had been completed for instance: Simulated/Elapsed time ratio was about 0.5 for “RICOS Phase 2” with 4 federates (versus 5.0 for “RICOS Phase 1” with 2 federates).Other output analysis conducted on the ESCADRE federates showed that federated spend 90 to 95% of time waiting for Time Advance Grant. Not surprisingly, as during “RICOS Phase 1”, the zero lookahead led to real performance problems.This idle time ratio grew along with the number of active federates, and less with the number of passive federates (that are time constrained, but not time regulating).As in “RICOS Phase 1”, security disposals had no impact on execution performance.Lessons learnedConcerning implementation, we encountered two kinds of issues: driving of Ownership Management and coordinated startup of the different applications.Another actual issue related to the global organization of teams and experiments.Ownership Management control issuesIn order to drive properly the attributes ownership transfer, a “Transferable” ESCADRE abstract agent had been developed. During experiment, validation and integration tests had revealed some design defects in the design of this agent. Some ugly workarounds had been done, but a complete redesign was necessary, implying significant changes in the derived agents and proxies.Impossibility of automatic synchronization of the applicationsThe ESCADRE/HLA framework offers a three-step coordinated federation startup mechanism:1- Wait for a predefined quorum is reached, by the means of a MOM polling,2- Enable time coordination3- Initiate and complete a synchronization point on the set of federates collected by step 1, and then actually run.The problem was that non ESCADRE federates seemed to be unable to discover late joiners, and so could never reach the requested quorum (they stayed stuck in step 1). This issue has not been worked out, preventing automatic, Monte Carlo mode execution.FEDEPThe FEDEP was used as a methodological guidance from both “RICOS Phase 1” and “RICOS Phase 2”.During “RICOS Phase 1”, FEDEP had been adapted to create new applications (as it is written in the FEDEP Guidance).It was a powerful help the whole development long.Nevertheless, FEDEP and the related documents are unable to hold all the information required to solve all the issues raised by a federation design and development. For instance, some related to environment (space reference information, data conversions), services (specific applicative protocol used to drive Ownership Management) and others. All these additional information should be held in a GRIM (Guidance Rational and Interoperability Manual).Network monitoringWith the means at our disposal, it was hard to analyze problems about federation execution. It's necessary to have right tools for monitoring network and federation. As “RICOS Phase 1”, the best solution is to develop and debug on LAN then move on WAN. Debug on WAN isn't easy indeed impossible.Human and organizational aspectsSome human and organizational issues appeared during experiments. Firstly, practice of simulation and required aims on distributed simulation weren't uniform within the French Ministry of Defense. Next, culture, vocabulary and security implementation were different. Finally, it was important to build a scenario which could motivate all involved people.All teams were required to respect a strict order when starting and monitoring runs. In one hand, as described earlier, it was impossible to synchronize federation start; on the other hand, security implementation didn't allow remote control. Moreover, in general people were not available at the same time. At least, replication duration and unsolved problem led to slack period that people did not very like.Best practices for distributed simulation applied to technical and operational analyses“RICOS Phase 2” results show how difficult is the Federation development process in both technical and cultural heterogeneous environmentAllocating modeling function to federates on a sides and forces basis is a common temptation – and mistake, it leads generally the highest performance cost. A better practice would have been to allocate heavily coupled models on the same federate (for example, sensors and observable parts of other targets). An approach is to use non-zero lookaheads, but this may introduce causality errors and artificial complexity if models are not properly designed.A good approach is to mock up the entire federation in a single, non distributed application, in order to validate the interactions between models (simplified if possible), before introducing the distribution fuzziness.Move on to security: if models have to be protected, remote control must be possible to debug and run a federation execution If the best performance optimization is to do no distribution at all, RICOS results lead to fix use cases of distributed simulation for technical and operational analyses: No distribution if it's possibleDistribution on a LAN when both software  or hardware can be moved and linking separate models is neededDistribution on a WAN when software or hardware can't be moved or for security reasons.Distributed simulation could be more beneficial for training and operation planning with taking precaution of doing good models.[6]References[1] Jean-Louis Igarza, Christian Sautereau: "Development of a HLA compliant version of the French ESCADRE simulation support environment (SSE): lessons learned and perspectives", Paper 98S-SIW-028, Orlando, Florida, Spring 1998.[2] Dominique Canazzi, Philippe Annic: "ESCADRE-HLA: an Operational Simulation Support Environment (SSE) for HLA Compliant Simulations Development", Paper 98F-SIW-088, Orlando, Florida, Fall 1998.[3] Jean-Louis Igarza, Theodore Dugone: "The WARRIOR/ELYSA Experience: A FEDEP Use Example", Paper 00S-SIW-142, Orlando, Florida, Spring 2000.[4] Dominique Canazzi, Philippe Annic: "ESCADRE-5.1: a SSE For Low Cost HLA Compliance", Paper 01S-SIW-052, Orlando, Florida, Spring 2001.[5] Jean-Louis Igarza, Christian Sautereau: "Distribution, Use and Re-use: Questioning cost-effectiveness of re-using simulations with and without HLA", Paper 01F-SIW-002, Orlando, Florida, Fall 2001.[6] Dominique Canazzi, Nathalie Le Rest: "RICOS: an Experimental Secure Distributed Simulation Network", Paper 02F-SIW-036, Orlando, Florida, Fall 2002.[6] Stewart Robinson: "Distributed Simulation and Simulation Practice", SIMULATION, Vol.81, Issue 1, January 2005. Suppression of Enemy Air Defense EMBED Word.Picture.8  Line Encryption HardwareSpecialized Data LineOffice automation PCEthernet SwitchedSimulation PCMonitoring PCA3 printingPrinting serverRouterCAD specificLan Area NetworkSpecialized Data LineCASI NodeInterconnection NetworkCROSAT NodeANPROS NodeCAD Node2 Mbps, 10 Kms512 kbps, 800 Kms