 DISPLAYNFC \l 0 Towards Conceptual Linkage of Models and SimulationsRobert D.  KingOld Dominion Universityrobking@verizon.netABSTRACT: When linking models or simulations, even the most complete description of the data exchanged between systems will not permit composition that guarantees the absence of emergent behaviors or structural variances.  This paper documents why this is so and enumerates five cases that define boundaries across which functional composition is not possible.  Conceptual linkage is a candidate solution to the problem of combining systems across these boundaries.  The nature of conceptual linkage is investigated through presentation of an initial list of requirements and discussion of its ramifications for simulation interoperability.1.    IntroductionThe Modeling and Simulation community needs methods for detecting and avoiding potential problems when combining models or simulations.  Much current research focuses on the data exchange between models.  The general idea underlying these efforts is that if the data can be standardized or restricted to a limited set, then unwanted interactions can be controlled.  Current efforts such as Model-Based Data Engineering  ADDIN REFMGR.CITE <Refman><Cite><Author>Tolk</Author><Year>2007</Year><RecNum>77</RecNum><IDText>Model-Based Data Engineering: Preparing a Paradigm Shift towards Self-Organizing Information Exchange</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>77</Ref_ID><Title_Primary>Model-Based Data Engineering: Preparing a Paradigm Shift towards Self-Organizing Information Exchange</Title_Primary><Authors_Primary>Tolk,Andreas</Authors_Primary><Authors_Primary>Diallo,Saikou Y.</Authors_Primary><Authors_Primary>Turnitsa,Charles</Authors_Primary><Date_Primary>2007</Date_Primary><Keywords>interoperability</Keywords><Reprint>Not in File</Reprint><Start_Page>1112</Start_Page><End_Page>1119</End_Page><Periodical>Proceedings of the Summer Computer Simulation Conference</Periodical><Title_Secondary>Summer Computer Simulation Conference 2007 (SCSC 2007)</Title_Secondary><Title_Series>Summer Computer Simulation Conference</Title_Series><ZZ_JournalFull><f name="System">Proceedings of the Summer Computer Simulation Conference</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[1] produce several types of mapping: conceptual mapping, attribute mapping, and content mapping.  Data management results in a well-understood and well-documented model of the information that services share, but only if the concepts are aligned at the ontological level.  Let there be no doubt as to the value of such efforts—resolving these issues is critical.  Nevertheless, there remains a fundamental shortfall to achieving simulation and model interoperability:  that what goes on inside models affects whether they can be linked together successfully or not.  Furthermore, although ontology plays a critical role, the answer is not simply a matter of building larger and more complete ontologies.  The following sections discuss conceptual interoperability from three points of view:  why conceptual interoperability is difficult, why conceptual linkage is absolutely required, and the nature of conceptual links.2.    The Elusiveness of LCIM Level 6--Conceptual InteroperabilityMuch work has been done within the M&S community to achieve composability:  the capability to configure, initialize, and test an exercise rapidly by logically assembling a simulation from a pool of reusable components.  In our imperfect world, when designing and creating models analysts decide what to ignore and what to include (as well as how to model what’s included).  Occasionally and often unpredictably, this process produces incompatibilities between models.  Davis and Anderson  ADDIN REFMGR.CITE <Refman><Cite><Author>Davis</Author><Year>2004</Year><RecNum>21</RecNum><IDText>Improving the Composability of Department of Defense Models and Simulations</IDText><MDL Ref_Type="Report"><Ref_Type>Report</Ref_Type><Ref_ID>21</Ref_ID><Title_Primary>Improving the Composability of Department of Defense Models and Simulations</Title_Primary><Authors_Primary>Davis,Paul K.</Authors_Primary><Authors_Primary>Anderson,Robert A.</Authors_Primary><Date_Primary>2004</Date_Primary><Keywords>composability</Keywords><Reprint>Not in File</Reprint><Publisher>RAND National Defense Research Institute</Publisher><ISSN_ISBN><f name="AGaramond-Regular">0-8330-3525-8 (pbk. : alk. paper)</f></ISSN_ISBN><Web_URL_Link1><u>file://C:\Users\rking\Papers\Modeling&amp;Simulation\Davis03ImprovingTheComposabilityofDoDM&amp;S.pdf</u></Web_URL_Link1><ZZ_WorkformID>24</ZZ_WorkformID></MDL></Cite></Refman>[2] discuss many factors governing why this is so and explain why complete elimination of conflicts may possibly be unachievable.  They present many suggestions to enhance prospects for composability—among them is recognition that models are different from general software components and that model composability needs to be based on the science of modeling and simulation.  The Levels of Conceptual Interoperability Model (LCIM) was developed by Tolk et al.   ADDIN REFMGR.CITE <Refman><Cite><Author>Tolk</Author><Year>2003</Year><RecNum>6</RecNum><IDText>The Levels of Conceptual Interoperability Model, 03F-SIW-007</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>6</Ref_ID><Title_Primary>The Levels of Conceptual Interoperability Model, 03F-SIW-007</Title_Primary><Authors_Primary>Tolk,Andreas</Authors_Primary><Authors_Primary>Muguira,James</Authors_Primary><Date_Primary>2003</Date_Primary><Keywords>interoperability</Keywords><Reprint>Not in File</Reprint><Periodical>Proceedings of the Fall Simulation Interoperability Workshop</Periodical><Title_Secondary>Fall Simulation Interoperability Workshop</Title_Secondary><Title_Series>Fall Simulation Interoperability Workshop</Title_Series><Misc_2>Orlando, FL</Misc_2><Web_URL_Link1><u>file://C:\HOME\KING\Papers\Modeling&amp;Simulation\SIW\03F-SIW-007.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">Proceedings of the Fall Simulation Interoperability Workshop</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite><Cite><Author>Turnitsa</Author><Year>2005</Year><RecNum>22</RecNum><IDText>Extending the Levels of Conceptual Interoperability Model</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>22</Ref_ID><Title_Primary>Extending the Levels of Conceptual Interoperability Model</Title_Primary><Authors_Primary>Turnitsa,Charles</Authors_Primary><Date_Primary>2005</Date_Primary><Keywords>interoperability</Keywords><Reprint>Not in File</Reprint><Periodical>Proceedings of the Summer Computer Simulation Conference</Periodical><Title_Secondary>Summer Computer Simulation Conference</Title_Secondary><Web_URL_Link1><u>file://C:\HOME\KING\Papers\Modeling&amp;Simulation\Turnista06ExtendedLCIM.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">Proceedings of the Summer Computer Simulation Conference</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[3;4] as a hierarchical framework for evaluating the degree to which system components share information, not simply as data and formatting, but also syntax, semantics, meaning and use.  The lower LCIM levels, Technical and Syntactic interoperability, deal with communication infrastructure and data protocols.  The Semantic level is largely satisfied by having a common term definition that results in unambiguously exchanging data.  Reaching the Pragmatic level requires exchange of data context.  At the Dynamic level, interoperating systems comprehend state changes that occur in the assumptions and constraints that each other are making over time—essentially allowing the unambiguous exchange of information.  Conceptual interoperability, the highest level, is accomplished when interoperating systems not only understand the concepts, assumptions, and relations that are particular to each other, but when their models and processes are aligned.  The LCIM serves as a maturity model for interoperation and thus provides a measure of the degree to which models and simulations interoperate successfully—the greater the LCIM level achieved, the higher the likelihood for consistent and valid interoperation.  If the conceptual models – i.e.  the assumptions and constraints of the “purposeful abstraction of reality” –align, the highest level of interoperability is reached: Conceptual Interoperability.  This requires that conceptual models be fully documented based on engineering methods enabling their interpretation and evaluation by other engineers.  In other words, we need a “fully specified but implementation independent model” as requested in Davis and Anderson  ADDIN REFMGR.CITE <Refman><Cite><Author>Davis</Author><Year>2004</Year><RecNum>21</RecNum><IDText>Improving the Composability of Department of Defense Models and Simulations</IDText><MDL Ref_Type="Report"><Ref_Type>Report</Ref_Type><Ref_ID>21</Ref_ID><Title_Primary>Improving the Composability of Department of Defense Models and Simulations</Title_Primary><Authors_Primary>Davis,Paul K.</Authors_Primary><Authors_Primary>Anderson,Robert A.</Authors_Primary><Date_Primary>2004</Date_Primary><Keywords>composability</Keywords><Reprint>Not in File</Reprint><Publisher>RAND National Defense Research Institute</Publisher><ISSN_ISBN><f name="AGaramond-Regular">0-8330-3525-8 (pbk. : alk. paper)</f></ISSN_ISBN><Web_URL_Link1><u>file://C:\Users\rking\Papers\Modeling&amp;Simulation\Davis03ImprovingTheComposabilityofDoDM&amp;S.pdf</u></Web_URL_Link1><ZZ_WorkformID>24</ZZ_WorkformID></MDL></Cite></Refman>[2], and not just a text describing the conceptual idea.  In a recent tutorial presented at I/ITSEC, Tolk et al  ADDIN REFMGR.CITE <Refman><Cite><Author>Tolk</Author><Year>2006</Year><RecNum>54</RecNum><IDText>Ontology Driven Interoperability &#x2013; M&amp;S Applications</IDText><MDL Ref_Type="Report"><Ref_Type>Report</Ref_Type><Ref_ID>54</Ref_ID><Title_Primary>Ontology Driven Interoperability &#x2013; M&amp;S Applications</Title_Primary><Authors_Primary>Tolk,Andreas</Authors_Primary><Authors_Primary>Diallo,Saikou Y.</Authors_Primary><Authors_Primary>Turnitsa,Charles</Authors_Primary><Date_Primary>2006</Date_Primary><Keywords>interoperability</Keywords><Reprint>Not in File</Reprint><Volume><i>Whitepaper in support of the I/ITSEC Tutorial,VMASC Report 2548, Old Dominion University</i></Volume><Title_Series>Tutorial for Interservice/Industry Training, Simulation and Education Conference (I/ITSEC)</Title_Series><ZZ_WorkformID>24</ZZ_WorkformID></MDL></Cite></Refman>[5] evaluated the state of the art for the contributions of selected protocols towards satisfying the levels of the LCIM.   REF _Ref172891841 \h Figure 1 is a summary of their work.  For each protocol the density of the square indicates the relative degree of support for the indicated Level.  As can be seen, virtually no support is provided by current simulation interoperation protocols for the highest level of interoperability.  Figure  SEQ Figure \* ARABIC 1.  Protocol Contributions toward Achieving LCIMKing, et al  ADDIN REFMGR.CITE <Refman><Cite><Author>King</Author><Year>2007</Year><RecNum>62</RecNum><IDText>How to Play Fairly: Agents and Web Services Can Help, 07S-SIW-097</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>62</Ref_ID><Title_Primary>How to Play Fairly: Agents and Web Services Can Help, 07S-SIW-097</Title_Primary><Authors_Primary>King,Robert D.</Authors_Primary><Authors_Primary>Diallo,Saikou Y.</Authors_Primary><Authors_Primary>Tolk,Andreas</Authors_Primary><Date_Primary>2007</Date_Primary><Reprint>Not in File</Reprint><Periodical>Proceedings of the Spring Simulation Interoperability Workshop</Periodical><Title_Secondary>Spring Simulation Interoperability Workshop</Title_Secondary><ZZ_JournalFull><f name="System">Proceedings of the Spring Simulation Interoperability Workshop</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[6] make the case that it is the failure to capture and, later, to communicate the details of modeling decisions that is at the root of model interoperation conflicts.  They note that often, design decisions made during implementation   become undocumented changes to the conceptual model and that as a result, not all aspects of the conceptual model, the specified model, and modeling artifacts of the implementation are captured.  Among the reasons why this is so are:The cost in time and effort to document every modeling decision is prohibitive.  Tools to capture design decisions suffer a variety of problems.The discipline of design decision capture is not widely taught, practiced or enforced in software development projects.  The required ontologies for expressing and reasoning about concepts in many domains of discourse lack maturity.Data transformations to facilitate model reuse often introduce undetected model changes.Application of iterative development paradigms to modeling and simulation can exacerbate these problems.  Iterative development paradigms vary considerably in the number and type of iterations involved.  Some paradigms, such as Incremental, Spiral and Evolutionary Development, depend on conceptual model refinement.  Even so, there is no guarantee that the conceptual model is faithfully updated.  Thus, when it becomes time to integrate models at the very least there will be some conflicts between them—owing to the failure to capture conceptual models fully.  The effects can range from very benign (and unnoticed) to catastrophic.  Spaccapietra et al  ADDIN REFMGR.CITE <Refman><Cite><Author>Spaccapietra</Author><Year>1992</Year><RecNum>29</RecNum><IDText>Model Independent Assertions for Integration of Heterogeneous Schemas</IDText><MDL Ref_Type="Journal"><Ref_Type>Journal</Ref_Type><Ref_ID>29</Ref_ID><Title_Primary>Model Independent Assertions for Integration of Heterogeneous Schemas</Title_Primary><Authors_Primary>Spaccapietra,Stafano</Authors_Primary><Authors_Primary>Parent,Christine</Authors_Primary><Authors_Primary>Dupont,Yann</Authors_Primary><Date_Primary>1992</Date_Primary><Reprint>Not in File</Reprint><Start_Page>81</Start_Page><End_Page>126</End_Page><Periodical>VLDB Journal: Very Large Databases</Periodical><Volume>1</Volume><Issue>1</Issue><Web_URL><u>http://citeseer.ist.psu.edu/spaccapietra92model.html</u></Web_URL><ZZ_JournalFull><f name="System">VLDB Journal: Very Large Databases</f></ZZ_JournalFull><ZZ_WorkformID>1</ZZ_WorkformID></MDL></Cite></Refman>[7] enumerate four conflict types: semantic (wherein the concepts of the different local schemata do not match exactly, but need to be aggregated or disaggregated), descriptive (e.g.  homonyms, synonyms, different names for the same concept, different attributes or slot values for the same concept), heterogeneous (arising from mixing substantially different methodologies for describing concepts), and structural (where variances exist between different structures that describe the same concept).  Muguira and Tolk  ADDIN REFMGR.CITE <Refman><Cite><Author>Muguira</Author><Year>2006</Year><RecNum>30</RecNum><IDText>Applying a Methodology to Identify Structural Variances in Interoperations</IDText><MDL Ref_Type="Journal"><Ref_Type>Journal</Ref_Type><Ref_ID>30</Ref_ID><Title_Primary>Applying a Methodology to Identify Structural Variances in Interoperations</Title_Primary><Authors_Primary>Muguira,James A.</Authors_Primary><Authors_Primary>Tolk,Andreas</Authors_Primary><Date_Primary>2006</Date_Primary><Keywords>agent-based simulation</Keywords><Keywords>continuous and discrete simulation</Keywords><Keywords>discrete-event simulation</Keywords><Keywords>distributed simulation</Keywords><Keywords>interoperability</Keywords><Reprint>Not in File</Reprint><Start_Page>77</Start_Page><End_Page>93</End_Page><Periodical>The Journal of Defense Modeling and Simulation</Periodical><Volume>3</Volume><Issue>2</Issue><Pub_Place>San Diego, CA</Pub_Place><Publisher>The Society for Modeling and Simulation International</Publisher><Web_URL_Link1><u>file://C:\Users\rking\Papers\Modeling&amp;Simulation\JDMS\VOL3NUM2\JDMSvol3no2Muguira77-93.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">The Journal of Defense Modeling and Simulation</f></ZZ_JournalFull><ZZ_WorkformID>1</ZZ_WorkformID></MDL></Cite></Refman>[8], merge various specification schemes and present a methodology to define the structural variances between components.  They maintain that one needs an overarching model, such as the DoDAF for the military domain, to guide the capture of conceptual detail and at the same time provide a low-level base set of implementation specific details, such as DEVS, and protocols, like HLA, that create  a study system.Detecting, understanding and correcting model conflicts can be time consuming and costly.  One possible solution is to employ Herculean bookkeeping efforts—and that is often done—to resolve model discrepancies.  Of course, it is usually possible to align two models completely for a specific instance, at a single time, or for a specific execution.  Given this, one might be tempted to conclude that really, really, really careful bookkeeping could, theoretically, achieve composability.  Not so!  A single permutation of purpose or a perturbation in the problem potentially produces an incompatibility that, for all practical purposes, guarantees conceptual model misalignment.Misalignment of conceptual models is certainly the most potent factor, but not the only one.  The next section presents additional barriers to composability.3.    Barriers to Functional CompositionTo understand why there exist cases when the linkage between models can not be described by a composition of functions, the notion of composability (as used in  ADDIN REFMGR.CITE <Refman><Cite><Author>Page</Author><Year>1999</Year><RecNum>13</RecNum><IDText>Observations On The Complexity Of Composable Simulation</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>13</Ref_ID><Title_Primary>Observations On The Complexity Of Composable Simulation</Title_Primary><Authors_Primary>Page,Ernest H.</Authors_Primary><Authors_Primary>Opper,Jeffrey M.</Authors_Primary><Date_Primary>1999</Date_Primary><Reprint>Not in File</Reprint><Periodical>Proceedings of the Winter Simulation Conference</Periodical><Title_Secondary>Winter Simulation Conference</Title_Secondary><Web_URL_Link1><u>file://C:\Users\rking\Papers\Modeling&amp;Simulation\Winter Simulation Conference\1999\Page99ObservationsOnTheComplexityOfComposableSimulation.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">Proceedings of the Winter Simulation Conference</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite><Cite><Author>Petty</Author><Year>2003</Year><RecNum>3</RecNum><IDText>A Composability Lexicon, 03S-SIW-023</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>3</Ref_ID><Title_Primary>A Composability Lexicon, 03S-SIW-023</Title_Primary><Authors_Primary>Petty,Mikel D.</Authors_Primary><Authors_Primary>Weisel,Eric W.</Authors_Primary><Date_Primary>2003</Date_Primary><Keywords>composability</Keywords><Reprint>Not in File</Reprint><Periodical>Proceedings of the Spring Simulation Interoperability Workshop</Periodical><Title_Secondary>Spring Simulation Interoperability Workshop</Title_Secondary><Misc_2>Orlando, FL</Misc_2><Web_URL_Link1><u>file://C:\Users\rking\Papers\Modeling&amp;Simulation\SIW\03S-SIW-023.doc</u></Web_URL_Link1><ZZ_JournalFull><f name="System">Proceedings of the Spring Simulation Interoperability Workshop</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite><Cite><Author>Petty</Author><Year>2003</Year><RecNum>15</RecNum><IDText>Computational Complexity of Selecting Components for Composition, 03F-SIW-072</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>15</Ref_ID><Title_Primary>Computational Complexity of Selecting Components for Composition, 03F-SIW-072</Title_Primary><Authors_Primary>Petty,Mikel D.</Authors_Primary><Authors_Primary>Weisel,Eric W.</Authors_Primary><Authors_Primary>Mielke,Roland R.</Authors_Primary><Date_Primary>2003</Date_Primary><Keywords>interoperability</Keywords><Reprint>Not in File</Reprint><Periodical>Proceedings of the Fall Simulation Interoperability Workshop</Periodical><Title_Secondary>Fall Simulation Interoperability Workshop</Title_Secondary><Misc_2>Orlando, FL</Misc_2><Web_URL_Link1><u>file://C:\Users\rking\Papers\Modeling&amp;Simulation\SIW\03F-SIW-072.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">Proceedings of the Fall Simulation Interoperability Workshop</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite><Cite><Author>Weisel</Author><Year>2003</Year><RecNum>14</RecNum><IDText>Validity of Models and Classes of Models in Semantic Composability, 03F-SIW-073</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>14</Ref_ID><Title_Primary>Validity of Models and Classes of Models in Semantic Composability, 03F-SIW-073</Title_Primary><Authors_Primary>Weisel,Eric W.</Authors_Primary><Authors_Primary>Petty,Mikel D.</Authors_Primary><Authors_Primary>Mielke,Roland R.</Authors_Primary><Date_Primary>2003</Date_Primary><Keywords>composability</Keywords><Reprint>Not in File</Reprint><Periodical>Proceedings of the Fall Simulation Interoperability Workshop</Periodical><Title_Secondary>Winter Simulation Interoperability Workshop</Title_Secondary><Misc_2>Orlando, FL</Misc_2><Web_URL_Link1><u>file://C:\HOME\KING\Papers\Modeling&amp;Simulation\SIW\03F-SIW-073.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">Proceedings of the Fall Simulation Interoperability Workshop</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[9-12]) must be refined by introducing the term functional composability.  In making a functional composition, the outputs of one model become the inputs to another without ambiguity or unintended effect.  3.1  Critical Role of AssumptionsComponents can be functionally composed as long as they result in an engineering model as defined by Foo   ADDIN REFMGR.CITE <Refman><Cite><Author>Foo</Author><Year>2001</Year><RecNum>18</RecNum><IDText>Why Engineering Models Do Not Have A Frame Problem</IDText><MDL Ref_Type="Book Chapter"><Ref_Type>Book Chapter</Ref_Type><Ref_ID>18</Ref_ID><Title_Primary>Why Engineering Models Do Not Have A Frame Problem</Title_Primary><Authors_Primary>Foo,Norman Y.</Authors_Primary><Date_Primary>2001</Date_Primary><Reprint>Not in File</Reprint><Start_Page>15</Start_Page><End_Page>26</End_Page><Title_Secondary>Discrete Event Modeling And Simulation Technologies</Title_Secondary><Authors_Secondary>Sarjouhian,Hessam S.</Authors_Secondary><Authors_Secondary>Cellier,Fran&#xE7;ois E.</Authors_Secondary><Issue>2</Issue><Pub_Place>New York</Pub_Place><Publisher>Springer-Verlag</Publisher><ZZ_WorkformID>3</ZZ_WorkformID></MDL></Cite></Refman>[13].  Foo discusses the frame problem that has occupied the attention of AI researchers in the logic of action.  The frame problem is the challenge of representing the effects of action without having to represent explicitly a large number of intuitively obvious non-effects.  To many philosophers, the AI researchers' frame problem is suggestive of a wider epistemological issue, namely whether it is possible, in principle, to limit the scope of the reasoning required to derive the consequences of an action (for more on the topic, see  ADDIN REFMGR.CITE <Refman><Cite><Author>Shanahan</Author><Year>2004</Year><RecNum>76</RecNum><IDText>Stanford Encyclopedia of Philosophy: The Frame Problem</IDText><MDL Ref_Type="Electronic Citation"><Ref_Type>Electronic Citation</Ref_Type><Ref_ID>76</Ref_ID><Title_Primary>Stanford Encyclopedia of Philosophy: The Frame Problem</Title_Primary><Authors_Primary>Shanahan,Murray</Authors_Primary><Date_Primary>2004</Date_Primary><Reprint>Not in File</Reprint><Periodical>http://plato.stanford.edu/entries/frame-problem/</Periodical><Date_Secondary>2007/7/24</Date_Secondary><Web_URL><u>http://plato.stanford.edu/entries/frame-problem/</u></Web_URL><ZZ_JournalStdAbbrev><f name="System">http://plato.stanford.edu/entries/frame-problem/</f></ZZ_JournalStdAbbrev><ZZ_WorkformID>34</ZZ_WorkformID></MDL></Cite></Refman>[14]).To engineers who have had to cope with the modeling of dynamic systems, the frame problem sometimes seems to be a quaint obsession, and possibly an artifact of logic.  Foo clarifies the main issues so that engineers can understand why the frame problem is not contrived, and points out to AI scientists that as they search for efficient ways to deal with the frame problem, their solutions begin to look suspiciously like what the more sophisticated engineers have been doing.  An engineering model does not (generally) suffer from the frame problem because of implicit assumptions, generally known as the inertia rule, made as a fundamental component of the problem statement and solution.  The inertia rule is the assumption that effects are local unless otherwise stated.  Frame assumptions are examined by Spiegel et al  ADDIN REFMGR.CITE <Refman><Cite><Author>Speigel</Author><Year>2005</Year><RecNum>61</RecNum><IDText>A Case Study of Model Context for Simulation Composability and Reusability</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>61</Ref_ID><Title_Primary>A Case Study of Model Context for Simulation Composability and Reusability</Title_Primary><Authors_Primary>Speigel,Michael</Authors_Primary><Authors_Primary>Reynolds,Paul F.</Authors_Primary><Authors_Primary>Brogan,David C.</Authors_Primary><Date_Primary>2005</Date_Primary><Keywords>composability</Keywords><Reprint>Not in File</Reprint><Periodical>Proceedings of the Winter Simulation Conference</Periodical><Title_Secondary>2005 Winter Simulation Conference</Title_Secondary><Title_Series>Winter Simulation Conference</Title_Series><Web_URL_Link1><u>file://C:\Users\rking\Papers\Modeling&amp;Simulation\Winter Simulation Conference\2005\spiegel05ACaseStudyOfModelContextForSimulationComposabilityAndReusability.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">Proceedings of the Winter Simulation Conference</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[15], who conducted a small case study in order to clarify the role that model context plays in simulation composability and reusability.  For a simple problem: compute the position and velocity of a falling body, they found that a reasonable formulation of a solution included a surprising number of implicit assumptions—their non-exhaustive list included 29 constraints.  Several, such as special relativity (assumed not to be significant) and Coriolis Effect (can be ignored), were not-so-obvious.  Even so, once these constraints have been identified a junior engineer or physicist would be able to construct examples where accounting for these effects is critical.  They observe that failure to appreciate the importance of various constraints when selecting a model can lead to unacceptable results.  While it may be that their original formulation for the falling body is a suitable approximation for a golf ball or cannon ball in flight, that decision should be made knowledgeably by a designer.  Such a decision can only be made if the assumptions associated with each model are identified and understood.Garlan et al  ADDIN REFMGR.CITE <Refman><Cite><Author>Garlan</Author><Year>1995</Year><RecNum>64</RecNum><IDText>Architectural Mismatch or Why it&apos;s hard to build systems out of existing parts</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>64</Ref_ID><Title_Primary>Architectural Mismatch or Why it&apos;s hard to build systems out of existing parts</Title_Primary><Authors_Primary>Garlan,David</Authors_Primary><Authors_Primary>Allen,Robert</Authors_Primary><Authors_Primary>Ockerbloom,John</Authors_Primary><Date_Primary>1995</Date_Primary><Reprint>Not in File</Reprint><Start_Page>179</Start_Page><End_Page>185</End_Page><Periodical>Proceedings 17th International Conference on Software Enginneering</Periodical><Publisher>ACM SIGSOFT</Publisher><Web_URL><u>http://citeseer.ist.psu.edu/garland95architectural.html</u></Web_URL><ZZ_JournalFull><f name="System">Proceedings 17th International Conference on Software Enginneering</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[16] illustrate four types of mismatch that center around the assumptions a reusable part makes about the structure of the application in which is to appear.  They show how an architectural view of the mismatch problem exposes some fundamental, thorny problems for software composition and suggest possible research avenues needed to solve them.  The four main categories of architectural mismatch are: Assumptions about the nature of the components, including (1)  infrastructure—assumptions about the substrate on which the component is built; (2) control model—assumptions about which component(s) (if any) control overall the sequencing of computations; (3) data model—assumptions about the way the environment will manipulate data managed by a componentAssumptions about the nature of the connectors, including (1) protocols—assumptions about the patterns of interaction characterized by a connector; and (2) data model—assumptions about the kind of data that is communicatedAssumptions about the global architectural structure, including assumptions about the topology of the system communications and about the presence or absence of particular components and connectorsAssumptions about the construction processAt this point, the astute reader might conjecture that all that is needed (!) to achieve functional composability is adding a careful accounting of every possible assumption.  S/he would seek to align the interactions between systems by taking into account every element of data exchanged, as well as the models and processes underlying the data.  However, even if this were possible, there are cases where enumerating all of the assumptions simply cannot be done.  As all three authors cited in this section point out, aligning assumptions (and thereby avoiding invoking the inertia rule) is potentially critical.  3.2  Five Barriers to Functional CompositionThe list that follows presents five cases where functional composability is not possible.  The list is the result of the author’s PhD research conducted so far, is tentative, written to generate feedback, and not necessarily complete.  The first three cases derive from work by Eberbach, et al  ADDIN REFMGR.CITE <Refman><Cite><Author>Eberbach</Author><Year>2004</Year><RecNum>17</RecNum><IDText>Turing&apos;s Ideas and Models of Computation</IDText><MDL Ref_Type="Book Chapter"><Ref_Type>Book Chapter</Ref_Type><Ref_ID>17</Ref_ID><Title_Primary>Turing&apos;s Ideas and Models of Computation</Title_Primary><Authors_Primary>Eberbach,Eugene</Authors_Primary><Authors_Primary>Goldin,Diana Q.</Authors_Primary><Authors_Primary>Wegner,Peter</Authors_Primary><Date_Primary>2004</Date_Primary><Reprint>Not in File</Reprint><Start_Page>159</Start_Page><End_Page>194</End_Page><Title_Secondary>Alan Turing: Life and Legacy of a Great Thinker</Title_Secondary><Authors_Secondary>Teuscher,Christof</Authors_Secondary><Pub_Place>New York</Pub_Place><Publisher>Springer-Verlag</Publisher><Web_URL_Link1><u>file://C:\Users\rking\Papers\PWegner\Eberbach03Turing&apos;sIdeasAndModelsOfComputation.pdf</u></Web_URL_Link1><ZZ_WorkformID>3</ZZ_WorkformID></MDL></Cite></Refman>[17], who discuss new models of computation, inspired by Turing's ideas, that are more appropriate for today’s interactive, networked, and embedded computing systems.  These models represent super-Turing computation  that can be characterized by several principles—interaction with the world, infinity of resources, or evolution of system.  The latter two cases below result from numerous discussions between the author, his colleagues in the Modeling and Simulation program at Old Dominion University, and his Advisor.  Case 1: Interaction, involving either human input or decisions by agents, during the process of executing a model or simulation, rather than before or after it.  The various Semi-Automated Force (SAF) simulations (e.g.  JSAF, ONESAF) are examples where a human operator can interact directly with the running simulation to alter command and control behaviors, sensors, logistics, weapons effects, and entities’ reactions to various combat stimuli.  The Joint Forces Command (JFCOM) Experimentation Directorate, J9, makes extensive use of JSAF for Human-in-the-Loop, virtual experiments.  When human interaction is involved, it is for all practical purposes impossible to enumerate all states and state transitions possible by the human mind.  It is equally impossible to enumerate all possible actions of a person in a system, or the number of variables that affect the person’s action.  Finally, it is impossible to state all of the assumptions related to these infinite numbers of states, transitions, actions and variables.Case 2: Evolution of system, including genetic algorithms, neural networks, run-time selection of services and components, and learning systems.  In this case, the architecture of the system can be altered during the process of executing a model or simulation.  The many possible connections between system components are subject to change—meaning that the system’s behavior is not fixed.  Thus, the system can generate new states and paths.  Consequently, it is possible that the system enters unknown states (and additionally via unknown paths), and therefore it is impossible to enumerate all of the assumptions necessary to achieve an engineering model.Case 3: Infinity of states, meaning also infinite memory (the result of massively parallel scalable computers or the Internet), infinite precision, or infinite time to solve (i.e.  a problem that is not expected to halt).  Each of these results in an extension by infinity to functional computation and means that it is impossible to enumerate all possible states; therefore, it is impossible to list all of the assumptions needed.Case 4: Transformation, wherein the context of information is altered because of translation, filtering, aggregation or modification for transmission.  Many transformations produce a loss of contextual information that ultimately leads to a loss of frame assumptions.  Thus, even if the original contributing systems are completely defined with no implicit assumptions, the transformation process can destroy functional composability.  Case 5: Conceptual model misalignment,   embracing the use of legacy applications as well as the aforementioned problems resulting from incomplete specification.  It is important to note that meaning ultimately depends on context.  When combining sophisticated systems, there are infinitely many permutations and subtleties of contextual meaning that potentially confound composability.  This case arises when, despite best efforts, conflicts described in Section 2 occur, whether detected or not.  To summarize, each of these cases limit functional composition because they require invoking the inertia rule or making implicit assumptions.  They result in systems with states that have the potential to be unknowable, uncountable, unpredictable, or unaccountable.4.    Conceptual LinkageThis section contributes conceptual linkage as a potential solution to the challenges just summarized: namely, when linking models or simulations, a boundary is sometimes reached that requires invoking the inertia rule.   REF _Ref171838170 \h Figure 2 depicts the limit of functional composability graphically.  Linking models across this boundary requires a new kind of connection because a functional one just will not work.  The term conceptual linkage is suggested because the link eventually involves alignment of concepts and because conceptual interoperability requires it. SHAPE  \* MERGEFORMAT Figure  SEQ Figure \* ARABIC 2.  Conceptual linkage required between systemsAssume that one or more of the five enumerated cases validate the need for conceptual linkage; this raises questions regarding the nature of that linkage.  What constitutes conceptual linkage—i.e.  what are its essential parts?  As before, the author’s initial list of necessary conditions is the outcome of his research and is presented to stimulate discussion.  No claim that the list of conditions is sufficient to satisfy conceptual linkage is made.  It currently consists of four necessary requirements:Unambiguous meaning of terms and conceptsAlignment of modeler’s intent Use of a supportive frameworkFunctional composability of parts4.1  Unambiguous MeaningFirst, objects, characteristics, processes and concepts require unambiguous meaning.  That is, a basis in ontology is critical.  Ontology captures knowledge about a domain of interest.  The term ontology spectrum describes a range of semantic models of increasing expressiveness and complexity: taxonomy, thesaurus, conceptual model, and logical theory.  This series of increasingly precise (or rather increasingly semantically expressive) definitions for data elements in knowledge representations is especially important for machine usage  ADDIN REFMGR.CITE <Refman><Cite><Author>Obrst</Author><Year>2007</Year><RecNum>65</RecNum><IDText>What is an ontology? - A Briefing on the Range of Semantic Models</IDText><MDL Ref_Type="Electronic Citation"><Ref_Type>Electronic Citation</Ref_Type><Ref_ID>65</Ref_ID><Title_Primary>What is an ontology? - A Briefing on the Range of Semantic Models</Title_Primary><Authors_Primary>Obrst,Leo J.</Authors_Primary><Date_Primary>2007</Date_Primary><Reprint>Not in File</Reprint><Periodical>http://ontolog.cim3.net/file/resource/presentation/LeoObrst_20060112/OntologySpectrumSemanticModels--LeoObrst_20060112.ppt</Periodical><Date_Secondary>2007/7/16</Date_Secondary><Web_URL><u>http://ontolog.cim3.net/file/resource/presentation/LeoObrst_20060112/OntologySpectrumSemanticModels--LeoObrst_20060112.ppt</u></Web_URL><ZZ_JournalStdAbbrev><f name="System">http://ontolog.cim3.net/file/resource/presentation/LeoObrst_20060112/OntologySpectrumSemanticModels--LeoObrst_20060112.ppt</f></ZZ_JournalStdAbbrev><ZZ_WorkformID>34</ZZ_WorkformID></MDL></Cite><Cite><Year>2007</Year><RecNum>66</RecNum><IDText>WIKIPEDIA: The Semantic Spectrum</IDText><MDL Ref_Type="Electronic Citation"><Ref_Type>Electronic Citation</Ref_Type><Ref_ID>66</Ref_ID><Title_Primary>WIKIPEDIA: The Semantic Spectrum</Title_Primary><Date_Primary>2007</Date_Primary><Reprint>Not in File</Reprint><Periodical>http://en.wikipedia.org/wiki/Semantic_spectrum</Periodical><Date_Secondary>2007/7/15</Date_Secondary><ZZ_JournalStdAbbrev><f name="System">http://en.wikipedia.org/wiki/Semantic_spectrum</f></ZZ_JournalStdAbbrev><ZZ_WorkformID>34</ZZ_WorkformID></MDL></Cite></Refman>[18;19].  Beyond the terms used to describe and represent an area of knowledge (subject matter), ontology is the model (set of concepts) for the meaning of those terms.  Ontology thus defines the vocabulary and the meaning of that vocabulary within a domain.  By encoding domain knowledge (i.e.  its properties, values and concepts), ontology makes it possible to share and to reason about it.  The use of a Common Reference Model (CRM) and controlled vocabulary, such as described by Tolk, et al  ADDIN REFMGR.CITE <Refman><Cite><Author>Tolk</Author><Year>2007</Year><RecNum>77</RecNum><IDText>Model-Based Data Engineering: Preparing a Paradigm Shift towards Self-Organizing Information Exchange</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>77</Ref_ID><Title_Primary>Model-Based Data Engineering: Preparing a Paradigm Shift towards Self-Organizing Information Exchange</Title_Primary><Authors_Primary>Tolk,Andreas</Authors_Primary><Authors_Primary>Diallo,Saikou Y.</Authors_Primary><Authors_Primary>Turnitsa,Charles</Authors_Primary><Date_Primary>2007</Date_Primary><Keywords>interoperability</Keywords><Reprint>Not in File</Reprint><Start_Page>1112</Start_Page><End_Page>1119</End_Page><Periodical>Proceedings of the Summer Computer Simulation Conference</Periodical><Title_Secondary>Summer Computer Simulation Conference 2007 (SCSC 2007)</Title_Secondary><Title_Series>Summer Computer Simulation Conference</Title_Series><ZZ_JournalFull><f name="System">Proceedings of the Summer Computer Simulation Conference</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[1] is an important first step.  However, by itself it is not sufficient for conceptual linkage.  Ultimately, we seek to establish pragmatic competence in reasoning about model components.  A listener has pragmatic competence if he is equipped to understand the meaning of the speaker.  A model theoretic description for a CRM is presented by Tolk, et al in  ADDIN REFMGR.CITE <Refman><Cite><Author>Tolk</Author><Year>2007</Year><RecNum>78</RecNum><IDText>Data, Models, Federations, Common Reference Models, and Model Theory, 07E-SIW-052</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>78</Ref_ID><Title_Primary>Data, Models, Federations, Common Reference Models, and Model Theory, 07E-SIW-052</Title_Primary><Authors_Primary>Tolk,Andreas</Authors_Primary><Authors_Primary>Diallo,Saikou Y.</Authors_Primary><Authors_Primary>Turnitsa,Charles</Authors_Primary><Date_Primary>2007</Date_Primary><Keywords>interoperability</Keywords><Reprint>Not in File</Reprint><Periodical>Proceedings of the European Simulation Interoperability Workshop</Periodical><Title_Secondary>European Simulation Interoperability Workshop</Title_Secondary><Title_Series>European Simulation Interoperability Workshop</Title_Series><ZZ_JournalFull><f name="System">Proceedings of the European Simulation Interoperability Workshop</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[20] along with discussions relating to the use of CRM in aligning viewpoints between various incarnations of the Battle Management Language (BML, C-BML, JBML)  and the Military Scenario Definition Language (MSDL).Unambiguous meaning does not mean that some sort of global “reality” needs to be established.  What is needed is a means to describe unambiguously what we mean when we model an object or process.  Furthermore, solving the requirement for unambiguous meaning requires a capability to mediate between multiple points of view.  It is important to note that meaning comes as much from the viewpoint of the modeler as from the object itself.  An object or a process (or more importantly the model of an object or process) can exist in several domains and its characteristics can depend as much upon the domain context as from the nature of the object itself.  To illustrate, consider an example of the ammunition used in a tank’s main gun.  Specifically, consider how one might model its ‘location’.  Within a supply system context, the round exists as part of a package of rounds; its location is inside a bunker at the ammunition depot within the supply system that the inventory subsystem says that it is in.  In the real world, it takes time to transfer the package from one warehouse to another, but within a supply system model, the package “jumps” from the source warehouse to its destination upon completion of the transfer paperwork.  Contrast the supply system view with a ‘shooting’ view.  A round comes into existence when it is separated from its packaging and stored in the ready service locker inside the tank.  Within this context the round that can be in one of two locations: the service locker or the chamber of the tank gun.  When the round is fired, its position is the one that most think of when they think of ‘location’.  What is meant by its location is closer to that of an object in the physical world.  At first, one would think that the model of location in this context is simpler than in the supply context as it only involves equations of motion.  Actually, it can be a great deal more complex as there are dozens of coordinate systems in which location could be expressed, not to mention the scores of algorithms available for calculating the round’s position in flight.  Thus, what the ‘location’ of a round means depends on what the user assumes it means.  Unambiguous meaning provides the basis for understanding and reasoning about the intent behind modeling decisions presented in the next subsection.  4.2  Alignment of Modeler’s IntentThe second requirement of conceptual linkage is alignment of modeler’s intent—the intention of the simulation developer, stated explicitly or implicitly, that objects and processes be represented in a certain way.  Alignment of modeler’s intent is not conceptual modeling, although alignment builds upon it.  What conceptual modeling means depends on how (and by whom) the term is used, and that is part of the problem.  Conceptual modeling is most often meant to describe the objects, patterns of behavior, characteristics and relationships between objects.  Current practice is embodied in the procedures of the FEDEP  ADDIN REFMGR.CITE <Refman><Cite><Year>2003</Year><RecNum>75</RecNum><IDText>IEEE Recommended Practice for High Level Architecture (HLA) Federation Development and Execution Process (FEDEP) (IEEE Std 1516.3)</IDText><MDL Ref_Type="Generic"><Ref_Type>Generic</Ref_Type><Ref_ID>75</Ref_ID><Title_Primary>IEEE Recommended Practice for High Level Architecture (HLA) Federation Development and Execution Process (FEDEP) (IEEE Std 1516.3)</Title_Primary><Date_Primary>2003</Date_Primary><Reprint>Not in File</Reprint><Publisher><f name="Helvetica+2">Institute of Electrical and Electronics Engineers</f></Publisher><ZZ_WorkformID>33</ZZ_WorkformID></MDL></Cite></Refman>[21], Functional Description of the Mission Space (FDMS), Conceptual Model of the Mission Space (CMMS), and other examples of conceptual modeling methods.  Often, particularly in developing a federation, a conceptual modeling recipe advocates that the model contain only shared parts to ‘promote good design by data hiding’.  This is conceptual modeling’s major shortfall in contributing towards aligning modeler’s intent.  To illustrate why, consider methods used by engineers to design and document systems.  Engineering texts may differ in the specifics of method, but generally, they all include three elements in the design process: requirements, constraints and assumptions.  Requirements specify what the system should do.Constraints specify what the system must or must not do.Assumptions are statements, taken for granted, about the framework of the system solution.  In the author’s view, conceptual modeling in the past has largely concerned itself with requirements, sometimes including constraints, relying heavily on implicit assumptions, and rarely, if ever, addressing assumptions explicitly.  The future efforts of the SISO Simulation Conceptual Modeling Study Group  ADDIN REFMGR.CITE <Refman><Cite><Year>2006</Year><RecNum>72</RecNum><IDText>Simulation Conceptual Modeling (SCM) Study Group FINAL Report</IDText><MDL Ref_Type="Report"><Ref_Type>Report</Ref_Type><Ref_ID>72</Ref_ID><Title_Primary>Simulation Conceptual Modeling (SCM) Study Group FINAL Report</Title_Primary><Date_Primary>2006/6/30</Date_Primary><Reprint>Not in File</Reprint><Volume>SISO-REF-017-2006</Volume><ZZ_WorkformID>24</ZZ_WorkformID></MDL></Cite></Refman>[22] should have great impact on the M&S community, developing and standardizing needed conceptual modeling processes.  But for now, conceptual modeling comes closest to capturing modeler’s intent as it is used in VV&A, such as described in  ADDIN REFMGR.CITE <Refman><Cite><Author>Defense Modeling and Simulation Office</Author><Year>2006</Year><RecNum>70</RecNum><IDText>Conceptual Model Development and Validation</IDText><MDL Ref_Type="Electronic Citation"><Ref_Type>Electronic Citation</Ref_Type><Ref_ID>70</Ref_ID><Title_Primary>Conceptual Model Development and Validation</Title_Primary><Authors_Primary>Defense Modeling and Simulation Office</Authors_Primary><Date_Primary>2006</Date_Primary><Reprint>Not in File</Reprint><Periodical>http://vva.dmso.mil</Periodical><Date_Secondary>2007/7/29</Date_Secondary><Address>http://vva.dmso.mil</Address><Web_URL><u>http://vva.dmso.mil</u></Web_URL><ZZ_JournalStdAbbrev><f name="System">http://vva.dmso.mil</f></ZZ_JournalStdAbbrev><ZZ_WorkformID>34</ZZ_WorkformID></MDL></Cite><Cite><Author>Navy Modeling and Simulation Management Office</Author><Year>2004</Year><RecNum>69</RecNum><IDText>Modeling and Simulation Verification, Validation, and Accreditation Implementation Handbook</IDText><MDL Ref_Type="Book, Whole"><Ref_Type>Book, Whole</Ref_Type><Ref_ID>69</Ref_ID><Title_Primary>Modeling and Simulation Verification, Validation, and Accreditation Implementation Handbook</Title_Primary><Authors_Primary>Navy Modeling and Simulation Management Office</Authors_Primary><Date_Primary>2004</Date_Primary><Reprint>Not in File</Reprint><Issue>1  VV&amp;A Framework</Issue><ZZ_WorkformID>2</ZZ_WorkformID></MDL></Cite></Refman>[23;24], and as described by Borah  ADDIN REFMGR.CITE <Refman><Cite><Author>Borah</Author><Year>2003</Year><RecNum>71</RecNum><IDText>Conceptual Modeling-How do we do it?-A practical Example, 03S-SIW-114</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>71</Ref_ID><Title_Primary>Conceptual Modeling-How do we do it?-A practical Example, 03S-SIW-114</Title_Primary><Authors_Primary>Borah,Jack</Authors_Primary><Date_Primary>2003</Date_Primary><Keywords>interoperability</Keywords><Reprint>Not in File</Reprint><Periodical>Proceedings of the Spring Simulation Interoperability Workshop</Periodical><Title_Secondary>2003 Spring Simulation Interoperability Workshop</Title_Secondary><Title_Series>Spring Simulation Interoperability Workshop</Title_Series><ZZ_JournalFull><f name="System">Proceedings of the Spring Simulation Interoperability Workshop</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[25] and Pace  ADDIN REFMGR.CITE <Refman><Cite><Author>Pace</Author><Year>2000</Year><RecNum>73</RecNum><IDText>Simulation Conceptual Model Development Issues and Implications for Reuse of Simulation Components, 00F-SIW-019</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>73</Ref_ID><Title_Primary>Simulation Conceptual Model Development Issues and Implications for Reuse of Simulation Components, 00F-SIW-019</Title_Primary><Authors_Primary>Pace,Dale K.</Authors_Primary><Date_Primary>2000</Date_Primary><Reprint>Not in File</Reprint><Periodical>Proceedings of the Fall Simulation Interoperability Workshop</Periodical><Title_Secondary>Fall Simulation Interoperability Workshop</Title_Secondary><Title_Series>Fall Simulation Interoperability Workshop</Title_Series><ZZ_JournalFull><f name="System">Proceedings of the Fall Simulation Interoperability Workshop</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite><Cite><Author>Pace</Author><Year>2001</Year><RecNum>74</RecNum><IDText>Simulation Conceptual Model Role in Determining Compatability of Candidate Simulations for a HLA Federation, 01S-SIW-024</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>74</Ref_ID><Title_Primary>Simulation Conceptual Model Role in Determining Compatability of Candidate Simulations for a HLA Federation, 01S-SIW-024</Title_Primary><Authors_Primary>Pace,Dale K.</Authors_Primary><Date_Primary>2001</Date_Primary><Reprint>Not in File</Reprint><Periodical>Proceedings of the Spring Simulation Interoperability Workshop</Periodical><Title_Secondary>Spring Simulation Interoperability Workshop</Title_Secondary><Title_Series>Spring Simulation Interoperability Workshop</Title_Series><ZZ_JournalFull><f name="System">Proceedings of the Spring Simulation Interoperability Workshop</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[26;27].  This is because of the emphasis on capturing the intended purpose of the model and, in the case of VV&A, because V&V focuses on building a sufficient body of information to support an accreditation decision.  One might ask how conceptual modeling is different from alignment of modeler’s intent.  The answer is that the latter goes beyond only aligning the models.  When intent is aligned there is also:a belief on the part of the builder and the user the models are the correct ones to use,a belief on the part of the receiver of data that its sender is doing what the two have agreed upon,a method for detecting when constraints may be violated,a process to detect when assumptions may fail to hold, anda means to adjudicate constraint and assumption errors between models when detected.  The difference lies in the emphasis placed on frame assumptions.  Assumptions have the potential to limit the components or methods of the system—acting much like constraints.  The difference between an assumption and a constraint is that before it becomes a constraint, an assumption needs to be challenged.  Something—or someone—needs to examine the assumptions of the models and decide if there is a potential mismatch.  Our astute reader may observe that to be effective, the examination should be made of specified and implemented models as well.  This is correct, and indicates a need for a supportive framework, as described in the next subsection.4.3  Use of a Supportive FrameworkThe third requirement of conceptual linkage is the employment of an appropriate supportive framework.  The framework will borrow heavily from current developments in service oriented architectures (SOA), where business rules are invoked using web services.  Selecting among business rules is very much like selecting among model components—but there is an important difference.  Current web service practice is done with only textual metadata, not based in ontology.The author’s list of supportive features may appear like a smorgasbord; but some of them are genuinely required:  To begin, some sort of middleware, mediator agent, or other type of ‘glue’ to assemble components within the experimental frame is required.  The glue should be well integrated with tools for managing ontologies (i.e.  managing terms, concepts, relationships and process descriptions) in URI-compatible form for web distribution and access such as RDFS and OWL-S.The system should be capable of detecting potential conflicts in model parameters, assumptions and constraints, generating challenges as they occur..The system should be capable of adjudicating challenges related to ontology (e.g.  terms, concepts, processes) and alignment of modeler’s intent (conceptual models, modeling methods, frame assumptions and constraints).  The adjudication of challenges may involve human or agent-based decision-making.  Also needed is a method for recording the adjudication in a URI-compatible form.  To be efficient, a method is needed to decide if a challenge has been previously adjudicated, and to recall its results.  A means to detect similarity between a new challenge and a previous one and to use the prior work to assist in adjudication is also needed.  Agility is needed not only to facilitate run-time alignment decisions but also to accommodate interaction and evolution of system (required for LCIM Level 5: Dynamic Interoperability).Part of the author’s ongoing research is building and testing a supportive framework based on these requirements.  4.4  Functional Composability of PartsThe final requirement of conceptual linkage is that functional consistency is required.  In other words, the components to be linked must internally be functional compositions as previously defined.  Woodcock  ADDIN REFMGR.CITE <Refman><Cite><Author>Woodcock</Author><Year>2006</Year><RecNum>67</RecNum><IDText>First Steps in the Verified Software Grand Challenge</IDText><MDL Ref_Type="Magazine Article"><Ref_Type>Magazine Article</Ref_Type><Ref_ID>67</Ref_ID><Title_Primary>First Steps in the Verified Software Grand Challenge</Title_Primary><Authors_Primary>Woodcock,Jim</Authors_Primary><Date_Primary>2006</Date_Primary><Reprint>Not in File</Reprint><Start_Page>57</Start_Page><End_Page>64</End_Page><Periodical>COMPUTER</Periodical><Volume>39</Volume><Issue>10</Issue><ZZ_JournalFull><f name="System">COMPUTER</f></ZZ_JournalFull><ZZ_WorkformID>16</ZZ_WorkformID></MDL></Cite></Refman>[28] describes an important effort that is working towards making functionally composable code.  The Verified Software Grand Challenge project is a 15-year research program to demonstrate the feasibility of using formal verification technology in industrial-scale software development.  The program has three objectives:to establish a unified theory of program construction and analysis;to build a comprehensive and integrated suite of tools that support verification activities, including specification, validation, test-case generation, program refinement, program analysis, program verification, and runtime checking; and to collect a repository of formal specifications and verified codes.If the Verified Software Grand Challenge is successful, it will demonstrate something as close to a guarantee of composability as is possible.  At the very least, one can assume that verified and formally specified code would not suffer from incomplete specification.  Note that the Challenge is primarily concerned with developing software and the judgment of Davis and Anderson in  ADDIN REFMGR.CITE <Refman><Cite><Author>Davis</Author><Year>2004</Year><RecNum>21</RecNum><IDText>Improving the Composability of Department of Defense Models and Simulations</IDText><MDL Ref_Type="Report"><Ref_Type>Report</Ref_Type><Ref_ID>21</Ref_ID><Title_Primary>Improving the Composability of Department of Defense Models and Simulations</Title_Primary><Authors_Primary>Davis,Paul K.</Authors_Primary><Authors_Primary>Anderson,Robert A.</Authors_Primary><Date_Primary>2004</Date_Primary><Keywords>composability</Keywords><Reprint>Not in File</Reprint><Publisher>RAND National Defense Research Institute</Publisher><ISSN_ISBN><f name="AGaramond-Regular">0-8330-3525-8 (pbk. : alk. paper)</f></ISSN_ISBN><Web_URL_Link1><u>file://C:\Users\rking\Papers\Modeling&amp;Simulation\Davis03ImprovingTheComposabilityofDoDM&amp;S.pdf</u></Web_URL_Link1><ZZ_WorkformID>24</ZZ_WorkformID></MDL></Cite></Refman>[2] that modeling and simulation needs a basis in the science of M&S remains.  The Challenge may contribute to writing functionally composable components but it will still be necessary to align modeler’s intent when combining them.Finally, this requirement may not absolutely be necessary.  It may be possible that an effective system for dealing with constraints and assumptions eliminates the requirement that every component be internally functionally composable.  5.    DiscussionThe thorny part (from the author’s point of view) is handling frame assumptions and model constraints.  To begin, it is not yet clear how to represent them.  Assumptions are metadata for a model, but more is needed than simple text.  A general model of assumptions and constraints on a model needs research.  This could be demonstrated using a controlled vocabulary of terms and operations, with rules executed by software agents.  A small ontology for reasoning about assumptions and constraints is envisioned that operates on terms and concepts from the larger and more specific domain ontology of one or more models.To be practical, we need to demonstrate that the assumption/constraint model helps to detect potential mismatches between domain viewpoints by identifying and then mediating those differences.  A taxonomy of assumptions needs to be compiled.  Borrowing an idea from Speigel  ADDIN REFMGR.CITE <Refman><Cite><Author>Speigel</Author><Year>2005</Year><RecNum>61</RecNum><IDText>A Case Study of Model Context for Simulation Composability and Reusability</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>61</Ref_ID><Title_Primary>A Case Study of Model Context for Simulation Composability and Reusability</Title_Primary><Authors_Primary>Speigel,Michael</Authors_Primary><Authors_Primary>Reynolds,Paul F.</Authors_Primary><Authors_Primary>Brogan,David C.</Authors_Primary><Date_Primary>2005</Date_Primary><Keywords>composability</Keywords><Reprint>Not in File</Reprint><Periodical>Proceedings of the Winter Simulation Conference</Periodical><Title_Secondary>2005 Winter Simulation Conference</Title_Secondary><Title_Series>Winter Simulation Conference</Title_Series><Web_URL_Link1><u>file://C:\Users\rking\Papers\Modeling&amp;Simulation\Winter Simulation Conference\2005\spiegel05ACaseStudyOfModelContextForSimulationComposabilityAndReusability.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">Proceedings of the Winter Simulation Conference</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[15], experts can be surveyed to build lists of assumptions for selected sets of models and contexts.  Once these are expressed in an ontology, rules for consistency checking can be developed and tested.How compatibility between modeling algorithms is measured needs more study.  Standardization of algorithms has been one means for promoting functional composability for some time.  For example, the DIS standard  ADDIN REFMGR.CITE <Refman><Cite><Year>1995</Year><RecNum>63</RecNum><IDText>IEEE Standard for Distributed Interactive Simulation - Application Protocols (IEEE Std 1278.1-1995)</IDText><MDL Ref_Type="Generic"><Ref_Type>Generic</Ref_Type><Ref_ID>63</Ref_ID><Title_Primary>IEEE Standard for Distributed Interactive Simulation - Application Protocols (IEEE Std 1278.1-1995)</Title_Primary><Date_Primary>1995</Date_Primary><Reprint>Not in File</Reprint><Publisher><f name="Helvetica+2">Institute of Electrical and Electronics Engineers</f></Publisher><ZZ_WorkformID>33</ZZ_WorkformID></MDL></Cite></Refman>[29] enumerates nine algorithms for dead reckoning (DR), defining parameters and providing algorithms for state updates.  However, there are occasions where sometimes different DR methods can be intermixed and sometimes not (see  ADDIN REFMGR.CITE <Refman><Cite><Author>Valle</Author><Year>2006</Year><RecNum>32</RecNum><IDText>Dead Reckoning in a Mixed HLA/DIS Environment</IDText><MDL Ref_Type="Conference Proceeding"><Ref_Type>Conference Proceeding</Ref_Type><Ref_ID>32</Ref_ID><Title_Primary>Dead Reckoning in a Mixed HLA/DIS Environment</Title_Primary><Authors_Primary>Valle,Tony</Authors_Primary><Authors_Primary>Leppard,Banjamin</Authors_Primary><Authors_Primary>Santora,Christopher</Authors_Primary><Date_Primary>2006</Date_Primary><Reprint>Not in File</Reprint><Periodical>Proceedings of the Interservice/Industry Training, Simulation and Education Conference</Periodical><Title_Secondary><f name="Helvetica">Interservice/Industry Training, Simulation and Education Conference</f></Title_Secondary><Title_Series>Interservice/Industry Training, Simulation and Education Conference</Title_Series><ZZ_JournalFull><f name="System">Proceedings of the Interservice/Industry Training, Simulation and Education Conference</f></ZZ_JournalFull><ZZ_WorkformID>12</ZZ_WorkformID></MDL></Cite></Refman>[30] for an example).  Looking far into the future, we certainly could make libraries of constraints—even summarize them by building ontology that relates constraints (frame assumptions) to specific modeling concepts.  It remains to be seen what good comes from having such a library because it is not yet clear whether it is possible to make a list of critical constraints for a problem.Finally, there are implications for engineering practices.  If it can be said that current methods do not lend themselves to conceptual linkage of models, then what new procedures, tools or techniques can be devised to fill the gap?  Much work remains to define them.  6.   SummaryThis paper has argued that five cases exist (interaction, evolution of system, infinity of states, transformation, and conceptual model misalignment) that act as barriers to functional composition.  It proposes to use conceptual linkage to join models across these boundaries.  The author suggests that linking models conceptually requires:Aligning ontological items: terms, concepts, objects, processes, relationships, and characteristics;aligning modeler’s intent: methods and parameters (what is included and what is not), frame assumptions, and constraints;using a framework that supports conceptual linking; andusing composable parts (we cannot escape this—a component should internally be a functional composition).The purpose of this paper is to stimulate thought and discussion on the nature of conceptual linkages, and to generate feedback.  Comments, constructive criticisms and suggestions are welcome.References ADDIN REFMGR.REFLIST [1] 	A.  Tolk, S.  Y.  Diallo, and C.  Turnitsa, "Model-Based Data Engineering: Preparing a Paradigm Shift towards Self-Organizing Information Exchange," in Proceedings of the Summer Computer Simulation Conference, 2007, pp.  1112-1119.[2] 	P.  K.  Davis and R.  A.  Anderson, "Improving the Composability of Department of Defense Models and Simulations," RAND National Defense Research Institute,2004.[3] 	A.  Tolk and J.  Muguira, "The Levels of Conceptual Interoperability Model, 03F-SIW-007," in Proceedings of the Fall Simulation Interoperability Workshop, 2003.[4] 	C.  Turnitsa, "Extending the Levels of Conceptual Interoperability Model," in Proceedings of the Summer Computer Simulation Conference, 2005.[5] 	A.  Tolk, S.  Y.  Diallo, and C.  Turnitsa, "Ontology Driven Interoperability – M&S Applications,"Whitepaper in support of the I/ITSEC Tutorial,VMASC Report 2548, Old Dominion University, 2006.[6] 	R.  D.  King, S.  Y.  Diallo, and A.  Tolk, "How to Play Fairly: Agents and Web Services Can Help, 07S-SIW-097," in Proceedings of the Spring Simulation Interoperability Workshop, 2007.[7] 	S.  Spaccapietra, C.  Parent, and Y.  Dupont, "Model Independent Assertions for Integration of Heterogeneous Schemas," VLDB Journal: Very Large Databases, vol.  1, no.  1, pp.  81-126, 1992.[8] 	J.  A.  Muguira and A.  Tolk, "Applying a Methodology to Identify Structural Variances in Interoperations," The Journal of Defense Modeling and Simulation, vol.  3, no.  2, pp.  77-93, 2006.[9] 	E.  H.  Page and J.  M.  Opper, "Observations On The Complexity Of Composable Simulation," in Proceedings of the Winter Simulation Conference, 1999.[10] 	M.  D.  Petty and E.  W.  Weisel, "A Composability Lexicon, 03S-SIW-023," in Proceedings of the Spring Simulation Interoperability Workshop, 2003.[11] 	M.  D.  Petty, E.  W.  Weisel, and R.  R.  Mielke, "Computational Complexity of Selecting Components for Composition, 03F-SIW-072," in Proceedings of the Fall Simulation Interoperability Workshop, 2003.[12] 	E.  W.  Weisel, M.  D.  Petty, and R.  R.  Mielke, "Validity of Models and Classes of Models in Semantic Composability, 03F-SIW-073," in Proceedings of the Fall Simulation Interoperability Workshop, 2003.[13] 	N.  Y.  Foo, "Why Engineering Models Do Not Have A Frame Problem," in Discrete Event Modeling And Simulation Technologies.  H.  S.  Sarjouhian and F.  E.  Cellier, Eds.  New York: Springer-Verlag, 2001, pp.  15-26.[14] 	Shanahan, M., "Stanford Encyclopedia of Philosophy: The Frame Problem,"  HYPERLINK "http://plato.stanford.edu/entries/frame-problem/," http://plato.stanford.edu/entries/frame-problem/, last accessed 7-24-2007.[15] 	M.  Speigel, P.  F.  Reynolds, and D.  C.  Brogan, "A Case Study of Model Context for Simulation Composability and Reusability," in Proceedings of the Winter Simulation Conference, 2005.[16] 	D.  Garlan, R.  Allen, and J.  Ockerbloom, "Architectural Mismatch or Why it's hard to build systems out of existing parts," in Proceedings 17th International Conference on Software Enginneering, ACM SIGSOFT, 1995, pp.  179-185.[17] 	E.  Eberbach, D.  Q.  Goldin, and P.  Wegner, "Turing's Ideas and Models of Computation," in Alan Turing: Life and Legacy of a Great Thinker.  C.  Teuscher, Ed.  New York: Springer-Verlag, 2004, pp.  159-194.[18] 	Obrst, L.  J., "What is an ontology? - A Briefing on the Range of Semantic Models,"  HYPERLINK "http://ontolog.cim3.net/file/resource/presentation/LeoObrst_20060112/OntologySpectrumSemanticModels--LeoObrst_20060112.ppt," http://ontolog.cim3.net/file/resource/presentation/LeoObrst_20060112/OntologySpectrumSemanticModels--LeoObrst_20060112.ppt, last accessed 7-16-2007.[19] 	 "WIKIPEDIA: The Semantic Spectrum,"  HYPERLINK "http://en.wikipedia.org/wiki/Semantic_spectrum," http://en.wikipedia.org/wiki/Semantic_spectrum, last accessed 7-15-2007.[20] 	A.  Tolk, S.  Y.  Diallo, and C.  Turnitsa, "Data, Models, Federations, Common Reference Models, and Model Theory, 07E-SIW-052," in Proceedings of the European Simulation Interoperability Workshop, 2007.[21] 	 "IEEE Recommended Practice for High Level Architecture (HLA) Federation Development and Execution Process (FEDEP) (IEEE Std 1516.3)," Institute of Electrical and Electronics Engineers, 2003.[22] 	 "Simulation Conceptual Modeling (SCM) Study Group FINAL Report,"SISO-REF-017-2006, June2006.[23] 	Defense Modeling and Simulation Office, "Conceptual Model Development and Validation,"  HYPERLINK "http://vva.dmso.mil," http://vva.dmso.mil, last accessed 7-29-2007.[24] 	Navy Modeling and Simulation Management Office, Modeling and Simulation Verification, Validation, and Accreditation Implementation Handbook 2004.[25] 	J.  Borah, "Conceptual Modeling-How do we do it?-A practical Example, 03S-SIW-114," in Proceedings of the Spring Simulation Interoperability Workshop, 2003.[26] 	D.  K.  Pace, "Simulation Conceptual Model Development Issues and Implications for Reuse of Simulation Components, 00F-SIW-019," in Proceedings of the Fall Simulation Interoperability Workshop, 2000.[27] 	D.  K.  Pace, "Simulation Conceptual Model Role in Determining Compatability of Candidate Simulations for a HLA Federation, 01S-SIW-024," in Proceedings of the Spring Simulation Interoperability Workshop, 2001.[28] 	J.  Woodcock, "First Steps in the Verified Software Grand Challenge," COMPUTER, vol.  39, no.  10 pp.  57-64.[29] 	 "IEEE Standard for Distributed Interactive Simulation - Application Protocols (IEEE Std 1278.1-1995)," Institute of Electrical and Electronics Engineers, 1995.[30] 	T.  Valle, B.  Leppard, and C.  Santora, "Dead Reckoning in a Mixed HLA/DIS Environment," in Proceedings of the Interservice/Industry Training, Simulation and Education Conference, 2006.Author BiographyROBERT D.  KING is a PhD candidate in Modeling and Simulation the Old Dominion University (ODU).  He received his B.S. in Electrical Engineering (cum laude) from Marquette University and performed graduate studies at the Naval Postgraduate School.  He has over 30 years experience in Modeling and Simulation, Military Operations Research, Anti Submarine Warfare, Computer Graphics and Virtual Environments.  His PhD research focuses on agent-mediation of composable services for model interoperability. computation going beyond Turing Machines and algorithms although, the number of actions that are valid may be limited by the system.It may be argued whether this capability should be extended to decision making by software agents or not.  For the purposes of this article, we will assume that it can. i.e., the next state cannot be predicted i.e., all paths leading to a state cannot be predicted semiotic competence applies to symbols, vice language, and is a more proper term to use when describing machine understanding.  However, the pragmatic competence between model developer and user is the concern in this section. Although the term ‘modeler’s intent’ does not appear in  ADDIN REFMGR.CITE <Refman><Cite><Author>Muguira</Author><Year>2006</Year><RecNum>30</RecNum><IDText>Applying a Methodology to Identify Structural Variances in Interoperations</IDText><MDL Ref_Type="Journal"><Ref_Type>Journal</Ref_Type><Ref_ID>30</Ref_ID><Title_Primary>Applying a Methodology to Identify Structural Variances in Interoperations</Title_Primary><Authors_Primary>Muguira,James A.</Authors_Primary><Authors_Primary>Tolk,Andreas</Authors_Primary><Date_Primary>2006</Date_Primary><Keywords>agent-based simulation</Keywords><Keywords>continuous and discrete simulation</Keywords><Keywords>discrete-event simulation</Keywords><Keywords>distributed simulation</Keywords><Keywords>interoperability</Keywords><Reprint>Not in File</Reprint><Start_Page>77</Start_Page><End_Page>93</End_Page><Periodical>The Journal of Defense Modeling and Simulation</Periodical><Volume>3</Volume><Issue>2</Issue><Pub_Place>San Diego, CA</Pub_Place><Publisher>The Society for Modeling and Simulation International</Publisher><Web_URL_Link1><u>file://C:\Users\rking\Papers\Modeling&amp;Simulation\JDMS\VOL3NUM2\JDMSvol3no2Muguira77-93.pdf</u></Web_URL_Link1><ZZ_JournalFull><f name="System">The Journal of Defense Modeling and Simulation</f></ZZ_JournalFull><ZZ_WorkformID>1</ZZ_WorkformID></MDL></Cite></Refman>[8], the notion is adopted from that article and from extensive conversations with Muguira.Limit of functional composabilityLimit of functional composability