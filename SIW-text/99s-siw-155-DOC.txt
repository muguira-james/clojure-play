Embedded JavelinMichael D. MyjakSean T. SharpThe Virtual Workshop & HLA ProductsP. O. Box 98Titusville, FL  32781< HYPERLINK mailto:mmyjak@imtinc.com  HYPERLINK mailto:Ssharp@imtinc.com mmyjak@virtualworkshop.com>< HYPERLINK mailto:Ssharp@imtinc.com ssharp@virtualworkshop.com>Keith Briggs,HLA Products, Inc P.O. Box 4380 Mountain View, CA  94040<keith@imtinc.com>KeywordsHLA, RTI, Real Time Protocol, Embedded Simulation, RTOS, Java, Javelin SimulationAbstract: Embedded Javelin is an optimized version of the Javelin product being produced specifically for the embedded marketplace.  Developed in accordance with Sun’s Embedded Java specification, Embedded Javelin is constructed to operate with a minimal memory footprint.  Embedded Javelin utilizes a modular and dynamic architecture that allows service support to be added across a network through Embedded Java’s Dynamic Class Loader capability.  Using this approach, a local instance need not support the overhead associated with services that are not locally required while maintaining full compatibility with the HLA Interface Specification.IntroductionIt has been two years since the first RTI prototypes became available from DMSO and yet there still has not been an RTI produced for the embedded applications marketplace.This simple truth testifies to the unique requirements for embedded simulation and the relative difficulty of addressing those requirements within the DMSO RTI.The embedded marketplace is a fractured community.  The applications are run on a wide range of processors with an equally wide range of operating system environments.  The processor speeds, memory capabilities, disk access (if any), and above all, the connectivity of the host platforms define a truly broad range of operating capabilities.One has to be careful with the DMSO RTI in order to execute the application within a relatively standard desktop environment.  A precise and current set of operating system patches must be installed and the correct environment variables set.  Is it any wonder that the product isn’t available for the embedded marketplace?The fact is that NO vendor is capable of providing an RTI that will meet ALL of the requirements of the embedded systems marketplace.  The range and breadth of the market is too extreme to provide for a complete solution.  It is, quite frankly, impossible.A solution must instead be achieved by developing an RTI framework that is easily customized by the end users. Through this mechanism, users knowledgeable of an implementation environment could customize the framework as required.  The baseline capability would need to be sufficiently flexible to allow its use as part of a laboratory hardware-in-the-loop simulator or within a soldier’s next generation MILES equipment.The Embedded Javelin Framework is designed to provide that flexibility.  From the ground up it has been designed to accommodate extensible networks, user customization through source code licensing, real-time performance, and multi-platform 100% Java based transportability.  Embedded Simulation RequirementsThe unique requirements for embedded simulation applications can be generally divided into three categories.  Unique processor / operating system requirementsUnique connectivity needsLimited or no direct user interfaceUnique Processor / Operating System RequirementsPorting code between different operating system environments can be difficult, time consuming and costly especially for real-time applications. OS-9, VX-Works, VRTX, real-time Unix and Windows CE as examples all support different process control mechanisms and networking stacks – two features of importance to an RTI implementation.Not only is it difficult to move between operating systems but it is also difficult to move between processors using a single operating system. There is no comparable standard for embedded systems computers as there is for PCs within the desktop environment.  This limitation represents the single biggest hurdle to the delivery of an RTI for embedded systems use.  Any RTI solution must be configurable to work on both large and small embedded processors while maintaining an ability to interoperate.  One cannot constrain the performance of the high performance installations but at the same time one cannot require too many processor resources from smaller installations.Connectivity RequirementsLet us consider three basic scenarios that incorporate one or more embedded simulations into a distributed simulation.Hardware in the LoopIn a hardware-in-the-loop environment, the hardware is often tested within the context of a sophisticated laboratory.  In this environment, the hardware-in-the-loop unit under test can be connected to the laboratory’s networking environment.  It would be expected that the laboratory would support standard high performance commercial networking equipment operating with commercial standard protocol stacks.The low latency performance of the RTI in this environment is of key importance.  The latency of the RTI will establish the Nyquist limit of the simulation interactions.  A lower latency will allow for more dynamic distributed interactions to be modeled within the simulation.In the case of the JADS tests, a hardware-in-the-loop test as described as being connected via a long haul network to other simulation components some 2000 miles away. As illustrated by this test case, the RTI used to support these environments needs to provide advanced connectivity options to both local and extended wide area networks. Range Based SimulationIn a live exercise, simulation components may be embedded on every platform.  In the case of MILES equipment (as an example communications between the distributed players) consists of a low bandwidth link between a base station and the players in addition to a laser driven point to point interaction capability.  The requirements on the RTI within this environment are much different than those of the hardware in the loop tests.In this environment, communications and processor limitations are the key drivers.  It would not be unreasonable to expect a single 16 - 64Kbit per second shared link to support several hundred individual players.  Customized protocols are utilized to maximize the effectiveness of the communications links.  All of this is done within a very constrained processor environment.  In many cases, the equipment needs to be small, man portable, and operate off of battery power.Embedded Vehicle ComponentsAs a final example, RTI components may be incorporated into the subsystems of future vehicles to support embedded test and training applications.  The RTI will need to operate over available 1553 bus connections without impacting the other on-board systems.  Further, the system will have to operate within the legacy processor platforms.These components may operate in a hierarchical federation.  At the lowest level the federation is composed of vehicle subsystems whereas at the higher levels the composite vehicles are also interconnected.  The RTI must be able to support these types of extended federations without impacting the performance of the intravehicular simulation.User EnvironmentOne can expect that in many or most cases, the embedded systems will support only a minimal or absent user interface.  Intravehicular embedded systems can be expected to boot when powered up and to interface over a vehicle network with other subsystems.  Range based simulation systems may possess only a simple on/off switch.  Hardware-in-the-loop systems may possess a more extensive test environment including a console.In some respects, the availability for console control has only a minimal impact on the RTI.  The RTI provides a networking infrastructure connecting distributed object representations.  As such an infrastructure, it should require no more access to a machines console display than a machines TCP interface does as an example.  However, the manner in which the current HLA is specified and has evolved raises several questions and concerns from a systems administration perspective.Current versions of the RTI boot from local copies of the RTI Executable, Federation Execution Data (FED) file, and RTI Initialization Data (RID) file.  Local environment variables are used to define which port contains the Federation Executive that must be started prior to the local RTI.  Furthermore, unlike TCP/IP implementations, different versions of the RTI, produced by different or in many cases the same vendor, don’t interoperate.  Finally, it is important to recognize that the HLA is an immature specification (unlike TCP/IP) and as such it can be expected that both implementations and the specification will continue to fluidly evolve over the next period of time.To be accepted, an RTI must be supportable in an embedded systems environment where easily accessible user interfaces and local disks don’t always exist. The RTI must overcome the long list of legacy problems enumerated above to accomplish this. The Javelin FrameworkJavelin is an RTI framework that includes the Java Real-Time RTI among other components.  From the onset, we recognized the need to support extended hierarchical federations and we have constructed the Javelin framework to accommodate those requirements.  As such, the framework is not designed with the notion that a singular connection authority or mechanism will be in use.  Rather, we expect multiple RTIs, each of which may use multiple connection mechanisms, to operate cohesively in extended networks of federations. In the current environment, a single bit change in the proprietary protocol connecting a DMSO RTI causes instant incompatibility with previous RTI versions.  Unfortunately, the approach embodied by the DMSO RTI effectively prohibits the kind of protocol and processing customization required by the embedded systems market.Dynamic ConfigurationUnlike the DMSO RTI, the Javelin framework will support the run-time customization of RTI services.  Imagine, if you will, that a local RTI instance receives an incoming packet from a remote RTI instance.  The local RTI needs to be able to parse the incoming message and extract basic information from its content.  First of all what type of message was received?  Was it a single message or was it multiple messages packaged together?  What are the parameters of the messages?  In short, the receiving federate needs to be able to parse the incoming message.In the current DMSO RTI implementations, this capability appears to be hard coded into the receiving federate’s libraries.  Thus a change in a remote federate’s protocol causes an instant incompatibility with the local federate.  It can no longer correctly parse the message.The Javelin framework is being designed differently.  While the capability won’t be fully implemented until later this year, the structure of the Javelin framework is designed to permit the dynamic configuration of RTI to RTI communications.Within the Javelin framework only a small set of initial configuration protocols are standardized allowing for the discovery of a federation execution and initial synchronization with the participating federates.  If an incompatibility is discovered with other federates in the federation, the RTIs dynamically exchange protocol objects that will allow for the exchange of message traffic.  These objects support a standard intra-RTI API that we are standardizing within the Javelin framework.Ultimately, it is our expectation that a similar framework will be standardized within the broader SISO community in order to support RTI to RTI interoperability.A Java Portable SolutionThe run-time customization of the RTI infrastructure is made possible through the use of the Java programming language.  The Java language and infrastructure supports the cross platform operations through its write once run everywhere design.  Without this capability, it would not be practically feasible to transfer the object code from one platform to another.  The Javelin Framework is capable of achieving an unparalleled level of flexibility while maintaining a high degree of interoperability by internally standardizing on an internal protocol API and Java’s mechanism for dynamic object loading.Perhaps more important; however, is Java’s impact on reducing the support requirements associated with cross platform operation.  Interoperable JVMs are available for most if not all widely used embedded operating systems to include OS-9, VX-Works, VRTX, Windows CE and most large scale operating systems as well.  HLA Products estimates that its Java RTI development costs are 5 to 10 times less than if the RTI had been developed in C++.  Uniform cross platform support; available high level networking, object distribution, and program structure libraries; uniform threading model; and increased code readability have all contributed to the improved productivity.  Further, HLA Products estimates that the resultant support costs will be reduced by at least a factor of 10.  Without these cost savings, HLA Products would not have been able to develop Javelin.Source Code AvailabilityEven with the level of cross platform support that Java provides, it is not possible to reasonably develop a one size fits all RTI solution for the embedded marketplace.  The unique specialization of the marketplace dictates the need for non-standard extensions.  In order to facilitate the customization and improvement of the Javelin infrastructure, HLA Products intends to make the source code available at a reasonable cost.  By insuring that the extensions are compatible with a minimal but necessary set of RTI internal APIs, specialized Javelin implementations will retain an ability to interoperate appropriately.Access to an RTI’s source code is an absolute requirement for broad based embedded application support.  Without such access affordable use of the HLA services would not be feasible.Extensible FederationsA key to HLA Product’s Javelin concept is the notion that extensible or hierarchical federations are fundamental to the success of the HLA.  It is hard to imagine that the entire US Department of Defense, along with its allies, commercial partners, etc., could agree on the adoption of a single vendor solution for all RTI applications.  Assuming that such a RTI source agreement is not forthcoming, then it is inevitable that RTI boundaries will exist and that interoperation across these boundaries will be required.The publicized alternative, one in which all federation participants agree on a single RTI implementation, is neither feasible on a broad scale nor desirable.  Consider the confusion that would result if your web browser worked that way.  Following this analogy, each individual web server may only support one manufacturer’s web browser.  True, one could switch back and forth between web browsers but that would be a clearly inappropriate solution.On the other hand, the benefits of RTI interoperability are substantial. By incorporating the concepts of RTI to RTI interoperability within the Javelin architecture, it is possible by extension to support collections of specialized Javelin based RTI implementations operating as part of a single extended or hierarchical federation.  In Figure 1, an illustrative hypothetical extended federation is shown.  Brokers allow for communication between component federations.  While the drawing implies a fixed configuration constrained to specific hardware boxes, the architecture in fact is much more flexible allowing the local definition of federation groups and brokers within a single federation.  With this approach, a single federation can be extended up multiple tiers or across several extended federations indefinitely.The implications for embedded applications are enormous.  No longer will the use of a specialized communications infrastructure on a range prevent interoperation with desktop simulations.  Shared memory, high speed and low speed networked implementations will all be connectable in run-time configurable extended federations. Minimal Processor ImpactThe development of the Java programming language and virtual machine was started at Sun as a research effort focused at allowing coffee makers to talk to toasters.  Sun recognized that the current programming solutions for this environment did not offer support the requirements.  Initially, the effort was focused on developing a programming language that would offer superior testability and reliability in a broadly networked environment.  It is hard to sell an oven that “crashes” every time the refrigerators door is opened.This initial effort evolved into the write once run everywhere solution that Java has become.  However, in this evolution the Java effort never lost its original application focus – small consumer based embedded applications.If you went to the JavaONE conference last year you might have received a ring.  Not an ordinary ring, it contained a small processor, some memory, and a battery running a minimal Java Virtual Machine (JVM).  A small application stored personal information in an object.  During the conference one could access various kiosks scattered around the convention and download his / her personal data by plugging the ring into a reader.  Needless to say, this particular JVM did not require substantial processing power or memory to support a functional and useful application.Following this demonstration, Sun has followed a development strategy that maintains a strong focus on the embedded marketplace.  The Java Virtual Machine is tailorable to the specific requirements of an embedded application.  For example, the Javelin Java Real-Time RTI requires access to the Networking and Input services of the JVM but not the Advanced Windowing Toolkit (See Figure 2).  Embedded Java allows one to create a custom JVM to that only supports those features reducing memory.Additionally, the Java Virtual Machine and application can be embedded in a processors ROM space using RAM for application memory and to support downloadable patches.  Java includes built in support for the update “patching” of ROM based executables.  Again, using this capability even ROM based RTIs following the Javelin specifications can be customized at run-time to accommodate a new protocol previously unseen.All of this can be expected to operate on a platform with as little as 1 Mbyte of ROM and 1-2 Mbytes of RAM.ConclusionsCompatibility across platforms, customizable RTIs, network run-time configuration, and RTI interoperation are all key items critical to the support of the embedded systems marketplace.  The Javelin framework promises to provide the capability and flexibility necessary to meet the challenge.  Still, knowing that any solution cannot meet the full requirements of the market, source code customization will be supported within an interoperable definition and framework.The full Javelin framework is still under development.  The initial Java Real-Time RTI will be released at the conference this spring but it will not contain the full network configuration capabilities discussed in this paper.  However, this initial platform will still support operation on a number of real-time platforms and operating systems.  It is expected that a demonstration of this capability will be held at the conference. The Javelin framework for embedded applications will be released this summer or fall with support for hierarchical federations, customizable network connections, and automatic network configuration.Bibliography [Briggs, 98]	Briggs, Keith, “A Required RTI Gateway As A Solution To RTI Interoperability,” Proceedings of the 3rd Simulation Interoperability Standards Organization (SISO) Simulation Interoperability Workshop, 97S-SIW-188, Orlando Florida, March 1998.  [IEEE 1516]	SISO High Level Architecture Standards Development Group, “Draft Standard for Modeling and Simulation (M&S) High Level Architecture (HLA) - Framework and Rules,” Draft specification, http://www.sisostds.org/stdsdev/ Nov. 1998.[IEEE 1516.1]	SISO High Level Architecture Standards Development Group, “Draft Standard for Modeling and Simulation (M&S) High Level Architecture (HLA) - Federate Interface Specification,” Draft specification, http://www.sisostds.org/stdsdev/ Nov. 1998.[IEEE 1516.2]	SISO High Level Architecture Standards Development Group, “Draft Standard for Modeling and Simulation (M&S) High Level Architecture (HLA) - Object Model Template (OMT),” Draft specification, http://www.sisostds.org/stdsdev/ Nov. 1998.[Krupczak, 97]	Krupczak, B., K. L. Calvert, and M. H. Ammar, “Increasing the portability and reusability of protocol code,” IEEE/ACM Trans. Networking, Aug. 1997, pp. 445–59.[Krupczak, 98]	Krupczak, Bobby, with Kenneth L. Calvert, and Mostafa H. Ammar, “Implementing Communication Protocols in Java,” IEEE Communications Magazine, 0163-6804/98, October 1998 [Myjak, 97]	Myjak, Michael D., and Sean Sharp, “HLA RTI: An Application Layer Protocol,” Proceedings of the 1st Simulation Interoperability Standards Organization (SISO) Simulation Interoperability Workshop, 97s-SIW-112, Orlando Florida, March, 1997[Myjak, 98]	Myjak, Michael D., and Sean Sharp, “Java Real-Time RTI,” Proceedings of the 4th Simulation Interoperability Standards Organization (SISO) Simulation Interoperability Workshop, 98f-SIW-244, Orlando Florida, October, 1998[Myjak, 99a]	Myjak, Michael D., and Sean Sharp, with Keith Briggs, “Javelin,” Proceedings of the 5th Simulation Interoperability Standards Organization (SISO) Simulation Interoperability Workshop, 99s-SIW-158, Orlando Florida, March, 1999[Myjak, 99b]	Myjak, Michael D., Sharp, Sean T., with Tom Lake and Keith Briggs, “Object Transfer in HLA,” Proceedings of the 5th Simulation Interoperability Standards Organization (SISO) Simulation Interoperability Workshop, 99s-SIW-140, Orlando Florida, March, 1999.[Myjak, 99c]	Myjak, Michael D., Sharp, Sean T., Shu, Wei Wennie, with Jeremy Riehl, Demarron Berkley, Phuoc Nguyen, Sean Camplin, and Mike Roche, “Implementing Object Transfer In the HLA,” Proceedings of the 5th Simulation Interoperability Standards Organization (SISO) Simulation Interoperability Workshop, 99s-SIW-157, Orlando Florida, March, 1999.About the AuthorsMichael D. Myjak Is Vice President of Research and Development and co-founder of The Virtual Workshop, Inc., where his current role is chief architect of the Java Real-Time RTI.  In 1982, Mr. Myjak received two Bachelor of Science Degrees from Clemson University, one in Computer Science and the other in Engineering Technology.  He obtained his Master of Science Degree in Computer Science - Systems from the University of North Texas in 1988 while employed with the Computer Science Laboratory, Corporate Research and Development labs at Texas Instruments. Prior to founding The Virtual Workshop, Mr. Myjak was a Senior Research Scientist with the Institute for Simulation and Training, at the University of Central Florida. Mr. Myjak has been an active participant in Modeling and Simulation standards activities for a number of years, and has recently completed a term of office as Chair of the Run Time Infrastructure and Communications Forum under the Simulation Interoperability Standards Organization (SISO). He currently Chairs the Run Time Infrastructure Interoperability Study Group, and was recently elected Vice Chair of SISO’s Standards Activity Committee (SAC). Mr. Myjak also Chairs the Internet Engineering Task Force’s (IETF) Large Scale Multicast Application (LSMA) working group, and is active in the Web 3D consortium and the Internet Research Task Force’s Reliable Multicast Research Group.Sean Sharp is a recent graduate of the University of Central Florida, where he graduated Magna cum Laude in Computer Science. Mr. Sharp is currently a Senior Software Engineer at The Virtual Workshop where he has principle design responsibilities for Java Real-Time RTI. He comes to TVW as former research assistant at the Institute for Simulation and Training, where he has several years of experience in simulator networking and analysis. For his contributions to the performance analysis of the Platform Proto Federation, Mr. Sharp received the 1997 Student Researcher Award from IST. Mr. Sharp is working on his Masters Degree in Computer Science.Keith Briggs is a co-founder and President of HLA Products and iMT Incorporated.  Mr. Briggs is an active member of the SISO community. He is currently serving terms as Chair of the Run-Time Infrastructure and Communications Forum, Research Development and Engineering Users Forum PRP member, Standards Activity Committee member, Synthetic Natural Environment Standards Technical Area Director, and Real-time Platform Reference FOM drafting group member.  Mr. Briggs is currently chairing an Ownership Transfer Tiger Team on behalf of the HLA Standards Development Group.  Mr. Briggs is a graduate of the Massachusetts Institute of Technology.  Future versions will likely require RMI, Persistence and Security package support as well. RAM usage is dependent on the size of the Federation. EMBED Word.Picture.8  EMBED Word.Picture.8