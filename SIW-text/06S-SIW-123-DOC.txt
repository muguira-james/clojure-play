Web - Based Federate Compliance TestingThom McleanRamesh ChandranJaime Michael YapGeorgia Institute of TechnologyAtlanta, GA 30332-0832thom@cc.gatech.edu, rameshc@cc.gatech.edu, gtg600e@mail.gatech.eduKatherine L. MorseSAICSan Diego, CA  92121katherine.l.morse@saic.comKeywords:HLA, Compliance, Automated, TestABSTRACT:  This paper outlines the recent developments in HLA Federate Compliance Testing.  The existing processes are reviewed, along with recent developments in the deployment of the testing process to NATO countries.  A new, more flexible testing paradigm is introduced that will allow remote, semi-autonomous testing to be performed via a web-web based application.  The architecture of the new system is explained and the implications of the paradigm are explored.1. IntroductionWhen cCompliance with the HLA was mandatedbecame a requirement for U.S. Department of Defense (DoD) simulations in 1996 [1] , and reaffirmed in 1998 [2].  In response to the HLA mandate], the Defense Modeling and Simulation Office (DMSO) set up a federate compliance test process to evaluate simulations and certify them as HLA compliant [3].  The use of this service continues today as a means for new or modified federates to reduce integration risk by testing the federate for compliance with the HLA specifications and the federate‚Äôs own Simulation Object Model (SOM).  To date, nearly 300 federates have been certified as compliant with HLA versions 1.1 and 1.3, and more federates are currently in the pipeline for certification under the IEEE Standard 1516.  Until recently the compliance testing process was exclusively handled by DMSO through its web site.  The process had been partially automated with the development of a test tool and an online system for administering the test process.  However there is still significant amount of interaction required from the Certification Agent (CA) to successfully carry out a compliance test.  An expansion in the deployment of the testing apparatus is underway.  There are several NATO users who have shown interest and talks are advancing with Pacific-rim countries.  We expect several more international organizations to be interested.  Due to this increased interest, it makes sense to proceed with further automation of the testing process.  Another factor to be considered is the internationalization issues that  become important with global deployment.    VVarious languages would have to be supported in the testing process and work is proceeding in that direction as well.  This paper describes a new approach to federate compliance testing that further automates the process.  Section 2 describes the current testing process and the difficulties involved therein.  The tools used are also covered.  Section 3 outlines the new web based testing approach and its implementation details.   Finally we conclude with known issues and future directions of work.2. HLA Federate Compliance Test ProcessThe HLA compliance test process [3], as illustrated in  REF _Ref1514645 \h  \* MERGEFORMAT Figure 21, consists of four steps.  The first step is an exchange of information between the developer of the Federate Under Test (FUT) and the Certification Agent (CA) to start the certification process; the developer submits registration information at this stage.  This consists mainly of providing a point of contact and any affiliation with government sponsors.    In Step 2, the federate developer applies for testing and provides required documentation, including the Simulation Object Model (SOM) and the Conformance Statement (CS) listing the interface services supported by the FUT along with the Federation Execution Data      (FED) and the Run Time Infrastructure (RTI) Initialization Data (RID) files.  The CA checks the documentation for conformance to the specifications, and, if the SOM and CS prove to be specifications, and, if the SOM and CS prove to be syntactically correct, internally consistent, and consistent with each other, we move on to the next step.  In Step 3, the interface (IF) test is conducted and monitored and the CA concludes whether a sufficiently comprehensive set of SOM capabilities have been demonstrated.  The process is concluded with After Action Review and documentation of certification of HLA compliance in Step 4. EMBED Visio.Drawing.11   EMBED Visio.Drawing.11  Figure 1.  Figure  STYLEREF 1 \s 2 SEQ Figure \* ARABIC \s 1 1.  HLA Federate Compliance Test Processsyntactically correct, internally consistent, and consistent with each other, we move on to the next step.  In Step 3, the interface (IF) test is conducted and monitored and the CA concludes whether a sufficiently comprehensive set of SOM capabilities have been demonstrated.  The process is concluded with After Action Review and documentation of certification of HLA compliance in Step 4.DDMSO is currently providing the Federate Compliance Test Process free of cost charge through http://hlatest.msiac.dmso.mil.   The testing process has been partially automated through the development of the Federate Compliance Test Tool (FCTT), as shown in aded in ?? in  REF _Ref1514645 \h  \* MERGEFORMAT Figure 21, and the Federate Test Management System (FTMS), shaded in ??.2.1 FTMSThe Federate Test Management System [5] is a Web-web based system for administering federate testing.  This process begins with a candidate federate‚Äôs application for testing and continues with the uploading of required test documents (e.g., SOM and CS) and the specification of key test information (e.g., test environment, security restriction, and contact information for the certificate).  Providing a web based front end helps in tackling most of the administrative issues associated with the certification process.   FTMS, which is in its second generation now, is currently implemented as a JSP application running on Apache Tomcat.FCTTThe Federate Compliance Test Tool [5] carries out the actual conformance testing of the FUT.  FCTT‚Äôs architecture is based on the Model View Controller (MVC) design pattern.  The Model represents federates and keeps track of the associations between federates and object and interaction classes and their respective attributes and parameters.  Information regarding object and interaction class structure is obtained by parsing the SOM and FED files submitted.  The GUI registers listeners with the model components.  The Controller periodically listens to messages coming over the RTI and updates the model state thereby triggering the listeners and causing the GUI to change state.  FCTT‚Äôs operation occurs in two phases: file checking and runtime testing.  After a FUT‚Äôs representative submits the federate‚Äôs SOM, CS, and FED files in Step 2 of the test process, FCTT performs two checks on these files.  The SOM/FED check verifies that the FED file describes the same class hierarchy that is described in the SOM.  The CS/SOM check verifies that the CS is internally consistent and that the SOM and the CS are mutually consistent.  This test is based on a set of predicate logic rules which describe what it means for a CS to be internally consistent and what it means for a SOM and a CS to be mutually consistent. EMBED Visio.Drawing.11  Figure  STYLEREF 1 \s 2 SEQ Figure \* ARABIC \s 1 2.  Server Side Testing CS to be internally consistent and what it means for a SOM and a CS to be mutually consistent.  An example of a CS internal consistency rule is: registerObjectInstance => publishObjectClassThis rule can be read as ‚Äúif a federate implements the Register Object Instance service, then the federate must implement the Publish Object Class service.‚Äù  An example of a SOM/CS mutual consistency rule is:ObjectPublished = publishObjectClassThis rule can be read as ‚Äúa federate‚Äôs SOM should indicate that it publishes one or more object classes if  and only if the federate implements the Publish Object Class service and vice versa.‚Äù  The second phase of FCTT‚Äôs operation is runtime testing.  At runtime, the FCTT federate joins the test federation and verifies that the FUT calls the HLA services indicated in its CS, and that it demonstrates a sufficiently comprehensive subset of SOM capabilities.  The tool provides an intuitive graphical interface that shows the FUT‚Äôs participation in the federation execution.  For each service, it displays whether it hasd been invoked, as well as whether it was meant to be invoked by the FUT as indicated in the CS.  TAlso the details of object classes, attributes, interaction classes and parameters are also shown for each federate in the execution.     EMBED Visio.Drawing.11  Figure 2.  Figure  STYLEREF 1 \s  SEQ Figure \* ARABIC \s 1 .  Server Side TestingTechnical Issues  With The Current SystemFigure 2  REF _Ref1515633 \h  \* MERGEFORMAT Figure 22 shows the conceptual process flow for a compliance test using FCTT and FTMS used by DMSO.  Federation execution is distributed in the current scenario with the FCTT running at the CA and the rest of the federates at the federate developer‚Äôs end.   We call this Server Side TestingTesting (Figure 2-2). Test StepsMachine at the client side invokes test procedure through FTMS server after client completes the registration and approval processes in Step 1 of the Federate Compliance Test Process [3].Test machine invokes test procedure through FTMS server after registering.FCTT runs on the CA side and starts federation executionFederates join from the client side and execution takes placeAt completion, test results are stored at the CA side for keeping track of testing history and the client is intimated of the outcome usually through email.At completion, test results are stored and the client is intimated informed of the outcomeThis model presents certain technical challenges to testing.  The main concern is the high bandwidth required for exchanging RTI messages across the federation.  Since FCTT keeps track of federation state by subscribing and listening to Remote Service Invocation (RSI) interactions produced by federate activities the amount of data to be transmitted across the network to FCTT can be quite large in a reasonable sized federation execution.  The amount of data generated can be quite large in a reasonablye sized federation execution; especially since FCTT subscribes to Remote Service Invocations (RSIs) from the federates.  RSI interactions are generated for each RTI interface call made by or to the federate under test.  The RSI bandwidth requirements can be many times greater than that required for normal, non-test execution.  Latency in the delivery or processing of RSI interactions is also problematic. Over long-haul connections, tThere can be significant latency at the server side in receiving the federation messages irrespective of whether the federation execution is run at the client side or the server sidedelay in the receipt of RSIs by FCTT. T; this will delay updating the internal model maintained by FCTT, which maintains the current state of the test, the progress through the various interface call sequences, object updates, interactions, etc.  Moreover, there is the possibility that the message sequences may be reordered in transmission, resulting in logicalthe generation of errors in the interfaceIF tTest tool interface.  For instance, if a ReflectAttributeValues is received from an instance before the object class ‚Äì instance handle mapping has been established for that instance, that message may have to be discarded and FCTT‚Äôs view of the federation may become inconsistent.  Another issue to be considered here is the possible testing load on the CA‚Äôs server.  This model puts the burden of testing on the CA as the InterfaceF testing is essentially run at the server side.  InterfaceF testing is not a short process and an increase in the number of applications can create a back-log in the certification process.  It seems a reasonable approach to offload the bulk of testing to the federate developer.Often federate testing needs to be conducted behind within secure environments; behind enterprise firewalls.  Currently this requires the CA to be physically present at those sites due to problems in establishing the network connections required by this model.  2.4 Administrative IssuesThe current method is a marked improvement over the first generation testing tools used, where most of the work was carried out by many tiny tools requiring greater supervision.  However though FCTT provides a unified application for performing many of the activities involved in federate consistency and IF testing, there is a great deal of user interaction required on the part of the CA here.  This problem is aggravated as the federate developer is not given an interface for pre-testing the FUT.  Consequently certification will require more iterations of consistency checking or even IF testing requiring manual intervention from the CA before a test can be completed successfully.  Another effect of this is the delay introduced in the certification process.  Administrative IssuesThe current method is a marked improvement over the first generation testing tools used, in which most of the work was carried out by many smaller tools requiring greater supervision. Though FCTT provides a unified application for performing many of the activities involved in federate consistency and interface testing, there is a great deal of user interaction required on the part of the CA here.  This problem is aggravated because the federate developer is not given an interface for pre-testing the FUT.  Consequently, certification may require more iterations of consistency checking or even interface testing, requiring manual intervention from the CA before a test can be completed successfully.  Ultimately this can delay the entire certification process.  Scheduling may be required for conducting multiple tests, which again brings in the requirement for human intervention we are trying to minimize.  Another issue is that the federate developer gets only the final outcome of the test and has to accept that.  If the developer can play a greater role in the interface testing phase, chances of early identification of compliance problems is increased.  It should be noted here that tools exist for performing most of the activities in the work-flow, including consistency checking and interface testing.  Human intervention is used here just to initiate the appropriate tool.  There are opportunities for automation throughoutthe process, potentially leading to elimination of human intervention from the work-flow in most cases. Proposed Application ArchitectureA new testing paradigm has been developed that will allow remote testing to be carried out in a more flexible manner with fewer intermediate steps.  Current web technologies make the realization of such a tool easier.  The design alternative presented here is to run the bulk of the testing at the federate developer‚Äôs side as opposed to running it at the CA side.  We refer to this as Client Side Testing (Figure 2-3) in contrast to the older approach of Server Side Testing.Client Side TestingThis approach can be realized by making the interface test tool an applet that the federate developer can load and run locally.  Test ProcessTest applet is downloaded to the client side from the serverApplet starts federation and all federates joinConsistency checking and interface testing takes placeAt completion, the applet sends data back to the serverTest results are stored at server and the client is informed of the outcome.  Here the user can be notified directly through the GUI the applet presents Offloading the bulk of testing to the client has an intuitive appeal.  The developer is satisfied of the fairness and responsiveness of the test.  Moreover, the bandwidth and latency issues associated with server side testing are overcome as the entire execution takes place at the client.  The client may be allowed to do some amount of pre-testing in this case before registering for the certification test.This approach has to overcome some critical issues to be practically viable.  Since testing takes place at the client side, there is a possibility that the client may tamper with the test results.  Authentication procedures will be required for verifying data returned to the CA. Moreover, the client can try to run a federation with a simplified set of parameters different from the environment data submitted at registration.  And there may be issues associated with troubleshooting if the test tool fails at client side.  Most of these issues are taken care of in the current implementation using security checks to safeguard and verify test data and results.ImplicationsDespite the advantages of client side testing, there are some issues associated with this approach.  An intuitive solution (and our proposed method) is to implement the  EMBED Visio.Drawing.11   EMBED Visio.Drawing.11  Figure  STYLEREF 1 \s 2 SEQ Figure \* ARABIC \s 1 3.  Figure 3.  Client Side Testingtool as an applet.  This is more practical than requiring the client to download and install the tool as an application.  However, the interface test applet will not be able to run on the client side with the default applet permissions; extra permissions need to be set up for it Administrative IssuesThe current method is a marked improvement over the first generation testing tools used, in which most of the work was carried out by many smaller tools requiring greater supervision. Though FCTT provides a unified application for performing many of the activities involved in federate consistency and IF testing, there is a great deal of user interaction required on the part of the CA here.  This problem is aggravated because the federate developer is not given an interface for pre-testing the FUT.  Consequently, certification may require more iterations of consistency checking or even IF testing, requiring manual intervention from the CA before a test can be completed successfully.  Ultimately this can delay the entire certification process.  Scheduling may be required for conducting multiple tests, which again brings in the requirement for human intervention we are trying to minimize.  Another issue is that the federate developer gets only the final outcome of the test and has to accept that.  If the developer can play a greater role in the IF testing phase, chances of early identification of compliance problems is increased.  It should be noted here that tools exist for performing most of the activities in the work-flow, including consistency checking or and IF testing.  Human intervention is used here just to initiate the appropriate tool.  There is scopeare opportunities for automation in throughout the process, so that this requirement can be eliminated to the very end ofpotentially leading to elimination of human intervention from the work-flow in most cases. 3 Proposed Application ArchitectureA new testing paradigm has been developed that will allow remote testing to be carried out in a more flexible manner with fewer intermediate steps.  Current web technologies make the realization of such a tool easier.  The design alternative presented here is to run the bulk of the testing at the federate developer‚Äôs side as opposed to running it at the CA side.  We refer to this as Client Side Testing in contrast to the older approach of Server Side Tesing.3.1 Client Side TestingThis approach can be realized by making the IF Test tool an applet so that the federate developer can load the tool and run it locally.  Test ProcessTest applet is downloaded to the client side from the serverApplet starts federation and all federates joinTesting takes placeAt completion, the applet sends data back to the serverTest results are stored at the server and the client is informed of the outcomeOffloading the bulk of testing to the client has an intuitive appeal.  The developer is satisfied of the fairness of the test.  Moreover the bandwidth and latency issues associated with server side testing are overcome as the entire execution takes place at the client.  The client may be allowed to do some amount of pre-testing in this case before registering for the certification test.This approach has to overcome some critical issues to be practically viable.  Since testing takes place at client side, there is a possibility that the client may tamper with the test results.  Authentication procedures will be required for verifying data returned to the CA.  Moreover the client can try to run a federation with a simplified set of parameters different from the environment data submitted at registration.  And there may be issues associated with troubleshooting if the test tool fails at client side.  Most of these issues are taken care of in the current implementation using security checks to safeguard and verify test data and results.  Offloading the bulk of testing to the client has an intuitive appeal.  The developer is satisfied of the fairness and responsiveness of the test.  Moreover, the bandwidth and latency issues associated with server side testing are overcome as the entire execution takes place at the client.  The client may be allowed to do some amount of pre-testing in this case before registering for the certification test.This approach has to overcome some critical issues to be practically viable.  Since testing takes place at the client side, there is a possibility that the client may tamper with the test results.  Authentication procedures will be required for verifying data returned to the CA.  Moreover, the client can try to run a federation with a simplified set of parameters different from the environment data submitted at registration.  And there may be issues associated with troubleshooting if the test tool fails at client side.  Most of these issues are taken care of in the current implementation using security checks to safeguard and verify test data and results.3.2 ImplicationsDespite the advantages of client side testing, there are some issues associated with this approach.  An intuitive solution (and our proposed method) is to implement the tool as an applet.  This is more practical than requiring the client to download and install the tool as an application.  However, the IF tTest applet will not be able to run at on the client side with the default applet permissions; extra permissions need to be set up for it tos functioning.  This can be achieved by signing the applet and establishing the necessary certificates for the test at the client machine.  Also, there are performance and scalability issues with applets that have not been fully explored.4. System ImplementationThe Federate Compliance Test Applet (FCTA) will consist of an applet  based implementation of FCTT along with the FTMS front-end.  4.1 Sending Rresults Bback to the SserverAuthenticating the results the applet sends back to the server is a step required to realize the new approach.  This can be done by generating a key-pair when a testing request comes from a client.  The server keeps track of current test requests and the keys generated for each such request.   At the completion of a test, the result file is signed by the applet and transmitted to the server.  The server verifies the authenticity of the result and takes the appropriate action.  Further, Java obfuscation techniques will be used to protect against reverse engineering of the applet code.  4.2 Future WorkExtending Federate Compliance Testing for a global audience implies that there are internationalization issues to be considered.  Supporting multi-language access to the test system through i18n property bundles bundles [6] is an area in which work is going on. A more fundamental issue with using the FCTT for interface testing deals with the initialization of the federation during test.  The Current HLA 1.3 standard does not have any method to signal enforce a synchronization point externally federates to halt processing till a breakpoint is acif it isn‚Äôt designed into the federateshieved. The federate behavior has to be specifically modified to achieve this. Therefore, the FUT has to wait for some time after joining the test federation so that FCTT can set-up initialization data using Remote Service Invocations (RSI).  The federate behavior has to be specifically modified to achieve this.   Adding a mechanism to the HLA standard to halt participating federates until signaled by the Run Time Infrastructure (RTI) will would be the one way to solve this issue.5. TimelineWork on the proposed system (FCTA) is proceeding currently.  The prototype of the applet based system is expected to be ready for demonstration by March 2006.  Internationalization issues will be worked outaddressed and the beta version released to NATO by June 2006. 6. Summary and ConclusionsFCTA makes a significant contribution in the direction of automating federate compliance testing.    Allowing pre-testing of the FUT by the federate developer helps to sort out some of the federation execution issues early on in testing.  Once the developer is convinced the federate will work, a test can be scheduled and executed.  The bulk of testing is carried out at the developer‚Äôs end and the result is known immediately.  The role of the Certifying Agent is reduced to verifying the results and issuing appropriate certificates upon completion.  Since Java applets are being used, platform compatibility issues will not be a major concern here.  Most of the technical and infrastructure issues associated with the current paradigm are solved by the proposed architecture.7. AcknowledgementsThis work is being sponsored by the Defense Modeling and Simulation Office (DMSO). 8. References [1]	Paul Kaminski, ‚ÄúDoD High Level Architecture (HLA) for Simulations,‚Äù USD(A&T) Memoran-dum, 10 September 1996[2]	Jacques Gansler, ‚ÄúDoD Transition to the High Level Architecture (HLA) for Simulations,‚Äù USD(A&T) Memorandum, 1 April 1998[3]	Margaret L. Loper, et al., ‚ÄúThe HLA Federate Compliance Testing Process, Revised,‚Äù Fall 1997 Simulation Interoperability Workshop, Orlando, Florida,  September 1997[4] Laura L. Burkhart et al., ‚ÄúThe Federate Test Sequence Explained,‚Äù Fall 1998 Simulation Interoperability Workshop, Orlando, Florida, September 1998[5]  Margaret M. Horst et al., ‚ÄúImprovements to the HLA Federate Compliance Testing Process,‚Äù Fall 2000  Simulation Interoperability Workshop, September 2000.[6]  W3C Internationalization (I18n) Activity        http://www.w3.org/International/  Author BiographiesDr. Angus LM Thom McLean III is is the Director of Technology Support for the College of Computing.  In addition to his management responsibilities, he teaches courses and pursues research on simulation, video game development, databases systems. He received his PhD in Computer Science from Georgia Tech. He has over twenty years of experience in simulation, information and aerospace systems including twelve years in information and simulation systems engineering and eight years in carrier-based naval aviation.  His current research interests include simulation philosophy, temporality and distributed simulation synchronization (run-time infrastructure) issues. Before coming to Georgia Tech, Dr. McLean conducted distributed simulation research on DARPA's WarBreaker program and served with the United States Navy.  He was designated a Naval Aviator in 1986, has flown a variety of tactical and training aircraft, and has over two-hundred arrested carrier landings.  Ramesh Chandran is a graduate student at the Georgia Institute of Technology.  He has participated in the FedTest project working on the architecture of the web based testing system and on porting the current system to that architecture.Ramesh Chandran is Jamie Michael Yap is Dr. Katherine L. Morse is the Chief Scientist SAIC DMSO SETA support team. She received her B.S. in mMathematics (1982), B.A. in Russian (1983), M.S. in cComputer sScience (1986) from the University of Arizona, and M.S. (1995) and Ph.D. (2000) in Information & Computer Science from the University of California, Irvine. Dr. Morse has worked in the computer industry for over 20 years, specializing in the areas of simulation, computer security, compilers, operating systems, neural networks, speech recognition, image processing, and engineering process development. Her Ph.D. dissertation is on dynamic multicast grouping for Data Distribution Management, a field in which she is widely recognized as a foremost expert.  Dr. Morse is an avid advocate for rational application of web technologies to M&S.What information?Is this correct?  The IF acronym is awkward.  Can it be replaced by the actual words throughout the paper, or is that more awkward?Color code the blocks of the process to show which steps use FTMS and which use FCTT.  Number the steps in the figure.Is this correct?  The IF acronym is awkward.  Can it be replaced by the actual words throughout the paper, or is that more awkward?Provide an example.Given that we have so much space available, a screen shot of the GUI would be good.Who‚Äôs registering what here?  Is this the registration process in step 1?Where?Is this the client side machine, or the human client?  Explain how the notification is performed, e.g. a sent interaction or an email depending on what you mean by client.Why is this worse than for federation execution without federate compliance testing?Explain this and its impact.Briefly explain the internal model.Which tests?Same comment as in section 2.3.1 about the identity of the client and the method of notification.Label the FCTA in figure 2-3.This needs a reference.Fill these in.