HLA Ownership Management Services: We Almost Got it RightGeoff Sauerborn Gary MossUS Army Research LaboratoryATTN: AMSRL-WM-BFAberdeen Proving Ground, MD  21005-5066 Gary Tan Farshad MoradiRassul AyaniSchool of ComputingNational University of SingaporeKent Ridge, Singapore 119260Paul OxenbergUS Army Aberdeen Test CenterATTN: STEAC-TC-VAberdeen Proving Ground, MD  21005-5066Keywords:HLA, Ownership Management, Recommended Specification Changes, Recommended PracticesABSTRACT:  This paper focuses on the U.S. Department of Defense (DoD) High Level Architecture (HLA) Ownership Management (OM) services. It recommends two changes to the OM services specification.  One allows attribute transfer to be directed to a specific federate.  The other provides a federate the capability to inform the Run Time Infrastructure (RTI) of its intent to not transfer attributes.  Rationale for the changes is presented. Potential benefits and disadvantages are explained.These proposed changes are based on findings derived from two separate use cases. One case involves an innovative use of the current RTI OM services for the purpose of simulation initialization and control. The other use case involves an air traffic control simulation. 1. IntroductionPurpose.This paper focuses on the U.S. Department of Defense (DoD) High Level Architecture (HLA) Ownership Management (OM) services.  It recommends two changes in the OM services specification:Add a “refuse transfer request” service.  This informs the RTI that the federate is unwilling or unable to surrender the requested attribute instances at this time.Allow directed ownership transfer.  This provides the option of designating a particular federate with which to negotiate the attribute transfer.The rationale for the changes is presented.   Potential benefits and disadvantages are explained.  Unless otherwise stated, this paper references the last public release by the DoD of the HLA Interface Specification (version 1.3) [1].1.2  Background and Motivation.These proposed changes are based on findings derived from two separate use cases.    One case involves an innovative use of the current RTI OM services for the purpose of simulation initialization and control.  The other use case involves an air traffic control simulation.  It was the air traffic control case that first exposed an ownership transfer queuing problem.Transfer of Ownership for Initialization: At the U.S. Army Aberdeen Test Center, OM Services are being used to initialize HLA simulations in a FOM-neutral manner.*  The simulation environment tool which accomplishes the initialization is called the Ground Systems Test Bed (GSTB) and has been described in a previous paper [2]. Ownership is temporarily transferred to the GSTB where simulation variables are set to initial or saved states.  Almost immediately after this, ownership is returned to the originating entity.Transfer of Ownership During Modeling:  The airport model used at the National University of Singapore involved simulated air-traffic control wherein control of a particular aircraft was transferred as planes flew from one airspace to another [3]. In the model, each airport was represented by a federate and controlled a set of aircraft.  Two methods of transferring ownership were used: the push method, where the federate that owns the attributes of the aircraft initiates the ownership transfer by informing the RTI of its intention to give away the ownership, and the pull method, where federates that want to take over the ownership of a given attribute send acquisition requests to the RTI.  In the simulation, OM transfers last for a considerable length of time.Both of these applications quickly ran into infinite queuing trouble when attempting to adhere to the current HLA OM specification.  We have prescribed solutions for the problems we identified.  The best long-term solution appears to be a set of modifications of the HLA standard.  The rest of this paper describes problems with the current standard and explains proposed solutions.  To stay within the space limitations of this paper, a simple descriptive form of the changes and their desired effect has been used.2. Implication of current HLA’s Ownership Management Services (or what is wrong with the current services).The current HLA services support object attribute ownership transfer. However, acknowledgment of ownership transfer is only directed by the RTI to the federate that is successful in obtaining ownership.  While a negative acknowledgment is available via the RTI callback service 7.9 Attribute Ownership Unavailable †, this callback was not implemented until the Defense Modeling and Simulation Office’s (DMSO) RTI 1.3v4 version release.  Both the GSTB and air-traffic simulation required the RTI callback service 7.9 and thus had to implement their own versions.2.1 Initializing and Controlling Federates.Achieving interoperability between U.S. Army test centers and customers and facilitating the re-use of Army virtual test assets are among the primary goals behind the GSTB.  The U.S. Army Developmental Test Command chose to adopt the object model approach for representing test, simulation, and unit under test elements.  By adopting this approach flexibility is provided that allows using HLA as the focus of the current Virtual Proving Ground.  This approach should also facilitate adopting future architectural developments and standards as they present themselves.We refer to federates that both subscribe to and publish attributes as “read-write”, with respect to those attributes.  Federates that strictly publish (but do not subscribe to) attributes we refer to as “write-only” federates.  For example, a GPS receiver that periodically provides information would be a “write-only” application with regards to the published position attributes.  The GSTB use case has a requirement to be able to run and monitor HLA applications (federates).  Some of these applications may be the software interfaces to test range equipment’s output and other “write-only” test apparatus.  Many other federates are simulations in the traditional sense.  These simulations involve federates based on legacy applications.  For a significant number of these applications, the source code is not available.  A subset of these can only be developed into “write-only” federates that output by publishing to the RTI but are not influenced by input from the RTI. For most of the remaining “read-write” federates, initialization can be accomplished if these HLA applications implement the OM services displayed in Table 1.  Initialization also requires, of course, that federates subscribe to the attributes that are intended to be initialized.   Furthermore, when assuming ownership of an attribute, these “read-write” federates must use the latest published attribute value to initialize their own internal state of that attribute (i.e. the federates cannot statically initialize transferred attributes by some internal means; rather, they must pay attention to that attribute’s most recently published value).  Table 1.  Required HLA (v1.3) Object Ownership Capabilities for Robust GSTB integrationHLA IF Spec.HLA Interface (IF) Specification Title7.2Unconditional Attribute Ownership Divestiture 7.3Negotiated Attribute Ownership Divestiture 7.4Request Attribute Ownership Assumption † 7.5Attribute Ownership Divestiture Notification † 7.6Attribute Ownership Acquisition Notification † 7.7Attribute Ownership Acquisition 7.8Attribute Ownership Acquisition If Available7.9Attribute Ownership Unavailable † 7.10Request Attribute Ownership Release † 7.11Attribute Ownership Release Response The process used by GSTB to initialize federates is follows:The GSTB gains control of a federate’s attributes of interest.For each attribute it controls, the GSTB publishes the attribute’s desired initial value.The federate that originally owned the attribute discovers and internally reflects the published value.The GSTB then returns ownership to the original federate.  The federate now initializes its internal representation of the attribute, based the attribute’s value most recently published by the GSTB.The federate may now proceed to provide updates of that attribute in the usual manner.We have found that it is sometimes necessary for the GSTB to “pause” the federate via a synchronization point until all attributes have been initialized and transferred.  Further details about the GSTB, such as how it maintains a database of valid initial states can be found in a previous SIW paper [2].Problem:  There is No Directed Ownership Transfer in HLA. Delivery to the intended federate is not addressable and therefore not guaranteed.  When there is more than one object instance in the federation, there is no guarantee as to which federate is going to take ownership of the attribute once it is initialized.   This problem also manifested itself in the air traffic control push method, where if more than one federate replies to the RTI to acquire ownership of a federate’s attributes, the federate has no control over which federate receives the transfer.We have a “work-around” that utilizes the “user tag” field within the OM services.   The user tag identifies the targeted federate.  However, all participating federates must be programmed to only accept ownership of attributes containing their federate ID tag.  This is not a general purpose solution since each federate must be programmed to scrutinize the ID tag.  (As we stated in the GSTB case, we may not even have source code for certain applications.)A similar work-around would be to implement an interaction class within the FOM itself.   However, this is even more unattractive since not only does it require behavior code modification, but it also requires adoption of a specific FOM.Our conclusion is that HLA needs to adopt methodology to control how federates initialize their exposed object attributes.  This method must be general purpose and FOM-neutral.  FOM-neutrality  may be achieved by adhering to the base RTI Interface Specification services.Providing directed attribute ownership implies the ability to specify which federate and instantiated object is receiving or relinquishing an attribute or set of attributes.  Adding directed ownership transfer to the RTI Interface Specification produces a general purpose FOM-neutral method of initializing and controlling HLA federates.  Solving The Infinite Queuing DilemmaLack of a negative acknowledgment (or ownership release rejection on behalf of an attribute-owning federate) caused problems in both the air-traffic control model and GSTB use cases.  This occurs because a federate requesting ownership of an attribute can remain queued indefinitely when that request is not granted.  Even when HLA service 7.9 Attribute Ownership Unavailable is implemented, as it now commonly is, the problem persists during the conditions exposed by the air-traffic simulation.  In this case, a requesting federate fails to receive the attributes because the attributes were transferred to a different federate.  Within these circumstances, the original requesting federate remained queued, waiting for the attributes to arrive.  Eventually, federates waiting for attribute ownership to be transferred to them, should “time-out” the ownership transfer request.  In fact, a “smart” RTI implementation might realize that the waiting federate is still queued for delivery of an attribute and thus decide to send that federate 7.9 Attribute Ownership Unavailable because it realizes that it has already granted ownership to a different federate.In a case when a queried federate refuses to release its attribute(s), there is no way for this federate to tell the RTI that it does not wish to relinquish them.   Hence, all federates will remain waiting either for delivery of the attributes, or for the 7.9 Attribute Ownership Unavailable callback, neither of which will ever arrive.  Currently, during these circumstances the only thing that will remove the requesting federates from the queue is for them to “time-out” the ownership transfer request. Solution 1: Fix it in the Federation.Certainly, when building a federation, developers can agree on additional protocols or time-out conventions to preclude this from happening.   However, there is no FOM-neutral means to establish a “good” time-out value.   Time-out protocols are particularly difficult to implement for event-based, as opposed to time-based, applications.   This is not a satisfactory solution.Solution 2: MOM “work-around” A few less than optimal alternatives are available by using the Management Object Model (MOM) objects [4].The current standard allows federates the ability to subscribe to certain Management Object Model (MOM) objects and to completely monitor all RTI functions calls.  The federates can look for transfers of attribute ownership via the MOM Manager.Federate.Report.ReportServiceInvocation interaction class [4].  Once the federate notes that another federation member has obtained ownership of the attributes that it wished to acquire, then the federate should be able to safely remove the pending ownership transfer from its acquisition-pending queue.   This requires very complicated bookkeeping as well as CPU resources just to find out when an attribute has been given to another federate.An alternative is to have federates use the 7.15 Query Attribute Ownership service call.  This would be called periodically to determine which federate owned the attribute.  If ownership changed, then the federate requesting ownership could de-queue the request to obtain that attribute.  Like the preceding method, this method is too inefficient to be a good long-term solution.The two methods given above would be unnecessary if the RTI implementation were to provide the attribute-requesting federate with the 7.9 Attribute Ownership Unavailable callback whenever the attribute is no longer available, i.e., if it is transferred to an alternate federate or the transfer is refused by the owning federate.   However, there is no means by which refusal can be communicated to the RTI.   Therefore, the RTI will never be able to provide a requesting federate with the 7.9 Attribute Ownership Unavailable callback.  Hence, the requesting federate remains queued forever.The current HLA specification [1] only allows two services by which a federate may end its bid to acquire attributes: 7.14 Confirm Attribute Ownership Acquisition Cancellation, and 7.9 Attribute Ownership Unavailable.    7.14 is provided by the RTI in response to the federate’s attempt to cancel its bid during an attribute “pull” via 7.13 service call.   7.9 is a callback provided by the RTI when the attributes requested cannot be transferred for any reason (to include the attributes having been acquired by another federate, or else the divesting federate has “changed its mind” via a Cancel Negotiated Attribute Ownership Divestiture (7.12)).  However, 7.12 is only applied if the federate is already trying to divest attributes.  It is not a means to refuse a request to divest attributes. The most recent IEEE Draft HLA specification [5] adds a new callback service Request Divestiture Confirmation, but this is a confirmation callback sent to a divesting federate, informing it that interested federate(s) have been found if it wishes to continue to divest attributes(s).3. Proposed Changes of the Standard.We propose only three new services and a slight change in an existing service to solve the dilemmas previously presented.   Table 2 shows the new services (labeled 7.3.1, 7.7.1, and 7.8.1) and the existing service (7.11).    7.3.1, 7.7.1, and 7.8.1 are the directed ownership transfer services that are analogous to their undirected counter parts (7.3, 7.7, and 7.8 seen in Table 1).Table 2.  Recommended HLA ServicesSpec.ProposedHLA Interface (IF) Specification Title  7.3.1 Directed Negotiated Attribute Ownership Divestiture  7.7.1Directed Attribute Ownership Acquisition 7.8.1Directed Attribute Ownership Acquisition If Available7.11Attribute Ownership Release Response *Though the new services are spelled-out (with the word “Directed”) to distinguish them from the current non-directed services, implementation-wise the new services could simply be overloaded versions of the existing (non-directed) services.  The overloaded version would carry the same name as existing services but have additional arguments in their parameter list to direct them to a specific federate. Whether overloading of existing method names or separate method names are used, the results should be transparent to existing software (i.e. they should offer backward compatibility).As their names imply, the new services allow for an argument that specifies the particular federate and object instance for which the acquisition is to be directed.  The RTI will ensure that only that federate receives the usual callback (7.3 Request Attribute Ownership Release, or 7.4 Request Attribute Ownership Assumption).   Note that this will lower bandwidth usage since the message is communicated only to the directed federate.   Furthermore, since only that federate has to process the response decision, this reduces overall exercise computational requirements.We propose a slight rewording of the service 7.11 Attribute Ownership Release Response, specifically, words to the effect of:  “the federate returns a list of attributes that it is willing to release and only those attributes it is willing to release. Therefore, any attributes not included in this list (or the returning of an empty list) imply that the federate is unwilling to relinquish attributes missing from the list.”  This shall communicate to the RTI a federate’s unwillingness to relinquish attribute(s).  The RTI may then generate the proper callback to the requesting federate, ending the “The Infinite Queuing Dilemma” explained in Section 2.2.4. Conclusions, Costs, and Benefits.We have introduced a means by which federates can be initialized or modified during an HLA exercise.  This is a general purpose, FOM-neutral solution that involves several minor changes in the HLA specification.  These changes should eliminate the infinite queuing loop problem that currently exists with attribute ownership transfer.The proposed changes would entail some effort. The modification of the RTI specifications would involve documentation approvals modification and distribution of the revised standard.  Finally, RTI implementations would have be to updated to reflect the new specification.  These processes can be lengthy but would impose no more than the usual standards approval burden on the HLA community.Observations from the GSTB use case determined that initialization works best if federates can be paused.  A FOM-neutral and general purpose method to “pause” federates is therefore necessary.‡  During the pause state, federates shall still be able to internally reflect attributes that are updated by other federates and execute ownership management services.  However, until the pause is ended, they should not “simulate”.   This paper has not adequately addressed HLA’s FOM-neutral “pause” deficiency.Despite the cost involved, the proposed standard changes offer some very attractive benefits:HLA-wide initialization support: Currently, users need to become familiar with a wide variety of user interfaces and initialization files for each HLA federate.  Being able to control simulations via a single method can eliminate this necessity.  A wide variety of simulations could be controlled using directed OM transfer services.  Therefore directed OM offers support for a common simulation initialization and control interface across HLA simulations.Backward compatibility: Because the suggested specification changes do not interfere with current OM use, there should be no backward compatibility problems.  Implementation could be to overload current services; existing HLA applications that implement Ownership Management will not be affected.Costs avoidance: There will be no need to modify simulation source code.Efficiency and high scalability: Currently, Ownership Management services are effectively "broadcast" to all potentially interested federates.  With the recommended change in the specification, the RTI could trigger a callback  in just that federate to which the Ownership Management service is directed.  This will reduce overall network bandwidth.  CPU overhead for all other federates is also reduced since no other federates are informed of the Ownership Management service request.5.  References[1]	U.S. Department of Defense, “High Level Architecture Interface Specification Version 1.3”, 2 April 1998.   HYPERLINK http://www.dmso.mil/ http://hla.dmso.mil/[2]	Sauerborn G. C. et al., “Simulation Initialization and Control”, Proceedings of the Fall 1999 Simulation Interoperability Workshop, Simulation Interoperability Standards Organization, September, 1999. [99S-SIW-106] [3]	Moradi, F. et al., “Object and Ownership Management in Air Traffic Control Simulations”,  Proceedings 3rd IEEE International Workshop on Distributed Interactive Simulation and Real-Time Applications, the Institute of Electrical and Electronics Engineers (IEEE),  Computer Society.  ISBN 0-7695-0459-0. [4]	U.S. Department of Defense, “High Level Architecture Interface Specification Version 1.3”, 2 April 1998, pp 203-230, ‘Management object model (MOM)’.[5]	Simulation Interoperability Standards Committee, IEEE Computer Society, “Draft Standard for Modeling and Simulation (M&S) High Level Architecture (HLA) – Federate Interface Specification”, IEEE P1516.1/D5, 1 April 2000, pp. 145.    HYPERLINK http://www.dmso.mil/ http://www.ieee.org/[6]	U.S. Department of Defense, “High Level Architecture Interface Specification Version 1.2”,  13 August 1997, pp. 13-17.  Author BiographiesGEOFFREY SAUERBORN has gained extensive simulation experience, particularly in platform level modeling and few-on-few war gaming simulations. He has participated in numerous studies for the DoD, analyzed weapon systems performance, sensor performance, and conducted other trade-off studies relating to armored ground systems. He has experience in distributed battlefield simulation design and implementation and has written various distributed environment analysis tools.  For over 15 years, Mr. Sauerborn has served as a mathematician with the U.S. Army Research Laboratory. He has a degree in applied mathematics and a Masters degree in computer science.GARY TAN is an assistant professor at the School of Computing, National University of Singapore. He received his B.Sc (Hons) at the National University of Singapore, and his M.Sc and Ph.D from University of Manchester, U.K. He has been working on parallel and distributed simulation for the past 12 years. He is currently working on HLA/RTI and concentrating on the Ownership Management and Data Distribution Management services.FARSHAD MORADI is a Research Officer at the Swedish Defence Research Establishment (FOA  He holds a Master of Science in Computer Science and Engineering from Chalmers University of Technology, Gothenburg, Sweden. His research interests are in the areas of distributed systems, modeling and simulation and agent technology.RASSUL AYANI is a Professor of computer science at the Department of Teleinformatics, Royal Institute of Technology (KTH), Stockholm, Sweden. Currently, he is a visiting Professor at the School of Computing, the National University of Singapore. His current research interests are in Distributed Systems, HLA, DIS and parallel simulation. Dr Ayani has been working on parallel and distributed simulation for the past ten years and has published over 60 articles in this area. Dr. Ayani is an associate editor of the ACM Transactions on Modeling and Computer Simulation (TOMACS) has served as program chair and program committee member at numerous international conferences and is currently program co-chair of the Eighth International Symposium on Modeling, Analysis and Simulation of Computer and Telecommunication Systems (MASCOTS).GARY MOSS has been a Computer Scientist with the U. S. Army Research Laboratory for 19 years.  Immediately after receiving his BS in Computer Science, Gary began work at ARL developing application software in C language under the UNIX Operating System.  His early work was related to geometric model development and model interrogation in support of Vulnerability/Lethality Analysis.  His particular focus was on 3-D graphics applications and user interfaces.  He devoted 10 years to the Modular UNIX Vulnerability Estimation Suite (MUVES) project at ARL.  MUVES is a comprehensive software architecture for conducting Vulnerability Analysis.   He was brought on board to develop the GUI and later became heavily involved in development of the core packages as well as serving as technical lead on the project.  Toward the end of his involvement with the MUVES project, Gary became involved with web development and created the MUVES web site.  About 2 years ago, Gary transferred to the Simulation Concepts Development Branch (in ARL/ISTD) which develops and integrates tools for synthetic environments.  In his new job, he has been using Java to develop cross-platform and web-enabled applications under Windows NT and UNIX with an emphasis on distributed client/server architectures, web-based GUIs and 3-D graphics for virtual environments.PAUL OXENBERG has been an engineer with the US Army for 23 years.  He has served as a test director at the Aberdeen Test Center, analyst for the Army Materiel Systems Analysis Agency, planner for the Development Test Command and instrumentation engineer for the Program Manager for Instrumentation, Targets and Threat Simulators.  He is currently the Virtual Proving Ground team leader responsible for implementing the GSTB.   He has a BS in Mechanical Engineering and working on a MS in Information Systems.*  - By FOM-neutral we mean the solution will work independent of any particular Federation Object Model (FOM) and will therefore work with every FOM.† - The dagger symbol “†” indicates an HLA service that is a callback.‡  - Note that the HLA Specification through version 1.2 contained this service (called “Request Pause”, et. al).  However, this was a federation-wide pause as opposed to pausing a specific federate. [6]  