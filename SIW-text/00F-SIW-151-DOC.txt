CONCEPTUAL MODELING AND CONCEPTUAL ANALYSIS IN HLACuneyd Firat*Information Technologies Research InstituteTubitak Marmara Research Center41470 Gebze, Kocaeli, TURKIYE(262) 641 23 00cfirat@btae.mam.gov.tr*Currently Reseach Scholar in AI&Simulation Research Group in ECE of University of Arizona1230 E. Speedway Blvd,Tucson, AZ 85721-0104(520) 621-6184 HYPERLINK "mailto:firat@ece.arizona.edu" firat@ece.arizona.eduKeywords:Conceptual modeling, HLA, FEDEP, Requirements analysisABSTRACT: The intent of this paper is to examine and identify Conceptual Modeling in general and also as applied to HLA. Therefore, it consists of two main parts that first part is devoted to elaborate conceptual modelling in general and the other part discusses the conceptual analysis and modeling applications specific to HLA. Since there are different approaches to conceptual modeling, different techniques has been developed like Natural Language Analysis and also diversity of methodologies has emerged like COLOR-X  that make use of these techniques. Many of the different approaches have a common process model. The process model consists of requirements specification in natural language, requirements representation in a more structured way and finally representation as a conceptual model. Some of the techniques try to utilize syntactic and semantic information in construction of conceptual model (CM). This type of information is stored in a dictionary like structure called Lexicon. Since the domain knowledge is an important factor of conceptual modeling, there is a strong need for domain knowledge provider resource or a subject matter expert support. In some methods, Lexicon also contains domain knowledge. As conceptual analysis is a step in HLA-FEDEP, there are several different conceptual models utilised in FEDEP like Conceptual Model of Mission Space (CMMS) and Federation Conceptual Model (FCM). An effort is being devoted to create a CMMS repository so that conceptual analysis is performed on the same basis for different simulations. On the other hand there are efforts to develop tools for conceptual modeling like Conceptual Modeler, which can be seen as a complementary part of tools for FEDEP. The need for automated conceptual analysis and modeling for simulation development process has previously been delivered and knowledge based automation seems to be a suitable approach for automated conceptual modeling in FEDEP. The main advantage of automating conceptual analysis is to formalise and ease conceptual analysis as well as VV&A. IntroductionThe term Conceptual Model (CM) is widely used but unfortunately not interpreted in the same way among the system developers. It is better to start giving the dictionary meaning of the terms concept and conceptual. The dictionary gives the definition of the word concept as “something conceived in the mind” or “an abstract or generic idea generalized from particular instances” and the word conceptual as “of, relating to, or consisting of concepts” [1].There are several different definitions of conceptual modeling in diversity of resources. The simplest and most general definition of CM is the activity of creating abstract representations of some aspects of physical and social systems and their environments in the world around us (e.g. personnel management within an organization, operation of a university library, control of an industrial process) [2]. Although, it can not be bounded to specific area of interest, CM can be defined from information system development point of view as the specification of abstract representation of requirements for the development of an information system in order to understand the real intentions of the users and to highlight the aspects that are important for the final implemented system [3]. The model elements that are subjects of conceptual modeling are the same or are related to the subjects of object modeling; the distinction is that the representations of object models include elements resulting from implementation-dependent decisions. While the conceptual models deal with abstract and generic –design oriented- views, object models deal with concrete and specific –implementation oriented- views [4].System developers must have a clear understanding of the domain, for which the system is developed, to produce the system that is valid and sufficient for the intended use. Since development of an information system starts with the definition of informal requirements specification (usually in natural language) defined by the users, these informal specifications are formalized into the conceptual models so that the system design has a more structured and clarified base. The main motivation behind this activity is that the structure of natural language statements may cause different interpretation, while the formal representation of these statements have inherently one valid interpretation. Therefore, the CM of the domain or system should clearly depict the entities, actions, tasks and interactions of real world.Computer Science deals with mechanizing abstraction, i.e., creating the right model for a problem and devising the appropriate mechanizable techniques to solve it [5]. The term abstraction refers to the activity of modeling  most important and general parts of a system without specific details to make system’s specifications more understandable. Abstraction process provides  traceability of whole system construction process back to  requirements specifications in natural language. Therefore  abstraction of real world’s features in CMs serves as the bridge between informal definition of system specifications and formal system implementation. Conceptual Models can serve for several purposes such as;Provides the mean for the Validation & VerificationImproves understanding when analysing new and old systems Provides a precise and clear tool for the communication between system developers and application domain specialistsProvides the documentation of domain-specific information in a formal waySince it is the blueprint of a system, it makes easier later modifications on the system after development It allows determination of conflicts among different perspectives of requirements for the same system and helps to elicit conflicts Generally, A CM includes objects/classes, attributes, standard relationships, actions/events, constraints, cardinalities of an application domain for which the system is developed. These are the building blocks of a CM which are extracted from  requirements specification. Conceptual Models mostly deals with external capabilities and properties of objects/entities of the domain. This is natural since intrinsic capabilities become important in implementation phase rather than design phase. The CM is iterated several times to transform the requirements and objectives into capabilities completely and truly [6].Sometimes the term CM is replaced with the term Meta Model or Logical Model or Logical View or Domain Model. This is because of the fact that there is no fixed definition or interpretation of CM, therefore different terminologies and designations are usedIt is now firmly believed that the quality of information system solutions will only improve if more effort is devoted to the upstream or early activities in the application development lifecycle. That is where conceptual modelling belongs.HLA-FEDEP is a typical system development that has a conceptual analysis and modeling step. Since it is an architecture defining principles rather than enforcing design details, each contemporary conceptual modeling methodology can potentially be used in FEDEP conceptual analysis. HLA based distributed simulation developers make use of different types of conceptual models that each has its own perspective and resolution for the system they are used.How Is Conceptual Modeling DoneGeneral Approach in C onceptual ModelingThe general approach of most conceptual modeling techniques is similar. It can be summarised  in three steps. The First step is collection and arrangement of informal requirements generally in natural languageThe second step includes the conversion of informal requirements into more formal structures The final step is representation of conceptual model using graphical or other CM description methods (like ad hoc methods or scientific paper method). The CM can be represented as a collection of several different representation schemes (like Static Object Diagram or Dynamic Object Diagram)Since CM should be representing requirements, in some cases, it is paraphrased back to natural language statements for verification and validation of model. Since, there is a need to notations and tools for representing the information included in informal requirements, different notations and tools were developed like formal specification languages and OO representation tools.Techniques For CMThere are several different techniques available for each phase of conceptual modeling. Employment of a technique is strongly dependent on the nature of  application or system. For information oriented applications the Data Flow or OO Modeling Techniques can be used whereas Finite State Machine or Petri Nets are more informative for event oriented systems. The first phase of CM is gathering domain and application information and construction of informal requirements and specifications based on it. This phase is performed iteratively by analysts and generally  requirements are written down in natural language. The main advantage of requirements specification in natural language is the provision of the statement of what is expected from the system to allow validation of the requirements by the users, domain or application community. Requirements gathering produce a list of the wishes. While some of the wishes are real requirements some are just expectations from the system. For example a statement like  “The system is to allow determination of the average length of borrowing for any copy of a book in the library” is a requirement, while a statement like “the system is to be user-friendly” is  an expectation rather than a requirement [7]. A successful requirements gathering phase can be completed by performing team workshops and individual interviews [8], which let the analysts to check the requirements from different perspectives. The second phase of CM process is the activity of conversion from natural language specifications to  formal specifications (i.e. to structured formal languages or representations). The main reason behind this phase is to alleviate identification of concepts and relationships that take place in CM. Some approaches for the phase are as follows [3];Heuristic Approach: In the early dates of the CM efforts, only some heuristics were available to find candidate concepts; looking for nouns would yield entities, examining verbs would lead to relationship discoveries, etc. Even some modern object-oriented approaches still rely on these heuristicsNatural Language Analysis: In order to give more structure to heuristics, Natural Language Analysis was introduced as a method to produce Entity Relationship (ER) Model from a text written in natural language. Although this method does not consists of a fixed sequence of steps, some heuristics are available:Transform the user sentences into elementary sentences, that contain only one main verb.Find common nouns in elementary sentences, because they usually represent an entity.Find transitive verbs in elementary sentences. They usually indicate an action.Identify adjectives that usually represent an attribute of an entity type.Identify adverbs that usually represent an attribute of a relationship.Grammatical Analysis: A more complete approach that based on linguistic grammars, is grammatical analysis. It consists of several steps:Transform the user sentences into the structured sentences, each one consists of two parts:	Main Structure: subject, predicate, direct (i.e. active) object, preposition, indirect (i.e. passive) object Special grammatical elements: adjectives, adverbs, nominal predicates, gerunds, attributive adjunctsMake a list of candidate objects and subjectsMake a list of candidate actionsMake a list of synonyms (two word for the same concept) and rename possible homonyms (one word for one concept)Make a list of nominal predicates (e.g. ‘ a book is a document’)Make a list of gerunds and nominalizations (verbal nouns like ‘paying’ and ‘payment’ respectively)Make a list of genitives (e.g. ‘the value of the order’)The Syntactical Analysis also transforms user sentences into a unifying format, containing subjects, predicate, direct object, and preposition group and leads to recognition of a set of object types, a set of action types, and the involvement and responsibility of object types.Semantic Analysis: The Semantic Analysis is added as an additional step in which the meaning of words is annotated to them. These meanings are found in a supporting Lexicon. This approach tackles the possible problems of homonyms in a more adequate way and also gives more information about concepts like ontological (e.g. ‘to lend’ means ‘to give something temporarily’), structural (e.g. transitive verbs require a subject as well as an object to be specified) and inter-conceptual (e.g. ‘to borrow’ has as a complementary antonym and as a perspective antonym ‘to lend’). It is necessary to have syntactic as well as real world knowledge to fully understand a natural language document and to correctly transform it to conceptual models.Lexicon is seen as the central repository of all terminology and related linguistic elements that is needed to describe communication about the world we live in. It is much more than a list of terms. The lexicon contains the concepts that make up our communications, and it defines the relationships between these concepts. The lexicon repository consists of the following levels of knowledge;Lexical knowledge which consists of semantic networks.Domain-specific knowledge which consists of concepts and relationships between these concepts that are typical for the domain (like a library domain), but their specific meaning can not be found in the lexical knowledge level.Application-specific knowledge which further refines the information available at the domain-specific level. The meaning of the concepts and relationships between the concepts found at this level, is not valid for the domain or company as a whole, but it is specific for the corresponding application , which uses this meaning.The final step of conceptual modeling is the representation phase. Necessary concepts, relations, actions, attributes and states should have been identified in the previous phases. Therefore, this knowledge is to be written down or drawn into the documents in a descriptive form as the CM of the target system. Commonly, there are three approaches for the representation of CM [9] ;Scientific Paper Method: This approach employs the standard construct of a scientific paper or report. It includes the identification of assumptions, limitations, and statement of algorithms in accordance with standard mathematical and technical conventions in addition to the statement of participating entities, events, relationships, attributes and states. The main advantage of this approach is that the user community can easily inspect the model since it is constructed using natural language sentences.Design Accommodation Method: In this approach,  system developer employs descriptive formats which have been selected to support system design as the method to describe CM. Sometimes this approach is taken by a system developer in an attempt to minimise resources required for simulation development. For example, if the Unified Modelling Language (UML) is being used in conjunction with Rationale Rose tools, CM of the systems may be described by UML constructs, Rationale Rose diagrams, and assorted textual descriptions associated with such. A problem with such an approach is that there may be no standard method for capturing assumptions and limitations inherent in the CM. Likewise, portions of the CM for a particular system (such as a sensor on a fighter plane) may be scattered throughout the system design and be very difficult for a Subject Matter Expert (SME) responsible for a conceptual validation review to have confidence that the materials which have been collected from the design description information describe all aspects of the CM which is to be reviewed.Ad hoc method: Ad hoc means for the particular end or case at hand without consideration of wider applications. Hence, the representation of CM has no standard description format in ad hoc methods.  Representation format depends on specific perspectives of the application in consideration. No formal attention normally is given to consistency (or completeness) of conceptual model descriptions using the ad hoc method.Some Current Methodologies for Constructing CMSince the early studies on CM, the efforts are confined to ease the construction of CM by developing rules, method or tools to shorten the gap between natural language requirements representation and conceptual view and hence, enhance the traceability between the conceptual model and the requirements. Chen for instance introduced in [10] eleven rules for transforming structured English sentences into ER-Scheme entries. Some of the current approaches are as follows;The DATA-ID approach [11] employs glossaries as a mean for requirements representation and proposes a process model for establishing these glossaries for a given Universe of Discourse (UoD): In 1st step, the UoD is to be split up into smaller areas (homogenous w.r.t. domain language and/or w.r.t. common tasks). The 2nd step is devoted to collection of ‘requirements documents’ (in any form) for each area. As far as these documents consists of natural language texts these are then simplified in order to enhance the extraction of semantics. The simplification (3rd step) is done using a set of syntactical and heuristic rules. Within the 4th step the sentences are classified by their key meaning, i.e. describing data, an operation or an event. Corresponding to the sentence class, within the 5th step information is entered into glossaries that again are distinguished into data, operation and event glossary.Another important approach is the NIAM (Natural Language Information Analysis Method) conceptual model [11]. In contrast to other CMs, NIAM does not distinguish between entity types and attributes but introduces so-called object types that are connected to each other through roles. NIAM schemes are constructed by analysing natural language sentences. Consider, e.g., the sentence “the student with the name Smith studies the lecture with the title Software Technology”. It allows for the derivation of the object types student, name, lecture, title with the roles student has name, lecture has title and student studies (lecture). Although NIAM lacks a linguistic theoretical foundation, it uses linguistic knowledge in a rather ad hoc fashion and does not incorporate a linguistic knowledge base (or lexicon) into its approach, it has proven to be a very useful graphical modeling technique with good NL-Paraphrasing possibilities [12]. CPL (Conceptual Prototyping Language) and CG (Conceptual Graphs) are the two other linguistic analysis based approach.CPL have a linguistic and logical foundation and is supposed to be used together with a lexicon, but is very hard to apply, due to its high level of formality. It does not cover the entire information needed in a CM, like functional descriptions, and has never passed its preliminary phase. The formal semantics is based on predicate, modal, deontic and temporal logic. Each CPL construct is translated into some combination of these logic. The general form of a CPL specification is as follows [12].Modality: [Tense :] Predication T1, . . . Tn [(id: . . .)]  [(sit: . . .)]Modality = FACTUAL|MUST|NEC|PERMITTense	  =ACTION|DONE|PROSP|PERF|PRETPredication= a relation between n terms T1, . . . TnTi	= a term denotes a (set of) object(s), that play specific rolesid	= identification of the objectssit	= situation in which this CPL specifications is supposed to holdExample: When a company has sold a car to a customer, it has to send a bill to this customer within a week.MUST: ACTION:send(ag=C in company) (go=bill) (rec=C2 in customer) (temp= T2 in time) (id: T2=T1+1*week) (sit: DONE: sell(ag=C in company) (go=car) (rec=C2 in customer) (temp=T1 in time))Although the CGs are designed for knowledge representation they have been proposed to be used as linguistically based method as well. CGs are a system of logic designed to map to and from NL in a simple and direct manner. They combine extended quantifiers and type labels in a readable graphic notation. The CG approach is mainly used in the AI field. CGs are very powerful, which might be a drawback as well, because of the huge amount of primitives and have shown to be useful as a representation language for the contents of a lexicon [12].The KISS method utilizes the grammatical analysis based approach [3]. There are grammatical meta structures in the Grammalizer of the method that allows the analysis of the requirements from grammatical point. The subjects, objects and actions, synonyms, predicates, gerunds, nominalizations and genitives are extracted and listed from the requirements statement using the Grammalizer engine. These lists are combined into descriptions of objects, actions, functions, gerunds and subjects as shown in Table 1.Table 1. Final lists of grammatical analysis in KISS method.Another method RADD-NLI extracts requirements from questions expressed in natural language [11]. According to the user’s answers (also expressed in NL) the conceptual scheme is constructed.The COLOR-X (Conceptual Linguistically Based Object-Oriented Representation Language for Information and Communication Systems) is again one of the linguistic based CM methodology [12]. In COLOR-X, the formal CPL is combined with existing graphical modeling techniques like OMT (Object Model Template). The main objective of the COLOR-X methodology is the generation of object-oriented programming code from Linguistic Based CM Techniques, which brings CMs closer to programming code. In addition, by using a modeling technique based on linguistic notions, the gap between requirements document in NL and CMs are narrowed. The COLOR-X consists of two types of models, which are founded by CPL specifications:COLOR-X Static Object Model (CSOM): which shows objects and classes of objects, the relationships between them, and static constraints. This model is the central model because it defines the overall structure of the system to be built. The CSOM consists of; classes, objects, relationships (two types of relationships: intra state of affair and standard), and constraints.COLOR-X Event Model (CEM): which shows the dynamic aspects of an information and a communication system, in which all the occurring events and their dynamic and deontic constraints and restrictions are listed and ordered in time. CEM consists of: event boxes start and final nodes, actual occurrence of event, no occurrence of event at allThe Lexicon is an important part of the some of the techniques (especially effectively used in COLOR-X) discussed above One of the well-known software development methodology of today is the Object Oriented development. There are different methods of OO approach like UML, Booch, Code & Yourdon etc. But, the common view of the well known and widely used OO methodologies is to start the analysis phase of the development activity by constructing CM of target system. There are three different models generated within the conceptual modeling phase of the OO-Method, which is an OO methodology, that are namely; the Object Model, the Dynamic Model, and the Functional Model [13].The Object Model is represented by means of a Class Configuration Diagram (CCD), a graphic model where the system classes are declared, including their attributes and services (methods). Aggregation and inheritance hierarchies are also graphically depicted representing class relationships. Additionally agents are introduced to specify who could activate each class service. A class is represented by a rectangle with three areas;A header with the class nameA static component where attributes are declaredA dynamic component where services are introduced, distinguishing among new and destroy events, and among private and share events.In this model, shared events are connected with solid lines, whereas the client classes (agents) of a given service are represented by dotted lines joining every potential client class with the corresponding server class. The aggregation and inheritance relationships are also shown in CCD (see Figure 1 and Figure 2) [13].Figure 1.Aggregation RelationshipFigure 2. Inheritance RelationshipThe Dynamic Model is constructed to identify the life cycles and interactions of the objects within a system. Object life cycles are depicted using the State Transition Diagrams (STD) and the interobject relationships are shown using the Object Interaction Diagram (OID). An example STD of Reader object in a usual library system is shown in Figure 3 [13]Figure 3. STD for a ReaderWhen an object does not exist, a blank circle represents this state of non-existence, and will be the source of initial transition labelled by the corresponding new event. A bull’s eye is used to represent the post-mortem state. Transitions represent valid changes of state that can be constrained by introducing conditions. They follow the syntax below:Event | Action| Transaction [if precondition][when control condition]where precondition is a condition defined on the object attributes that must hold for a service to occur and a control condition that avoids the possible non-determinism for a given action.The OID has two kinds of basic interactions:Triggers, which are services of objects which are activated in an automated way when a condition is satisfied by an object of the same or another class.Global Interactions, which are interactions involving services of different objectsFigure 4. Trigger RelationshipFigure 5. Global InteractionAfter the declaration of Object Model, Life Cycle and Interobject Relations the remaining part to complete the CM is Functional Model. Functional model depicts state change of objects by changing values of relevant attributes after occurrence of an event. Value of an attribute is changed according to the action performed, the involved event arguments and the current object state. Functional model allows making this changes in an interactive way. An example depicting the change on the book_number attribute of the reader class is shown in Figure 6 [13]Figure 6. Push-pop attribute book_number of the reader classAnother very useful OO methodology is Unified Modelling Language (UML) in which CM is implemented during analysis phase. In UML, a CM is illustrated with a set of static structure diagrams in which no operations are defined [14]. It may show;ConceptsAssociations between conceptsAttributes of conceptsThere are two strategies of UML in identifying  concepts;Make the list of concept categories and than find the concepts related to the categoriesIdentify the noun and noun-phrases in textual descriptions of a problem domain and consider them as candidate concepts or attributes.An example of simple UML CM for the domain of stores and sales is shown in Figure 8 [14].Figure 8. A partial Conceptual Model representing the domain of the stores and sales The numbers at each end of the line indicate multiplicity. The methods excerpted above are all conceived and cast to construct and represent the CM in different ways, views and approaches. Obviously, there are other conceptual modeling methods and approaches, which are not mentioned here.CONCEPTUAL MODELING IN HLAHLA is the innovative high level frame for distributed interactive simulation systems. A distributed simulation, called as Federation in HLA, is composed based on user needs and objectives set by the user community while objectives drives narration of the requirements. Then analysis starts with performance of Conceptual Analysis of the required system. This step includes construction of  CM of the target simulation based on narrated requirements. After conceptual analysis, a federation is designed based on the CM and the scenario data. The designed federation is developed and executed during the consequent steps. The depicted process is known as the Federation Development and Execution Process (FEDEP) of HLA. Conceptual analysis and modeling in HLA is a typical and specific application of conceptual modeling paradigm excerpted in the first part. Therefore, every technique and methodology discussed are possible candidates for performing conceptual analysis and constructing different types of conceptual models explained below.The purpose and advantages of utilising CMs was profoundly explained throughout the previous section. Therefore the importance of performing conceptual analysis in FEDEP will not be elaborated again. But the most important functionality of the CMs in FEDEP is their nature of being the bridge between the requirements and the implementation phases of a simulation system development process (SDP).Conceptual Model for the purpose of simulation development is defined as “An abstract or generic view of a modeling and simulation problem space generalised from instances of related experience and doctrine” [4]. There are several CM types utilised for SDP which are Conceptual Model of Mission Space (CMMS), Federation Conceptual Model (FCM), Simulation Conceptual Model (SCM), Conceptual Model of the User Space (CMUS) and Conceptual Model of the Synthetic Representations (CMSR). FCM and SCM are designated as primary conceptual models whereas CMMS, CMUS and CMSR are referred as supporting conceptual models. CMs of standard operations, missions, tasks etc. are derived and stored in a repository called Conceptual Model of Mission Space (CMMS) . These are ready-to-use CM patterns that would be utilised when designing the CM of a specific simulation. By CMUS the user requirements are referred. In Defence area the CMUS is represented and documented by System/Subsystem Specifications (SSS), Interface Requirements Specifications (IRS), and Software Requirements Specifications (SRS) [4].Simulation designers must have a clear understanding of the domain to be simulated in order to produce a model or simulation that is valid and sufficient for intended purpose or use [15]. The CMMS is a first abstraction of the real world and serves as an authoritative knowledge source for simulation development capturing the basic information about important entities involved in any mission and their key actions and interactions [6]. CMMS is developed based on a well-defined CMUS and composed of descriptions of military operations, which are independent of any specific simulation implementation. The significance of a well-defined CMUS is that it defines the scope, fidelity and resolution requirements for the CMMS. Similarly CMSR provides necessary information of scope, fidelity and resolution to develop CMMS. CMSR is used to include the algorithms, formulas and other contributions from scientific disciplines that supplement mission space model descriptions in CMMS, in providing a means replicating some aspects of the military environment, e.g., physics, meteorology, psychology.The principal CMs of a SDP are Federation Conceptual Model and Simulation Conceptual Model. General Characteristics of these models can be given as in the following [4];These models are highly dependent upon the information contained in the supporting conceptual models, including CMUS, CMMS and CMSRThese models differ from supporting conceptual models in that significant analysis and integration of the supporting information must be performed and documented graphically, textually, or both, including resolution of inconsistencies between modelsIf a development effort includes an FCM, then the information contained in it and related SCM must be consistent to the extent that there is overlap, e.g. common interactions. If a development effort contains more than one FCM, then all FCMs must be similarly consistent.A federation is conceived as a means of achieving M&S objectives utilising multiple simulations. After obtaining or constructing the appropriate conceptual models including supporting CMs and SCM, the FCM is developed which can be defined as [4];A product of conceptual analysis which conceptually represents the intended problem space based on an interpretation of user needs, federation objectives, and defined environment (of the federation)An implementation independent (federation dependent) representation (of the federation) serving as a vehicle for transforming objectives into functional and behavioural capabilities, and providing crucial traceability between the federation objectives (and requirements) and the design implementation.The SCM refers to the conceptual view of a single simulation might be included in and leads the FCM is defined as [4];A product of conceptual analysis which represents the intended problem space based on  an interpretation of user needs, simulation objectives, and the defined environment of the simulationAn implementation-independent, simulation dependent representation of the simulation serving as a vehicle for transforming objectives (capability specifications) into functional and behavioural capabilities, and providing crucial traceability between the simulation objectives and requirements and the design implementation.The information in a SCM might include assumptions, entities, algorithms, relationships, and data. Therefore, having an SCM constructed based on a requirements set will answer two questions which are “What it is to be done?” and “How it is to be done?”. The answer given to the “What it is to be done?” question will identify the entities, actions, tasks, processes, interactions etc. On the other hand, the answer given to the question “How it is to be done?” will identify the approaches, algorithms, data, constraints etc.An SCM addresses the simulation context, simulation elements, and the simulation concept. The relationships among these is illustrated by Figure 9 and explained below [16].Figure 9. Simulation Conceptual ModelingSimulation Context provides authoritative information about the domain which the simulation is to address. It generally contains boundaries on how the simulation will be built. The context has pointers and references to resources that define behaviors and processes for the things that will be represented within the simulation.A Simulation Element consists of the information describing concepts for an entity, a composite or collection of entities, or process, which is represented within a simulation. It also includes assumptions, algorithms, relationships (especially interactions with other things within the simulation), data, etc. that identify and describe that item’s possible states, tasks, events, behavior/performance, parameters and attributes etc. A simulation element can address a complete system (such as a missile or radar), a subsystem (such as antenna of a radar), an element within a subsystem ( such as a circuit within a radar transmitter), or even a fundamental item (such as an atom). It can also address composites of systems (such as a ship with its collection of sensors, weapons, etc.). A simulation element can also address a process such as environmental effects on sensor performance.Simulation Concept describes the simulation developer’s concept for the entire simulation application ( all the federates and other pieces in a distributed simulation, everything that comprises the simulation) and explains how the simulation developer expects to build  a simulation that can fully satisfy user defined requirements. Simulation concept obeys the constraints and conditions established by simulation context. For example, if a simulation is concerned with the realistic representation of a missile flight, then laws of physics and principles of aerodynamics are part of the simulation context and, making the simulation concept accommodate conservation of momentum, etc. Additionally, the simulation concept includes simulation elements, i.e. the things represented in the simulation. The simulation concept is the total of all simulation elements, how they interact with one another, and includes all additional information needed to explain how the simulation will satisfy its objectives. A primary function of the simulation concept is to serve as the mechanism to transform simulation requirements into detailed simulation specifications (and associated simulation design ) which fully satisfy the requirements. The conceptual model for a simulation has to address both simulation space (the simulation’s operational and functional capability) and mission space (the representational capability of the simulation).There are Federation Requirements and Scenario in FEDEP to support the generation of Federation Conceptual Model. They are equivalent to simulation context since they set the conditions and constraints for the federation to be developed. On the other hand, the simulation concept is represented as Federation Conceptual Model in FEDEP [16] in which simulation elements are equivalent to entities or federates included in the federation. A simulation conceptual model provides the generic capability that can be applied to a number of applications. The scenario is one of the primary mechanisms that guides extraction  of information from the SCM for the FCM [6].The conceptual modeling efforts within SDP are for setting up the bridge between the requirements analysis and systems design. Although FCM and SCM are independent on the implementation of any specific simulation system they are dependent on the paradigm like functional or object oriented and layered or modular that the simulation development efforts are also based on [4].How a Simulation Conceptual Model is Developed As the simulation conceptual model is a bridge between the requirements specification and simulation development stage, the prerequisite for getting started to conceptual model development is the establishment of the objectives and therefore requirements specifications. However, conceptual model development may even begin prior to completion of simulation requirements. The following steps identifies one of the approaches to development cycle which is proposed in [16]. These steps are derivative of general conceptual model development process model discussed in the first part of the paper.The first step in conceptual model development is to collect authoritative information about intended application domain that will comprise simulation context. Development of the simulation concept and collection of authoritative information for the simulation context is likely to occur iteratively as the entities and processes to be represented in the simulation are clearly defined. Authoritative descriptions of military activities can be used in the simulation context when appropriate for a simulation’s intended application, as can the laws of physics and similar principles. This step sometimes needs Subject Matter Expert (SME) support when the authoritative information resources lack. The second step in conceptual model development is to identify the entities and processes that must be represented in the simulation to accomplish its objectives. This process is a fundamental in conceptual model development. It is here that the basic decisions are made about the level of detail and aggregation that is appropriate to support simulation requirements. These are the decisions that determine whether a system (such as a radar) will be represented as a single entity, as a composite of subsystem entities (such as an antenna and receiver), or as a composite of composites of ever smaller entities ( to whatever level of detail is needed for the purpose of the simulation).The third step is the development of simulation elements. A simulation element is needed for each entity or process identified in the second step above. It is here that decisions are made initially about the level of accuracy, precision, resolution, etc. needed in the representation of the entity or process. The final step in simulation conceptual model development is to identify relationships among simulation element, to ensure that constraints and boundary conditions imposed by the simulation context are accommodated, and that they articulate the simulation concept.These steps will be iterated often in most developments.An FCM specifies a list of objects required for the federation under development and their fidelity requirements, operations, associations and interactions, components and attributes. The Federation Object Model (FOM), which is implementation dependent model of a Federation, represents these object requirements in greater detail than the FCM. The FCM is conceptual in that it uses “black boxes” for its entities. This means that if a particular exercise mission requires a Patriot Air Defence System, the FCM adds a box (object/entity) called Patriot and inherits all of its mission capabilities and interactions from requirements and/or CMMS or another authoritative information source. At this point, the Federation developer is not required to know any of the internal features and properties of Patriot models if it was not stated in the requirements specifications. In fact, the FCM might simply want to specify a generic Air Defence System and allow the selection of which one to occur later –FAAD, Patriot, Hawk etc.-. This is the modeler’s option, but just be sure not put anything inside these black boxes yet. Armor, communications, guns, missiles, countermeasures all are described by their external attributes and capabilities for use in the FCM [6]. Figure 10 depicts the relationship between CMMS, FCM and FOM.The Need For Supporting Tools in Federation Conceptual ModelingIt is strongly recommended that a simulation or at least a process modeling tool be used to assist in developing  FCM so that the resulting federation can be evaluated more rigorously and completely than if it were a paper model. It is easier to change a tool based FCM as requirements and plans change [6]. Early experiences with HLA have brought to focus a need for automated tools for creating, executing and maintainingFigure 10. Relationships among the three key internal pre-implementation  models HLA simulations and federations [17]. One of the planned tools is for Conceptual analysis which is called as “Conceptual Analysis/Federation Design Support Tool”. The primary purpose of this tool is to allow federation developers to construct a conceptual view of objects and interactions that must be supported by the federation and then form a federation, which supports the conceptual analysis [17]. One of the initiatives of this tool is called Conceptual Modeler, which provides the necessary functionality to construct and/or record the static and dynamic portions of the conceptual object model to be studied  [18]. It presents an interface to the CM using the UML symbology. Its key features include;Support for creation and editing of conceptual modelsSupport distributed simulation needs for annotating design features crucial to validationAllows capturing known design requirements and/or constraints, such as matching object classes to specific simulations, security requirements, etc., directly within the conceptual modelAs one part of conceptual modeling is knowledge intensive effort, a knowledge-based automation seems feasible for generation of conceptual model. The following type of knowledge might be included in knowledge base of a potential knowledge based conceptual modelling tool;-Lexical knowledge that includes syntactical knowledge and semantic knowledge of  the domain to be represented.-Methodology knowledge that includes modeling methodology rules for checking the generated model and even generate the model itself.The main advantage of a knowledge-based automation will be having a formalised means to conceptual modelling and getting already verified conceptual models.CONCLUSIONThe intent of this paper is to discuss and examine conceptual modeling in general and also as applied to HLA. There are different approaches to conceptual modeling. Most of the different approaches have a common process model. Some of the techniques try to utilize syntactic and semantic information in construction of CM. This type of information is stored in a dictionary like structure called as Lexicon. Since the domain knowledge has an important factor in conceptual modeling, there is a need for domain knowledge provider resource or a subject matter expert support. In some methods, Lexicon also contains domain knowledge. As seen in the part of the paper that describes conceptual analysis in HLA-FEDEP, it is a typical information system conceptual modeling application. Therefore every contemporary conceptual modeling technique and methodology can potentially be used in FEDEP conceptual analysis. Since conceptual modeling is a knowledge intensive effort it can be deduced knowledge based automation is best answer for automated conceptual analysis tool development efforts.REFERENCES[1] Merriam-Webster’s Collegiate Dictionary, Tenth Edition, Merriam-Webster, Incorporated, 1994[2]   http://yeroos.qant.ucl.ac.be/dummies/concmod.html [3] Burg, J.F.M., van de Riet, R.P., “Analyzing Informal Requirements Specifications: A First Step Towards Conceptual Modeling”, RiBu 96[4] Haddix F.F., “Mission Space, Federation, and Other Conceptual Models”, 98 SIW[5] Aho, A., Ullman, J., “Foundations of Computer Science”,  W.H. Freeman and Company, 1992[6] Lewis R. O., Coe G.Q., “A Comparison Between The CMMS and The Conceptual Model Of The Federation”, Spring 97 SIW[7] Berztiss A.T., “Natural-Language Based Development Of Information Systems”, Data & Knowledge Engineering 23, Elsevier Science B.V., 1997, pp.47-57[8] Nissen H.W., Jeusfeld M.A., Jarke M., Zemanek G.V., Huber H., “Managing Multiple Requirements Perspectives with Metamodels”, IEEE Software, March 96, pp.37[9] Pace D. K., “Impact of Simulation Description on Conceptual Validation”, 98 Fall SIW[10] Chen P. P., “English Sentence Structure and Entity Relationship Diagrams”, International Journal of Information Sciences, Vol.29, 1983, pp. 127-14[11] Kop C., Mayr H. C., “ Conceptual Predesign: Bridging the Gap Between Requirements and Conceptual Design” ICRE’98[12] Burg, J.F.M., van de Riet, R.P., “The Impact of Linguistics on Conceptual Models: Consistency and Understandability”, NLDB95[13] Pastor O., Insfran E., Pelechano V., Romero J., Merseguer J., “OO-METHOD: An OO Software Production Environment Combining Conventional and Formal Methods”, CAISE 97[14] Larman C., “Applying UML and Patterns: an introduction to object-oriented analysis and design”, Prentice Hall, Inc., NJ,1998, pp.87,88[15] Risner S., Porter K., Lacy L., O’Brien L., Kollmorgen G, “Conceptual Moedling in the joint Simulation System (JSIMS)”, Fall98 SIW[16] Pace D. K., “Development and Documentation of a Simulation Conceptual Model”, Fall  99 SIW[17] Hunt K., Dahmann J., Lutz R., Sheehan J., “Planning For The Evolution Of Automated Tools In HLA”, Spring 97 SIW [18] Hunt K., “Exploiting the Relationships between CMMS Object Models and Hla Object Models to Facilitate Federation Design”, 98 Spring SIWAuthor BiographyCUNEYD FIRAT is researcher in Information Technologies Research Institute of TUBITAK-Marmara Research Center and Ph.D. student in Institute of Sciences and Technology in University of Sakarya, Turkiye. His research interests include software development processes, conceptual modeling especially as applied in HLA conceptual analysis, DEVS modeling and simulation methodology, verification and validation of simulation models and AI applications in simulation domain. He is currently visiting scholar in AI & Simulation Research Group in Electrical & Computer Engineering Department of University of Arizona.PAGE  11 EMBED PowerPoint.Slide.8  Min:MaxMin:MaxMin:MaxMin:MaxClassCClassBClassAconditionnew/destroySpecializationSpecialized ClassSpecialized ClassBaseClassGeneralizationBase2ClassBase1 ClassGeneralized Classself::(condition)event1Class1old::(condition)event2Class2class::(condition)event3Class3Reader1LIB:new_readerLIB:loan LIB:loan ıf book_count<10 LIB:return when book_count>1 LIB:return_when  book_count=0 LIB:destroy_reader ıf book_count=0Reader0GI idGI idevent1Class1event2Class2event3Class3