Multi SecuritySecurity Level  Simulation Environments Through Persistent Access ControlKenneth L. SullivanDr. Paul SchneckVeridian, Inc.10560 Arrowhead DriveFairfax, VA 22030703-277-1797, 703-575-3135 HYPERLINK mailto:ken.sullivan@veridian.com ken.sullivan@veridian.com,  HYPERLINK mailto:paul.schneck@vereidian.com paul.schneck@veridian.com Keywords:Coalition simulations, HLA, Multi Security Level, C4I interoperabilityABSTRACT: Persistent Access Control is a recently patented technology that appears to offers a mechanism to permit the operation of independent multiple levels of security access on a single simulation LAN. Persistent Access ControlThis technology controls destination access as well as subsequent allowable functions for all data sent.  This would appear is particularly relevant to coalition simulations where not all participants have the same set of security credentialsaccesses.  The mechanism can be implemented in COTS PC hardware and is particularly well suited for the HLA RTI simulation type environments.  This paper lays out the design approach and concept of operation for HLA simulation environments and provides several examples of potential implementations.1. IntroductionOne of the most vexing problems in distributed interoperable interactive??? simulation development is that of efficient distribution of simulation data among diverse groups that have varying security authorizations and “need to know” validations.  Current approaches to this problem, such as JSIMS, have all centered on establishing security domain boundaries and then inserting human review and electronic guards to check all simulation information transiting the boundaries.  While this approach is feasible, it induces significant latency in the transiting of security from one layer to another, presents simulation synchronization problems, and requires a significant investment in trusted guard hardware and software. In addition, it requires that domains be made sufficiently small that they enclose only one level of security—an operational, if not logistical, impediment.A recently patented security technology designed for other information assurance applications, however, appears to be very relevant for HLA simulation environments.  This technology, called Persistent Access Control (PAC) or trade named VeriFIDES, operates in a paradigm fashion similar to that of the HLA RTI and could be implemented in simulations through a fairly simple change to the RTI processing infrastructure and FOM structure for each simulation.This paper will first describe the PAC concept and some of the implementation details and then explore some HLA simulation applications, with particular emphasis on coalition simulation exercises.2. Persistent Access Control (PAC) ConceptThe VeriFIDES PAC framework is based on a combination of trusted hardware and a low-overhead “license management” mechanism that ensures persistent control of digital data.  The system allows the open distribution of data (“content”) in a protected (encrypted) form. Users may be sent data by a distributor (the “push” model) or may retrieve them from a server (the “pull” model) (see Fig. 1). The transmission medium is irrelevant. In order to access the data an electronic license must be present. The license contains the information necessary to determine whether or not an access is permitted, and as well as the information needed to decrypt the data. The “access control mechanism”, in the user’s PC or consumer-electronics device, controls all input/output operations and, using the information in the license, allows or disallows specific accesses. Fig. 1. Operational ConceptTransactions within a simulation environment or between simulations focus on access control. In these cases the federate content owner would likely distribute data and licenses to other specific federates. If the license permits, derivative products could be redistributed by the receiving federates to others. These secondary recipients would each need to obtain a license—either from the originator or from the creator of the derivative product, depending on the license arrangements made between the originator and the redistributor.Executable software that is aware of the access control mechanism can interrogate the mechanism to determine whether or not a feature is allowed by the license controlling the program. This enables distribution of multiple security levels of software conveniently within a single package.3. Implementation Overview The objective of the PAC system is to retain control of data for the federate data owner while allowing other federates freedom to utilize data to which they are granted access. The basic concept is to secure data by encryption whenever they are external to the trusted hardware system. When data are within the system they may be decrypted and made available for processing or reviewing by the user (as the owner authorizes). The system intercedes to ensure that no data may be released (output) unless the federate user is authorized to do so. The mechanism for capturing the federate data owner’s limits and delivering them to the user’s system is the electronic license. Without a license a user cannot access the data—the key is not available.3.1 EncryptionProtected FOM data are encrypted whenever they are outside the trusted hardware system. The federate data owner selects a secret key and an encryption algorithm. The secret key will not be exposed to the user. It will be used to decrypt the data only within the trusted hardware. Because protected data are encrypted they may be openly transmitted and distributed.The federate data owner encrypts the data elements that are to be protected (see Fig. 2). A header record is prefixed to the RTI data. The header record contains an identifier denoting the file’s protected status. The unencrypted name of the file, the structure of the file—which parts are plaintext and which parts are protected (encrypted), and an encrypted hash value (of the file) that is used to bind the header to the encrypted file. This binding ensures that the only the valid header can be associated with the encrypted file.A file is recognized as containing protected data when a header record precedes it. Removal of the header record will prevent the system from recognizing a file as protected. Although this may appear to be vulnerability it is not. Without a header the access mechanism will not recognize the data as protected and will not decrypt the file. Only the federate data owner can digitally sign and bind a header to a protected file that will match a license created by the data owner and containing the secret key to decrypt the protected file. Fig. 2. Data File Structure3.2 Electronic LicenseThe electronic license contains the name of the file, a list of federate access permissions, and the secret key needed to decipher the encrypted file (see Figure 3). One or more of the access permissions may require that the license be signed by the data owner or by other parties. The license may also contain or require other licenses or digital certificates that need to be obtained from other federates. The license may also require the presence of a token, e.g., a specific Fortezza card.The license is encrypted and then prefixed with the plaintext file name. Doing so allows the system rapidly to locate a license. The plaintext name is used only to improve performance. The name within the encrypted license is used to verify the identity of the license. The key used by the data owner to encrypt the electronic license is described later.Fig 3. License Structure3.3 Trusted Hardware SystemSecure hardware includes devices with embedded secret keys allowing a service provider to require a recipient to authenticate himself before receiving data. That kind of hardware is largely described in the literature [3,4]. A low-cost solution can be achieved by the use of e.g., smart cards  [5] in which the secret key may be stored, providing mobility to users.The security of the system depends on the hardware to retain protected data within the system unless the data owner (as expressed in one of the permissions granted in the online license) permits release. To simplify this exposition, the ubiquitous personal computer is used as the frame of reference. A subset of this approach would be used in consumer electronic devices. Each PC will contain a unique private key stored securely and an associated public key. The public key is used to encrypt electronic licenses intended for the PC. The trusted hardware system also protects the cryptographic variables—the PC’s private key and any secret keys used to decrypt content--they are never made available to the user. To simplify this exposition, the ubiquitous personal computer is used as the frame of reference. A subset of this approach would be used in consumer electronic devices. 4. Access Control MechanismThe firmware (in the case of the use of a BIOS) or the drivers and the I/O elements of the OS that provides basic services to application programs are effectively replaced by new modules including an access control mechanism that mediates all requests for input or output (see Figure 4). Any request for an input or output operation from a federate application is handled by the new I/O routines including the access control mechanism. Therefore, any attempt directly to execute input or output operations results in the execution of the access control mechanism.Implementing this would depend on establishing of a secure environment (e.g., memory protection, privileged instruction limitations, etc.). and would be based on a trusted operating system (at least with respect to I/O routines). Additionally, each new operating system release (and each different operating system) would require coordination and verification of the access control software.Fig. 4. Access Control MechanismA alternative preferred approach, that is independent of the operating system, is for the access mechanism to be part of a "hypervisor", an operating system-like program that creates a virtual system image (in the same fashion as the operating system creates a virtual memory image for application programs). The hypervisor is interposed between the operating system and the hardware--and is unseen by the operating system (see Figure 5). The resulting virtual system appears to function as the actual system except that all input or output operations and all privileged operations are trapped and analyzed by the hypervisor. Any attempt directly to execute input or output operations results in control being passed to the access control mechanism where the restrictions specified in the electronic license are enforced. The specific actions taken by the access control mechanism are described below. Because the access mechanism has no awareness of application tasks it must treat the entire computer as if only one task were running. This means that the access restrictions imposed on any active task are applied to each of the tasks in the system. When a trusted, multi-thread OS is available, true MLS can be achieved with this approach.Fig. 5. Hypervisor Access Control MechanismIn either approach the access control mechanism, although implemented in software, is protected by hardware and is part of the trusted hardware system. The access control mechanism ensures that protected data are accessed only as provided in the electronic license.  The access control mechanism will be small and can be made secure..5. Trusted hardware5.1	Tamper-Detecting EnclosureThe system as described so far is vulnerable to physical intrusion. A determined thief can obtain the plaintext version of a file by capturing the bit stream as it is transferred to memory. Alternately, the thief could reset the system and then start a program that would capture the contents of RAM. Protection from this class of attack requires barring entry to the system.A tamper-detecting enclosure provides a signal shortly before an attacker can gain physical access to the system. When tampering is detected, the private key, secret keys, and plaintext data are destroyed.  The tamper–detecting enclosure is small and could be a processor case lock or a copper mesh envelope around the critical processing area of circuit board. 5.2 Non-Volatile StorageTo protect against a “sledge hammer attack” where the PC might be destroyed in order to gain unfettered access to the hard disk, all protected data (as indicated by the system-wide flag) are encrypted before writing and decrypted upon reading. Writing or reading internal storage is treated as a special case of an output or input operation, allowing data accesses to continue to be controlled by any license restrictions.5.3 Peripheral EquipmentWhenever data leave the system (i.e., exit the tamper-detecting case) they must be protected. In some cases an electronic license may allow plaintext data to be output, however we will describe the situation where protection is required. Data are encrypted prior to being sent to an output device.If the device is a transducer producing a physical product, such as a printer, display, or audio system, the data must be protected up to the time they are converted into the end product. This requires encryption for transmission as well as protection within the peripheral.HLA RTI Simulation  ApplicationsThe application of VeriFIDES PAC technology to an HLA RTI simulation environment is fairly straightforward and would take place in the simulation preparation phase.  These will be addressed in terms of security environment, FOM setup, hardware constraints, and runtime concept of operations.Security EnvironmentOpportunity to put in statement that this provides mandatory ORCON capability.In all exercise and simulation environment where there is classified information involved, there is a Senior Security Official who must determine that the classified information in the environment is properly protected.  This involves verifying the security credentials of the participants, the facilities and automated information systems security, and, when multiple levels of security are involved, and that the procedures for distribution of classified information and downgrading and sanitization rules are established and secure.  VeriFIDES through its ability to enable Mandatory Originator Controlled (ORCON) instructions makes this very easy to confirm.In a VeriFIDES PAC environment, this would take place in the context of “licensing” the outputs of the various federates to the permissions and processing of the other federates.  Since most exercises usually deal with only two or three security levels and a limited number of special compartments, this would require relatively little time by the security administrator to review the FOM objects and attributes proposed by each federate for publishing.  Comparing these against the security authorizations and guidelines for each federate’s participants, the security administrator would then issue licenses to each recipient from a controlled workstation for just the simulation data they would be allowed to receive.  The administrator would also issue the appropriate encryption keys to be used by the publishing federates that would correspond with the subscriber licenses.Once the FOM and simulation environment are set up, the security administrator would then run a security test with fully cleared participants to ensure that only the appropriate FOM data could be received by the subscribers.  They would also check to ensure that the subscriber processing and subsequent publishing constraints were met.FOM SetupThe FOM Setup would not need to change except for the fact that all federates would need to create their SOMs and federate processes under the VeriFIDES PAC protected processes.  As the FOM objects are entered into the system, they would be stored as encrypted files that would trigger encryption/ decryption processes and the necessary header generation and internal security checks.  The users and participants would be unaware that the process was running except for machine logon that would be different from a personal computer.The RTI would require a modification to accommodate the instantiation of the license and data headers.  These however, should not be significant.  The license data and encryption keys would all be transmitted prior to the exercise and be resident on all subscription federates.  The header to accompany the published data, since there would be no need for extensive human readable text, would be only the few bytes necessary to identify the simulation object, the encryption key, and the authorized federate subscriber.Hardware ConstraintsAll digital computer information unless protected by encryption or rigid physical access limitations is susceptible to theft or compromise by a determined and skilled attacker.  To prevent this theft or compromise, the VeriFIDES PAC employs both encryption and hardware protection.  When data that requires protection be is created, it is encrypted and remains encrypted at all times except within the protected hardware when opened by the creator or another authorized user.  This includes storage, transmission, and storage at the destination computer.  In this manner, only authorized recipients, who could include specific federates or simulation facilities, will ever be allowed open the files.The hardware that is necessary to enforce the physical access restrictions is very small.  It consists of a processor case lock or copper mesh envelope to protect the critical memory area and bus of the processor.  The net effect of both devicespurpose is to signal the processor that an unauthorized access is in progress.  When detected, a signal is sent to the encryption files randomly rewriting the private key and any secret keys are overwritten with random numbers them multiple times in less than a microsecond.  This effectively renders all the keys secure.the protected data in the machine unable to decrypt.  In this manner, the protection of the classified data is protected even if the machine is attacked. 7.  Coalition Simulation ApplicationsSimulation exercises involving coalition forces are a very appropriate simulationnatural environment for this capability.  By considering each participant’s security authorizations and need-to-know, they can be licensed to receive just the level of information each is authorized.  (This assumes of course that the FOM has been set up to reflect publish and allow subscription to the appropriate level of information).  For example, the sensor or van generating classified reporting in the simulation might be visible in the synthetic environment to all participants, but the classified products from the sensor or van could only be subscribed to by the federates operating at the necessary level of security. (See figure 6).Fig. 6.  VeriFIDES enabled Coalition Simulation Environment With the VeriFIDES PAC security in place, the simulation can run with every federate’s licenses permitting them it’s members to see just their authorized information, even though all federates are connected to the same LAN or WAN. 8.  Summary Simulation security is, and will continue to be a major concern of all simulation environments.  The VeriFIDES PAC security technology provides an approach to solving this security problem because it provides end to end security for multiple levels of security as well as multiple compartment protections in an enforceable manner. While the instantiation of the technology will require some modifications to FOM development and data headers, it cleanly protects HLA simulation data in a manner that is directly relevant to coalition simulation environments.3. References[1]	Paul B. Schneck and Marshall D. Abrams: United States Patent, “System for Controlling Access and Distribution of digital Property”, Patent Number 5,933, 498, August 3, 1999.[2] Paul B. Schneck, “Persistent Access Control to Prevent Piracy oof Digital Information”’ in Proceedings of the IEEE ProceedingsInternational Conference on Automated Software Engineering, July 1999, pp1239-1250 [3] P. Devanbu and S. Stubblebine, “Research directions for automated software verification using trusted hardware”, in Proceedings of the IEEE International Conference on Automated Software Engineering, 1997, pp. 274-279.[4] U. Linqvist, T. Olovsson and E. Jonsson, “An analysis of a secure system based on trusted components”, in Proceedings of the 11th Annual Conference on Computer Assurance, Systems Integrity, Software Safety and Process Security, COMPASS 96, pp. 213-223.[5]  N. Rankl and W. Effing, “Smart Card Handbook”, John Wiley & Sons 1997.Author BiographiesKEN SULLIVAN is the Program Manager for the National Wargamming System and lead Systems Analyst for the VeriFIDES Applications and Integration Program.  He has been involved with the JSIMS and NATSIM programs and has been a member of the SISO Workshop since 1994.DR. PAUL SCHNECK is the Chief Technical Officer for the Veridian Corporation and the inventor of and patent developer for the Persistent Access Control technology. Schneck is an ACM Fellow and an IEEE Fellow.