Sharing Stories: Using Narrative for Simulations InteroperabilityReginald L. HobbsArmy Research LaboratoryTactical Collaboration & Data Fusion Branch115 O’Keefe Building – Georgia TechAtlanta, GA 30332, USAhobbs@arl.army.milKeywords:Scenarios, HLA, OMT, XML, knowledge representation, narrativeABSTRACT: One of the existing challenges of modeling & simulation environments is the ability to exchange meaningful data between environments.  The HLA (High-Level Architecture) consortium has established a standards infrastructure to make individual simulations interoperable.  Specifically, the IEEE P1516.2 Standard for HLA OMT (Object Model Templates) prescribes a format to support the reuse of Simulation Object Models (SOMs).  There is an XML implementation of the OMT to further promote the open exchange of simulation data.  Although these shareable objects are useful for describing object classes, attributes, and potential interaction, they do not present the larger context of how they were utilized in the simulations.  The context is made available by representing the scenarios that manipulated the simulation objects.  Scenarios are narratives that illustrate future possibilities and help policy makers and designers choose among alternative courses of action. The claim of this research is that there is a computational framework for scenarios that will aid policy makers and system developers during problem-solving activities and make narrative an active part of the decision-making process. Although domain-specific techniques and computational environments exist for encoding simulating and manipulating scenarios, the challenge is to define a representation for scenarios that supports a wide range of discussion and comprehension activities. Our approach is to define a representation based on an ontology of narrative and the activities of storytelling, an approach that separates what a narrative is from how scenarios are used to support decision making. This narrative structure can be derived from simulation data to generate canonical stories from domain information.  This paper describes the Scenario Markup Language (SCML), an XML-based representation of the ontology, and its applicability to the management of simulation experiments.  This discussion will show how SCML can be used not only to generate HLA-compliant simulation objects using OMT, but also to promote the exchange of semantics by creating plot structures to map from one simulation environment to the next.IntroductionThe purpose of the research described in this paper is to develop a computational representation for narrative to aid policy makers, systems developers, and trainers who need to ask  "what-if" questions in their decision making. A scenario is defined as a form of narrative consisting of a collection of episodes with the purpose of describing the actions of characters within an environment.  There are two significant aspects of narrative representations for scenarios: the static structure of narrative content, and the dynamic unfolding or "telling" of the narrative. By separating structure and use, it is possible to construct environments for diverse scenario-related activities.   To simplify the discussion, the terms narrative and scenario will be used interchangeably throughout the remainder of this paper. To make it convenient to create different presentations of the same scenario content, the concept of a hypermedia scenario document, or hyperscenario, is introduced.1.1 Using scenarios for decision-making and designSystem designers and policy makers use scenarios to assist them in making design and policy decisions. Scenarios are used throughout software development to examine alternate design decisions and requirements [ REF _Ref31046321 \r \h 14]. Throughout the 1990s the design research communities in human-computer interaction, object-oriented software design and business administration have paid concerted attention to user-centered design representations that utilize scenarios [ REF _Ref31044425 \r \h  \* MERGEFORMAT 2]. Some of these studies proposed methods for establishing categories of scenarios as design artifacts in their own right [ REF _Ref31044446 \r \h  \* MERGEFORMAT 10]. Within cognitive science, social science and cultural studies, many writers have elevated narrative to a central position in their models of explanation, inference and interpretation, and in the application of these models to professional practices such as pedagogy and educational technology [ REF _Ref31044468 \r \h  \* MERGEFORMAT 9]. In general, scenarios resemble and externalize mental models and thought experiments. The decision-maker may test hypotheses by constructing what-if scenarios on top of a baseline description of the situation under consideration. Whether these scenarios are merely described, enacted through role-playing, or simulated computationally, whether they faithfully represent a real phenomenon or merely provide the outline sketch of a possible course of action, the intention is the same: to clarify the relationships among actions and features of a situation and to understand better the consequences of actions.  1.2 DoD efforts for simulations information interchangeThe Department of Defense has focused much attention in recent years to the use of modeling and simulation for developing and analyzing the military systems of the future. Decreasing budgets, coupled with the necessity of being prepared for multi-faceted types of military activities, such as humanitarian interventions, joint peacekeeping efforts, and other “Missions-other-than-War” have created a need to prepare for unforeseen missions. There is also a requirement for the military to attempt to try out unfielded and evolving weapon systems and technologies to see how they might affect their tactics, techniques, and procedures.  This analysis is being done by means of simulation and modeling, from conventional (live action) war gaming to completely virtual simulations. Constructive simulations, the man-in-the-loop style of simulation, are being used by the Army to determine the affect of new technologies on Command, Control, Communications, Computers, and Intelligence (C4I). These simulations are generally done as war games in which participants are given assigned roles.  There is a need to increase the level of interaction between the automated C4I systems and training simulations.  The Battle Management Language (BML) effort being organized by the Simulations to C4I Overarching Integrated Product Team (SIMCI OIPT) is an attempt to solve simulations interoperability problems. [ REF _Ref31020150 \r \h  \* MERGEFORMAT 1] BML’s approach is to standardize the terminology and symbology based on doctrinal information; to allow the automated systems a common way of interacting. This effort is primarily in the exploration stage, with no specification or implementation determined.  However, they have discussed creating BML in one of the Army’s tactical databases (such as JCDB) to make it available to different representations, particularly XML.The largest such effort for interoperability revolves around the High-Level Architecture (HLA) standards development.  The HLA was developed to create a common architecture applicable across all types of simulation environments.  The HLA Working Group, governed by both the IEEE Computer Society as well as the Simulations Interoperability Standards Committee (SISC), has developed three draft standards:Framework and Rules (IEEE P1516) – which describes the responsibilities for simulations that adhere to the standard and the format for a Simulation Object Model (SOM).Federate Interface Specification (IEEE P1516.1) – describes the interactions between simulations and a Run-time Infrastructure.Object Model Template (OMT) Specification (IEEE P1516.2) – which prescribes the objects, attributes, interactions, and parameters that are required for a SOM.It is the OMT that is critical for describing the format of data exchanged between simulations. An HLA SOM is a specification of the intrinsic capabilities that an individual simulation could provide to HLA-compliant federations. [ REF _Ref31044530 \r \h  \* MERGEFORMAT 20] The OMT Data Interchange Format (DIF) supplies a structure that could be used by automated tools to convert from one representation of an OMT to another.  Initially, the OMT DIF was presented in Backus-Naur Form (BNF), a standard technique for formal representation a hierarchy of information. There is now available an XML version of the OMT that will leverage many existing tools and techniques for interchange.The OMT is useful in describing the low-level attributes of data objects that could be shared by simulations, but does not address how to map these objects into varying environments.  In order to share higher-level information between simulations, it is necessary to describe the context under which SOMs are manipulated within each simulation.  Interoperability at this level requires meta-models, adaptive models, and common repositories. [ REF _Ref31023263 \r \h  \* MERGEFORMAT 18] The Model-Driven Architecture (MDA) initiative has been introduce to create specifications based on formal models.  Under the MDA, these models could take advantage of technology such as the XML Metadata Interchange (XMI) specification, Simple Object Access Protocol (SOAP), and other standards.1.3 Research ApproachThe difficulty in developing a meta-model for simulations rests in the numerous styles, categories, and implementations of simulations.  It is necessary to describe an abstraction of simulation environments that can describe the concepts within any simulation, without being tied to a specific context.  All simulations are essentially stories.  They are stories about what was done, what is being done, or what can be done.  These different forms of narrative can be used for problem solving, training, entertainment, and any other activity that involves decision-making.  One research question to be considered is: what aspects of narrative impact decision-making activities?  The approach to answering this question involved creating ontology for narrative.  The rest of this paper describes a computational framework for scenarios built around a language called SCML (Scenario Markup Language).  The next section focuses on the development of a conceptual model of narrative as the basis of the language.  The third section describes the design of component architecture for scenario applications, specifically for scenario generation. In the final section, a simple game simulation is presented as an example narrative domain to illustrate the potential for creating high-level narrative from low-level event traces.Building A Conceptual Model of NarrativeIn the film industry, the screenplay is a standard format for the document that describes a movie or a play. [ REF _Ref31044593 \r \h  \* MERGEFORMAT 5] The screenwriter does not just translate a novel into a series of scenes, but gives some notion of a relationship between the story elements and an overall flow of action. The director and film editor then decide what form the story should take. The same screenplay can be used to create a storyboard, generate a soundtrack, describe costume requirements, forecast the budget, and outline casting criteria.It is this separation of concerns between a screenplay's form and its uses in telling its story that underpins our representation for scenarios. Many of the ideas and much of the terminology is derived from screenwriting and film editing.Literature was another obvious domain for consideration, since our conventional concepts of a story are based on written descriptions of situations, locations, and events.  Reviewing previous attempts at creating storytelling ontology can derive a conceptual view and taxonomy of narrative.  Propp’s Morphology of a Folktale was an effort by a 19th century literary scholar to create a hierarchy and structure of the standard folktale, as a basis for analysis. [ REF _Ref31044613 \r \h  \* MERGEFORMAT 15] Propp identified recurring patterns within the genre a built relationships between the patterns and the form of the folktales.  This view of a set of patterns and morphology of folktales is central to the hypothesis of scenarios as recurring instances of story elements and their relationships across many decision-oriented narrative domains.2.1 An Ontology for Narrative Figure 2.1 shows the narrative ontology represented as a UML (Unified Modeling Language) class diagram. The diagram establishes a hierarchy of story elements and the associations among them. Each element is a first-order object that can be manipulated within scenarios like the stock cuts of film editing. [ REF _Ref31044648 \r \h  \* MERGEFORMAT 4] EMBED Word.Picture.8  Figure 2.1  Scenario Conceptual Model The fundamental building block of scenario is the action. An action is anything that happens in the context of the story. It could consist of characters communicating, the physical movement of an object, or a change of state.  Actions are not the only components of a scenario, but they are the most important. Although actions are performed by actors and cause changes to occur in objects, it is the actions themselves that make a scenario a narrative rather than a mere description of a situation. For our purposes, it is sufficient to treat actions as a basic category and concentrate instead on how actions are combined and manipulated in the broader and more purposeful context of a scenario.    Our scenario structure derives from the story grammar or story schema models of narrative cognition that several cognitive psychologists proposed in the 1970s.  These story schemata were developed to explain the differences in ease of story comprehension and recall [ REF _Ref31044684 \r \h  \* MERGEFORMAT 17]. According to these models, a story is a string of narrative elements. The most conventional and memorable orderings comply with a phrase-structure grammar, the non-terminal nodes of which include goal-oriented terms such as episodes.  While story grammars are no longer taken seriously as a model of narrative cognition, they form a useful basis for computational descriptions of scenarios for design and evaluation purposes.   The episode is an important concept intermediate in scale between the entire scenario and individual actions. What distinguishes a group of actions as an episode is that they serve a common goal. In each episode, there may be several sets of actions that would accomplish the stated goal [10].   The use of episode in the model is similar to Propp’s morphemes, or story patterns.  His basic theorems where that: 1) characters in the story are constants, independent of whom or what they are, 2) The number of functions (variants) known to fairy tales is limited, 3) The sequence of functions is always the same, and 4) all fairy tales are of one type with respect to their structure.  Propp's functions are clearly goal based, with names such as interdiction, absentation, complicity, etc.  These morphemes are episodes constructed on the goals/obstacles of the main character(s).  In the heuristics developed for determining potential episodes within a narrative domain, Propp's functions can act as templates when domain-specific ideas have been exhausted.Just as stories must contain some conflict to hold the audience’s interest, so a scenario is only interesting to the extent that it illustrates or helps the decision-maker explore situations in which goals are thwarted or endangered. Conditions that imperil goals are called obstacles. Participants in a scenario come in a number of varieties that perform specified roles. One such role is the stakeholder, a person or organization with a stake in the outcome of some aspect of the scenario. While a stakeholder may not do anything to affect the outcome, a stakeholder can be greatly influenced by events in the scenario. The client of a feasibility study or policy evaluation is like the audience of any story, but is less disinterested in the outcome of a scenario.  In this role of scenario client, a stakeholder may constrain the scope of the narrative by defining what may or may not happen or go wrong.   These concerns are represented as exceptions and constraints, which are specific cases of conditions used to limit the scope of the episodes as a scenario unfolds. Most characters in a narrative are agents.  An agent has the responsibility for performing actions whether or not it has a stake in the outcome. In planning scenarios, it is so common to encounter situations in which some agents (competitors, opponents, enemies) oppose the actions of another that these obstacle-raising agents are considered as a specific type, the antagonist. An antagonist performs actions that may block the successful completion of episodes. It is the inherent conflict between achieving goals and thwarting antagonists that makes for an interesting narrative, whether a folktale or a business scenario. A composite role is the actor. An actor is both an agent with responsibilities for actions as well as a stakeholder influenced by what happens. In most situations, entities in the story are best described as actors, since what occurs in the narrative may influence the actions that are available.  A more passive role is that of the prop. In theater and film, props are usually thought of as inanimate objects. More generally however, a prop is any target of an action. In military scenarios, a given resource such as a company may be regarded as a prop at one level of detail and as an agent (or collection of agents) at another. At a still finer level of detail, the company may be regarded as a stakeholder in the outcome of tactical actions.2.2 The process of storytelling: scenario navigationStorytelling can be thought of as a form of purposeful navigation through a set of events. Whether the purpose is comprehension, learning, entertainment, or speculation about an imagined environment, it is task of the storyteller to weave these event chunks into a meaningful whole. In filmmaking, the technology and linear ordering of the viewed events has given rise to the aesthetics and terminology of film editing. Although scenarios are liberated from the pre-planned linearity of film narrative, we adopt the same terminology because it is so useful in distinguishing narrative elements from the sequencing and continuity of their presentation. In the case of screenplays, a critical pair of concepts in this transformation from plot to implemented narrative is the scene and the cut. A scene is a sequence of clips that take place in a particular location [ REF _Ref31044648 \r \h  \* MERGEFORMAT 4]. In a scenario, the "location" that distinguishes a scene needs not be a physical place, but it retains the place-like notion of state.  Cuts are edited transitions between scenes. Several kinds of cuts are distinguished in film theory because of their contribution to narrative impact. One type is the transition cut which is necessary to move from one scene to the next. Overlaying transition cuts is difficult because they mediate the continuity of a narrative. Another style of cut is the reaction cut. These are responses to some change in the state of a story. Reaction cuts are used to allow characters to interact and to elicit some level of engagement from the audience. By "viewing" a character's reaction to some situation onscreen, the audience can infer their emotional state. Effective use of reaction cuts decreases the amount of exposition or explicit narration. Finally, a jump cut is a sudden switch of viewpoint within the same scene. Navigation through a scenario, unlike the cutting of a film, does not have to result in an unchanging or pre-planned sequence of events. There are many examples in literature and filmmaking where non-chronological presentation of a story enhances its impact. Each showing of a film or reading of a text yields the same presentation of the events. Our model for scenario navigation is influenced by Murray's [ REF _Ref31044794 \r \h  \* MERGEFORMAT 12] concept of multiform stories and their implications for computational narrative. A multiform story presents a single plotline with multiple tellings. These versions could be same story told from different perspectives or variants of the story with some significant detail modified. In addition to multiformedness, scenario navigation requires support for both procedural (rule-based) and participatory interactivity [ REF _Ref31044794 \r \h  \* MERGEFORMAT 12].  EMBED Word.Picture.8  Figure 2.2  Hyperlink Strategy Figure 2.2 illustrates the linking strategy between scenario elements. The links are the method for moving through the scenario.  V1 and V2 are variants of the same scenario from different viewpoints. S2 represents a different scenario. The first type of link is the setup. This would originate from an episode or event that initializes the story.  Changing viewpoints requires the presence of a cut. The episodes and actions in V2 are the similar to V1 but told from a different perspective. Actions enclosed by an oval are equivalent to each other. This equivalency relationship establishes a class or set of actions. The choice of any action within the set has the same effect on the flow of the episode. Dependency is the second relationship among actions. Given an action, the possible next moves can be determined through breadth-first search of dependency links. The notion of a flashback, rewind, and transition link were developed from the filmmaking model. A flashback link allows an entry point in the story to exist at any point, with the ability to review background information if necessary. Flashbacks would generally be on the level of an episode because the level of detail being sought. Contrast that to a rewind link, which allows for backing up within an episode between actions. Prerequisite and transition links establish dependencies at the episode level. Post- and pre-condition episodes would have to be completed before or exist prior to this type of movement. The decision link is the most important from the standpoint of analyzing alternate paths. This is the only type of link that crosses scenario boundaries.Hyperscenario Framework DesignThe goal is to represent the structural and linking models in a form that is general enough to describe the structure of any scenario, yet expressive enough to support different external views of the data. The choice of a markup language supports both these objectives. Markup languages describe a document’s structure, leaving presentation details to the capabilities of the structure-aware applications. 3.1 Scenario Markup Language (SCML) Specific markup languages are defined from XML [12] by creating a DTD (Document Type Definition).  The DTD defines allowable components and structures for documents of its type.  Designing SCML therefore involved determining which entities, elements and attributes to represent and the rules for combining them into a document encoded as an XML DTD.Figure 3.1 SCML Document Type DefinitionFigure 3.1 is an excerpt of the DTD for SCML.  Major story components, such as episodes, goals, actions and cuts are all reflected as elements in the SCML DTD. Another important aspect of SCML is the support for the link strategy.  Within an XML-based language, the developer can define link types using XLL (XML Linking Language).  SCML links are bi-directional.  Extended links can target a selection of possible document artifacts, as opposed to a single file. External programs can be executed by activating a link using this method. Cut links are therefore implemented as extended links, allowing for cuts to any location in a corresponding episode.  3.2 Scenario Generation ApplicationThe separation of concern requires the application domain to present tools for parsing and manipulating SCML-based narratives. The rules and policies of a domain assign semantics to SCML story elements. Just as there are standard story elements that occur across narrative domains, a categorization of scenario tasks can be developed.  Applications such as scenario walkthroughs, generation, and manipulation have component pieces in common.  These reusable scenario components are referred to as storybeans.   A scenario generation application was chosen for implementation using these storybeans.  Other scenario tools could be developed from these and other components, dependent upon the activity.Figure 3.2  Scenario Generator ArchitectureFigure 3.2 illustrates the architecture of a scenario generator.  This initial application was designed to generate a story from low-level event data.  The event trace would consist of actions/steps that could be gathered from a log file or by analyzing a simulation.  The purpose of the Filter component is to remove non-relevant background info.  This could be header information or tool-related commands that add no context to the story.  The Parser is there to examine the log file, building action tokens.  An action token is a series of fields, such as action name, type, actor, setting, and timestamp that could be gleaned from each transaction. It is not necessary to have every field to construct a story; the minimum would be a list of actions/actor pairs.  The Analyzer is the first component that would have to know something of the narrative environment.  It is here that additional content that may not be present in the original log file would be added. The Analyzer searches for event patterns known to occur in the domain of this narrative.  It has a list of significant events and the collections of actions that could make up each one of them.  There is also information on actions that cause event transitions and inter-action dependencies in this component.  The Analyzer generates event pragmas (fragments) from the action tokens.  The majority of the story creation work happens in the Inference Engine.  Episodes are determined by doing pattern matching on the sequence of events that occur.  If the engine detects an event pattern that matches, it can assume the goal for that series of events and construct an episode from it.  The similar style of pattern matching occurs to determine the overall scenario. The series of episodes is placed into a pattern and a search is done for a scenario that matches.  Once the scenario structure is complete, the component can add other narrative information, such as cast of characters, scene changes, etc.  Finally, the engine uses the appropriate style sheet to generate the encoded narrative.The main impact of this scenario generation approach is the ability to add  “plot structure” to an event trace.  Instead of a list of actions and steps that happened in a linear sequence, the encoded narrative can contain information about the environment under which the actions took place. 3D Maze Simulation ExampleThis section describes a scenario prototype developed as a proof-of-concept tool to interpret SCML.4.1 Design of the prototypeA prototype scenario generator tool has been constructed from the storybean components. The tool is written as a Java applet in order to take advantage of existing Internet browsers as a front-end GUI.  The narrative domain is that of a simple 3-dimensional maze game, modified to generate a log file.  Figure 4.1 shows the design for the application.Figure 4.1 Scenario Prototype DesignThe applet captures the user’s interaction and transmits the data to the CGI scripts on the web server.  Each of the components in the scenario generator model is a PERL script. The plot structured, SCML encoded narrative is output by the scripts.  At that point, transformations could be applied to the document to create alternate representations of the same story.  The XML Style Language (XSL) is applied to an XML document to control rendering and also to handle the transformations. An external XSL called Saxon was used to interpret the XSL code and generate the scenario variants.Running the Game SimulationThis applet displays a 3-D maze drawn with texture-mapped walls. The object is to move through the maze, locating the red, green, and blue square on the floor.  To "find" a square, you must position yourself directly over it.  This game was chosen to keep the number of potential actions, events, episodes, and scenarios at a minimum. There are only 4 actions possible within game:  move forward, move back, turn right, and turn left.  Figure 4.2 is a screenshot of the prototype.Figure 4.2 3D Maze applicationIn this simplified example, there are 8 possible events (Entered-The-Maze, Moving-Towards-Wall, Moving-Away-From-Wall, Collides-With-Wall, Found-The-Red-Square, Found-The-Blue-Square, Found-The-Green-Square). The potential episodes are derived by either finding (or not finding) a particular square.  The parser would go through the log file, collecting actions into events based on these rules for the game:Start in Northwest corner of maze, facing due eastTurning changes direction, not positionTurning always causes the end of an eventMove 1 square at a time4 squares or less moving forward from a wall is moving away from the wallIf position between 2 walls with less than 8 squares, use a ratio of half the distance to determine moving forward or awayMoving more than 4 squares in one direction becomes moving towards a wallTrying to move forward when in front of a wall is a collisionA square can be detected from 3 squares awayFinding a square occurs when standing on the square4.3 Scenario TransformationsThe game gives the participant the choice of representation of the output.  The analysis of the log file is done with the selection of an output format.Figure 4.3 illustrates a simple tabular view of the actions during a game session.  Figure 4.3  Log file of game sessionThis log file would represent the standard output of a simulation in terms of position of objects or actions performed.  This session has no additional context added.Using the game rules and performing pattern matching on the events will create the SCML document. A straightforward transformation of the output would be a hierarchical tree structure, as illustrated in Figure 4.4, below.Figure 4.4 Tree representationThe hierarchy gives you a collapsible tree view of the story, allow you to see how actions make up events, events are separated by scene, scenes are contained in episodes, and so on.One of the most interesting transformations is that of a literary narrative.  The narrative reflects the actions that were done in the game simulation, with "narrative fluff" around it to make up a story.  Each time the game is played, depending upon the scenario variant and the actions, a different story is generated.  The tool can detect particular sequences of events, like running into the walls repeatedly, and generate appropriate text to describe what happened.   Figure 4.5. Literary representation of 3D Maze GameOther transformations have been coded for the simulation.  A tabular summary file in HTML format can be created to eliminate the details for a high-level view of the story.  The text from the literary narrative can be further transformed by re-direct through a translation tool such as babelfish to represent the story in other languages.  Existing XML technologies, such as VoiceXML, can be used to generate an audio version of the story with the help of an appropriate text-to-speech engine.ConclusionCapturing high-level, contextual information as well as sharing data objects can enhance simulation interoperability.  This transfer of semantics can be accomplished using a meta-model like narrative to describe a common view of simulations.  The stories that describe the interactions and relationships of simulation objects can be encoded and interchanged with other simulations.  SCML leverages existing XML technologies, such as XSL, namespaces, XPATH to allow for many different scenario activities.  Transformations into environments that use existing XML languages (such as OMT DIF) can be accomplished with XSL.  XML has been use to represent Computer Generated Forces (CGF) in military simulations tools such as Modular Semi-Autonomous Forces (ModSAF) and the Warfighter’s Simulation 2000 (WARSIM). [ REF _Ref31045364 \r \h  \* MERGEFORMAT 8]Determining episodic information for creating reasonable stories in a domain is done by analyzing the artifacts and processes of the organization. The military domain is extremely well suited for depiction using hyperscenarios, due to the amount of established doctrine for any activity, particularly battle planning. It is straightforward to determine potential episodes, actors, actions, and events from army field manuals, policy documents, and regulations. [ REF _Ref31044935 \r \h  \* MERGEFORMAT 6]The contribution of this research is not an improvement on simulations or how they generate data.  The problem with existing simulation-to-scenario generation is that they are non-portable and/or non-extensible.  Many simulation tools write scenario data in proprietary code, specific to the hardware/software of the environment.  Also, it is difficult to do ad hoc "what-if" studies of the simulation data because the scenarios are canned.  The contribution of SCML is the scenario structure that could be used as an information repository.  Different styles of "stories" could be generated from the same info, dependent upon point of view.  .AcknowledgementsThe author would like to acknowledge the support in this research of the Army Research Laboratory.  The guidance and input from Dr. Colin Potts, College of Computing, Georgia Institute of Technology has been instrumental in the theoretical grounding of this work.BibliographyCarey, S., Kleiner, M., Heib, Michel, Brown, Richard. Standardizing Battle Management Language-A Vital Move Towards the Army Transformation. in Proceedings of the 2001 Fall Simulation Interoper. Workshop, Orlando, Fl 9-14 September 2001.Carroll, John M. editor. Scenario-Based Design: Envisioning Work and Technology in System Development. John Wiley  & Sons, Inc., New York, 1995.Carroll. John M. The Scenario Perspective on System Development. In Scenario-Based Design: Envisioning Work and Technology in System Development [1], pages 1-15. Dmytryk, Edward. On Film Editing. Focal Press, Boston, MA, 1984. Frensham, Raymond. Screenwriting. NTC /Contemporary Publishing,Chicago, IL, 1996.Hobbs, Reginald. HYPERLINK "http://www.cc.gatech.edu/%7Ereggie/c2scenarios.ps"  An XML-based Framework for Battle Planning Simulations, in Proceedings of the 2000 Winter Simulation Conference, Orlando, FL., 10-13 December 2000Lacy, Lee. Representing Computer Generated Forces Behaviors using eXtensible Markup Language (XML) Techniques. In proceeds of the 10th Conference on Computer Generated Forces and Behavioral Representation. Norfolk, VA, 15-17 May 2001.Laurel, Brenda. Computers as Theatre. Addison-Wesley Publishing Co., Reading, MA, 1991. Mack, Robert L. Discussion: Scenarios as Engines of Design. In Carroll [1], chapter 14, pages 361-386. Morrison, Michael. Presenting JavaBeans. Sams.net Publishing, Indianapolis, IN, 1997.Murray, Janet H. Hamlet on the Holodeck: The Future of Narrative in Cyberspace. Free Press, New York, NY, 1997. Nardi, Bonnie A. Some Reflections on Scenarios. In Carroll [1], Chapter 15, pages 387-399. Apple Computer, Advanced Technology Group.Potts, Colin. Requirements Completeness, Enterprise Goals and Scenarios. Research Report, August 1994.Propp, Vladmir. Morphology of the Folktale. University of Texas Press. Austin, TX. 1968.Rosenberg, Jim. The Structure of Hypertext Activity. In Proceedings of the 7th ACM Conference on Hypertext, pages 22-30, New York, 16-20 March 1996. ACM Press.Schank, Roger C. Tell Me A Story: Narrative and Intelligence. Norwestern University Press, Evanston, Ill, 1995.Tolk, Andreas. Avoiding another Green Elephant – A Proposal for the Next Generation HLA based on the Model Driven Architecture. In Proceedings of the 2002 Fall Simulation Interoperability Workshop, Orlando, FL September 2002.U.S. Department of Defense, High-level Architecture Rules Version 1.3, 20 April 1998. U.S. Department of Defense, High-level Architecture Object Model Template Specification Version 1.3, 20 July 1998.Author BiographyREGINALD L. HOBBS is a computer scientist at the Army Research Laboratory-Tactical Collaboration and Data Fusion Branch. Mr. Hobbs has a B.S. in Electronics from Chapman University and a Masters in Computer Science from the Georgia Institute of Technology. He is currently a PhD Candidate in the area of Software Engineering at the College of Computing, Georgia Tech. He has research interests and experience in the areas of software development methods, re-engineering, scenario-based design, XML for knowledge representation, and interactive narrative. Mr. Hobbs has participated on government and industry working groups on software engineering techniques, software process model descriptions, and software architecture transitions.  Joint Common DatabaseA stock cut consists of previously created footage of actions that can be retrieved from a library and pieced together and used as a placeholder during filming.  The name storybeans is a derivation of the JavaBeans [ REF _Ref31029548 \r \h 11] approach to reuse, which focuses on naming conventions and standard programming practices. http://babelfish.altavista.com	Entered Maze at Location 0,0Moved ForwardMoved ForwardTurn RightMoved ForwardEncountered WallTurn RightMoved ForwardEncountered WallTurn LeftMoved ForwardMoved ForwardTurn LeftMoved ForwardMoved ForwardTurn LeftMoved ForwardMoved ForwardMoved ForwardEncountered WallTurn RightMoved ForwardMoved ForwardMoved ForwardTurn RightMoved ForwardMoved ForwardMoved ForwardMoved ForwardMoved ForwardMoved ForwardTurn LeftMoved ForwardEncountered Red Square