Domain Analysis for Reusable Trajectory SimulationUmut DurakDr.Gökmen MahmutyazıcıoğluTUBİTAK-SAGEPK.16 Mamak06261 Ankara TURKEY90 312 5909176, 90 312 5909163udurak@sage.tubitak.gov.tr, gmahmut@sage.tubitak.gov.trDr.Halit OğuztüzünMETU Computer Engineering Dept.06530 Ankara TURKEY90 312 2105587oguztuzn@ceng.metu.edu.trKeywords:Trajectory Simulation, Domain Oriented Reuse, OntologyABSTRACT Trajectory simulations can be regarded as computational tools to calculate the flight path and other flight parameters of munitions. They have a wide range of uses from concept formation to training simulator construction throughout the lifecycle of a weapons system. Trajectory simulations differ widely with respect to their performance and fidelity characteristics. From our observations, it is a common practice in the industry that developments of these simulations are carried out as isolated projects although they have lot in common. We envision the Reusable Trajectory Simulation Suite (RTSS) as an infrastructure that enables reuse starting from requirements through high level and low level design, coding and testing for trajectory simulation projects. Adhering to domain engineering principles, we have started with the domain analysis for trajectory simulation. The resulting domain model takes the form of an ontology, designated Trajectory Simulation Ontology. It contains the basic notions and relationships in the trajectory simulation domain. Web Ontology Language (OWL) of World Wide Web Consortium (W3C) is used to represent the ontology.1. IntroductionReusable Trajectory Simulation Suite (RTSS) is envisioned as a systemic reuse infrastructure for projects involving trajectory simulation for a variety of weapon systems.This paper, first reviews the trajectory simulation domain. Then it will briefly discuss the domain oriented reuse methodology on which the RTSS development is based. This methodology basically consists of the domain engineering steps, namely, domain analysis, infrastructure definition, and infrastructure implementation. Domain model is presented as an ontology in the Web Ontology Language (OWL). Following a discussion of ontology development basics, the preliminary results of domain analysis are presented. The main structure of the ontology is presented, and its usage is discussed on a scenario. 2. Trajectory SimulationTrajectory calculation or simulation means computing the flight path and other parameters such as orientation, and angular rates of the munition from the start to the end of its motion. The simulation is based on a mathematical model of munition, and environment. The mathematical models consist of equations that describe the physical laws, and procedures that capture the logical sequences [1].Trajectory simulation deals with mathematical models of the motion of munition and its subsystems. The equations of motion determine the acceleration, velocity and position of the munition resulting from forces and moments due to gravity, thrust and aerodynamics. The guidance and control model simulates subsystems such as the control system.Each particular trajectory simulation requires different approaches. The level of sophistication of simulations varies greatly depending on the application. These levels range from unsophisticated two dimensional models to very detailed six-seven degree of freedom models that include hardware in the loop and seeker simulations. The requirements of a given trajectory simulation are derived from the objectives of the intended user, who might be interested in the analysis, development, procurement and operation of some munition.  Typical objective are to improve the understanding of various aspects of the munition, such as specifying munition performance requirements, designing and optimizing munitions, assessing munition performance, teaching users the correct use of munition, and fire control. Essential constituents of trajectory simulation are briefly discussed in the sequel.Munition DynamicsModels that simulate the motion of the munition are based on physical principles: application of propulsive, aerodynamic and gravitational forces, and the responses for respective airframes to these forces. The mathematical model of the motion of the munition is based on Newton’s second law. At each instant of time, forces acting on the munition, a rigid body in space, result in an instantaneous acceleration of the center of mass of the body. Munition is a dynamic system with six degrees of freedom. Its motion in space is defined by the six components of velocity: three translational, three rotational. But the requirements of trajectory simulations force some simplifications by approximating or neglecting some degrees of freedom. For example neglecting the munition roll results in a five degrees of freedom model. Further simplifications can be made by neglecting all three rotational degrees of freedom but retaining the three translational degrees of freedom, yielding 3DOF models. There also exist models derived for special needs. For example, during the conceptual design of a weapon system 1DOF models for analyzing axial force, thrust and weight, 2DOF models for analyzing normal force, axial force, thrust and weight can also be used. Some models, used in design and development of a munition, are summarized in Figure 1. Figure 1 Some Models Used for the Development of a Munition [18]Guidance and ControlThe guidance routines in trajectory simulation contain models for tracking the target and application of guidance law. The guidance models are used to calculate the munition maneuver command in response to the relative missile and target motion. The autopilot model transforms the maneuver command into control commands, which are interpreted by the control system models. The control system models are used to calculate the control surface deflection, for example if the munition is aerodynamically controlled, in response to these commands. The aerodynamic simulation model calculates the aerodynamic forces and moments on the airframe, which result from deflection. The aerodynamic moments are input to an airframe response model that calculates the angle of attack. The angle of attack produces aerodynamic lift that causes the missile flight path to change.Coordinate SystemsForces, accelerations, velocities, positions, moments, angular accelerations, and angular rates are all vector quantities. A vector must be described relative to some frame of reference. A vector is described by its three components on the axes of a coordinate system.Common coordinate systems used in trajectory simulations are earth coordinate system, body coordinate system, wind coordinate system, guidance coordinate system, tracker coordinate system and target control coordinate system.EnvironmentThe environment is modeled in trajectory simulations due to its interactions with the munition. First, the flow of air or water over the surface of the munition produces aerodynamic or hydrodynamic forces and moments. Second, the ability of atmosphere or the sea to transmit electromagnetic, sonar etc. signals impacts on the performance of the seeker.Numerical MethodsA number of numerical solvers are available to solve ordinary differential equations in trajectory simulations. Single step numerical solvers, such as Euler, Heuns, Runge-Kutta solvers, and multi step solvers such as Adam’s, Newton-Cotes and Milne, among others, can also used [1].3. Domain Oriented Reuse MethodologyAlthough the concept of software reusability can be traced back to the beginning of computer programming, it emerged as a software engineering issue at the 1969 NATO Conference. Little progress was made until mid to late 1970’s, when some organizations put to a test the promise of productivity through reusability. The Workshop on Reusability In Programming in 1983 was a milestone in the process. Early research focused on methods and mechanisms to perform reuse, on representation of reusable components, and on organization of repositories of components [2].In the past reuse was understood as using generalized repositories of “components” and “parts” which can be accessed by many kinds of applications. It took several years of spectacular failures –characterized by low levels of reuse- to make it clear that this approach could not succeed. Then the domain concept is defined and the success of reuse is related to the use of artifacts in the context of a domain. Domain is defined as the area in which an organization does business [3].In recent years, however, it was also recognized that the mere creation of repositories of domain oriented assets was not enough to ensure reuse success. For a domain, it is also necessary to design a generic architecture, known as the domain architecture, of systems in that domain. With the identification of domain architecture, it becomes possible to develop systematically reusable assets that fit the architecture via a suitable interconnection mechanism.There exists a gap between the kinds and forms of the knowledge available about problem domains and the content and form of the information that can be reused in software construction. Knowledge about the problem domain is often implicit and informal, while reusable information must be represented explicitly and formally. The term reuse infrastructure refers to the information that must be made available to the software developer, together with auxiliary information needed to locate and manipulate it. The process of developing a reuse infrastructure from problem domain is called domain engineering. Domain engineering is fundamentally composed of three activities: domain analysis, infrastructure specification, and infrastructure implementation [4].Domain Analysis is the identification, acquisition and evolution of reusable information on a problem domain to be reused in software specification and construction [2]. The purpose of domain analysis is to produce the model of the problem domain. Then domain model should serve as:• an authoritative resource of reference when ambiguities arise in the analysis of the problems or later during the implementation of reusable components• a repository of shared knowledge for teaching and communication• a specification to the developer of reusable components.Infrastructure specification is the selection and organization of reusable information in the model to fit the patterns of reuse in the environment of reuser. As a result, an architecture for reusable information, such as, a library of programs, a database scheme, is specified. The infrastructure specification, together with the semantics captured by the domain model, is input to the infrastructure implementation step that actually produces and tests the components.In this study the activities of domain engineering are correlated with the abstraction levels of Model Driven Architecture (MDA) of Object Management Group (OMG): Domain analysis is correlated with Computation Independent Model (CIM), Infrastructure Definition with Platform Independent Model (PIM), and Infrastructure Implementation with Platform Specific Model (PSM) and Code.MDA approach advocates separating the specification of operation of a system from the details of the way that system utilizes the capabilities of its platform [5][6][7].A CIM, sometimes called a domain model, is a view of a system from the computation independent viewpoint. A vocabulary that is familiar to the practitioners of the domain in question is used in its specification. A CIM may hide much or all information about the use of automated data processing systems. Typically such a model is independent of how the system is implemented. For example the requirements of a point mass dumb bomb simulation is defined regardless of its implementation as a part of a bomber aircrafts fire control system or as a part of tactical level simulation.A PIM is a view of a system from the platform independent viewpoint. A PIM exhibits a specified degree of platform independence so as to be suitable for use with a number of different platforms of similar type. It describes the system, but does not refer to its implementation platform. PIM is the high level abstract design of the system. It has inclusion and specification hierarchies. Detailed design of the mentioned point mass dumb bomb simulation for Ada95 or for MATLAB will be based on the same PIM.A platform specific model is a view of a system from the platform specific viewpoint. A PSM combines the specifications in the PIM with the details that specify how that system uses a particular type of platform. Think of a MATLAB design model. It will define the interfaces to the numerical solvers, rather than defining their design, since MATLAB platform has them all.Code is the lowest abstraction level of MDA which is the system in executable form. 4. Ontology and Domain AnalysisAs the information is gathered during domain analysis, the problem is representing the knowledge for ease of both human understanding and machine processability. The approach adopted in this study is the use of ontologies for knowledge representation.According to Gruber [8] knowledge in ontologies can be formalized using five kinds of components: concepts, relations, functions, axioms and instances. Concepts can be anything about which something is said, and therefore, can be a description of a task, function, action, strategy etc. Taxonomies are widely used to organize the ontological knowledge in domain using generalization/specialization relationship through simple/multiple inheritance. Relationships represent a type of interaction between the concepts of the domain. Axioms on the other hand are used to formulate statements that are always true. They are added to ontology for several purposes, such as constraining the information contained in the ontology, verifying its correctness or deducting new information. Instances are the terms that are used to represent the elements of the domain [9].Among many applications of ontologies [10][11] [12][13], “ontology as specification” is the way that this study is focused on. The basic idea is to author an ontology which models the application domain, and provides a vocabulary for specifying the requirement for one or more target applications. The software is based on the ontology, which thus plays an important role in the development of the software. The benefits of this approach include documentation, maintenance, reliability and knowledge reuse [14].Early attempts on representation systems have yielded many languages, the most representative ones being Ontolingua, OKBC, OCML, Loom, and FLogic, Contemporary studies in representation systems resulted to web languages like OIL, DAML,DAML+OIL and OWL for building ontologies [9].Web Ontology Working Group when defining OWL aimed the OWL to be the standardized and broadly accepted ontology language for the Semantic Web [15]. W3C’s Web Ontology Working Group defined a language as powerful as a combination of RDF Schema with a full logic. They then defined OWL as three strata of sublanguages, each of which is geared towards fulfilling different subsets of these requirements.The entire language is called OWL Full, and uses all the OWL primitives. The disadvantage of OWL Full is the language has become as powerful as to be undecidable, dashing any hope of fully automated (yet alone efficient) reasoning support.In order to regain computational efficiency, OWL DL (short for: Description Logic) is a sublanguage of OWL Full which restricts the way in which the constructors from OWL and RDF can be used. The advantage of this is that it permits efficient reasoning support. The disadvantage is that full compatibility with RDF is lost.A further restriction limits OWL DL to a subset of the language constructors, OWL Lite. The advantage of this is a language that is both easier to grasp (for users) and easier to implement (for tool builders). The disadvantage is, of course, restricted expressivity.One should decide upon the sub-language to use before starting working on an ontology. In this study, what we want to do is to capture as much knowledge from the domain as possible to lead us to a software architecture. Therefore we selected to use the most expressive one, OWL-Full.As the domain we are dealing with involves mathematical modeling, we face the problem of representing mathematical expressions in both human and machine readable format. The format must also be compliant with OWL. Mathematical Markup Language (MathML) is selected as the representation method for mathematical models. The goal of MathML is to enable mathematics to be served, received, and processed on the web, just as html [16]. MathML provides two sets of markup tags: one set represents the notation of the mathematical data in markup format, and the other set relays the semantic meaning of mathematical expressions, enabling complex mathematical and scientific notation expressions to be encoded in explicit way. Currently many well known commercial tools are supporting MathML for mathematical typesetting and editing. One can insert a MathML document into a Microsoft Word document using MathType, or interpret an equation using Mathematica, MathCAD or Mapple.Protégé is selected as the environment for developing the ontology. The presentation of Protégé is beyond the scope of this paper. Information is available from the web site [17].5. Trajectory Simulation OntologyTrajectory Simulation Ontology (in short, traJonT) is the product of domain analysis, aimed to develop a Reusable Trajectory Calculation Suite. It is built to serve as the Computation Independent Model for the Suite. Ontology development is being done on Protégé 3 with the OWL Plugin. Figure 2 is the top level diagram of the traJonT, produced by Protégé.The base class in the ontology is traJonT Entity, which all domain entities are derived from. This entity is used to define the scope of traJonT. All the entities in the world that we deal with, as a part of trajectory simulation concept, are trajectory simulation entities. Trajectory simulation domain model consists of entities which represent particular systems to be simulated, the databases that define these systems, the models for their behavior, simulation itself, its phases, its numeric solvers and the environment.Database determines the system parameters used in simulation, such as aerodynamics of the missile or the ballistic properties. Fuze Data, Charge Data, Solid Rocket Motor Data or Weapon Data are also database entities. Different representations of these entities are defined as the successors of these entities. For example; Constant CD and Mach Drag Table are different representation of Point Mass Aerodynamics, which is a kind of aerodynamic representation of a missile.The models are parts of the ontology. Models define the behavior of the simulated systems. Dynamic Model stands for the equations of motion, on the other hand, Termination Model stands for representing the behavior of a fuze. Different models in the hierarchy can represent different fidelity levels and different database requirements. For example, a Point Mass Flat Fire Dynamic Model and a Modified Point Mass Dynamic Model require different aerodynamic databases.Simulation is the ancestor of any simulation that will be defined in this ontology. It will be used to define the characteristics of a simulation. It is modeled so that a simulation must have the Munition to be simulated, the Platform that the munition is launched from, and the Environment that munition flies in. Moreover, a simulation is composed of Phases and it computes a Trajectory.Phase is a part of trajectory simulation that is calculated with a set of models. It has a Dynamic Model which defines the level of fidelity of the simulation, a Solver to solve the differential equations of the models, a Propulsion Model and a Termination Model. A phase starts with initial conditions and calculates a phase trajectory.  For example, a rocket simulation can have a boost phase and free flight phase which are simulated by different models.In Figure 3 which is the representation of an Unguided Rocket Simulation, one can see that above characteristics of the simulation are inherited by this one.Trajectory stands for the definition of the outputs of trajectory simulation. Output variations will be defined as successors of this entity.Physical systems, subjects of the simulation, are Munitions and Munition Entities which are the parts thereof, such as Fuze or Guidance System and Platform from which the munition is launched. Types of data that will be used to describe these systems are decided upon depending on the requirements of the individual simulation and the models that simulation use throughout its phases, such as Dynamic Model or Propulsion Model. When one starts building a simulation, say, for some concept exploration, a Constant CD aerodynamics will be sufficient to define the aerodynamics of the missile for a simple 2DOF Flat Fire Dynamic Model.Numerical solvers are another indispensable parts of trajectory simulations. Solvers can have single step or multi step algorithms. The step size in these solvers can be fixed size or variable size. Common one step solvers that are used in trajectory simulations are Euler and Runge Kutta derivatives.Environment is the entity that models the effect of the media of the munition on its motion. There are two kinds of media that munitions flies in: Atmosphere and Sea. These entities in the ontology represent the basic properties of the models of these media.Figure 2 traJonT Top Level DiagramAtmosphere, for example, regardless of its actual representation, must provide the air density, air pressure, air temperature, wind speed and direction at the given altitude.After defining the basic structure of the ontology, it is time to define the basic approach of modeling. The modeling depends on aggregation/composition relations, which then will lead us to software components that will carry out their own calculation and provide the results from their interfaces.The approach will be discussed over a simulation scenario. Suppose we need to develop a simulation for a conceptual design study of an unguided fin stabilized rocket. For this particular case, the platform it will be launched from is defined as a Rocket Launcher.Figure 3 traJonT Unguided Rocket Simulation Definition The definition of this simulation in the ontology is shown in Figure 3. Unguided Rocket Simulation inherits from Simulation class, which defines what a simulation should have in order to be executed. Ontology says that it should have a Munition, an Environment, a Platform and Phases. It should calculate a Trajectory as the result of the computation.Then to define a new simulation as it is done for this scenario, one must set values for these entities. The Munition is set to MGR which stands for Mobile Surface Attach Rocket. The rocket simulation is designed as two phases: The first being Unguided Rocket Boost Phase and the second being Unguided Rocket Free Flight Phase. These phases have their special models and solvers.Figure 4 traJonT Definition of MGR One needs to define an environment as well. This simulation will be carried out using a standard atmosphere. So ICAO is selected as the Atmosphere.  Ontology makes it clear that a platform must be set for the simulation. Rocket Launcher is selected as the platform of the simulation. A trajectory type, called Rocket Trajectory, is created to define the output trajectory of this simulation. The approach here is to form a structure to enable the user to build a simulation with has relations from its components. Likewise if one of the components of the simulation is composed of components, it is also constructed using has relations that are inherited from its predecessors. Consider the munition, MGR, Mobile Surface Attack Rocket. It is defined that it should have some parts from the Propellant class in its predecessor Munition, some parts from Fuze class and Warhead class in its predecessor Missile. Besides each munition is defined as having Ballistics and Aerodynamics which relates the physical systems to database entities. PD (Point Detonating) fuze is selected with a Solid Rocket Motor as a propellant, and warhead is defined as HE (High Explosive). The Aerodynamics is defined as Constant Drag and ballistics is defined as Point Mass Ballistics. When defining the database entities, the requirements of the models that are defined in the phases are considered. In this case, selected aerodynamics and ballistics are suitable for a dynamic model, which is successor of Point Mass. The Protégé snapshot of the definition is shown in Figure 4.traJonT defines a scenario that says each trajectory simulation is composed of phases which have models and a solver. Models run throughout the phase using the databases defined for the physical systems that the simulation is run for. The models calculate a phase trajectory collaboratively by interacting through their interfaces defined by their abstract ancestors. For example, Termination Models uses the database of the Fuze of the system to be simulated and checks the termination conditions on each integration step.  For the PD case, it will work over an interface that gets terrain and position of the munition and decides the termination status. Or consider a Point Mass Constant Mdot Solid Rocket Model. It will provide thrust throughout the time over Get Thrust interface. Such interfaces are defined in the ontology as the procedural types. The abstract classes have these services and other classes inherit the services, which means conforms to predefined interfaces.6. ConclusionAdapting the defined domain engineering methodology, Reusable Trajectory Simulation Suite project is underway. Domain engineering activities started with domain analysis. The basic structure of the domain model has been constructed. Validation of this basic structure is worked on both by reviewing the domain experts like systems engineers and ballisticians, and by trying out different scenarios like the one discussed in the previous section.Size of the domain is judged to be too diverse and complicated to be maintained in a single ontology. Trajectory Simulation Ontology is being developed as separate sub-ontologies in order to enhance modularity and maintainability. In addition, this approach will create a chance to reuse sub-ontologies of traJonT in other ontologies. Numerical solvers, environment, weapon systems and dynamic models are being regarded as separate ontologies which are imported by simulation ontology.The steps forward is the construction of the Platform Independent Model and Platform Specific Models, and generation of implementation code, based on this domain model, and iterate on the completeness and the correctness of the ontology. 7. References[1]	U.S. Department of Defense. “Missile Flight Simulation Part One Surface-to-Air Missiles”. MIL-HDBK 1211, 1995.[2]	G. Arango. ”Domain Analysis: From Art to Engineering Discipline”. Proceedings of 5th International Workshop on Software Specification and Design, 1989.[3]	J. Favaro. “Techinal Report on Reuse”. European Software Institute, 1995.[4]	R.A.Falbo, G. Guizzardi, K.C.Duarte. “An Ontological Approach to Domain Engineering”. International Conference on Software Enginnering and Knowledge Enginnering, Ischia, Italy, 2002.[5]	“The Model Driven Architecture”. http://www.omg.org/mda , OMG, Needham, MA, 2002.[6]	“Model Driven Architecture (MDA)”. Document number ormsc/2001-07-01, July 9, 2001.[7]	J. Miller, J. Mukerji (Eds.). “MDA Guide Version 1.0”. OMG 2003.[8]	T.R. Gruber. “A Translational Approach to Portable Ontology Specifications”. Knowledge Aquisition, Vol. 5, Number 2, 1993[9]	O. Corcho, A.G.Perez. “Evaluating Knowledge Representation and Reasoning Capabilities of Ontology Specification Languages”. ECAI'00 Workshop on Applications of Ontologies and Problem Solving Methods. Berlin, Germany, 2000.[10]	Protégé OWL Ontologies,	 http://protege.stanford.edu/ontologies/ontologies.html[11]	Ontologies by Keyword,	                        HYPERLINK "http://www.daml.org/ontologies/keyword.html" http://www.daml.org/ontologies/keyword.html[12]	P. Borst et al. “Engineering Ontologies”. Int. J. Human-Computer Studies, Vol. 46, pp 365-406, 1997.[13]	U. Avcı, Ş. Kayır, H. Oğuztüzün, “An OWL Ontology for Shell Trajectories”, Submitted for Publication. [14]	R.A.Falbo, G. Guizzardi, K.C.Duarte. “An Ontological Approach to Domain Engineering”. International Conference on Software Enginnering and Knowledge Enginnering, Ischia, Italy, 2002.[15]	G. Antoniou, F. van Harmelen. “Web Ontology Language: OWL”. Handbook on Ontologies, International Handbooks on Information Systems, Springer, 2004.[16]	J. Boye, “MathML – What’s in it for us?”, http://tech.irt.org/articles/js081/ , 1998.[17]	Protégé Web Site,  HYPERLINK "http://protege.stanford.edu/" http://protege.stanford.edu/[18]	E.L. Fleeman, “Tactical Missile Design”, AIAA Inc. VA, 2001.Author BiographiesUMUT DURAK is a Senior Researcher in Defense Industries Research and Development Institute of Scientific and Technical Research Council of Turkey. He obtained his BS and MS from Mechanical Engineering Department of Middle East Technical University (METU), Ankara, Turkey. He is currently a Ph.D. student in the same department.DR. HALİT OĞUZTÜZÜN is an assistant professor in the Department of Computer Engineering at the Middle East Technical University (METU), Ankara, Turkey. He obtained his BS and MS degrees from METU in 1982 and 1984, and PhD from University of Iowa, Iowa City, IA, USA in 1991. His current research interests include distributed simulation and model-driven development. He participates in the activities of the Modelling and Simulation Research Center of METU.DR. GÖKMEN MAHMUTYAZICIOĞLU Born in 1970 Ankara. Graduated from Middle East Technical University Mechanical Engineering Department in 1992. Completed MSc. study on Dynamics and Control Simulation of An Inertially Guided Missile in 1994. Completed Ph.D. study on Aerodynamic Parameter Estimation Using Aeroballistic Data. Working for TÜBİTAK-SAGE. Currently head of the design engineering department.