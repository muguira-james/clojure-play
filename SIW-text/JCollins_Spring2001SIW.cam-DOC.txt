A Sonar Environmental Effects ServerJoseph Collins, Bill SmithCode 5580, Naval Research Laboratory4555 Overlook Ave, SWWashington, DC 20375collins@ait.nrl.navy.milsmith@ait.nrl.navy.milSean CullenLockheed Martin Information Systems37 North Ave.Burlington, MA  01803Gerald StueveVisiTech, Ltd3107 N. 18th StreetArlington, VA 22201ABSTRACT: We built an environmental effects server using the PC Shallow Water Acoustic Toolset (PCSWAT) V5.5 for the Navy’s Fleet Battle Experiment-Hotel (FBE-H) in August/September 2000, demonstrating the utility of detailed oceanographic environmental data in simulations. PC-SWAT , developed by the Naval Surface Warfare Center in Panama City, Coastal Systems Station (CSS), was used to enable JSAF entities representing AQS-14 and AQS-20 sonars. The PC-SWAT environmental effects server was created by building a CORBA interface to JSAF and to PCSWAT.  PCSWAT was used stand-alone to compute various mine strengths. PCSWAT was used in server mode to accept detailed real-time environmental information and to compute signal to noise ratios by modeling the sound propagation and scattering from the bottom.Keywords: sonar, propagation, sound velocity profile, temperature, environment, littoral, acoustics, modelingIntroduction:In order to provide more realistic interactive simulations of mine-hunting operations, Navy sonars may be modeled using a sonar environmental effects server. Such a server can run in real-time, provide solutions to the sonar equation that are sensitive to changes in the ocean environment, and provide a uniform effects model for the many sonars simulated by the Navy. This is particularly valuable for exercises in shallow water, or the littoral regions, as the ocean environment there is highly variable. The littoral region has been identified as a key operational domain in the Navy’s “Forward…From the Sea” concept.We have built a sonar environmental effects server and used it to simulate two Navy sonars, the AN/AQS-14 and the AN/AQS-20x. The sonar platform dynamics were provided by JSAF entities. The sonar propagation model was a ray-trace model embedded in the PC Shallow Water Acoustic Toolset (PCSWAT) V5.5. PCSWAT 5.5 is provided as a Windows application that provides a generic ability to simulate sonars via a Graphical User Interface (GUI). In order to use PCSWAT we built a server interface using MICO, a GNU implementation of CORBA. The sonars were modeled setting the appropriate beam shapes and other parameters. Environmental data, required to compute a sound velocity profile (SVP) was provided by a variant of the Princeton Ocean Model. These simulated sonars were demonstrated in real-time at the Navy’s Fleet Battle Experiment-Hotel (FBE-H) in August/September 2000 using our server.PCSWAT V5.5The Personal Computer Shallow Water Acoustic Toolset (PCSWAT) was developed by the Naval Surface Warfare Center – Panama City, Coastal Systems Station (CSS). It consists of a set of executables with a Windows® GUI front-end. The PCSWAT GUI creates an input data file to the main executable. Through the GUI the user may specify sonar projector and receiver attributes, environmental attributes, bottom characteristics and target characteristics.For Sonar Projectors one may specify the pulse and beam parameters, such as intensity, length, frequency and bandwidth, shape, orientation and side-lobe strength. Similarly, the Sonar Receiver characteristics may be specified as well as the sonar platform’s position and velocity.For environmental information, PCSWAT accepts a user defined sound velocity profile (SVP) that varies with depth. The SVP depends on the temperature and salinity of the water column. Wind speed is used to determine the surface roughness, which affects the acoustic scattering model. Volume reverberation, which is typically a function of plankton densities, may be specified as may the background noise levels. The bottom characteristics are modeled using an APL/UW model. Bottom types that may be specified range from clays, silts and sands to gravel and rough rock.PCSWAT also provides a user with the capability to compute scattering strengths with an angular dependence using a variety of shapes for rigid targets.The PCSWAT ServerThe PCSWAT Server is a multithreaded Windows® application for interfacing clients with the PCSWAT application. PCSWAT Server returns a signal-to-noise ratio for targets. Calls to the PCSWAT Server are made by CORBA clients. The call interface is defined using an Interface Description Language (IDL) file. Data are sent to and received from the PCSWAT server by way of MICO, a Gnu Public Licensed implementation of CORBA.Using MICO, the server listens on an available port, typically 8888.  The client must know the host-name, IP address, and port of the server. After establishing a connection to the server, the client uses four functions to communicate with the server.  These functions are as follows:void 	returnSNR(in 	SonarProjector 	sonProj,in 	SonarReceiver 	sonRec,in 	Doppler 	dpplr,in 	SonarEnvironment 	snrEnv,in 	SVPdata 	svpdata,in 	Target 	tgt,in 	Bottom 	btm,out 	SNR 	result);void 	requestSNR(in 	SonarProjector 	sonProj,in 	SonarReceiver 	sonRec,in 	Doppler 	dpplr,in 	SonarEnvironment 	snrEnv,in 	SVPdata 	svpdata,in 	Target 	tgt,in 	Bottom 	btm,out 	long 	request_id);long pollSNR(in 	long 	request_id);void getSNR(in 	long 	request_id,out 	SNR 	result);SNR is the signal-to-noise ratio, a key input to a detection model to determine if a mine is detectable. The method returnSNR allows the client to encapsulate and transmit all the needed parameters describing the attributes of the sonar, the environment, the sound velocity profile of the water, the bottom type, and the target's range and bearing. The server queues up the call and executes the various calls from clients on a first come, first serve basis. The SNR is returned as a result. This is a blocking call for the client.CORBA Dynamic Invocation Interface (DII) services support the ability to execute this method as a deferred synchronous call, and provides for polling and a blocking call to return the results. We found, however, that with the MICO implementation of these services, polling never returned a positive result, even when the server had clearly completed the SNR computation. A non-blocking server was necessary because of the JSAF requirement to maintain at least a two hertz rate for several behaviors and the fact that the time involved in calculating a signal to noise ratio can take approximately one second. Multiple clients simultaneously querying the server could result in unacceptable delays for the clients.The methods requestSNR(), pollSNR(), and getSNR() provide an alternative interface for non-blocking service calls. The method requestSNR() provides the server with all of the same input information as returnSNR() does. After the server receives this information it is placed in a queue and the function returns immediately providing the client a handle to the request.  The method pollSNR() allows the client to check on the status of its request.  A boolean value is returned immediately that lets the client know if its request has been processed.The method getSNR() is a blocking call that returns the range and signal to noise ratio based on the parameters passed by requestSNR().  If the request has not yet been processed it will wait until the server gets to that request holding the client's thread of execution hostage.  Consequently, this is why it is important to first check the status of the request using pollSNR() first.The server creates a worker thread upon creation that continuously monitors the request queue for any inputs.  When an input is found the server removes the request from the queue and places it into an input file for the PCSWATM.EXE program from Coastal Systems Station.  PCSWATM.EXE is executed and that generates an output file.  The output file is parsed for the desired range's signal to noise ratio and that information is placed into a result queue.  A mutex is used when operations are performed on the queues to prevent errors resulting from simultaneous data access.Since all the parameters for a request are stored individually several different clients simulating different types of sonars can all request signal to noise ratios at the same time without reconfiguring the server.  MICO can handle multiple calls from several different clients at the same time, and since a handle is used for polling and retrieval of data the responsibility for retrieving a request is placed on the client.A simplified PCSWAT server has been tested with up to twenty test clients making a request and then waiting for a response.  The simplified server didn’t actually invoke the PCSWATM software but instead returned a default range and signal to noise ratio.  This allowed the server to rapidly receive and respond to multiple clients and ensure that no deadlock conditions existed between the two threads.  The PCSWAT server performed well with this free implementation of MICO proving it to be a viable solution for cross platform communication. EMBED Word.Picture.8Figure 2 The PC-SWAT acoustic sensor serverJSAFThe existing JSAF entities modeling the dynamics of the sonar platforms were replaced with entities that called the PC-SWAT server whenever the required environmental data was available.  If insufficient environmental data was available, the platform reverted to a look-up table for the sonar sensor. The client was integrated into JSAF 4.9 with a library called libpcswat.  This library takes as parameters both the name of the server machine and the port that it is running on.  MICO is initialized and libpcswat exposes a function for requesting a signal to noise ratio.  The SNR request function is passed a callback that is invoked upon discovery of the completed request.  Libpcswat is periodically ticked and during this time a call to the PCSWAT server is made to check on the status of any requests made.  If a request is ready, getSNR is called to retrieve the data and that is then passed on to the callback function.  Checks are also made before the callback is invoked to ensure the vehicle that made the request is still alive.Modeling the AN/AQS Sonars and TargetsThe typical sonar beam is bounded by an angular box defined by azimuthal and polar angle ranges, where the pole is defined by the motion of the sonar platform. The AN/AQS-14 and AN/AQS-20x platforms together include combinations of Side Scan and Volume Search sonars. We modeled the Side Scan sonars as a high frequency beam centered at broadside with a narrow polar angle and an azimuthal extent specific to the respective platform. We modeled the volume search sonar as a low-frequency beam, narrow in both the polar and azimuthal directions. The beam was oriented towards broadsides.The range to target was taken as the point of closest approach because of the broadside orientation of the beams. The targets themselves were represented by a single value for acoustic target strength. We used PCSWAT to compute target strengths for a variety of targets having cylindrical, spherical, conical, and ovoid shapes. These target strengths were calculated with their angular dependence and we chose a single, typical value to represent each target. Bottom attribution data was from NAVOCEANO for the area off Panama City, FL.In the simulation, each time a mine was passed within a query-box, the sound velocity profile (SVP), consisting of sound velocities at eleven depths, were computed using the temperature and salinity environmental data. PCSWAT used this SVP data to compute the propagation rays and SNR. Altogether, for each query approximately one hundred parameters were passed to the server. PCSWAT finished computing a value on a 500MHz PC usually between one-quarter of a second and a full second.In the simulation we sought to answer the question “With what probability would a given target be detected by sonar X?”  The detection probability was computed from the SNR using a model for the detection of a mine by an operator viewing a display. A draw from a uniform random number generator was compared to the detection probability to decide whether the mine was detected or not.Results and ConclusionsA usual number of integration issues arose and were addressed, including parameter semantics and domain definition. Occasionally PCSWAT would return bad SNR values which resulted from singularities in the underlying ray-trace model, but these happened outside the range of our sonars. Our greatest difficulty was in compensating for the deficiency of MICO regarding asynchronous querying. MICO also produced data marshalling errors when boolean variables were used in the struct definitions, and was unable to conveniently represent the IDL Sequence construct, but we were able to sidestep these problems. An initial system integration test was performed in April, 2000 at the Naval Research Laboratory. Bug fixes were completed by the end of August 2000 for FBE-H use.Tests were performed comparing the look-up table performance to the dynamic environment and sonar equation implemented by the team.  Performance of the sonars improved in that they were able to respond with more realistic detections appropriate to the environmental conditions. We found, for instance, that range of detectability could vary by as much as 50% in the same location due to the environmental variability.The PC-SWAT server provides a reliable environmental effects server solution for providing realistic acoustic sensor performance for the mine-hunting scenarios tested so far. Due to its inherent model limitations, PCSWAT does not currently provide realistic results for very low frequency propagation. Nevertheless, we expect to explore the capabilities for providing a more extensive array of sonar acoustic environmental effects.Future work also includes investigating the requirements for federating the PCSWAT Server. We anticipate this to be mostly a formality since the IDL specified CORBA interface provides a public object-oriented interface and the asynchronous, non-blocking queries accommodate real-time simulation. Additionally, since we integrated PCSWAT into simulations using our server, we have received an updated version, PCSWAT 6.0, which provides additional capabilities and effects. We anticipate incorporating this new version into the server.ReferencesJOSEPH COLLINS is a research physicist with the Naval Research Laboratory in Washington, DC.BILL SMITH is a research physicist with the Naval Research Laboratory in Washington, DC.SEAN CULLEN is a computer scientist with Lockheed-Martin Information Systems in Burlington, MA.GERALD STUEVE is a computer scientist with VisiTech, Ltd. in Arlington, VA. Fleet Battle Experiments are conducted by Navy Warfare Development Command, Maritime Battle Center,   Newport, RI. http://www.nwdc.navy.mil/command/BattleCenter/MBC.asp  Requests for PCSWAT (standalone) should be sent to:	Gary Sammelman, Code R22, Coastal Systems StationDahlgren DivisionNaval Surface Warfare CenterPanama City FL 32407-7001SammelmannGS@NCSC.NAVY.MIL  http://www.chinfo.navy.mil/navpalib/policy/fromsea/ffseanoc.html  ECOM - http://crusty.er.usgs.gov/ecomsi.html  APL-UW High-Frequency Ocean Environmental Acoustic Models Handbook, Applied Physics Laboratory, University of Washington Technical Report 9407, (October 1994).  http://www.mico.org/pilot/index.html  http://www.janesonline.com