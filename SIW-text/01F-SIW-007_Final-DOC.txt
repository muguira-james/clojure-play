A Generalized Unified Model (GUM) for C4ISR/Simulation InteroperabilityZach FurnessFrancis H. CarrThe MITRE Corporation7515 Colshire DriveMcLean, VA  22102-3481(703) 883-6614 HYPERLINK mailto:Zfurness@mitre.org zfurness@mitre.org(703) 883-6042 HYPERLINK mailto:carr@mitre.org carr@mitre.org Michael R. Hieb, Ph.D.IITRI/AB Technologies GroupSuite 4001901 N. Beauregard St.Alexandria, VA   22311-1705(703) 933-3376 HYPERLINK mailto:mhieb@iitri.org mhieb@iitri.orgKeywords: Technical Reference Model, C4ISR, Simulation, GUM, DII COE, HLA, Interoperability, JTA,ABSTRACT: The increasing need to improve interoperability between simulations and C4ISR Systems is a primary focus throughout the Department of Defense (DoD).  Currently, multiple reference models are applied within either the C4ISR or the simulation communities to facilitate design, development, and integration of these systems.  While these reference models are useful within their representative domains, a general purpose reference model is needed that can be used by both the simulation and C4I communities.  Without such a model, both sets of users are likely to continue to develop systems independent of one another, and build C4ISR-simulation interfaces that are not well integrated into both systems. This paper will describe a new approach, which specifies a layered "Generalized Unified Model" (GUM) that is designed to specify common functionality for both sets of users.  Each of the layers of the GUM references common underlying technology elements that exist in both C4I systems and simulations.  These elements could provide a means for understanding functions that are common to both systems – a necessary basis for improving interoperability. The paper will also provide several existing C4I/Simulation use cases using the GUM, which illustrate the model and demonstrate its usefulness.1. Introduction1.1 MotivationIncreasingly, C4ISR systems and simulations are being used together to support a wide range of military applications:Training.  In order to “Train the way we fight”, warfighters must be able to use their native C4ISR systems in training exercises.  However, today’s training places a premium on simulation use to realize advantages in cost and flexibility. Operational Analysis.  Simulation applications such as course of action (COA) tools and tactical decision aides (TDAs) are finding their way into operations and planning cells where they are being used to analyze data available from C4ISR systems [1].Experimentation.  The recent emphasis on joint experimentation combines the C4ISR-Simulation requirements from the training domains and operations analysis domains.Acquisition.  New C4ISR systems could benefit from the use of a simulation environment to stimulate and test them during all phases of development.Reference models are one way in which interoperability problems can help to be better understood.  For example, the Open System Interconnectivity (OSI) model has helped to improve interoperability among computers by defining a seven-layer reference model that groups common functions into “layers.” Application Program Interfaces (APIs) between components in these layers specify the details of the interface between components [2]. By doing this, complex problems involving interoperability between systems can be broken into smaller problems in a well-structured manner.Currently, there are multiple reference models used in either the C4ISR community or the simulation community.  While these models are useful within their individual domains, a general-purpose reference model that can be used by both groups is necessary.  Without such a model, both groups will never gain insight into the commonalities between their systems and will likely continue to build “stovepiped” interfaces that are not extensible to multiple systems.A reference model that can support both domains should have the following characteristics:It should be able to group functions that are common to both domains into layers.It should be able to help define APIs between components that exist within such layersIt should be able to help define transactions between multiple layers, as a mechanism for showing the end-to-end transfer of data between systems.A first step in working toward such a reference model is to understand what some of the similarities are between C4ISR systems and simulations.Figure 1:  The C4ISR/Sim “Principal of Equivalence”: C4ISR Systems and Simulation Workstations perform the same inherent function 1.2 Some General Similarities between C4ISR Systems and SimulationsWhen speaking about the similarities between C4ISR systems and simulations, it is probably more precise to compare similarities between C4ISR systems and simulation workstations.   This is because simulations themselves often contain no inherent human interface component.  However, when considering a constructive simulation in which a human is entering simulation commands and viewing results on a workstation display, many obvious comparisons stand out.Figure 1 shows graphically how the two systems are similar.  A commander of a real-world operation will use a C4ISR system to display data on unit locations and status of enemy units, while issuing orders to subordinate units.  In a similar fashion, a response-cell operator (or “puckster”) will use a simulation workstation during a computer-aided exercise (CAX) to monitor the state of the simulated operation, while issuing simulation commands to units under their control.This figure also highlights what we believe to be a basic underlying fact of C4ISR and simulation interoperability – one that we will refer to as the C4ISR/Sim Principal of Equivalence.  It says: “From the user perspective, the primary functions of a C4ISR workstation in management of battlefield operations and a simulation workstation in management of simulation of such operations, are equivalent”  Both simulation workstations and C4ISR systems contain a user interface, which allows the operator to enter commands that are processed by the software running on that machine.  Both C4ISR systems and simulation workstations contain user displays, which provide information on status and location of enemy and friendly units.  Of course, in the case of a simulation workstation the user is interacting with a representation of the real world. With a C4ISR system the user is interacting with data derived directly (although possibly not accurately) from the real world.Simulations and C4ISR systems both rely heavily on the maintenance and processing of data.  In the case of a simulation, the data represents state data relevant to the processes that the simulation was intended to represent.  Combat simulations typically will maintain data on unit locations, status (alive/dead), weapons capability, speed of movement, etc. This data also can be found on many C4ISR systems. The main differences with a C4ISR system is that the information is derived from the real world (sensor data, status reports, etc.) and is maintained in a different format.Because a simulation is built to represent some real-world physical process or phenomenon, it contains a mathematical abstraction of that phenomenon that can be used to derive data representative of it, for the user.  Algorithms that represent the movement of units, the attrition of forces in a battle, the rule-based decision processes of a commander, are all examples of such formulas.   C4ISR systems differ from simulations in that they typically do not contain such algorithms (since they derive much of their necessary state data directly from other real-world inputs (sensors, etc.).  However, C4ISR systems do use algorithms to manipulate data in ways that can help a user make decisions about how to react.  An excellent example would be a target priority algorithm in the Army’s Advanced Field Artillery Tactical Data System (AFATDS).  AFATDS that takes information on various observed targets and applies a set of rules to determine the order in which the targets should be engaged.Finally, both C4I systems and simulations each have management and execution software that governs the way in which their constituent processes run.  In the case of a simulation, a “Sim Engine”, or event scheduler oversees the execution of processes on that machine.  Processes typically initiate based on a set of rules defined by the event scheduler.  In a C4ISR system, an analogy to this kind of behavior is the operating system itself.  Processes built within the O/S (or applications closely tied to the O/S) handle such tasks as data transactions between processes and memory management.1.3 Perceived Truth and Ground Truth in C4ISR Systems and SimulationsThere is an important distinction between data in the C4ISR and simulation domains.  The term “Ground Truth” is used in the C4ISR realm to refer to the actual state of events on the battlefield.  This will be different than the “Perceived Truth” presented to a command staff operating with their C4ISR systems, since delays in data transmission and inaccuracies in reporting inevitably lead to differences in what is observed and what is occurring at that same time on the battlefield. No matter how accurate and timely a C4ISR system is, it will never be able to completely specify ground truth in an operation. A simulation that is “driving” a CAX will maintain a representation of the simulated battle and thus a “Simulated Ground Truth” of the operation. During a CAX, the C4ISR systems will generate a “Simulated Perceived Truth” picture of the battlefield, based upon delays and inaccuracies introduced by either the simulation or by the response cell operators.  This simulated perceived truth picture may be very similar to what one would expect to see in reality (depending upon the goals of the training exercise, and the validity of the simulation).  An important distinction to highlight here is that the simulation can maintain both a perceived truth and ground truth representation of reality.  A C4ISR system will always be limited (no matter how well designed) to maintaining perceived truth.2. A Generalized Unified Model (GUM) for C4ISR/Simulation InteroperabilityThis section provides the details on the GUM. It provides an overview of the model, details about each of its levels, and a description of its potential uses.2.1 Model OverviewReferring back to the previous section, there are four basic functions common to C4I and simulation systems:     User Interface FunctionsManagement and Execution Functions  Data FunctionsAlgorithm Functions By breaking the problem down in this fashion, each forms the basis of a reference model that can address both C4ISR functions and simulation functions. Figure 2 shows a depiction of such a layered model.  Several things are immediately apparent in this view.  First of all, one can observe a strong “user perspective” at the top of the layers, which depicts the entry point for data into the system (either in/out of the simulation or C4ISR system). Secondly, each of the layers in the model have interfaces to the other layers in the model.  For example, the User Interface layer has interfaces to the management/execution layer,  where commands are presented to the simulation to be acted upon.  The data layer and algorithm layers share interfaces that correspond to functions that are called in passing data to an algorithm to extrapolate new values based on the existing values.   Exchanges between simulations and C4ISR systems can occur at multiple layers in the GUM.  Information exchange at the user interface layer would correspond to situations in which data is read off of a C4I display by the operator and used to align data within a simulation system. This method of “fat fingering” is the current way in which many course of action simulations are initialized [3].  Exchanges that occur at the Management/Execution layer correspond to the passing of information via either simulation infrastructure (ALSP, DIS, HLA, SPEEDES) or basic operating system functions (FTP, email, etc.).  Direct data-to-data exchanges would correspond to those instances in which data is passed directly between databases, such as through database replication or direct SQL calls. In other cases, C4ISR systems have a simplified simulation capability built into them already and this interaction would represent the inter-process communication (IPC) or use of application programming interface (API) that occurs.  Figure 2.  Primary Layers of the GUMThe ability to exchange information at multiple layers of the model highlights another important feature of the GUM:  Interoperability can occur via multiple paths.  In other words, the GUM is not intended to prescribe any particular method of interoperability – it is intended to provide a framework for examining potential integration approaches between the underlying components in a C4ISR system and simulation.As mentioned before, one of the primary motivations for defining a reference model is so that APIs can be readily built between layers of the model.  Software components that are similar in function can be depicted within each layer of the model.  As new software modules are introduced, they will have well established APIs to other components that can be utilized.  In this way, interoperability and reuse between software components can be maximized.  The GUM provides a framework for supporting such definitions.C4ISR systems and simulations are often not thought of in terms of these categories. They are also not usually designed to be segmented into the function layers defined above.  More often than not, a software component internal to either a C4I system or simulation will span multiple layers of the GUM – providing capabilities of multiple layers within a single process.  For example, tools like the COE Message Processor (CMP) [4], a Defense Information Infrastructure (DII) Common Operating Environment (COE) segment that provides functions to allow an operator to view incoming messages, has functions related to both the User Interface and Data Layers of the GUM.2.2 Model DetailsIn this section, each of the layers of the GUM will be discussed further.2.2.1 User Interface (UI) LayerAs mentioned before, there are great similarities between user interface functions in a C4ISR system and in a simulation workstation. A predominant feature of the UI layer is typically a 2D map display, which takes representation of the geographic terrain and presents it to the user. The visual representation may come from common data formats (such as DTED data or NIMA maps) or may represent distilled results from these sources.Typically, a symbolic representation of known units appears on this display in appropriate locations on the map. It can also be covered with locations of other units, allowing access to further detailed information about units, and allowing user maintenance of information. Additional information regarding important points, areas, and operational symbols can be added via overlay editors, unit editors, or other tools. Additional displays are generally provided within this layer that provide the ability to communicate with other similar system, or to provide tasking to appropriate units. Using messages, orders, or other direct communication means, operators of both C4ISR or simulation systems can communicate with each other. Using sometimes similar and sometimes dissimilar means, operators of both systems can provide tasking to units that they control.2.2.2 Management / Execution (M/E) LayerAs with the UI layer, there are many components within the M/E layer which C4ISR and Simulation workstations have in common. Obviously, this includes the capability for similar workstations to communicate with each other using a common exchange protocol. Current C4ISR systems typically exchange information using host communications services such as transferring data records from local DBMS or formatted email messages. Simulations have used their own protocols and services developed for information exchange such as Distributed Interactive Simulation (DIS) protocol, Aggregate Level Simulation Protocol (ALSP), or the Higher Level Architecture (HLA) / Run Time Infrastructure (RTI).  Until recently, C4ISR systems did not have a need for exchanging information with simulation systems, so had not developed functions for initializing, executing, and utilizing simulations as part of using a C4ISR system.One of the current efforts of the DII COE M&S Technical Working Group (TWG) is the segmentation of the RTI as a DII COE component [5]. When this work is complete it will allow C4ISR systems to gain access to M&S data and services through the RTI, in much the same way that other simulations exchange data.  Although this is certainly not the only means by which C4ISR systems and simulations can exchange data, it will provide a bridge at the M/E layer that may simplify the exchange between a number of C4ISR systems and simulations. In addition, as M&S applications are integrated more and more with C4ISR systems, there will be infrastructure components already in place to facilitate the integration. The GUM could potentially provide the framework for better understanding how C4ISR components (databases, map displays, etc.) should be integrated with M/E functions like the RTI. We propose that judicious use of the GUM will provide a framework to examine migration and integration issues without the (often) substantial expense for software development. 2.2.3 Data LayerThe Data Layer is perhaps the most common layer between C4ISR systems and M&S applications. Both systems use files and data stores that represent information about terrain, force composition, and “current status” or “situational awareness”.  In a simulation, the results generated by movement algorithms, attrition algorithms, or other formulas are similar to the types of data that will be generated in real world operations from sensors and situation reports.  This was one of the reasons for distinguishing between the data and algorithm layers within the simulation side of the GUM.The M&S community has coined a phrase to describe these data stores: persistent data. “Persistent Data” is defined in [6] as “any static data that is set once during initial configuration of the system, and subject to limited (or no) modification during normal use. Examples of such data sources are databases that represent Unit Data (e.g. TOE, Symbology), Topographic or Terrain information, static Communications Plans, etc.”Non-Persistent Data, on the other hand, represents messages, or transaction based interactions between systems. For C4ISR systems, this would represent C4ISR messages, Operations Orders, Plans, or periodic database updates, to name a few. For M&S applications, Non-Persistent Data represents messages or updates exchanged between M&S applications, typically to share aspects of state changes in a distributed configuration. The importance of this layer is both in the exchange of information contained within the layer in each domain, and the exchange of components which operate on the data in the layer. For example, a “hard” problem in the integration of C4ISR and M&S systems for training is the initialization of persistent data for the purposes of exercise startup or restoration. This problem is important because in order to provide the “best” training experience, both C4ISR and M&S systems must be operating on the same terrain, using the same forces, and with the same “situation”. Sharing of components between systems speaks to the desire to improve the economics of systems development. If M&S systems are to communicate with C4ISR systems using C4ISR messages, then it would seem reasonable for M&S systems to use the same message formatting and transmission mechanisms as C4ISR systems do. This would suggest that M&S applications must be able to use such C4ISR components as the CMP. The authors propose that through the use of the GUM to explore and design integrated systems and integration strategies, significant cost savings for both C4ISR and M&S communities can be realized through reuse of components, rather then re-development. 2.2.4 Algorithm LayerThis layer is the most difficult to reconcile between the two domains.  Current C4ISR systems make limited use of algorithms that represent combat operations (such as movement and attrition) as part of the application systems. Algorithms that do appear within C4ISR systems tend to be fairly simplistic – for example, providing a linear extrapolation of intended movement. M&S systems, however, tend to contain more sophisticated versions of such algorithms, to provide a more realistic representation of combat operations.  As previously mentioned, many C4ISR algorithms are used to manipulate data as a means to formulating a decision – for example, a target priority algorithm, or an algorithm that determines the optimal distribution of logistics resources.  Such algorithms rely upon real world data as input, but do not necessarily represent real-world processes, as in a simulation.However, significant opportunities exist for integrating such simulation algorithms for use with C4ISR systems.  These algorithms, when coupled with data that exists in the C4ISR system (derived from real world sources) would allow C4ISR systems to run Course of Action (COA) analyses within their systems. Such capabilities would potentially provide a substantial set of operational tools to the C4ISR system user that could aid in COA design, analysis, or execution monitoring. The GUM provides a framework for addressing the integration of such algorithms in C4ISR systems.  Should such algorithms be accessed directly from the C4ISR system (from the algorithm layer of the C4ISR system) or is it easier to access them through an upper layer (M/E or data) of the reference model?  Again, the GUM does not prescribe which interface is best – it lays out potential paths for interoperability that must be accessed based on the specifics of the problem. Through use of GUM modeling tools, proponents of this work could examine the use or reuse of algorithms, as well as the impact to components within other layers. It could be used to see and establish the requirement for duplicate situation resources and tools to ensure the separate view of “actual” versus “simulated” changes. Another example might use multiple algorithms to produce expected results derived from various branches or “sequels” to a COA. Each one could be projected using the same set of visualization tools from the UI layer. 2.3 Using the GUMThe primary use of the GUM is as a way of specifying APIs between like simulation and C4ISR functions.  This can be an invaluable tool for determining where functional capabilities between C4ISR and simulation systems require interoperability and then providing APIs between such components.  It can also serve as a means for diagramming end-to-end transactions between systems. The GUM is meant to be a mechanism for determining potential interfaces between functional components, but not a means of standardizing on such interfaces.  For example, there are many potential paths between layers for transactions between M&S and C4ISR systems.  Data may be exchanged at the management/execution layer, or directly at the data layer (if for example databases are common between the two systems).  The GUM provides a means for understanding what those APIs need to be, but does not mandate any particular set of interfaces over another.  Such mandates are left to Simulation and C4ISR policy organizations to define and enforce.In the case of embedding simulations into the C4ISR, the GUM assists in identifying common components.  Once common components, such as terrain databases, can be used, the interfaces between separate C4ISR and simulation systems can be eliminated.3. Relationship of GUM to Other Reference ModelsIn the following section, the relationship of the GUM to other C4I and simulation reference models will be explored.3.1 DoD TRMAccording to the JTA, Version 4, the purpose of the DoD TRM is to “provide a common conceptual framework and a common vocabulary so that the diverse components within DoD can better coordinate acquisition, development, and support of DoD information technology” [7].  It is structured in a way that separates data from applications and applications from computer hardware platforms – a common theme in open system architectures.  The DoD TRM provides two “views” of its model – a service view, which groups similar software services by function and an “interface” view which documents interfaces between types of services.Many of the services defined within the DoD TRM are similar to the types of services that are necessary to establish C4I-Simulation interoperability.  For example, data management, data interchange services would naturally be mapped to the data layer of the GUM.  Likewise, User interface services would be mapped against the user interface layer of the GUM.  Communications services and Distributed computing services would map to the management/execution layer of the GUM.  It appears that many of the functional components of the GUM can be mapped to services in the DoD TRM.3.2 C4ISR/M&S TRMCarr and Hieb [6] developed a C4I/Sim Technical Reference Model (TRM) that calls out some of the primary data exchanges that occur between simulations and C4I systems.  One of the most important facets of this model is its ability to categorize such data exchanges in terms of persistent data, non-persistent data, and management-related data.  In addition, the C4I/Sim TRM decomposes some of the primary simulation functions such as environmental, human behavioral models, and run-time simulation processes.  Figure 3:  Mapping of GUM Against the C4I/SIM Technical Reference Model While useful, the existing C4I/Sim TRM does not provide a decomposition of C4I functions, analogous to the simulation decomposition.  However, by using the GUM framework, the C4I/Sim TRM can be superimposed on the GUM to show how the constituent parts of each model map against one another.  As might be expected, the exercise and runtime functions within the simulation map to the M/E layer of the GUM, while the scenario data and physical, environmental, and behavior models span the data and algorithm layers. Figure 3 is a graphical depiction of this mapping.3.3 DII COE ArchitectureThe DII COE Integration and Runtime Specification (I&RTS) mentions that the DII COE originated with a simple observation about command and control systems. It observes that certain functions (mapping, track management, communication interfaces, etc.) are so fundamental that they are required for virtually every command and control system [8].  The GUM makes a further assertion – that such functions are fundamental to the operation of both a C4I system and a simulation.  Therefore, it should be natural that there is a strong relationship between the two models.Figure 4 shows a notional view of how the GUM relates to the DII COE.  Within the dotted line, are listed several COE segments that relate to either C4I functions or simulation functions.  Outside of the dotted line, are simulation and C4ISR software components that are not currently within the COE.  Many of the layers in the GUM can be mapped to portions of the DII COE.  For example, the Kernel functions map well against the Mgmt/Execution layer of the GUM.  Data functions also map clearly between models.  While there is no specific “User Interface” layer in the DII COE, there are segments, which clearly address such functions – including the COE Message Processor and the Joint Mapping Toolkit (JMTK).  Finally, there is no specific notion of algorithm “segments” in the COE.  However, one could foresee the addition of such algorithms to the COE so that C4ISR systems could take advantage of them. This would allow analysis and planning functions to be performed, without needing the overhead of integrating large simulations into the COE or into their C4ISR systems. Figure 4:  Relationship of GUM to the DII COE 3.4 Levels of Information Systems Interoperability (LISI)LISI is a process for defining, evaluating, measuring, and assessing information systems interoperability [9]. LISI relies upon a common frame of reference and measure of performance between systems. Using the LISI Maturity Model, Capabilities Model, Assessment Process, and related tools, users have the capability to determine interoperability needs, assess the ability for systems to meet those needs, select pragmatic solutions, and develop a transition path for achieving other states of capability and interoperability. The LISI reference model is structured in such a way that it can be used to gauge the degree, or level of interoperability between two information systems.  In fact, LISI tools such as the “Inspector” allow one to input information into the tool which will generate a report that outlines how interoperable the two systems are.  Also, while the LISI model is composed of “layers”, the layers reflect different levels of interoperability – not functional layers as are outlined in the GUM.  Because of this, it is not apparent that one could define APIs between the layers of LISI, as one might do in the GUM.Despite these differences, it may be useful to apply both  LISI and GUM to address C4ISR and simulation interoperability.  LISI could provide insight into how interoperable a C4ISR and simulation currently are (or should be), while the GUM could provide a framework for designing possible solutions.4. GUM Use CasesThis section discusses two use cases involving transactions between C4ISR systems and simulations.  The first is an example from a training exercise, in which a simulation generates the appropriate C4ISR message stimulus for the training audience.  The second is taken from an example of a course of action simulation that is initialized from data that is available in a C4ISR system.4.1 M&S Stimulation of C4ISR for TrainingMilitary training exercises typically place a premium on using their native C4ISR system capability to train with (“train as you fight”) along with combat simulations to provide the stimulus to those C4ISR systems.  Such simulations generate  formatted C4ISR messages that arrive at and are processed by the C4I workstation.  Figure 5 shows how such a transaction would be performed using the GUM.Figure 5:  GUM Transaction Diagram:  M&S Stimulation of a C4ISR System At the command interface of the simulation, a response cell operator inputs commands that lead to the execution of some combat function within the model (movement of a unit, attack, collection of sensor data, etc.).  The simulation inputs are translated into events that are queued up and executed by the simulation engine (or event scheduler).  The corresponding algorithms that govern this function are invoked and generate changes in simulation state data that is input into the simulation’s truth database.  Similarly, truth data is corrupted based on the less than perfect capabilities of sensors, communications links, and reporting errors, that lead to corrupted state data that is maintained in the “perceived” truth database.  This perception of simulated truth is what is used to generate appropriate messages that are sent to the C4ISR system (SITREPs, Spot Reports, MISREPs, etc.).  Upon receipt of these messages, the C4ISR system displays the contents of the message to the user, via such components as the COE Message Processor.  In addition, most C4ISR systems parse the message and place relevant data on unit location, status, capabilities, etc, into their own C4ISR system database, that interfaces with map displays available to the user for monitoring of the operation.The example highlights several points about the GUM.  First of all, it helps to highlight the relationship of data between C4ISR systems and simulations.  In traversing the path between perceived truth data in the simulation and the C4ISR database, only the format of the data is modified – not its values. Only in instances where the underlying simulation algorithms change the state of the perceived data (due to environmental impacts on sensors, or delays in processing reports) does the value of such data change.  4.2 M&S Initialization of C4ISR for COAAs in Figure 5, the GUM can be used to show the transactions that occur between a C4ISR system and a simulation when invoking a simulation application for performing a COA analysis.  The example is based on current work that is being performed between the Naval Research Lab (NRL), SPAWAR, and DMSO in initializing the Naval Simulation System (NSS) from data available in the Global Command and Control System (GCCS) [3].  Figure 6 portrays the transactions that occur between these two systems.Figure 6:  GUM Transaction Diagram:  Initialization of a COA Simulation from a C4ISR System In the diagram, the Track Database Manager (TDBM) contains current information on relevant tracks of ships, aircraft, and ground units of interest to a GCCS operator.  Such track data is typically derived from messages received via OTH-Gold messages.  The TDBM interfaces with a component known as the “GCCS Ambassador”, whose role is to provide an interface between the RTI and the TDBM.  At the appropriate time, a GCCS operator can select which tracks are of interest to export to NSS for analysis in a COA. They are then sent over to NSS via the Ambassador and the RTI.  Upon receipt at NSS, the track data is incorporated into the appropriate simulation databases and used as input for the COA.5. SummaryThe GUM appears to be a reasonable mechanism for characterizing interfaces between C4I systems and simulations.  It has many of the same attributes of other reference models, including well-defined layers, grouping of functional elements at each layer, and the potential to define APIs between products at different layers.  It also may be able to serve as a way of mapping to other models such as the DII COE, the DoD TRM, the existing C4I/SIM TRM, and LISI.Much work still needs to be done, to determine if the GUM should evolve into its own stand-alone reference model, or if its basic ideas can be reflected in other well established models.  Further investigation is warranted to understand the GUMs relationship to some of the reference models mentioned above.In September 2000, SISO stood up a C4I-Simulation Technical Reference Model (TRM) Study Group to explore the notion of developing a standard reference model for C4I-Simulation Interoperability.  Several of the models mentioned in this paper are under consideration in that forum, including the GUM.  It remains to be seen whether the GUM, an existing reference model, or some combination of reference models is one that can best serve the C4I-Simulation community.  An update on the activities of the C4I-Sim TRM Study Group is provided in [10].One area that requires further investigation in the GUM is the notion of detailed layers within each of the four layers listed in this paper.  For example, the data layer may lend itself to decomposition into sub-layers dealing with data management tools, data translators, as well as actual databases.  The Management / Execution layer can probably be broken down further into functions that handle distributed runtime simulation processing (HLA, SPEEDES, DIS, ALSP) and other functions which are focused on process management (O/S).6. AcknowledgementsThe authors would like to express deep appreciation to the many individuals who reviewed this paper. Zach Furness and Frank Carr were supported by DMSO during the development of the GUM.  Dr. Hieb was supported by the Office of the Director for Information Systems for C4ISR of the Army, the Army Modeling and Simulation Office (AMSO) and the Overarching Initial Product Team for Simulation to C4ISR Interoperability (SIMCI OIPT) while writing this paper.7. References[1]	Tolk, A., and Kunde, D., "Decision Support Systems-Technical Prerequisites and Military Requirements", Proceedings of the 2000 Command and Control Research and Technology Symposium, June 2000.[2]	Spragins, John D., Hammond, Joseph L., and Pawlikowski, Krzysztof: Telecommunications, Protocols and Design, Addison Wesley, 1992.[3]	Prochnow, Dave L. et al, “The NSS-GCCS Federation:  Course of Action Analysis Using a C4I-Simulation Interface”, Paper 01F-SIW-059, 2001 Fall Simulation Interoperability Workshop, 2001.[4]	PEO C3S: COE Message Processor http://www. monmouth.army.mil/peoc3s/chs/cmp.html, 1998.[5]	Layman, G.E., Furness, Z., Daly, J., Womble, J., “GCCS Federation Applications Using HLA and the DII COE”, Paper 01S-SIW-044, 2001 Spring Simulation Interoperability Workshop, 2001[6]	Carr, F.H. and Hieb, M.R.: “Issues and Requirements for Future C4I and M&S Interoperability”, 7th Conference on Computer Generated Forces and Behavioral Representation, 1998.[7]	Department of Defense: Joint Technical Architecture, Version 4.0, 2 April 2001.[8]	Joint Interoperability and Engineering Office, Defense Information Systems Agency:  DII COE Integration & Runtime, Version 4, 25 October 1999.[9]	C4ISR AWG, “Levels of Information Systems Interoperability (LISI)”, 30 Mar 1998.[10]	Myers, Maj L. et al, “Interim Report of C4I-Simulation Technical Reference Model Study Group”, Paper 01F-SIW-094, 2001 Fall Simulation Interoperability Workshop, 2001Author BiographiesZACH FURNESS is currently the Project Lead in support of  the Defense Modeling and Simulation Office (DMSO) within the MITRE Corporation.  His primary role at DMSO is the oversight and execution of the C4I-Simulation interoperability program.  Mr. Furness is also the Technical Working Group (TWG) chair for the M&S TWG within the DII COE Architecture Oversight Group (AOG).  Prior to supporting DMSO, Mr. Furness led the MITRE Systems Engineering team that supported the development, integration, and testing of the Joint Training Confederation (JTC).  He joined MITRE in 1990, after received a Master’s degree in Electrical Engineering from Virginia Tech.  He also holds a Bachelor’s degree in Physics, also from Virginia Tech.FRANCIS H. CARR is a Lead Software Engineer with the MITRE Corporation and has been with the Information Systems and Technology Division since February 1996. His software development experience reaches back to 1975, and includes work in Artificial Intelligence, Reliability Engineering applications, Mathematical Systems Modeling, and Business systems development. At MITRE, Mr. Carr has worked with both civilian (FAA) and military simulations, and has been involved with research, analysis, design, and development of Simulation and C4I Interfaces. His current efforts include exploration of Thin Client Architecture use with ABCS systems, development of the Technical Requirement Specification for the DII COE M&S TWG, refinement of the C4I-M&S Technical Reference Model, and advising activities for DII COE M&S TWG, DISA, DMSO, and other Sponsors. Mr. Carr is a graduate of Boston University and lately from George Mason University with an MS in Software Engineering.MICHAEL HIEB is a senior scientist with the IITRI/AB Technologies Group.  Dr. Hieb was the architect of the MRCI interface project while at SAIC.  He received his PhD in Information Technology at George Mason University in 1996, developing an instructable Modular Semi-Automated Forces agent.  He performed his doctoral research at the Center for Excellence in Command, Control, Communications and Intelligence at GMU.  He has published over 35 papers in the areas of learning agents, knowledge acquisition, interface technology and multistrategy learning.  When working for IntelliTek, Dr. Hieb implemented a distributed problem-solving testbed at the Goddard Space Flight Center.  Previously, he worked as a Nuclear Engineer for General Electric.PAGE   PAGE  2P