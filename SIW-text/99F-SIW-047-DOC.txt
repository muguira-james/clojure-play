Object Templates to facilitate Interoperability between RepositoriesSabrina S. KwanInnotiv Incorporated8799 Balboa AvenueSan Diego, CA 92123619-268-1102 x208kwan@innotiv.comGary GaringoInnotiv Incorporated8799 Balboa AvenueSan Diego, CA 92123619-268-1102 x206garingo@innotiv.comKeywords:Interoperability, Interfaces, Templates, Syntax, MSRR, RDF, XMLABSTRACT: The authors, in support of defining interoperability standards for DoD Repositories, will develop a object template model to describe affiliated Modeling and Simulation Resource Repository (MSRR) objects.  An object model will be defined that includes a generic object representation of an M&S repository system.  The model will include a set of interfaces that describe a standard set of external behavior for the objects.  The object representation should also allow implementation independence, so those components can be developed by different organizations, on different computing platforms, and in different programming languages.  The model will promote the exchange, reuse, and standardization in development of services for resource repositories.BackgroundThe Modeling and Simulation Resource Repository is a Department of Defense information system. The MSRR supports discovery, registration, cataloging, and access of various types of resources pertinent to the Modeling and Simulation community.  The MSRR is sponsored and operated by the Defense Modeling and Simulations Office and participant organizationsThe MSRR collection of Modeling and Simulation (M&S) resources include models, simulations, object models, Conceptual Models of the Mission Space (CMMS), algorithms, instance databases, data sets, data standardization and administration products, documents, tools and utilities. The MSRR "system of systems" calls for a federation of resources hosted on a distributed system of resource servers.  These servers are interconnected through the World Wide Web (WWW).  The MSRR provides a layer of services that includes the registration of resources and users, description and quality information of resources, and specialized search capabilities.The current MSRR architecture investigations are attempting to propose a common integrated architecture to facilitate interoperability among resource repositories and promote reuse of  service components.  In support of these general goals, we are investigating the feasibility of using a common Object Template Model (OTM).  This model would describe the data discovered or exchanged between multiple repository systems at run time.  This paper will provide a framework for exchanging machine understandable descriptions of MSRR objects using templates.   The MSRR will benefit from an inter-repository interaction that uses template interfaces to support information exchange such as data and metadata.  (Metadata is “data describing data”, such as data type and size.)   In object-oriented technologies, an object consists of two elements: a defined set of data (attributes) and a group of methods. A method is typically a function or a procedure that performs a specific action and can be called by a process using the object.  An interface may have a number of methods. An object’s private data, or attributes, may only be accessed indirectly through invoking a method in its interface.  In an interoperability environment, a MSRR object is a collection of interfaces that describe a standard set of external behavior.  An interface serves as a contract between the object and external processes. The World Wide Web Consortium’s (W3C) Resource Description Framework (RDF) [4,5] model is a recommendation for representing metadata.  RDF can be used as a syntax for MSRR OTM.   RDF and MSRR OTM share the goal of providing interoperability between applications that exchange machine-understandable information.  RDF enables automated discovery and processing of metadata representations. RDF uses Extended Markup Language (XML) [1], a W3C standard, to define a foundation for processing metadata.  With these various Web data standards, it will be possible to develop and deploy applications that are interoperable.  XML was designed for encoding human-readable documents.  RDF was designed to facilitate a variety of metadata communication functions.  Whereas XML can be used as a general way to transport data, RDF extends XML to provide a format to describe metadata of the transported data.  Consider this simple example:The POC of  the of the document resource “MSRR Task Force Report” is “Bill Smith”.This sentence can be represented in various XML statement structures.  For example, it can be represented as:<?xml version="1.0"?><Resource><Type>Document</Type ><Title>MSRR Task Force Report</ Title><POC>Bill Smith</POC></Resource>or may be represented as:<?xml version="1.0"?><Resource><Title>MSRR Task Force Report</ Title><Details>	<Type>Document</Type >	<POC>Bill Smith</POC></Details></Resource>To an XML parser, these two XML statements represent different statement structures and, therefore, produce different XML trees.  When the above example sentence is expressed in the RDF syntax below, it will communicate to the parser enough information to derive a data model as shown in Figure 1.1. <?xml version="1.0"?><rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns# "xmlns:s=”http://msrr.dmso.mil/schema"xmlns:r=”http://msrr.dmso.mil/schema/resource-info"xmlns:p=”http://msrr.dmso.mil/schema/person-info"><rdf:Description about="MSRR Task Force Report">	<s:Objectinfo>		<s:Objtype>Resource</s:Objtype><r:Restype>Document</r:Restype >		<p:POC>Bill Smith"></p:POC>	</s:Objectinfo></rdf:Description></rdf:RDF>The basic RDF data model consists of four components: resource, properties, literal, and statements.  A resource is the subject being described in a RDF statement.  A property is used as a predicate to describe the resource.  A literal is the property value.  A statement is a triple of the form {predicate, subject, object}.  In both RDF representation above and Figure 1.1 below, the “MSRR Task Force Report” is the resource, or the subject.   "Objectinfo", "Objtype", "Restype", and "POC" are the properties for the subject.    "Resource", "Document", and "Bill Smith" are the property values. When the XML data is declared to be of the RDF format, applications will be able to understand much of the interpretation of the data. The data model representation may be used to evaluate equivalence in meaning.  Two RDF statements are equivalent if and only if their data model representations are the same.  RDF may also be used to represent relationships between resources.  This gives Web users the benefit of generic metadata processing tools that will be reuseable across a variety of metadata application domains.MSRR OTM Syntax and Templates2.1	Object Template Model MSRR OTM consists of  two components: a syntax (RDF) and a set of templates that are written in that syntax.   Alternative syntaxes that can be used for a MSRR OTM are XML Schema [2, 3], PICS [7], and Dublin Core MetaData Initiative [6].   RDF was chosen because of its inherent and extensible support for web resources.MSRR OTM syntax defines vocabularies that might be needed for describing different types of MSRR objects in their application domain.  For example, MSRR resource object vocabularies may include "title", "URL", "Protection Flag", and Resource Owner".  In addition, MSRR OTM syntax also defines the relationships between these properties (vocabularies) and other objects.  MSRR OTM syntax provides a basic typing system in the context of RDF. MSRR OTM templates are a set of statements for articulating the object interfaces.  A template describes at least the following for MSRR objects:Object identification: to associate important identification information, such as repository name, object version, application domain, and MSRR OTM syntax version.Object Interface name:  to specify the name(s) of interfaces provided in the object.Object Interface method name - to specify the method names provided in each interface.Object Interface method parameters - to specify the parameters provided in each method, such as parameter names and type.Sub-objects that are accessed via the interface.  This includes attributes and methods accessible in each sub-object.  This may also include mappings to a standard data dictionary.The MSRR OTM provides the interface specification for repository objects, but does not provide the runtime infrastructure or internal services. It requires a runtime infrastructure to interpret the statements in the templates and execute the specified interfaces.   MSRR OTM may be used to describe data provided by an object, but it does not specify a mechanism for reasoning, such as how to use or filter the data.  A reasoning mechanism could be built on top of this framework.A template for specifying MSRR objects is considered to be an important component of the MSRR for the following reasons:It provides a commonly understood mechanism for specifying the exchange of data between multiple repositories.It facilitates the design and application of common tool sets for development of MSRR objects.It helps processes work together in a manner that is flexible and/or adaptable to change and behavior.2.2	Example Syntax for a MSRR Resource ObjectExamples of MSRR objects are User, Resource and Repository.  In this example, we sketch an outline of MSRR OTM vocabulary for use with the MSRR resource object.  A MSRR resource object "Resource" is a sub-class of RDF "Resource".  A MSRR resource may have properties (attributes): resourceType, resourceTitle, resourceURL, resourceProtectionFlag, and resourceOwner.  Both "range" and "domain" are used to describe constraints of the properties.  In this example, the values of these properties are literal.   <?xml version="1.0"?><RDF xmlns:rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# xmlns:rdfs="http://www.w3.org/TR/1999/PR-rdf-schema-19990303#"><rdfs:Class  rdf:ID=”Resource”rdfs:comment="This describes the class of MSRR resource."> 	<rdfs:subClassOf resource=”http://www.w3.org/TR/1999/PR-rdf-schema-19990303#Resource"/></s:Class><Property ID=”resourceType”> 		<rdf:domain rdf:resource=”#Resource”rdf:range=”http://www.w3.org/TR/1999/PR-rdf-schema-19990303#Literal"/></rdf:Property><rdf:Property ID=”resourceTitle”> 		<rdf:domain rdf:resource=”#Resource”rdf:range=”http://www.w3.org/TR/1999/PR-rdf-schema-19990303#Literal"/></rdf:Property><rdf:Property ID=”resourceURL”> 		<rdf:domain rdf:resource=”#Resource”rdf:range=”http://www.w3.org/TR/1999/PR-rdf-schema-19990303#Literal"/></rdf:Property><rdf:Property ID=”resourceProtectionFlag”> 		<rdf:domain rdf:resource=”#Resource”rdf:range=”http://www.w3.org/TR/1999/PR-rdf-schema-19990303#Literal"/></rdf:Property><rdf:Property ID=”resourceOwner”> 		<rdf:domain rdf:resource=”#Resource”rdf:range=”http://msrr.dmso.mil/schema/person-info#Person”/></rdf:Property></rdf:RDF>2.3	Example Template for a MSRR Resource ObjectBelow is an example of how a MSRR resource object might be represented using the RDF format and a set of predefined MSRR OTM syntaxes for MSRR Resource, User, and Interface.  In this example, the resource object is from the DMSO site.  It supports one standard resource function "getCurResourceAll" via the resource object interface named "getCurrentResource".   This function can be accessed on the World Wide Web via the specified URL.  The output is a set of XML statements with the specified tags corresponding to the properties identified in the MSRR OTM syntax for MSRR resource.<?xml version="1.0"?><rdf:RDF xmlns:rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# xmlns:rdfs="http://www.w3.org/TR/1999/PR-rdf-schema-19990303#"xmlns:m=”http://msrr.dmso.mil/schema"xmlns:i=”http://msrr.dmso.mil/schema/interface-info"xmlns:r=”http://msrr.dmso.mil/schema/resource-info"xmlns:p=”http://msrr.dmso.mil/schema/person-info"><Description about="DMSO Resource"><m:description>This template describe DMSO repository resource.  For demonstration purposes only.</m:description>	<m:objectID>		<m:nodeName>DMSO</m:nodeName>		<m:objVersion>2.4.1</m:objVersion>	</m:objectID>	<i:interface>			<i:interfaceName>getCurrentResource		</i:interfaceName>		<i:method>			<i:function>getCurResourceAll</i:function>			<i:methodType>WWW</ i:methodType>				<i:methodName>			https://msrr.dmso.mil/servlet/getCurResAll		</ i:methodName>			<i:inputParm></i:inputParm>			<i:outputParm>				<i:outputType>XML standard</i:outputType>				<i:output>					<r:Resource>Resource</r:Resource>					<r:resourceType>Type</r:resourceType>					<r:resourceTitle>Title</r:resourceTitle>					<r:resourceURL>URL</r:resourceURL>					<r:resourceProtectionFlag>						Protection					</r:resourceProtectionFlag>					<r:resourceOwner>POC</r:resourceOwner>					<p:personID>PERID</p:personID>				</i:output>			</i:outputParm>		</i:method>	</i:interface>	</Description></rdf:RDF>3.  Proposed Experiments One important MSRR interoperability goal is to provide the capability to discover MSRR resources.  The experiment discussed in this section will be conducted between a MSRR Peer Node and DMSO nodes.  The experiment will demonstrate at least the following:A set of MSRR OTM syntax for objects and/or functions needed in the Distributed Search for MSRR resources. A set of  MSRR OTM templates for objects needed in the search.A prototype using the proposed MSRR OTM templates to facilitate the Distributed Search. Example objects involved in the Distributed Search are:  Resource, User (as resource owner or point of contact), and Repository (or Node).The MSRR OTM is intended to provide the interface specification for repository objects.  Although it does not provide the runtime infrastructure or internal services, it will require the use, or development, of the following tools in addition to the modification of the existing Distributed Search component for the experiment prototype:An RDF processor for compiling the MSRR OTM syntax schemata and templates.A set of tools or services for loading, interpreting, and applying the MSRR OTM templates to fulfill the Distributed Search requests. A number of commercial and noncommercial groups are designing RDF software. Two examples of these activities include SiRPAC and IBM RDF processor.   SiRPAC is a W3C Simple RDF Parser and Compiler.  It also has a demo for an interactive compilation and visualization service.  The IBM product provides a Java implementation of RDF for creating technologies that search for, describe, categorize, rate and manipulate data. 4.	References[1]	T. Bray, J. Paoli, C. M. Sperberg-McQueen, editors: “Extensible Markup Language (XML) 1.0”, W3C Recommendation, February 1998.[2] 	D. Beech , S Lawrence, M. Maloney, N. Mendelsohn, H. Thompson, editor:"XML Schema Part 1: Structures"  W3C Working Draft, May 6, 1999.[3] 	P. V. Biron , A. Malhotra , M. Maloney, N. Mendelsohn, H. Thompson, editor:"XML Schema Part 2: Datatypes"  W3C Working Draft, May 6, 1999.[4]	O. Lassila, R. Swick, editors: “Resource Description Framework (RDF) Model and Syntax Specification”, W3C Recommendation, Feb 22, 1999[5]	D. Brickley, R,V. Guha, editors: “Resource Description Framework (RDF) Schema Specification”, W3C Proposed Recommendation, March 3, 1999[6] 	 S. Weibel, J. Kunze, C. Lagoze, M. Wolf, editors:"Dublin Core Metadata for Resource Discovery", IETF #2413. The Internet Society, September 1998. [7] 	J. Miller, editor:"Rating Services and Rating Systems (and Their Machine Readable Descriptions) Version 1.1."  W3C Recommendation, October 31, 1996.Author BiographySABRINA KWAN is a Senior Software Engineer at Innotiv Incorporated, San Diego, CA.  At Innotiv, she integrates Internet software to facilitate information registration, access control and resource delivery.  She is a certified system administrator and designer for MSSQL 6.5.  She obtained her B. S. at Brock University in Ontario, Canada, and her M. S. at University of Western Ontario in Canada.  GARY GARINGO is a Senior Software Engineer at Innotiv Incorporated, San Diego, CA.  At Innotiv, he integrates Internet software to facilitate information access and retrieval.  Gary is a System Engineer for the MSRR Technical Support Team.  He obtained his B. S. in Electrical Engineer at California State Polytechnic University, Pomona and his M. S. in Software Engineering at the Naval Postgraduate School.	 EMBED PowerPoint.Slide.8  