Human Behavior Modeling in the Joint Integrated Mission ModelGordon D. Long and David W. MutschlerNaval Air Systems Command (NAVAIR) Air Combat Environment Test & Evaluation Facility (ACETEF) 48150 Shaw Rd.  Bldg 2109, S115, Patuxent River, MD 20670gordon.long@navy.mil, david.mutschler@navy.milGary LohmanAMEWAS, Inc.22560 Epic Dr., Suite 103, California MD 20619garylohman@amewas.comKeywords:JIMM, ACETEF, Tactics, BehaviorNAVAIR Public Release 06-0152Distribution Statement A – “Approved for public release; distribution is unlimited”ABSTRACT:  The Joint Integrated Mission Model (JIMM) is a general-purpose mission-level model with an extensive number of users.  It is most commonly used to generate complex tactical environments for aircraft-related analysis or testing, although its applicability is much broader.  JIMM contains an explicit human behavior model that can be tailored by the user to address specific needs or concerns.  JIMM is a discrete-event simulator; it explicitly models thinking events.  Its internal treatment of these events allows it to support complex human behavior representations in simulations involving thousands of entities.  JIMM is also language-based; all aspects of modeled entities, including tactics and behavior, are described using the JIMM Conflict Language (JCL).  JCL contains a number of features that allow the user to model human thought processes and decision-making within a given problem domain, and to tailor a player’s tactics to address specific user needs.This paper describes the mechanisms that JIMM uses to support tactical decision-making and behavior in order to increase the realism and utility of complex synthetic warfare environments.The Joint Integrated Mission Model The Joint Integrated Mission Model (JIMM) is a general-purpose, language-based discrete event simulator [1][2].  It is the primary simulation model employed by the NAVAIR Air Combat Environment Test & Evaluation Facility (ACETEF) and was the primary model within the Joint Strike Fighter (JSF) Strike Warfare Collaborative Environment (SWCE).  JIMM can be used for many purposes, but in practice it has most often been used as an environment generator for aircraft-related analysis and testing.  It supports installed systems test, both man-in-the-loop and hardware-in-the-loop, by generating the threat environment and controlling the integrated operation of multiple interfaced simulators within a virtual environment.  It has also been used for studies regarding human performance [3], weather [4], radar simulation [5], and unmanned aerial vehicle swarms [6].  There are different versions of JIMM; in cases where there may be discrepancies; this paper discusses the behavior implemented in JIMM ACE 5.0, which was released in June 2006.One of JIMM’s strengths is its behavioral model and its ability to represent human decision making in a tactical domain.  JIMM provides a powerful and flexible set of tools that can be used to represent tactics and behavior at varying levels of detail.  JIMM players – both individual entities and aggregations – operate according to their own sets of user-defined tactics and capabilities.  Each player has a set of sensory perceptions that function like active short-term memory.  These perceptions may correspond to ground truth, or they may represent a belief derived from imperfect or incomplete evidence, and they may even expire.   In addition, each player controls a set of resources that it can allocate in response to perception-driven events, and each is capable of readjusting the way it perceives its environment.  All of these capabilities are controlled by the user, who uses the JIMM Conflict Language to define and modify tactical behavior appropriate to a given situation.  In this manner, JIMM is capable of addressing a recognized need for situation-specific modeling, representation of larger units and organizations, and agreement between the behaviors of modeled forces [7].   JIMM PlayersTactics and behavior apply to JIMM constructs known as players.  The JIMM player structure and hierarchy is described in detail elsewhere [1][2]; a simplified discussion is presented here.  A player is the main simulation object within JIMM.  It represents a real-world object at a user-defined level of detail.  A player will often represent a single entity, but it may also represent a collection of entities.  For example, one player can represent a single F/A-18 aircraft, or it can represent one division composed of four F/A-18 aircraft.  Players are composed of platforms, which represent individual entities with unique position and orientation characteristics.  For example, if a player were to represent a division of four F/A-18 aircraft, that player would likely be composed of four platforms, with each platform representing a single physical aircraft.  Platforms, in turn, are composed of elements.  The element level is where damage is resolved and where signatures are assigned for detection.  Finally, elements are composed of systems.  Systems are the most fundamental simulation units within JIMM; all functions within JIMM operate through the use of a system.  There are six generic types of systems within JIMM: sensors, communications systems, disruptors (jammers), weapon systems, mover systems, and thinker systems.  Each system type has is own unique set of characteristics.  A defined set of characteristics for a system (i.e. the characteristics combined with actual values for the parameters) is referred to as a capability.   The hierarchy of players, platforms, elements, and systems is summarized in  REF _Ref139381629  \* MERGEFORMAT Figure 1.Figure  SEQ Figure \* ARABIC 1 – JIMM Player StructureAlthough thinking and decision-making is implemented through the use of thinker systems, all tactics are associated with the player.  It is the player, as opposed to the platform, element, or system, that retains information about its environment and decides which action to take according to its user-programmed tactics [2].  In human behavior modeling, the association of tactics with the player, combined with the ability of a player to model either an individual entity or an aggregation, allows JIMM the ability to handle multiple concurrent levels of abstraction.  This is key to simulating larger units and forces, as well as realistically representing behaviors of both individuals and groups independently and in interaction. In JIMM scenarios, players can be aggregated and disaggregated.  For example, an aircraft may be an aggregate part of an airfield, but become a separate individual when it launches according to some tactic.  This concept can be extended, for example, to give an individual aircraft certain abilities only when aggregated with a pilot.  PerceptionsIn JIMM, a player’s knowledge of its environment is obtained largely through perceptions.  Specifically, a perception represents one player’s knowledge of another player.  In human behavior terms, JIMM perceptions are like active short-term memory in that they lie at the core of driving decisions (simulation events) and resulting actions. There are two types of perceptions:  cooperative and non-cooperative.  A cooperative perception (more commonly known as a perceived friend) implies complete and perfect knowledge of the other player.  This type of perception applies to the player itself (i.e. it has perfect knowledge of its own state), as well as to commanders, peers, and immediate subordinates within the player’s command chains.  The cooperatively-perceived players are commonly referred to as “friends”.Non-cooperative perceptions (also known as targets) do not imply complete understanding of the other player’s data.  These types of perceptions can only be acquired or updated via a direct sensing or a communication.  Thus, data in this perception may be out of date or even incorrect.  Since non-cooperative perceptions are defined by incoming evidence, JIMM can support important human behavior concepts such as deception and misinformation, thus making it possible to simulate important behavioral concepts like the fog-of-war and elements of espionage.Non-cooperative perceptions are taken against a target platform, i.e. they work at the platform level rather than the player level.  For this reason, the target of a non-cooperative perception is often known as a perceived platform.  JIMM Conflict LanguageUsers interact with JIMM by using the JIMM Conflict Language (JCL).  Unlike many other simulations, JIMM does not have an internal representation of aircraft, ground units, or any other real-world platform.  Instead, the user defines players, platforms, etc. in JCL.  These definitions are stored in ASCII files, which are read and processed by JIMM.  In this sense, therefore, JIMM is fundamentally a language processor.  An example of JCL is shown in Figure 2, in which a player type called “MyRadar” is defined.  This MyRadar player type consists of one platform (“MyRadar_plat”), which is composed of one element (“MyRadar_ele”), which in turn consists of three systems: a radar transmitter, a radar receiver (linked to the transmitter), and a thinker system.  PLAYER-STRUCTURE MyRadar   TACTIC MyRadar_tactics   PLATFORM 1 MyRadar_plat      ELEMENT 11 MyRadar_ele          DISCRETE QUANTITY: 1         SUSCEPTIBILITY MyRadar_sig         THINKER 111 MyRadar_thk            CAPABILITY MyRadar_thkdata         SNR-RCVR 1111 MyRadar_rx            CAPABILITY MyRadar_rxdata         SNR-XMTR 1112 MyRadar_tx            CAPABILITY MyRadar_txdata   LINKAGES      111 WITH 1111   1111 WITH 1112END PLAYER-STRUCTUREFigure  SEQ Figure \* ARABIC 2 - Definition of the MyRadar player type in JCL.  This figure gives an example of how the player hierarchy (player, platform, element, system) is specified by the user.  Note that the tactics (“MyRadar_tactics”) are at the player level.  The SUSCEPTIBILITY keyword indicates signature data, which is at the element level.  There are three systems: a thinker system (to implement the tactics), a sensor receiver system, and a sensor transmitter system, each with its own unique capability.  The actual definitions of the capabilities (such as “MyRadar_thkdata”) appear elsewhere in the input file, i.e. they are not shown in this figure.Tactics in JCLTactics define how players think and make decisions within the model [2].  JIMM tactics are rule-based, and are roughly organized into categories that support two aspects of human decision-making and cognition.  The first relates to a stimulus-driven process of choosing among competing actions, and the second relates to the modification of beliefs based on incoming evidence.  Using JCL, the user can program two corresponding types of tactics and behavior.  The first type, known as reactive behavior, dictates a player’s immediate response to some set of conditions in its environment.  These conditions are usually related to other players or platforms, for example, the initial detection of a target.  The second type, known as “pondering”, simulates the ability for a player to alter the way it thinks about its environment, such as changing plans, deciding on new rules of engagement, etc.   This function is purely introspective, and does not require any external stimulus from the player’s environment.Within a JCL input file, behavior is specified within a TACTIC block, i.e. the keyword “TACTIC” specifies the beginning of a block, and “END TACTIC” specifies the end of the block.    The TACTIC data item also serves to name the block, so that it can be referred to in other parts of the JCL input file (for example, see Figure 2).  There are many JCL data items associated with decision-making and tactical behavior.    However, the vast majority of behavior is generally specified by two data items:  RESOURCE-ALLOCATION, which corresponds to reactive behavior, and CONTINGENCY-PLANS, which corresponds to introspective “pondering” behavior.  RESOURCE-ALLOCATION is also influenced by a third data item: EVALUATION-RATES.RESOURCE-ALLOCATIONThe data item RESOURCE-ALLOCATION indicates a reaction of some sort.  The player reacts to some stimulus, such as a target entering a weapons engagement zone, and takes some action in response.  This action is to allocate or otherwise use some resource available to the player, such a weapon, jammer, communications network, etc.  Allocation OptionsWithin RESOURCE-ALLOCATION are several options, known as allocation options.  The allocation options specify what action the player will take, using which resource(s).   In other words, each allocation option directs a player to allocate a resource for use in a particular action.  JCL supports the following allocation options:Reactive Maneuvering options: MNVR-QUEUE-ADD and –DROP; and MNVR-START and  STOP. These options are used to direct a player to maneuver against a target.  More precisely, this allocation option directs a player to allocate a resource (a platform containing a mover system) for use in a particular action (reactive maneuvering).  The process happens in two stages.  The first stage is to add the target to a set of potential candidates for reactive maneuvering (MNVR-QUEUE-ADD).  The second stage is to actually begin maneuvering against the target (MNVR-START).  At any point, if user-specified criteria are met, the player can stop either of these actions, i.e. stop maneuvering against the target (MNVR-STOP) or stop considering the target for reactive maneuvering (MNVR-QUEUE-DROP).Lethal Engagement options: LETHAL-ENGAGE-QUEUE-ADD and –DROP; LETHAL-ENGAGE-START and –STOP; and LETHAL-ENGAGE-FIRING-START and STOP.  These options are used for directing a player to fire a weapon at a target.  Again, there are several stages in this process; these stages roughly correspond to “ready, aim, fire”.  First, the player must add the target to a set of valid targets against which the player is considering whether or not to launch a weapon (LETHAL-ENGAGE-QUEUE-ADD).  In other words, LETHAL-ENGAGE-QUEUE-ADD directs a player to allocate a resource (a weapon system) for use in a particular action (considering whether to fire the weapon against a given target).   Next, the player must decide to engage a target in its queue (LETHAL-ENGAGE-START).  Finally, the player must decide to actually fire one of its weapons (LETHAL-ENGAGE-FIRING-START).  In a manner similar to Reactive Maneuvering, the player can stop any of these actions, i.e. stop firing, stop engaging, or stop considering for engagement.Lethal Assignment options: LETHAL-ASSIGNMENT-QUEUE-ADD and –DROP; and LETHAL-ASSIGNMENT-START and –STOP.   These options are used to assign a friend to a target.  For example, this is how a controller would direct a subordinate to engage a hostile target.  Like Reactive Maneuvering and Lethal Engagement, this process happens in stages.  The first stage is to place the target in a set of potential candidates for assignment, and the second stage is to actually assign the target to a friend.  Again, the player can stop either of these actions, i.e. cancel the assignment, or remove the target from consideration.EMCON.  This option turns emitter systems on or off.  Potential emitter systems include communications transmitters, sensor transmitters, and disruptors (jammers).FILL-REQUEST.  This option is used to create a player.  This may be used, for example, to direct an airfield to launch (i.e. create) an aircraft in response to a request from a controller.ABSORB-START.  This option is used to absorb a player.  The absorbing player also may acquire material from the target platform.  ABSORB-START may consider a weapon system, a thinking system, or a platform (mover system) as a resource.  Should a weapon system be selected, ordnance material within the absorbed platform will be added to the selected weapon system.  If a platform (mover system) is selected, then fuel within the absorbed platform will be absorbed and any ordnance on the platform would be discarded. COMM-METHOD-SELECTION.  This option selects a communications network for a player to send a message.  INTELL-SEND.  This option is used to direct the player to send a data about a target to a perceived friend.  For example, this is how a subordinate would send information to its controller, notifying the controller about the existence of a target, or perhaps updating the controller’s information about the target.Nonlethal Engagement options: JAMMER-QUEUE-ADD and –DROP; and JAMMER-SPOT-ADD and –DROP.  These options are used to direct a player to jam a target.  This process happens in steps, in a manner similar to Reactive Maneuvering. REF _Ref139613252 \h  \* MERGEFORMAT Table 1 summarizes the allocation options, along with the associated resources.Allocation Option(s)ResourcesReactive ManeuverPlatforms (movers)Lethal EngagementWeaponsLethal AssignmentPerceived FriendsEMCONCommunication Transmitters, Sensor Transmitters, or Disruptors (Jammers)FILL-REQUESTThinkers or Weapons (future players)ABSORB-STARTWeapons (ordnance), Platforms (fuel), or Thinkers (future players)COMM-METHOD-SELECTIONCommunication NetsINTELL-SENDPerceived FriendsNon-lethal EngagementDisruptors (Jammers)Table  SEQ Table \* ARABIC 1 – Allocation Option ResourcesTactical CriteriaAllocation options specify an action to take, as well as the resources to use when performing the action.  However, they do not specify the criteria for performing the actions, i.e. they do not deal with the stimuli to which the player is reacting.  The conditions that cause a player to react are specified by tactical criteria.  A tactical criterion is a boolean condition concerning some object or data within JIMM.  There are over 150 tactical criteria; some examples are shown in  REF _Ref142474272 \h Figure 3.  Tactical criteria may be linked with AND and OR conjunctions.  3D-DIST: e.g. “3D-DIST < 500.0 M” REL-TGT-HDG: e.g. “REL-TGT-HDG > 95. DEG”NET-BUSY: e.g. “NET-BUSY IS YES”BELIEVED-ALIVEFigure  SEQ Figure \* ARABIC 3 – Tactical Criteria ExamplesOne important tactical criterion is RANDOM-DRAW, which produces a random number from a uniform distribution between 0 and 1, and compares it to a user-specified threshold.  This criterion allows the user to introduce an element of unpredictability into a player’s behavior.FiltersBy themselves, tactical criteria are not meaningful.  They specify the conditions that cause a player to react, but they need to be associated with an action and a set of resources.  For a given action (specified by the allocation option), JCL uses filters that use tactical criteria to specify the set of resources.  In other words, the allocation option specifies a type of resource, but does not specify which particular one.  Filters use tactical criteria to narrow down the set of resources that may be considered for use.  More than one filter may be used; each of the filters is assigned a unique number by the user.  The inputs to a filter can be all available resources (indicated by the keyword INPUT), or the output of another filter (indicated by “FILTER <N> SELECTIONS”).  Filters narrow down the set of available resources, but they do not specify the final selection.  The final choice is determined using the CHOOSE-FROM keyword.  An example is shown in  REF _Ref139613231 \h  \* MERGEFORMAT Figure 4.  MNVR-QUEUE-ADD normal_move   TGT-TYPE abn_cmdr     USE INPUT FOR FILTER 1     PLATFORM-TYPE fighter_airframe        BELIEVED-ALIVE AND	  3D-DIST < 4.0 (MILES)     USE FILTER 1 SELECTIONS FOR         FILTER 2     PLATFORM-TYPE fighter_airframe	  2D-DIST < 3.0 (MILES)   FROM FILTER 2 SELECTIONS     CHOOSE-FROM        fighter_airframe        PICK-AT-MOST 1 NOW 1 TOTALEND MNVR-QUEUE-ADDFigure  SEQ Figure \* ARABIC 4– Resource AllocationIn this example, the allocation option is MNVR-QUEUE-ADD, which directs a player to consider reactively maneuvering against a target.  The target type, in this case, is explicitly specified to be “abn_cmdr”.  In principle, the available resources are any platform with a mover system.  However, both Filter 1 and Filter 2 require the specific resource “fighter_airframe”, which is also specified by the CHOOSE-FROM clause.  Thus, the player will add the target “abn_cmdr” to a list of candidates against which its platform “fighter_airframe” may reactively maneuver, but only if the abn_cmdr is perceived to be alive, closer than four miles away, and closer than three miles away along the ground.  Put another way, if a player with these tactics ever finds itself in a situation in which it has a perception of type “abn_cmdr”, and it thinks that “abn_cmdr” is less than 4 miles away and less than 3 miles along the ground, it will react by starting the process of having its “fighter_airframe” platform maneuver against “abn_cmdr”.EVALUATION-RATESIn the preceding section, it was shown how a player will react if it ever finds itself in a user-defined situation.  This requires that players check to determine if they find themselves in such a situation.  In JIMM, all players with RESOURCE-ALLOCATION tactics will periodically make these kinds of checks.  The frequency of these evaluations is determined by the EVALUATION-RATES data item.   Each type of allocation option has its own evaluation rate.  An example is shown in  REF _Ref139102617 \h  \* MERGEFORMAT Figure 5.EVALUATION-RATES   ABSORB-EVAL-RATE 0.01 (1/SEC)   MOVE-EVAL-RATE   0.08 (1/SEC)   ENG-EVAL-RATE    0.08 (1/SEC)END EVALUATION-RATESFigure  SEQ Figure \* ARABIC 5 – Evaluation RatesIn this example, Reactive Maneuver and Lethal Engage processing will occur every 12.5 seconds and ABSORB-START processing will occur every 100 seconds.  All rates are determined using game-time, rather than real-time.Processing begins with the creation of a new perception.  Each perception will trigger a separate chain of evaluations.  For example, if a player has two perceived platforms, one of which was created at game time 100.0, and the other at game time 101.0, then the first target will be evaluated for Lethal Engagement at times 100.0, 112.5, 125.0, etc. and the second at times 101.0, 113.5, 126.0, etc.  Note that this assumes that all necessary thinking resources are available; this is discussed further in Sections  REF _Ref139513230 \r \h  \* MERGEFORMAT 3 and  REF _Ref139592866 \r \h  \* MERGEFORMAT 4.CONTINGENCY-PLANSOne important challenge in human behavior modeling is the multi-tasking ability of players and the possible change in mindset or mode of operation in response to a change in the environment.  In a tactical situation, consider the effects of a change in the rules-of-engagement.  The possible actions may be similar but the cognitive path to those actions has now been radically altered.In JIMM, this type of behavior is simulated through the use of contingency plans.  Contingency plans simulate a player pondering or thinking about its environment, and perhaps deciding on a new plan or course of action as a result.  Unlike resource allocation, contingency plans are independent of targets or resources.  Also unlike resource allocation, they do not directly cause any action.  Instead, they alter the player’s environment or the way a player views its environment (such as, for example, changing from a “weapons-free” status to a “weapons-tight” status).  They can indirectly cause actions by triggering a resource allocation reaction. A player may have multiple plans within several categories.  Categories are used to group plan and ease the programming of contingency plans.  The specific categories are CMD/CONTROL, ASSIGNMENT, LAUNCH, LETHAL-ENGAGE, MOVEMENT, NON-LETHAL-ENGAGE, ABSORB, REQUEST, or SEND-STATUS.  The category names do not have any inherent meaning within JIMM, but the names are meant to be suggestive.  A player may only have one plan from each category active at a given time.Contingency plans are indicated in JCL by the data item CONTINGENCY-PLANS.  More precisely, contingency plans form a block, delineated by CONTINGENCY-PLANS and END CONTINGENCY-PLANS.  An example of a contingency plan is found in  REF _Ref139599385 \h  \* MERGEFORMAT Figure 6.  This figure contains an example of a contingency plan within the MOVEMENT category of a player’s CONTINGENCY-PLANS.   A new plan “get_to_orbit” is set and will be executed in seven minutes.  The MNVR-START resource allocation tactics will be changed to the “no_moving_allowed” tactics.  Lastly, all Reactive Maneuver resource allocations against all perceptions will be canceled.  In a sense, this gives the Reactive Maneuver resource allocations a fresh start.$ plan used while moving to orbit areaPLAN orbit_transition INVOKE PLAN get_to_orbit FOR MOVEMENT WAKE-UP IN 7.0 MIN FOR MOVEMENT           EMPLOY MNVR-START no_moving_allowed FOR-ALL PLAYER-TGT    CANCEL MNVR-QUEUE-ADD    CANCEL MNVR-START    PENDING-QUEUE DELETE FOR        MNVR-QUEUE-ADD    PENDING-QUEUE DELETE FOR        MNVR-START END-LOOPEND-PLANFigure  SEQ Figure \* ARABIC 6 -- Contingency Plan Example.A number of data items are allowed within a CONTINGENCY-PLAN block.  The most commonly-used items are:FOR-ALL.  This is a looping construct that loops though perceptions or resources.WHEN, BUT-WHEN, OTHERWISE.  These are conditional statements, equivalent to the more traditional “if/else-if/else” expressions.  WAKE-UP.  This triggers re-evaluation of the plan.  This is necessary since contingency plans can change dynamically, i.e. the player may select a new plan within a category to be the active one.INVOKE PLAN.  This is used to change the active plan for a given category.EMPLOY.  This selects and activates a resource allocation option to be used by the playerCANCEL and PENDING-QUEUE ADD or DELETE.  These options modify the pending queue, which is the list of thinking items that are queued up for the player to process.  The pending queue is discussed in Section  REF _Ref139592802 \r \h  \* MERGEFORMAT 3.  CANCEL clears the queue; PENDING-QUEUE ADD and DELETE adds or removes an item (either a resource allocation option or a new contingency plan).GO-TO.  This directs the player to move to a specified point or location.SEND MESSAGE.  This causes the player to send a user-defined message.REQUEST.  This builds a specific message that is sent using the SEND MESSAGE mechanism.  The exact message depends on the request options.  A common example is a message requesting that another player employ a particular resource against a specific perception.SIGNATURE-CHANGE.  This changes the signature (such as a radar cross section) of a platform element.  This can be used, for example, to simulate the opening/closing of bomb bay doors, landing gear, or anything else that may change the signature of a platform element.The looping construct FOR-ALL and the conditional constructs WHEN / BUT-WHEN / OTHERWISE are used to evaluate tactical criteria in order to make decisions.  The tactical criteria may be the same as those used in resource allocation.  However, unlike in resource allocation, the tactical criteria in contingency plans do not need to be associated with a particular resource or target. The looping and conditional constructs provide a more powerful and flexible mechanism for making decisions than the filters used in resource allocation.An example is shown in  REF _Ref139613366 \h  \* MERGEFORMAT Figure 7, which contains two logical statements each with a single Boolean component.  The second statement (involving the point named “enter_pt” in the group “my_controls”), is enclosed entirely within the first.  Also in  REF _Ref139613366 \h  \* MERGEFORMAT Figure 7, there is no programming for non-cooperative perceptions (identified as “PLAYER-TGT” in  REF _Ref139599385 \h  \* MERGEFORMAT Figure 6) because none of the tactical criteria need that information.  Multiple tactical criteria can be employed within a “WHEN” statement.PLAN get_to_orbit FOR-ALL PLATFORM-TYPE  WHEN ACTIVE-ALLOC-OPTION-UAN IS      no_moving_allowed   RE: ALLOC-OPTION MNVR-START   WHEN CLOSEST-GEO-CONTROL < 12.0 KM    RE: GEO-CONTROL-GROUP my_controls    RE: TYPE-GEO-POINT enter_pt    RE: PLATFORM/PT RESOURCE-LOC     GEOGRAPHICAL-CONTROL my_controls    INVOKE PLAN orb_trans FOR MOVEMENT    FOR-ALL PLAYER-TGT     PENDING-QUEUE ADD FOR        MNVR-QUEUE-ADD    END-LOOP    WAKE-UP IN 10.0 SEC FOR MOVEMENT   END-BRANCH  OTHERWISE   WAKE-UP IN 15. SEC FOR MOVEMENT  END-BRANCH END-LOOPEND-PLANFigure  SEQ Figure \* ARABIC 7 – Logic in Contingency PlansThinker SystemsAll tactics, behavior, and decision-making are implemented through thinker systems.  Thinker systems perform many functions, mostly relating to the processing of perceived data and execution of tactics.  The thinker system capability is used to model some aspects of behavior modifiers.   The overall execution of thinking functions follows a simple server-based approach, shown in  REF _Ref139972879 \h Figure 8.  During player processing, an ordered list known as the “pending queue” will be examined.  Items on the list are known as “ThinkItems”.  Starting at the head, the thinkitems are checked to determine if there is an available thinker to process them.  If so, then the thinkitem is removed from the pending queue.  If the thinker system is at the limit of the number of thinkitems it is processing, then its state is set to “busy”.  This process continues until all there are no items in the pending queue or all thinkers are busy.Figure  SEQ Figure \* ARABIC 8 – Pending Queue OperationNew thinkitems are assigned identifiers (an integer unique within the player) in a monotonically increasing manner.  During processing, new thinkitems are placed on the list in order.  However, a “high priority” item may have the sign of the thinkitem identifier switched to negative.  This maintains order and places the new thinkitem at the head of the list.There are several types of thinkitems.  Each corresponds to a specific thinking function and their processing will result in a specific discrete event.  The time of the discrete event is set to execute at specific time in future game time given a “time to think” programmed by the scenario developer:  Discrete Event Execution Time  = Current Game Time + Time to Think Once the discrete event is complete, the thinker status is set to “non-busy” and the pending queue is examined again.  The pending queue is also examined whenever a new thinkitem is created.The “time to think” is specified in the JCL “TIME-TO-THINK” data item.  TIME-TO-THINK is part of the definition of a thinker system, i.e. it specified in the thinker system’s capability (see  REF _Ref139083069 \h  \* MERGEFORMAT Figure 9).  The TIME-TO-THINK values determine how long a thinker will be busy given a specific thinkitem function.  Furthermore, if a function is not specified in this table, then the corresponding thinkitem cannot be processed by the thinker system.An example in the JIMM Conflict Language of the TIME-TO-THINK as well as the determination of the number of items that can be processed at the same time by a thinker is provided in  REF _Ref139083069 \h  \* MERGEFORMAT Figure 9 [2].  The TIME-BEFORE-DROP is specific to the review of perceptions (the REVIEW-INFORMATION function).For sensing, there is a further restriction in that sensors must be specifically linked to one or more thinker systems.  Output from the sensors can then only be processed by a linked thinker system in order to generate the creation or update of a non-cooperative perception.  The RECOG-SNR-EVENT must also be set in the TIME-TO-THINK table.  If there is no operational linked thinker system, the sensor will also not be operational.  CAPABILITY long_sam_thk_data   TIME-BEFORE-DROP 60.0 (SEC)   MAX-CONCURRENT-EVENTS 1 (NO-UNITS)   TIME-TO-THINK      RECOG-MSG            0.18  (SEC)      RECOG-SNR-EVENT      0.13  (SEC)      RECOG-PHYS-EVENT     0.03  (SEC)      DIGEST-INTELL        0.05  (SEC)      DIGEST-DEATH         0.054 (SEC)      DIGEST-ATTACK        0.053 (SEC)      DIGEST-MSG           0.059 (SEC)      EVAL-LETHAL-ENGAGE   0.05  (SEC)      EVAL-FIRING          0.05  (SEC)      EVAL-COMM-METHOD     0.05  (SEC)      REVIEW-INFORMATION   0.08  (SEC)   END TIME-TO-THINKEND CAPABILITYFigure  SEQ Figure \* ARABIC 9 – JCL Thinker System Capability Statement Internal Think Functions As a discrete event simulator, JIMM has two fundamental types of events: physical events and thinking events.  Conceptually, the thinking events are processed by a generic think function.  This function handles all processing related to tactics, human behavior, and decision-making.  The generic think function is actually comprised of five generic functions:  Notice, Digest, Review, React, and Ponder.The notice function is also known as the recognize function.  It refers to discerning the presence of new data or a new stimulation.The digest function is the follow-on to the notice function.  It refers to the assimilation of recognized data into a non-cooperative perception.  The review function determines when a perception (or related information) will be lost.The react function processes resource allocation tactics.  It determines the allocation of resources (systems or perceived friends) against single target perceptions.  It is the method for basic actions such as moving against a target, jamming it, and shooting it.Lastly, the ponder function processes contingency plans.  It is a more flexible method that allows changing of plans, tactics, approaches, and other actions. Notice and DigestThere are several pairs of occurrences modeled for notice and digest in JIMM.  These are listed in  REF _Ref139096323 \h  \* MERGEFORMAT Table 2.The mechanism for notice and digest starts with a “wakeup” event.  This event assembles the initial data, creates the thinkitem, and places it at the end of the pending queue.   The thinkitem is eventually processed and a “notice decision” event is created for execution at a time determined by the TIME-TO-THINK data item.Notice/Digest TypePurposeATTACKNote being attacked.  Occurs after damage resolution.DEATHNote death of perceived friendELECTRONIC-ATTACKNote being jammed.  Process reaction [9].INTELLNote miscellaneous intelligence (death of perceived platform)MSGNote and process incoming communication.SENSENote new data from sensing (digested as INTELL)Table  SEQ Table \* ARABIC 2 – Notice/Digest FunctionsThe decision event is the Notice function.  Data carried from the thinkitem is processed appropriately and a new thinkitem is created for the “digest decision” event.  This third event is the Digest Function and concludes processing of the input.In the TIME-TO-THINK data items for the notice function, the RECOG-PHYS-EVENT item enables notice of attack, death, electronic attack, and intelligence.  The RECOG-MSG data item enables message assimilation.  Lastly, the RECOG-SNR-EVENT item enables the assimilation of sensing.Figure  SEQ Figure \* ARABIC 10 – Notice & Digest ProcessingFor the digest function, each function has its own setting except that the digest of intelligence and assimilation of sensed data both require the setting of the DIGEST-INTELL item.To illustrate this processing, assume the TIME-TO-THINK table in  REF _Ref139083069 \h  \* MERGEFORMAT Figure 9 is employed, the queue is otherwise empty, and that thinker systems are always available.   If a physical sensing creates a “notice sense wakeup” event at game time 100.0, then the corresponding thinkitem will be immediate processed and a “notice decision event will occur at time 100.03 given the RECOG-PHYS-EVENT in the table.  This event will create a “digest sense” thinkitem that will be immediately processed and create a “digest intell” decision event for time 100.08 using the DIGEST-INTELL item in the table.  Processing this last event will complete the notice and digest operations.ReviewThe review operation consists of removing non-cooperative perceptions once a sufficient time has elapsed since the last update (either by a message or direct sensing).  This time is known as the TIME-BEFORE-DROP and is programmed by scenario developers in the thinker system capability statement (see  REF _Ref139083069 \h  \* MERGEFORMAT Figure 9).The overall mechanism uses a “wakeup” event to create the thinkitem.  The thinkitem is then processed and the review event itself is scheduled given the REVIEW-INFORMATION item in the TIME-TO-THINK table.  The cycle starts when the first perception is obtained.Once the review event is processed, the time of the next review “wakeup” event is determined given the TIME-BEFORE-DROP and the minimum of the most recent times different perceptions were updated.  This time is then compared with the current time added to half the TIME-BEFORE-DROP.  The minimum of these two times is then used to schedule the next “review wakeup” event.  In the event, all perceptions are reviewed.  If the TIME-BEFORE-DROP has elapsed, the perception is removed except for certain circumstances.  These circumstances include maneuvering against the target, engaging the target, having assigned a friend to the target, disrupting (jamming) the target, or when there is a pending request. Figure  SEQ Figure \* ARABIC 11 – Review ProcessingThe review function also drops data concerning indirect sources of a perception.  An indirect source is the player from whom a communication was received.  Hence, if the TIME-BEFORE-DROP elapses, the player will “forget” that the player who was the indirect source sent it a message pertaining to the perception.ReactThe React operation processes RESOURCE-ALLOCATION tactics.   Each react event involves thinking against a single non-cooperative perception (target).   CHOOSE-FROM ProcessingPlatforms and systems are assembled on the player structure on a “last in first out” (LIFO) basis (always added to the head of a list).  The order, therefore, is the reverse of how the resources are listed in the overall player structure.  When a react function is started, resources are again assembled in LIFO order (resulting in a “first in first out” (FIFO) order given the player structure).  However, after each filter, the selected resources are again placed on a list in LIFO order.  Hence, the final order of selected resources depends on the number of filters they pass through.  Therefore in JIMM, the final resource ordering is technically “undefined”.  However, a number of JCL scenario developers have uncovered this process and have manipulated filters to adjust resource ordering accordingly.  Hence, this method is now maintained for the sake of backward compatibility.Fortunately, a single selection criterion can also be employed to sort the final resources (e.g. by shortest distance) in a more straightforward manner.Allocation Option ProcessingSingle Stage Allocation Options With the exceptions of COMM-METHOD-SELECTION and FILL-REQUEST, the single stage react functions are invoked when a target perception addressed by the tactics is created.  The execution of these tactics starts with a wakeup event and continues until the perception is dropped (via review).   The process is shown in  REF _Ref139859495 \h  \* MERGEFORMAT Figure 12.FILL-REQUEST is invoked only when a specific type of message known as a “request” is received and when the tactics address the target perception.   The quantity data item in the request message determines the number of times fill request tactics will be executed given the message.  The target perception must also continue (i.e. not be dropped via review).  Initially, the thinkitem is placed directly onto the pending queue.  However, successive iterations employ a wakeup event.Figure  SEQ Figure \* ARABIC 12 – Single Stage React OperationCOMM-METHOD-SELECTION is invoked each time a message is sent.  If the tactics fail to choose a net, then the message cannot be sent.  Unlike other thinking functions, COMM-METHOD-SELECTION does not have a “wakeup” event.  Instead, the thinkitem is created directly and placed on the player’s pending queue.  The only simulation time between creation of the thinkitem and execution of the decision event is due to delay on the pending queue (if any) and the cost provided in the TIME-TO-THINK table.  The process is shown in  REF _Ref139859546 \h Figure 13.Figure  SEQ Figure \* ARABIC 13 – Comm. Method Selection OperationMulti-Stage Allocation OptionsProcessing of lethal assignment is representative of the actual operation of the react function with multiple stages, such as 	-QUEUE-ADD, -ADD, -DROP, and –QUEUE-DROP.  The process begins with a lethal assignment queue wakeup event.  The wakeup places a lethal assignment queue thinkitem on the pending queue.  Processing of this thinkitem determines the resources available for LETHAL-ASSIGNMENT-QUEUE-ADD.  If resources are available, then a LETHAL-ASSIGNMENT-QUEUE-ADD decision event is generated.  Otherwise, the thinkitem checks for resource available for LETHAL-ASSIGNMENT-QUEUE-DROP.   If resources are available, then a LETHAL-ASSIGNMENT-QUEUE-DROP decision event is generated.  Otherwise, a new wakeup event will be scheduled given the current game time and EVALUATION-RATES and a new thinkitem for the following LETHAL-ASSIGN stage is created and queued.If resources pass through the filters for LETHAL-ASSIGNMENT-QUEUE-ADD, then a thinkitem will be created for the corresponding DROP.  The identifier of this thinkitem is set to its negative value ensuring that it will be processed as soon as possible (usually by the same thinking system).  Thus, the processing of ADD and DROP decision events together requires two thinkitems and twice the game time for processing given the TIME-TO-THINK table.  Lastly, the second thinkitem processing discerns resources and schedules a LETHAL-ASSIGNMENT-QUEUE-DROP event.   In addition, a lethal assignment queue wakeup event will be scheduled after processing of the ADD decision event given the current game and EVALUATION-RATES.    Figure  SEQ Figure \* ARABIC 14 – Lethal Assignment React Processing.  In the figure, “LA” stands for LETHAL-ASSIGNMENT and “LAQ” stands for LETHAL-ASSIGNMENT-QUEUE.Once the LETHAL-ASSIGNMENT-ADD thinkitem is generated, resources are discerned during that thinkitem’s processing.  This results in creation of a LETHAL-ASSIGNMENT-ADD decision event.  This in turn creates and queues a LETHAL-ASSIGNMENT-DROP thinkitem (with a negative identifier), which results in the final LETHAL-ASSIGNMENT-DROP decision event.For example, in the TIME-TO-THINK table, the EVAL-ASG/CANCEL variable (for lethal assignment) can be set to 0.2 sec and the EVAL-ASSIGN-THREAT (for lethal assignment queue) can be set to 0.1 sec.   Also, the ASG-EVAL-RATE in the EVALUATION-RATES table can be set to 0.5 (1/SEC) or once every two seconds.  If there is always an available thinker and the pending queue is otherwise empty, then if a wakeup event occurs at time 100.0, then the LETHAL-ASSIGNMENT-QUEUE-ADD will occur at time 100.1 and the LETHAL-ASSIGNMENT-QUEUE-DROP will occur at time 100.2.  A LETHAL-ASSIGNMENT wakeup event will also be scheduled for time 100.6 (given processing of the ADD).  To continue, the processing of the LETHAL-ASSIGN-START will occur at time 100.4 (given the EVAL-ASG/CANCEL TIME-TO-THINK item) and the final LETHAL-ASSIGN-STOP will occur at game time 100.6.It should be noted that if the evaluation rate were set to be faster, the pending queue was not empty, or the TIME-TO-THINK data items were set to be longer, then the pending queue would fill faster than the thinker system could process it.  The pending queue and the thinker systems would then become “overloaded” and major delays in the processing of thinking events would occur.PonderThe ponder function processes contingency plans. Contingency plans allow consideration of more than one perceived platform during operation.  They also allow direct access to pending queues (to invoke or cancel pending thinking events).  Tactics for the differing types of resource allocation can be changed.  Lastly, contingency plans are not executed periodically but at times specified by the JCL programmer.Figure  SEQ Figure \* ARABIC 15 – Contingency Plan OperationIn terms of game time, the time to execute a contingency plan (and the ability for a thinking system to process) is set in the TIME-TO-THINK table via the CONSIDER-PLAN data item.External Think FunctionsIn human behavior modeling, an important concept is passive long-term memory as related to adaptive learning and behavior modification.  JIMM does not organically have adaptive behavior driven by long-term memory – in some sense, its strength lies in its predictability.  Nonetheless, JIMM provides an important ability to add this capability as an external thinking function.  JIMM implements this ability by transferring control of a system and its associated thinking operations to an external asset, using a shared memory protocol known as Simulated Warfare Environment Data Transfer (SWEDAT).  In such cases, JIMM will usually not create the associated thinkitems thus preventing the internal thinker operation.  In other words, the external interface assumes control of the associated thinking functions for that player.In general, this assignment of system and associated thinking control is handled on the basis of specific systems.  For example, JIMM may control the sensing for one player, an interfaced process (also known as an “asset”) may control the player’s weapon systems, and a third process may control movement of the player’s platforms.  There is no limit to the number of assets that can operate in a SWEDAT environment.  However, in most cases, the number of players modeled by JIMM is large and external processes handle only one or two systems.  In this case, JIMM is said to provide the “threat environment” for those interfaced systems and processes.  In this way, a limited number of adaptive players can be introduced to study their effects in a controlled environment.  Transfer of control of systems and thinking functions may be handled in JCL and thus set before execution of the scenario.  Also, systems and associated thinking may be dynamically transferred to and from JIMM via dispatches sent via SWEDAT during scenario execution.ConclusionThis paper has discussed the processing of thinking functions in the Joint Integrated Mission Model (JIMM).  It has shown that despite simple mechanisms, elaborate constructions may be made.  This improves the modeling capability of JIMM and improves both the flexibility and fidelity of JIMM for the analyst. AcknowledgementsPeter Lattimore provided the basic design and construction of these algorithms.  He is the acknowledged creator of the Simulated Warfare Environment Generator (SWEG), the direct predecessor of JIMM.  Work in SWEG and JIMM has tried to stay true to his vision.  He is also responsible for the most of the terminology used in the JIMM community and reflected in this paper.Mr. William Brooks reformed the thinking functions in JIMM ACE into a class-based construction.  This organization greatly facilitated work for this paper. References  [1] Mutschler, David W.  “Language-based Simulation, Flexibility and Development Speed in the Joint Integrated Mission Model”.  Proceedings of the 2005 Winter Simulation Conference.  Orlando FL, December 2005[2] Lattimore, Peter; Mutschler, David W. et al.  JIMM 2.6.1 and JIMM ACE 5.0 Users Guides.  JIMM Model Management Office, Patuxent River MD, 2006. Available via the JMMO at  HYPERLINK "mailto:jmmo@navy.mil" jmmo@navy.mil.[3] Hoagland, David; Martin, Edward; Anesgart, Martin.  “Representing Goal-Oriented Human Performance in Constructive Simulations:  Validation of a Model Performing Complex Time-Critical-Target Missions”.  Proceedings from the Spring 2001 Simulation Interoperability Workshop.  Simulation Interoperability Standards Organization.  San Diego CA.  Paper Number 01S-SIW-137, Spring 2001.[4] Kelly, Michael; Vick, Shon; Schloman, John; Zawada, Frank.  “A Weather Service for Introducing Dynamic Attenuation Factors in the Joint Integrated Mission model (JIMM).  Proceedings from the Simulation Interoperability Workshop.  Simulation Interoperability Standards Organization.  04F-SIW-107, Fall 2004.[5] Worsham, Richard.  “Northrop Grumman Radar Simulation (AVSIM)”.  Proceedings of the 2002 IEEE Radar Conference.  April 2002.  pg 176-186[6] Niland, William; Skolnik, Brian; Rasmussen, Steve; Finley, Kevin;  Allen, Kevin.  “Enhancing a Collaborative UAV Mission Simulation Using JIMM and the HLA”.  Proceedings of the Spring 2005 Simulation Interoperability Workshop, Simulation Interoperability Standards Organization, San Diego CA, Spring 2005.[7]	Modeling Human and Organizational Behavior: Application to Military Simulations, Richard W. Pew and Anne S. Mavor, Editors; Panel on Modeling Human Behavior and Command Decision Making: Representations for Military Simulations, National Research Council, 1998.[8] Jones, Ross; Jones, Craig et al.  “Implementing Phantasms”.  JIMM Model Management Office, June 2003.  Available via the JMMO at jmmo@navy.mil.[9]  Chapman, Michael D.  “Modeling Electronic Warfare in JIMM Design Document Version 2.0”.  JIMM Model Management Office, June 2005.  Available via the JMMO at jmmo@navy.mil.Author BiographiesGORDON LONG is the current JIMM model manager.  He has been a computer engineer at the Naval Air Systems Command (NAVAIR) since 2001.  Prior to becoming the JIMM Model Manager, he was the lead systems engineer for NGTS, a model used in training simulations.  Dr. Long obtained his Ph.D. in High Energy Physics from the University of Maryland College Park in 1996 for work performed at the European Center for Nuclear Physics (CERN) in Geneva, Switzerland.DAVID W. MUTSCHLER has worked as a computer engineer for the Naval Air Systems Command (NAVAIR) for more than twenty years.  He has worked at ACETEF in support of JIMM and its predecessor SWEG for ten of those years.  He served as the JIMM Model Manager from June 2004 to February 2006.  He obtained his Ph.D. in Computer and Information Science from Temple University in 1998 and is an Associate Professor in the Florida Institute of Technology University College.GARY LOHMAN currently serves as Chief Scientist for AMEWAS Inc. Since 1993, Dr. Lohman has supported DoD as both civil servant and contractor across a myriad of information system, knowledge management, communications, modeling and simulation and warfare analysis projects. Prior to this, Dr. Lohman’s focus was research in massively parallel optical image processing, optical computing and holography. Dr.rer.nat. Lohman received his doctorate in theoretical and experimental physics with a minor in physics education from the Friedrich-Alexander Universität in Erlangen, Germany.  In this paper, sensors and communications systems are each treated as a single generic type of system; however, transmitters and receivers are explicitly modeled as separate systems.  For a receiver to receive signals from a transmitter (e.g. for a radar receiver to receive an echo from a radar transmitter), the receiver system and the transmitter system must be explicitly linked. There is a Graphical User Interface (GUI), but for many purposes the GUI itself operates by parsing and reading/writing JCL files. Within the JIMM community, JCL input files are referred to as databases.  However, this paper does not use that term in order to avoid confusion with the more common usage. The time between evaluations is increased by the appropriate TIME-TO-THINK item (in this case, EVAL-LETHAL-ENGAGE).  Thus, this example assumes that EVAL-LETHAL-ENGAGE is set to zero.  See Section  REF _Ref139592802 \r \h 3 for details.SYSTEMSBasic Components of OperationELEMENTSSignatures and Damage ResolutionPLATFORMSPosition, Orientation, & MovementPLAYERSUnderstanding of the environment, tacticsDiscreteEventsThinkItemsThinkerSystemPending QueueWakeupEventDigestDecisionEventNotice DecisionEventNoticeThinkitemDigestThinkitemWakeupEventReviewThinkitemReview  EventNext Review Event TimeCOMMDecision EventCOMMThinkitemUntil no perceptionReactWakeupEventReactThinkitemReactDecisionEventInitial RequestLAQWakeupEventLAQ-ADD*ThinkitemLA-DROPThinkitemLA-ADDThinkitemLAQ-DROPThinkitemLAQ-ADDDecisionEventLA-DROPDecisionEventLA-ADDDecisionEventLAQ-DROPDecisionEvent* may become DROP if no resourcesFlow with resources (usual)Flow without resources Plan Wakeup EventPlan ThinkItemPlan Decision EventPlan Invocation