How to Plan, Set-up, and Run a Distributed Simulation ExerciseSteve BachinskyScience Applications International Corporation5400 Shawnee Road, Suite 110Alexandria, VA 22312 HYPERLINK "mailto:sbachinsky@dctd.saic.com" sbachinsky@dctd.saic.comRich BriggsVirtual Technology Corporation5400 Shawnee Road, Suite 114Alexandria, VA 22312HYPERLINK "mailto:rbriggs@virtc.com"rbriggs@virtc.comBarron GibsonChris TurrellIITRI/AB Tech Group1901 North Beauregard Street, Suite 400Alexandria, VA 22311HYPERLINK "mailto:cturrell@dmso.mil"cturrell@dmso.milHYPERLINK "mailto:bgibson@msiac.dmso.mil"bgibson@msiac.dmso.milKeywords:HLA, RTI, Distributed Simulation, Exercise Planning, Performance, FEDEPAbstract: Distributed simulation exercises are becoming increasingly complex, as more accurate and realistic environments are required for today’s training, testing, and analysis activities.  These exercises require careful planning and methodical execution in order to assure that the exercise objectives are met.  The High Level Architecture (HLA) Federation Development and Execution Process (FEDEP) provides a structured guide to assist federation managers with the planning and execution of distributed simulation exercises.  As a guide, however, it is not intended to provide the level of detail concerning the federation engineering activities necessary to insure success.  In the recent past many distributed simulation events have encountered problems caused by configuration or sizing problems with the network or computing platforms, as well as basic software defects.  A more structured exercise planning and testing process may have identified these problems before the actual simulation exercise.  This paper will identify and discuss the importance of this federation engineering approach that include systems administration, network configuration, and systems engineering to the success of distributed simulation exercises.  Additionally, this paper will offer a process and procedures for the planning, set-up, and testing of simulation exercises that will help minimize these problems in the future.IntroductionAdvances in computing technologies are enabling the Modeling and Simulation (M&S) community to assume more ambitious requirements in order to increase the overall accuracy and/or realism of simulation exercises.  These advancements include improved modeling fidelity, increased scale in terms of modeled components or computing nodes, and increased diversity relative to the types of simulations, computing platforms, and geographic/network location.  These changes are making the planning, testing, and execution of distributed simulation exercises more difficult.Distributed simulation exercises require careful planning and methodical execution in order to assure that the exercise objectives are achieved.  The HLA Federation Development and Execution Process (FEDEP) provides a guide to assist federation managers (i.e., those responsible for the entire federation as opposed to responsible for a single federate application) with the planning and execution of a federation execution.  Basically the FEDEP is a well-structured system engineering approach to manage the development and execution of an HLA exercise.  During activities where resource limitations exists (e.g., people, time), proper planning and testing are often the first components to be neglected.  Inadequate exercise planning and testing places the objectives for the simulation event at risk.Over the course of the past several years the authors have observed many distributed simulation events that executed properly, but there have also been many that have encountered problems.  A large number of those exercises that encountered problems were unable to properly identify the cause in a timely manner and often blamed the HLA or the particular RTI implementation.  Obviously the HLA may impose differences from how exercises may have been configured in the past and RTI software implementations are going to contain defects, but a number of these problem exercises can be traced to factors other than the HLA or RTI.The purpose of this paper is to offer an approach to the federation engineering activities associated with the planning, configuration, and testing of simulation exercises.  The next section attempts to characterize the distributed simulation environment by defining the various elements upon which it is composed (e.g., network, computers, applications).  The following section describes the FEDEP and related products to indicate their objectives, and how they are helpful with federation design, development, and execution.  Finally a detailed discussion on practical activities associated with managing a federation exercise is presented.  A review of common problems encountered in distributed simulation exercises is included with this discussion.Distributed Simulation EnvironmentA distributed simulation environment contains many components that support the execution of an exercise.  The complete system can be quite complex because of the interdependencies and opaqueness of the components.  Controlled experiments and measurements are typically required to diagnose parts of the environment to properly understand the entire system.The distributed simulation environment can be made up of multiple, vastly differing sub-environments. These are the network segments (both local and wide area if applicable), the simulation host platforms (including the operating system, compiler, and other run-time support modules), the RTI software, and the simulation applications.  With each of these components, there are a large number of variables to consider when designing and implementing a simulation exercise.  The most important step, and unfortunately one that is often neglected, is the design of the simulation exercise that includes proper planning, configuration, and testing.  The simulation planners should work with the network engineers and system administrators from the start so that all parties understand the scope and requirements of the exercise before stepping off into the development and execution phases.  Some products from these early meetings should be a list of workstations needed, location of those workstations, and a clearly labeled network diagram with hostnames, IP addresses, and supported network protocols.  The application developers should also be included, and should work closely with the systems administrator to ensure that the workstations are set up with all of the required software.  The FEPW offers support in this area, in that it identifies these requirements and offers a tabular format to record them. Some federations have chosen to take an approach and develop an Interface Control Document. The point here is not the document, but the documentation.NetworkIt is an over simplification, but it needs to be said, that networks consist of more than cables connecting computers.  Unfortunately, this simplistic view is the way that many of us visualize computer connectivity.  Hubs, bridges, switches, and routers may all be used in some configuration along with the cable type to insure that the data is distributed to all members of the exercise.A poor choice of equipment, an inefficient configuration, improper programming of switches or routers, a lack of proper sizing, and a lack of understanding of what takes place on the network can all create problems in the distributed simulation environment. An incorrectly configured network can cause an entire simulation exercise to fail, and often the exact cause is not immediately apparent or easy to diagnose.  It is vital that the network administrator and exercise planners work together from the beginning to ensure that the network will support the expected amount of traffic.  This is particularly important on networks executing HLA federations that use multicast traffic as well as point-to-point traffic.The following figure provides a hypothetical depiction of the network used to support a distributed simulation exercise.  It illustrates the heterogeneity of typical federation exercises in which diverse computing platforms and network devices are used to connect multiple simulation applications. The remainder of this section will describe the various network components that may be present in a distributed simulation exercise.Figure 1 – Illustration of a Distributed Network.LAN: A Local Area Network is generally considered to comprise of all local workstations, bridges, and routers to the point of demarcation of the WAN.  (ie. where the cable leaves the building to the Local Service Provider).WAN: The Wide Area Network consists of all the wiring, routing and switching that occurs between points of demarcation.  Although a commercial service provider normally manages the wide area network, the network engineer is responsible for ensuring that the WAN is capable of supporting an exercise (e.g., proper bandwidth reserved, appropriate ports open throughout the network).Network Interface Card (NIC): The NIC is the device that connects a computer system (terminal device) to the network.  Usually in the form of a PC expansion board, the NIC executes the code needed by the connected device to share a cable (fiber, twisted pair, coax) or some other transmission media with other stations.Hub: The point on a network where circuits are connected. In local area networks, a hub is the core of a physical star configuration, as in ARCNET, StarLAN, Ethernet, and Token Ring.  Hubs aren't switches, as they have very little or no built in intelligence, and don't set up transmission paths.  Rather, hubs comprise a physical bus and a group of ports, to which are connected the wires, to which are connected individual terminal devices.Bridge: In classic terms a bridge is a data communications device that connects two or more network segments and forwards packets between them.  A bridge simply serves as a physical connector between segments, also amplifying the carrier signal in order to compensate for loss of signal strength incurred as the signal is split across the bridged segments.  In other words, the bridge is used to connect multiple segments of a single logical circuit.  Normally the only configuration of bridges is to set up filtering.Router: Routers are the central switching offices of the internet, corporate intranets, and wide area networks (WANs).  A router is, in the strictest terms, an interface between two networks.  Routers are highly intelligent devices that connect like and unlike LANs.  Routers are protocol-sensitive, typically supporting multiple protocols.  Routers require considerable configuration and should only be worked on by experienced network engineers.Brouter: Concatenation of "bridge" and "router." Used to refer to devices that perform both bridging and routing functions.  In local networking, a brouter is a device that combines the dynamic routing capability of an inter-network router with the ability of a bridge to connect dissimilar local area networks (LANs).  It has the ability to route one or more protocols, such as TCP/IP, and XNS, and bridge all other traffic.  Switch:  A switch looks at incoming data to determine the destination address.  Based on that address, a transmission path is set up through the switching matrix between the incoming and outgoing physical communications ports and links.   Routers are highly intelligent data switches.  Proper configuration of a switch is crucial to the correct functioning of a network.Simulation Host PlatformsThe computing platforms that host the various applications are one of the key elements to consider in a distributed simulation exercise.  Typically a variety of systems are used with various forms of the Unix and Windows operating systems.  When considering the host computers a number of different items must be factored into the evaluation.The first item is the operating system and compiler combination.  It is important that the application software and the RTI implementation that will be used support this platform combination.  When the application and RTI software are capable of supporting multiple computing platforms there are additional factors that should be applied to the platform choice.  These factors include operating system performance and stability, compiler performance and adherence to language standards, productivity of development, debugging, and testing tools, and additional third party tool support.Often it is useful to have a homogenous set of computing platforms used in an exercise because it reduces the complexity for systems administration.  When similar computing machines are not possible, it may be necessary to ensure that the different platforms can easily share data (e.g., networked file system). This approach, however, has draw backs in other areas, namely performance, and should only be  implemented as a last resort.Host performance is another important consideration when evaluating different computing platforms.  There are many factors that affect the computer’s performance, including the particular definition of performance that is important for the application(s) running on that computer.  The key factors are the number of processors, processor speed, physical memory, disk access latency and throughput, and network connectivity throughput.Run-Time InfrastructureIn an HLA federation exercise all of the applications will utilize the Run-Time Infrastructure (RTI) to exchange simulation data and various control messages.  The control messages may be used by individual federates to join and resign a federation, save or restore an exercise, transfer ownership, and many other HLA services [1].Currently, different RTI implementations are not interoperable.  This is primarily due to the complexity of the distributed algorithms that are unique to the different implementations, but it may also be an artifact that the community does not have enough experience with RTI implementation approaches to enforce constraints that may be necessary for interoperability.Therefore, a federation exercise will be required to choose a single RTI implementation to be used by all of the federate applications.  Fortunately compliant RTI implementations are easily replaced with other compliant implementations, although there is still the possibility of different federation behavior due to performance and other subtle differences between RTI implementations.  Note that a particular version of the RTI implementation may need to be used by all of the federate applications since different versions of the same RTI implementation may not be interoperable. Most of the existing RTI implementations also require several “executive processes” for proper operation.  These executive processes (e.g., rtiexec, fedexec) simplify the generation of handles that are unique to the simulation network or within a particular federation execution.  Additionally, the executive processes may be involved in the implementation of distributed algorithms that are simplified with a logically centralized node that acts as an arbitrator or sequences particular operations.It is important to note that the existing RTI implementations do not use the executive processes as part of the normal federation data paths.  It is possible that the implementation of a reliable point-to-multipoint communication mechanism has a centralized (or a hierarchy) of “TCP exploders”, but this is actually separate from the purpose of the executive processes.During the federation execution planning the location of the executive processes (as well as the exploders if they exist) are important to the proper operation of the exercise.  Simple performance testing can be used with the RTI benchmark applications to measure the effect of moving the executive processes onto different computers.  It may be necessary to consult the RTI vendor’s documentation or inquire about guidance on configuration of the RTI executive processes and other components.Simulation ApplicationsThe simulation applications provide the content of the particular exercises running on the various host platforms across the network.  The operating characteristics of simulation applications can vary greatly in terms of processing, memory, and network requirements.  Federates within a single exercise may have significant diversity with respect to their operating characteristics and their impact on the entire system.A distributed simulation involves many interdependencies between the different applications.  It may be unclear which applications are responsible for stressing the entire system, and exactly how that system is being stressed.  There have been instances in which simulation developers have misunderstood these effects and in an attempt to remedy problems the situation was actually exacerbated.When federations or specific federates encounter performance problems in conjunction with a distributed simulation the symptoms may be difficult to detect.  A federate may appear to operating normally, but it may be struggling to operate properly or may not be operating properly.  To assist the understanding of federate operation it is often useful to instrument the software to measure key statistics that indicate the “wellness” of the federate.  These metrics are very specific to the particular application, but can be very useful to detecting problems.  To avoid impacting nominal operation the instrumentation should be able to be turned off or “compiled-out”.Federation Development and Execution Process SupportGiven the backdrop of the simulation environment description provided in the previous section the formal federation development and execution process in described.  The FEDEP is a systems engineering approach to building an HLA federation starting from user objectives and culminating in the federation execution results.[2]Over the course of the last decade, an incredible amount of knowledge and experience has been gained in the field of distributed simulation.  For the most part, however, this experience has been focused on simulation techniques, development procedures, and simulation execution management efforts.  With the advent of the HLA, federation managers began calling for a more systemized approach to the process.  The intent was, in part, a recognition that federations of simulations were not created in a vacuum, but were driven by requirements provided by sponsoring organizations. A mechanism was required to track these requirements throughout the entire process from initial planning to execution and the reporting of results.The following sections describe several components of the HLA federation development and execution process.  These components have been developed to assist federation managers in the process of planning and executing a federation exercise.The FEDEPThe Federation Development and Execution Process (FEDEP) was designed and institutionalized by the early HLA Proto-Federations.  It was created out of necessity to guide the early prototype teams with an efficient and effective approach to the planning and execution of an HLA Federation.  The intent was to create a process that would institutionalize federation development so that those getting involved for the first time would not have to re-learn the lesson of those who proceeded them.  After all, the HLA was conceived to support the federation of dissimilar simulations, a more complex task than working in a heterogeneous environment.The FEDEP model itself was borrowed from the engineering community and modified to meet the needs of federation developers.  The focus of the FEDEP is to provide an engineering process model for the development of HLA federations, although the process is applicable to any simulation development effort.  To quote the FEDEP introductory material, “It (the FEDEP) is not intended to replace the existing management and engineering processes of HLA user organizations, but rather to provide a high-level framework for HLA federation construction into which lower-level development practices native to each individual application area can be easily integrated.” One of the possible problems with the FEDEP is that it is clearly focused on Federation Development.  Although it does address federation execution issues, the FEDEP does so from the perspective of the federation management team and does not from the perspective of the complex environment in which distributed simulations live.  In essence it does not get to a level of detail necessary to insure a smooth transition from federation development to federation execution.  This, to a large extent, is by design, with the broader role of providing implementation level details being left to other related documents such as the FEDEP Checklist and the Federation Execution Planner’s Workbook.A graphical depiction of the FEDEP is shown in Figure–1 that identifies the six steps of the process.  More detailed information on the FEDEP can be found on the DMSO HLA web site,  HYPERLINK "http://hla.dmso.mil/" http://hla.dmso.mil/.Figure 2 – Federation Development and Execution ProcessThe FEDEP ChecklistTraditionally, the FEDEP Checklist, a companion document to the FEDEP, is assumed to be the document that provides the level of detail necessary to successfully implement a distributed simulation system. [3]  Upon closer examination, however, it too favors the development of the federation over the implementation of the federation.  Consider for a moment the key individuals identified in the FEDEP Checklist responsible for federation execution.  The checklist identifies the federation participants as the User/Sponsor, the Federation Manager, the Federate Developers, and the Federation Team, consisting of the above-mentioned personnel and “additional participants, such as subject matter experts”.  Nowhere in the documentation for creating and executing a federation have we recognized a need for the skill sets beyond the simulation environment, such as Systems Administrators or Network Engineers.  The problem may lie in the fact that these individuals are often considered part of the infrastructure support and not part of the implementation team.  This omission indicates a common error that plagues our community in which the infrastructure aspects of an activity are often overlooked.  The HLA and RTI Helpdesk case logs show that the vast majority of the problems encountered and reported as being related to the HLA or an RTI implementation are actually resolved with non-HLA and non-RTI solutions.  That being said, the best documents and checklists are still only guides that must be augmented with proper engineering to include the specific details of the activity.  The hypotheses of this paper is that the simulation community is too narrowly focused on the aspects related to federate and federation development at the expense of federation execution and the systems engineering activities required to construct these complex systems.The FEPWThe Federation Execution Planner’s Workbook (FEPW) provides a structured mechanism for describing the performance requirements of the federation and other essential federation characteristics that will ultimately characterize the specific environment in which the federation will execute.[4]  It does so through a series of tables that when taken together with the FOM and associated FED file provide the necessary foundation for federation execution.  Unfortunately, the FEPW is not widely used and efforts are underway to revise it to hopefully give it broader appeal within the community.  Currently the FEPW is the document that offers the best insight into the execution of the federation because it contains federation host tables, IP addresses, and network configuration information.  The FEPW also contains information that characterizes the behavior of each federate and it’s processing workload on the individual computer and entire federation.Federation Engineering ApproachGiven that today’s distributed simulation environments are complex, often geographically dispersed and at least in part may be beyond the control of the federation manager, a structured engineering approach is required to successfully implement these systems. The previous sections discussed the components that comprise the distributed simulation environment and the resources available that provide guidance in the construction and use of these environments. As discussed earlier, these resources provide a framework for HLA construction but do not specify a process for the inherent systems engineering activities that must take place.  This section will discuss some of the activities and approaches related to planning, configuration, and testing of the Distributed Simulation Environment (DSE) that the authors have used and that have proved to be helpful in the construction of successful HLA federations.Planning of DSEAs in the development of any complex system, a good plan is essential to ensure that the necessary functionality is developed and the complexity is properly managed throughout the development, testing, integration, and deployment of the system.  All of the activities required to plan a federation exercise are too numerous to cover in this paper so instead we will focus on some of the high payoff simulation independent activities and approaches we have used that provide guidance and structure to the overall federation development process.  Some of these activities are described in the FEDEP and others are based solely on the experiences of the authors.The FEDEP describes six categories of activities that closely relate to the standard activities in any systems engineering task (Requirements Definition, Analysis, Design, Development, Integration & Testing, and Deployment).[2]  As one would expect, the definition of the requirements for the system is essential to provide the appropriate guidance and constraints on the activities that follow.  This set of activities is named “Define Federation Objectives” in the FEDEP.  One aspect of requirements definition that is often overlooked is the definition of Measures of Effectiveness (MOEs).  MOEs are most commonly utilized in the Training domain, however, they are equally worthwhile and necessary in all domains.  The MOEs are one of the first quantifiable elements that can be used to support the exit criteria of the exercise.  They are essential in the definition of the Conceptual Model, selection of the appropriate federate applications, development of the FOM, specification of the data collection plan, etc.  If the particular exercise objectives do not map into MOEs, other metrics should be defined that will help with the traceability of requirements to exercise results.Another important aspect in the understanding of the impact of the requirements is the overall schedule that must be met in order to satisfy the sponsor’s needs.  During the initial planning stages of a project there are often too many unknowns to develop a robust schedule that details each specific task and level of effort.  It is important however to identify critical milestones in the development process and points where additional information will be available to add to a detailed schedule that can be tracked.  Typical milestones that are critical for schedule definition are completion of the Conceptual Model and identification of federate applications, FOM development, design reviews, computing resource requirements and a testing plan.  The last two items will be discussed in subsequent sections and the former are discussed below.Conceptual Model Definition & Identification of Federate ApplicationsThe Conceptual Model (CM) relates to the analysis of a system in a standard systems engineering process.  The CM should be derived from the federation objectives and specifically the Measures of Effectiveness (MOEs) that have been defined.  The MOEs, if properly defined, will provide the specification for the real-world objects, behaviors, and interactions that must be supported in the simulation environment.  It is important to note the distinction between the real-world objects, behaviors, and interactions required and the actual representations of the real-world.  There is no reason to develop, integrate, and test objects, behaviors, and interactions that are not required to produce the results of the simulation.  The definition of the CM enables the federation management team to select the appropriate federate applications, supporting tools, and to identify new development requirements to support the federation objectives.  This set of information is critical to identify the level of work required to construct the federation.FOM DevelopmentThe development of the FOM is where the “rubber meets the road”.  The FOM is the contract that specifies the data interface that has been agreed upon between each federate in the federation.  The FOM must map to the conceptual model and provide the specific data items necessary to enable the calculation of the MOEs.  Since the FOM is the specification of the interface between federates, it provides important information that is needed by each federate developer to determine the level of changes to their particular federate application as well as to give the federation management team the ability to understand the data flows within the distributed simulation system.  The knowledge of the data flows enables the federation management team to assess performance bottlenecks as well as to develop a first cut at the development and testing phases of the federation.Design ReviewsDesign reviews is something that you will not find in the FEDEP however the authors have performed this activity on several federations and have concluded that it provides a great opportunity to get a detailed understanding of the federate applications and to make good decisions about the development, integration, and testing phases.  Typical topics to be covered in the design review are:Review of the system and software architecture of the federate application;Review of the federate application’s operational requirements including platform, compiler, operating system version, network infrastructure, and human operators;Review of the federate application’s responsibilities with respect to RTI services required, publication and subscription of object classes, as well as the order and schedule that makes sense for implementing this functionality; and finallyReview of the federate application’s approach for using time management and interfacing the application to the RTI.Since most federation development efforts are comprised of multiple organizations located around the world the information gained during the design reviews allows the federation management team to develop a detailed schedule for the development, integration, and testing of the federation functionality.  This schedule will typically include multiple phases of FOM implementation (adding object classes and interactions in each phase), one or more Partial System Tests (PSTs), and several Full System Tests (FSTs) to incrementally build the functionality of the federation in a controlled manner.Configuration of DSEConfiguration of the Distributed Simulation Environment (DSE) is the area the authors have experienced to be the most problematic.  As previously discussed, the appetite for increased realism and representation within the simulation community and the advent of enabling technologies has levied new requirements on the computing resources that previously were not supportable.  Today, we can do much more in distributed simulation due to the improvements in technologies and simulation architectures, such as the HLA, however there is a higher cost in terms of ensuring that computing environments are properly setup to support the necessary network services.  This section discusses several activities that will help mitigate unexpected problems prior to performing integration testing on your federation.Identification of Computing Resource RequirementsThe identification of computing resource requirements may occur at different points within the FEDEP depending on the specific nature of a federation; however, there are specific points within the process that provide information that can be used to assess the computing requirements.  When the federate applications that will be integrated together are chosen and when the scenario and performance characteristics are understood an assessment should be performed to determine the platform, operating system, compiler, and network architecture that is required by the federate applications and federation.  Some of this information will need to be provided at the design review and provides insight into issues that may exist with a configuration that may not be supported by the RTI implementation that will be used.  Due to the complex nature of the RTI services and the heterogeneous performance requirements of the simulation community, a standard mechanism to enable different RTI implementations to interoperate has not yet been identified.  This fact forces a federation to chose a specific RTI implementation that will be used by the entire federation.  Information related to the network infrastructure can be estimated based on the number of objects, expected data rates, size of data, and other characteristics captured in the Federation Execution Planner’s Workbook.  Configuration of Computing ResourcesTo properly configure the computing resources there are several activities that should be performed to ensure the required software is installed, properly configured and the necessary network services are available.  Due to the nature of different operating systems and compilers the configuration of the computing resources should be performed by a System Administrator and tested prior to a federation integration test.  A list of activities that have proved to be helpful in ensuring an environment is properly configured is:Ensure the operating system and patches that are required by the RTI software and federate applications are properly installed;Ensure the compiler version and patches required by the RTI software and federate applications are properly installed;Perform a simple test by compiling and executing one of the example RTI applications such as HelloWorld to ensure that the system is configured properly and operational; andPerform a more advanced test running one of the example RTI applications such as HelloWorld on all hosts to ensure that the environment is configured properly and able to execute a federation.If you were unable to successfully perform step 3 then you may want to verify steps 1 and 2 and examine the installation of the RTI and the environment variable settings.  If you were unable to successfully perform step 4 then the following list of activities should be performed:Verify that each machine has the appropriate IP configuration for IP address, subnet mask, gateway, etc.;Verify that the routing tables on each host are properly established to allow multicast traffic to travel over the correct network interface (‘netstat –r’ on most platforms); andUse a test program such as ttcp (http://www.ccci.com/product/network_mon/tnm31/ttcp.htm) to ensure that TCP, UDP, and multicast services are available on each host and that each host is able to communicate with every other host.Testing of DSEProper testing of the distributed simulation environment is critical to prevent wasted resources during initial integration events.  A detailed test plan that includes a schedule should be created that describes the activities to be performed that will help ensure that the DSE is functioning properly.  Each task identified in the test plan should attempt to define proper exit criteria or objectives for the task.  Management of the testing includes the ability to adapt to schedule slippage that is common when a new environment is being configured.The DSE test plan should include two major components: network testing and federation testing.  It may be useful for the test plan to include some of the computing platform configuration testing that was outlined in the previous section.The objectives of the network test activities are to ensure that all of the computing platforms are properly connected to the exercise network and capable of supporting general QoS (quality of services) characteristics such as latency, throughput, multicast subscription latency and stability.One useful set of network experiments is to utilize standard network tools that are typically bundled with the operating system.  For example, the “ping” program will ensure that there is connectivity from one machine to another.  This utility can also report the latency of sending a message to the other machine and receiving a receipt acknowledgement.  Since connectivity may only exist in one direction it is useful to test both directions.Concerns about the basic ping connectivity or latency can be investigated with another common utility, “traceroute” (or “tracert” on Windows).  This utility will indicate the various network devices involved in the particular path between two machines.  Both of these utilities are based on TCP which is the prevalent interconnection mechanism supported by the existing RTI implementations.The DMSO RTI benchmarks can also be quite useful in testing network performance.  The latency and throughput benchmarks are of particular importance in most simulation exercises.  Several tests should be performed and the results should be compared against published results for similar equipment.  If representative performance numbers are not available the RTI vendor should be consulted.The second component of the test plan is the federation testing.  In this testing the actual federate applications are used to exercise the network.  This testing can start with individual federate testing to ensure that there are no basic problems with the federates.  During this testing it can be useful to have a recorded log file that generates various object updates and interactions that may be present in the actual exercise. A Federation Management Tool may also be used during individual federate testing to ensure operations such as synchronization points, save, and restore are working properly.  Additionally some of this testing may be accomplished with HLA federate compliance testing.After the individual federate testing is complete it is useful to examine various pair-wise federate testing.  These tests should attempt to utilize common scenarios or ensure operating characteristics that are representative of the actual exercise.  The pair-wise testing then builds into the full federation testing in which all federate applications are fully engaged in the exercise under careful monitoring.The monitoring that should occur during full federation testing is examining individual computing platform and network operation.  The appearance of a properly running exercise should not be assumed to indicate that all is well.  The processing load and memory usage for each platform should be collected and stored in a log file during the testing.The network loading should also be examined and log files created.  There are various graphical network tools that are quite useful in quickly assessing network operating performance and are highly recommended in stressful exercise environments.  Simple network utilities are also often bundled with the operating system (e.g., netstat).The computing platform and network log files should be examined after the federation testing to ensure that all of the system components are behaving properly.  When problems occur during the federation testing it is important to carefully attempt to isolate the cause of the problem.  Although this sounds quite obvious, the complexity of the DSE can make it difficult to manage the required controlled experiments to support this isolation.One simple checklist to follow to isolate the cause of a federation problem is:Is the problem caused by the addition of a particular federate application? Attempt a binary search through removing federates to determine the problem application.Is the network overly loaded, including individual computer network cards?Are any of the computing platforms overly loaded (processing, memory)?These initial questions can help refine the cause of the particular problem.  Often much more detailed investigation is required, but these coarse evaluations need to be performed first.SummaryWe have attempted to discuss the issues and activities associated with the planning, configuration, and testing for distributed simulation exercises.  Each particular project will have unique requirements or characteristics to be considered when developing a federation engineering approach to the exercises.An important point to recognize is that proper preparation and examination, combined with solid engineering practices, provides a significant investment towards a successful event. A few summary items are shown below.The distributed simulation environment is complex and requires multiple skill sets, relying heavily on those associated with the infrastructure environment.A plan should be created to ensure that the computing platforms and networks are properly configured and tested.A systematic approach is required for solving problems within the distributed simulation environment.References[1]	High Level Architecture Interface SpecificationVersion 1.3,  HYPERLINK "http://hla.dmso.mil/tech/ifspec.html/" http://hla.dmso.mil/tech/ifspec.html/.[2]  High Level Architecture Federation Development      and Execution Process (FEDEP) Model, Version 1.5, December 8, 1999,  HYPERLINK http://hla.dmso.mil/federation/ http://hla.dmso.mil/federation/[3]   High Level Architecture  Federation Development and Execution Process (FEDEP) Checklists, Version 1.5, December 1999,  HYPERLINK http://hla.dmso.mil/federation/ http://hla.dmso.mil/federation/[4]	Federation Execution Planner’s Workbook (FEPW) Editor User’s Guide, Version 1.3, 28 May 1999,  HYPERLINK http://hla.dmso.mil/fed_tools/ http://hla.dmso.mil/fed_tools/[5]   RTI Performance Benchmarks,  HYPERLINK http://hla.dmso.mil/sdc-cgi/hla_cat.pl?Form=bench http://hla.dmso.mil/sdc-cgi/hla_cat.pl?Form=bench   Author BiographiesStephen T. Bachinsky is a division manager with Science Applications International Corporation (SAIC) in Alexandria, VA.  He has been working on the HLA activities since 1995 and is currently the program manager for the RTI-NG (Next Generation) development and support activity.  His interests include the software architecture, design, and development of high performance distributed information systems.Richard Briggs is a director with Virtual Technology Corporation (VTC) in Alexandria, VA.  He has worked on HLA activities since 1995 and is currently working with several training and simulation based acquisition programs helping them go through the process of developing an HLA federation.  In the past, he has supported the productization, technical support and training of several of the DMSO RTIs as well as Cadre outreach support for the configuration and performance optimization of HLA federations.Barron Gibson is a Simulation Support Technician with the IITRI/AB Tech Group of Alexandria, Va. Prior to joining IITRI/AB Tech Group, he was employed as a Systems/Network Engineer in the IDA Simulation Center. After leaving IDA and joining BDM he worked on the Synthetic Environment Project  before joining the Synthetic Theater of War Program where he was the primary systems administrator for the JTASC STOW simulation facility.Chris Turrell is a Senior Simulation Analyst with the IITRI/AB Tech Group of Alexandria, VA where he is the Deputy PM for the Defense Modeling and Simulation Office’s HLA Program.  Prior to joining IITRI/AB Tech Group, he was the Operations Manager of the IDA Simulation Center where he participated in and supported numerous DARPA and DMSO simulation technology initiatives.