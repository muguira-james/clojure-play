“Innovations in Process Modeling as Applied to JFCOM Joint Experimentation Directorate Division Experiment Management Teams” Jennifer Browning, Johnny Garcia, Erin Paredes-von OeyenGeneral Dynamics AIS7025 Harbour View BoulevardSuite 101Suffolk, VA 23435 Ajay Gupta, Chandrasekhar Manginipalli, Sujay Bedre, And Vijay VepakommaOld Dominion UniversityDepartment of Computer Science3311 E&CS BuildingNorfolk, VA 23529Keywords:Resource Management, Process Modeling, Bottleneck IdentificationABSTRACT:   In any organization, a decision to make major changes in personnel or processes must be carefully analyzed before the changes are actually implemented. Doing so helps prevent disruption of business work flow or the incurrence of unnecessary costs due to flawed decisions. It is for this purpose that the concept of a process model is used. A process model provides a simulated work environment in which proposed changes can be made and, to a certain degree, the actual effects known ahead of time. Within the Joint Forces Command Joint Experimentation Directorate (J9) division, this concept has been applied to each of the three Experiment Management Teams (EMTs). The model, built with Gensym’s G2/ReThink software package, contains three separate validated process flows for each team on a shared top-level workspace, including approximate task duration, resource allocation, constraints and J9’s business rules and logic unique to the organization. In this paper, the EMT model and the graphical interface developed to make the operation of the model user friendly for the person performing the analysis will be discussed.  An innovative control panel has been developed that features utilities such as the creation, deletion and transfer of resources on the fly, charts to map maximum and average utilization rates, and an overview “stoplight” depiction of all tasks.  Customer interaction and feedback has led to a focused effort on giving the model a readable and interactive interface that is designed to bring potential problem areas and bottlenecks to the attention of the operator through the use of pop-up windows, rather than force him to get into any more structural details than necessary. The model will allow the operator to explore detailed “what-if” scenarios and to view the impact of process flow or personnel changes before they are implemented within the organization.              .IntroductionOver the past few decades, the field of process modeling has been overwhelmed with numerous tools, all of which demanded the presence of a modeler to interpret. At the same time, increasing complexity and functionality of the modeling tools called for the involvement of an expert. The field of modeling has benefited in terms of better analysis from the complex tools available but has significantly inhibited the user’s ability to operate. The major issue now is how these improvements can be used as an advantage, concealing the complexity involved. Enhancements involving the user interface to a certain extent help us overcome these issues. This paper explains how a process-modeling engine such as ReThink can be enhanced to give the end user a friendly experience. These interactive interfaces developed for Joint Experimentation Directorate (J9) contain several modules which let the user communicate with the model and display the outcome in different forms. This paper also elaborates on the ‘Project Time Prediction’ concept and the ‘Dynamic Model Generation’ Tool.The Joint Experimentation Directorate (J9) division of United States Joint Forces Command (USJFCOM) is tasked with leading in the development, exploration, testing, and validation of future joint concepts for warfighters. JCD&E is the process by which J9 personnel conduct concept development and experimentation using a common joint context to discover, explore, develop, and refine new warfighting concepts and capabilities required to address joint warfighter needs. The JCD&E process includes all experimentation activity such as discovery, "blue sky" efforts, prototyping, emerging technology, exploration, and identification of future concepts required to advance joint warfighter capabilities.Experiment Management Teams (EMTs) are in place to facilitate these experimentation activities. The EMTs have four core members: a government lead, a lead controller, a lead planner, and a lead analyst. Additionally, the teams have technical integrators who coordinate various requirements with the Experiment Engineering Support Department (EESD), among other duties, and knowledge managers who maintain report archives for all events. The EMT Model was developed to perform the following functions related to potential reorganization efforts of the EMTs:Ability to identify and reduce tasking bottlenecks and support operational decisionsAllow the user to modify resources, allocations, and organizational structuresAllow the user to analyze planning statistics at the individual, task, section, or entire organizational levelAllow the user to analyze tasks by priority and/or in a time constrained environmentAbility to generate new task lists and assess impact on current missionAbility to export output data into other analytical tools for further analysis or displayTechnologies UsedGENSYM G2®The G2 platform uniquely combines real-time reasoning technologies, including rules, procedures, object modeling, simulation, and graphics, in a single development and deployment environment.  G2 transforms real-time operations data into automated decisions and actions, all in real time.  G2 applications work in concert with existing operational systems, including enterprise systems, databases, automation systems, data historians, network management systems, telemetry systems, and many more.  With G2, application builders can use Gensym's Xtreme Consulting methodology to rapidly design using prototyping and simulation, develop iteratively, deploy, and continuously adapt their reasoning-driven solutions.GENSYM RETHINK®Unlike traditional business process reengineering and management tools, G2 ReThink supports the entire business process lifecycle from defining the processes, to validating new and updated processes, to developing the application, to online deployment for automation of decisions, to continuous adaptation and improvement. As a business process modeler, G2 ReThink enables users to model a business as it operates today. Users define key performance metrics and apply simulation to determine how business operations measure up against those metrics. Using simulation, users analyze the performance of business-process alternatives. Because it is built upon Gensym's leading G2 real-time rule engine, G2 ReThink can monitor business processes in real time, alerting operations personnel to potential problems as they occur. G2 ReThink's models are ready to automate online execution of business processes to help achieve and sustain higher levels of business performance.Graphic Interface PropertiesVisualization of information is crucial for the analysis of any process. Even minor details play a role in the decision-making process. For example, viewing the distribution of projects across the organization would help us decide whether to increase the resources or to reduce the project intake. The cost overrun information would help us decide whether to cut down the resources depending on their performance and efficiency. Attention to this kind of detail would clog the interface with non-essential data. We need an intelligent way to display this information without flooding the screen. In order to overcome information flooding we use functionalities such as tables and graphs to display the data. Displaying hazardous and critical warnings when they occur and giving the user detailed information in the form of textual pop-ups will update the user with critical information.The critical information is maintained in the form of log entries. These log entries can be viewed if they are missed by the user when they appear in the form of pop-ups. These kinds of log entries help us to predict and overcome the problems in real time. This plays a major role in the improvement of the process.4. EMT-Model Concepts4.1 PROJECT (EVENT) ASSIGNMENT a. BASED ON QUEUE LENGTHThe EMT model, built with Gensym’s G2 and ReThink development tools, helps analyze the organizational process of JCF experimentation. The model simulates the existing three teams among which the projects, or events, are distributed. When the project arrives the Gate Keeper will issue a co-ordination ticket and an execution ticket on approval of the project. The incoming projects are distributed between the three EMTs based on certain factors. The criteria on which the decision is based on are queue length, type of the project and expertise in each team.G2 Implementation:The following algorithm calculates highest queue length for each EMT. Then the project is sent to the EMT that has the least value of the three queue lengths. This is achieved by a process which traverses to the lowest level of the process hierarchy and calculates the queue lengths for all the paths at that level. This process is repeated for all the EMT models. If two EMT models have the same highest queue lengths then the total number of projects being processed in each EMT model is computed and the project is sent to the EMT model that has the least value of total number of projects.Decide-path ( ) = (text)q1-sum, q2-sum, q3-sum : integer;q1-large, q2-large, q3-large : integer;path-to-send : text;Beginq1-sum = the total-insertions  of the bpr-path  connected at the input of emt1 - the total-insertions  of the bpr-path  connected at the output of emt1;q2-sum = the total-insertions  of the bpr-path  connected at the input of emt2 - the total-insertions  of the bpr-path  connected at the output of emt2;q3-sum = the total-insertions  of the bpr-path  connected at the input of emt3 - the total-insertions  of the bpr-path  connected at the output of emt3;q1-large = call greatest-in  (array1);q2-large = call greatest-in  (array2);q3-large = call greatest-in  (array3);path-to-send = call least-of  (q1-large, q1-sum, q2-large, q2-sum, q3-large, q3-sum);return path-to-send;end;b. BASED ON EXPERTISEEach of the existing resources has an expertise level assigned to them. Once a project arrives, the type of the project is evaluated. The project is then assigned to the team with the highest expertise for that project. For example, if a database related project arrives, then the team with the highest expertise level in databases is the one that is assigned the project. In situations where the chosen model has a bottleneck, the next expert team is assigned the project. This way the projects are distributed as evenly as possible to attain a smooth flow in the model. 4.2 IDENTIFYING CRITICAL PROBLEMS AND BOTTLENECKS Bottlenecks are normally detected on occurrence at a specific task. The bottleneck depends on the queue length and the availability of resources. The queue length is the sum of the waiting projects on a processes input path. If the resource is not available then the queue length builds up which leads to a bottleneck. The cause of the bottleneck and the location information is written into a log record. Messages that are in the log are color-coded according to their status. If the problem persists, the message appears in red until it is fixed, at which time the color changes to green. The flexibility of transferring a resource or creating a new resource is also provided. A thread is started in parallel, which keeps checking if the bottleneck still exists. When the bottleneck is cleared, the thread changes the color of the message to green and is then terminated.   LOG ENTRY MESSAGE BOARDOnly one log entry exists for each problem. If the problem reoccurs, the existing entry is updated.  In a situation where the entire model becomes unstable due to accumulation of work objects, the interface alerts the operator with a pop-up window. This pop-up window describes the failure event and provides a button to go to the problem location immediately. The pop-up disappears once the problem is fixed. A threshold is set for the maximum number of weeks that a project can actually wait in a queue. The user, through a text box on the simulation workspace, sets this threshold. Once this threshold value is reached, the model is considered to be in an unstable state.The progress bar on the JCF-ROOT workspace displays information about the progress made in terms of simulation time. The total simulation duration is provided by the user before the start of the model, which is represented by three unit types: hours, days, or weeks.SIMULATION COCKPIT WORKSPACE4.3 OBJECT PRIORITY AND COMPLEXITYThe processing of objects is done based on the priority assigned to the object. The object with the highest priority is processed first, then the one with the next highest priority, and so on until all the objects are processed. When there are two or more objects with the same priority they are processed based on their arrival time (i.e. the object which arrives first gets serviced first). Later, the objects are placed in the queue based on the priority assigned to them.G2 Implementation:bpr-enqueue-simple(q:class bpr-queue, e:class bpr-object)each-object:class bpr-objectempty:truth-value ;beginempty = true;for each-object = each bpr-object in q doif the external-priority of each-object > the external-priority of e and empty = true thenbegininsert e before each-object in q;empty = false;end;end;if empty = true theninsert e at the end of the bpr-object list q;endThe duration of the task block will vary according to the complexity of the object that is currently being processed. The object with higher complexity will take longer time to process than the one with lower complexity. This results in the usage of the resource for a longer time. 4.4 RESOURCE MANIPULATION AND MANAGEMENTResources within the model are managed via a ‘resource manipulator’. Rather than assign each resource to all the tasks they are responsible for, G2 enables a manager that controls either an individual or a pool of resources. This manager is assigned to the task blocks and will allocate resources as needed.RESOURCE-MANIPULATOR-EMT1The ability to create or delete resources when the model is running is provided. This feature is provided on the top-level workspace of the “one-click” .NET interface. Using the deletion button here removes the resource added last to the model. Adding or creating the resource makes it available immediately to the pool that it belongs to.  This ability comes in handy when there is a bottleneck in the process.  4.5. UTILIZATION GRAPHSThe resources have factors that govern their behavior. The major factors are maximum utilization, current utilization, average utilization, efficiency and cost. The maximum utilization of a resource represents the amount of the resource that is available for a task. The current utilization shows the extent to which the resource is being utilized.  The average utilization of a resource is the measure of the total amount of time that a resource is allocated to a task, compared to the total amount of time that the model has been processing (3).The black solid line represents the maximum utilization of the resource and the red lines indicate the current utilization. When the red line in the graph reaches the black line on the top, this shows that the resource is utilized completely at that instant. In the case of the EMT-Analyst shown in the graph, there is a reasonable gap between the red and the black line. This indicates that the analyst or analysts are not being used up to their maximum levels.The input/output graphs give us information on the various objects that have been processed. EMT PLANNER UTILIZATION GRAPHEMT ANALYST UTILIZATION GRAPH4.6 UTILIZATION TABLEThis feature is accessed from the “Utilization Table” button on the right side of the main screen. The table is a dynamically changing chart that shows several depictions of resource utilization: Maximum, current, and average utilization of individual resources within each EMT and the JC-F cross-matrix workforceAverage resource utilization in terms of a percentageMaximum, current, and average utilization of each EMT as a whole  UTILIZATION TABLE4.7 TASK PANELThe status of all the processes can be seen in the task panel. A stoplight-fashioned system is used to represent the current status of the processes. A green light indicates that the task is ready to accept objects. A yellow light indicates that the process is busy and is currently executing. A red light indicates that the queue length has exceeded the threshold or a resource for that process is unavailable. An occurrence of the red light also indicates the presence of a bottleneck.TASK PANEL5. OBJECT TIME PREDICTION Time prediction is the ability to predict the duration that a particular project will take to complete. This gives the user the ability to estimate the time that the project would take to complete with constraints. Queue length and task durations are the factors that affect the predicted time. The amount of time an object takes to complete the whole process is directly dependent on the duration of the blocks and queue length of the objects accumulated in the path connected to the block. Let’s assume at some point when the model is running the queue lengths are Q1, Q2, Q3, Q4,…. Of the blocks B1, B2, B3, … respectively,  D1, D2, D3,…… are the durations of those blocks. If the object which is created next has to reach the destination, the time it takes is directly proportional to the sum of the time to process Q1 objects in D1 duration, Q2 objects in D2 duration, Q3 objects in D3 and so on. Let’s assume we have ‘n’ blocks B1, B2, B3 ……..Bn. The duration of the blocks will be D1, D2, D3, ……Dn respectively and Q1, Q2, Q3, …….. Qn are the queue lengths of the paths connected to the above blocks. If the next generated object Ocurrent has to reach the destination, it has to clear all the queues. We will first find out how much time it takes to clear each queue, the sum of which will lead to the total time it takes. For the object to reach B1 it will take Q1 * D1 sec. In the meantime, some of the objects in Q2 will be processed and sent to the path of B3, and some of the objects from Q3 are processed into B4’s path, and so on. The number of objects which will be processed and sent to Q3 from Q2 are (Q1 * D1)/ D2.C0C1C2C3C4 R0R0Q1Q2Q3Q4Q5*R10Q1+Q2((Q1*D1)/D2)((Q1*D1)/D2)+Q3-((Q1D1)/d3)((Q1*D1)/D3)+Q4-((Q1*D1)/D4)((Q1*D1)/D4)+Q5-((Q1*D1)/D5)*R200R1C2+R1C3-((R1C2*D2)/D3)((R1C2*D2)/D3)+R1C4-((R1C2*D2)/D4)((R1C2*D2)/D4)+R1C5-((R1C2*D2)/D5)*R3000R2C3+R2C4-((R2C3*D3)/D4)((R2C3*D3)/D4)+R2C6-((R2C3*D3)/D5)*R40000R3C4+R3C5-((R3C4*D4)/D5)*Every queue to be cleared will be a single iteration. So in the first iteration the number of objects in the path of B1 will be 0, in B2 will be Q1 + Q2 – (Q1 * D1 / D2), in B3 will be Q2 + Q3 – (Q1 * D1 / D3) and in Bn will be Q(n-1) + Qn – (Q1 * D1 / Dn).In the second iteration, the objects in the queue of B2 will be processed and sent on to the path of B3. So the number of objects in each path will be as shown in row R2 of the above table. Row R3 shows the queue length after 3rd iteration, R4 for the 4th iteration and so on, after nth iteration the number of objects in the queue of each block will be zero. The next object which is going to reach the destination is Ocurrent. So, the total time taken for the object to reach the destination is: R0C0 * D1 + R1C1 * D2 + R2C2* D3 + R3C3 * D4 +… + Rn-1Cn-1 * Dn; or Or if we expand it will be: Q1D1 + [Q1 + Q2 – ((Q1 * D1) / D2)] * D2 + [((Q1 + Q2- ((Q1 * D1) / D2)) + ((Q1 * D1)/D2) + Q3 – (( Q1 * D1) / D3) – (((Q1 + Q2  – (( Q1 * D1) / D2 )) * D2 ) * D3 ) ] + …………….Algorithmic Implementation:array[0][0]=Q1; array[0][1]=Q2; array[0][2]=Q3; array[0][3]=Q4; . . .array[0][n] = Qn.Duration[0]=D1;Duration[1]=D2;Duration[2]=D3;Duration[3]=D4; . . .Duration[n] = Dn.int prevBlock=0;int prevObjsCleared=0;for (int i=1; i<numberOfBlocks-1;i++){array[i][prevBlock]=0;	array[i][prevBlock+1]=array[i1][prevBlock]+array[i[Block+1] - ( ( array[i-1][prevBlock] *Duration[i1]) / Duration[prevBlock+1] );prevObjsCleared = ( ( array[i-1][prevBlock] * Duration[i-1]) / Duration[prevBlock+1] );for(int j=prevBlock+2;j<numberOfBlocks;j++){array[i][j] = prevObjsCleared + array[i-1][j] - ( ( array[i-1][prevBlock] * Duration[prevBlock] ) / Duration[j] );		prevObjsCleared = ( ( array[i-1][prevBlock] * Duration[prevBlock] ) / Duration[j] );}prevBlock=prevBlock+1;}Therefore   the time an object takes to reach the destination is:int TotalDuration;for(int k=0;k<numOfBlocks;k++){TotalDuration = TotalDuration + array[k][k] * Duration[k];}5. DYNAMIC MODEL GENERATIONBuilding models manually from the given requirements is a tedious process in ReThink and G2. If the required data exists in a computer readable format, manually building the model is an inefficent use of a developer’s time. The dynamic model generation utility will parse through the requirement data located in a database or a file system and generate the model dynamically. For each process, it creates a task block and for each sub process it creates sub blocks. Then the connection information is retrieved from the task connections and resource information from the task resource.The creation of a task block requires three important values: name, hierarchical parent and the duration. The built utility will search for the parent block, create a sub workspace, and then create the required block on the sub workspace, assigning the duration. Each block on a workspace has a local ID. The ID of the block is the local-ID appended to the parent-ID. This block-ID is the unique identifier. The connection information retrieved from the “TaskConnections” will give us the source block ID, destination block ID and the path direction.Creating connections involves locating the source block and destination block. If both blocks are on the same workspace then the connection is created directly. If the blocks are on different workspaces, the level in the hierarchy where the blocks belong to is identified. If the blocks belong to the same level then we traverse back until the parents of both the blocks are located on the same workspace.DYNAMIC MODEL GENERATION ARCHITECTUREDuring the traversal, the IDs of blocks are stored in a source/destination stack.  The first connection is made between the top-item in the source stack and the top-item in the destination stack. The top items are connected to the next item in the stack recursively until the source and destinations at the bottom of the stacks are reached. But if they are on different levels then the level difference will be traversed first and the above procedure is followed.Block Id = [Parentid][localid]Parentid is the id of the parent block. Localid is the id of the block on the local workspace.Blockid is the name of the block in the hierarchy.The blocks are created in a hierarchical fashion. Only after the creation of the blocks is the system capable of making connections between the blocks. The Java link provided by Gensym is used in order to achieve communicability between the two systems.   6. ONE CLICK INTERFACEThe model viewed using the Java client provided by Gensym is a rather generic interface and has limited capabilities. To overcome these limitations, a customized interface using the G2-com was developed. This interface is easy to use and the entire application is deployed on a single click of the .exe file. This is an improvement on the traditional interface where the user had to go through a sequence of steps before actually viewing the model.Development in Visual Studio.NET, with C-Sharp for coding, makes the application easy to maintain, both for management and deployment. The ActiveX link provided by Gensym is used in order to communicate with the G2 server. The interface has a single-click button control panel view to maneuver quickly and easily.                             ONE-CLICK INTERFACEMICROSOFT© OUTLOOK INTEGRATION TOOL The interface has an integration capability with Microsoft© Outlook. A user has the ability to use the Outlook calendar to schedule time away for training, leave, etc. for each EMT resource. This serves as an input to the model, which searches on certain key words (“Training”, for instance) and on resource names. As an example: Resource A takes the week of December 12-16 to attend a training course. The model will automatically remove Resource A, making him unavailable to perform tasks. Once the dates of the scheduled training pass, Resource A will become available again. Additionally, efficiency rates of resources can be changed automatically, if this change can be quantified numerically. For instance, if Resource A attends training for something that pertains to his primary duties, his level of efficiency may be increased by a pre-determined percentage.6.2.   POP-UP MESSAGESThe model will alert the user to particular problems within the process by showing a pop-up alert message. The user may set a threshold, located in a label on the top-level main workspace, to a certain level that is acceptable, and everything that occurs beyond that level will form an alert. For example, if the user wants to be notified of all tasks that sit longer than 2 weeks waiting for a resource, he would set the threshold to 2. This threshold can also be customized to a different unit- days, hours, etc.                                                 POP-UP MESSAGETASK INPUT RATEA slider located at the top of the main level allows for manipulation of the task input rate. The slider is depicted in terms of seconds (from 0 to 4,838,400) but two labels also show the corresponding time in days and in weeks. The user may set this slider anywhere between the two numbers. Increasing the amount here consequently will decrease the rate of inputs into the system. In other words, if a user wanted an object, or event, to be sent into the system every two weeks, he could do so using this slider.EXPORT CAPABILITY TO MICROSOFT© PROJECTA connection has been established that allows the model to generate output to send to a Microsoft Project file. First, all the tasks in all levels of detail will be filled in to the file. Next, the dependencies and task durations will be determined.7. SummaryThe EMT Model concept, with its available features and particular customizations, provides the end user with the ability to easily enact “what-if” scenario analysis. This project attempts to facilitate ease of use through a simple interface that hides away unnecessary information, only showing that which the user defines as important to him when operating the model. The EMT Model project successfully capitalizes on sophisticated, mature simulation technology to provide accurate, real-time feedback to assist in decision making surrounding personnel reorganization efforts. The applications were developed with the expressed intention of their ability to be scaled or customized to many different types of businesses and organizations.8. BiographiesJennifer Browning is a software engineer and project analyst at General Dynamics Advanced Information Systems. She has experience working in both analytical and developmental roles within process modeling and business process reengineering; application development, architecture modeling, and requirements gathering and management. She has concentrated on focusing her efforts to serve as a liaison between customers and developers to create capabilities that meet requirements that help pinpoint resource allocation issues, process bottlenecks, and comparisons between as-is and to-be process flows within organizations.Johnny Garcia is the Chief Technologist for General Dynamics Advanced Information Systems ETS and a Modeling and Simulation Ph.D. student at Old Dominion University.  He has over 12 years of engineering experience that includes systems architecture design, software development, database development, C4I systems development, logistics systems development, and new technology insertion for the Department of Defense.Erin Paredes von-Oeyen is a General Dynamics Advanced Information Systems Software Engineer and a Computer Engineering BS graduate of Old Dominion University. She has school-related experience on research projects such as face authentication, data compression, and neural networking for modeling and simulation purposes.  She specializes in working with many different types of programming languages such as VHDL, C++, and Java.  Her present focus is with emergency management modeling and simulation.Ajay Gupta is the Director of Computing Resources and a faculty member in the department of Computer Science at Old Dominion University.  His area of expertise includes computer networks, system and network security, ERP systems, database design, distance learning, process modeling and web technologies.   Chandra Sekhar is a Research Assistant at Old Dominion University, currently pursuing Masters in Computer Sciences.  He has been working on Process Modeling and Simulation software for 1 year. He has experience with Application Development, Database Design, Unified modeling Language and Systems Programming.Sujay Bedre is a Research Assistant at Old Dominion University, currently pursuing a Masters Degree in computer sciences. He has been working with data mining and process modeling for a period of one year. Vijay Vepakomma is a Research Assistant at Old Dominion University, currently pursuing a Masters Degree in Computer Sciences.  He has been working on Process Modeling and Simulation for over a year.  He has over two years of system and application development experience.References[1] CURTIS, B., KELLNER, M.I., and OVER, J.: “Process Modeling,” Communications of the ACM. 1992.[2]  HEWITT, S.T., and HERRMANN, J.W.: “Interfaces to Enhance User-Directed Experimentation with Simulation Models of Discrete-Event Systems”, 2000.[3] Gensym® ReThink User’s Guide, Copyright 2002 Gensym® Corporation.[4] KELLNER, MADACHY, and RAFFO, “Software Process Modeling and Simulation: Why, What, How,” Journal ofSystems and Software, Vol. 46, No. 2/3 (15 April 1999).[5]  HEDBERG, Sarah Reese “AI fools for business-process modeling”., Executive Insight, August 1996.[6] ALI, S.A.,SEIFODDINI, H., and  SUN, H.:”Intelligent Modeling and Simulation Of Flexible Assembly Systems”, [7] Proceedings of the 2005Winter Simulation Conference.[8]The United States Joint Forces Command Joint Experimentation Division (J9) website “http://www.jfcom.mil/about/abt_j9.htm”