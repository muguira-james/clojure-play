Making a Constructive Terrain Virtual: Lessons LearnedN.C. Strauss, Ph.D.MathematicianBoeing HelicoptersPhiladelphia, PA(610)591-3351 HYPERLINK mailto:nicholas.c.strauss@boeing.com nicholas.c.strauss@boeing.comKeywords:Modeling and Simulation Interoperability, Helicopter, Constructive/Virtual Simulation, Digital Terrain, Correlation, Coordinate Conversion/System, Object-orientedAbstractConstructive and virtual simulations have different requirements and objectives. Loading a large terrain designed to meet constructive requirements into a desktop  out-of-cockpit virtual simulator is often impossible. However, the converse problem of loading terrain designed to meet virtual requirements  into a constructive simulation is often possible. The advantages are important – having a sole source of terrain data provides the certainty of 100% correlation between simulations. Our basic objective is to accurately model helicopter nap-of-earth flight. In nap-of-earth flight, the helicopter flies as low and as fast over the terrain as practical. Helicopter dynamic models, in conjunction with the use of a large digital elevation matrix at dense samplings (<100m), provide accurate performance predictions over a full mission for a representative helicopter. Verification of a constructive simulation can be problematic. In contrast, in a virtual simulation, a pilot can fly essentially the same mission in a simulator as he/she could in the actual aircraft. We solved a constructive/virtual correspondence problem by extending our simulation to work directly with ‘virtual’ terrain databases usually associated with image generators. This solved our terrain correlation problem exactly. Our out-of-cockpit display correlate exactly with our plan view map display.This paper describes software modifications required to adapt the constructive simulator, the creation of the terrain database, and lessons learned in supporting the Australian DSTO simulation exercise near Katherine, Australia (14S, 132E) with the Apache (AH-64) helicopter. By using an object-oriented methodology, we analyzed our constructive simulator and delineated objects and  methods. Much of our code is based on MODSAF libraries and is written in C and FORTRAN. We provided a low-cost, easily transportable desktop flight simulator. We have improved our constructive simulation capabilities by providing a new verification  tool that can be used to analyze the helicopter flight dynamics and other physics with a direct out-of-cockpit display. We have extended our constructive simulation to work with more general playing areas, potentially encompassing more realistic line-of-sight modeling and threat models.1. IntroductionThe objective of Boeing Philadelphia’s helicopter simulation is to accurately model helicopter nap-of-earth (NOE) flight. In NOE flight, the helicopter flies as low and as fast over the terrain as practical.  This could require flight of over 100 kts at under 30 meters a.g.l. --  tree top level. Constructive helicopter simulations typically work over a fairly large geographic area (at least 100 square kilometres). The constructive simulation provides a plan-view display useful in visualizing the overall battlespace and in laying down aircraft flight paths and ground unit ground tracks.The virtual simulator provides real-time simulation for pilotage.  The virtual simulation provides an out-the-window view displayed by an image generator (IG). The NOE requirement places unique and challenging demands on the IG. The fast velocity requires that the terrain model be rapidly paged and the low elevations require that individual trees, buildings, and power lines be modelled. In contrast, most aircraft simulations are at high altitudes with rudimentary terrain modelling  and some highly detailed airports. The limited performance of a low-cost, easily transportable desktop IG’s places a limit on the number of polygons that can be rendered in real-time for successful virtual simulation. Roads, rivers, bridges, and towns must be highly detailed to provide the illusion of reality. Exact correlation between the virtual and constructive simulation is a requirement. Otherwise, NOE flight paths created in the constructive simulation can easily result in flight into terrain in the virtual simulation. One easily observes tanks floating 100 meters in the air and helicopters flying underground in simulations which are not exactly correlated.This paper is concerned with digital terrain models and how these databases are used by constructive and virtual simulations. Methods for achieving exact correlation between simulations are described. Integration of digital terrain representative of actual field conditions is important for understanding mission and platform requirements. Digital terrain varies considerably depending on geographic location (plains, plateaus, glacial deposits, volcanic forms, and mountains). Man-made structures and vegetation also vary. Our simulation must be able deploy anywhere in the world. Each exercise (or marketing trade show) is usually interested in a particular threat. The area of engagement and associated geographic terrain usually plays some role in understanding and dealing with a threat. The plains near Katherine, Australia are desolate. The rolling land provides convenient cover for a fast moving helicopter. The combined virtual/constructive simulator gave both a plan view and out-the-window display of the actual location. In the figure below, the helicopter has just engaged a column of tanks. The constructive simulation has determined that line-of-sight exists to a given tank and has conducted a simulated fire event. The simulation determines a damage probability for the tank, and if the damage exceeds a kill threshold, the unit is declared killed.  In response, the virtual simulation adds a smoke plume to the tank.2. Terrain modelsProbably the simplest terrain model is the map. Until recently, constructive simulation have used the digital elevation matrix -- an uniform geodetic (or UTM) sampled array of field elevations. Examples include the U.S. Defense Mapping Agency’s DTED standard and MODSAF. Later, MODSAF added support for additional terrain models including triangular irregular networks (TIN). The compact terrain data base format (CTDB) is the data format corresponding to the MODSAF terrain model. There are seven different CTDB versions. Version four added support for irregular networks. CTDB is a fast-loading format.IG‘s use polygonal based terrain models. These can use various types of polygonal mesh incluing regular, multigrid, and irregular network. The use of level of detail (LOD) allows a single IG terrain model which supports multiple resolutions. Efficient use of vertices and/or polygons yields an efficient terrain model suitable for virtual simulations. Vertex density can vary according to need, i.e. in rugged terrain the density is greater than in flat regions where the density can be sparse. The OpenFlight format (see [6]) is a quite general format corresponding to the Performer based terrain model. OpenFlight is a push-pop format able to model general polygonal object hierarchies. It is relatively slow to load. There are many initiatives to specify a general terrain model including SEDRIS and Standard Interchange Format (SIF).Our basic problem was to correlate different terrain models. This is usually posed as a database format problem. How can we get terrain from format A to format B? This is a misnomer. It really is a model correspondence problem. As with similar problems of this type, the problem is to conserve the information content between terrain models, or to systematically relax the content. Simulations compromise between performance considerations and  information content. Obviously, one can’t provide a 1:1 simulation (see [8] and [9]). Varying the scale and providing a 1:x content is one parameter. The other major parameter is feature selection. 2.1 Scale VariationIn a 1:1 simulation, one meter on the earth’s surface, corresponds to one meter on the map. Or one map pixel corresponds to one earth pixel. In a 1:250,000 map, one map pixel is 250,000 earth pixels. A typical computer monitor has 1024 pixels for 21 inches, to yield 1889 pixels/meter. Dividing, 250,000/1889 yields 132 meters on earth for each map pixel. This agrees with DTED-I post sampling of 125 meters. So DTED-I yields a 1:125,000 scale and DTED-II, a post sampling of  30 meters yields about a 1:50,000 scale. The technique of resolution relaxation is essentially varying the map scale.  Given a scanned meridian of elevation postings, the technique skips postings and results in a filtered  terrain model. This downsampling is useful for providing a terrain model which can meet performance requirements.With this approach, we could relax the resolution to allow a terrain database small enough to be practically loaded and rendered in real-time. The complexity of a regularly gridded terrain database is proportional to the number of polygons in the database. Assume a basic terrain skin without cultural features or group hierarchy overhead. Letting the resolution r be the number of posts skipped, N the number of posts per row in the digital elevation matrix, and D the number of triangles total, it is easy to see that D = 2 (N/r)^2. Letting N = 1200 which is the standard for DTED Level 1 sampling at every 125 meters, we get the above figure. Linear features can also be represented at various scales. For example, a river at 1:250,000 might be modeled by a 1000 segment polyline, while the same river at 1:50,000 scale might require 5000 segments.2.2 Feature PruningAdding in the complexities of cultural features, it is easy to see that any one-for-one conversion process can result in a very large IG terrain database. Typical constructive simulations support linear features (e.g. roads, powerlines), area features (tree canopies), and point features (buildings). Extrinsic conversion of features results in a one-for-one mapping of polygons. Intrinsic mapping results in correlated location but not exact representation. For example, a building’s texture or number of windows might vary between databases. This is often sufficient.Image generators vary in their maximum polygon budget (Birkel in [5], quotes a limit of 2800 polygons per square kilometer which yields a total of 63 million polygons.) Our requirements were for a desktop IG with capacity quite a bit less than that. The constructive simulation objective requires features that present realistic obstacles and cover. Helicopter obstacles can include power lines, antennas, smokestacks etc. Helicopter and ground vehicle cover can be a wide range of features including tree canopies and individual buildings. The virtual simulation has two main objectives – to provide a simulation suitable for good pilotage and to provide the illusion of reality.  Good pilotage can be achieved with an accurate terrain skin and the addition of certain key features – point features (cooling towers), linear features (roads, rivers, and railroads), and lakes and shorelines.  Smoke plumes are a reliable geographic key feature that can be seen over great distance (>20km). Location of towns and cities are also useful for reference.2.3 Single Level of DetailIn trying to solve the difficult correlation requirements posed by helicopter NOE flight, we limited our discussion to terrain models at a single level of detail. This simplified our problem considerably. Terrain models which support multiple resolution offer real performance and modelling advantages. Multi LOD terrain models are fully supported by IG’s. Constructive simulations such as MODSAF do not support multiple LOD terrain. 3. CorrelationAs usual in this type of work, we were given a requirement and a fairly short time to complete a solution. The correlation has to be 100% in a NOE simulation. Any miscorrelation in the constructive simulation is grossly visible in the IG The required simulation was for Katherine, Australia. We were given elevation data but we couldn’t find any canned correlated terrain. We could generate a terrain database in either CTDB or openFlight formats, but creating a matched correlated set was a much harder problem.The obvious solution was to convert from the CTDB format to openFlight (or from openFlight to CTDB). At the time, the only method available was to use MultiGen’s converter process to create a openFlight database via DTED format. Placement of the elevation postings is arbitrary, and so, close correlation cannot be achieved by this process.Also, unanswered performance questions loomed ahead. Could the IG load up the entire flight database created from the CTDB database? Our practical experience was that a fairly large openFlight terrain model would be too big. We wanted to do trade-offs – resolution relaxation and feature pruning. Converting from CTDB to openFlight (or vice versa) each time we modified the database seemed like a lot of added work, wasting time that could be better spent improving our simulation. 3.1 ConvertersA converter process takes a set of files from one terrain format and translates them into another format. Ideally this process is standard, repeatable, and automatic. In practice, the process has several steps and needs manual input. Many of the parameters are arbitrary.3.2 Conversion from constructiveIn the constructive terrain model, linear segments represent roads. Translating the roads into the virtual terrain models can result in roads that look highly unnatural (even in a 1:1 conversion!). As evidenced in the figure below, a road abruptly changes slope as the road maps between adjacent polygons. This problem is most radical in mountainous terrain. In flat regions, roads look o.k. Rivers have the same problem. Note that this is not a defect in correlation, as the simulations show exact correlation. The obvious solution is to deviate from a strict translation and model the roads more carefully for the virtual simulation. For example, embankments on either side of the road can be modelled and the road itself can be banked and smoothed.  3.3 Conversion from virtualA converter has to integrate faces into cultural feature information, a difficult task. Roads are represented by a set of polygonal faces, not linear polylines. Point features such as buildings are represented by complete models. These models, if externally referenced, can be summarized but this is often not the case.The openFlight format (and other similar virtual terrain formats) are very general and can model terrain in many different ways. We have seen cases where complete detailed terrain models are created without terrain skin polygons having the terrain attribute. In addition, the feature identification attributes (FID) are also often missing. Any rational converter relies on these attributes.  If these attributes are missing, any converter must rely on non-standard cues such as texture and face coloring to guess at cultural feature correspondence. Thus, we see that unless the virtual terrain model has constructive cues already embedded  in attribute fields, the conversion is non-standard and non-repeatable.Another difficulty is that many constructive terrain models rely on strict patch boundaries. There is no such restriction with the corresponding IG terrain model. Hence, the terrain model must be “diced“.3.4 Terrain object modificationThere had to be another way. We could modify our constructive simulation to read the virtual terrain model directly. Now the solution seemed clear. By using the IG terrain database as the source, we could achieve exact correlation between our constructive simulator and our IG. No matter how much we had to relax the data, we would still be correlated. Sounds simple, but changing from a COTS one-for-one conversion mindset was non-trivial. The next challenge was to modify our constructive simulator.Modifying the terrain object within the simulator has several  key advantages: direct, single-source, object-oriented. First, it is direct. Instead of relying on a complicated many-step conversion process coupled to the existing constructive terrain capability, there is one direct terrain process. Secondly, it is single-source. Instead of relying on two (or more!) databases in different formats, we can rely on a single terrain database. Finally, the terrain object is now object-oriented. Our constructive simulator is written mostly in FORTRAN software and makes use of several add-on C and C++ libraries. The application made heavy use of the MODSAF libraries. The first step was to perform an object-oriented analysis of the simulator to determine what the MODSAF objects were and their methods. The two main objects found were the terrain and coordinate conversion objects. The coordinate conversion object was integral to the simulator and relies on the Uniform Transverse Mercator (UTM) coordinate projection. As is well known, this projection introduces error near the zone boundaries and is increasingly accurate along the central meridian.  Most simulations that we work with use the UTM projection. The terrain object, on the other hand, had a fair amount of specificity limited to the CTDB structures. So we decided to generalize the terrain object and accommodate CTDB as a special case. Then, we could add OpenFlight as another special case and so on. The methods that the general terrain object would need to support are:Storage ElevationGet LinearGet CanopiesGet BuildingGet TreesCompute Line-of-SightDraw LinearsDraw Abstract FeaturesFor CTDB, these methods could be drawn from the existing MODSAF terrain library. For OpenFlight, however, entirely new algorithms and methods were designed and written. We found that by careful algorithm design, we could provide a simulation fast and memory efficient enough to meet our mission requirements but considerably slower than CTDB. 4. Supporting a virtual cockpitThe Comanche Virtual Cockpit (CVC) is a desktop simulator which interfaces with our constructive simulator and COTS IG’s using DIS protocol. The CVC provides low-cost simulation with accuracy and is useful as a prototyping/verification tool. All the pilot’s instrumentation -- navigation, status, and control is on the computer monitor i.e. virtual. In addition, for two man helicopters e.g. RAH-66 Comanche helicopter  and AH-64 Apache, the co-pilot gunner’s station is also virtual. The CVC‘s multi-station design is highly reconfigurable. Control devices for the hands, feet can be attached to the CVC.For the current requirement, the AH-64 needed only a single station simulation and a single hand controller. Targeting and fire control were simulated via mouse and display monitor.The system design is modular with the use of multiple processes. Several operating system  interprocess communication schemes provide the interconnects. This is an easy way to put the system together.Supporting the additional AH-64 aircraft was primarily a matter of setting up the interface to additional processes. Alternative system designs providing tighter integration clearly can be considered. Such a second-order design can avoid much of the operating system overhead which limits multi-process scalability. Certainly, current technology will support such an approach. 5. Field Experience: Lessons LearnedWe were tasked to provide a desktop simulator to Australia Defence Science and Technology Organisation (DSTO) that would operate over about a one square degree area of northern Australia. We had to rapidly generate our own visual terrain database from a digital elevation matrix supplied by DSTO. The  out-of-cockpit display had to correlate perfectly with the constructive simulator. Our existing constructive simulator used the compact terrain database format (CTDB) developed for the MODSAF simulation. This is a fast-loading format well suited for use in constructive simulations. There existed processes for converting CTDB terrain databases to formats useful for image generation and virtual simulation (e.q. OpenFlight). However, we found that we could not get perfect correlation using these conversion processes. We also found a discrepancy between the UTM coordinate system in MODSAF (see [4,7]) and that specified by the U.S. Army (see [2]) for coordinates in the Southern Hemisphere. MODSAF returns a negative of the standard UTM Northing value. This is to allow for the geodetic to UTM conversion function to be fully invertible. Otherwise, there would be two latitudes with the same UTM Northing, Easting, and specified zone. In general, according to the UTM standard, a hemisphere must be specified as well. There is no ambiguity in the projection from geodetic to UTM. The dilemma was that any terrain database created from a COTS conversion process would not correlate exactly to the MODSAF CTDB database. An effective virtual helicopter simulator needs exact correlation. The problem was an easy one to comprehend, the solutions complex. The obvious solution was to improve the CTDB database conversion process. We opted instead to create a virtual terrain database using OpenFlight format (see [6]) and using this database as a sole source – all our simulators would use the exact same database. At first glance, this seems to require a great deal of work. However, the need for a conversion process is eliminated. We could also make use of the extensive MultiGen terrain creation toolkit. Most importantly, we were freed from the constraint of exact CTDB correlation.  6. ConclusionsWe solved a constructive/virtual correspondence problem by extending our simulation to work directly with ‘virtual’ terrain databases usually associated with image generators. This solved our terrain correlation problem exactly. Our out-of-cockpit display correlates exactly with our plan view map display. What did we lose? Nothing.  By using an object-oriented methodology, our simulation now supports both formatsWe provided a low-cost, easily transportable desktop flight simulator. We have improved our constructive simulation capabilities by providing a new verification tool that can be used to analyze the helicopter flight dynamics and other physics with a direct out-of-cockpit display. We have extended our constructive simulation to work with more general playing areas, potentially encompassing more realistic line-of-sight modeling and threat models.7. AcknowledgementsI wish to thank my colleagues in Mesa and Philadelphia, in military technology and flight simulation.8. ReferencesM.  Ewing, Introduction to Geodesy, Elsevier, 1970.F. Gloeckler et. al.,  Handbook for Transformation of Datums, Projections, Grids, and Common Coordinate Systems, U.S. Army Corps of Engineers, Topographic Engineering Center, Alexandria, VA. R.J. Meyer, “You Say Resolution, I Say Fidelity, You Say Accuracy, I Say Detail, …, Let’s NOT Call the Whole Thing Off!”,  Simulation Interoperability Workshop, Orlando, FL, Spring  1998.MODSAF Kit, STRICOM, Orlando FL.Paul A. Birkel, “Terrain database IN GENERAL”, DMSTTIAC - Product Spt - Modular Semi-Automated Forces Reflector, 23 September 1998.Multigen II User’s Guide and Options User’s Guide, MultiGen Inc., version 1.5, San Jose, CA, May 1998. R.M. Toms, “Efficient Transformations from Geodetic to UTM Coordinate Systems", 15th Workshop on Standards for the Interoperability of Distributed Simulations, Orlando, FL, September 16-20, 1996.U. S. Defense Mapping Agency, “Military Specification for Digital Terrain Elevation Data (DTED)", DTED-MIL-D-89020, 28 May 1993.U.S. Defense Mapping Agency, “DMA Product Specifcation for DFAD-1 DFAD-2“ 2nd Edition, DS/ICE-ICG/200 April 1986.Author BiographiesNICHOLAS STRAUSS is a Mathematician at Boeing Helicopters in Philadelphia, PA. where he works in military technology supporting constructive/virtual simulator exercises and image generation applications. Submitted to the 1999 Simulation Interoperability Workshop .PAGE  			PAGE  PAGE  2 EMBED MSPhotoEd.3  Figure  SEQ Figure \* ARABIC 2: # of polygons for one geocell EMBED MSPhotoEd.3   EMBED Excel.Sheet.8  Figure  SEQ Figure \* ARABIC 1: Simulated RAH-66 Helicopter fly over Katherine, Australia. Note highly visible smoke plumes from destroyed tanks.Figure  SEQ Figure \* ARABIC 3: Plan and out-the-window views of mountain road