Optimising Exchange of Attribute Ownership in the DMSO RTIDavid J. RobertsAndy T. RichardsonPaul M. SharkeyUniversity of Reading, Whiteknights, Reading, RG6 2AY, UKcybdjr@cyber.reading.ac.ukar@ cyber.reading.ac.ukP.M.Sharkey@reading.ac.ukTom LakeInterGlossa Ltd  59, Alexandra RoadReading   RG1 5PG, UKTom.Lake@glossa.co.ukKeywords:Distributed Synthetic Environment, Latency, Concurrency Control, RTI, Real Time InteractionABSTRACT: The HLA’s attribute ownership strategy ensures that disparate federates may not affect the same entity attribute simultaneously. Network latencies induce delays in the transfer of attribute ownership. One effect of this is that a user will experience delays when they attempt to take control of a synthetic object. Such delays prohibit real time collaborative interaction with common objects. This paper describes a number of methods for reducing and even eliminating these delays.IntroductionSynthetic environments (SE’s) should allow users to interact with synthetic objects in a natural manner. A synthetic object which is to interact with several users  could be modelled either as an HLA object managed by an independent federate or as an HLA object whose attributes are owned by several federates during the course of the simulation. Where close and responsive interaction is required the second solution is preferable. We shall assume that this approach is in use for the remainder of this paper. Network latencies in distributed SE’s introduce the risk of inconsistencies where many users can interact with a given object. Concurrency control is necessary to ensure that inconsistencies do not become unrecoverable [1]. Concurrency control in the DMSO RTI is provided in the form of transferable attribute ownership [2]. This strategy ensures that only one federate can affect a given attribute of a given entity at any one time, even if only RECEIVE order message reception is in use in the simulation. We consider that only RECEIVE order messaging is appropriate for real-time simulation in the currently available RTI.The drawback with conventional concurrency control strategies, such as that in the RTI, is that they induce a delay when a user attempts to interact with a synthetic object owned by another process or federate.To overcome the effects of ownership transfer latency we attempt to anticipate when a federate will require ownership of an attribute and gain ownership before interaction. We have used the existing attribute ownership facilities within the RTI but have developed a distributed algorithm that uses application knowledge to predict attribute ownership requirements and knowledge of network latencies to optimise ownership transfer. A number of key issues have been considered:suitable heuristics for ownership predictionminimising redundant ownership transferfair ownership grantingThe advance transfer of object ownership through ownership requirement prediction has been used in the distributed synthetic environment kernel PaRADE for some years.  PaRADE [3] has been tested with applications from multi-player ball games to the collaborative picking, passing and placing of synthetic objects. The advanced transfer of ownership has been proved to add to the realism and natural use of these applications. This paper discusses the implementation of this strategy on the RTI. At the time of writing, this implementation is in its final stages.The form of concurrency control provided by ownership exchange does not ensure a fully causal simulation; for example, spectators might still receive updates out of order and end up with a false view of the ground situation. However, it does ensure a limited form of causality in which attribute updates by federates are consistent with the histories of the objects acted upon, even when their attributes are exchanged between federates.Overview of paperSection 2 introduce a ball game application that is used as a basis for discussion and as a test bed for our implementation techniques. This has been chosen as it requires frequent, real time exchange of the ball’s ownership between a number of human controlled avatars. The conventional use of the RTI’s attribute ownership strategy and the latency that it induces into the application is described in section 3. Section 4 shows how parameterised behaviour may be used to predict ownership requirements and how this may be combined with knowledge of network latencies to transfer ownership prior to interaction. It is then shown how these techniques may be applied to the RTI’s pull model of ownership transfer. Predictive ownership transfer may be detrimental to system performance by increasing bandwidth through  redundant key passing. Section 5 describes how redundant ownership transfer may be reduced and even eliminated by applying techniques already proven in the PaRADE system.Where a number of federates are vying for ownership of a given entity’s given attribute, ownership should be granted fairly according to the requirements and state of the application and not of the distributed infrastructure. Section 6 describes how PaRADE reflects the requirements of the application through request queuing. Request queuing is not supported within the RTI so a solution is proposed that combines the RTI’s existing push and pull ownership transfer models.Characteristics of Network DelaysFrom comprehensive dealy testing on the Internet between Reading and Salford, we have found that 90% of unreliable (UDP) messages took 12ms. Of the other 10% all took longer and the top 0.5% took over 60ms. These suggest that latencies are mostly standard with a small proportion of delayed outliers. We have shown [7] that robust statistical analysis [6] can be used to find this standard latency during the course of a simulation Example ApplicationA simple ball game has been chosen for an example application. The first test is to play a puck game where two players, one at each end of the court, hit a ball backwards and forwards. For simplicity the movement of the ball is restricted to the plane defined by the x and y axis. The movement of the players is restricted to the x axis. The goal of this exercise is to demonstrate that ownership of the balls movement can be transferred as the ball travels between the players. The movement of the ball is described as a linear parametric path. The path is gievn by a start time, intial coordinates and velocities and an agreed function for the change of velocity with wall clock time. The movement attributes of the ball are coordinates and velocities and these relate to the time stamp of the attribute update. In practice these are published as a single attribute to ensure consistent updates. Movement updates may only come from the federate that owns the ball movement attribute. The ball will continue along the path even when ownership of its path is being transferred. The success of this test will depend upon an ownership transfer delay that is less than the time taken for the ball to move between the players and the ability of the algorithm to efficiently and accurately detect a requirement for ownership transfer. The second test allows the players to move throughout the same plane as the ball. The purpose of this test is two fold. Firstly it will show if ownership is granted to the most appropriate federate. That is, that the player who reaches the ball first becomes its owner. Secondly it will demonstrate the ability of close interaction. That is the ability for one player to take the ball from the other with an unperceiveable delay. Thirdly it will demonstrate that the algorithm will not be counter productive due to redundant ownership transfer. That is that ownership transfer will not be delayed more than it would have been without the algorithm because ownership has been passed to the wrong federate. Both of the above example applications have been implemented on top of the RTI 1.0. For simplicity, only the first test is used as a basis for discussion in the remainder of this paper.Conventional Ownership Transfer in the RTIThe RTI supports two approaches to transferring attribute ownership: push and pull. The push approach allows a federate to inform the RTI of intention to relinquish ownership of a given object’s given attribute. The RTI then  solicits for bids for ownership of this attribute to other eligible federates.  Interested federates may return a bid and the RTI decides which bidder will become the new owner. The decision of which federate will receive the attribute is usually based on a first come first served basis. The pull approach allows a federate to express an intention to own a given object’s given attribute. On receiving such a request, the RTI will ask the present owner if they wish to relinquish ownership. If the answer is yes then the RTI passes ownership to the requesting federate.In both cases the delay in obtaining ownership of an entity’s attribute will include some function of the sum of the network latencies for each request and notification. Where federates are dispersed across a wide area network, these latencies are likely to be significant. The effect of this on a user is that they are unable to affect a synthetic object previously affected by a peer without some, possibly significant, delay.In this paper we assume a centralised RTI for the estimation of latencies, as in current DMSO implementations.Latency in the pull modelUsing the RTI’s ownership pull model, federates contending for ownership of an entity’s attribute may apply to the RTI’s federation executable (fedex). The RTI then passes each request to the present owner (from here on called the custodian). If the custodian wishes to honour a particular request it will relinquish ownership through the fedex to the chosen contending federate. This procedure uses three RTI services, each of which will have a delay associated with it. The services and the name of the delay are given in the table below.ServiceDelayRequest attribute ownership acquisition(racRequest attribute ownership release(rrAttribute ownership acquisition notification(anThis delay will vary according to network and process load but will be some function of the sum of messages each uses and the route each message travels. The route of the messages associated with each service is given in the table below along with names for the component delays associated with each message. The names given for the delay components are derived from contender, rti (fedex) and custodian. Thus a message delay between the fedex and the custodian would be named (rti-cust. For simplicity we have not considered how the RTI locates the custodian, a description of which is given in [2].DelayMessage routeDelay components(raccontender ( rti(cont-rti(rrrti ( custodian ( rti(rti-cust + (cust-rti(anrti ( contender(rti-contAssuming negligible latency within each federate the pull model ownership transfer latency may be expressed as:(pull = (rac + (rr + (anor:(pull = (cont-rti + (rti-cust + (cust-rti + (rti-contLatency in the push model:Using the RTI’s ownership push model, the procedure is initiated by the custodian who applies to the RTI to divest ownership of an entity’s attribute. On receiving this request the RTI’s fedex will inform all eligible contenders. Contenders then bid for ownership.  The RTI then asynchronously informs the winning bidder and the custodian that the transfer has been accepted and is complete. The RTI will normally choose the first bidder as the new owner. The RTI services used in this procedure are given in the table below.ServiceDelayRequest attribute ownership divestiture(rdRequest attribute ownership assumption(oaAttribute ownership divestiture notification(dnAttribute ownership acquisition notification(anThe associated message routes and delay components are as follows:DelayMessage routeDelay components(rdcustodian ( rti(cust-rti(oarti (contender ( rti(rti-cont + (cont-rti(dnrti ( custodian(rti-cust(anrti ( contender(rti-cont(dn and (an are asynchronous thus assuming negligible latency within each federate the push model acquisition latency may be expressed as:(push = (rd + (oa + (anor:(push = (cust-rti + 2(rti-cont + (cont-rtiIllustrative exampleImagine a distributed synthetic puck game with two players and a ball. Each player is controlled by a federate. The ball is affected by a federate gaining ownership of the balls movement attribute. For simplicity let us assume that the usual network latency between each federate and the RTI’s fedex is 100ms. Let us also assume that the ball moves at 10 meters per second. Without using ownership prediction, a federate would apply for ownership of the balls movement when its player collides with the ball. The ownership transfer latency for both the pull and push models would be:(pull = 4*100ms= 400msDuring this latency the ball will have passed through the player and carried on for 4 meters.Predictive HeuristicsTo minimise bandwidth consumption ownership transfer should only be undertaken when necessary. Prediction heuristics are thus required to minimise redundant ownership transfer. The first heuristic is that of interest. Interest is modelled in the RTI though subscribe and publish rights [2]. A federate will only be granted ownership of an attribute if they have already been granted subscribe and publish rights to that attribute class. The predictive algorithm may use the interaction tables in the FOM to cut down its search space for potential interactions. The interaction table may tell us that interaction is possible but it can not give any indication of when that interaction may occur. If we wish to request ownership in advance of interaction then we need to know when an interaction is about to occur. One solution is to use spatial positioning as one of heuristics in measuring potential for interaction. This is applicable to many applications as it is usual for objects to only interact when they are physically close. We can get advance warning of interaction by extending the object’s collision aura or by using foci and nimbi [5]. The drawback of this approach is that the period between detecting a potential interaction and that interaction occurring will depend on the velocities of the objects.Ideally the prediction method should give sufficient warning of interaction to allow advance transfer of ownership for any reasonable object velocity. In addition it should yield some knowledge of the time period before the potential interaction. PaRADE uses collision prediction from parametric (dead reckoned) paths to predict a potential for interaction. A potential time of interaction can thus be found by placing an aura around each object and calculating when the auras will collide given the current n-order paths. PaRADE has the ability to queue predicted paths in advance. In our example puck game, this facility may be used to predict that a ball will reach the user after bouncing off the wall. In the HLA implementation no prediction facility is available so federates must carry out the prediction explicitly. Our present implementation on the RTI uses single first order paths for each object. It is however trivial to expand this to the same level of path modelling as PaRADE.Predictive pull modelThe RTI informs a custodian of a request for attributes through the requestAttributeOwnershipRelease method. The custodian normally returns this function with a, possibly null, set of corresponding attributes that it is willing to relinquish. No facility is provided for the custodian to delay the relinquishing of ownership. Thus it is impractical to compare requests before choosing the new owner. A disadvantage with this approach is that ownership will usually be granted to that federate who’s request first reaches the custodian. Where a set of federates are vying for ownership of a given entity’s given attribute, ownership should ideally be granted according to application requirements rather than that federate who’s request is received first. In a simulation using time-stamp ordering the request with the earliest logical time could be used.Illustrative exampleReturning to the previous example of a puck game, let us assume that the players are separated by ten metres in synthetic space. Let us also assume that a federate can predict a requirement for ownership within 10msecs of becoming aware that the ball is moving towards the player. Let us finally assume that the ball’s movement update takes 100ms to travel between federates.The ball will move between the players in one second. The contender will become aware of the ball’s change in movement 900ms before the ball reaches their player. The federate will have 890msecs to obtain ownership.Now let us assume that both federates are subscribed to the movements of their peer’s player. It is now possible for a federate to predict that the opponent is about to hit the ball in their direction. A request for ownership can thus be sent so that it arrives just after the opponent has hit the ball.Minimising Redundant Ownership TransferAdvance ownership requests may decrease the system performance where ownership is regularly transferred erroneously. It is therefore reasonable to minimise the number of redundant ownership transfers. Such redundant transfers occur from incorrect ownership predictions. Predicting ownership requirements for a user controlled avatar is non-trivial. Although application definable prediction heuristics will reduce the number of incorrect predictions they will not usually eradicate them. User interaction within synthetic environments may be considered partially predictable. For example if an avatar is moving towards an object with her hand outstretched, it is likely but not definite that she wishes to interact with it. The nearer the avatar comes to the object, the more likely the interaction becomes.  In such systems it can be seen that the potential for incorrect prediction is some function of time. We have implemented a just-in-time strategy where ownership is transferred at the latest possible moment at which the transfer procedure may be completed before predicted the time of interaction. The time of a potential interaction is taken from the point in the time space graph where the parametric paths of the objects cross. This time may be termed the aura collision time (tac). The federate calls the requestAttributeOwnershipAcquisition method at tac-(oa, where (oa is the usual ownership acquisition latency. (oa may either be calculated from the time taken from previous transfers or from knowledge of network latencies. The implementation on the RTI 1.0 uses the former, whereas PaRADE uses the later. To overcome the erratic latency characteristics of many networks we build up and maintain a sample set of  latencies and use robust statistical analysis to remove the outliers and find the robust mean [6].Illustrative exampleLet us return to the example of using the predictive pull method to support the puck game. The first time the ball travels between the players A and B, neither federate knows how long it takes to transfer ownership. The first request for ownership transfer is made by federate B as soon as the ball begins to travel from player A to player B. Let us again assume that this request is made 890ms before interaction and the transfer took a total of 400ms. In this example, the contending federate will make a record of the transfer latency. When the ball is hit back across the court, federate A will similarly apply for ownership way in advance and record the transfer latency. Following the third hit of the ball, federate B will predict an ownership requirement but will not apply for ownership transfer until the calculated time of interaction minus the previous transfer delay. If the ball left player A at t=5000ms and the ball will take 1000ms to reach player B, federate B will apply for transfer at t=5600ms.Eliminating redundant ownership transferRedundant ownership transfer may be completely eliminated by locking the movement of the contender’s avatar and forcing the interaction to occur. For example, once a federate has requested transfer it may lock the avatar to its current movement. The appropriateness of this method will depend on the application. Many applications might mask this locking from the user by making it mimic natural physical effects. In a ball game supported by PaRADE it has been found that such locking may be extended to a period of 1.5 seconds before it becomes noticeable to the user. Such a period of advance ownership prediction is more than sufficient for a cross Atlantic federation. This appears natural to the user as in a real ball game it is difficult to suddenly change course when you are running at a ball.  EMBED CDraw4  Figure  SEQ Figure \* ARABIC 1 custodian request queuingIt is further possible to advance the ownership transfer request and give the contender enough time to obtain ownership and inform the other federates of the interaction before the interaction occurs. Thus remote federates will usually see the interaction in real time and not delayed by the network latency.Fair Granting of OwnershipWe have so far considered a simple application scenario where there exists no contention for the next owner. Many applications are not this simple. Consider a four player puck game where two players might both be attempting to reach the ball. In this case ownership should be granted to the player that reaches the ball first. A preocdure is required for fair granting of ownership based on application requirements.The push model gives the responsibility of choosing the new owner to the RTI. At present the RTI will usually relinquish ownership to the first bidder. It may be argued that the fedex should not contain knowledge of application requirements to the extent of potential for interaction. This would suggest that the choice of new owner be made by a federate. An obvious candidate for this responsibility is the custodian.The present pull model allows the custodian to choose whether or not to honour a request. The problem with the 1.0 implementation is that it must make that choice immediately. This presents the problem of how the custodian knows if a more deserving request is imminent. The problem is exacerbated by unequal delays between distinct federates and the fedex. A custodian will need to relinquish ownership to contenders with a higher latency to the fedex earlier. A contender with a high latency will need to get a request to the custodian earlier thana contender witha low latency in order that a response be received at the predicted interaction time. Paradoxically, custodians therefore see requests from high latency contenders early.A potential erroneous transfer might be made when the custodian relinquishes ownership to a contender with a high latency just before it receives a more deserving request from a contender with a lower latency. Using the predictive pull model proposed in section 4.1 will thus give an unfair advantage to a federate with a high network latency to the fedex. Figure 1. demonstrates this problem occurring when contender 1 gains ownership even though they reach the ball first. This diagram is applicable to any ownership transfer system and not specific to the RTI. Ownership is transferred here by a key or handle being sent from the custodian to a contender. In this diagram tlar is the latest advance request time, trr is the received request time at the custodian, tks is the key send time, tkr is the key receive time and tac is the aura collision time.PaRADE overcomes this problem by queuing and comparing requests at the custodian in order to grant the request with the earliest predicted interaction time. Requests are sent earlier to allow time for this queuing. This facility is not available within the RTI. To facilitate such comparison of requests on the RTI 1.0 we propose combining the both the standard push and pull approaches with ownership prediction. Predictive Pull-PushContenders apply for ownership transfer to the custodian through the RTI. Each request includes (in the tag) the unique identifier of contender’s avatar and two wall clock time stamps. The first time stamp represents the time the request was sent and the second represents the predicted time of interaction. On receiving the request the custodian informs the RTI that it does not wish to honour it but in fact creates a local copy of the request which it queues. The wall clock time stamp is compared to current wall clock time to estimate the communication delay to the candidate. The required ownership relinquishing time may then be approximated to the predicted interaction time minus the communication delay. This time is added to the local copy of the request. The custodian builds up a list of requests from any number of contenders in this manner.  Once the required ownership relinquishing time for any request is reached, the custodian will honour that request provided it has the smallest predicted interaction time.When the custodian has chosen to honour a request is informs the RTI it wishes to divest ownership and includes (in the tag) the identifier of the avatar. The RTI then passes this information to all potential contenders. Only the contender who’s avatar has been referenced with the identified will respond with a bid. As the bid has not been contended it will be accepted. Where avatar locking is not used (see section 5.2) the avatar might change its speed causing interaction time to differ from that predicted. If this is the case, the custodian may update the predicted interaction time of a request when it receives updated path descriptions of the avatar’s movement.Contenders are responsible for sending their requests in time for comparison. A contender will thus increase its advance request period if it’s requests are failing with respect to the application requirements. In contrast a contender will reduce its advance request period if its’ requests regularly succeed in opposition to the application requirements.Adaptive Predictive Pull-PushThe decision of whether to use a predictive pull or a predictive pull-push model depends upon what is happening in the application and the set of acquisition latencies within the federation. Where prediction time is limited and all the latencies are approximately equal, it is usually better to use the predictive pull model. Where these requirements are reversed, the predictive pull-push is better suited. One solution would be to make the algorithm adaptive. ConclusionPredictive ownership transfer was developed for the PaRADE system three years previous and has been found very effective in multi-player ball game applications. With user locking and advance sending of events the has algorithm provided 100% consistency over local area network tests. Minimul Internet testing of the algorithms has also proved effective with the exception of occasional losses in unreliable request messages when used alongside multicast audio. The basic ownership algorithms have been adapted from PaRADE and put into RTI 1.0 federates. At the time of writing, the implementation over the RTI is in its final stages. The adaptive predictive push-pull model has not yet been implemented. It is hoped that implementation will be complete and test results available before presentation of the paper.Our design work has convinced us that the HLA RTI interface is sufficient to support predictive ownership transfer, implemented explicitly within the cooperating federates. Current centralised implementations are not optimal with respect to latency. Their longer latencies may not be suitable for simulations requiring very fast object exchanges. We urge future implementors and network providers to consider the value of making latencies predictable as well as short.References[1] G. Lann, “Consistency, synchronisation and concurrencey control”, Distributed Data Bases, Cambridge University Press, USA, p.p. 195-221.[2] “High Level Architecture Run-Time Infrastructure Programmer’s Guide”, Version 1.0 Release 3, Nov 1997.[3] D. Roberts and P. Sharkey, “Minimising the latency induced by consistency control within a large scale multi-user distributed virtual reality system”, Proc. IEEE Int. Conf. Systems Man and Cybernetics, Vol. 5., Orlando, Oct, 1997.[4] DMSO, “HLA Data Distribution Management Design Document Version 0.5”, Available through the internet http://www.dmso.mil/projects/hla, Feb. 10 1997.[5] S.D. Benford. and L. Fahlen, “A spatial model of interaction in large virtual environments”, 3rd European Conference on Computer Supported Cooperative Working, ECSCW’93, Millan, Italy.[6] W. Press, S. Teukolsky, W. Vetterling, B. Flannery, “Numeric recipes in C”, Cambridge University Press, USA., 1992.[7] D.J.Roberts, “A Predictive Real Time Architecture for Multi-User Distributed Virtual Reality”, PhD Thesis, University of Reading, UK, Apr 1996Author BiographiesDavid J. Roberts is a Research Fellow in the Department of Cybernetics, University of Reading and directs research into distributed synthetic environments and large scale distributed agent systems. Dr Roberts gained a Systems Engineering background through six years in industry with British Rail. He obtained a BSc in Computer Science at the University of Reading in 1992 and a PhD in Cybernetics in 1996 also at Reading. His PhD was in the field of overcoming the effect of network latencies in large synthetic environments through predictive time management.Tom Lake is technical leader of InterGlossa, who exhibited a fully time-stamped RTI in spring of 1996. Tom is currently working on fully distributed support for causal and time-stamped message ordering for UK DERA. He is also interested in the ANDF portability technology and its use for architecture neutral program analysis and transformation.  His degrees are in Physics: BA from University of Oxford and PhD from University of Pennsylvania. He was founder chair of the British Computer Society’s Parallel Processing Specialist Group.Andy T. Richardson is a Research Fellow in the Department of Cybernetics University of Reading, and is researching into distributed synthetic environments.  He has recently completed his BSc in Human Cybernetics and has several years of experience in industry with BT. Currently Andy is implementing predictive time management on the RTI and  working towards a PhD in distributed synthetic environments.Paul M. Sharkey is a Senior Lecturer in Mechatronics at the Department of Cybernetics, University of Reading where he holds the chair for the Interactive Systems Research Group. Dr Sharkey’s research interests include telepresence, robotics and collaborative synthetic environments. He held the chair of the 1st. Euro. Conf. On Disability, Virtual Reality and Associated Technologies and has been on the program committees of six European and international conferences. He gained a PhD at the University of Strathclyde in 1988 and an MA at Trinity College Dublin in 1991.