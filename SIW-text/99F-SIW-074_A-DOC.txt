Lessons Learned and Benefits of CAFDE Tool IntegrationJane T. Bachman SYNETICS Inc.16539 Commerce Drive, Suite 10King George, Virginia  22485540.663.2137cafde@dv.synetics.comReggie ChenIbis Research Corporation5775 Toronto Road PH4Vancouver B.C. V6T-1X4Canada604.224.3998reggie@ibis-research.comBjörn LöfstrandPitch ABNygatan 35Linköping, S-582 19, Sweden+46 13 13 45 45bjorn.lofstrand@pitch.seMark McAuliffeU.S. Army Simulation Training Instrumentation Command12350 Research ParkwayOrlando, Florida 32826-3276Mark_mcauliffe@stricom.army.milKeywords:Automation, CAFDE, FEDEP, TBX, Tool Integration, Tool Interoperability.ABSTRACT: The Computer Aided Federation Development Environment (CAFDE) architecture, developed under the sponsorship of the U.S. Army Simulation Training Instrumentation Command (STRICOM), provides the M&S community a mechanism for facilitating FEDEP interoperability among tools used in High Level Architecture (HLA) federation development.  Synetics, in conjunction with the development of the open CAFDE architecture specification, released the CAFDE Tool Box (TBX), a Win 98/95/NT based application framework of the CAFDE architecture, as freeware to the M&S community.  Following the initial release of the CAFDE TBX, several tool vendors have adopted the CAFDE architecture and integrated the CAFDE API routines into their HLA implementation tools allowing cross tool integration and interoperability.  This paper explores and examines the lessons learned by tool vendors during their CAFDE integration and examines the benefits of such an integration.1.0 IntroductionThe M&S community has seen an expansion in the development of tools that support federation development and has recognized the need for facilitating Federation Engineering Development Environment Process (FEDEP) automation and tool interoperability among the tools used in HLA federation development [1].  Under the sponsorship of STRICOM, Synetics is developing FEDspresso™ OMSuite to support various aspects of federation development and execution. EMBED Word.Picture.8In the process of designing the FEDspresso™ OMSuite tools, Synetics recognized that other tools support additional aspects of the FEDEP and that an integrated environment combining multiple tools would be extremely beneficial to the M&S community. Therefore, an architecture to support the integration of tools was developed. This architecture is known as the Computer Aided Federation Development Environment (CAFDE) [2]. CAFDE represents an avenue for HLA tool interoperability and FEDEP automation. Many vendors are solving parts of the HLA puzzle and CAFDE provides a means and a mechanism for the different vendors to integrate their tools and provide a level of sophistication beyond simple data interchange. That is, the heritage, pedigree, information content, and integrity of the data can be followed in a coherent fashion within a common development environment. CAFDE exploits software component concepts and reuse.Synetics, in conjunction with the development of the open CAFDE architecture specification, developed and released the CAFDE Toolbox (TBX), a Microsoft (MS) Win 95/98/NT based application framework of the CAFDE architecture, as freeware to the M&S community.  The CAFDE TBX was originally introduced as “CAFDE Tool Developer’s Kit (TDK)” [3]; however, “toolbox” became a more fitting description of its capabilities. The CAFDE TBX provides a starter toolbox for both developers and users in support of federation development and maintenance. The CAFDE TBX facilitates tool integration, interoperability, and true FEDEP automation thus creating an  “HLA Toolbox” for federation development and maintenance.EMBED PBrushFollowing the initial release of the CAFDE TBX, several tool vendors adopted the CAFDE architecture and integrated the CAFDE API routines into their HLA implementation tools. This paper explores the lessons learned by Ibis Research Corporation, a Canadian Company, and Pitch AB, a Swedish Company, during their CAFDE integration and examines the benefits of integrating HLA tools with the open CAFDE architecture. 1.1 CAFDE-Based ToolsBefore exploring the lessons learned in integrating the CAFDE API routines, it is important to understand the aspects of a CAFDE-based application. In principal, software that conforms to the CAFDE API specification is considered CAFDE Compliant [4]. A CAFDE-based application is a CAFDE compliant tool capable of supporting specific federation engineering tasks corresponding to the HLA FEDEP elements. Specific CAFDE-based tools include applications for supporting requirements capturing, requirements traceability, object model construction, production of federation required files (i.e., Federation Execution Data (FED) and Runtime Infrastructure (RTI) Initialization Data (RID)), federate prototyping, federation execution planning, conformance testing, as well as other capabilities that support elements of the FEDEP. Qualified CAFDE-based tools are capable of operating with a CAFDE Compliant Engine implementation.  Every CAFDE-based tool uses a common set of API calls (supporting similar integration) and allows tool vendors to integrate the specific CAFDE API calls required to support the tool’s task.  As a result, the collection of CAFDE-based tools, independent of vendor, provides a wide range of user functionality and automation support within a single integrated environment and provides collaboration across multiple environments.The CAFDE Integrated Product Team (IPT) maintains a list of the CAFDE-based applications/tools as well as tracking the CAFDE specification and the MS Windows95/98/NT CAFDE TBX.  The mission of the CAFDE IPT is to encourage the development and use of CAFDE-based tools and environments.  As such, the IPT felt that it would be beneficial to the HLA tool development and user community to highlight various lessons learned in implementing and using the CAFDE architecture. The following sections present studies by Ibis Research Corporation and Pitch AB on implementing the CAFDE API calls into their respective HLA implementation tools.Ibis ResearchMr. Reggie Chen of Ibis Research Corporation was introduced to the CAFDE API in the fall of 1998. At that time, Ibis Research began considering implementing an application launcher, an Integrated Development Environment (IDE) that would host Ibis Model Editor and provide necessary infrastructure for other future Ibis HLA tools.  Ibis Model Editor is an object model development tool intended to create and browse HLA-compliant models.  Designed to avoid cluttered window placement, Ibis Model Editor navigates the components of object models with an intuitive hierarchical tree view and organizes the relevant information concurrently in a corresponding panel.  Originally, Ibis Model Editor was designed as an ActiveX component that could be hosted in a shell environment such as Internet Explorer 4, and could communicate with other Ibis ActiveX-based HLA tools via Microsoft’s protocol. Alternatively, Ibis considered making it a Borland Delphi Open Tools API application and integrating it with the IDE. When they began dealing with issues about “the shell,” Mr. Chen’s colleague, Mr. Duncan Suttles, brought him a paper about CAFDE and suggested that they use the CAFDE protocol as a way to wire their tools. The CAFDE API is the only open specification that addressed the tool integration issue. Ibis Research found the specification to be clear, concise, and easy to implement.  After reviewing the open CAFDE specification, Ibis Research decided to adopt the CAFDE specification. Following is an account of Mr. Chen’s experience.2.1 Ibis Research Lessons Learned “Due to the fact that the CAFDE TBX was not available in the fall of 1998, I would have to build an engine that supports some basic API calls for the integration. Although comparatively trivial, since we use Delphi, we would also need to convert the C++ headers to Object Pascal units. I rewrote the Pascal interface unit with dynamic binding of DLL so the application could run independently with or without the presence of a CAFDE DLL Engine.I am glad that the DLL proposed by CAFDE exposes C DLL rather than C++, which would have name mangling problem among different C++ compilers.  The other alternative way would be exposing an interface that is language independent such as Microsoft COM/ActiveX. By exposing calls with COM interface and delivering callbacks as ActiveX events, CAFDE application programmers could use popular MS application like Microsoft Office, Internet Explorer to develop HLA tools.The 0.2 CAFDE specification was relatively crude compared to the current 0.4 CAFDE specification. Paul Gustavson of Synetics has been a great help in communicating some of the essences of CAFDE API to me. With other projects in progress, I started to implement a skeleton CAFDE engine sometime in October of 1998. Using WIN32 file-mapping memory object, I was able to complete our minimum ‘CAFDE.dll’ that supports Ibis Model Editor before December of 1998 when the first beta version of the CAFDE TBX was available for download. Since then, tool integration became very smooth because of the lessons learned from developing the engine. The publish-subscribe nature of the API makes tool integration easier in matters of subscribing and handling the right type of messages. This principle could be applied throughout the ‘Desktop management routines’, ‘Data exchange routines’ and ‘Collaboration routines’.  Another type of messaging paradigm, request-reply, which is a bit different from publish-subscribe, allows a client to dynamically obtain data from the server by sending data according to requested criteria rather than automatic notification such as CAFDE’s cePublish() and ceSubscribe(). An example of this is when one would get one’s monthly subscribed ‘National Geography’; however, one would need to ‘request’ for the back issues of the magazines. Currently, CAFDE allows the application to receive Data Interchange Format (DIFs) that was published after ceSubscribe(), but does not seem to address how to obtain the older DIF file that has been published. You need to know the index of the documents before you call ceReceive(), but there is no way for a newly joined CAFDE tool to discover the index of the document.The current design of CAFDE does not restrict use of multiple network interfaces.  For instance, it is possible to install two network interfaces, one for the local area network, the other for TCP WAN in a CAFDE environment. All the collaboration calls would be carried out on both of the network transport. There is deficiency for the API if the application choose to only collaborate via a particular network interface (NI) on some special tasks. To resolve this problem, the API might enhance with function to only activate certain NI to carry out collaborating routines. There are many commercial Message Oriented Middleware (MOMs) available in the market such as MS DirectPlay, MSChat, TIBCO, etc.  An opened API design that handles multiple NIs properly would provide a more flexible way for CAFDE applications to leverage third party network applications/protocols.”2.2 Ibis Research HighlightsMr. Chen highlights the following aspects encountered during their CAFDE integration:Recognized need for HLA tools IDE;Need Dynamic DLL Binding Resolution; andLacks Request/Reply message paradigm.As Mr. Chen noted, a way to wire the tools to create an Integrated Development Environment (IDE) would be extremely beneficial for HLA development and maintenance. The CAFDE IDE elements, as shown in figure 2.1, satisfy the need of an IDE for HLA tools. CAFDE-based Tool components register with the CAFDE Engine and notify the CAFDE Engine of the desired types of information (through subscription). Figure 2.1 CAFDE IDE ElementsMr. Chen noted that he created a Delphi unit file for the CAFDE Engine so that his Delphi application could run with or without the presence of a CAFDE Engine (dynamic load at run time). Examples provided with the CAFDE TBX and information with the CAFDE specification seem to indicate that the appropriate CAFDE library (compiler dependent) must be linked with the application. However, there is a way to dynamically load the DLL if it is present at run time without having to link the appropriate CAFDE library.  This benefits standalone applications working independently of the CAFDE DLL engine. An example of dynamic loading within C++ can be found at the CAFDE web site, and will be added to future version of the CAFDE TBX.Mr. Chen noted that CAFDE could benefit from a Request-Reply message paradigm. Although CAFDE is evolving and a request-reply response is being considered, CAFDE currently provides a publish file location method that can be used to inform “late comer” tools of files currently being managed and used for the federation project.  Mr. Chen emphasizes the following benefits of CAFDE:CAFDE TBX facilitates integration;Language Independence; andMultiple Network Interfaces.At the time Mr. Chen reviewed the CAFDE architecture, the CAFDE TBX was not available. Mr. Chen developed a skeleton CAFDE Engine. He notes that since the release of the CAFDE TBX, tool integration became easier. The CAFDE Engine was developed as a C DLL as opposed to a C++ DLL to avoid name mangling issues between different C++ compilers and to support the integration of applications developed under languages other than C/C++.  For instance, Mr. Chen noted that their Model Editor is developed under Delphi (Object Pascal), however the CAFDE API calls are defined as C routines. Mr. Chen created a Delphi unit file as a wrapper for the CAFDE C DLL header. Despite the fact that the CAFDE DLL Engine is a C/C++ implementation, tools developed under a wide number of languages such as Java, LISP, Delphi and others can be integrated and interoperate seamlessly together. This demonstrates the flexibility of the CAFDE architecture and its design for language independence.Finally, Mr. Chen mentioned that support for multiple network interfaces is important and feasible with the open API like CAFDE.  Although only an UDP Network Interface has been released as part of the CAFDE TBX, the CAFDE architecture is designed to support multiple network interfaces including Message Oriented Middleware interfaces, such as MS DirectPlay.Pitch ABMr. Björn Löfstrand of Pitch AB was introduced to the CAFDE API and the CAFDE TBX at the 1998 Fall Simulation Interoperability Workshop (SIW). Mr. Löfstrand is the principal developer for Pitch’s flagship tool Visual OMT™. Visual OMT™ is a commercially available case tool used for building HLA compliant object-models and data dictionaries. Following is an account of Mr. Löfstrand’s experience integrating Visual OMT™ with CAFDE.Pitch AB Lessons Learned“Our Visual OMT™ tool has many of the ingredientsnecessary for efficient object model development, i.e. graphical environment, project manager, repositories, consistency checking, data dictionaries, etc.  In addition, it has the ability to share information using the HLA standard data interchange formats.  However, Visual OMT™ is still just one of the tools needed for developing and executing a federation.  The standard HLA DIFs are necessary but not sufficient for efficient sharing of data and tool interoperability.  The CAFDE architecture is a way for us to enable our tool to share information and to interoperate with other components directly. We see two major benefits for the kind of integration CAFDE provides.An integrated development environment where tools accomplishing different FEDEP tasks can coexist and share data. The possibility for tool vendors to develop and market functional components that would otherwise not exist as stand-alone tools, i.e. consistency checkers, DIF translators, report generators, repositories, project managers etc. This would enable the end-user to select not only the tools he wants but also specific functions.  We began our effort to make Visual OMT™ a CAFDE-based tool during the 1999 Spring SIW. At first, we thought that it would take some effort to implement the CAFDE API calls and callbacks. However, it turned out to be much simpler than we first thought.  In less than an hour, we actually managed to implement some of the API calls and exchange data between two tools.  Since then, we have added a few more calls for desktop and data management.  All together, we spent less than a week modifying Visual OMT™ to handle the CAFDE API calls.  The 0.4 CAFDE Specification we used is very well structured and easy to understand and use.  The only real problem we ran into while making Visual OMT™ CAFDE compliant was the handling of string buffers when generating the OMDD (Data Dictionary) DIF.  Visual OMT™ handles data dictionaries internally as an Extensible Markup Language (XML) structure with 16-bit UNICODE characters while the CAFDE engine uses the 8-bit ASCII encoded HLA OMDD DIF to exchange the data.  In order to publish the dictionary data, we had to implement some translation and string buffer routines. This is not a CAFDE problem, but rather a general question on how HLA DIFs should be encoded.  We feel that any HLA tool vendor could and should implement the necessary API calls to become CAFDE tool compliant. It would require very little effort.”Pitch AB HighlightsMr. Löfstrand noted the following aspects encountered during their CAFDE integration:Efficient sharing of data among tools;Minimum effort of integration;UNICODE vs. ASCII; andTools maintaining independence.The CAFDE architecture embraces the DIF concept and extends to provide an CAFDE API/Engine that allows for automated data sharing among CAFDE applications.  In addition, the CAFDE API/Engine allows automated data sharing among on-line repositories and distribution among federation engineers. Automated data sharing is accomplished through the use of the CAFDE API calls, data engine callbacks, and integrated CAFDE applications.  CAFDE tool integration involves minimum effort!  Mr. Löfstrand stated that within one hour, they had two tools exchanging data, as illustrated in figure 3.1.  Furthermore, within one week of modifications to Visual OMT™, they enabled desktop and data management capabilities! It is important to note that Visual OMT™ is an application developed under LISP; hence, an example of CAFDE demonstrating language independence.Figure 3.1 Tool InteroperabilityFinally, Mr. Löfstrand poses a valid question to the HLA community regarding how future HLA DIFs should be encoded. The question is based off their experience of the Visual OMT™ handling data dictionaries internally as XML structure with 16-bit UNICODE characters while the CAFDE engine uses the 8-bit ASCII encoded HLA OMDD DIF to exchange the data. The IEEE 1516.2 addresses this question by introducing a new OMT DIF based on XML, while not explicitly stating which encoding should be used. It is a reasonable prediction that other HLA DIFs will evolve in the same direction as IEEE 1516.2 new OMT DIF. A decision needs to be made by the HLA community regarding UNICODE support.  If DIFs are to be encoded with 16-bit UNICODE characters, the CAFDE architecture will require an update. Mr. Löfstrand emphasizes the following CAFDE benefits:IDE for FEDEP automation; and Functional stand-alone HLA tools.Mr. Löfstrand noted that no tool, including theirs, provides all of the capabilities necessary to support federation development and maintenance. Other tools are needed. The CAFDE IDE provides tool developers an environment that promotes HLA tool use, whether the tool is a stand-alone HLA tool or a member of a HLA tool suite. Each tool may support different tasks within the Five–Step Process, as shown in figure 3.2, a top-level view of the FEDEP Model [5]. The CAFDE IDE allows sharing of data among the tools thus facilitating true FEDEP automation.Figure 3.2 Five-Step ProcessAdditional CAFDE BenefitsAdditional benefits of CAFDE tool integration include:Project Management; andMultiple Environment Collaboration.The CAFDE IDE TBX also provides project management capabilities via the FEDspresso Manger™ to maintain the data files each tool produces as well as the other types of files related to the project. The components of the CAFDE TBX assist the tool developer in minimizing the CAFDE tool integration effort. As shown in figure 4.1, the CAFDE TBX consists of the CAFDE specification, FEDspresso™ Manager, CAFDE Engine, CAFDE Network Interface and CAFDE API Tester (CAT) components.Figure 4.1 CAFDE TBX ComponentsThe FEDspresso™ Manager is thought of as the “handle” to the toolbox.  Non-CAFDE-based tools can still plug into the FEDspresso™ Manager and receive the same desktop capabilities as a CAFDE-based tool. In addition to providing project and desktop management, the Manager provides tool links, site list, tool alignment and a collaboration mechanism. (Note: actual alignment of tools is conducted through the CAFDE Engine.) CAT was created as a CAFDE Engine confidence checker. Basically CAT can be used as an integrated application to support the testing of new CAFDE applications. For example, if a developer's CAFDE-based tool has subscribed and is able to publish data, then CAT can be used to ensure that it receives the data published. CAT provides example code that is beneficial in the implementation of the API calls for new CAFDE-based applications.Finally, a project of any sort involves communication; CAFDE provides the mechanism for multiple environment collaboration as illustrated in figure 4.2.Figure 4.2 Multiple Environment CollaborationConclusionThe lessons highlighted in this paper regarding the integration of the CAFDE architecture into existing and forthcoming tools demonstrates CAFDE’s capability to empower the user with multiple tools from multiple vendors to perform various federation development and execution tasks.As new HLA tools are introduced into the market, the CAFDE architecture is designed to continue support of an evolving HLA FEDEP by focusing on tool interoperability and true FEDEP automation. The CAFDE TBX, a starter toolbox, provides an IDE that can hold and maintain the necessary tools needed to carry out the different phases of Federation Development. Minimal CAFDE tool integration effort is needed to achieve FEDEP tool automation and interoperability! Tool developers are encouraged to integrate the CAFDE API calls into their components to provide for seamless integration and desktop management, as well as local and remote automated data exchange, creating an “HLA TOOLBOX” for users to grab when building tomorrow’s federations.CAFDE TBX StatusThe CAFDE TBX, version 0.4, was released at the 1999 Spring SIW in Orlando, Florida. Future updates and releases are scheduled semi-annually in conjunction with the SISO conferences ending March 2000.  Visit the CAFDE web page [6], www.cafde.org, for current information on CAFDE and the CAFDE TBX. The CAFDE team may be contacted via email at cafde@dv.synetics.com. Comments and feedback are encouraged to help further refine and update the CAFDE specification and TBX to support the diverse and evolving set of federation development requirements. References[1] Scrudder, R., Lutz, R., Dahmann, J., “Automation of the HLA Federation Development and Execution Process,” 1998 Fall Simulation Interoperability Workshop Papers, Volume 2 (98F-SIW-101), September 1998.[2] Goss, S., Gustavson, P., Bachman, J., & Root, L., “CAFDE: An Open Tool Architecture for Next Generation Automation Tools,” 1998 Fall Simulation Interoperability Workshop Papers, Volume I (98F-SIW-049), September 1998.[3] Bachman, J. & Goss, S., “CAFDE TDK: Facilitating Tool Interoperability and FEDEP Automation,” 1999 Spring Simulation Interoperability Workshop Papers, Volume I (99S-SIW-031), March 1999.[4] Synetics, “CAFDE Architecture, An Open Interface for HLA Implementation Tools,” Version 0.4, 15 March 1999.[5] Defense Modeling and Simulation Office, “HLA Federation Development and Execution Process (FEDEP) Model,” Version 1.2, Draft, 26 May 1998.[6] CAFDE Home Page, http://www.cafde.org.Author BiographiesJANE T. BACHMAN is a Software Engineer for the Synetics Systems Engineering Division located in Dahlgren, Virginia.  She is supporting STRICOM in the development of the CAFDE architecture, CAFDE TBX, and FEDspressoTM OMSuite™, a CAFDE-based tool suite. She is a member of the CAFDE development team and currently chairs the CAFDE Integrated Product Team (IPT). She has been active in modeling and simulation technologies since 1988.Wei-Kuang Chen, A.K.A. Reggie Chen, is a Software Engineer for the Ibis Research Corporation located in Vancouver, British Columbia. Ibis Research Corporation develops lobby application and simulation engine that integrates with HLA for PC gaming industry. Reggie is the principle programmer who integrates Ibis Model Editor with CAFDE. He has also been active with distributed computing technology since 1995.BJÖRN LÖFSTRAND is a software developer for Pitch AB located in Linköping, Sweden.  He holds a MSc in Computer Science from Linköping Institute of Technology. Current work includes implementing tools for supporting HLA object model development. He is the Chief Architect of Visual OMT™.MARK E. MCAULIFFE is a principal investigator in the Synthetic Environment & Technology Management Division for the U.S. Army Simulation Training Instrumentation Command (STRICOM) located in Orlando, Florida. Mr. McAuliffe has over twenty years experience in real-time simulation research and development, with the last seven years focused on distributed simulation technologies and standardization.