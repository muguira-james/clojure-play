Lessons Learned Creating a HLA Compliant Translator for the Combat Service Support Training Simulation SystemMAJ Stewart LilesTim ThomasGuerry BowenTom DelorgeLogistics Exercise Simulation Directorate (LESD),National Simulation Center (NSC)401 1st St., Suite 301, Bldg 1109Ft. Lee, VA 23801Keywords:JTC, HLA, RTI, LOGISTICS, CSSTSSABSTRACT:  The Combat Service Support Training Simulation System (CSSTSS) is a high fidelity logistics model designed to train commanders and staffs in CSS functions from divisional and non-divisional direct support unit level through supporting Commanders-In-Chief (CINC), agencies and commands. When CSSTSS operates as the logistics model in the Joint Training Confederation (JTC), it requires a software bridge that translates the callbacks created by the Runtime Infrastructure (RTI) to fixed length text records compatible with an IBM transaction processing system.  With the ADAPTOR, CSSTSS communicated with the JTC through a translator that created Aggregate Level Simulation Protocol (ALSP) messages given a record from the IBM and vice versa.  The ALSP translator then passed the message to the ADAPTOR where it was again translated so it could be sent using the RTI.  This increase in software layers motivated the developers of the ALSP translator to create a High Level Architecture (HLA) compliant translator, thus removing a software communication layer and hopefully creating a more reliable connection.  A significant by-product of this effort is an HLA compliant CSSTSS that is theoretically available for use in federations that require a high fidelity logistics model.  This paper reviews the lessons learned in design, development and testing of the CSSTSS HLA translator and the special considerations of making a legacy simulation HLA compliant. 1.  Background1.1.  Description of the JTCThe Joint Training Confederation (JTC) is a collection of service models used to support joint training exercises.  Currently, the models use the Aggregate Level Simulation Protocol (ALSP) to exchange information.  ALSP provides simulation object, time, data, and exercise management services.  The JTC for 1999 consists of nine simulations.  These simulations support combat interactions between air, land, sea, and space objects.  They also provide a common electronic warfare environment and provide a high-resolution training environment for Army logisticians and intelligence cells. [1]1.2.  Overview of CSSTSSThe Combat Service Support Training Simulation System (CSSTSS) is a real time interactive simulation designed to emulate Combat Service Support (CSS) functions.  CSSTSS is designed to train commanders and staffs in CSS functions from divisional and non-divisional direct support level through supporting CINC, agencies and commands.CSSTSS is composed of 12 modules that represent different aspects of the Army Logistics System.  For example, there are Maintenance, Transportation, Personnel and Medical modules that model these specific aspects of logistics.  These program modules are connected together using the IBM CICS transaction processing system and VTAM flat files.		CSSTSS reports the status of the logistics situation to the user by emulating the different Standard Army Management Information Systems (STAMIS) systems that are used in the field to manage Army logistics.  These STAMIS’s include SAMS, SARSS, SIDPERS and DAMMS-R.	CSSTSS connects to the JTC by sending messages to the ALSP Translator that translates the messages from IBM format to the ALSP message format. 1.3.  ADAPTOR Description	The ADAPTOR translates messages from JTC simulations, using the ALSP message formats, into RTI service calls (and vice versa).  This functionality allows JTC models that migrate to HLA the ability to directly connect to the RTI.  It is this capability that has enabled CSSTSS to migrate to HLA and still operate in the JTC.2.  Motivation2.1. Push for HLA Compliance	Responding to the pressure to migrate models to HLA, LESD has created the HLA Translator.  This will make CSSTSS HLA compliant and make it available to other HLA compliant models that require a high fidelity logistics-training model.2.2.  Reduce Software and Hardware Layers		A major motivating factor to migrate to HLA away from ALSP is the complex network architecture required to connect the ADAPTOR to the ALSP Translator that is then connected to the IBM mainframe.  Figure 1 describes this network and illustrates the multiple processes and computers creating and maintaining the connection. You can see from the diagram that it is quite complicated, showing as many as three computers and peripherals running five processes.  It is possible to run more than one process per machine.  The intention is to illustrate the complexity that five processes and multiple computers and other hardware bring to the problem.  Note that the numbers only account for what is required to connect CSSTSS to the federation.  Those objects below the HLA/RTI box. The weakest link in this connection diagram is the Channel server denoted with the bold lined box.  This peripheral to the IBM Mainframe functions something like a router for LU6.2 traffic.  It has proven unreliable and the HLA translator network architecture, shown in Figure 2, has removed the need for its use. EMBED PowerPoint.Slide.8  Figure 1.  Current Network Architecture2.3.  Reduce costs	The HLA Translator will reduce costs by eliminating the need to maintain the DEC machines for the ALSP Translator.   The HLA Translator runs on a Microsoft NT Workstation.  The machines and operating system have a significantly lower cost of ownership than DEC machines do. 2.4.  Experiment with change over to OO process	Another motivating factor for LESD to do this work was illustrating how complex the changeover would be for procedural programmers to Object Oriented Programming Techniques.   3.  HLA Translator		The HLA Translator is similar to the ALSP Translator except it translates the IBM messages into RTI service calls (and vice versa).  It is written in Java and makes use of the Java binding for the RTI provided by the Defense Modeling and Simulation Office (DMSO).	The overall network architecture will resemble Figure 2 when the HLA Translator is in use.  Notice that the number of processes, computers and peripherals is significantly reduced.  In this environment there are two processes and two machines that are required to complete the connection to CSSTSS. EMBED PowerPoint.Slide.8  Figure 2.  Network Diagram Using the HLA Translator4.  Lessons Learned in Development4.1.  The Plan			Table 1 shows the original development timeline.  The team was able to stay on time through most of the year.  Development actually began in June and was considered complete in late October.  That means all objects were completed and integrated testing began.  There were multitudes of changes and additions once testing began.  We were ready for testing with the federation in January 00. EMBED PowerPoint.Slide.8  Table 1.  Development Timeline	Figure 3.  Shows the HLA Translator overall Object model.  There are other utility objects, but this is the basic object architecture of the model.  Essentially, HLATranslatorAdmin tells the HLACommoHandler and the CsstssCommoHandler objects what and when to do their communication job with the federation or CSSTSS, respectively.  HLACommoHandler makes RTI service calls as well as responds to the callbacks coming for the federation.   CsstssCommoHandler handles communication with CSSTSS using TCP/IP.  EMBED PowerPoint.Slide.8  Figure 3.  HLA Translator Object Model	The HLA Translator’s only function is to provide an interface for CSSTSS to the federation.  As callbacks are generated by the RTI, HLACommoHandler processes them and instances the appropriate update or interaction object that is designed to create the associated fixed length message that the IBM is capable of processing.  There are 35 such object for translating updates and interactions into IBM messages.   The message object is passed from the HLACommoHandler to HLATranslatorAdmin then onto the CsstssCommoHandler for transmission to CSSTSS using TCP/IP.  The process for handling IBM records is much the same.  With the CsstssCommoHandler receiving the record and passing it to HLATranslatorAdmin then on to HLACommoHandler where an RTI service is invoked and an update or interaction is communicated to the federation.4.2.  The Training 	Table 1 shows that we began training in the JAVA language before beginning the Object Oriented Programming (OOP) portion of the training.  Remember we were training former C programmers who already knew the basics of programming.  The assumption was they would pick OOP quickly and the challenge would be showing them how to implement their objects in Java.   That assumption proved to be wrong.  They picked up easily on the Java syntax but lacked a clear understanding of OOP and that left us having to review OOP concepts while we were developing the translator.  In hindsight, it would have been better to ground this group of programmers in object oriented techniques before beginning language training.  Then it would have been an exercise in implementing class examples from the OO training, in Java.4.3.  The Problem		There is one very significant advantage that this project has over many others.  We have a very detailed understanding of the problem.  There is already an ALSP Translator that does the same job for the ALSP confederation.  The HLA Translator duplicates nearly all the functionality of the original; therefore there was never any question of what the HLA translator was supposed to accomplish.  The former C programmers were the individuals that developed the ALSP Translator, so they knew exactly down to the record length and status code, what had to be done and in what order it needed to be accomplished.  It cannot be stressed enough how much this facilitated the development of the HLA Translator.  This also illustrates that in cases where legacy code is to be rewritten with similar capabilities, it is very important to consider that the programmers who developed the initial product have an intimate understanding of the problem.  In most cases it is probably better to retrain a programmer that understands the problem that hire a programmer that knows the new programming technique.5.  Lessons Learned Regarding HLA5.1.  Understanding the Problem		Here again we benefit from having solved the problem before.  The FOM used by the ADAPTOR is very similar to that used by the ALSP confederation.  So it was a matter of changing what was done in ALSP so it would work with HLA.  The guys a Mitre did a great job.  Their work meant we did not have to coordinate with the other federates which reduced the development time. 5.2.  The DMSO RTIThere are a few issues with the DMSO RTI that make programming cumbersome.  5.2.1.  Ownership Management	The JTC Interface Control Document requires that CSSTSS give up ownership of all attributes after registering and initially updating the object. [3]  We found that if we immediately call the AttributeOwnershipDivestiture service after the initial update that the divestiture is processed by the remote LRCs before the update.  This situation occurs because the update is processed through the time stamp ordered queue while the ownership divestiture request is processed through the receive-order queue.  Since the divestiture is not time stamped it is possible for the divestiture to be processed prior to the object’s initial update resulting in a federation state that prevents the object’s attributes from being acquired by the receiving federate.  This results in the attributes not being divested, and CSSTSS owning attributes for an object that by federation design are to be updated by another federate. [2]	The work around for this situation is to wait two time steps to ensure that the update is processed before the attribute divestiture call is made.  While cumbersome, this solution seems to work. 	5.2.2.  Non re-entrant	The DMSO RTI is single threaded and non re-entrant.  That means that you cannot make a RTI service call if you are currently processing a callback from the RTI.  While this is not even an issue on things like processing an update because in general you receive the callback and you update the object that the update came for.  It adds unneeded complexity when certain calls are asking for information or expecting a response.  For example, if a requestAttributeOwnershipAssumption callback is received you should be able to respond with an attributeOwnershipAcquisition RTI service call, but this is impossible because you are re-entering the local RTI component (LRC) as a result of a callback.  The solution is not complex, but it makes the logic cumbersome and prone to errors.	Our solution involves saving the response in a container and then checking if there is anything in the container each time the event loop is executed.  This is not complicated but cumbersome to implement. 5.2.3.  Filters	The Translator is required to filter on a Units side (blue or red) and service (Army).  CSSTSS is only interested in Blue, Army units so a solution had to be devised to do this.  The solution is that each time an update is processed the attributes for side and size are queried for Blue and Army respectively.  The update is not processed further if the test fails.  As is obvious this solution requires that each initial update must include side and size.  Luckily, the ADAPTOR ensures that is in the case because the ALSP message format it is translating has side and size in every update.  If we were not operating in the ADAPTOR federation the FOM would have to provide for a DDM filter to filter on side and service.  This is a planned upgrade to the ADAPTOR.  5.2.4.  Java Binding		The only real lesson here is do not expect normal Java behavior.  This is mainly due to the Java Native Interface with the LRC.   Objects created and passed from the LRC through a callback are not available after the callback returns.  This was manifested in the Ownership Management services.  We were saving AttributeSets for later use in a container, but we could not figure out why all the AttributeSets were the same.  As it turns out, the LRC uses the same memory location for each successive use of the AttributeSet; therefore, all instances saved in the container referred to the last AttributeSet passed in with the last callback.  The solution is creating a copy of anything that will be required after the callback returns.6.  Lessons Learned Regarding the CSSTSS Mainframe	6.1.  LU6.2 v TCP/IP		The original ALSP translator used a communication protocol called LU6.2.  It is an inter-process communication protocol for the IBM.  This protocol is not as user controllable as TCP/IP.  Specifically, the connection to the ALSP Translator would “unbind” for unknown reasons.  LU6.2 provided no means of notifying the developer of the reason for the shutdown.	  Conversely, TCP/IP provides exceptional data if a connection fails.6.2.  Fixed Length Record	We originally, sent the messages to the IBM in a continuous stream, but CSSTSS was unable to differentiate each record from the stream.  LU6.2 delivered messages on a record by record basis, where TCP/IP sends a continuous stream.  The CSSTSS programmers developed a method to read the length of the message first then read the specific length from the TCP/IP stream.  This solution dramatically improved speed and reliability over the original solution that was to pause between records.7.  Conclusion	Despite the challenges, CSSTSS is HLA compliant.  It is not a perfect solution but when dealing with legacy equipment compromises must be made.  In hindsight, most of these problems and solutions may seem trivial.  We hope that our experience and the documentation of some of the problems we had will assist any new development effort for a HLA compliant federate.References:[1] Lessons Learned in Integrating the RTI into the Joint Training Confederation, C. Zachary Furness, Fall 99 SIW Proceedings, No. 99F-SIW-038[2] High Level Architecture Run-Time Infrastructure Programmer’s Guide, 1.3 Version 7, Dec 1999[3]  Joint Training Confederation Sustainment Interface Control Document, Jan 2000.Thanks:	We would also like to thank the ADAPTOR and FMT developers from MITRE Corporation for their help testing the HLA Translator.  Finally, thanks to Bud Hannaman at JPL for his indispensable help testing the translator. 