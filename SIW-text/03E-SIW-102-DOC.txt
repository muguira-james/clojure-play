An Object Exchange Model TemplateFor Distributed SimulationGary Tan and Na ZhaoSchool of ComputingNational University of Singapore3 Science Drive 2Singapore 117543{gtan,zhaona}@comp.nus.edu.sgSimon J.E. Taylor Department of Information Systems and ComputingBrunel University, UxbridgeUB8 3PH, UKsimon.taylor@brunel.ac.ukABSTRACTCurrent research in Distributed Simulation is moving to connect existing simulation models together by exchanging information, so that they can constitute a complete simulation system. The motivation of this research is that connecting existing models could be more cost effective than recoding the separate models into a single model. One of the research issues is the standardization of the information exchange format so that it may be understood by the models.This paper gives an introduction to the Generic Runtime Infrastructure for Distributed Simulation (GRIDS). In particular, it describes the development of an Object Exchange Model Template (OEMT) which is a template for standard object creation within a federate (simulation model), so as to facilitate standard object transfers between the various federates that compose a distributed simulation. The OEMT facilitates interoperability by providing a common "language" and API that can be used to share information (objects) between simulations. We introduce the reader to the actual implementation tool of the OEMT- the XML DOM (Document Object Model). This tool uses the XML parser to render a document in a structured format, a hierarchical tree structure (DOMTree), which allows each element of the document to be accessed and manipulated by DOM provided APIs.The emphasis of this paper is on using and evaluating the OEMT through a case study of a simplified Singapore Mass Rapid Transit (MRT) System Simulation. In this case study, we designed a distributed system to simulate the MRT system and used this to investigate the flow of passengers on the Singapore MRT system, specifically to investigate the relationship of the model to the safe capacity of an MRT station. The information transfer in the system is based on the OEMT  and  therefore gives a practical instance of an OEMT usage.1.  IntroductionDistributed simulation refers to the execution of discrete-event simulation programs on a network of workstations. Sometimes the nature of the simulation itself may be distributed, as is the case for the simulators used in military training. Distributed simulations are most frequently used in the military. However, its use in commercial areas is gradually beginning to gain momentum. The benefits of this technology are higher performance via parallel execution, reuse and interoperability [1].  Such benefits help to reduce cost and time required for building new simulations. In addition, simulation interoperability could allow the connection of proprietary models without exposing their internal organization (and therefore company secrets) during collaborative projects [2]. The Generic Runtime Infrastructure for Distributed Simulation (GRIDS) is a lightweight message-oriented middleware with extensible features and package interfaces capable of supporting the demands of distributed simulation. It can be described as a distributed simulation environment capable of supporting a broad range of simulation types [3].In a distributed simulation, information transfer is very important because federates realize interactions though data exchange. Federates keep sending and receiving information between one another during their lifetime. Information has various formats such as data, file or sometimes it is an object itself. For example, a tire factory must send its products together with its quantity and quality parameter to the car assembly factory. In this case the information takes the form of objects (representative of entities transferred between the models). However a problem is the specification of these objects so that they may be described in a manner relevant to the end user community. The GRIDS Object Exchange Model Template (OEMT) defines the format and syntax for recording information in exchange object models. This common template provides a standardized way of specifying models to be used as input or output, and facilitates understanding between federates of a distributed simulation [4].During the past few years, the OEMT has been slowly developed; the template has been set up, and is still undergoing improvement. In this paper, we use a case study, a simplified Singapore Mass Rapid Transport (MRT) system simulation, to provide an example of how the OEMT is used to facilitate object exchange. The case study also allows us to evaluate the usefulness of the OEMT.The structure of this report is as follows. Section 2 gives an overview to GRIDS. Section 3 details the motivations of GRIDS OEMT. The Object Exchange Model Repository (OEMR) will be described in Section 4. Section 5 and 6 represent the case study and how it uses the OEMT. The two sections also introduce the reader to the actual implementation tool of object exchange model --- XML Document Object Model. Section 7 summarizes and analyses the experimentation derived from the case study. The paper ends with the conclusion in Section 8.2.  GRIDS OverviewThe Generic Runtime Infrastructure for Distributed Simulation (GRIDS) project was initiated in 1997 with the goal to develop an extensible component-based runtime infrastructure that could be used to coordinate the activities of distributed simulation components using a message-based communication scheme, and to investigate issues in distributed simulation and how they impact on simulation methodology and practice.  Instead of the fixed functionality advocated by the HLA RTI specification, GRIDS provides basic functionality for the interoperation of federates within a federation (interaction of models in a distributed simulation) and a mechanism to add extra functions where appropriate [3].  The current version of GRIDS (version 2.0) is written in Java. It provides basic simulation services (communications, simulation interface, data services) to connect simulation models (federates) cooperating together to perform a distributed simulation (federation), and extensible simulation services (thin agents services) to provide performance enhancement, time management, and mobile entities as required. Thin agents are used to support the federates (simulations) by providing tasks such as performance optimization, time management, data distribution management and specialist simulation services. The basic functionality is a subset of the HLA RTI functionality. The extensibility is the principal difference between GRIDS and other approaches to distributed simulation middleware [3].2.1 Basic architectureIn GRIDS, as with common distributed simulation terminology, a single simulation component participating as part of the entire simulation is called a federate, and the entire simulation of simulations is called a federation. GRIDS’s functionality is enhanced by the use of a novel service distribution model known as thin agents. The middleware is composed of the following major elements [3]:Boot Server The boot server is a single process used to coordinate the initialization, execution and termination of a distributed simulation. It is equivalent to the Central Runtime Component (CRC).Client The GRIDS client is used by the federate to interact with the rest of the federation. It is equivalent to the Local Runtime Component (LRC). The GRIDS client comprises four primary services: communications, simulation interface, data services and thin agent services. Thin Agent A thin agent is the GRIDS term for a component service. Thin agents are distributed to participating clients and instantiated to provide the required services. Their specific function is entirely dependent on the requirements of the application and therefore can provide specific services or more general.Metadatabase The metadatabase is the general data structure in GRIDS used to store information. First of all, the GRIDS is initialized by starting of the Boot Server. Then individual simulation nodes register to the boot server and the boot server builds up the namespace of all the clients registering, and builds a central entity list of all entities in the simulation. Upon a simulation “Start” event, the boot server broadcasts to all registered clients the entire entity list built up during registration. The entity list is stored in the internal database on each GRIDS client.  Once all entity lists and namespaces are broadcast to the individual clients, the server issues a “go” command to all the clients, signaling the start of the simulation. At this point, the server ceases its interactions with the clients. The clients then communicate directly as necessary in a peer to peer fashion to other nodes in the simulation. The GRIDS client is responsible for synchronizing entity attributes between the local and remote nodes. Figure 1 illustrates graphically the middleware’s setup in a typical GRIDS federation. Simulation federates are connected to a GRIDS client via an interface. Thin agents are distributed to participating clients and instantiated to provide the required services. Figure  SEQ Figure \* ARABIC 1 Typical GRIDS federation3.	Object Exchange Model Template (OEMT)3.1 Object-Passing in Distributed SimulationIn a distributed simulation, federates may be running different simulation products (SIMUL8, WITNESS) and even run in remote locations. The interoperation between them is realized through the exchange of information. Normally, the passing of information is built upon the message-passing concept. This means information is not encapsulated in any structured way, and is transferred by the middleware as a message with information. However, message-passing is not enough to satisfy all the requirements of distributed simulation. In some cases, federates produce objects instead of messages. A Distributed Supply Chain (DSC) simulation is such an example.  A DSC simulation is composed of models that represent each of the elements of the supply chain. In a supply chain, the interactions between the various stages of the chain are the intermediate products between the stages.  So in a DSC simulation, the interactions between federates are object instances that are produced or received by the federates from one another. Hence, this is the main concern in a DSC federation, i.e. the exchange of objects between federates.Of course, the objects can be represented by groups of messages describing the objects and containing values that are to be used by another federate. However, several problems arise when using message-passing instead of object-passing in the DSC simulation. Firstly, the approach using message-passing suffers from loss of detail. There is no standard as to how and what type of information should be enclosed in the messages to describe the object exactly. In addition, describing an object requires numerous messages, there may be large overheads for the federates to establish, make agreement and process the information to pass across. Secondly, there may be cases where variables are required to be used as input to the object to produce a particular output or where the federate is interested in some intermediate information of the object which requires passing some parameters to the object before getting results. Message representations cannot accomplish such requirements. Finally, the attributes of objects may be public, protected or private for different secrecy requirements.   Message representations lack the ability to satisfy the secrecy requirements of federates. Employing object-passing in DSC simulation solves the above problems efficiently. It is easier to keep the details of the object and to establish a standard whereby objects can be recognized uniquely.  Object-passing also allows the provision of methods that the receiving federates may invoke.Many other application areas in distributed simulation will also benefit from object-passing. The transportation system is another example.  A train system simulation can consist of models that represent different stations in a city. Trains moving between these stations also take the form of objects. The objects are representative of entities transferred between the models. A station model takes the arrival trains as input objects and departure train objects as output. The train object class includes two kinds of members, one is attribute values (capacity, passenger number, train type, etc.) which carry the data describing the train, and the other is methods which provide mechanism to access attributes and other services.  One important issue in distributed simulation is how to represent parameters and results in messages or objects so that they may be understood commonly by different federates in the federation. If all the federate programs are written in the same programming language, and run on the same type of machines with the same operating systems, then the representation requirement presents no problems. If there are however differences in these areas, then there will probably be differences in the way in which numbers and even text are represented. The best approach to this problem is to provide a standardized format for common objects, such as integers, characters. Then the native parameters on any machine can be converted to the form of the standardized representation. The High Level Architecture (HLA) solved this problem by providing such a standard, the Object Model Template (OMT). HLA OMT is used to describe an HLA object model, an individual federate or a federation. It focuses specifically on requirements and capabilities for federate information exchange through message-passing and interactions. However, OMT does not provide appropriate definitions for the foregoing object exchange model. Thus when it comes to the standardization of exchange objects, HLA OMT is poor in its ability. To describe the exchange model appropriately, we introduce the Object Exchange Model Template (OEMT). 3.2 Object Exchange Model TemplateThe Object Exchange Model Template defines the format and syntax for recording information in GRIDS Distributed Simulation object models, as well as mandatory specific data that defines each model uniquely from others [5]. Therefore, the GRIDS OEMT is tasked to document object exchange models, which emulate as close to reality as possible, the actual entities passed between the simulation federates. The GRIDS Object Exchange Model Template is composed of a group of inter-related components specifying information about the model. As was stated previously, each model is identified uniquely by the mandatory attributes and methods that must be implemented for each implemented object of the model. The current template for the core of a GRIDS object exchange model uses a tabular format for certain components of the model, and consists of the following components [4] (An example of object exchange model template is shown in Section 5):Name of Model: to record the product name that the model represents. The name must be clear and unique, so as to clearly differentiate it from the other templates in the repository (see section 4).Model Description Link: to record the URL link if the description and technical details of the model is located somewhere else online. “Model Description Link” cannot co-exist with “Model Description” and “Technical Details”. Should “Model Description Link” be used, “Model Description” and “Technical Details” must have an entry of  “Nil” and vice versa. This URL location could be a secure URL that allows only authorized staff to access the model details.Model Description: to record a detailed description of the purpose of the model and the product description. It may also contain a brief description of key features of the model.Technical Details: to specify the mandatory object attributes and methods that must be implemented of the model template. At least one mandatory attribute must be defined, in accordance to making the model unique. For mandatory methods, it is optional in the model’s declaration. For each object attribute, the attribute name, the attribute description, the attribute accessibility by the public, and the data type of the attribute are required.For each object method, the method name, the method description, the method accessibility by the public, the method’s parameters if any (parameter name and data type), and the method return data types are required.General Details of each Implemented Object: to specify for each object model that has been implemented using this model template, the details of the company and the location of the object in the form of an URL. This component of the object model template is optional, and multiple instances of this component can be existent in an OEMT. Each instance will be a description of the details of each known implemented object model using this template. This component of OEMT consists of the following fields – the name, contact information, contact person, email of the company that produced this object model, the version and version date of the object model creation, the implementation platform of the model, the reference link (in the form of an URL) to the implemented object model, and the additional attributes and methods implemented in addition to the mandatory attributes and methods declared by the OEMT as stated by this specification. Each additional attribute/method must be described in accordance to the specifications given to the mandatory attributes and methods.4.	Object Exchange Model Repository The Object Exchange Model Repository (OEMR) is the central location where all object exchange models’ information is stored. It is a library which stores all the object models in different areas of applications separately, for distributed simulation builders to access and re-use object models [5]. The OEMR will be similar to the Object Model Resource Centre (OMRC) of the Defense Modeling and Simulation Office (DMSO). The OEMR stores the OEMTs in categories of application areas. New implemented object models of existing OEMTs and new OEMTs can be uploaded to the OEMR, thus providing a centralized area for simulation builders to exchange their models for reuse, thereby resulting in convenience to the users.4.1 Using the OEMRSimulation builders can search for all object model templates from relevant application area in the GRIDS OEMR. For each object model template found, the simulation builder can select the implemented object models of the template from the list of object models. If an implemented object model is found, it can be downloaded and used in the simulation. This means that a simulation builder can use these models directly. It will make the simulation builder’s work easier and promote the reuse of object models. Additional attributes, methods or other information can also be added as required.If no suitable implemented object model can be found, simulation builders will build it based on the object model template. The model can be uploaded to the OEMR so that it can be used by other simulation builders.5.  Case StudyThe GRIDS middleware has been set up, and its functionality is under improvement. However, there are still many issues to be addressed. One of these issues is the usage of the OEMT which needs to be tested and validated. How to apply it into GRIDS effectively is a great challenge.In the following two sections, we will describe a case study, the Singapore Mass Rapid Transit (MRT) System Simulation. The purpose of this case study is to implement, investigate and critically evaluate the OEMT. First, we will discuss the design issues of the case study including building the models based on the Object Exchange Model Template. Then the case study implementation, especially practical object transfer items will be presented in section 6.5.1 System design and function descriptionThe MRT system is one of the most important public transport systems in the country. It spreads all over the country and provides mass rapid transit passenger service along major high density travel corridors in Singapore. In this case study, we designed a distributed system to simulate the MRT system and used this to investigate the flow of passengers on the Singapore MRT system, specifically to investigate the relationship of the model to the safe capacity of a MRT station. To simplify our system, only major stations, eight stations and four garage models, are simulated in a four line MRT system. This means the MRT federation, named MRTSim, consists of twelve federates. The station simulation models are object-oriented and distributed running on networked computers. Train objects carrying passengers are transferred between stations. They are based on OEMT as the information transfer standard and fully uses the OEMT. This case study therefore gives a practical instance of an OEMT implementation.Figure 2 illustrates the federation structure graphically. The function of each station is briefly described as follow.	Figure 2: Simulation system structureThe garages are in charge of generating empty trains (train objects with initial attribute values) for each MRT line in a fixed interval. Each of these MRT stations has a maximum safe capacity. Passengers reach a departure station at a given rate, which could be changed for each station and/or for different time periods. Each passenger has a randomly assigned destination and takes the best route (normally the shortest way to destination). The passengers are put into a waiting queue of a particular platform according to their destinations.A train object carries information such as trainID, capacity, total passenger number, number of passengers to each station and so on. This information form the attributes of the OEMT object, which are defined in the following specification. When a train arrives at a station, the station model invokes the methods of train object to access the attributes and finish the operations such as passengers getting on and off this train, and then sends the train to the next station.If the number of passengers on a station exceeds the safe capacity, the federation terminates by producing warning information together with a summary of statistical data. The data are used to adjust train interval or train capacity so that the stations could keep within the safe capacity.The stations are discrete-event based, in which a train object is regarded as an incoming event. Some basic services such as time management were achieved by employing the corresponding GRIDS thin agents. Figure 3 takes station EW2 as an example to portray the exchange of train objects in the system. As we can see, federate EW2 exchanges objects with 4 other federates. It receives train objects from 4 federates, and sends objects to 3. For example, a west line train comes to EW2 from EW1; EW2 processes the train (updated train object, including update timestamp, insert or delete passengers and other statistics work), adjusts station’s simulation time and then sends the object to the next station (EW3). The behavior of other federates is similar to EW2.		Figure 3: MRT station object exchange relationship5.2 OEMT specificationThe motivation of this case study was to show the workings of the OEMT. We wanted to know if it is a suitable and efficient way to specify object exchange in distributed simulation. So our main concern was on the design of the object exchange model in the MRT Simulation based on the OEMT format. The following four tables are based on the OEMT components described in section 3. They provide the specifications of exchange object (train object) in MRTSim. The specifications include all the attributes of the MRT train object in the simulation model (federate). The methods to access attributes are also represented. The real exchange object will be developed based on these descriptions.Table 1 Exchange Object InformationTable 2 Exchange Object Attributes TableTable 3 Exchange Object Methods TableTable 4 General Details of Exchange Object6.  Case Study Implementation6.1 The experimental platformThe experimental platform was built based on the following:GRIDS was used as the middleware in this case study. It provided time management, data distributed management and other basic services. The timely transfer of objects between federates was the responsibility of this middleware.  All the 12 federates were written in Java to take advantage of its object-orientedness, multithreading, and also the strong object serialization technology. The train object was realized in the format of a Java object class.Seven PIII 700 MHz with 256 MB RAM PCs within a 7-PC cluster were used to run the whole system. One PC was used to run the GRIDS Boot Server; the other 6 PCs each carried two federates.  6.2 OEMT ImplementationThe most important issue in this case study was to implement object transfer (pass-by-value). The objects were implemented as java classes, which included data and methods. However, another problem was how to organize the data, and how to differentiate them from methods. An object might have multiple hierarchical attributes. In addition, an object can carry more than one item, which has the same attribute name with different values. For example, a train may have one traction locomotive with a number of carriages. Each carriage has same attributes such as capacity and passenger number and is regarded as a relatively independent part of the train object. As another example, a tire factory supplies tires to a car assembly factory. As it is inefficient to send tires one by one, tires are sent in bulk. Each tire may have a different type, size and so on which are presented as different values for certain attributes. So how to represent the attributes is a significant problem. To solve this problem, we employed XML and the Document Object Model Tree (DOMTree) which provided an independent attribute field to carry all the attributes and separate attributes from methods. Figure 4 gives the structure of the exchange object model. Figure 4 Exchange Object Model (Java object class)6.2.1 Attribute Field of OEMT Object (AIF and DOMTree)The Object Exchange Model Template (OEMT) attribute information format (AIF) is a standard file format used to store the object attributes. The OEMT corresponds to common definitions of object models in object-oriented (OO) analysis and design (OOAD) techniques. In the OEMT literature, objects are defined as information encapsulations of attributes and operations (methods). This characteristic of the OEMT object requires all the attributes used to describe the object to be placed in an entire independent structure. The AIF is such a format to group all object attributes describing the object (e.g. attribute value). It stands for the attribute part of the OEMT. The AIF file takes the style of eXtensible Markup Language (XML) file. XML is a language portable over the Internet. It provides an encapsulation mechanism for object attributes. XML has opened the door to the sharing of information in various ways. It supports a variety of applications, allowing easy writing of programs to process XML documents based on the user-defined tags. XML is self describing and extensible with user-defined rules that can be declared. This characteristic also facilitates the access of attributes by simplify the method field, for all the attributes can be accessed by same method with different parameter value (attribute name). It can store information in various types of elements and show the relationship of the elements as classes and subclasses. This allows parallel object parts like carriages or tires to be described as children of a single parent. Using XML as the communication vehicle between applications requires a mechanism that will read and interpret the XML document into a computer-friendly format. Application programs require a means to access the individual pieces of information (elements) contained within each XML document. This is accomplished by using the XML parser to render the document in a structured format - an hierarchical tree structure (Document Object Model Tree), which allows each element of the document to be accessed and manipulated. Many tools have been built by different vendors for this. What we used in our case study, the XML4J parser, is such a tool provided by IBM that renders an XML document in a Document Object Model Tree (DOMTree). Figure 5 contains an example of the DOMTree for the following document. Each rectangle in the figure represents a node in the tree. To keep the figure simple, only the node types are included.Figure 5 Example of DOM treeThe DOMTree is a representation of an XML document used by applications at run time to query and update information within the document. The DOM also offers a group of APIs to facilitate the access of the elements within the tree. By following the tree (hierarchical) structure, the APIs allow traversing the tree using method calls for the parents and children. For the reasons above, we chose the DOMTree to specify the attribute field of the object exchange model in the case study. AIF is parsed to DOMTree and stored in the attribute field of the exchange object model. We will give an instance of DOMTree application in the following sub-sections. 6.2.2 Method field of OEMT ObjectWe developed a set of methods that can be invoked from outside the OEMT object to perform certain functions. These methods can facilitate the access to the object’s attributes (within DOMTree) and provide other related services, such as providing some statistics, changing the state of the object, updating some of its attributes or acting on outside resources to which the object has access. These methods are based on W3C Document Object Model. It provides a group of APIs that allow access to the elements within the DOMTree. Using the DOM APIs, any element within the XML document can be accessed, changed, deleted, or added. In our case study, the attribute field of OEMT object took the form of DOMTree. All the methods in the OEMT specification described in section 5.2 were also developed using DOM tools. These tools facilitated the information transfer and access in the MRTSim.6.2.3 Train Object in MRTSimThe train objects took the form of Java object classes which included DOMTree as data member and multiple methods. Figure 6 shows the AIF file being used to carry attributes of the train object. It was parsed into a DOMTree and stored in the object class in the MRTSim program.Figure 6 AIF file for train object in MRTSimFigure 7 shows the original state of part of the attributes in the train object and figure 8 gives an example of the methods in the train object. The method (setAttrValueInt) functioned as finding the specified element by name and setting the value passed as parameters. Figure 7 Example DOMTree fragmentFigure 8 setAttrValueInt(String AttrName, Int AttrValue) methodBy calling the method, we can add a value to a given attribute of the object. For example:setAttrValueInt(“capacity”,500);setAttrValueInt(“totalpsgnum”,300);setAttrValueInt(“psgnum_to_EW1”,50);Figure 9 shows the result of calling the method.Figure 9 Example DOMTree fragment after calling methodAs Figure 9 shows, each time the method is called, a new text node with attribute value (parameter two) is created and appended as a child node of the corresponding element node (refer to parameter one, attribute name). Hence the attribute field is updated. Other methods of train object behaved similarly as the above example. The train object with all the attributes and methods was transferred among the federation in the MRTSim. The program detail of the train object is transparent to users. The method name, parameters and function are listed in the OEMT specification. Users can search the specification for the required operation. Through calling these methods, a federate (station) can obtain useful information (e.g. passenger number in current station) from the exchange object, update it (e.g. passengers get off or on the train), then transfer the object to the next federate.  Providing methods in the OEMT can standardize object input, output and information transmission in simulation, thus simplifying the simulation builder’s work dramatically and promoting re-use of simulation components. 7.	Discussion and Proposed ImprovementsThe OEMT was successfully used in the MRT simulation, enabling the train object to be understood by all the federates. Assuming that the federates are developed by different organizations, they can be connected to form a federation without exposing their internal organization. The responsibility of each federate is to produce output objects and process input objects (how to process input object is private and isolated from other federates). These objects carry information between federates. In this case, all federates must agree on the format of the exchange object to ensure a common understanding in the federation. The Object Exchange Model Template (OEMT) defines the format and syntax for recording information in simulation object models, provides a standardized template for specifying objects to be used as input or output, and facilitates understanding between federates.The OEMT is suitable for specifying object exchange models for the following reasons: It provides a standard way to define common objects that are passed between various models of a distributed simulation. Therefore provides a commonly understood mechanism and general coordination among members of a federation.It provides Mandatory Object Methods Table to describe the methods to access the content of the object.It separates the manipulation of exchange object from simulation models. Therefore facilitate the design and reuse of common tool sets for development of distributed simulation object models.It provides the GRIDS Boot Server a standard to distribute object information to the DDM Thin Agents of the various federates.However, we also found deficiencies in the OEMT from this case study. Although the template has been set up, it is still not complete. It needs to be improved to describe the object model completely and the efficiency of object transfer using the OEMT also needs to be investigated. From experience gained from the case study, we offer three additional components to OEMT which extend the OEMT specification and provide additional necessary information to describe the exchange object.The Exchange Object Information table is extended with three items (italic) as shown: Table 5 object class relationship table exampleObject Model Relationship: to record the namespace of all object exchange models in the federation and to describe their inheritance relationships. The children object inherits all the attributes and methods from its parent object and can also extend new components as required. The inheritance ability facilitates the development and reuse of object exchange model. In the case study, there are four types of object model North line train, South line train, West line train and East line train, inherited from MRT Train object of all its attributes and methods. The OEMT specification only gave the specification of MRT Train object due to the limited space.Table 6 Object class relationship table exampleTime Representation: to specify the timestamp and lookahead of the object, which is used to synchronize all the federates in a distributed federation. The object arrived is processed in time order.Table 7 Time representation table example3) Attribute Field Format Representation: As mentioned in section 6, OEMT implementation involves an independent attribute field of object. This table is used to specify the data type of attribute field that carries object attribute information.  In this case study, it was DOMTree. It can also be XML file or other format according users’ requirement.Table 8 Attribute field format table exampleThe DOMTree used in the case study is a structured, computer-friendly format of XML document. It provides a standardized, versatile view of a document's contents. It also provides an encapsulation mechanism for the exchange object attributes and powerful API that allows the contents of the document to be accessed and manipulated. In addition, the object class may be a large structure. Sometimes transferring the whole object can cause a heavy load on the network. However, the object instances of uniform object model distinguish only on the values of attribute members and they have the same method members. The method members become redundancies in transfer process. To improve the efficiency, we can consider transferring the data (attribute field) without the method members of the object class. In this case, after the first introduction of the object class to the subscriber, the object class model resides in the subscriber federate. Only the attribute field is transferred between federates instead of the whole object. The DOMTree provides a mechanism to extract the attribute information as a transferable entity from the OEMT object.8. ConclusionGRIDS provides an extensibility mechanism to add additional service components in the form of thin agents and package interfaces capable of supporting the demands of distributed simulation [3]. With globalization of the commercial markets and the great development of World Wide Web, distributed simulation is becoming more important. GRIDS is a suitable infrastructure for implementing various types of simulations due to its lightweight and ease of extensibility. However, GRIDS is still a preliminary infrastructure and there is still a long way to go before GRIDS can be used in industry. This paper presented the application and evaluation of the Object Exchange Model Template through a case study. Since this was the first attempt to apply the OEMT in a complex simulation system, some problems arosed and solutions were provided. The Object Exchange Model Template (OEMT) served to create the standard for documenting simulation object models. The object was realized as a Java object class which included independent attribute field and method field. The attribute field took the form of Document Object Model (DOM) Tree. The DOM toolkit facilitates the object method field. It sufficiently utilized the superiority of XML such as standardization and clear structure, and provided a mechanism that read and interpreted the XML document into a computer-friendly format, which allowed the contents of the document to be accessed and manipulated. It was an effective tool for documenting object models. The Object Exchange Model Repository (OEMR) served as a centralized location to store such object model templates for re-use by other simulation builders in the industry. The current GRIDS and OEMT are based on Java. Future work will realize interfaces to other programming languages, so that it can include more simulation models from different organizations.  The OEMR will also be provided as an online web database for easy global access, and an online application tool will be implemented specially for simulation builders to create object models easily. References[1]  R.Sudra, S.J.E. Taylor and T. Janahan, Distributed Supply Chain Management in GRIDS, proceedings of the 2000 Winter Simulation Conference. Florida, USA. J. A. Joines, R. R. Barton, K. Kang, and P. A. Fishwick (eds.) USA ACM Press New York, pp. 356-361, 2000.[2]	R.Sudra, S.J.E. Taylor and T. Janahan, GRIDS: A Novel Architecture for Distributed Supply Chain Management, proceedings of the Fall 2000 Simulation Interoperability Workshop. Simulation Interoperability Standards Organisation, Institute for Simulation and Training.  Florida. 00F-SIW-051, 2000.[3] 	R.Sudra, S.J.E. Taylor. Extensibility: Modular HLA RTI Services. Proceedings of 2002 European Simulation Interoperability Workshop (E-SIW), North London, UK, Jun 2002. 02E-SIW-049.[4] G.Tan,  W.N. Ng, and S.Taylor, Developing An Object Exchange Model Template (OEMT) for GRIDS Distributed Supply Chain (DSC) Simulations, proceedings of 35th Annual Simulation Symposium, San Diego, USA, Apr 2002.[5] 	G.Tan,  W.N. Ng and S.J.Taylor,  Generic Runtime Infrastructure for Distributed Simulations (GRIDS) Distributed Supply Chain (DSC) Object Exchange Model Template (OEMT) Specifications Version 1.0. [6]	R.Sudra, S.J.E. Taylor and J. Saville, Bandwidth Reduction Techniques in Distributed Interactive Simulation using Java.  Proceedings of the UK Simulation Conference (Simulation 99). ed. Pollard J.K. and Al-Dabass D. London, UK. 1999, pp. 2-5.[7]	E. Christiaanse and K. Kumar, ICT-enabled coordination of dynamic supply webs, International Journal of Physical Distribution and Logistics Management Vol 30, No. ¾, 2000, pp.268-285.[8]	H.B.Chen, O.Bimber, C.Chhatre, E. Poole, and S. J. Buckley. eSCA, A Thin-Client/Server/Web-enabled System for Distributed Supply Chain Simulation, Proceedings of the 1999 Winter Simulation Conference, Phoenix, Arizona, USA, Farrington, P.A., Nembhard, H.B., Sturrock, D.T., and Evans, G.W (eds), ACM Press, New York, 1999, pp.1371-1377. [9]	S.J.E.Taylor, G. Tan, and J. Ladbrook, Data Distribution Management for Distributed Supply Chain Simulation, Proceedings of the Fifth UK Simulation Society Conference.  ed. Al-Dabass, D. United Kingdom Simulation Society, Cambridge, UK, Nottingham Trent University Press. 2001, pp.35-41.[10] S.J.E.Taylor, R. Sudra, T. Janahan, G. Tan, and J. Ladbrook, Towards COTS Distributed Simulation Using GRIDS, Proceedings of the 2001 Winter Simulation Conference, Washington, USA, 2001.[11]	S.J.E.Taylor, R. Sudra, G. Tan, J. Ladbrook, Issues in Developing a Distributed Supply Chain Simulation for the Automotive Industry, Proceedings of European Simulation Interoperability Workshop 2001, London, UK, June 2001, Simulation Interoperability Standards Organisation, Institute for Simulation and Training, pp. 629-637.[12]	US Department of Defence. (1998). Object Model Template, Version 1.3.[13]	Document Object Model (DOM) Level 3 Core Specification Version 1.0, W3C Working Draft 22, October 2002.[14]	R. Fujimoto, Parallel Discrete Event Simulation, Communications of the ACM, October 1990.[15]	R. Fujimoto, Parallel and Distributed Simulation, Proceedings of the 1995 Winter Simulation Conference, USA. 1995.Author BiographiesDr Gary Tan Soon Huat  received his M.Sc and Ph.D from the University of Manchester, U.K. He is a Senior Lecturer at the School of Computing, National University of Singapore (NUS). His research interests include parallel and distributed computing, scheduling and load balancing, declarative multiprocessors, dataflow and parallel machine simulation, parallel and distributed (interactive) simulation and High Level Architecture. He is a member of the NUS Modelling and Simulation Group (MSG), and is a member of the ACM and IEEE Computing Society.Dr Simon J.E. Taylor is the Chair of the Simulation Study Group of the UK Operational Research Society. He is a Senior Lecturer in the Department of Information Systems and Computing and is a member of the Centre for Applied Simulation Modelling, both at Brunel University, UK. He was previously part of the Centre for Parallel Computing at the University of Westminister. He has an undergraduate degree in Industrial Studies (Sheffield Hallam), a M.Sc. in Computing Studies (Sheffield Hallam), and a Ph.D. in Parallel and Distributed Simulation (Leeds Metropolitan). His main research interests are distributed simulation and applications of simulation health care.Zhao Na is currently doing her Masters at the National University of Singapore (NUS). She received her Bachelor in Computer Science from Beijing Normal University, PRC. Her research area is in the field of distributed simulation. Her research interests include distributed and parallel systems, databases, and networking.PAGE  