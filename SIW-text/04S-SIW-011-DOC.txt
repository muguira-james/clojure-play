Developing an Open-Source RTI CommunityDr David StrattonJames MillerShawn ParrDistributed Simulation LaboratoryBallaratVictoria, Australia dsl.ballarat.edu.auKeywords:Open-Source, Run-Time Infrastructure (RTI), High-Level Architecture (HLA)ABSTRACT: While there have been a number of recent developments in the HLA arena, particularly in the areas of component models and the application of the Model Driven Architecture (MDA), in general the HLA standard has remained static since its introduction in the mid 1990’s. This has raised the question of the ongoing viability of HLA, with some groups even drawing an analogy between the current technical and commercial direction of HLA and the decline of the Ada language [1]. One of the lessons learnt from the demise of other technologies is that for a standard to evolve and remain current it requires the support of an active research and development community. Such a community necessarily requires access to reference implementations of the technology in order to prototype, validate and propose changes. In the case of HLA the Simulation Interoperability Standards Organisation (SISO) provides a forum that already attracts significant contributions from the simulation community, but there is currently no recognized or substantial open-source reference implementation of the Run-Time Infrastructure (RTI).  As a result, many of the valuable HLA contributions passing through SISO are in danger of being lost, as currently no vehicle exists through which research can be progressed to the level of becoming an accepted standard.Furthermore, without a free-to-use framework to promote experimentation and adoption outside of the current defence-oriented user-base, it is unlikely that the HLA standard will gain the broader acceptance required to maintain its momentum as the leading distributed simulation standard. Ultimately this situation will lead to the development of an alternative or replacement simulation middleware standard. This paper examines a number of possible ways forward for the development of an open source RTI community.  The paper outlines the motivations for such an endeavor, reviews three prominent open-source RTI activities, and discusses how the broader SISO community could successfully support these efforts.IntroductionThe computer industry has already been profoundly influenced by the open-source concept. Although the predominant desktop operating system is Microsoft Windows, a commercial product, the open-source alternative Linux is widely accepted and deployed in many critical server situations. This penetration of a mission-critical market sector is a credit to the feasibility and reliability of the open-source concept. There is little argument that open-source projects are changing the IT landscape in many areas.  To start, this paper will describe in detail the various forms of open source model. In particular, attention will be paid to the various open-source licensing models and how they affect the freedom to commercialise related works.Whilst the general impact of open-source has been hinted at in a variety of areas, such as operating systems (Linux) and web server implementations (Apache), the specific requirements of the simulation community give rise to a unique set of motivations for an open source RTI community. The basis for these motivations is discussed before moving towards summarising the capabilities and status of three existing open-source RTI’s for which source code is available. Finally, the potential for SISO and the simulation community to support and interact with such projects is explored.The underlying motivation for this paper is to encourage debate within the simulation community regarding the value of developing and supporting an open-source RTI community. As well, this paper will discuss many of the issues, both technical and commercial, that need to be addressed.What is Open-Source?While there are a number of licensing models for open-source projects, in general an open-source effort can be characterised as being a public software project where any participant can read, modify and redistribute the resulting software source code. Open-source projects usually operate on a consensus based community model.  In addition to providing valuable products to the community, open-source promotes software reliability and quality by supporting independent peer reviews and rapid evolution of source code [2].  Probably the most successful example of such activities is the Internet, which relies heavily on open-source infrastructures such as TCP/IP, Bind, Sendmail, Linux and Apache.The motivation for working on an open-source project depends on who is doing the work. While many individuals contribute to open-source projects purely for altruistic reasons, such as intellectual stimulation or a fundamental belief that open-source code is technically or culturally better, many participate in order to increase their marketable skills [3, 4, 5]. From a commercial user’s perspective, open-source projects often provide a shorter development path, reduced in-house development costs and remove the reliance on proprietary third-party solutions. As a commercial developer, open-source projects can provide a mechanism for developing mind-share and broadening the market place, where the actual product is used as a loss-leader for follow-on consulting, customisation and technical support sales.Regardless of the motivations, the trend towards open-source is increasing, with 700 new users and 60 new open-source projects joining SourceForge  [6] each day [3].  Open Source Licensing ModelsUnlike commercial products which are shipped as proprietary solutions with licensing agreements that explicitly prohibit the modification and redistribution of the software, open-source projects are, by definition, open and available to all. The three key principles to all open-source licensing agreements are as follows:All authors have the right to re-distribute the project without incurring any royalty or licensing costs;There is open access to the source code; andThe ability to modify the software and re-distribute the results according to the licensing agreement being used (see below). Building on these principles, there are three main open-source licensing models: The General Public License (GPL) or “copyleft” licensing standard created by Stallman, which was developed to “prevent cooperatively developed software, in whole or in part, from being turned into proprietary software.” Under GPL, anyone is free to use and enhance the code, however, they must make the updated code available to everyone else under the same GPL licensing agreement. In other words, a commercial entity cannot copy and modify a GPL project and then attempt to re-sell the modified software. The Lesser General Public License (LGPL) is less restrictive in relation to commercial development. LGPL states that a program that does not itself contain any derivative of any portion of the open-source material, but is designed to work in conjunction with the open source code by being compiled or linked with it, does not fall within the scope of the LPGL project and can be distributed as a commercial product.The Berkeley Software Development (BSD) licensing model, is even less restrictive. BSD allows programmers to use open source code in the development of proprietary code as long as they credit the original developers within their code.Motivations for an Open-Source RTI CommunityThe previous section outlined the general motivations for developing an open-source community. This section will expand on this to look at the advantages and disadvantages such an approach may provide to the HLA community. MotivationsIn the general case of open source development there are a number of reasons why a project may arise, including:An unmatched requirement for a standard or tool;A need for experimentation or improvement to an existing technology or standard; orA community desire to break a dependency on an existing proprietary solution.While HLA initially began as a free (but not open-source) platform from DMSO, presumably in an attempt to develop mind-share and support for the new technology, it has subsequently been commercialized. While this path is a little different from many open-source middleware projects, as most begin as commercial activities which evolve open-source projects only once a substantial user-base has been established, the motivations for creating an open RTI community are not so dissimilar. These motivations can be summarized as follows.Motivation 1 – To develop a reference RTI for research and development purposes:Over the years there have been numerous SISO papers that have discussed extensions to the HLA services layer, including support for FOM-Agility, dead-reckoning and security services, as well as proposed architecture extensions such as the development of a standard simulation component model and the application of the OMG’s Model Driven Architecture. While SISO provides a forum for such discussions there is currently no active community where non-RTI vendors can apply these ‘lessons learnt’. The lack of an open-source reference RTI implementation for testing and experimentation purposes is central to this limitationMotivation 2 – Increased responsiveness to user needs:An open source RTI is able to be modified and extended by users with distinct requirements – perhaps motivated by their unique target domain. As RTI extensions are developed and tested through the open source process the potential will emerge for these extensions to become candidates for the development of revised HLA standards. Obviously this process requires formalisation but the efforts of the W3C consortium and the Internet RFC program show that such processes can be effective.Underlying this motivation is the need to develop an environment that will allow the simulation community to actively participate on the ongoing development of the HLA standard. Motivation 3 – Reduced cost of entry:The availability of an open-source RTI that is freely and easily downloadable over the Internet will dramatically reduce the cost of entry to for prototyping, research and small to medium sized projects. This in turn should broaden the use of HLA.Effect on the Commercial SectorWhen considering the development of an open-source RTI project, it would be irresponsible to ignore the impact that such an endeavor may have on the commercial HLA sector. While the audience for this work has been identified as predominantly research and academic groups, it would be unrealistic to imagine that the commercial RTI market would not be eroded once a certain level of maturity and capability was reached. This effect would be most pronounced where small to medium sized enterprises were concerned.However, important considerations such as feature set, product support, training, consultancy, reliability and customer responsiveness may outweigh product cost in the selection of an RTI. Such factors provide a level of customer comfort that is not always available with an open-source alternative and would increasingly become the basis for the commercial RTI market. While on the surface the proposition of a fully-featured, free RTI may seem appealing from a cost savings perspective, there is a risk that the commercial RTI vendors will simply be unable to compete, possibly leading to the loss of valuable experience, secondary products and services. While unlikely, such a scenario must be considered when establishing such a project.Current Risks to HLAOne of the key lessons learnt from the demise of other technologies and standards such as ADA [1], is that the evolution of standards requires an active research and development community. While SISO and its bi-annual Simulation Interoperability Workshops (SIW) provide a forum for HLA discussions and already attracts significant contributions from the simulation community, there is currently no approachable mechanism or forum for promoting changes to the HLA standard.In order to remain a viable standard, which supports the needs of a growing simulation community, HLA faces a number of critical challenges:There is currently no way to test or ratify proposed new services to the HLA standard.  Extensions to the HLA standard such as web services, simulation security protocols and component models have been proposed at SIW. The lack of a path towards standards ratification means that these significant contributions to the HLA standard are being lost and the standard as a whole is not evolving with its user base;The current HLA standard may have already stalled. While some minor changes have made between the HLA 1.3 and IEEE 1516 standards, little real progress has been made since its initial release in the mid 1990s. This is not due to a lack of community feedback in respect to new and improved RTI services, but rather from the lack of an approachable mechanism to propagate new concepts up to the HLA standards level;While HLA has obtained a foothold within the defence community, it is unlikely to achieve broader support without a free to use implementation; andLingering concerns with regards to HLA usability, performance and stability with current RTI implementations remain unanswered. If these risks are not addressed then there is a real possibility that HLA, and the already significant community investment, will simply be lost when a newer and more relevant simulation standard becomes available.  The development of an open-source RTI community has the potential to directly address these risks.Existing Open RTIsThere are already a number of non-commercial RTIs available, some of which are distributed under an open-source licensing agreement and share many of the motivations presented in the previous discussion. This section will provide a brief introduction to three of the more prominent efforts, namely the FDK, XRTI and CERTI, and provide a comparison of their features. FDK ProjectThe Federated Simulation Development Kit (FDK) was developed at Georgia Tech by the Paralleled and Distributed Simulation (PADS) research group [7]. The FDK (version v4.2b4) delivers a module implementation of the DMSO 1.3 RTI specification, allowing users to pick and choose the FDK modules that are most appropriate for developing their particular RTI implementation.Overview:The FDK was designed originally for use on high performance systems. It is organised as a set of modules that provide certain functionality for use by RTI developers.Version 4.x of the FDK has been reorganized and simplified greatly over previous versions. The implementation is split into two parts. The first is the RTIKIT, which contains the various modularized components that can be used to create RTIs. The RTIKIT does not provide an implementation of all RTI services. The services available include:Time Management;Communications - IP (TCP, UDP), Shared Memory;Multicasting;Reduction management;Session management; andFED file parsing.The second part of the FDK is the Detailed RTI (DRTI), which uses the services provided by the RTIKIT. It is provided mostly as an example of how the RTIKIT can be used. There is no central RTI process (rtiexec) or Federation process (fedexec); all federates include this functionality internally, and each is capable of being master or slave. All federates must be known and specified prior to running the federation. Each federate will pause until all federates have initiated their RTI core. This means that there is no support for the dynamic joining and departing of federates and if one federate leaves (due to error or termination), the whole federation will terminate.There are currently limitations in the buffer allocation code used in the FDK. More precisely, there is a limited amount of buffer space for federates, objects and attributes and all space is allocated at the outset. This creates a high requirement for memory, however the argument for this is that each federate is supposed to run on its own machine (i.e. distribution).Licensing Model:The FDK has a non-free license that restricts the distribution of source code based on US DoD export control. The code is thus not freely downloadable. Permission must be sought directly for the software to be used for anything other than research purposes.Work Required:Some work would be needed in the following areas in order to promote the FDK as a fully compliant 1.3 or 1516 RTI: Ownership management;Synchronization points;Save and restore;Request update;DDM;Java language bindings;Improved documentation, at least for the development team; andImproved memory management to support scalability on a stand-alone machine. It should be noted that while there are a number of key RTI features currently absent from the FDK code-base, these features were not part of research focus of the PADS groupXRTI ProjectThe Extensible Run-Time Infrastructure (XRTI) is an open-source Java implementation of the IEEE 1516.1 HLA interface. The goals of the XRTI project are stated as “not to compete with commercially available run-time infrastructures, but rather to provide a foundation for research into improvements and extensions to the High Level Architecture.” [8]. The XRTI focusses on the areas of Extensibility, Composability, Reflectivity, Run-Time Infrastructure Interoperability, Strongly Typed Attributes and Parameters, and Autogenerated Proxies [8, 9]Overview:The XRTI website states that the purpose behind the software is to provide a base for research and testing of improvements and extensions to the HLA standards. The XTRI focuses on the following areas of research [8]:Extensibility: The ability to extend shared object models on the fly, adding new classes of objects and interactions without interrupting the federation execution. Composability: The ability to use several shared object models at once within the same federation execution. For instance, a natural decomposition would separate the management object model (MOM) from the simulation object model (SOM), providing different federation description documents (FDDs) for each. Reflectivity: The ability to maintain the object model itself as a collection of shared objects. Run-Time Infrastructure Interoperability: The definition and standardization of a common protocol capable of allowing run-time infrastructures from different vendors to interoperate. Strongly Typed Attributes and Parameters: Currently, the High Level Architecture interface treats all attributes and parameters as opaque byte arrays; however, the federation description document format includes complete type information, suggesting the creation of a type-safe run-time infrastructure. Auto-generated Proxies: Using the contents of the federation description document, a set of proxy classes may be auto-generated and used by the application developer as an easier means of interacting with the run-time infrastructure.The current version of XRTI (CVS 2004-01-21) is based on a subset of the 1516 HLA, although it does not currently provide the following services: Object ownership acquisition and divestitureTime managementData distribution managementEvent retractionSynchronizationSave/restoreAccording to a thesis from Kapolka of the MOVES Institute [10], during their tests the XRTI outperformed two commercial RTIs (DMSO RTI-NG 1.3v6 and the MÄK RTI v2.0.3) in most areas. On average, it was consistently around four times faster than RTI-NG, and slightly faster than the MÄK RTI. These results are interesting, however a major caveat must be taken into consideration: the test federation was written in Java, and thus the XRTI did not have the bottleneck of Java Native Interface (JNI) as did the other RTIs. It may be that a federate written in C++ will perform poorly using the XRTI compared to RTI-NG or the MÄK-RTI.Licensing Model:XRTI is distributed under the non-copyleft revised BSD license, which allows full redistribution of source and/or binaries provided the copyright notice is left intact.CERTI ProjectThe CERTI is a C++ implementation of the HLA 1.3 specification developed initially for internal use at ONERA [11, 12], and has subsequently been made available as a open-source RTI to the simulation community. Overview:CERTI is based on a distributed system whereby each federate has an associated ambassador, which communicates over the network with other ambassadors via a bridging process. The software is based on three levels of communicating processes. The first process is the RTIG, or RTI Gateway, which is a global, centralized manager. This performs the functions of transferring messages between the different RTIA processes over the network. The second level is the RTI Ambassador (RTIA), which is run locally to each federate, and communicates over TCP or UDP with the RTIG. The RTIA is able to handle some messages on its own, and only communicates with the RTIG when necessary. The final level comprises the federate code, which is exposed to the HLA interface code via libRTI. LibRTI communicates with RTIA via Unix sockets. Its purpose is to translate calls to the HLA into messages for the RTIA. [13]The latest version of CERTI (3.0m.cvs) appears to support all of the HLA 1.3 specification and ships with demonstrate code to test various features like DDM.Licensing Model:CERTI is distributed under the GPL and LGPL licenses.ComparisonTable 1 provides a comparison of the various features support by the three RTIs reviewed in this section:While additional work is required on all of these RTIs, they would each provide a strong starting point for developing an open-source RTI community. The subsequent section will start to examine the issues related to such an endeavour.Developing an Open-Source RTI CommunityThe previous sections identified the motivations for developing an open-source RTI community and reviewed a number of existing RTI projects, all of which could effectively form the basis of a larger open-source initiative. Following from these discussions, this section will identify the various groups who need to be involved in the formation of such an effort and why they would participate. Developing Community InvolvementOpen-source projects rely heavily on community involvement for their establishment and ongoing development. A survey carried out by The Boston Consulting Group on SourceForge projects observed that open-source projects were often driven by a dedicated inner-team, supported by a large user-base that actively used the product, reported bugs, suggested areas for improvement, and occasional made coding contribution (presumably based on a short-term internal requirement) [3]. For example, while the Apache open-source project has more than 13,000 created contributors, the top 15 developers created 83% of the code. 75% of all participants only made one contribution while only 4% provided more than 5 contributions. In order to establish momentum behind any substantial open-RTI movement it will be necessary to:Identify a strong inner-circle of developers who share a dedicated interest in progressing HLA and simulation. It is likely that this group will come from existing simulation research centers (e.g. VMASC and Mitre), academic institutions (e.g. The Distributed Simulation Laboratory [14], Georgia Tech’s PADS [7], and The MOVES Institute [10]) and government funded groups (e.g. DMSO);Establish a process, heavily assisted by project management services like SourceForge [6] or Savannah [15], for maintaining and distributing the RTI to all interested parties; Provide a stable 1.0 version of the community’s RTI that would facilitate research, development and prototyping activities; andEstablish awareness through user and standards groups such as SISO of the existing of the RTI.Given the maturity of a number of existing RTI projects it should be possible to achieve these objectives in a relatively short term. Developing Standards Organizations InvolvementWhile there is no requirement for a standards organization to participate in such an effort, given the history of HLA and the influence SISO has in the simulation field, it would seem logical that an SIW Working Group should be formed to help support this endeavour. Such an involvement would provide the following benefits:SIW would provide an ideal venue for reporting progress and to solicit feedback on proposed activities; It would provide a vehicle for ratifying proposed changes to the HLA standard; andIt would provide creditability to the effort.Commercial OpportunitiesThe fact that a project is managed under an open-source license does not prohibit third-party organizations from generating revenue through value-added services. Often such revenue is used to fund research groups and pay developers, who in turn contribute back to the open-source project they are deriving funding from. Examples of third-party services include:Training – The provision of training course and professional accreditation and university programs;Consulting - This includes developing and trouble-shooting simulations for the open-source infrastructure; Development - Developing new user-specific infrastructure services for the open-source project; Publications – Writing and publishing textbooks and manuals to support the open-source project; andDistribution – While an organization is not allowed to profit from the physical distribution of an open-source project, there are a number of less-tangible benefits such as developing a customer list. Some of these activities may be constrained by the type of licensing applied to the project; for example GPL dictates that all modifications to the code must be published back to the community, while LGPL agreements would allow commercial groups to modify the source code without necessarily having to release the resulting code as long as the original effort is acknowledged.While anybody is able to deliver these services it is reasonable to expect that they will be provided by a group directly participating in the open-source effort, as these ‘inner-circle’ groups are more likely to have the expertise and contacts required to capitalize on any arising opportunities. Given the size of the current HLA community one possible model for rapidly establishing a support network for an open-RTI would be to identify a number of educational institutions that would be willing to form the initial core group. The modest income derived would possibly be sufficient to allow a University supported research group to fund their HLA research activities.ConclusionThere is a growing consensus among many simulation developers that the HLA standard is reaching a cross roads.  The future of HLA, as a viable standard that is widely adopted, now depends on the ability of the standard to evolve in order to meet the wider needs and expectations of a growing simulation community. This paper, through proposing an open-source RTI community, represents a call to arms for those that are committed to the ongoing development of the HLA standard. Therefore, the following recommendations would be made to SIW:Rapidly call for a show of hands for the establishment of an open-source RTI Working Group within SISO;If successful, identify key players who will promote and establish the core infrastructure for the Community. Initial activities would include:Developing a management and reporting structure based on SISO guidelines;Developing and implementing a down-select program to identify the most appropriate existing open-source RTI project;Determining the best way, from the Community’s perspective, to work with the selected open-RTI, either through collaboration with the existing group or via the development of a new branch project through an open-source web site (e.g. SourceForge); Releasing a prioritised list of development tasks; andReporting the Working Group’s progress and the stability and availability of the Community’s version 1.0 open-RTI at the next SIW in six months. If this, or a similar initiative, is not proposed and followed-up then there is a very real possibility that the considerable investment already made to develop and support of the HLA standard will be lost.References[1] 	Tolk, A., “Avoiding another Green Elephant - A Proposal for the Next Generation HLA based of the Model Driven Architecture”, Proceedings of the 2002 Fall Simulation Interoperability Workshop (SISO Fall 2002). Paper ID 02F-SIW-004, November 2002.[2]	Open Source Initiative (OSI), http://www.opensource.org[3]	Lakhani, K., Bates, j., “The Boston Consulting Group Hacker Survey”, Boston Consulting Group, July 2004[4] 	Raymond, E., “The cathedral and the bazaar”, http://www.firstmonday.dk/issues/issue3_3/raymond, 1998[5] 	Il-Horn, H.,, Roberts, R, Slaughter, S.,  Fielding, R., “Why Do Developers Contribute to Open Source Projects? First Evidence of Economic Incentives”, Carnegie Mellon University and Apache Software Foundation[6] 	“SourceForge.Net” home page, https://sourceforge.net[7]	Georgia Tech University, “FDK- Federated Simulations Development Kit”, www.cc.gatech.edu/ computing/pads/fdk/[8] 	“XRTI: Extensible Run-Time Infrastructure” http://www.npsnet.org/~npsnet/xrti[9]	Raymond, E. “Homesteading the Noosphere,” http://www.firstmonday.dk/issues/issue3_10/raymond/ , 1999[10]	Kapolka, A. “The Extensible Run-Time Infrastructure (XRTI): An Experimental Implementation of Proposed Improvements to the High Level Architecture”. Master's thesis. The MOVES Institute, Naval Postgraduate School, December 2003.[11] 	“CERTI - Summary”, http://savannah.nongnu.org/projects/certi/[12]	CERTI Home Page, http://www.cert.fr/CERTI/index.en.html [13]	Bréholée, B. & Siron, P. , “CERTI: Evolutions of the ONERA RTI Prototype.” Proceedings of the 2002 Fall Simulation Interoperability Workshop. Paper: 02F-SIW-018, 2002[14]	Distributed Simulation Laboratory, dsl.ballarat.edu.au , Ballarat University, Australia, 2003 [15]	“Savannah” home page, http://savannah.nongnu.org[16]	Walker, M., “Overview Of The Raytheon E-RTI”, Raytheon Missile Systems Company, Proceedings of the 2002 Fall Simulation Interoperability Workshop. Paper: 03F-SIW-016, 2003Author BiographiesDR DAVID STRATTON is the Leader of the Distributed Simulation Laboratory at Ballarat University, Victoria, Australia. The DSL is involved in research and education initiatives in the field of distributed simulation, focusing largely on the HLA. A growing cohort of research students is furthering the growth of the DSL.JAMES MILLER is an Honours student at the University of Ballarat. His research interests include simulation visualisation, computer games and the use of the HLA in entertainment.SHAWN PARR is the co-founder and Chief Technical Officer at Calytrix Technologies, an Australian based research and development company specializing in HLA simulations, the Model Driven Architecture and component-based design. Shawn has been working in the IT industry for over 10 years and holds a Bachelor of Science degree and a research based Masters degree.Functionality / RTIFDKXRTICERTIVersion4.24bCVS 2004-01-213.0m.cvsLicenseExport-controlledRevised BSDGPL & LGPLCode Available((permission  req.)((CVS AvailableX((Extensive Documentation( ( ( Inline DocumentationOKOKOKDDMXX(Time Management(X(XML FOM SupportX((C++ Federate Support(((Java Federate SupportX(XClean installer( (GNU autotools)( (Apache Ant)( (GNU autotools)Code readabilityPoorHighGoodPub/sub objects(((Pub/sub interactions(((Unpub/sub objectsX((Unpub/sub interactionsX((Timing modelsTSO, ROROTSO, ROObject ownershipXX(Sync points( (basic)X(Save/restoreXXXSupports dist. network(((Dynamic join/resignX( (limited)( (limited)Multiple FedexecsX((Runs 2 federates(((Runs 10 federates( (not on local machine: memory)( (RTI died after about 10 minutes)(Runs 100 federates( (maximum of 256)Maybe(PerformanceHighGoodGoodScalabilityPoorGoodGoodExtensibilityOKHighGoodScale: High | Good | OK | Poor | BadTable 1:  RTI Features Comparison