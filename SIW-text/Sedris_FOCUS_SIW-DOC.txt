Innovating with SEDRIS-based Tools - Solutions to Complex ProblemsMary Ann PigoraDavid T. ShenJesse CamposSAIC12479 Research ParkwayOrlando, FL  32826-3248(407) 207-2772, (407) 207-2755, (407) 207-2796 HYPERLINK "mailto:pigoram@saic.com" pigoram@saic.com,  HYPERLINK "mailto:David.T.Shen@cpmx.saic.com" David.T.Shen@cpmx.saic.com,  HYPERLINK "mailto:Jesse.J.Campos@saic.com" Jesse.J.Campos@saic.comKeywords:SEDRIS, STFABSTRACT:  There is a variety of SEDRIS-based tools and applications for creating, converting and examining transmittals, built for different computing platforms using assorted SEDRIS release versions.  In general, these tools were not designed to interoperate.  Each has its own specialized user interface and many of them duplicate functionality.  As SEDRIS gains a larger worldwide user base, there is an increasing need for existing and new tools to interoperate to address more complex problems.  This paper presents the SEDRIS FOCUS software, which is an integrating technology that enables the pulling together of existing SEDRIS-based tools as well as allowing extensions for future tools and enhancements.  It will encapsulate basic transmittal data visualization, manipulation, and editing functions into data widgets.  It will support queries and content checking, and have hooks for future SEDRIS applications.  It will run on all SEDRIS supported platforms and have a consistent look and feel.  Technology will be developed to support cooperative environments that work locally and across the Internet, allowing users to share controlled access to transmittals.This paper will discuss the functional requirements and architecture of FOCUS, as well as some of the steps to make a stand-alone application compatible with this technology.  The SEDRIS Spatial Reference Model Tool (SRM Tool) will be used as a concrete example of a data widget type, and its interface to FOCUS will be explained.Why do we need SEDRIS FOCUS?As SEDRIS matures and gains a larger, worldwide user base, more and more users will develop tools for viewing, editing, and manipulating SEDRIS databases.  There already exist a great number of tools, only some of which are maintained in the SEDRIS core software distribution [1].  However, a major tractability problem has surfaced.  As tools are developed, it is increasingly difficult to ensure those tools remain consistent and are “updated” to the current release of SEDRIS.  Some of these available tools include:Visualization ToolsAtmospheric/Bathometric Visualization (Stf2vis5d, OAML GDEM & DBDB5 to SEDRIS to Vis5D, GRIB to SEDRIS to Vis5D)Examining the STF (feature viewer, browser [1], SideBySide, SEDRIS Navigator, model viewer, traverse [2])Data Checking Tools [1] (syntax checker, rules checker, SEE-IT, depth)Testing Tools (Sedris testing utilities, Stg_to_stf)Converters (sedris2ctdb [3], ctdb2sedris, vpf2sedris, s10002sedris, etc)Depending on whether one wants to check classification codes, look at a texture, or examine bathometric data, a different tool is needed. Thus, it becomes very hard to do even simple examination and manipulation of a SEDRIS transmittal, not to mention ensuring that the tools are current with the recent release of SEDRIS.  FOCUS attempts to pull these disparate tool functionalities together into a cohesive whole [4].FOCUS must do more than pull existing pieces together, however.  Most existing tools provide a browsing or viewing functionality, but it is highly desirable to be able to edit data in a transmittal as well.  So, at a minimum, FOCUS will provide the ability to browse, edit, manipulate, and query any piece of data in a transmittal.  FOCUS will be an interactive transmittal editor, allowing the easy creation and manipulation of data within a transmittal.  It will also facilitate transfer of data between transmittals, promoting data reuse.FOCUS will be easily extensible, providing hooks to allow users to add their own tools and utilities.  Also, this capability allows users to handle issues within their own problem space.  For example, a user familiar with atmospheric data would rather deal with viewing or adding value to atmospheric data and not to all SEDRIS data sets.  FOCUS allows such a user to write a plug-in utility which works specifically with the limited data set, but which resides within an application that has broader transmittal manipulation capabilities.Requirements2.1  Initial FunctionalityThe purpose of FOCUS is to facilitate the creation, examination and modification of SEDRIS transmittals.  It must be an interactive editing tool with an intuitive graphical user interface and must also seamlessly integrate third party SEDRIS applications with its basic browsing and editing capabilities.  The applications must be able to communicate changes and messages back to FOCUS.  Finally, it must be platform independent so that the user can take advantage of this functionality on any SEDRIS supported platform.  FOCUS will use the SEDRIS Inter-Application Interface (IAI) API which is currently under development.  The IAI will allow communication between SEDRIS applications working on a transmittal in a shared workspace over the network.  Since the IAI is not scheduled for completion within the development time of FOCUS, the initial FOCUS functionality will concentrate on supporting a single user.  However, the architecture will be able to take full advantage of the IAI when it is functional.Based on the above functionality requirements, it is imperative that FOCUS be able to open and browse a transmittal. For the transmittal that is being browsed FOCUS will detect the SEDRIS API version compatible with the transmittal, and use that information to link to the correct SEDRIS libraries.  As a first functional requirement, FOCUS will display all object information, such as data type, object ID, fields and attributes, and which objects are associations, links, inherited objects, or Inter-Transmittal References (ITRs).  FOCUS will allow easy visual examination of the transmittal, including multiple views, object ID and type searches, and bookmarking of objects. As a second functional requirement, FOCUS will provide editing and visualization widgets for each type of object.  For example, selecting a Geometry, Primitive Geometry, Union of Geometry, or Polygon node would bring up the Geometry Widget, which would display the appropriate 3D model, model section, or polygon with any color and lighting information available.  The user would be able to rotate or otherwise manipulate the model to look at it, as well as edit its data.  The binding between the editing widgets and the object type will be user-modifiable, meaning that the user can specify an alternate widget to use, perhaps one that is independently developed, when editing a specific object type.  The widget interface will be well defined, making it easy to develop custom visualization tools and editors.  The widget interface will also allow integration of third-party editing utilities, such as a commercial 3-dimensional (3D) modeling package.FOCUS will also allow modification of the structure of a transmittal, which is the third functional requirement.  This will include creation and editing of link objects and relationships.  FOCUS will provide basic copy, paste, and delete capabilities for subtrees or single objects in a transmittal.The fourth functional requirement states that FOCUS will provide basic checking capability for transmittals.  The user will be able to specify whether relationships are to be checked automatically as they are edited, or whether the user wants to control the checker execution manually.  The checking mechanism will return a list of errors that the user can easily examine.  Each error will be visually linked to the transmittal object that caused it, making it easy to find and correct the problems.Users also desire that FOCUS integrate stand-alone SEDRIS applications such as depth, syntax checker, See-It, and SideBySide.  These stand-alone applications must adhere to the requirements for passing arguments and feeding back messages and change information that FOCUS can read.  Integrating new applications will be easily accomplished through a graphical user interface.  Selecting an object in the transmittal browser and running the application will bring up an options window with the arguments.  The application will then run on the selected object.  Initially, applications with transmittal editing capability will cause FOCUS to block until the application finishes its processing, at which time FOCUS will update itself with any modifications the application made.  Applications that do not alter the transmittal, such as depth, will not cause FOCUS to block.  They will not, however, perceive any changes made to the transmittal during their execution.  These restrictions will be overcome when the applications eventually interface through the IAI.FOCUS will encompass all parts of SEDRIS, including the Environmental Data Coding Specification (EDCS) and the Spatial Reference Model (SRM).  FOCUS will be able to search and browse the EDCS dictionary, include tutorial information on the EDCS, and incorporate the SRM tutorial that is under development.2.2  Advanced FunctionalityThe previous section outlined the basic functional requirements that have been articulated to the development team.  Once this basic FOCUS functionality is implemented, more complex tools for modifying transmittals can be developed.  They will be designed and implemented as stand-alone applications and integrated into FOCUS in the same manner as other applications. This section describes some tool development that needs to take place.SEDRIS transmittal content can take different organizational schema.  Each producer can encode data in a specific way.  Each consumer will also have preferred organizational schema for consumption.  There is an increasing need for software that can transform SEDRIS transmittal data into a different schema from the original one the producer specified.  Part of the advanced functionality of FOCUS would be a set of Data Reference Model (DRM) tools that will address this issue.FOCUS will provide an integrated widget for specifying a data schema.  The user will then have a suite of applications that will work on the specified schema and the transmittal being browsed ( REF _Ref518295753 \h  \* MERGEFORMAT Figure 1).  The applications will provide functionality such as: Checking the transmittal against the schema for matches or syntactical correctnessExtracting schema matches from the transmittal for inclusion in other transmittalsOutputting code that will implement the schemaComparing two schemas in terms of efficiency, memory usage, etc.Converting schema matches into a different schemaBesides the DRM tools, there will also be applications which create subsets from an existing transmittal.  Figure  SEQ Figure \* ARABIC 1.  Two schemas and a partial conversion functionTransmittals may be “thinned” by pulling out specified features, trimmed to spatial boundaries, and otherwise manipulated to create new transmittals [5].  Hooks for front-end converters will also be provided, allowing the user to import data from a foreign format (eg. raw bathometric or atmospheric data) and add it to a SEDRIS transmittal.Work to DateFOCUS is implemented in Java, both for portability and ease.  Java Swing classes directly supported many of the planned interface paradigms such as buttons, trees, and split windows.  The Java internationalization mechanism is used to simplify localization in the future to support non-English-speaking SEDRIS associates as SEDRIS becomes an international standard.  The Java Native Interface (JNI) is used to make calls to the SEDRIS API routines.  All SEDRIS calls are contained in one class, with each SEDRIS version having its own class that implements a strict interface and is named according to a specific convention.  FOCUS detects what SEDRIS version is needed, either through user preferences or by examining the transmittal being opened.  The Java Reflection mechanism is used to instantiate the correct SEDRIS version class and thus link to that version’s libraries.  Each opened transmittal can have its own instance of the wrapper class, so transmittals using different SEDRIS versions can be opened in FOCUS at the same time.  For a release of SEDRIS in which the API changes, the only new code required for FOCUS is the creation of a simple wrapper class.  No further changes internal to FOCUS are needed.  The wrapper class is added to FOCUS to handle the new version, while previous SEDRIS versions are still available for use ( REF _Ref518295734 \h  \* MERGEFORMAT Figure 2).The transmittal browser is tree based, and the visual tree and fields display is currently built on top of the SEDRIS Java Browser.  Functionality was added to make it easier Figure  SEQ Figure \* ARABIC 2.  Mechanism for isolating and linking SEDRIS versionsFigure  SEQ Figure \* ARABIC 3.  Main FOCUS windowto navigate through the tree structure, including iconic representations of object type, multiple views of one transmittal tree, the ability to bookmark a tree node, and object type and ID searches ( REF _Ref518295791 \h  \* MERGEFORMAT Figure 3).One of the fundamental principles behind the FOCUS design is to minimize re-coding with each SEDRIS release.  As SEDRIS evolves, object fields and enumerations change.  To avoid having to update and recompile FOCUS for each release, functions were created which examine the DRM and return a list of field types for each SEDRIS object.  This allows FOCUS to provide display and edit capabilities for each SEDRIS data type.  When an object is edited, for example, FOCUS requests its field labels and types.  The edit window then builds itself by instantiating the correct widget types for each object field.  If a new data type is added or the fields of a data type change, the information is stored in the DRM, therefore no code changes are necessary. FOCUS provides default editing widgets ( REF _Ref518295993 \h  \* MERGEFORMAT Figure 4) for any data type and also supports custom editing widgets.  Any widget that conforms to the interface specified by FOCUS can be bound to a data type.  Thus, the user can develop a custom editor, bind it to one or more data types in the editor binding window, and FOCUS will instantiate that editor when needed.  Custom editing widgets must be Java classes, but can be a Java wrapper around native software.  They accept as arguments the SEDRIS version to link to and the object’s type and fields.  The widgets may utilize IAI messages to communicate with FOCUS to update data or show processing status.  The SRMTool, discussed in the next section, has been provided as an example of a custom editing widget that can also be used as a stand-alone application. Figure  SEQ Figure \* ARABIC 4.  Default object editor and corresponding configuration file fragmentApplications, too, can be launched through a default mechanism or a custom class.  The default mechanism allows specification of necessary information such as the path to the executable, SEDRIS versions supported, and command-line arguments.  The application is then included in the list of available applications.  Selecting an application to run will invoke a GUI that will build itself according to the specified command-line arguments.  The application is then executed as a separate process, and its output packaged and shipped to a display.  The user may terminate the running process at any time.  This method can be used to run any SEDRIS application from FOCUS, and, if the application accepts object IDs, FOCUS will pass in the object that is currently selected in the browser.Applications that wish to pass error messages back to FOCUS must use a specific error message format consisting of the object ID and a description of the error.  At the most basic level, the errors are written to a file which FOCUS parses.  FOCUS then displays the error messages.  Selecting an error message will cause the corresponding object to be selected in the browser and vice-versa.  At a more advanced level, applications may also use the IAI to communicate changes and information to FOCUS.Finally, FOCUS offers hypertext help on its features as well as on SEDRIS topics.  Application developers can add their own help pages to be accessed from FOCUS.  The hypertext help mechanism includes the ability to create short animations with captions to better illustrate complex concepts such as Spatial Reference Frames from the SEDRIS SRM ( REF _Ref518296167 \h  \* MERGEFORMAT Figure 5).Example Widget ImplementationsA Widget is a Java class that is designed to view, edit, or otherwise manipulate a certain set of data.  A simple example is the ColorWidget.  It is designed to view, edit, and convert RGB data.  A Widget must have a constructor Figure  SEQ Figure \* ARABIC 5.  Hypertext tutorial visualizationthat accepts (1) the data it is to manipulate, (2) a callback function, and (3) a set of system parameters.  It may also have an update function that listens for object change messages and updates its data accordingly.  If it edits the data, it must have a save function that triggers the callback and passes it the new data values.A Widget does not have to know about transmittals, object IDs, or any other SEDRIS data.  In its simplest form it accepts a list of values, manipulates those values, and hands them back.  Thus, a Widget can also be a stand-alone Java application.  The ColorWidget is an example of how this can be accomplished ( REF _Ref518296215 \h  \* MERGEFORMAT Figure 6).  When the ColorWidget is run from the command line, it takes no arguments and starts up with a default color.  When it is run from FOCUS, it is passed red, green, and blue (RGB) values from an object’s fields as its initial settings.  It also registers a FOCUS function as a callback. When the user hits save, the ColorWidget passes the current RGB values to the registered callback and FOCUS saves the new values back to the SEDRIS object.  The ColorWidget is an example of a stand-alone utility that does not rely on any SEDRIS code.  Figure  SEQ Figure \* ARABIC 6.  The ColorWidget can be run from FOCUS or as a standalone applicationA more complex example of a Widget is the SEDRIS Spatial Reference Model Tool (SRMTool) ( REF _Ref518296230 \h  \* MERGEFORMAT Figure 7).  The SRMTool is a graphical interface to the SEDRIS SRM Conversions library. One of the system parameters accepted by the constructor is the SEDRIS version, so it knows which version of the Conversions library to use.  Part of the data it passes back to the callback function is the coordinate’s Spatial Reference Frame.  If the user has converted the original coordinate to a new Spatial Reference Frame, FOCUS will delete the old Location object and create a new one of the correct type.Figure  SEQ Figure \* ARABIC 7.  The SEDRIS Spatial Reference Model Tool (SRMTool)SummarySEDRIS FOCUS is a technology to pull together the many different SEDRIS-based tools into a cohesive, useable system.  It will facilitate viewing and editing transmittals, and will allow users to create custom viewing and editing widgets and plug them into the FOCUS environment.  It will work with multiple versions of SEDRIS, and will run on SEDRIS-supported platforms.  It will provide a mechanism for applications to generate messages and error reports, and will display those reports in an integrated fashion.  Finally, it will provide extensible hypertext help and animated tutorials for SEDRIS-related topics such as the EDCS and the SRM.AcknowledgementThe authors would like to thank the Defense Modeling and Simulation Office and the U.S. Army Simulation Training and Instrumentation Command for funding this effort under contract N61339-99-C-0031.  We also express our appreciation to Mr. Farid Mamaghani for his technical guidance and Mr. Tuan Nguyen for his oversight on this effort.References[1]	 B. Horan, Dr. R. Cox: “SEDRIS Past, Present, and Future – Technically Speaking”. Simulation Interoperability Workshop, April 1999.[2]	 Campos, J., Carswell, J.: “SEDRIS Write API, Reference API Implementation Framework, and SEDRIS Transmittal Format”. Simulation Interoperability Workshop, April 2000.[3]	 Skowronski, V., Stanzione, T.: “Converting SEDRIS Data to the CTDB Format”. Simulation Interoperability Workshop, September 2000.[4]	 Campos, J., Watkins, J.: “Consuming SEDRIS Transmittals – A Pragmatic Approach”. Simulation Interoperability Workshop, September 2001.[5]	Pigora, M., Graniela, B., Reece, D.: “Urban Human Simulation Environments in CTDB”. Simulation Interoperability Workshop, April 2001.Author BiographiesMARY ANN PIGORA is a software engineer at SAIC where her work includes creating CGF and visual databases for human simulation.  She has ten years of experience in 3D graphics and animation including work on a virtual reality based modeling system (PolyShop) at the Institute for Simulation and Training, and as a Technical Director at Walt Disney Feature Animation where she worked on the movies Mulan and Fantasia 2000.  She received her MS in Computer Science from the Georgia Institute of Technology.DAVID SHEN has worked in the field of Modeling and Simulation for the past 10 years.  He participated in several R&D projects employing DIS and HLA.  He contributed to the design and implementation of the Semi-Automated Forces systems for the Close Combat Tactical Trainer program.  Mr. Shen has a B.S. degree in Statistics from the Universidade de Sao Paulo and a M.S degree in Computer Engineering from the University of Central Florida.  Mr. Shen is currently working as the deputy program manager for the SEDRIS project at SAIC.JESSE CAMPOS is a software engineer with SAIC.  He has been working the SEDRIS project for almost four years.  His primary expertise is in software development as it applies to databases.  Mr. Campos graduated from the University of Central Florida with a B.S. in Electrical Engineering.  