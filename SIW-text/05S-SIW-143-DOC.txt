Bridging Simulation and C2 Systems Through an M&S SOAKang Looi Choo, Daryl Chin Siong LeeDefence Science & Technology AgencySingaporelchinsio@dsta.gov.sg, ckangloo@dsta.gov.sgKeywordsSim-CCIS integration, Message Gateway, Service Orchestration, Injects Engine, BPEL ABSTRACT:  As C2 and simulation applications evolve faster and become more complex to handle today’s changing environment, the need to implement reusable solutions for bridging them rises in tandem. One such solution is the adoption of a service-oriented architecture. This paper seeks to provide preliminary findings on how to leverage on the various heterogeneous Service-Oriented Architecture (SOA) technologies to provide M&S services to C2 systems. It describes the exploratory development of a Simulation to Command & Control Information Systems (Sim-CCIS) message gateway to provide configurable bi-directional data communications and the introduction of Service Orchestration concepts through the design of a generic injects engine.1. IntroductionWith an ever changing battlefield and the increasingly complex nature of asymmetric warfare, there is an impetus for Simulation and C2 systems to move away from traditional stove-piped applications to more flexible and adaptable solutions. Service Oriented Architecture  (SOA) offers one approach to address the dynamic needs of the future, and at the same time shortens the turn-around time to put together systems.As developers and system integrators, we no longer have the luxury of having 10-20 engineers working on 3-5-year projects that have formalized specifications. Nowadays,  projects have typical life-spans of 12-15 months, with spiral and iterative development as the norm.  There is a strong push towards open standards, as this facilitates system inter-operability. The use of established and open standards with strong first and third-party support enhances reliability and extensibility. These are our same motivations for exploring SOA technologies to provide M&S services to C2 systems.While the Command & Control Information Systems (CCIS) community is working towards SOA, we are exploring the best way to bridge the Sim-CCIS gap using SOA.  Both the Sim and CCIS SOA efforts will eventually merge to form an enterprise-wide SOA. [11] Figure 1: M&S SOA relationship to other SOAsThere are three main components in our M&S SOA -  messaging means, simulation services through message gateways and service orchestration.  This paper first highlights the means of message exchange and goes on to describe the design and implementation of the Sim-CCIS Message Gateway to show how we expose simulation services to C2 systems.  It then discusses the employment of service orchestration technology through a generic component known as the  Injects Engine. The latter introduces more advanced M&S SOA technologies and their roles in bridging Sim-CCIS systems.2. An OverviewM&S SOA covers how data, workflows and services come together to allow inter-operability between Sim and C2 systems (related efforts summarized in [10]).  A common standardized data format and representation is important and ideally it should also adhere to open or proven standards, as discussed in [12].  Once the systems are in agreement semantically (itself is not an easy task), the next task is to work out the message exchange mechanism, i.e., how each piece of data flows between systems.Often SOA is seen to be synonymous with web services.  However SOA goes beyond simple request-response web services. The web service approach is just one means of accomplishing SOA. As our understanding of services and their applications improve, traditional request-response type services may not suit our systems’ needs.  Thus it is necessary to look into new standards that can provide ways to string web services together to form more aggregated and sophisticated services. One such standard is the Business Process Execution Language (BPEL).We recognize that there can never be an encompassing architecture or standard to suit all Sim and C2 needs. The key is interoperability. While we can define new message schemas through experimentation, there is always a need to provide a two-way mapping to and from existing standards.  The Sim-CCIS message gateway described later in this paper is one such effort.As the concept of services becomes better articulated and understood by both developers and users, the next step is to find a way to map SOA technologies to our systems' processes. At the moment, many C2 processes are tightly coupled, if not hard-coded, into the business logic layer. This is neither flexible nor scalable. Imagine orchestrating a sensor-shooter mission to search and destroy a target through cross-cueing of sensors and performing dynamic shooter assignment [2]. With the current approach, major re-work is required whenever  there is a change in the sensor to shooter matching algorithm. A better way would have been to plug in a new sensor-shooter matching service.Instead of adopting a “big-bang” approach to introducing service orchestration concepts and technologies, we chose to try using a generic M&S-related component, the Injects Engine.  Through this component, we hope to highlight the benefits of service orchestration to our users and developers alike. 3. Means for Data and Message Exchange Most simulation systems are HLA-based, but the more common protocols supported by C2 systems are Email, Java Messaging Service (JMS) [3], Hypertext Transmission Protocol (HTTP) and File Transfer Protocol (FTP). Few C2 systems support  HLA.  The need to support common messaging mechanisms plays an important part in Sim-CCIS integration.Our approach is to adopt commercially available and open-standards based protocols that best suit us, the key ones being JMS and HTTP.  Often, C2 systems require a continuous stream of data e.g., track data, and the polling mechanism of web services is not suitable for this. The technical consideration for JMS is its flexibility. It can handle data both synchronously and asynchronously, as well as do both publish-subscribe (topics) and point-to-point (queues) communications. HTTP is also an important protocol because it is the ubiquitous message exchange mechanism for most of our web-based C2 systems. Figure 2: Sim-CCIS Gateway supporting HTTP and JMS protocolsIt may seem that our approach is similar to what an Enterprise Service Bus (ESB) promises i.e. data transformation, content-based routing, and a “publish and subscribe” approach to communication between applications. But the difference is that we get to pick the best technologies and not be caught in any vendor-specific solution.There is also an ongoing effort to look into the possibility of exposing HLA-specific functionalities as web services and an HLA-SOA service directory to facilitate integration between different HLA-based simulation engines.4. Sim-CCIS Message GatewayMessage mappers are often introduced to bridge Sim-CCIS systems, doing two-way translations between legacy message formats and newer more encompassing ones.  The impetus of a message gateway is to provide a consistent and scalable service interface to our C2 systems, with ease of configuration a key consideration in the message gateway design. Our message gateway has been successfully used to provide simulated services to our C2 systems.Figure 3: Sim-CCIS Message Gateway bridging simulation and C2 systemsWhile the experimental C2 system relied on JMS, the operational C2 system used the HTPP Get/Post mechanism for message exchange.  Both systems did not talk HLA, which was the protocol used by the simulation.  Instead of getting the C2 developers to implement a one-off HLA module, a Sim-CCIS message gateway was introduced.  The message gateway sat on both the simulation and C2 networks.On the simulation end, the gateway ran as a plug-in component that read directly from the simulation runtime database. After translating, converting and formatting the data, it published the results out onto the C2 network.For the experimental C2 system, we used JMS primarily as a push mechanism, publishing periodic updates onto the JMS destinations. The gateway made use of a mapper tool that reads in a series of XML configuration files and facilitates reuse. The master configuration file describes which messages to send to which JMS destinations while the remaining XSL-like mapper files tell the gateway how to map specific simulation events or other updates to C2 message formats.The message mapper and simulation read directly from the same model interface file - an XML-based definition of every shared object used in the simulation, similar to Base Object Models (BOM). As a result, it is possible to expose virtually any data in the simulation simply by modifying the mapper file to refer to the desired data and stating any required conversions.For example, a mapper snippet such as this<xsl:for-each select=”ENTITY/Platform”>  <PlatformReport>     <ID>        <xsl:value-of select = “@EntityID”/>     </ID>     <CoordX>        <xsl:value-of select = “@Position.x”/>     </CoordX>     <CoordY>        <xsl:value-of select = “@Position.y”/>     </CoordY>  </PlatformReport></xsl:for-each>would produce output like the below,<PlatformReport>  <ID>2309</ID>  <CoordX>35</CoordX>  <CoordY>58</CoordY></PlatformReport><PlatformReport>  <ID>2310</ID>  <CoordX>5</CoordX>  <CoordY>-20</CoordY></PlatformReport>.....<PlatformReport>  <ID>2350</ID>  <CoordX>100</CoordX>  <CoordY>56</CoordY></PlatformReport>It is important to note that simulation does not introduce new message formats of its own.  It follows what is used in C2 systems. This facilitates the transition of experimental C2 to operational use and increases the legitimacy of all experiments involved.   If no message formats are available, simulation and C2 developers come together to work out a common one.The message gateway that we have implemented provides air, land and sea tracks (for both ground truth and sensor perceived pictures). The gateway is also responsible for obtaining mission plans e.g. UAV routes, from C2 systems and assigning it to the respective simulation entities.   C2 mission plans come in XML-based formats or the original graphical overlays. During deployments, various issues surfaced necessitating upgrades to the gateway. To reduce bandwidth usage, the ability to send out binary encoded data was added. In some cases, it was also necessary to ensure that data was only sent when there were changes. Since we had adopted a push mechanism with minimal handshaking, in cases where missing data was unacceptable, periodic data dumps were also made over long intervals.Other requests from C2 systems include coordinate conversions, complex data structures and entirely new simulation services.The Message Gateway approach provided a seamless way for simulation services to be made available to C2 systems without the need for C2 systems to support the HLA protocol.  It was our first step towards an M&S SOA.  In the next section, we look into the components that make up the Injects Engine.5. Service Orchestration through the Injects EngineIn any system, the most important component is the human operator. Thus we strive to provide tools to enable our operators to make better and more informed decisions in the shortest available times. One possible approach is to adopt the services paradigm for integration of processes. While service orchestration has potential, we are mindful of the impact of new technologies on user processes. Thus we decided to showcase the advantages of service orchestration through a generic Injects Engine component, i.e., to depict how the flow of injects can be affected by responses and ad hoc inputs by users. The nodes at which the inject flow can be interrupted are really services themselves. These nodes can accept simple man-in-the-loop input or go through complex decision-making algorithms.Figure 4: Inject flowTraditional inject-engines are often scripted and restrictive.  For example, an airbase operations injects simulator might consist of a simple scripted text file. Injects (fence intrusions, air raids, etc.) are scripted in a file and loaded by the Scenario Player at startup. The Scenario Player is primitive because it focuses merely on standalone injects. In reality, there could be both actions and reactions e.g., after a ground intrusion, BLUE force may deploy a counter force. RED may then follow up with sabotages within the airbase, which BLUE force then counters, nullifying RED.  Together, these form a string of interconnecting injects to be pieced into a scenario.  Traditional engines are unable to keep up with the fast-paced, complex and unpredictable operating environments that we have today.Through this effort, we hope to design and develop an injects-engine that can generate events  mimicking human decision-makers, aircraft tracks, standard detection equipment, environmental conditions and possibly other C2 systems.  Our aim is to enable users to explore and discover new ideas and concepts, proactively delivering “Actionable Information” based on the users’ specified criteria & access/authorization level.Our work will provide a framework to allow simple and complex “inject-response” workflows to be defined.  We shall look into the possibility of using BPEL. BPEL is an XML language for defining the composition of (web) services into new (web) services.  It relies on Web Services Definition Language (WSDL) for port types, messages/parts, and as a container for additional metadata, but BPEL itself is independent of protocol.  A BPEL process can either be implemented as a web service, servlet, Java bean or Java Server Page (JSP) [1].Once injects are placed into a workflow, the Inject Monitoring facility kicks in.  The user is provided with a visual representation of the event workflow.  As injects are fired-off or feedback flows in, these are indicated accordingly in the visual display.  In addition, the user can put in alerts or triggers, e.g., if this event is not fired off within a certain period, highlight it.  Response to an inject often depends on the history of a situation and not merely on the current state. Other factors include time, the parties involved, the event geography, the surrounding environment including weather and possibly even political factors.  Event logging, archival and playback allow for After Action Review (AAR) activities.  From the logged data, it is possible to do chain-of-error analysis and also to highlight capability gaps and system “choke-points”.  The next few paragraphs describe the building blocks of the Injects Engine.Figure 5: Building blocks of the injects EngineThe Inject Manager and Editor is the main visualization and inject manipulation user interface. It is implemented using an open source Treebolic library. The Editor automatically generates the relevant user interface based on a message’s XML Schema.  There is a need to look into how to elegantly handle nested XML elements.Inject Workflow Manager handles the chaining of injects, their event-triggered firing and their interaction with external parties/services.  It shall also contain a graphical interface to allow users to define new workflows, manipulate existing ones and track initiated processes and incoming responses.There are two workflow modules. The first is responsible for the flow of injects, including triggering conditions, and while the other is for the human operator.  The latter is similar to document management workflow modules, whereby the operator will tag responses to injects and has the option to reject responses.The Injects Scheduler is responsible for the time-based firing of injects. It is implemented using OpenSymphony Quartz [5]. Quartz is an open source job-scheduling tool that supports simple and complex jobs.An inject ontology shall handle military, commercial, strategic and tactical events. Currently, a simple inject and response message structure shall be adopted. The message structure shall consist of Who, What, Where, When, Why and Priority attributes. Injects shall also contain Category and Sub-category information.   Triggering conditions, e.g., time, are included for each inject.  For each inject, there is a corresponding response attribute. This attribute is meant to store the expected responses to that inject.  A response confidence threshold value is also given.More often than not, during C2 application development, project teams develop their own inject generator to test their systems.   Thus the Injects Engine can reside as a simple standalone injects generator to pump injects to a C2 or simulation system, or coordinate with a simulation system to pump both simulated and manual injects to a C2 system, see below for pictorial representation.Figure 6: Different configurations for using the Injects Engine with Simulation and C2 systemsMost of the modules were developed in Java using open standards and open source tools and libraries.7. The Way AheadAs we look at ways to extend the capabilities of the Message Gateway and Injects Engine, there are some standards that we follow closely - Web Services Choreography is one.  The Web Services Choreography specification is aimed at the composition of interoperable collaborations between any type of party regardless of the supporting platform or programming model used by the implementation of the hosting environment.To extend the use of the Injects Engine to cater for our Homeland Defence, we may take a look at Common Alerting Protocol (CAP) based injects.  CAP is an open, non-proprietary standard data interchange format used to handle emergency alerts and public warnings over data networks, computer-controlled public warning systems, emergency management and warning dissemination systems.  In April 2004, CAP version 1.0 was adopted as a full OASIS standard [6].  In addition, a simulated weather service may utilize the National Digital Forecast Database (NDFD) XML service, defined in a Service Description Document, which provides National Weather Service (NWS) customers and partners the ability to request NDFD data over the internet and receive the information back in an XML format [7].  On top of JMS, the use of an instant messaging protocol such as Instant Messaging using Extensible Messaging and Presence Protocol (XMPP) [8] may be added.  XMPP is a general-purpose protocol not necessarily limited to instant messaging and presence. XMPP is a TCP-based protocol that uses Extensible Markup Language (XML) as the syntax for its protocol elements. XMPP can be used as a client-to-server protocol as well as a server-to-server protocol.As we recognize the need for collaboration of Sim and C2 systems between countries, we may look into more established event ontologies such as Command & Control Information Exchange Data Model (C2IEDM) [13] and Extensible Battlespace Markup Language (XBML).  At the same time, we recognize that there are synergies in the Extensible Modeling and Simulation Framework (XMSF) [9] and our M&S SOA approach. One possible collaboration effort is to be able to invoke services in XMSF and vice versa.As injects can be both simulated and manual, there will be a need to map a simulation scenario to an inject workflow.  At the same time, it can be used to facilitate model development by “simulating” the interfaces of models.This paper covers our initial efforts on the use of BPEL for service orchestration.  As we progress, a separate paper detailing our experiences and lessons may be put up.As indicated, a user may be overwhelmed by too many services (web or otherwise).  This can be resolved or alleviated through the use of agent technologies to assist in the discovery and utilization of relevant services.Having an M&S SOA will extend the reach of simulation beyond backroom, offline training to the support of day-to-day operations.  Picture this: A commander is looking at the current situation picture and trying to determine the next course of action from three possible plans.  He submits the plans to a scenario-based Course-Of-Action evaluation service.  Besides the plans, this service also takes in the current operating picture and invokes a simulation engine that executes at faster than real time to provide an extrapolation or “crystal ball-like” view of the battlefield in the next 3-6 hours.  Information includes troops readiness status, contact rates and most importantly, opponent courses of action. Taking this a step further, the service may even recommend a course of action, returning a slightly changed plan to the user.8. ConclusionThis paper has presented our experience in making use of SOA to bridge Sim and C2 systems.  These are small steps towards the vision of a Modeling and Simulation (M&S) Service-Oriented Architecture (SOA) to facilitate Sim-C2 integration. As a service-tier composition language, BPEL is a key ingredient in a service-oriented architecture.  The experience and lessons learnt from the M&S SOA can be ploughed back to the development of CCIS SOA.  It is such cross-pollination of ideas and concepts that will enable us to move ahead.The bottom-line is that we should harness useful technologies to build systems and refine concepts and procedures to enable our soldiers on the ground to have an edge over their adversaries. 9. References[1] OASIS Web Services Business Process Execution Language (WSBPEL).   HYPERLINK "http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wsbpel" http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wsbpel[2] William G. Chapman, Major, USAF, Organizational Concepts for the Sensor-to-Shooter World, 1997.[3] Sun Java Message Service.  HYPERLINK "http://java.sun.com/products/jms/" http://java.sun.com/products/jms/[4] Steven W. Reichenthal: “The Simulation Reference Markup Language (SRML): A Foundation for Representing BOMs and Supporting Reuse”, 02F-SIW-038, Fall Simulation Interoperability Workshop, Orlando, Florida, September 2002.[5] OpenSymphony Quartz – open source Job SchedulingSystem.  HYPERLINK http://www.opensymphony.com/quartz/ http://www.opensymphony.com/quartz/[6] OASIS Common Alerting Protocol (CAP)  HYPERLINK "http://www.incident.com/cap/interop/index.html" http://www.incident.com/cap/interop/index.html[7] Digital Weather Markup Language (DWML)  HYPERLINK http://www.nws.noaa.gov/ndfd/ http://www.nws.noaa.gov/ndfd/[8] Extensible Messaging and Presence Protocol (XMPP).  HYPERLINK "http://xml.coverpages.org/xmpp.html" http://xml.coverpages.org/xmpp.html[9] Extensible Modeling and Simulation Framework.  HYPERLINK http://www.movesinstitute.org/xmsf/xmsf.html www.movesinstitute.org/xmsf/xmsf.html[10] Andreas Tolk: “A Common Framework for Military M&S and C4I Systems” 03S-SIW-031, Spring Simulation Interoperability Workshop, Orlando, Florida, April 2003[11] John J. Daly, Andreas Tolk: “Modeling and Simulation Integration with Network-Centric Command and Control Architectures” 03F-SIW-121, Fall Simulation Interoperability Workshop, Orlando, Florida, September 2003[12] Andreas Tolk: “Composable Mission Spaces and M&S Repositories – Applicability of Open Standards” 04S-SIW-009, Spring Simulation Interoperability Workshop, Washington, D.C, April 2004[13] Andreas Tolk: “Operational Modeling &Simulation Services in Military Service-Oriented Architectures”, 6th Annual ONR Conference, Quantico, VA, September 2004Author BiographiesKang Looi Choo is a Development Engineer with the Simulations and Wargaming Division of the Defence Science & Technology Agency. He is currently involved in the M&S SOA design and development to facilitate Simulation and CCIS integration He received his BSc in Computer Engineering from Brown University.Daryl Chin Siong Lee is a Project Manager with the Simulations and Wargaming Solutions Centre of the Defence Science & Technology Agency, and was previously with Intelligence Solutions Centre. He is currently working on Modelling and Simulation Service Oriented Architecture for Simulation and C2 integration. He holds a BSc in Computer Engineering from Nanyang Technological University, Singapore and a MSc in Computer Science from Naval Postgraduate School. Steven Reichenthal [4] presented a promising approach using XML to describe configurable behaviour for BOMs during the Fall 2002 SIW.