A network proxy for the JC3IEDM: issues solved and lessons learnedJames Muguira and Brian StephensSystematic10680 Main St, Suite 170Fairfax, Va. 22030HYPERLINK "mailto:jam@sseusa.com"jam@sseusa.com, HYPERLINK "mailto:bjs@sseusa.com"bjs@sseusa.comKeywords: JC3IEDM, MIP, Proxy serverAbstract: This paper will describe the issues involved in creating a MIP common interface (MCI) compliant proxy for the connection of two JC3IEDM Data Exchange Model (DEM) based systems.  The proxy allows for network separation of the communicating DEM’s thus enhancing security, encryption of the information flowing between the DEM’s employing standard point-to-point encryption and proper translation of MIP formatted Protocol Data Units (PDU’s) into XML for further analysis.  The mechanics of the DEM interface will be discussed as well as uses for the proxy in an operational setting.  Finally, a comparison of the filtering capabilities of the proxy will be made with Squid-cache, an open source http proxy.IntroductionThe Multilateral Interoperability Programme defines an information sharing data model and detailed specifications for the exchange of information between systems that implement this data model and its protocols.  Though the data model describes a communications and exchange mechanism there are a number of weaknesses and limitations inherit.  The paper will describe the issues and design decisions for a proxy server which will mitigate these issues.MIP overview The Multilateral Interoperability Programme [1] (MIP) is an international consortium of 26 nations that have defined a common information exchange model for keeping national Command and Control (C2) systems in synchronization.  This continuously evolving data model, which is over 20 years old, defines the minimum amount of information that any 2 national C2 systems are required to exchange.  The model is defined as a hub architecture where all C2 systems joined to a MIP configured network share information about an operations space.  The data model facilitates grouping of information into Operational Information Groups (OIG), though this grouping can be too course for some applications.The MIP vision is to facilitate operational information exchange and interoperability between national C2 systems, but this model can and is applied within a national system to enable interoperability and information sharing.  The following diagram illustrates the core idea of the MIP data modelFigure  SEQ Figure \* ARABIC 1 - Concept behind MIP data modeland demonstrates the representational power of the data model as it applies to all aspects of the modern operational environment.  The representational power of the data model flows from its meta-model foundation which coversObjects of interest and their inherent propertiesPast, present, or future situation as represented by facts about the objectsPast, present, or future activities that involve the objectsMechanisms for grouping data into information packages.The data model defines 19 independent entities that form the corpus of its representational space and is based on a type and instance relationship whereby operational types are first configured in the model and then specific instances are defined.  The most basic entity, the object, can describe inherited or computed properties or situational awareness information such as status information or finally activity such as plans, orders and events for organizations or individual entities.The MIP data model defines a set of interoperability objectives that includeInformation ManagementExchange of Structured InformationExchange of Unstructured InformationConstraintsSecurityCommunications network capabilityTactical Effectiveness of Headquarters UnitThe MIP data model is a continuously evolving international standard with a 2.5 year cycle.  The current standard (as of July 2008) is the Command and Control Information Exchange Data Model (C2IEDM) version 6.15e.  The next version of the standard, to be released in early 2009 will be the Joint Command, Control and Consultation Information Exchange Data Model (JC3IEDM).  The JC3 data model expands the C2IEDM by adding support for joint operations, specifically adding:Plans and orders (following the STANG 2014 edition 9 standard)The JC3IEDM defines 19 independent entities (vs. C2IEDM’s 15)A more rich capability modelA more rich holdings modelNew Action SubtypesThe MIP data model imposes very light requirements upon the communications infrastructure of a supporting national C2 system, but there are constraints placed on the network topology that will be expanded upon next.The MIP Data Exchange MechanismJC3IEDM information is useless unless it can be communicated to others.  The MIP Data Exchange Mechanism or DEM [2] provides a standardized method for the point-to-point replication of JC3IEDM data.  The DEM protocol sits on top of the well-know TCP protocol and defines several layers such as the Transport Manager Layer, the Data Manager Layer, and the Application Layer.  An auto-discovery mechanism allows MIP DEM nodes to automatically find other nodes on the network.  Information passes from DEM node to DEM in packets called Protocol Data Units or PDUs.  To begin to understand the DEM, the understanding of its layers, auto-discovery mechanism, and PDU structure are essential.First, the DEM protocol layers require discussion.  The Transport Manager Layer handles opening a session that the Data Manager Layer can use.  Information such as heart-beat messages, protocol error conditions and finally operational data flow through the Transport Manager layer.  The Data Manager Layer handles the exchange of operational data and error conditions related to that data.  The Application Layer interfaces directly with the user allowing the user to establish a publication and subscription information sharing scheme to operational data.  Operational data is stored in containers called Operational Information Groups or OIGs, and the user sets up publications and subscriptions based on these OIGs.Second, an understanding of the DEM’s auto-discovery mechanism is needed.  When a DEM comes up on a network, it is required to UDP broadcast its DEM Connection Information or DCI across the network.  The DCI XML schema, provided in the MIP DEM specification, gives a common format for DEM connection information.  When DEM nodes receive a broadcasted DCI, each DEM is required to unicast its own DCI back to the sender.  It is by this method that DEM nodes discover one another on the same network as broadcast packets generally are not forwarded by routers.Lastly, let’s discuss PDU structure.  The DEM specification defines an explicit grammar that encompasses three main types of PDUs:  Transport Manager, Data Manager, and Offline.  Transport Manager PDUs reside in the Transport Manager Layer of the DEM.  Data Manager PDUs handle the bulk of the information exchanged via the DEM and obviously reside within the Data Manager Layer of the DEM.  Further, since the content of Data Manager PDUs can be quite large, the operational portion of these PDUs is compressed using the deflate algorithm [3].  Offline PDUs allow the user to import large amounts of operational data without the need of transferring that data over the network.  Offline PDUs can be thought of as a simplified version of Data Manager PDUs.MIP Proxy GoalsThe design of a proxy for the MIP DEM serves several goals: the proxy will allow for physical network separation; binary PDU to XML conversion; and finally facilitates encryption of the exchanged information.  The MIP DEM specification defines a rigid physical network topology that is designed to enable a very simple automated discovery and configuration of a MIP network.  Any node in a JC3IEDM MIP network utilizes Internet Protocol (IP) User Datagram Protocol (UDP) broadcasts of initial configuration information to facilitate establishment of connectivity between nodes.  While this simple discovery and configuration mechanism is an improvement over the previous mechanism found in the C2IEDM specification, the requirement of nodes to be on the same physical network is less secure.  With the DEM proxy in place, the MIP DEM software can be isolated on a separate physical network from the actual physical network employed to handle the transmission of information.  While this setup still allows the intruder to sniff the information exchanged, the proxy, acting as a bridge between the two networks, makes intrusion into the network handling the DEM very unlikely.The traffic exchanged between any two nodes in a MIP network is encoded as a straight forward binary packet of information with a length and a compressed payload flowing on the wire.  The data inside the payload consists of information that mirrors the deltas of the tables in the physical data model (i.e. transmit only what changed).  While provision is made to handle the bit and byte order of the low level data the format does not lead to a very malleable encoding.  The DEM proxy resolves this issue by establishing a series of transformations from PDU encoding to XML encoding, where the XML is specified by the JC3IEDM physical model table, property names, and PDU structure. The transformation from PDU to XML format allows the DEM Proxy to take advantage of a number of existing tools for data validation.  The most notable of these tools are existing XML guards, which filter data based on the content of XML.It is essential that the transformation from PDU to XML format and back again run quickly as excessive latency will cause problems with communicating DEMs.  To minimize the latency associated with the transformation, Lexical Analyzer Generator (LEX) [4] and Yet Another Compiler Compiler (YACC) [5] were used.  LEX and YACC handle any kind of structured data unlike Extensible Stylesheet Language Transformations (XLST) [6].  Further, LEX and YACC are fast simply due to the fact that they are compiler tools.Everything discussed to this point has been about enabling network separation in MIP.  According to the MIP standard, all information is exchanged across the network unencrypted.  This means that a third party on the network can easily see all the information passed between two nodes.  To solve this problem we look to the point-to-point encryption that the MIP DEM proxy provides.The MIP DEM proxy provides a facility for safely authenticating and encrypting point-to-point MIP DEM connections over a TCP network without the need of a hardware Virtual Private Network (VPN). SSH, which supports AES[7], the encryption algorithm for FIPS [8], provides the facility for encapsulating MIP DEM PDUs within encrypted TCP packets. The MIP DEM proxy provides machine-to-machine encryption rather than just VPN-to-VPN encryption and boasts a lightweight software-based security solution.The MIP DEM proxy aims to demonstrate four main benefits of its use: MIP DEM compliance, FIPS compliance, authenticated and encrypted MIP DEM sessions, and MIP DEM nodes behind Network Address Translation (NAT) firewalls. Since the content of the PDUs sent through the MIP DEM proxy are not altered but simply encrypted and then decrypted, the information maintains MIP DEM compliance.  SSH [9] utilizes AES, which is an encryption standard endorsed by FIPS.  SSH provides various options for authentication including passwords and public keys. Authentication information and all data are transmitted over the network as encrypted packets. Since all MIP DEM traffic is forced through SSH, all MIP DEM PDUs, transport and data, are encrypted.  The MIP DEM specification, as it currently stands provides no good way for a MIP DEM node to reside behind a NAT firewall. Conventional NAT firewalls are not able to “translate” the DCI that contains node address information, because these NAT firewalls are not aware of the DEM protocol but are simply aware of TCP and perhaps some higher-level application-layer protocols. Such a situation causes MIP DEM sessions to be dropped after an initial connection, because the remote node will not be able to find a route to the local node address behind the NAT firewall.  To obviate this issue, the MIP DEM proxy encapsulates MIP DEM traffic within SSH packets which translates and forwards the DCI. NAT firewalls handle the routing of SSH packets without issue, thus allowing MIP DEM nodes to reside behind NAT firewalls.The MIP DEM proxy takes advantage of an SSH feature called port forwarding. To use this feature, localhost listeners are established on each MIP DEM node, each listener using a distinct port. SSH Port forwarding is established at each MIP DEM node to allow bi-directional encryption of the DEM protocol. The diagram below illustrates how this is done. EMBED Visio.Drawing.11 Figure  SEQ Figure \* ARABIC 2 - Secure transmission detailThe DCI for each node will reflect the localhost listeners established at each MIP DEM node. For example, the DCI that describes node 1 might look like this. The critical piece of information to note is the ReplicationNodeIPAddress and ReplicationNodePort marked in red.<?xml version="1.0" encoding="UTF-8"?><DCI xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  <DciScope>REPLY</DciScope>  <DciBody>    <NodeID>340007002</NodeID>    <ReplicationNodeIPAddress>192.168.0.4    </ReplicationNodeIPAddress>    <ReplicationNodePort>5555</ReplicationNodePort>    <ResponsibleOrgName>CFLCC</ResponsibleOrgName>    <RoleName>Node: 340007002</RoleName>    <MipReleaseVersion>3.0</MipReleaseVersion></DciBody></DCI>The DCI for node 2 would, of course, have a different node ID, name, and data owner ID. The difference to note that breaks with convention is once again the ReplicationNodeIPAddress and ReplicationNodePort marked in red.<?xml version="1.0" encoding="UTF-8"?><DCI xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  <DciScope>REPLY</DciScope>  <DciBody>    <NodeID>340000100</NodeID>    <ReplicationNodeIPAddress>127.0.0.1    </ReplicationNodeIPAddress>    <ReplicationNodePort>5554</ReplicationNodePort>    <ResponsibleOrgName>CJTF</ResponsibleOrgName>    <RoleName>Node: 340000100</RoleName>    <MipReleaseVersion>3.0</MipReleaseVersion></DciBody></DCI>The use of a network analyzer shows that all packets sent from node 1 to node 2 are indeed encrypted.The MIP DEM proxy shows that MIP DEM information can be replicated securely without the need of modifying the DEM or without expensive VPN hardware.Proxy ComparisonProxy software on the Internet serves many functions from providing anonymous web browsing to content filtering to providing tunneling functionality.  While our DEM proxy is not as general as commercial offerings such as SafeSquid [10] it is still useful to compare.  The DEM proxy functionality was designed to solve 3 issues found in the MIP DEM specification: network separation, PDU to XML conversion and encryption of traffic.  SafeSquid is a commercial content filter and web caching proxy designed for enterprise settings.  SafeSquid provides for content filtering by allowing chains of filters to be run against the incoming data.  These filters can consist of other commercial offerings and custom defined filters.  The DEM proxy enables filtering of PDU data by transforming the incoming PDU data into XML which can then be sent to filters for review.  SafeSqiud provides a request forwarding feature that functions much like the DEM proxy’s network separation feature which allows a more complex network topology than the MIP specification since the traffic handling network and the network that the DEM is running on are physically different.  The DEM proxy’s encryption feature could be compared to SafeSquid’s content filtering features.  Over all, the DEM proxy utilizes some similar functionality of traditional proxy servers to create a secure and flexible transport mechanism for MIP traffic over existing communications infrastructure.ConclusionThis paper has described the design and capabilities of a proxy server for MIP traffic.  The MIP specification extends some constraints on the physical topology of the MIP network that create a less secure communications system which the DEM proxy neatly resolves.  The combination of conversion, filtering and encryption can provide a very powerful and flexible communications infrastructure without the need to purchase expensive to maintain and configure virtual private networking appliances to the infrastructure.  The conversion of binary PDU to ASCII text based XML provides a flexible means to enable additional capability to any MIP network without the added development burden of implementing the MIP DEM protocol and all of its intricate signaling requirements.References[1]	Multilateral Interoperability Programme web site: HYPERLINK "http://www.mip-site.org"http://www.mip-site.org[2]	MIP DEM specification: HYPERLINK "http://mip-site.org/publicsite/04-Baseline_3.0/MTIDP-MIP_Technical_Interface_Design_Plan/MTIDP-AnnexA-MIP_DEM_Specification-DNK-SEAWG-3.5.pdf"http://mip-site.org/publicsite/04-Baseline_3.0/MTIDP-MIP_Technical_Interface_Design_Plan/MTIDP-AnnexA-MIP_DEM_Specification-DNK-SEAWG-3.5.pdf[3]	The deflate specification: HYPERLINK "http://www.ietf.org/rfc/rfc1950.txt"http://www.ietf.org/rfc/rfc1950.txt[4]	LEX specification: HYPERLINK "http://dinosaur.compilertools.net/lex/"http://dinosaur.compilertools.net/lex/[5]	YACC specification: HYPERLINK "http://dinosaur.compilertools.net/" \l "yacc"http://dinosaur.compilertools.net/#yacc[6]	XSLT specification: (HYPERLINK "http://www.w3.org/TR/xslt"http://www.w3.org/TR/xslt).[7]	Federal Information Processing Standards specification of AES HYPERLINK "http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf"http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf[8]	Federal Information Processing Standards web site: HYPERLINK "http://www.itl.nist.gov/fipspubs/"http://www.itl.nist.gov/fipspubs/[9]	Secure Shell Handler from Wikipeidia: HYPERLINK "http://en.wikipedia.org/wiki/Secure_Shell"http://en.wikipedia.org/wiki/Secure_Shell[10]	SafeSquid web site: http://www.safesquid.com/Authors' BiographiesJAMES A. MUGUIRA is an architect and engineer with Systematic (SSE) of Fairfax, Va.  He is supporting the MIP community by providing enhancements to SSE’s MIP framework, SitaWare to support interoperability at the coalition level.  He has several years of software development experience and has conducted various development projects for NASA and other U.S. corporate customersBrian J. Stephens is a systems engineer with Systematic Software Engineering (SSE) of Fairfax, VA.  He is supporting the MIP community by providing enhancements to SSE’s MIP framework, especially the IRIS Replication Mechanism and SitaWare Message Broker to support interoperability at the coalition level.  He also has worked as a network engineer specializing in security for Juniper Networks.