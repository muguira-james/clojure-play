Aggregation/Disaggregation Modeling in HLA-based Multi Resolution SimulationsTorbjörn SeigerGunnar HolmUlla BergstenDefence Research Establishment (FOA)SE-172 90 Stockholm, SWEDEN+46 8 706 3000[ HYPERLINK mailto:seiger@sto.foa.se seiger, gholm, bergsten]@sto.foa.se Keywords:Multi resolution modeling, Aggregation, Disaggregation, HLA, Substantive interoperabilityABSTRACT: With the HLA concept there is an inherit claim that models of every possible kind should be able to participate as federates in different federations. However, such a claim raises many questions on substantive interoperability, some of them concerns the possibility to use models on different abstraction levels in joint simulationsTo make models on different abstraction levels cooperate in the same simulation there is a demand of new models for aggregation and disaggregation of the information exchanged. Typically, in aggregation you loose information, which you need to reintroduce when disaggregating. That information depends i.a. on national doctrines, military organization and the local environment. As a consequence there is a need of thorough domain knowledge, if the agg/disagg modeling is possible or meaningful to do at all.There are also restrictions on the original models themselves if there should be a fair chance to find good and useful models for agg/disagg between them. We have addressed those problems both by practical experimentation as well as with theoretical analysis, mainly in the domain of the duel between anti aircraft defense units and attacking fighters. In this paper we present examples of our agg/disagg modeling and the most important observations made during the study. IntroductionIn Sweden we are experiencing a growing interest and increased usage of HLA in industry as well as in government modeling and simulations activities. Within the Swedish Armed Forces there is a strong recommendation to use HLA "whenever possible”.During a recent project at the Defence Research Establishment, we have been studying problems involved when joining models on different abstraction levels, focusing specifically on interoperability issues from the multiresolution modeling perspective. The goal of these studies has been to gain insights about aggregation and disaggregation modeling within an HLA based distributed environment.Even though HLA may have solved some technical interoperability issues involved in distributed simulations, there are still several substantive interoperability problems left to be dealt with.As a test bed for our research, we have constructed a federation consisting of three federates on different abstraction levels. The federation models the duel between attacking fighters and anti air defense units and was used to try out strategies for aggregation and disaggregation within the HLA concept. In this paper we report on the aggregation and disaggregation studies done this far and the results that we have come up with. During the project, we have also studied issues concerned with time and data distribution management. However, that is not in the scope of this paper.The next section introduces some concepts regarding aggregation/disaggregation of simulation models. Section three presents our test federation and some problems and observations made while developing it. A discussion about consistency and fidelity can be found in section four. The paper concludes with a summary of our findings and the lessons we have learned. BackgroundWhen executing a scenario in a distributed environment such as HLA, there is often of little or no interest what every single unit not engaged in the main activity is doing. If for example a company of tanks moves in a friendly territory, far from any enemy, it is not necessary or even useful to represent every tank and every soldier. To keep a moderate or big scenario running with such a great deal of detail, would not only require a massive bandwidth but would also allocate enormous amount of computing resources to work on simulating issues that are of no concern. The simulation result would be fairly accurate but the outcome would take very long to complete.On the other hand, if the scenario was simulated only on a very high, aggregated level of abstraction, the outcome of the simulation might be erroneous due to a great deal of simplifications. The simulation runs very fast but the result might be inaccurate or wrong. Such simulations typically use a statistical approach to determine the outcome of a battle situation. The two highest abstraction levels in our federation (described in the next section) are indeed simulations of this kind.We have been looking at ways to solve these kinds of problems by using different levels of details for different situations in a scenario. Units that are in no present risk of being engaged in direct or indirect combat are simulated using a federate with a very high abstraction level, i.e. an aggregated level. Another federate simulates other units that are at a higher risk of being involved in battle more in detail, i.e. at a disaggregated level, to avoid simplifications and to keep the results more accurate. If some units are really drawn-in to a fight, i.e. firing or being fired upon, that sequence of the scenario can be simulated using a third, very accurate federate, even more disaggregated, with representations of every single soldier, missile or bomb. Using this approach, a simulation should be able to run fast and still deliver an accurate result without consuming an astronomic amount of computing resources.This means that, using our approach, we do not simulate the whole scenario at a detailed level. Instead we use an approach much like the one described in  REF _Ref485806391 \r \h [1] where only parts of the scenario is simulated in a disaggregated state.A typical aggregation problem is to summarize a large amount of information into less information, e.g. summarizing the status of men, vehicles and equipment into a higher level entity, a so called aggregate. Since the aggregate representation contains less data, we risk loosing some information in the aggregation process.Disaggregation is the opposite, i.e. extracting information from an aggregate so that the information thereby gained can be used to generate entities at the disaggregated level.As stated by Davis and Bigelow in  REF _Ref487004467 \r \h [2]: "In a good aggregate, one would try to reflect the essence of the relevant detailed information". Aggregation and disaggregation should, of course, to the greatest extent possible, be accomplished in such a way that the sums of the disaggregated entities are consistent with the aggregated information. However, "The fidelity of aggregated entities is extremely complicated…"  REF _Ref487004503 \r \h [3]. Research in this area is growing but the results seen this far are merely embryos and we are far from a solid theory.Our Agg/Disagg Test FederationTo be able to test and evaluate different aggregation and disaggregation strategies we developed a test federation using three legacy models on different abstraction levels shown in  REF _Ref486220326 Figure 3.1. EMBED SmartDraw.2  Figure  STYLEREF 1 \s 3. SEQ Figure \* ARABIC \s 1 1The federation models the duel between air defense units and attacking airplanes. Some of the earlier concepts, along with a thorough description of the federation are presented in  REF _Ref487004519 \r \h [4] and we provide a brief summary here along with the aggregation and disaggregation models.Federation StructureAs mentioned earlier, the federation uses three different abstraction levels to model the duel between hostile airplanes, attacking one or several ground targets and anti air defense defending the targets or simply themselves. Each of the three abstraction levels is modeled by a certain federate. TYR on the operational level models flight attack units and air defense companies as the fundamental entities. Beneath TYR in the abstraction hierarchy, illustrated in  REF _Ref486220326 \h Figure 3.1, we have FBSIM that models the battle on a tactical level. FBSIM has representations for single airplanes and single anti air defense units, i.e. air-surveillance and firing units. On the lowest level we have a third federate called ARTEVA. ARTEVA's model is very fine grained and models bomb and missile impacts on a technical level with detailed representations for every single soldier, vehicle, missile and bomb. ARTEVA also contains information about the soldier's level of protection (standing, laying, or dug down), the soldier's skills (radar operator, loader, guard), etc. Note that ARTEVA simulates the effects of attacks on the air defense units and other targets but not the effect of the air defense units on the aircraft units. Ground-to-air firing is simulated by FBSIM internally.In the test federation, each of the federates consists of a legacy model and an HLA-interface module. We made an early design decision to minimize network load by attaching the aggregation/disaggregation modules directly to the federate with the highest resolution as an integrated part of the HLA interface. In this way, only aggregated information is propagated through the network.Data TransferOur aggregation models can, slightly simplified, be described as functions taking object attributes as input and sending one or more interactions as output. Disaggregation works vice versa, taking interactions as input and delivering object attributes as output. Within federate agglomerates data exchange is mainly related to object attributes.To know when and where a disaggregation is to take place, a disaggregation criterion, i.e. a trigger, of some kind must be used. The disaggregation criterion we use today is a rather simple proximity function. If the distance between two units  (on the operational level) gets small enough, or if a bomb is dropped (at the tactical level), the appropriate disaggregation process is initiated. Since we have two quite different types of data in our different levels of abstraction we have used two similar but slightly different HLA approaches for the aggregation/disaggregation process.At the lower level, the exchange between FBSIM and ARTEVA is only interactions. This means that the inputs for disaggregation and outputs from aggregation are sent via interactions in both cases and this approach seems to work well. At the highest level, the information exchange between TYR and FBSIM is initiated by interactions but the major data transfer is based on transferred ownership and attribute updates. The ownership transfer mechanism is used to manage continuous information exchange between the two levels, whilst the interactions are used for quick "bursts" of information.A Close-up ExampleTo understand the aggregation and disaggregation processes, let's have a closer look at what happens when a flight attack unit approaches the range of an air defense company, thus triggering the proximity criterion for disaggregation. At the operational level this is merely a matter of two symbols getting close enough. TYR packages aggregated data into two interactions (one for the attacking unit and one for the air defense company) and sends the interactions to the tactical level federate FBSIM. To enable FBSIM to update attributes of the aggregated entities, TYR also initiates a negotiated push, giving FBSIM ownership of velocity and position of the aggregated airplanes. This enables FBSIM to model the individual flight paths of the attacking planes whilst TYR still has a correctly updated higher level display. The position and velocity updates sent by FBSIM is aggregated in the agg/disagg module, and from TYR's point of view, the aggregate is still just an aggregate, updated from the outside.Once FBSIM has disaggregated the attacking unit and the air defense company, each disaggregated incoming airplane is assigned a flight path to follow and the air defense units, now divided into individual sub-units, are placed in the terrain. If any missiles are fired, or any bombs are dropped, FBSIM will in turn send aggregated information to ARTEVA using an interaction. Once ARTEVA has interpreted FBSIM's interaction data, and calculated the result, an interaction is sent back to FBSIM with information about the outcome.During battle, FBSIM continuously updates the aggregated positions of the attacking planes to TYR, in order to keep TYR's display updated correctly. When the battle is over, i.e. when the smallest distance between air defense units and airplanes is large enough or all units of one side are eliminated, FBSIM returns control to TYR, along with the result from the fight.Each of our air defense companies, modeled as a single entity at the operational level, consists of four groups at the tactical level, one air-surveillance unit, i.e. radar station, and three firing units. In ARTEVA, on the technical level, those groups are further disaggregated into vehicles and a group of individual soldiers. The soldiers are assigned roles such as loader, guard or radio operator. This means that if a soldier gets injured, the effect may vary depending on what skills the wounded soldier had. If a guarding soldier gets injured or killed, the effect is simply a little decrease for the units close protection ability. However, if one of the more qualified soldiers gets injured, for example one of the radio operators, the communication with the other units might be lost, possibly causing more negative effect than in the injured guard case. To manage our modeling we had to seek guidance from a subject matter expert (SME). In our case we had the privilege of working with an experienced, devoted and interested officer at the Swedish Air-Defense without whom, this modeling would have been impossible.The Geographical Placement IssueA generally very hard issue, when disaggregating units, is to geographically place the disaggregated entities. This is indeed true if the disaggregated units are very mobile during operation. Many factors, such as local terrain, military doctrine and organization, affect where the land-based units shall be placed as well as how air-born units co-ordinate their approach and flight-paths. There is probably no simple solution to this problem. In our case however, the anti air defense units are not extremely mobile, as they do not regroup for one or more hours of battle.At the tactical level, the geographical placement of units is also, just like in real life, based on a set of suitable pre-chosen positions. If the units are further disaggregated, the soldiers' positions around the central vehicle are based on an optimization function according to the terrain and the individual soldiers' specific tasks.Aggregation ARTEVA ( FBSIMFocusing on the states of the different units it is easiest to begin with the aggregation problem. ARTEVA aggregates the status information of each one of the soldiers and the unit's different capabilities in order to notify FBSIM about the state of a firing or surveillance unit. FBSIM then gets a number of values that describes the state of a unit. These variables, listed in  REF _Ref485806082 \h Table 3.1 are boolean, i.e. true or false. Totally eliminatedThe vehicle is totally destroyed or the number of healthy soldiers are less than some specified limit. Mobility eliminatedThe mobility of the vehicle is destroyed.Firing eliminatedThe firing equipment of the vehicle is destroyed or there are no robots left. Firing is also disabled if there are not enough soldiers with shooting skills left.Communication eliminatedThe radio equipment is destroyed or the soldiers with radio competence are injured and there are function disturbances.Covering eliminatedA random outcome in accordance with a probability that is a linear function of the distance between the detonation and the vehicle.Table  STYLEREF 1 \s 3. SEQ Table \* ARABIC \s 1 1Since ARTEVA only evaluates the result of one specific bomb or missile at a time before returning a resulting interaction, no continuous information, e.g. attribute updates, are needed.Aggregation FBSIM ( TYRFBSIM has to report to TYR both on the attack unit's and the air defense company's' states. For the attacking unit, i.e. the aggregate of airplanes, the state is described by the number of remaining airplanes, bombs and missiles, which are all straightforward to calculate. The status of the air defense company, on the other hand, is described as a number of capabilities. Firing capability, moving capability, communications capability and covering capability. They are all given as the current capability in relation to the full capability, i.e. a floating point number between one and zero. The state variables of FBSIM are, however, boolean and thus either complete or totally absent.After thorough discussion with our SME we established a linear model for the aggregation of the firing capability. If for example one third of the firing units in FBSIM have absent firing capabilities, the aggregated firing capability is decreased by one third, i.e. the resulting firing capability is 2/3. For the communications capability we decided on a similar, but slightly different model for aggregation. If a firing unit is unable to communicate, the aggregated communications capability is decreased by one third. On the other hand, if the communication capability of the air surveillance unit is absent, the communication capability is decreased by ¾. As a consequence, if one firing unit and the air surveillance unit are unable to communicate, the aggregated air defense companies communication capability is only 1/4 ( 2/3 = 1/6. The ability to move and covering capability is handled in similar ways. Besides aggregating the different capabilities, FBSIM has to update aggregated position and velocity for the attacking unit. This is accomplished using mean values. Disaggregation TYR ( FBSIMDisaggregation is generally a much more complex process than aggregation. When geographically distributing units, even if the terrain has been well reconnaissanced, a number of factors has to be considered, and some rather intelligent decisions have to be made. When having settled the aggregation models of the status information we had a good base for developing the disaggregation models too. In principle we sought the inverses to the aggregation models. Those inverses are often step functions, many of them multidimensional. The simplest example is to disaggregate the firing capability of an air defense company in TYR to the corresponding capabilities in FBSIM. We ended up with the following model. An air defense company with firing capability fc and n firing units, have m units which are able to fire (where m is the smallest integer m such that fc ( m/n). For example, if the company has firing capability 2/3 and there are three firing units in the company, two firing units would be able to fire. However, even if we know how many firing units that are able to fire, there is still an ambiguity which one of the units whose capability really is gone. To solve this problem, our SME considered hit probabilities for the units according to their positions in relation to the main attack direction. There is, of course, a greater probability that a unit in the front is hit rather than one of the units further back. If for example a company have three firing units, the probabilities for the units are considered to be 0.6, 0.24 and 0.16, counted in the direction of the attack.When dealing with the other capabilities the situations are generally more complex. For instance the surveillance unit may also posses all the capabilities except the firing one. To settle which units that has been hit when only some of the units have lost a specific capability requires an estimation on how often the surveillance unit is hit in relation to the firing units. In this case, our SME helped us to settle the hit probabilities to 80% for the surveillance unit and the remaining 20% is distributed among the firing units in decreasing order from the attacker's direction point of view. We also have to consider that the probabilities will not be the same if we already know that some other capability is already lost in one unit or another. That means that those units certainly are hit but we know little of in what way. We have modeled this situation by halving the probability for the other units and spreading the other half among those we already know are hit.Disaggregation FBSIM ( ARTEVAAn air defense unit in FBSIM is modeled by ARTEVA as a vehicle, with firing and/or air-surveillance capability, communication equipment and a number of soldiers with individual skills as described previously. Since information about individual soldiers is only represented in ARTEVA, data about the specific skills has to be interpreted from FBSIM's aggregated information. Since FBSIM only represents the whole group's capabilities, and does this using boolean values, some data, for example the soldiers individual skills, is rather cumbersome to extract.The geographical placement of the vehicle and the communication equipment is deployed deterministically as is the placement of soldiers skilled at the communication device. Other soldiers are placed according to a probability schema. Guards are placed according to the solution of an optimization problem.The disaggregation model between FBSIM and ARTEVA was also developed from the corresponding aggregation model. Here we got a very large set of combinations but when confronting them to our SME, he quickly could reduce the set significantly because many combinations were extremely unlikely, especially when taking our scenarios into account.Another important observation was that in most cases it was not necessary at all to do the disaggregation because FBSIM did nothing between two successive attacks against an air defense unit that could affect the state of the soldiers, vehicles and so on. That means that it was preferable to keep some of the state information in ARTEVA between attacks and reuse it if possible. In the vast majority of the cases that was a successful approach. DiscussionWhen joining models on different abstraction levels, some issues emerge, which would not normally be apparent when joining two models on the same level, at least not to the same extent. Consistency and Resolution or "The Perfect Aggregation Model"There is an obvious consistency problem when working with several abstraction levels. Since models on different levels normally have different abilities to express the real world, there is a risk of an information-loss when aggregating.An interesting question to ask is: Is there a perfect aggregation model such that any set of disaggregated data can be transformed into an aggregated state, and then transformed back to the original disaggregated set of data? This would imply that there exists a one-to-one relationship between the aggregated and the disaggregated representations. Of course, such models can be constructed by simply transferring enough, i.e. all, information up the aggregation hierarchy. However, that would cause extra network load and this case cannot be considered very effective. Though, if there in fact were such models, that did not have to transfer all information, it would imply either that the disaggregated model is redundant, or that the aggregated model is as expressive as the disaggregated one. The first seems undesirable and implies in turn the latter, which means that the model at hand does not have multiple resolutions but one resolution expressed by several models. The conclusion we reach is that there are no one-to-one transformations between models with different resolutions.This does not mean that information have to be lost when aggregating. In fact, as showed in  REF _Ref485806391 \r \h [1], loss of information might be avoided by storing all detailed information about known, i.e. previously disaggregated, entities at the disaggregated level. This is not a hard thing to do, but it introduces another problem. An aggregated entity that has been disaggregated once by a certain federate has to be disaggregated by the same federate if such situation occurs. Otherwise, the saved state cannot be reused. In our test federation this was not a problem since we only use one federate per level of abstraction. However, this problem has to be considered when creating agg/disagg models in most other cases.A solution suggested in  REF _Ref485806391 \r \h [1] is appending information to the aggregated level about what specific federate that contains the disaggregated information about a certain entity and then let the aggregated level direct the disaggregation to the specified federate. We have not explored this solution any further.Fidelity ProblemsFidelity can be defined as: "The (level of) fidelity of a simulation is a measure of the agreement of that simulation with perceived (i.e. within a specific context) reality."  REF _Ref487004555 \r \h [5]. If we extend this definition to include multiple co-operating simulations, i.e. a federation, the fidelity can be defined as a measure of the agreement amongst the federates as well as the agreement of the individual federates and some aspect(s) of the perceived reality. It is important to keep in mind that the fidelity of a simulation is very context dependant. All models are abstractions of the real world. This implies the fact that all models use simplifications of different kinds. This is not wrong or even bad. Each model takes as much regard as necessary to specific real-world attributes, in order to produce a result that is "good enough" in some sense, i.e. has acceptable fidelity. However, when joining models on different abstraction levels, the differences in the world representation might cause unexpected errors, since the context the simulations are used within might be quite different. These kinds of errors are called fidelity errors. To make the fidelity problem even more cumbersome, the documentation (from the modeler's point of view) tends to focus on the most interesting issues. Assumptions and simplifications that have been made are often of less interest and not very well documented. They would not have been simplified if they were of serious concern in the intended context. Grayden Fighart was referred to in  REF _Ref487004572 \r \h [6] where he states that someone else's "high fidelity simulation" could be "very low fidelity" for him because it does not give the outputs that he requires. That statement encapsulates the essence of the problem very well.When first joining ARTEVA and FBSIM, we could not understand why all bombs missed their targets with several miles. The error turned out to be a very simple case of fidelity problem, which was not very obvious to find. FBSIM, the tactical level simulation in our federation, was originally designed to study the relationships of information access vs. battle outcome. Therefore it did not matter at all that FBSIM regarded the G-force to be 10 and the air-resistance 0. When aiming, FBSIM used its model of gravitation and air-resistance and, of course, it worked just fine when FBSIM was in charge also for calculating the trajectory paths. When joined with ARTEVA, which has a very detailed model of gravitation and air resistance, this lead to the errors mentioned. Once found, the problem was not very hard to eliminate.The point: Since multi resolution modeling inherently has different focus of interest, fidelity problems like the one mentioned are most probably very frequently occurring. When joining federates with different levels of details into one federation these problems has to be taken under serious consideration. If the joined models have quite different representations, there might not even be a good way to join them at all. There are, however, many cases where good models can be found for aggregation and disaggregation, which leads us to the conclusion that joining models on different aggregation levels is indeed a useful way to manage large scaled scenarios.SummaryIn this paper we reported our current work status and what observations we have made during our aggregation and disaggregation studies. We started out with a discussion on how simulations could benefit, both in execution time and accuracy, from dynamically changeable abstraction levels. We also described that, in some sense, the core of aggregation is loosing information, whilst the central part of disaggregation is creating/regaining the lost data.Our test federation consists of three federates on different abstraction levels, simulating the duel between attacking airplanes and defending air defense units. The federation transfers aggregation and disaggregation data via interactions and updates aggregated entities continuously by the use of transferred ownership. We described the difficulties involved with geographical placement of disaggregated entities and argued that there are no such thing as, what we have called, "The Prefect Aggregation Model". Finally we pointed out why fidelity problems are likely to occur when using models on different aggregation levels.Lessons LearnedThroughout this paper we have made some remarks that we think can be valuable to keep in mind when working with joint models on different levels of abstraction.If the states of two models are described quite differently they should not be joined. But in other cases it is a fair chance to find good models for aggregation/disaggregation.When designing aggregation and disaggregation models, it seems most feasible to start with the aggregation model and seek the disaggregation model among the inverses to the aggregation model.When disaggregating entities, geographical grouping of units is difficult, especially for units that are easy to move during combat. If it is possible to determine a set of possible positions ahead in time, it can be of great help to do so.To develop aggregation/disaggregation models, it is often crucial to have a devoted subject matter expert (SME) in the modeling team.If the aggregation/disaggregation module is connected to the most detailed federate, the network load can be kept down by only sending aggregated information.Disaggregated information should be kept in the detailed federate(s) as far as possible so that it can be reused if the entity is disaggregated again.ReferencesEmmet Richard Beeker: "Battlespace Federation: An HLA Experiment in Disaggregation" SIW Spring 2000, 00S-SIW-083, March 2000.Paul K. Davis, James H. Bigelow: “Experiments in Multiresolution Modeling (MRM)" RAND, pp 8-16-548, 1998.David C. Gross: "Report from the Fidelity Implementation Study Group" SIW Spring 1999, 99S-SIW-167, March 1999.Sven Sköld, Gunnar Holm, Vahid Mojahed: "Building an Aggregation/Disaggregation Federation Using Legacy Models" SIW fall 98, 98F-SIW-108, September 1998.Robert J. Meyer: "You Say Resolution, I Say Fidelity, You Say Accuracy, I Say Detail, … Let's NOT Call the Whole Thing Off!", SIW Spring 1998, 98S-SIW-245, March 1998John F. Fay: "Measuring the Fidelity of a Vehicle Simulation I: Level of Detail" SIW Fall 1998, 98F-SIW-047, September 1998.Author BiographiesTORBJÖRN SEIGER is a Research Officer at the national Defence Research Establishment of Sweden. He holds a Master of Science in Computer Science from Stockholm University, Sweden. His research interests are in the area of HLA, time management in distributed environments and artificial intelligence.GUNNAR HOLM is a Senior Research Officer at the National Defence Research Establishment of Sweden where he has worked with modeling and simulation for almost 30 years. He is currently leading a project on HLA studies, which includes the research on the aggregation/disaggregation topics at hand.ULLA BERGSTEN is a Senior Research Officer at the National Defence Research Establishment of Sweden. Her research interests are in the field of mathematical statistics. She is currently leading a project concerned with VV&A issues.