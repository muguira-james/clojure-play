Application of Agent Technology in Federation Management ToolsJohn Peng,Damanjit Singh PadamVirtual Technology Corporation5400 Shawnee RoadSuite 203Alexandria, VA 22312703-658-7050 HYPERLINK mailto:jpeng@virtc.com jpeng@virtc.comdpadam@virtc.comKeywords:HLA, Agent, Distributed, Federation, Management, Runtime, Execution, Monitoring, ToolsABSTRACT: Agent technology is an emerging area for research among the Computer Science Community. The idea is to develop software modules called “Agents”, which will be able to interact with other agents or legacy software across networks and over different platforms to achieve desired results for the user. This paper takes a closer look at this latest technology and presents an approach/application of agents in HLA federation management tools – specifically the Monitoring and Analysis Tool for the HLA Enabled World (MATHEW). Agent technology is the latest trend in intelligent and coordinated services of distributed management in today’s enterprise domain. The design of a multi-agent architecture for assisting federation managers to coordinate the use of HLA/RTI specific and/or extended (via MOM extension) services is presented as a case study. This case study also shows how this multi-agent architecture can help federation managers to better understand and control the federation execution. In addition, the ‘experience learned’ from the design and development of MATHEW will show how closely the HLA/RTI domain maps to the agent technology paradigm. The current MATHEW development leverages the ideas and design concepts of the Agent technology, which is used to remedy and ease the common problems imposed by Federation Management tools – particularly the network management aspect of federation executions.1.	Introduction The latest technology buzzword in software development today is Agent Technology.  What exactly is agent technology and what can it do for the Modeling and Simulation community – especially with the mindset of the High Level Architecture (HLA)?   This paper takes a closer look at this technology and attempts to answer such questions.  In addition, a demonstration of the use of agent technology is presented, with a case study of MATHEW, a Run-time Monitoring and Analysis Tool for the HLA Enabled World.2.	Agent TechnologySo what is Agent Technology?  Surprisingly the idea of software agent technology is not a new one. In fact the idea was in the mind of John McCarthy and Oliver G. Selfridge, when they were at Massachusetts Institute of Technology (MIT) in the mid to late 50’s.  They envisioned a software system which when assigned a task, performs the computational details, in addition interacts with the systems in a humanly fashion [3].  Since then quite a bit of work has been done in this field namely in the areas of artificial intelligence, robotics, human computer interface, adaptive systems etc.   As a result of such varied research, different people have tried to define and characterize agents in numerous ways.  Agents have been characterized based on their degree of problem solving [3]:Reactive agent, capable of reacting to changes.Intentional agent, capable of reasoning based on intent or belief.Social agent, cognizant of others agents.In another attempt agents were characterized by their varying degree along multiple dimensions,  Figure 1. Scope of Intelligent Agentagency, intelligence and mobility [4]as shown in Figure1. Nawana [1] proposed agent classification based on 1) mobility 2) reasoning 3) exhibition of anatomy, cooperation and learning 4) roles and 5) attributes like versatility, benevolence, trustworthiness, ability to fail gracefully etc.Definition of an AgentAfter going through all different characterizations one is left to wonder what exactly is expected out of an agent. At this point it is required to lay down some required properties for the agent software.  The following properties can be listed as the minimum requirement for a software model to declare it an agent:Autonomy: Most of the software written today is based on command and action. So to achieve a task the user has to be aware of the steps to achieve it. The user then issues these commands to the software to get the job done. On the contrary an agent should be able to accomplish tasks with minimal intervention of the user.Proactive: An agent module should be able to gather enough information about the environment and perform appropriate tasks whenever the situation calls for. It should be able to make suggestions to the user about various possibilities available, depending upon the state of the system.Mobile: This property gives the ability to an agent to move across the network as a whole. Thus an agent can move across heterogeneous environments and execute to achieve assigned task.Scaleable: An agent should be able to configure itself for new tasks as and when the need arises. Intelligent: Last but not the least an agent should be able to learn algorithms and patterns. Over time it should be able to perform tasks faster and in more efficient way. This seems to be a lot to expect from a piece of software but this technology can go long way to help software development especially in the fields of distributed systems and interface development. The agent technology will help in splitting the large and complex programs into modules. These modules will not only perform their own function but at the same time will also maintain interoperability, will adapt to their environment and learn about other modules around them. In the case of user interface development, the windows environment provided a great human machine interface. The limitation on the windows interface is that as the functionality increases, so does the complexity of the interface and hence bringing the interface to the point where the user has to be educated about the functionality of the interface. This leads to the need for manuals in order for the user to learn the interface. With agent technology, the agents will monitor the human action, take care of operation details and even present the user with the available options.    3. 	Agent Software DevelopmentThough the idea of Agent technology has been around for quite some time, a lot of work still needs to be done before the idea of the true agent can be realized. In this section, the focus will be on the present state of the technologies that can aid us towards implementing agent software.  Agent SoftwareTraditional software, which relies on remote services, follows the typical Client/Server architecture (Figure 2.). A classical model of Client/Server relies on remote application or daemon to request services from a server, which they are associated or connected to.  The server will then respond to the client’s request.  This model works well for distributed systems that are well defined and static.  Should ambiguities arise they can either be ignored or however, in most cases cause faults. EMBED Word.Picture.8  Figure 2.  Traditional Client/Server ArchitectureIn an Agent-based architecture, this problem of ambiguity is addressed.  The new architecture layout promotes the client to be mobile and work within the scope of the server-space [2].  The agent becomes cognizant of the server. Figure 3. illustrates the dynamic nature and mobility of the client-side agent as it submits request to the server.  However, the properties for the agents make these client software components too abstract to be realized by present technology [1].Figure 3. Agent-base ArchitectureFor the system to be autonomous and proactive, the system has to be aware of the user activities. Based on user activity and underlying system’s state, agents should be able to decide the future actions for the user. At the same time, agents should learn about the new actions of the user if the user performs an unexpected action. So an agent should know about the underlying system in great detail and the user action model. As we extend these models over a heterogeneous environment, the knowledge base grows pretty fast. So there is a need to develop algorithms that are able to build such models and limit their size in an intelligent manner.  The area of distributed algorithms becomes critical in this endeavor [7].With agent technology we are making a transition from the world of network operating systems to Internet architectures, with the latter being comprised of heterogeneous environments but still providing interoperability. The interoperability is not only at the basic levels but also at the system level. To accomplish this we need network level protocols like TCP/IP, IIOP etc. Modifications or variations of these protocols can very well be applied to the agent technology. For further interoperability between a system and other agents we need a common language that is understood by all agents and systems. These languages can be developed on the lines of HTML, XML etc. Beyond that, there needs to be a command language, which will help agents understand what their counterparts really want to accomplish. This is also known as ontology requirement for the agents [4]. Efforts have been made in this area. Languages like KQML (Knowledge Query and Manipulation Language) and ACL (Agent Communication Language) are being formalized for inter-agent communications. Though agent technology provides interoperability, it has also brought up the concern for system security. Plus there will also be a requirement for the legacy systems to provide interfaces for different agents; this in itself will become an uphill task. For the agents to be intelligent, faster learning and distributed algorithms have to be developed. The present day algorithms are too slow and prevent the agent software to be implemented for real-time systems. 4. 	Agents in HLA ParadigmAfter all this talk about agents, now lets look at another aspect of technology that DMSO (Defense Modeling and Simulation Office) is developing, the High Level Architecture (HLA). HLA is a set of specifications. The federation is a collection of software modules interacting with each other by abiding to the HLA specification [5]. These modules are termed as federates. The three specifications that HLA is based on are: Object Model Templates (OMT): The object model templates are used to specify the objects that will exist in the federation, the attributes for the objects and the interactions between these objects. Runtime Infrastructure (RTI): This is a software model that provides the services to federates participating in the federation so that these federates can interact with each other. The HLA Interface Specification defines these services.Compliance Rules: These are a) Federations must define Federation Object Model (FOM), which is the description of the federation. b) Federates have simulation object model (SOM), which gives the description of federates. c) All the objects belong to federates and not to the RTI.  Federates as AgentsTo demonstrate HLA, let’s consider that there exists a federation that has a number of federates running. These federates have defined objectives and roles. They interact with each other and with the outside world. Each federate is an autonomous module because it can interact with the user and has knowledge of the federation through the RTI. These federates respond to interactions for which they have subscribed and can discover new object information through the RTI. These federates can use the discovered information to learn and increase their knowledge base. So in other words these federates can be considered as modules that are utilizing the RTI not only as their medium for communication but also as their source for proactive behavior. Management Object Model (MOM)A feature of the RTI is the Management Object Model (MOM). This is a defined model which the federates interact with the RTI to manage the resources of the RTI and to extend the resources of other federates. Using this model any federate can inquire about other federate’s objects and the interactions being sent and received by that federate. So there exists a well-defined set for sense/response infrastructure that is well understood throughout the federation. This can satisfy the ontology requirement that existed for the agent technology. Utilization of Agents in HLAA practical use of agent technology with HLA can be the use of HLA tools, such as a Monitoring Application.  Figure 4. Illustrates a simple interaction between an HLA Monitoring application with a federate host.  Services that usually could not be rendered through RTI can be initiated via a MOM/Extension – for example: retrieving the federated host CPU utilization.  Here we illustrate an agent (federate) servicing a Monitoring application (also a federate).  Although the services (A through N) are supported on the Federate Host, the agent operates on-behalf of the Monitoring app those requested services.  Figure 4 HLA tool using Agent based service.We will examine, in more detail, this application of agent technology with HLA in our case study of MATHEW, a Run-time Monitoring and Analysis Tool for the HLA Enabled World.5. 	Case Study: MATHEWThe following section is a case study for agent technology that was implemented and employed to solve the complexities encountered for the Run-time Monitoring and Analysis Tool for the HLA Enabled World, MATHEW. MATHEW OverviewWhat is MATHEW? MATHEW assists federation developers with the federation planning, execution, monitoring, and analysis phases of the Federation Development and Execution Process (FEDEP).  The main objective of the tool is to provide real time analysis and oversight of an HLA distributed federation.  This tool provides the foundation for a FEDEP tool suite that provides a structured methodology for analyzing, evaluating, testing, and validating all data throughout the FEDEP life cycle. MATHEW can: Visualize the federation planning, monitoring, and analysis data, Ease production of the federation planning tables, Determine if federation monitoring and analysis data requirements are satisfied, and,Identify and provide correction to federation run-time inaccuracies.MATHEW and MATHEW AgentsIn order to monitor and control federation activities, the Run-time MATHEW utilizes remote agents (a.k.a. remote MATHEWs).  Like any other federate, these agents must join in order to participate in the federation.  However unlike other monitoring federates, these agents can act as a non-salient federate - playing a proactive role in the management and control of a federation execution.  MATHEW relies on these agents to provide feedback and to mediate services to federates and/or host systems during federation execution.  5.2.1	Distributed Federation ManagementThe Distributed Federation Management provides the federation manager the control to launch federates/application on remote host via a single control station.  Coordination and synchronization (timing) of federate launch time are discovered and defined during the planning phase.  MAHTEW utilizes agents to test remote host availability, resource validation (based on FEPW entry), process load check.   If all these tests pass then the federate or process will proceed to launch.  Figure 5. Illustrates one view of the Run-time MATHEW during the Federation Execution/Monitoring phase. The graphical interface showing the Federate process-state (after it been launched) is presented on the left-hand side of the display. Once situated, the Remote MATHEW agents begin its proxy service to the MATHEW control station.   For federation management these services include Stop federate, Resume federate, Pause federate, etc. (services found in the current implementation of the RTI MOM)..Distributed Network ManagementThroughout the entire federation execution, the Run-time MATHEW provides 2D visual representations of the federation (i.e., network topological view or federation view, statistical view, and DDM view) and indicates (graphically) changes of network and federation states.   These graphical displays aid in run-time analysis of federation and network/system performance/health (see Figure 5.)  Network and system monitoring and controls are also a standard feature of the Run-time MATHEW.  Like the federation monitoring, network monitoring will help identify system bottlenecks and system downtimes.Figure 5. MATHEW Execution DisplayMATHEW utilizes agents to provide system resource feedback – identifying resource utilization, availability and up/downtime.  In addition, the agents themselves become cognizant of activities (processes/access) demanded on by the host system.Distributed Data LoggingThe Run-time MATHEW utilizes agents to provide distributed data logging of system level Measures of Performance (MOP) in addition to remote systems monitoring (as mentioned earlier). Figure 6. Illustrates the distributed nature of the Run-time MATHEW and the Remote Agents supporting distributed data logging.  Note: this model diagram can apply to the other remote services mentioned earlier, such as federation management/monitoring, as well as system and network management/monitoring.Figure 6. MATHEW Distributed Data Logging with Remote MATHEW AgentsThe Distributed model of the Run-time MATHEW illustrates the possible channels of communication supported by the MATHEW.   A Control Station MATHEW launches the Remote MATHEW Agents as part of its distributed federation management function.  The Remote MATHEW Agents then communicates back to the Control Station via RTI.  The Remote MATHEW is configured to do remote data collection, generally MOPs, from the host system and specified federates.5.3		Agent Technology in MATHEWMATHEW utilizes Agents for its distributed model. These agents are distributed as autonomous modules throughout the federation.  They are pre-configured in the planning phase with set responsibilities and roles.  At runtime, these agents intelligently respond to the federation changes and take up their roles to fulfill their responsibility. The user is informed/notified about the changes that have been made or identified by the agents, and to take appropriate actions if needed.  Thus the agents become tools in the decision-making process for the federation manager. The agents will monitor the entire federation execution and are cognizant of new processes as they are introduced – whether they are co-located or residing on a remote host.  This proactive behavior  enables the agents to rectify the faults that might be encountered during federation execution. One example depicting the proactive property of the agents is the starting up of critical federates if they fail during execution. Since, these agents are part of the federation there is also inter-agent awareness among MATHEW agents. In a situation where one of the agents becomes disabled, another agent can take over its functionality. Thus making these agents more fault tolerant.6.	ConclusionThe stringent definition of agent software includes the aspect of artificial intelligence and a predicate-based messaging framework (KQML).  Although a number of these aspects are missing from the HLA Specification that does not preclude developers from leveraging and using Agent technology in within an HLA environment. As exemplified in the case study of MATHEW, agent technology can provide Federation Monitoring and Management with numerous benefits – especially in areas of management, control, and analysis.  In addition, tools such as data collection or configuration management tools can reap benefits from agent technology in general. 7.	References[1] Nawana, H. S., and Ndumu, D. T., A Perspective on Software Agents Research, 1999, Applied Research & Technology Dept., British Telecommunications Laboratories, Suffolk, UK.[2] Jennings, N. R., and Wooldridge, N., Application of Intelligent Agents, 1998, Queen Mary & Westfield College, University of London.[3] Bradshaw, J. M., Software Agents, 1996, AAAI Press / The MIT Press, Menlo Park, CA.[4] General Magic Corporation, Mobile Agents White Paper, 1999, On-line Technology Paper,  HYPERLINK http://www.genmagic.com/technology http://www.genmagic.com/technology.[5] Calvin, J. O., and Weatherly, R., An Introduction to High Level Architecture (HLA) Runtime Infrastructure (RTI), 1996, U.S. Department of Defense (DoD).[6] Peng, J., Perkinson, P. B., and Long, R. A Run-time Monitoring and Analysis Tool for the HLA Enabled World (MATHEW), 1998, Fall SIW, Orlando, FL.[7] Lynch, N. A., Distributed Algorithms, 1996, Morgan Kaufmann Publisher, Inc., San Francisco, CA.[8] Peterson, L. L., and Davie, B. S., Computer Networks – A Systems Approach, 1996, Morgan Kaufmann Publisher, Inc., San Francisco, CA.Author BiographiesJOHN PENG John Peng received his BS and MS degrees in computer science from Park College and the Johns Hopkins University, respectively. He has over eleven years of experience in software engineering; featuring graphics, analysis, design, and implementation for large scale distributed systems.  The past four years he has been employed at Virtual Technology Corporation as the Director of Graphics and Visualization and worked on notable projects such the Joint Precision Strike Demonstration (JPSD) and the Synthetic Theater of War (STOW.)  His recent role and responsibility includes being the principle engineer and software architect for VTC HLA Monitoring and Analysis tool, The Run Time MATHEW. DAMANJIT SINGH PADAMDamanjit S Padam is presently working as a Software Engineer at Virtual Technology Corporation, Alexandria, VA. He received his Bachelors in Electronics and Communications Engineering from Guru Nanak Dev University, India in 1996 and, ME in Computer Engineering from Old Dominion University, Norfolk, VA in 1998. During his masters he was a research assistant with VMASC (Virginia Modeling Analysis and Simulation Center). Presently, he is involved in development for the run-time monitoring and analysis tool, named MATHEW, for HLA compliant simulations.