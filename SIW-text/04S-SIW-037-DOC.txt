A security approach for multi-national exercises / experimentsPatrick LegandThalesRaytheonSystems1, av. Carnot 91 Massy Cedex, France+33 1 69 75 56 51 LIENHYPERTEXTE mailto:patrick.legand@thalesraytheon-fr.com patrick.legand@thalesraytheon-fr.comKeywordsInformation security, multilevel security, distributed simulation infrastructure, classified, security regulations, security threats, multinational, interoperabilityABSTRACT: Future distributed simulation environments are likely to support simulation execution consisting of heterogeneous independent federations. These will originate from several geographical locations, and operate in various national security contexts. Depending on each specific case, it is assumed that federations will have to handle proprietary, government / industry, restricted / classified information. At the same time, the federations will have to share and exchange authorised subsets of this information with remote federations through wide area networks.The general status of world-wide security threats is that there is an increasing level of sophistication and quantity of attacks. There are two aspects to consider with this current state: the inherent vulnerabilities with operating systems, network protocols, and application software, and the deployment of standardised architectures that allow widespread use of publicly released exploits. These aspects have led to the disclosure of a tremendous number of malicious tools and techniques to the Internet community, and let experienced attackers  penetrate and gain remote control of information systems.The purpose of this paper is to propose an approach and an overall high level architecture, enabling distributed multilevel security federations to have flexible and secure frameworks which could satisfy national security regulations, and could be adapted with government-specific security solutions as necessary.This paper gives firstly a high level picture of a realistic distributed simulation infrastructure case. It then briefly summarises the current situation with respect to the security threats and their impacts on HLA systems, with references to trends and forecasts for the future. At the end, it moves towards a possible open high level security architecture for multi-national exercises / experiments, illustrated by elements of solutions that would be foreseen in France.IntroductionFuture distributed simulation environments are likely to support simulation execution consisting of heterogeneous independent federations. Nations will handle their own simulation infrastructures, where simulators and live systems, such as C4I systems, may be linked together, where information is transported through any  national, private, civilian or military communication network, and where any simulation protocols (DIS, HLA, private) will be used independently of any other country’s requirements. End to end transfer of information between the final federates will happen through international connecting infrastructures, responsible for the provisioning of distributed access points to the collaborative States, the adaptation of simulation protocols to the inter-site simulation protocol, the provision of specific gateways for the security and management of the interconnecting network.If a fully distributed simulation infrastructure is highly interesting from an operational perspective, such an open environment has a tremendous number of security issues. The objectives of this paper is to look at the main issues, and propose recommendations to secure distributed simulations in this context, given the complexity of the situation and the constraints imposed by the requirements, in terms of security and exchange needs. This approach does not intend to reinvent  a new way to secure HLA federations. Research has already issued significant results in this area and it is an objective to reuse results of previous works. The goal is to provide a global analysis of the problem, and to propose recommendations that would comply with the need to secure simulation information from end to end, without  conflicting with the Nation’s specific interests, requirements and laws.Vulnerabilities and ThreatsThe two main difficulties when elaborating an accurate threat analysis are, first, the significant task it represents to gather all the necessary information and second,  the fact that threats are permanently changing. We only have to read the archives of any vulnerability reporting list to realise that software packages are full of holes. The methods used to attack a system component (Operating Systems, communication protocol, software package, etc.) are highly dependent on the exact type of the component, which means that a comprehensive threat analysis requires a clear understanding of the vulnerabilities which  apply to each system component. To make things more complex, new attacks get published all the time; for example, dozens of new attacks have been exhibited in year 2003 through almost 4500 new vulnerabilities discovered in 12 months! Obviously, the scope of this paper is not to solve each individual problem (let’s leave this huge task to the editors and the manufacturers ), but to attempt to understand the very nature of the threats which certainly result in a better design (i.e. “more secure”) when defining distributed simulation architectures.Adversaries and their motivationsFederations handle characteristics of weapon systems. This information is proprietary, relevant to the government or to the industry, is restricted or classified. In other words, it is highly critical in terms of confidentiality and strong regulations strictly impose this information not to be disclosed. It is likely that adversaries come essentially from two backgrounds:Nation states, well organised and financed. They use any kind of means (advanced technologies, foreign service agents...) to gather this classified or critical information,Industrial competitors, foreign or domestic corporations operating in a competitive market.Motivations of these adversaries is merely twofold: to illegally gather classified or critical information from competitors or foreign governments, or compromise simulation results (electronic warfare). It is a prerequisite to consider that the adversaries have significant expertise in security, and are deeply aware of all techniques to circumvent most protection mechanisms, especially those embedded in Operating systems or in security products built on weak implementations.Generic threatsFirst of all, let’s notice that federations are built upon commonly used information systems components (Unix, Windows, Oracle, Cisco, ...); the consequence being that we must admit all known vulnerabilities or threats potentially apply to federates. Dozens of security web sites, such as Bugtraq, insecure.org, packetstormsecurity.org, spywareinfo.com, or sourceforge.com, demonstrate daily evidence of the existence of the following threats.Compromised Software componentsAlmost all software components have been compromised by hackers. These attacks may vary from the propagation of viruses, worms, Trojan horses, or the installation of any kind of program (backdoors) that purport to be useful tools, but that actually install malicious or damaging software behind the scenes. Exploiting these software flaws leads for instance to an information gathering, a privilege escalation, or an administrator or user access to the target device without having legitimate credentials.Compromised software may act as Trojans to process information leakage, help intruders to gain fairly complete control over the victim’s machines, or represent major introduction vectors to get inside the system. Example of capabilities identified so far include the following:Launching scans from the victim’s system (i.e. leading federations to be scanned from the inside),Opening listening ports on federates, allowing the establishment of cross federation boundary tunnelling links,Remotely editing the Registry,Retrieving cached application passwords,Redirecting ports and applications,Launching keystroke logger,Gaining shell access to a remote federate,Hijacking the mouse,Remote application spying.Dozens of additional items could be listed here. Some attacks, such as hijacking a session or setting up a tunnel between the attacking machine and the victim’s one, make use of sophisticated techniques. But, this is a real concern, exploit codes are becoming even more powerful than the attacks are sophisticated, which means that intruders may be successful in penetrating systems, even if their expertise is not so impressive. A tremendous number of successful attacks need just to download the code, compile it using the simple command “make”, and run it!The key point here is to admit that interconnected federations are subject to attacks of this kind. It is safe to consider that, without any strong security components, classified information hosted on a federate may be accessible even from an attacker not physically situated inside the federation.Remote arbitrary code executionRemote arbitrary code execution has become one of the most popular hacking methods. This attack takes advantage of vulnerable input / output functions of target hosts and is most often aimed at giving the remote attacker an administrative access (this method is often used to provide a remote shell onto the victim’s machine, or to launch a malicious sleeping process). It often does not require authentication and therefore may be exploited by anybody. Two of the most common methods used are buffer overflows and format string attacks.,Basically, a buffer overflow attack takes advantage of the weaknesses of certain compilers and certain programming languages, such as C or C++. When a software process (an application, a protocol layer, etc.) must accept a user-supplied data, if the user submits more data than the application expects, the application may not gracefully handle the surplus data. As a result the stack, especially the Instruction Pointer, is wiped out and loaded with the unexpected user input. An attacker who has the relevant expertise then has a formidable opportunity to control the instruction pointer of the remote machine and activate a malicious code which he wants to be executed. He now just has to  carefully design the contents of the buffer he wants to inject (which can be used for both the injection vector and the payload itself), and complete  the injection (this is a simple process, automating filling a buffer over the network, or writing a file that is later read by the vulnerable process).This is the kind of attack which typically leads to potential disclosure of private and confidential objects hosted by the federate.Network sniffingA sniffer is a tool that passively monitors a computer network for key information that the attacker is interested in. In most cases, this information is authentication information, such as usernames and passwords, which can be used to gain access to a system or resource.Federation networks are highly vulnerable to this attack, since traffic is not encrypted. Any object, attribute, interaction or credential may  be disclosed to an unauthorised entity which has run a sniffer.System intrusionAccessing simulation sensitive information first requires that the adversaries have successfully penetrated the federation and installed the minimum set of backdoors that will allow them to return  whenever they want. We have already seen principal groups of attacks which, when well  orchestrated, lead an attacker to get inside and take control of the federates. It is important to bear in mind that the intruder may come from:The federation itself (an industry competitor for instance). In that case, he has the major advantage of being identified as a trusted person and is able to launch “internal” attacksOutside the border of the federation. Here, the attacker has to use more sophisticated penetration techniques, since he operates remotely on the front of the security gateways. Successfully penetrating a federation requires to be rather familiar with these techniques, but is highly feasible.Hackers have dozens of possibilities to get inside. Numerous powerful intrusion tools are available from the Internet and offer a myriad of functions allowing to:Scan, grab, enumerate federations, get detailed identifications about the federates and their profiles,Bypass firewalls and Intrusion Detection Systems (IDS),Crack passwords,Perform advanced intrusion attacks such as session hijacking, tunnelling, IP spoofing, subverting system environments (rootkits, ...), etc.Compromising simulation results (electronic warfare)Sometimes, adversaries may have interests in abusing the simulation process, by providing false information, and, thus, compromising to  some extent the simulation results.This attack can be achieved when a federate, or an application running on the federate, has been corrupted or has been replaced by a malicious one.Vulnerabilities specific to HLAIn addition to the generic threats related to all information systems, a set of security vulnerabilities may affect HLA technologies. A short overview of some specific examples  is given in this section.The “RTI Trojan”Delivering HLA services to federates and ensuring the interface with IP, the RTI is one of the most strategic software components that could allow adversaries to penetrate the heart of the federations. We saw in the previous section that protocols connecting hosts can be compromised in several ways, for instance by  exploitation of hidden vulnerabilities. As such, the RTI can serve as a delivery mechanism to the propagation of malicious software:Performing unauthorised access to sensitive or classified data hosted on the victim’s federate,Helping information leakage via hidden channels,activating sleeping malicious software.Information leakage through the security gatewaysAddressing the notion of information leakage through a component designed to conceptually provide security to distributed simulations could be rather surprising.However, if the concept of HLA gateways has been developed to enhance federations protection (at the HLA level), one should not forget that if the security gateway has not been built upon a trusted OS, attackers are totally free to exploit the weaknesses of the computer machine, as described in the previous sections.There are, for instance, numerous ways to force a Windows, a Unix or a Linux kernel to redirect traffic to an external network interface, without touching any security mechanisms provided by the gateway. One technique is called back channel; a back channel is a mechanism where the communication channel originates from the target system rather than from the attacking system. Few methods can be used to accomplish this task, reverse telnet being  one of them (the telnet connection originates from the system to which the attackers are attempting to gain access, instead of originating from the attacker’s system). Another method of creating a back channel is to use some well known backdoors which unfortunately belong to many default Unix / Linux distributions or can be stored on the target machine by exploiting their security weaknesses (for example, anonymous FTP, tunnelling, etc.).Figure  SEQ Figure \* ARABE 1: Information leakage scenarioIt is realistic to consider the scenario shown in  RENV _Ref63064895 \h Figure 1. Supposing the RTI has been affected by a buffer overflow vulnerability: it is then possible to launch an unauthorised access to confidential information attack against a given federate. Or imagine the buffer overflow exploit has been designed to launch the execution of an arbitrary code located on that federate. This malware may collect sensitive information hosted on the federate, and redirect this information in an encrypted mode towards the IP interface of the computer machine which  supports the security gateway software. If this computer has been corrupted and configured to redirect this traffic through a hidden channel to the second IP interface, sensitive information can be disclosed outside the federation.Of course, setting up this kind of “hacking chain” would require a certain level of effort and expertise, but the occurrence of a successful attack should not be ignored, especially when classified information is held within.Unauthorised access to federate objectsIn this section, we will work on the very LAN of the federation. Let’s consider that different need-to-know policies apply to the federates; a basic scenario could be represented like this (cf.  RENV _Ref61925937 \h Figure 2):Figure  SEQ Figure \* ARABE 2: Simulation contextThree federates, denoted F1, F2 and Fx, are connected to the federation LAN and are supposed to be involved in the simulation process,Two federates, F1 and F2, are allowed to share a given subset of published objects (red and green objects)The “third party” federate, Fx (a competitor for instance), is allowed to exchange information with F1 and F2, but has no access to the object shared by F1 and F2, according to the need-to-know policies (its access is limited to the orange objects)In addition, let’s suppose federates F1 and F2 host private, sensitive, or classified information not to be disclosed.In the case of the diagram , we assume that the architecture is built upon a decentralised RTI (the overall published objects are physically located with the RTI); upon a centralised based RTI architecture, the principles described hereafter would remain the same.At this stage, the federate Fx has several possibilities to access objects it does not need to know (cf.  RENV _Ref61925937 \h Figure 2):When attempting to gain access to any published object, the RTI does not ask mechanisms to verify if the request fits with the predefined set of rights and permissions associated to the federate, specified in the FOM. Fx just has to subscribe to the objects it wants to see,Using a simple sniffer freely available on the Internet, Fx is able to capture all object attributes and interactions sent over the network; it can store all this information and afterwards perform in-depth analysis to extract the useful information,Due to the availability of an impressive variety of hacking tools and techniques, Fx can attack and fool most federate protection mechanisms, and steal any private information hosted on the computers. If this information is classified, the impact of the disclosure is high,Supposing the RTI provides an access control feature, Fx still has the opportunity to bypass the access control mechanism by directly hacking the computer, dumping the memory allocated to the RTI and retrieving any kind of object information stored within ,Finally, Fx still has the possibility to spoof the identity of a trusted federate and, then, access  non authorised information.Figure  SEQ Figure \* ARABE 3: Attack opportunitiesThe previous diagram shows the various attacks an hostile federate could launch when connected to the internal LAN of a federation. This list is certainly not exhaustive.Summary of HLA vulnerabilitiesTo summarise, the main HLA vulnerabilities are listed in the following table:N°HLA vulnerability1Federations systems often rely on components (OS, communication protocols, application software...) to which important lists of flaws, security holes and backdoors are published, and which may potentially be affected by known attacks (a large diversity of exploit codes is available)2RTI implementations may contain software vulnerabilities, exploitable by an attacker to run arbitrary code on a remote federate and, then, gain administrative access or access to confidential data concerning  that federate3HLA gateways, if not running on top of a secure OS, are subject to computer attacks leading to a potential disclosure of information through hidden channels4Data are sent over the network in plain text, allowing each computer running a sniffer to listen, monitor and capture private information, and afterwards make off-line in-depth analysis5RTI don’t provide access control features, allowing any hostile federate to access objects it does not need to knowTable  SEQ Tableau \* ARABE 1: HLA vulnerabilitiesSecurity mechanisms for HLA federationsThe previous sections have shown  real dangers in modern computing and identified devastating security vulnerabilities which may result in an in-depth penetration of federations. This chapter gives an overview of security mechanisms that would disable the aforementioned attacks, and bring security to a level that would render distributed multination simulations more secure. Security has to be enforced at different levels of the infrastructure, and should provide at least the following mechanisms:Access control to simulation objectsTraffic encryption of the federation LANSimulation data encryptionSecurity gateways, security guardsSecure OS configurationAccountability and auditAccess control to simulation objectsThe access control service to simulation objects aims at ensuring that any access or operation realised on a given object is performed by an authorised entity, according to the access control rules defined for the federation. Access control comes up with three mechanisms:Federate identity management associated to a predefined set of rights allocated to the federatesFederate authenticationFederate access control to objectsIdentities and rightsFederate identity management needs a mechanism to associate the federate to an identifier. Several methods can be envisaged to elaborate and manage such an identifier (two methods are presented here, but additional solutions may exist):A basic solution would consist of using the IP or the MAC address of the federate as the identifier. Most software packages or Operating Systems use this technique to identify computers. Despite this being a very convenient solution, it is quite easy for an attacker to spoof an IP addressA more sophisticated solution would be an assignation of a unique FID (“Federate Identity Number”), when a federation is set up or when the federate is connected to the federation for the first time. Several complexity levels can be associated to the elaboration of the FIDs, from the simplest one  (for instance a simple identification number) to a more sophisticated one (an identification associated for instance to a cryptographic signature).Federate authenticationAuthentication is not necessarily mandatory; once a federate has been identified, rights and permissions can be allowed. However, authentication gives a proof of identities and brings a better level of security.Several authentication methods could be proposed:A simple authentication mechanism based on the IP or the MAC addresses (for instance by comparison between the actual address of the federate and a predefined list of authorised federates)A strong authentication based on the cryptographic signature of the FIDA strong authentication, based on cryptographic challenge – response mechanisms (these  mechanisms are implemented in IPsec, SSL or VPN products)Federate authentication constitutes an efficient countermeasure to prevent electronic warfare attacks.Access control to objectsAll these federates have predefined set of rights and permissions. Access control rules are managed independently by the system administrator or the security officer, in the form of Access Control Lists (ACL).The mechanism of access control to the objects of the federation must be supported by the RTI. When a federate wants to subscribe to an object, the RTI should compare the ACL associated to the federate identifier, and then delivers the  authorisation  (or not) according to the predefined access control rules.Traffic encryption of the federation LANProviding encryption is the one silver bullet that will render a packet sniffer useless. Encrypted data, assuming its encryption mechanism is valid, will thwart any attacker attempting to passively monitor the federation network.Many existing network protocols now have counterparts that rely on strong encryption. For instance: IPsec, SSH, SSL (VPN solutions mostly rely on these protocols).In the specific context of distributed simulation, a possible approach to traffic encryption would consist of using SSL to encrypt data sent to the network protocols layers. Such an approach implies the implementation of the SSL framework inside  the RTI. This may result in a new concept of S-RTI (Secure RTI), a RTI that would provide the traditional RTI functions, plus a data encryption service.Simulation data encryptionSimulation data encryption constitutes an efficient protective measure against any federate penetration attacks, performed in the view of stealing confidential data. At least two different approaches can be adopted for simulation data encryption:The first one consists of an overall “on the fly” encryption of disk partitions; this method can be set up independently of HLAThe second one relies on an simulation embedded encryption solution; only selected sensitive or classified simulation data are encrypted.Shared partitions encryptionShared partitions encryption has been commonly used for enhanced or governmental security. Data are encrypted or decrypted once stored or retrieved from the virtual partition; the applications can then freely access this  information, while guaranteeing a secure storage. A number of COTS products are already available on the market.HLA encryptionHere the concept is fairly different. It is generally assumed that data are best protected when the protection comes from the actual entity that manages these data. The interest of HLA encryption is in the fact that the encryption feature is embedded in HLA, which has an accurate perception of the HLA data to be protected.The principles behind application software encryption in the context of HLA is described in  RENV _Ref62541265 \h Figure 4.Figure  SEQ Figure \* ARABE 4: HLA encryptionLet’s assume at the beginning that all sensitive attributes of a simulation object are encrypted with the simulation application key (Kappli). Let’s assume Federate 1 and Federate 2 are willing to access the same FOM, but don’t  share the same “Need-to-know” policy. For instance, Federate F1 is granted access to a subset of classified attributes of a given simulation object, whilst Federate F2 has access to another subset of the same object. When the application receives a request from Federate F1, or Federate F2 for that matter , the application reads the predefined set of rights associated to the federate, decrypts the attributes which the requested federate has access to, encrypts them with the public key of the requesting federate (Kfederate) and sends the object to the federate. The federate will only be able to access the data it can decrypt with its private key.Such a method ensures that all sensitive or classified information lies in an encrypted mode all the time, except when used by an authorised federate who can decrypt, for a limited period of time, only the information it has access to. The use of public key algorithms provides a cryptographic separation among simulation information.Security gateways and guardsSecurity gateways and guards obviously remain key to HLA security architectures. Depending on simulation contexts and on the nature of the managed information, different levels of protection must be envisaged:Sensitive, but not classified, data can be protected by Security gateways, which provide powerful HLA filtering capabilities and restrict external access to the FOM objects,Classified data must be protected by Security guards; Security guards support the same filtering capabilities as the Security gateways, but, in addition, guarantee classified data isolation and high to low separation of networks, according to national laws and regulations.Security gatewaysSecurity gateways aim at providing an external data representation of the federation objects, and act as HLA firewalls to filter incoming / outgoing simulation flows and protect the private simulation objects.Located at the external interface of a federation, Security gateways ensure efficient protection against attackers who would  attempt to access unauthorised sensitive objects, via the HLA or the DIS protocols.Security guardsA security guard is supposed to implement much stronger security mechanisms than security gateways. Its aim is to ensure that no classified information handled in the federation (either through a simulator or a C4I system) can be disclosed from the higher security domain to the lower one.One approach to multilevel security is to associate a security label to the information (i.e. Non Protected, Nation Confidential, NATO Secret, etc.). Once the data is transferred from the high to low boundary, the Security guard may decide (for instance though a generic security proxy) either to let the information pass through, downgrade the value to a lower security level, or not authorise it to cross the boundary, according to the label and the security policy applied to the interface.Nations will probably need to implement their own Security guards, since it is likely that such components have to meet the national security certification and accreditation requirements of the country owning the classified information. However, NATO accredited security guards may be envisaged in a simulation process where only NATO information is used.Hardening systems and serversAlthough system configuration is not perceived to be as important a measure compared to encryption or filtering, securely configuring operating systems, routers, firewalls, software packages and all components of a federation is definitely the first and initial step towards security. All security advises first require a securely optimised system configuration. A significant number of guides to securing configuration of systems (Windows NT, 2000, Unix, Oracle, etc.) are being, or have already been, published, and it is a prerequisite that simulation system administrators follow the rules specified in these guides.Accountability and auditInformation security should never be envisaged without properly defining accountability and audit policies. The scope of this paper is however not to describe a category of services that have already been implemented in most hardware and software components. This short section is just aimed at mentioning the need to always bear this important aspect of security in mind.Case studyScenario descriptionThis section looks at a likely multination distribution simulation scenario, in which national federates are supposed to host national-sensitive information. The purpose of the case study is to attempt to identify a security architecture that would ensure reliable data confidentiality and would provide a clear separation between nation wide classified information and data exchanged among the nations.In this section we consider the execution of an air force mission training scenario. Let’s assume that:National simulation federates are linked together through a national and private communication infrastructure,In the case of real time simulations, HLA, DIS or simulation management services are supported locally (i.e. management gateways are needed on the LAN side),The participating nations are interconnected through an international infrastructure which provides a dedicated distributed simulation interconnection service. This infrastructure makes use of an inter-site protocol ensuring the interface with the local HLA – DIS protocol implementations and simulation services,The interface is assumed by a specific communication gateway which manages:the adaptation of the HLA – DIS national protocols to the inter-site protocol,the translation between local data (FOM or DIS) and the inter-site data modelthe interface with the centralised Network Management and Administration Center (NMAC)The network is administrated via the Network Management and Administration Center (NMAC), which interfaces the gateways at the access points.Security architectureOne important aspect, indeed the main issue which deeply influences security, is the definition of a well designed network architecture. A first approach to the protection of nation sensitive data is the definition of a strong filtering “device” that would efficiently isolate both sides from unexpected access.In the context of such a scenario, the best way is to rely on an intermediate network at the national access point, which completes a strong separation between the national side and the external side, and has the responsibility to clean up the incoming traffic. This intermediate network should include at least the following components:A subset of security components at the external interface, providing:encryption equipment for the confidentiality protection of the data exchanged. The nature of the cryptographic mechanisms will depend upon both classification levels of data and interoperability constraints (i.e. in the context of NATO experiments, NATO classified information must be protected by NATO encryption devices)a filtering device (a firewall)The communication gateway doing the protocol adaptation and the interface with the NMACA national security gatewayA subset of security components at the national interface, providing:national encryption of the traffic exchanged on the national infrastructurea filtering device (a firewall)A national Network Management Administration CenterFigure  SEQ Figure \* ARABE 5: Secure architecture for multinational simulationsIt is also foreseen that security guards could be placed anywhere on the federations (behind the security components of the national interface), to isolate any simulator or live system which would handle national classified data.It is obvious that further studies are needed to validate the feasibility of such an approach, having special regards, for instance, to performance issues.Summary and ConclusionsIn this paper, we have presented solutions for securing distributed simulation federations in a context of multinational experiments, having taken into account the diversity and the effectiveness of the threats that may apply to federations. The protection measures proposed in this document are based upon the following security services:An access control service to the FOM, which ensures that nobody else other than an authorised federate can access  simulation information. This service requires at least an identification and an authentication service to be in place,A secure RTI (S-RTI) which  provides federate to federate traffic encryption based on SSL, to prevent any information disclosure resulting from a hostile machine listening to the network,A simulation data encryption service, guaranteeing protection against disclosure of confidential information due to infiltration of a federate. Two different mechanisms can be envisaged:an overall “on the fly” encryption of disk partitionsan encryption implemented at the HLA application level, in which only the sensitive or the confidential simulation data are encryptedSecurity gateways and guards offering a clear separation between the federations and the outside world. Several gateway profiles would be needed, depending on the levels of separation required:high to low separation for protecting NATO classified information (NATO Secret): the solution could be based on a NATO accredited security guard, when availablehigh to low separation for protecting national classified information: the solution must implement the concept of information labelling, in which labels are handled by the applications and filtering is performed by a generic security proxy, depending on the labels and on the security policies. Such a guard must be certified and accredited by the national certification authoritiesother kinds of separation (non classified information): traditional security gateways.Experience shows that the more a software or a hardware component is distributed over the world, the more it is subject to a high number of attacks. To drastically reduce the risks, a basic rule in security consists of preferring as much as possible low market penetration products (this is easily achievable with firewalls and routers) or, even, specific components. For instance, it ishighly recommended when non classified but sensitive data are in use, that the components intended to be deployed only on the national infrastructures are developed by the Nations themselves. The first two Nation-specific components to develop as a priority should be at least:The RTI (or the S-RTI),The security guard.Author biographyBorn in 1961, Patrick Legand is a senior security expert and has had over 15 years of experience with Information Security in Defence and Telecommunication industries. Working as a security architect with ThalesRaytheonSystems, Patrick is responsible for the design of multi-level security infrastructures in several French Army and French Air Force programs, and acts as a consultant with International Program Offices for France and NATO certification and accreditation of military systems. Prior to Thales, Patrick was a Security Industry Analyst for Alcatel and France Telecom, where he covered a variety of applications and products in mobile communications. Patrick also maintains a test laboratory, where he performs penetration testing, attack reviews, and security technology assessments. He specialises  in firewalls, network intrusion, application software cryptography (RSA, DSA, AES), and application hacking (buffer overflows). Patrick is routinely called to the management of research programs in the areas of Trust & Confidence and eBusiness by the European Commission, and often contributes  to security publications (Eyrolles).