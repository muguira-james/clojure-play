Enabling and Testing Autonomous Learning Behaviorsin Models of Computer-Generated ForcesDavid W. Aha Intelligent Decision Aids GroupNavy Center for Applied Research in Artificial IntelligenceNaval Research Laboratory, Code 55154555 Overlook Ave., SWWashington, DC 20375(202) 404-4940david.aha@nrl.navy.milJohn Christman LCDR, USN (RC), SWOSpecial Security Section, Security BranchNaval Research Laboratory, Code 12234555 Overlook Ave., SWWashington, DC 20375(240) 421-6224christman@reserves.nrl.navy.milKeywords: Semi-automated forces simulators, intelligent agent control modules, TIELT integrationABSTRACT: The Testbed for Integrating and Evaluating Learning Techniques (TIELT) is a software tool that can be used to analyze autonomous and semi-autonomous models of dynamic, goal-oriented planning behaviors in Semi-Automated Forces (SAF). Scenario developers and researchers can use TIELT to assess implementations of different decision-making and learning models for their ability to 1) determine appropriate training procedures, 2) sequence essential mission tasks, and 3) adapt methods for executing those tasks to meet mission performance objectives. To support these tasks, TIELT employs a unique interface description strategy that facilitates interchangeable communications between pre-existing simulations and agents. TIELT is a key component of the DARPA/IPTO Transfer Learning Program, for which it is being used to evaluate state-of-the-art transfer learning technologies. We briefly describe TIELT and our efforts to design an interface that will allow it to perform as a federate in a High Level Architecture (HLA) environment. We also describe our planned effort to evaluate TIELT-integrated models for their ability to improve decision and learning processes using OneSAF.IntroductionMany notable experts agree that novel machine learning and related state-of-the-art technologies for intelligent agents could serve a valuable role in future simulators of Semi-Automated Forces (SAF), although it’s understood that these technologies must be carefully applied [1]. One way to enhance progress on studying these issues is to reduce the effort required to integrate implementations of these technologies with these simulators. Achieving this goal requires thinking of an autonomous or semi-autonomous simulation as separable into two components, which we refer to as the decision engine and the action engine, respectively. The decision engine is the component of the simulation code that processes the internal and external (relative to the simulation itself) stimuli and produces a command to perform an action. For example, suppose a ship simulation receives a radar return input on its port side. The decision engine could analyze this information, decide to aim a gun at the target, and send an internal message to the action engine to move the gun. In contrast, the action engine is the component of the simulation code that receives internal and external (relative to the simulation itself) stimuli and makes a change to the physical characteristics of the model (e.g., change direction, speed, aim of weapons, or sensors).This separation suggests an integration architecture could be defined that integrates these two components through a middleware tool. NRL recently developed such a tool, named TIELT (Testbed for Integrating and Evaluating Learning Techniques) [2]; it is designed to reduce the effort required to integrate decision engines with action engines. In particular, TIELT is designed to make it easier for researchers to test their intelligent agent programs, serving as decision engines, on a large variety of (e.g., command and control) tasks defined in action engines, and also to compare their approach versus alternative agent programs on these tasks. To date, TIELT-integrated action engines have primarily been open source and commercial gaming simulators (e.g., of real-time strategy games). This paper instead focuses on making it available for use with military simulators. Given this, Section 2 introduces TIELT, Section 3 reviews the High Level Architecture (HLA), and Section 4 describes our contribution: the design of an HLA interface for TIELT that will allow it to communicate with HLA-compliant military SAF simulators. We discuss our future evaluation plans in Section 5 and conclude in Section 6. TIELTAlthough the study of intelligent agents with military and non-military simulators is of increasing interest to the AI community, few mature tools exist to support the difficult task of integrating these agents with the action engines of these simulators. Instead, researchers and practitioners have to laboriously integrate these agents, and repeat similar effort-intensive tasks for each such integration. This makes it difficult to quickly test an agent on multiple tasks from a variety of simulations, leaving the researcher (and others) to question the generality of results obtained from working with only one simulation. This motivated our development of TIELT (Figure 2.1), a software tool for connecting the action engines of simulations, referred to simply as simulators in Figure 2.1, with intelligent agent programs. Briefly, TIELT provides a simple methodology and a GUI, inspired by Eclipse [3], for creating these integrations through a set of user-defined knowledge bases. In particular, users define the format and content of simulator-TIELT messages using the Simulator Interface Description, and similarly encode the Agent Program Interface Description (APID) to define the format and content of messages between an agent program and TIELT. That is, the APID describes how percepts and high-level commands (e.g., concerning how to initialize an independent variable in an experiment) are communicated to the agent program, and how the agent program, serving as a decision engine, communicates actions to TIELT. Communications are in the form of instantiated message templates. In summary, these two knowledge bases provide APIs for agent programs and simulators, respectively, to communicate through TIELT.  The Environment Model describes a simulator’s environment to TIELT. It is composed of (1) state variables, (2) action models, (3) percept models, and (4) environment properties. Each state variable represents an aspect of the environment that is accessible by the agent. Action models describe how an agent can interact with the environment, where an action is a discrete unit of communication that is sent to the environment and may change the state of the environment. These models also encode an action’s preconditions and effects. Percept models describe a discrete capability of perception available to an agent interacting with the environment. These models may include a sensor model, which provides information on the probability of receiving a percept in a given state. Finally, environmental properties are a set of high-level characteristics that describe the environment, such as whether it is static (i.e., does not change while the agent is reasoning) or dynamic. TIELT relaxes the assumption that the agent program is complete ( that it can process all available environmental percepts and address all the tasks of an agent in the integrated simulator’s environment. Instead, users can optionally define a Performer Description so that incomplete agents can be used to solve agent subtasks in the environment, in which case this component defines a performer that can respond to percepts and send actions on behalf of the agent subprogram. Performers employ the TMK hierarchical task structure representation [4] for describing tasks that can be performed and methods (i.e., state machines that call lower-level tasks or actions) that provide procedures for performing those tasks. In this case, the role of an agent subprogram can be defined by an external method that defers a task to the agent subprogram. Whenever this external method is to be executed, the agent subprogram is invoked to execute it.TIELT has been used to integrate a variety of decision engines, implemented as agent programs, and action engines of simulators. For example, we have integrated TIELT with the CAT case-based reasoning agent and a well-known real-time strategy game clone named Wargus, and used TIELT to run experiments that assess how well CAT performs versus other agents on its ability to learn to win Wargus games versus random opponents [5]. In addition to integrating open-source simulation engines such as Stratagus, in which Wargus is implemented, TIELT has also been integrated with a dozen other simulators, including a variant of the engine underlying the popular RTS commercial game Empire Earth II( and a research variant of Full Spectrum Command, which has been deployed for Army training tasks. In addition to CAT, TIELT is currently being used as an evaluation testbed for state-of-the-art technology systems being developed through DARPA’s Transfer Learning Program, which has resulted in the development of APIs for several agent programs that implement state-of-the-art transfer learning agents. Where feasible, we are making these APIs, simulators, and agent programs available for others to use in an online repository, so that comparison studies can be conducted to assess the relative capabilities of different agents on the same tasks. Likewise, developers of military simulators could use such a repository to assess the utility of different agent programs on a task of specific interest to them, such as controlling an adversary’s units in a SAF simulator. However, to be useful for such simulators, TIELT must support an interface that complies with the standards they employ. Section 3 describes an architecture for one such standard, while Section 4 describes our design for such a compliant interface in TIELT. High Level Architecture HLA provides the framework and guidelines/rules for defining a common architecture for simulation. An HLA simulation consists of models that act as federates in a larger simulation. Using HLA guidelines, groups of these federates can also be combined into federations. The HLA standards, which are maintained by an IEEE working group, have been designed to promote maximum flexibility and reuse among compliant models. HLA objects conform to rules set out in a Federation Object Model (FOM) and communicate via a common interface called a runtime infrastructure (RTI), which provides synchronization and data exchange services. Suitably integrated, HLA’s plug-and-play flexibility could enhance TIELT’s functionality. As described in Section 2, TIELT is designed to ease the testing of different agent programs on different simulator action engines. HLA’s design principles further enhance this functionality by providing a framework that makes it easier to separate the decision and action components of the simulation model. Our goal is to implement TIELT as a federate that can be interposed between these two components so as to evaluate the utility of alternative agent programs to serve as decision engine components. We will not provide an in depth review of HLA here. For additional details, please refer to the IEEE Standard 1516-2000 series of documents.Design of a TIELT-HLA Interface We will create an HLA interface for TIELT that would allow TIELT-integrated agent programs to access military simulators that follow the HLA standard. A TIELT HLA interface will permit the use of DARPA-sponsored transfer learning systems, and any other integrated agent programs, to control agents in these simulators. Technical approachFigure 4.1 describes the functional architecture that we envision for integrating TIELT-connected transfer learning systems with military simulators through the HLA interface that we will create. On the left is a list of military simulators that can be made available throughout our efforts to develop a HLA interface with TIELT. For example, this will include OneSAF [6], a well known and state-of-the-art simulator of computer-generated forces. OneSAF employs the IEEE Standard for Distributed Interactive Simulation (DIS) Application Protocols. Therefore, we will design an additional interface to permit TIELT’s HLA Interface to communicate with OneSAF using the DIS protocol. Next, our focus, highlighted in Figure 4.1, will be on designing, developing, and demonstrating TIELT’s HLA Interface (i.e., in an integration as depicted in Figure 4.1). This interface must allow TIELT to conform to the FOM and communicate with the other federates via the RTI.This interface will communicate with TIELT via a simulator-specific API, as shown in Figure 4.1, which will identify the percepts available from that simulator and the actions that it supports. Finally, we display TIELT and a connected agent program in Figure 4.1. We will select or develop a simple agent program that is appropriate for controlling the decisions of a selected agent in the selected simulator’s action engine. In summary, we will develop an HLA interface that permits TIELT to communicate with military simulators via the HLA protocol, select a simulator for demonstrating the utility of this interface, develop a simple TIELT API for that simulator, select (or develop) a transfer learning agent program for controlling a specific agent in the simulator (through TIELT), and demonstrate the entire set of integrated systems on a suitable task that can be realized by the selected military simulator. BenefitsWe envision two payoffs from our efforts. The first concerns providing developers/users of military simulators with access to state-of-the-art transfer learning and related agent programs. The second concerns enhancing the military relevance of DARPA’s Transfer Learning Program. Increasingly autonomous and semi-autonomous vehicles are being introduced into military service and, correspondingly, into military simulations. In addition, computer-aided decision systems are being integrated into state of the art C4ISR systems. All of these “intelligent systems” need to be accurately modeled for testing and training purposes. TIELT integrations of simulators with agent programs will permit simulation developers to validate the accuracy of their decision-making models and end-users to verify that the finished product is working correctly.The second payoff concerns DARPA’s Transfer Learning Program. Our integration and demonstration will permit military simulator developers to access state-of-the-art transfer learning technology products developed through this Program. As noted by many authors (e.g., [1]), many potential opportunities exist for incorporating automated learning capabilities in military simulators. Thus, this integration should permit developers and users of these simulators to create training scenarios that involve intelligent adversaries and friendly forces. This should in turn permit the development of more realistic and suitable scenarios for accomplishing training goals involving that simulator. Evaluation plans  We will evaluate the integration of TIELT into an HLA environment in three phases. In phase one, the integrated agent program will serve as a listening agent only. The evaluation criteria will be to verify that TIELT successfully subscribed to all messages sent between the agent program and the simulation’s action engine.  In Phase two we will choose a specific model or simulation (e.g., OneSAF) to evaluate using TIELTs ability to influence the federation. Phase two should result in the ability to manipulate the action and decision engines using TIELT’s functionality.  Phase two should also meet the criteria defined in phase one.In Phase three we will further refine the TIELT HLA interface so that the FOM will be interchangeable without modifications to the TIELT HLA interface. TIELT will be tested with different FOMs to ensure the functionality is unchanged. Phase three’s evaluation criteria will be the successful attainment of all Phase one and two criteria for each FOM evaluated.We envision using TIELT to evaluate a decision process in at least the following three scenarios, the first two of which involves humans interacting with decision engine:  Proper decision process is known, Human in the loop for training. This involves training new personnel to think and act in accordance with the proper procedures for executing a task. TIELT could be used to collect their decisions both before and after training. An analysis focused on whether the training objectives were attained could aid not only in providing feedback to the trainee, but also in refining the training program itself.Proper decision process is not known, Human in the loop. TIELT could evaluate different scenarios to suggest the best decision response choices.  Proper decision process is known, Computer in the loop. TIELT could evaluate how well an agent program is making decisions.          Conclusion TIELT’s ability to evaluate the decision engine of a simulator for autonomous and semi-autonomous forces can provide significant feedback to both users and developers. In addition, the flexibility of TIELT’s design allows it to interact with disparate model types. By adding the capability to integrate TIELT into an HLA environment, TIELT can be brought into the mainstream of the simulation field and increase the capabilities of simulations to which it is applied. We will conduct a search for military customers who could benefit from TIELT’s capabilities. Our search will focus on customers who could clearly benefit from the integrations made possible through our efforts. In addition, we will search for additional simulation events that could utilize TIELT. The analysis benefits it can provide would make it a valuable asset to any simulation exercise that uses automated decision models.AcknowledgementsThanks to Matt Molineaux for his comments on an earlier draft of this paper. TIELT’s development is being supported by DARPA. The views and conclusions contained in this document are those of the authors and should not be interpreted as necessarily representing the official policies, either expressed or implied, of DARPA, NRL, or the United States Government.Author BiographiesDR. DAVID W. AHA leads the Intelligent Decision Aids Group of NRL’s Information Technology Division. He has lead several projects related to the research, development, and/or deployment of software decision aids that incorporate artificial intelligence techniques. He currently leads the evaluation team for the DARPA/IPTO Transfer Learning Program, whose tasks include further developments of TIELT so that it can be more easily used by researchers and simulation developers who wish to test the utility of state-of-the-art agent programs on tasks defined within appropriate simulators. This paper focuses on one approach for transitioning the TL Program’s products to military customers.LCDR JOHN CHRISTMAN has a B.S. in Computer Science and has been involved in the modeling and simulation field for the past four years. Supporting the DARPA/CECOM Future Combat System, Command and Control (FCS-C2) Experiments, he was responsible for extracting, reducing, and formatting simulation test data from the OTBSAF based simulation. In addition, he assisted with development of experiment design, data collection and reduction plans and reports.  Following that effort LCDR Christman was a member of the FCS Aerial Sensor Integrator (ASI) Modeling and Simulation (M&S) effort. Primary responsibilities included requirements definition and defining, coding and testing of the interface between the aerial sensor models and the Command and Control simulation. Most recently, LCDR Christman participated in the data collection and evaluation for the MITRE led Maritime Dynamic Targeting Simulation Exercise. In addition to his software and modeling and simulation background, LCDR Christman brings 10 years of experience as a Surface Warfare officer. Having served in numerous positions during his career, he lends tactical knowledge to the program that will help identify opportunities for use of the TIELT application.References[1] Petty, M.D. (2001). Do we really want computer generated forces that learn? Proceedings of the Tenth Conference on Computer Generated Forces and Behavioral Representation. Norfolk, VA: Simulation Interoperability Standards Organization.[2] 	TIELT (2006). Testbed for Integrating and Evaluating Learning Techniques. [http://nrlsat.ittid.com][3]	Eclipse (2006). [http://www.eclipse.org][4] Stroulia, E., & Goel, A.K. (1995). Functional representation and reasoning in reflective systems. Applied Intelligence, 9, 101-124.[5] Aha, D.W., Molineaux, M., & Ponsen, M. (2005). Learning to win: Case-based plan selection in a real-time strategy game. Proceedings of the Sixth International Conference on Case-Based Reasoning (pp. 5-20).  Chicago, IL: Springer.[6]	OneSAF (2005). OneSAF Objective System. [http://www.onesaf.org/onesaf.html]Figure 2.1: TIELT’s Functional ArchitectureFigure 4.1: Functional architecture for integrating a military simulator with TIELT via an HLA interface