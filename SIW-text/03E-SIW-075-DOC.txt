Creating System Integration Simulation Environments: Common Design Principles, A Component-Based Reference FOM and aSystem-of-Systems Federation Development ProcessDr. Judith S. DahmannMITREGunnar ÖhlundSwedish Defence Materiel AdministrationBjörn Löfstrand,Staffan LöfPitchDr. Gary Eiserman,Jayne TalbottVirtual TechnologyKeywords:ABSTRACT: Development, deployment and employment of military forces today is a multi-organizational and multi-national enterprise. Only very rarely are force deployments in world crises undertaken by a single organization. Modeling and simulation supported by international, commercial standards provides the technical means to create collaborative environments which can be used by coalition partners, throughout the development and employment process, to ensure that systems deployed by partner nations can effectively work together in coalition operations. In the Coalition Interoperability through Standards-Based Collaborative Environments (CISE) project, the US and Sweden have taken the first step in developing a set of design constructs to facilitate the rapid creation of simulation environments to support system integration. These constructs include (1) a set of design principles to guide the development of systems integration federations, (2) a starting point for FOM development which offers a structured set of reusable components in the form of a Systems Integration Reference FOM, and (3) a process which outlines the steps involved in designing a federation to address systems integration issues separating the issues to be addressed by the domain users of the federation from the tasks of federation systems engineering.1 BackgroundDevelopment, deployment and employment of forces today is a coalition enterprise. Only very rarely are force deployments in world crises undertaken by a single nation.  Coalitions of national forces are the norm for almost all current operations, making agile and effective force interoperability a key element in the ability to quickly and effectively respond to crisis situations.  Unfortunately, today’s national C4ISR and force developments and employment strategies tend to be done individually on a national basis, posing serious obstacles to effective coalition operations. Modeling and simulation supported by international, commercial standards (e.g. IEEE 1516 High Level Architecture [1]) provides the technical means to create collaborative environments which can be used by coalition partners, throughout the development and employment process, to ensure that systems deployed by partner nations can effectively work together in coalition operations. 2 IntroductionIn a collaborative effort Sweden/SE and The United States/US created a set of supporting capabilities that facilitate the development of simulation-based environments to address systems interoperability issues. The original motivation for the effort was to enable environments to address interoperability of coalition forces.   In the course of the project, however, it became clear that the technical issues that face development of environments to support system interoperability (System Interoperability Simulation Environments (SISE)) are fundamentally the same whether the systems come from different organizations within a nation or from different nations. Hence, these enabling capabilities can be used by individual nations to assess interoperability within their own inventories as well as between force elements from their respective force inventories to support coalition operations.  In both cases, the environments will be based on open, international standards, which will support future participation by additional partners from within participating nations or from additional coalition partners.2.1 PremisesThe enablers for system interoperability described in this report are based on a set of premises.  First, building on international industry standards will enable broad open participation by multiple organizations which is particularly important when addressing systems interoperability since by definition, systems of interest will be developed by different organizations, making the need for the supporting environments to be accessible to multiple organizations a necessity.  When operating in an international arena with the resulting constraints on information sharing, focusing shared environments on open international standards has particular advantages, however these advantages apply to systems within a nation developed by multiple commercial organizations as well.  Second, the family of IEEE 1516 standards which address the High Level Architecture and supporting federation development and execution processes form the basis for our work.  These standards provide an excellent starting point for collaborative environments for systems interoperability.  Finally, our starting assumption was that a common federation object model (FOM) was the key element needed to facilitate rapid development of federations. However, early in the project, we recognized that this was only one part of what was needed, and hence our final product went beyond this into other key areas of federation design and development processes.2.2 SISE ‘Design Package’An initial federation ‘Design Package’ has been proposed which is intended to support the creation of HLA federations to support system of systems interoperability.  This includes three components:Systems Interoperability Reference FOMSystems Interoperability Reference FOM – A FOM which serves as a reference and starting point for creation of a FOM for a particular federation, is a key part of our product set of federation design tools.  The reference FOM is based on lessons learned from a number of different US and SE federations.  It is intended to provide a starting point for FOM development, with the idea that a common starting FOM can shorten the time and effort required for FOM development and aid in more efficient reuse of components from prior federations. SISE Design Issues – There are a set of additional decisions which are made in the design of a federation which are equally important in ensuring the environment is designed for the problem.  Hence an initial set of design issues has been proposed to guide the development of a SISE.  Many of these are issues that are addressed in any federation.  The experience with these in system of system federations is the focus of this discussion.SISE Development Process – Finally, a notional process for applying these tools to the design of a SISE is also included.  This process is an approach to implementing the first three steps of the FEDEP for SISE federations.  These three products are based on the collective experience of the members of the SE/US team and as such are an effort to codify the current experience base (or ‘best practice’s) in the design of system of system federations.  Both SE and WE will apply these capabilities in national efforts as well as applied in future collaborative ventures.3 Notional Process3.1 Objective of the ProcessA notional process has been proposed for the development of a federation to support systems integration and interoperability, as a process framework for applying the reference FOM and the design principles.  The process is based on experience of both the US and Swedish CISE project participants.  It attempts to streamline the process by organizing it so that it brings together the right expertise to address different issues as they present themselves in designing federations intended to address system of systems interoperability issues, whether they be from different national organizations or from coalition partners.3.2 Relationship to the FEDEPThe Federation Development and Execution Process (FEDEP) is currently being standardized (IEEE1516.3, [1]) as a general process for creating federations.  It lays out seven basic steps, along with the products and processes inherent in these steps.  The FEDEP is depicted below in Figure 1.Figure 1:  Depiction of the 7 Step FEDEP ProcessThe SISE notional process is an overlay to the FEDEP outlining a proposed approach for implementation of the steps in the FEDEP with emphasis on the planning and design part of the process, steps 1 – 3.3.3 Three Stage FEDEP OverlayThe 3 stages in the SISE process are shown in Figure 2 as they relate to the FEDEP.   Figure 2: SISE Overlay to the FEDEPSISE work concentrated on the initial phases of the FEDEP (FEDEP steps 1-3) involved in the planning for federations.  This process presents (1) an approach to developing the understanding of the user problem that is amenable to a (2) structured federation engineering approach which applies the reference FOM and design principles. Subsequent federation development, execution and analysis activities (FEDEP steps 4-6) have not been addressed.  While there are possibilities for extension of these planning approaches into the later stages, they have not yet been considered, so at this point are assumed to have no distinguishing characteristics.  The remainder of the discussion focuses on federation planning and design.Based on the SISE experience, the first three steps in the FEDEP are supported by two sequential and overlapping activities.  The first addresses developing a solid understanding of the problem space to be depicted; the second addresses the technical process of engineering a federation.  The two are viewed as separate processes with different participants with different orientations towards the problem at hand.  In the first activity, (see figure 3) a series of steps are undertaken to depict the user space to be represented in the federation.  This includes developing an understanding of the intent of the federation.  What information is the federation expected to provide?  How will that information be used.  From the user point of view, what are the critical elements of the problem space that need to be depicted? Which systems? What aspects of the systems?  What environmental factors need to be incorporated to achieve the intended purpose? This activity is intended to create depiction of the problem space at a sufficient level of detail to support federation systems engineering.  Figure 3:  Steps in the Depiction of User Problem SpaceIn the second activity, the federation systems designers use the detailed depiction of the user problem space to engineer the federation, employing the reference FOM and design principles.  This activity often generates specific added questions about the user problem space which need to be addressed in order for the design to proceed.  This causes a return to the initial activity for review, clarification and elaboration, until the problem space is understood sufficiently to proceed with a full design.Several things motivate the separation of the three initial FEDEP steps into these two activities.  First, the activities revolve around two different sets of people and expertise.  The first requires strong understanding of the user domain and the substantive problem focus of the federation.  The second requires translation of the problem understanding into the technical design of a distributed federated system and is basically a technical engineering problem.  A successful federation requires both, but the idea here is that federation engineering expertise is common across federation independent of the domain, while user domain knowledge is localized to a specific problem domain.  By developing a structured approach to characterizing the problem domain which supports the engineering process, use of the domain expertise, which can be scarce and high demand, can be made more efficient.  At the same time, this approach allows for the lessons learned from federation design to be understood and applied in a way separate from the domain problem, in this case in the form of the reference FOM and design principles.  In the next sections, these two activities:  “depicting the user space” and “federation systems engineering” are discussed in terms of the process and products anticipated for each, using an example to illustrate the approach.4. Depict User Problem SpaceAs with other federations, the first stage in developing a federation to support system integration/interoperability is to develop a robust depiction of the user problem space that is attuned to the issues of specific relevance to the federation objective.  Experience suggests that in many cases users do not naturally provide the federation engineer with the information needed to design a federation.  Consequently, a structured process to assist the creation of this depiction is recommended.  4.1 Initial Description of Federation ObjectivesBeginning with the customer, the first step is to develop a working description of the objectives of the federation.  In systems interoperability/integration federations, the interest is typically in evaluating how well systems operate together to achieve the mission objective.   As with the general FEDEP process, the process starts with developing a clear statement of the objectives with the customer of the federation.  This is typically simply presented in text form, but is kept close at hand because all subsequent discussions eventually refer back to this objective.  “Given that this is the objective of the federation, what roles does….  Or why is this …  important….” It is not unusual for the federation objective to get reviewed and revised as this process proceeds.4.2 Level 1 Problem DepictionThe next step is to create a ‘first order’ or ‘Level 1’ description of the problem space.  This Level 1 depiction includes (1) defining which systems are to be included, what (2) actions will be taken by each system and how these are expected to affect the other systems.  (3) Vignettes will be defined that describe the dynamics of the interaction and help to identify any added systems or phenomenology, which must be included in the federation to meet the user objectives.  The vignettes also provide the first step in defining the needed characteristics of the scenario for the federation.  Finally, (4) there are questions of what data will be generated by the federation and how that data will be used in the analysis, including the metrics that will be applied in the analysis.    The focus here is on what is termed the first step in the ‘conceptual analysis.  In this case, a “level 1’ depiction provides an end-to-end functional description of the way the set of systems in the user space operate in the ‘real world’ to accomplish the mission of interest and what data needs to be generated and collected to support the analysis. The result of this analysis is a level 1 depiction typically recorded as a graphic representation of the systems and their interactions.  This first level description helps to scope the problem and to identify the types of expertise which will be needed to develop a more detailed depiction which will be needed to support the federation design.  At this stage, the federation manager may identify the fact that more work is needed on the part of the user to understand the real nature of the problem of interest and the desired analytic approach to addressing the problem.  Without a good user understanding of these, a detailed federation design will not be possible.4.3 Level 2 Problem DepictionUsing the level 1 depiction as the stating point and working with assembled subject matter experts in the systems and environments involved in the problem area, a more detailed or level 2 problem depiction is developed. This activity focuses on the subject matter experts in the problem domain along with the problem analyst with a clear understanding of the analysis to be supported by the federation.In the level 2 analysis, the first order depiction is reviewed and extended to provide the information needed to engineer the federation.  This activity focuses on the subject matter experts in the problem domain along with the problem analyst with a clear understanding of the analysis to be supported by the federation.The level 2 depiction builds on level 1, adding information about those aspects of the systems of specific interest.  The level 2 model will contain (1) more detailed descriptions of systems focusing on their elements which are directly relevant to the federation objective along with (2) sequence diagrams of the interactions among elements of systems. In addition, (3) the characteristics of the scenario context that are necessary for the federation to address its objectives are identified.   Using this depiction, (4) the data needed for analysis will be located in the detailed depiction.  This will include how  the data will be generated, where it will be collected and finally how it will be used in the resulting analysis.  This becomes an end-to-end detailed storyboard of the federation and its dynamics.  A walk through of the process with the federation manager will help to surface missing information and help ensure a solid understanding of the federation problem domain before engineering commences.  Once it is possible to map specific system characteristics and/or interactions among system elements to the data needed for the analysis, the problem analysis is sufficiently refined to support federation design. It is not unusual for the level 2 analysis process to lead to the need for a review and revision of level 1, if not the federation objectives themselves.  As more information surfaces in the problem understanding process, the way to depict the problem for federation purposes may need to be reconsidered.   Another product of the level 2 analysis phase is the identification of candidate federates for incorporation into the federation.  Since these federates often are simulated, or software/hardware-in-the-loop representations of systems, the subject matter experts have a good understanding of the available options and preferences based on their understanding of the problem space.  These recommendations provide a starting point along with the level 2 problem depiction for the federation systems engineers.Level 2 depictions are documented using more formal approaches.  UML [2] provides a flexible, standards-based approach to representing this information.  The completed level 2 description is the problem depiction that starts the federation systems engineering process.5. Federation System EngineeringWith the completion of the level 2 model, the effort transitions to the federation systems engineering activity.  This activity addresses the technical design of the federation using the level 2 analysis results in the form of the problem depiction in the level 2 model along with the recommended federates as the primary sources of information.  The federation system engineering activities are shown in figure 4.Figure 4:  Federation Systems Engineering ActivityThe federation engineering team (1) first selects federates, beginning with the recommendations from the subject matter experts assessing the proposals against the needed representations of system elements.  They then (2) map the element/activity sequence information to federation sequence diagrams and FOM elements.   This will help define the scope and level of fidelity required of the federation. They (3) map the sequence diagrams and FOM elements to the federates. The federation engineers then (4) review design principles, identifying those that relate to this federation and following design guidance formalize the design of the federation in terms of federation agreements. This provides the problem framework (s) to apply the reference FOM, with needed excursions following reference FOM guidance documentation to develop the FOM. 6. Design IssuesMoving from the problem depiction to the federation design is a key step in the FEDEP process, as the process shifts from description and analysis to design and creation.  As is noted earlier, while the FOM is an important federation design component, there are a set of design decisions which are made in the development of a federation.  Right now there is no explicit mention of these in the HLA standard or in the FEDEP process.  Rather, each federation tends to make federation design decisions which are embedded in the federation products and, to some degree,  are reflected in what are called ‘federation agreements’ with the decision of what issues to address, and how to address them left to each federation development.  SISE experience suggests that there are a set of decisions which are routinely made in systems of system federations.   An articulation of these issues along with experience with past federations in addressing them can be very valuable enabler to the developer of a new federation in this area.  While not all issues will apply to all federations, providing a mechanism to alert federation developers toareas to consider is in and of itself of value.  In addition if guidance on these issues can be provided based on actual federation developments, the new federation can benefit from past experience.  Again, the current set of design issues and guidance is just a starting point, with the potential for cumulating of added experience and improved guidance.These issues and options, design patterns (or design '‘mönster'’ in Swedish), include:(i)	Representation issues (time, space, system and behavior representation)(ii)	Information exchange issues (attribute updates, interactions, and default reasoning) (iii)	Federation and Scenario Management (iv)	Data Collection and Analysis Requirements(v)	Performance.  These design principles outline areas to be addressed in the design of federations to address system interoperability and integration, with guidance on different factors and options to consider based on experience.   They were added as part of an overall ‘design package’ along with the ‘reference FOM’ and a notional process for federation design of federation to address system interoperability/integration. 6.1 Representation issues Design issues related to how time, space, system and behavior are to be represented in a federation are key.  For reusability and extensibility, it is advisable to generally structure the representation to reflect the real-world as much as possible and use objects for persistent things, use interactions for transient things and use natural interfaces / functional areas to guide representation structure, separate the representation of ground truth from perceived truth, use international standards for naming, units and encoding, and allow systems to be represented at different levels of fidelity, organizing the FOM in such a way that allows federates to subscribe to attributes and interactions at appropriate levels.  6.2 Information exchange issues Design for information exchange addresses issues concerning attribute updates, interactions, and default reasoning.  The focus here is on efficiency in data exchange, with guidance to minimize redundancy of input and output data, sending data only when it changes, which means organizing the FOM in such a way that allows federates to subscribe to attributes and interactions at appropriate levels.  Given the fact that most SISE federations are executed to generate data for analysis, exchanged information should be traceable to allow for post event data analysis and tracking, allow for interactions and attribute updates to be traceable back to the source and through time. Methods of data exchange synchronization, of data tagging and of methods for handling ground truth and real world message exchange are provided in the SISE design package.6.3 Federation and Scenario Management HLA provides mechanisms for management of a federation, but it leaves many of the issues associated with the use of these mechanisms to the federation designer.  In the SISE design package, the issues of managing a federation and the federation scenario are reviewed and guidance is provided.  Topics include deployment of startup data, application start and stop, configuring and managing federation execution (create, join, reconfiguration and monitoring), outlining options and providing recommendations.6.4 Data Collection and Analysis RequirementsGiven the objective of the federation, the data analysis to be supported by the federation execution is a driving factor in the design of the federation and the scenario.  Particular attention needs to be focused on any data that needs to be added to the FOM or data tags which need to be added to updates and attributes to support the analysis.  In addition, data which will be collected from federates (or other sources, e.g. configuration data) needs to be identified and planned for, as will methods to merge the data into a common analysis data set.  A plan is recommended to pretest data collection and analysis prior to executing the federation.  Design issues particularly address the issues of data handling to ensure post execution traceability and on efficient and effective logging/data collection.6.5 PerformanceThe last area is the design of the federation for performance.  Here, it is first important to understand the federation performance requirements and then ensure that the desirable design from a functional and affordability perspective will meet the performance requirements.  Performance issues cut across all aspects of a federation.   This includes selection of hardware and software, including the RTI implementation and the underlying network.  It includes efficient data exchange design, as well as efficient implementation of federate RTI interfaces.  7. Reference FOMOne of the key activities in the development of a federation is the definition of the necessary data exchanges among federates, or in HLA terminology, the definition of the Federation Object Model (FOM).   As described in the preceding session, the level 2 problem depiction provides a structured approach (1) to identification of the needed functionality and hence (2) for selection and assessment of candidate federates, and finally, (3) for definition of federation data exchanges.    Today, federation object model (FOM) design is typically a bottom-up collaborative process.  Even if all federates are experienced participants in HLA federations, because the HLA standard is silent on what data are exchanged or how those data are represented, each federation addresses these issues for itself.  Flexibility to tailor FOMs for federations was viewed as a necessity of HLA was going to be applicable to a broad set of application areas.  However, the consequence is that FOM development can be a time consuming process.  One option, recommended here, is to create a FOM that can be used as an independent starting point for creating federations, as design tool for developing a FOM tailored to the specific needs of a federation.  We term this a ‘reference FOM’ since the FOM serves as an initial point of departure in FOM development, and it is a common reference used across federation developments.  The expectation is that this approach will shorten the process of FOM development and will move FOM development into the domain of federation systems engineering.   With this approach, experience drawn from across federation developments can be brought to bear on this critical design task, while responding to the specific needs of the particular federation as reflected in the level 2 problem depiction.  In addition, common services (communications, environment, etc) can be supported by FOM components that are used in each FOM where these services are needed as part of the federation.The SISE Systems Interoperability Reference FOM is based on an integration of FOM experiences from both SE and the US.  The US brought a common FOM based on the Army Joint Virtual Battlespace and the AF Joint Synthetic Battlespace as their contributions, and SE drew from LedsystT and other systems development federations.   The idea is that the FOM would be expanded in new areas needed by a specific federation and there may be options for representation of different elements depending on the level of detail needed for the federation.Using the level 2 problem depiction, each object type is mapped to the appropriate FOM category, and the attributes of relevance are identified.  Missing attributes can be added for the FOM for the specific federation, and unneeded attributes can be left out of the new FOM.  Likewise, addition object classes and type can be created for the new FOM if necessary, but a priority would be given to reusing the classes and attributes provided in the reference FOMIn the following sections the organization and general structure of the object and interaction classes contained in the reference FOM are discussed.  Because this is a reference FOM, the set of object and interaction classes is not exhaustive.  Hierarchies of objects and interactions are defined only far enough to illustrate their underlying organizing principles and to provide illustrative examples.  The same is true of the attributes and parameters that these classes contain.  The goal here is to provide a sound foundation for federation development, not to provide a single comprehensive solution for any and all federations, which is surely an  impossibility.7.1 Object ClassesFigure 5 shows a view of the major object classes defined in the FOM.  These classes group into five major categories:  AbstractEntity, Behavior, EnvironmentCondition, and PhysicalEntity.   In keeping with the design guideline of using objects to model persistent information and things and interactions to model transient events and messages, each of the object categories represents a distinct kind of persistent information needed to execute many of the federations in the author’s experience.   Other design principles that have been applied in the design of the object class hierarchy are to use real world distinctions and interfaces to help define object classes and to maintain a distinction between the entities being simulated and other information exchange needed to manage the federation.Figure 5: Systems InteroperabilitySISE Reference FOM Object ClassesModeling Physical ThingsPhysicalEntity is probably the easiest to understand.  The object classes under this class represent physical ‘real world’ things that will be simulated by the federation.   Under this class are three subclasses; Platform, Equipment, and CulturalFeature.  A Platform is defined as any single, self-contained entity in the synthetic environment, such as a truck, tank, individual soldier, missile, etc.   Note that this definition does not preclude platforms from carrying or being attached to other platforms, as with missiles on an aircraft or soldiers in a transport vehicle.  The fundamental idea here is that a Platform is something that carries equipment and has an independent existence of its own.  The Platform class is further subdivided into different classes of platforms; Aircraft, GroundVehicle, Individual, SurfaceVessel, etc.  The distinctions here reflect real world distinctions based on domain, characteristics, and application, as well as the fact that different legacy simulations tend to focus on particular domains.The Equipment class represents the real-world things that are carried by Platforms to enable them to carry out their missions.  The example subclasses in the reference FOM; Medical, SensingEmitting, SignalProcessor, and Weapon, reflect general classes of activities that Platforms may perform.  The SensingEmitting class is further expanded to illustrate how a FOM can support the modeling of signal transmitting and sensing (receiving) functionality at different levels of resolution.  The object classes under the SystemLevel class represent systems such as radars or communications equipment at a more aggregated level, where the overall performance of the system is modeled, but the detailed inner workings are not made explicit.   If the state of individual components, such as transmitting or receiving antennas, tracker/correlators, etc., must be explicitly modeled, then objects at the ComponentLevel should be defined and used.The SERFSystems Interoperability Reference FOM contains a Munition class under Platform and a Weapon class under Equipment.  Either of these could be used to represent a weapon system.  Both are included in keeping with the objective of supporting representations at different levels of resolution or fidelity.   A federation that only needed to model the firing and flyout of a missile or shell might only need the Platform subclass.  A more detailed model that also needed to model functions such as loading and aiming a weapon before firing it might also implement the Equipment subclass.The CulturalFeature class is something of a catchall for persistent man made objects that are important to the simulation but that don’t necessarily fit into, or need to be modeled at the same level of fidelity as, the Platform class.  Examples of CulturalFeature objects might be bridges, berms, dams, or other constructs that may not carry equipment and may not be active participants in an exercise, but that may be of tactical significance, may be targeted and damaged.The EnvironmentCondition object class and the classes under it also represent persistent real-world things modeled by the federation.  In this case, these objects model the state of the natural environment.   The reference FOM defines object classes to model the state of the different domains of the physical world; the Atmosphere, Ocean, Space, and the Terrain.  Modeling Abstract ThingsIn many federations, modeling discrete physical objects and the natural environment is not enough.  More abstract quantities, such as organizations or communications networks, may also be critical to the simulation.   The reference FOM reflects this with the AbstractEntity class and its subclasses.   Each of these represents something that is a well understood real-world concept, but does not correspond to a specific ‘thing’, such as a vehicle.   The example subclasses under AbstractEntity include OrganizationalUnit, which is intended to model aggregates of individuals or lower level units, several classes that model various views of communications, including networks, nodes, and links, and a Route object class, which would contain the waypoints and other information that define a route for a Platform.  There is also a StealthViewer class, which would be used to model the position, orientation, movement, and any mode settings of “stealth” observation points in the exercise.  Conceptually, it can be useful to think of a Stealth as an undetectable, non-interacting vehicle that can be moved around the exercise to allow observers to monitor an exercise.  The StealthViewer class was placed under AbstractEntity instead of Platform in keeping with the design principle that simulated entities should be kept distinct from simulation tools and artifacts.Sharing Persistent Information Between FederatesThe last of the top level object classes, Behavior, is included as an example of supporting functional decomposition in the FOM.  In many simulations, the models of physical systems, such as aircraft, are tightly coupled with models of their crews or drivers.  Separating behavior from physical model allows different behavior models, including direct human operators, do be used to drive the same physical system models.  This flexibility enables federation designers to select higher or lower fidelity components to achieve performance, scalability, or fidelity goals.  It also allows development resources to be focused more precisely on the functions or components that are most critical to immediate exercise objectives.7.2 Interaction ClassesFigure 6 shows a view of the major interaction classes defined in the FOM.  There are four major categories of interactions defined; Manager, OtherInformation, PhysicalEvent, and RealWorldMessage.   As was stated above, the interaction classes in the SERF are designed to convey transient events and messages.   The major interaction classes have been defined to separate interactions used to manage the federation, the Manager class, from those used to model ‘real world’ interactions.  The remaining classes were broken out according to how the processes they represent will be modeled as well as in accordance with natural boundaries.  Figure 6: SISE Systems Interoperability Reference FOM Interaction ClassesManager InteractionsThe Manager class and most of the subclasses under it are actually the standard Management Object Model (MOM) interactions.  In the SERF, the Report, Request, and Service classes under Manager and Federate were extended to add a number of new interactions that can be used to initialize, monitor, and control the federation.  RealWorldMessage Interactions One of the design guidelines addresses the modeling of explicit communications between simulated entities.  The data that model perception and that are used to provide the content for messages may be contained in a number of places, and these should be kept separate from the interactions that model the sending of specific messages.  This guideline reflects the same real world separation.  It also facilitates the use of different communications models without changing other aspects of the federation.   The RealWorldMessage class and its subclasses model this.   The subclasses under RealWorldMessage are defined according to the different operational activities they represent.  This is a reflection of the fact that different federates will likely only be interested in subsets of the messages, and explicitly separating the subsets can reduce overall message traffic within the federation.The RealWorldMessage interaction  classes also reflect the design objective of supporting different levels of fidelity within the FOM.  Most of the interaction classes contain the content of the messages they represent, but do not represent the exact format of the messages.  One class, EncapsulatedDataLink, and its subclasses, does model messages as closely to the precise real-world format as possible.   Each of the subclasses under EncapsulatedDataLink models messages sent using a specific protocol.  The intent of these encapsulated messages is to provide an interface to and from hardware in the loop systems that may only be able to send or receive messages formatted in precise ways.PhysicalEventMore than just messages will usually get conveyed between the simulated entities in an exercise.  The PhysicalEvent interaction class was defined to carry these other events.  These events are modeled separately from the RealWorldMessage interactions because communications modeling is often done far differently than signal propagation.In the Systems Interoperability Reference FOMSERF, the example subclasses under PhysicalEvent are Collision, MunitionDetonation, and Propagation.  These first two are reasonably self-explanatory.  The Propagation class and its subclasses model the transmission of signal and signature information from sources to sensors.  There will generally be separate subclasses for each class of signals and/or sensors being modeled because the signal characteristics and propagation models are usually quite different for the different classes of signals.OtherInformationExchangeThe RealWorldMessage and PhysicalEvent interactions are intended to model simulated events that occur during an exercise.  In keeping with the design principle of separating simulated things and events from information flow needed to execute the simulation, there is a separate class, OtherInformationExchange, which is used for information exchange other than simulated events.   The subclasses under OtherInformationExchange are used either to share data between two or more federates in order to drive the federation forward or to report information out to support monitoring or analysis.  The Route interaction and its subclasses are examples of the former and the SensorPlatform class and its subclasses are examples of the latter.   The Route interactions support the use of a route planning federate that can be accessed by any other participant that needs to plan and follow routes.8. SummaryIn summary, this paper provided an overview of a set of capabilities developed as part of a bilateral Sweden US cooperative effort to support efficient development of HLA federations for system of systems of systems interoperability.  A structured process overlay to the FEDEP for development systems interoperability simulation environments (SISE), a set of design issues or principles to support federation design and a reference FOM to support FOM design for new federations constitute an initial design package for this type of HLA application which is growing in importance both within nations and among coalition partners.References[1]	HLA IEEE1516 Standards available from  HYPERLINK "http://www.ieee.org" http://www.ieee.org[2] 	Unified Modeling Language. http://www.omg.orgAuthor BiographiesJUDITH DAHMANN is a principal senior scientist at the MITRE Corporation and the Scientific Advisor to Dr. Garber, Director of Interoperability for the US Under Secretary of Defense for Acquisition, Technology and Logistics.  In this capacity, Dr. Dahmann provides technical review, assessment and recommendations on interoperability plans, issues and initiatives, including the application of emerging commercial technologies throughout the system acquisition cycle.   Dr. Dahmann is also participating in the technical development of a DOD enterprise infrastructure initiative to support creation of distributed system of system federations with simulation, hardware-in-the-loop and live systems to support integration and test throughout the life cycle. Prior to this, Dr. Dahmann was the Chief Scientist for the Defense Modeling and Simulation Office for the US Director of Defense Research and Engineering, a position she held from 1995 to April 2000.  In her role as Chief Scientist, Dr. Dahmann led the development of the High Level Architecture, a general-purpose software architecture for the development and interoperation of simulations, now an IEEE Standard (IEEE 1516). GUNNAR ÖHLUND is a project manager for the development of The Swedish Armed Forces Enterprise Architecture at Joint Materiel Command at the Swedish Materiel administration, and responsible for R&D activities within the area of Advanced distributed Simulation (ADS) with emphasis on High Level Architecture and CGF. He was also involved in writing the Swedish Armed Forces M&S Masterplan. He has twenty years of experience from the defense industry with Naval systems.BJÖRN LÖFSTRAND is a software developer at Pitch AB. He holds a MSc in Computer Science from Linköping Institute of Technology. He has been working with HLA since 1996 and his primary focus is on tool support for federation design and development.STAFFAN LÖF is president and CEO of Pitch AB. He holds a MSc in Computer Science from Uppsala University. He has extensive experience from running high-tech companies and managing R&D programs and projects. During 1995-96 he was Attaché of Science and Technology at the Swedish Office of Science and Technology in San Francisco.GARY EISERMAN JAYNE TALBOTTLater we call it CISE Reference FOM (SERF). In the abstract we call it Systems Integration Reference FOM. Lets use SIRF where I stands for either Interoperability or integration.Perhaps some other transition to Design Issues.