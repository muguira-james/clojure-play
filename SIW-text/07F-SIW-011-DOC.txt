Integrating HLA to a Real World SystemVictor SkowronskiRaytheon350 Lowell StreetAndover, MA 01810978-470-9083 HYPERLINK "mailto:Victor_J_Skowronski@raytheon.com" Victor_J_Skowronski@raytheon.comStelios Pispitsos, Scott GlennonRaytheon50 Apple Hill DriveTewksbury, MA 01876978-858-9245, 978-858-5340 HYPERLINK "mailto:sppispitsos@raytheon.com" sppispitsos@raytheon.com,  HYPERLINK "mailto:Scott_E_Glennon@raytheon.com" Scott_E_Glennon@raytheon.comKeywords:Higher Level Architecture, Link-16, IntegrationABSTRACT: The Surface Launched Advanced Medium Range Air-to-Air Missile (SLAMRAAM) program uses simulation to measure system effectiveness. Simulations of sensors, fire units, missiles, fire controllers, and their communications are combined using HLA to model the entire integrated air defense system. The model is then run in a Monte Carlo mode to provide a statistical measure of system effectiveness.A second requirement for the simulation is to run with actual hardware. The SLAMRAAM test facility has a limited number of hardware units but it must test the system as if a full complement of hardware (a battalion) was installed. To do this, the simulation must perform the functions of the missing hardware. It must also perform these functions using the SLAMRAAM communications software and radio network, not HLA.This paper describes the two modes of operation required of the simulation and how it was implemented. It discusses the problems involved in adapting a simulation designed to run in a batch, time constrained, time regulated manner to run in real time with actual hardware. It also discusses how the HLA standard assisted and hindered this adaptation and proposes possible extensions to the standard.IntroductionThe Surface Launched Advanced Medium Range Air-to-Air Missile (SLAMRAAM) uses simulation for two purposes. The first is to assess system effectiveness by simulating engagements. The second purpose is to test system software interactions. These two objectives require very different modes of operation, as described below. This paper discusses how the SLAMRAAM End-to-End Digital Simulation (SEEDS) was designed to perform both tasks.All Digital Simulation ConfigurationSystem effectiveness is measured using an all digital simulation of the SLAMRAAM system components. The simulation components include models of the Sentinel radar, Enhanced Position Locating Reporting System (EPLRS) radio, Integrated Fire Control Station (IFCS), SLAMRAAM Fire Unit, and AMRAAM missile. These prime item models are combined using HLA to model the entire integrated air defense system. The model simulates engagements that the real system might typically encounter. These models are run repeatedly using random errors to produce a statistical measure of system effectiveness.In order to process multiple simulation runs efficiently, the all digital simulation runs faster than real time using HLA time management services. Instances of each system component are grouped by type within federates. The intent is to minimize memory usage, and required HLA runtime licenses while maximizing performance.Configuration with Hardware in the LoopA second requirement for the simulation is to run with actual hardware. The SLAMRAAM test facility has a limited number of hardware units but it must test the system as if a full complement of hardware prime items (a battalion) was installed. To do this, the simulation must perform the functions of the missing prime items. Each prime item simulation is configured to communicate with an EPLRS radio. Fire unit and IFCS models talk directly to the EPLRS radio while the Sentinel radar model uses the Air and missile defense Common Software (ACS, part of the actual tactical software) to communicate. Once connected to the radio network the simulations use Joint Data Network Subnet (JDNS) messages (see Reference  REF _Ref166490906 \r \h [1] and  REF _Ref168914493 \r \h [2]) to communicate to the hardware prime items.The need to integrate with operational software and hardware adds some requirements that were not necessary for the all digital version of the simulation. These are as follows:To interact with the hardware, the system must operate in real time and process messages as they are received. Prompt processing of messages requires the use of a multi-threaded system with callbacks to process each message as soon as it is received.In the tactical hardware configuration, each computer system is attached to one radio with its own Ethernet network. The software therefore assumes that there is one IP Address for the host and one for the radio. When more than one system is simulated on a PC, each system must have its own Ethernet network. Otherwise, the systems being simulated could interfere with each other’s network communications.Since the system software assumed that there would be only one Ethernet network, some network variables were made global. Systems must be simulated in separate executables to avoid one system simulation overwriting the global variables of another.SummarySEEDS must operate in two very different modes. For measuring system performance, it uses an all-digital time-managed mode. For checking system compatibility, it operates in real time with real system hardware. The following sections describe how SEEDS was designed to meet these two different operating environments.Hardware and Software ConfigurationThe hardware configuration of the SLAMRAAM test facility is shown in  REF _Ref168908797 \h  \* MERGEFORMAT Figure 1. Target dynamic information and simulation management messages are sent via the High Level Architecture (HLA), while tactical JDNS messages are sent via the EPLRS radio network. To reduce RF emissions the EPLRS radios are connected to the SLAMRAAM radio network simulation with coaxial cable. Sensors can be simulated in three different ways. Each simulation requires a different interface for receiving target data.The simplest option is to use the Sentinel radar simulation connected to the tactical ACS (Option 3). The Sentinel radar simulation receives target data via HLA as attribute updates and uses the tactical interface to send tracks to the ACS computer. The ACS is connected to the EPLRS radio. This mode allows the user to control input to ACS, and monitor the resulting system tracks.The second sensor option is to run a version of the software used in the actual sensor (Option 2B in the figure). The sensor software is wrapped by application software that emulates the sensor’s operating system and hardware environment. For simplicity, the wrapper software does not interface with HLA directly. Instead, a program writes the target updates to a file. The file is then read by the wrapper code during the simulation.The final option uses the actual sensor hardware and software. The same file that was generated for the second option is used to drive a software application (Target Injection Unit or TIU) that provides detection data to the sensor. The sensor then processes this data as it would actual radar detections and passes them to the rest of the SLAMRAAM network.Fire unit and IFCS simulations connect directly to the EPLRS radio using the tactical EPLRS Communication Services (ECS) software components.The next sections describe how the hardware and software operates in the two basic modes of operation, the all digital simulation and the simulation with the EPLRS radio.All Digital Operation In the All Digital Operation mode, information is transferred between federates exclusively via HLA. Using HLA precludes using actual sensor hardware or software, since these options communicate using the EPLRS radio. Messages that would normally be transmitted over the EPLRS radio link are instead converted to HLA interactions. These interactions contain equivalent information to that encoded in the EPLRS messages. They are encoded in a manner that is more convenient for HLA, however.Objects are grouped within federates by type. Thus all fire unit objects are run within the same federate, and all IFCS objects are run within another, different federate. Grouping objects in this manner allows each set of objects to share code more efficiently than grouping different types of objects in the same federate. This architecture also reduces the number of federates, which increases speed because fewer federates are requesting time advances from the RTI.The simulation also models the SLAMRAAM system’s two communication modes. JDNS over EPLRS radios is the normal operating mode of a SLAMRAAM battalion. It is modeled using the communications federate. JDNS over field wire is an alternate communications mode that can be used when all units are in close proximity. It is modeled without the communications federate and by allowing federates to bypass HLA when a message is being passed between two models in the same federate.Operation with EPLRS RadioIn this mode, selected messages are sent via the EPLRS Radio network. A switch is inserted in the outgoing message processing. If the EPLRS Radio link is active, and the message is one of those that are to be transmitted via the radio, it will be converted to the appropriate Joint Data Net Subnet (JDNS) message format (see Reference  REF _Ref168914493 \r \h [2]) and sent to the appropriate radio circuit using ECS. Otherwise, the message is converted to an HLA interaction and transmitted in the same manner as it would be in the all digital mode.Each federate must simulate a single SLAMRAAM unit when communicating with a radio. The EPLRS radio assumes a dedicated Ethernet link with its unit. The interface software for the radio makes the same assumption. Putting more than one EPLRS radio on an Ethernet link would therefore create interferences between simulated objects. Such interference is avoided by using a separate federate for each SLAMRAAM object when running real time with tactical units.For simulation testing purposes, a switch has been implemented that eliminates the need for individual Ethernet connections to EPLRS radios. With the switch enabled, individual federates communicate via multicast messages over a general Ethernet link. This avoids the need to use the EPLRS radios, a scarce resource often needed for other testing.The next section describes how the various software and hardware components were integrated.Integrating the Simulation with the HardwareThe SEEDS simulation application uses four distinct sets of software.The simulation models. The models were both developed internally and adapted from other programs. As a result, there were slight differences in how each simulation interfaced with the other software packages. An objective of the integration effort was to minimize the number of changes made to the simulations since these changes would be unique to each simulation.The Run Time Infrastructure (RTI). A commercial, DMSO 1.3 compliant RTI with a RPR 1.0 based Federation Object Model (FOM) was used without any tailoring. JDNS Interface from the tactical systems. The tactical software provided the higher level interface to the EPLRS radio. Subroutines from the tactical software were also used to construct messages, and later to extract data from message fields. The completed messages were then passed to the EPLRS Communication Services (ECS) package, the tactical software that provided the high level interface to the EPLRS Radio.A VxWorks emulator. The tactical software used in the JDNS interface normally operates under the VxWorks real time operating system. A commercial emulator was used to provide a similar environment. Some of the more important capabilities provided by the emulator were the ability to run several independent threads within a simulation, and to coordinate resource usage and blocking through semaphores.Some tactical software that was initially planned to be part of the integration was ultimately not included. The JDNS Protocol Services (JPS) package includes both the ECS package and the software used to construct the JDNS messages. JPS integrates these packages and provides a single interface that could provide both functions. Unfortunately, JPS also integrates many more functions, most of which were not needed. It was ultimately decided that the overhead of the additional functionality outweighed the convenience of merging message construction with message handling.Operation of the Simulation SoftwareWhen operating in the all digital, time managed mode, the simulation uses the HLA Run Time Infrastructure for communication between models. The HLA RTI is also used in the real time mode to transfer data that would not be sent over the JDNS network, in particular, target truth data. When operating in real time mode, the simulation uses the ECS tactical software package to send JDNS messages via the EPLRS radio. This allows tactical hardware connected to the network to receive these same messages and process them in the same manner as messages received from other tactical units.ConclusionThe program succeeded in integrating a simulation originally intended for a non-real time environment with actual hardware operating in real time. The models themselves did not need modification. Only the interfaces needed to be adapted.Lessons LearnedThe objective of adapting a time regulated, all digital simulation to run as a real time, integrated system was not achieved without encountering some problems. Some of these problems are described below.Simulating one sequence of behaviors is not the same as creating hardware compatibility. The all digital simulation only needed a subset of the behaviors of the SLAMRAAM prime units, those associated with an engagement. Additional behaviors were required to allow prime units to recognize a simulation as another prime unit, behaviors associated with initialization, reporting status, and processing commands not needed for an engagement. These additional behaviors required the development of new messages and associated behavior not needed in the all digital simulation.Functionally equivalent is not the same as equivalent. Several existing messages had to be modified or even replaced. Although they contained sufficient information to model an engagement accurately, the prime units needed the information in a different format and sometimes needed additional information than provided in the original simulation message.A second example of the need to modify a functionally equivalent design was the scheme used for identifying objects. The convention used in HLA was not compatible with the identification fields in the JDNS messages. This created some problems when a process needed to know the identity of another object in order to send it a message or interpret a message received from that object. A cross reference list had to be created. This list was constructed as the simulation ran by monitoring JDNS status messages.An architecture developed for one environment may not work well in a different one. A major reason for not using the JDNS Protocol Services (JPS) package was that is was not a good fit with the existing simulation software. Integrating JPS into the simulation would have required as much or more work as was actually done with little additional benefit.Be careful making assumptions about the operating environment. They might not be appropriate in the new environment. An example of this was the software from the hardware environment that was integrated into the simulation. The designers of this hardware assumed that there would only be one copy of the software running on a particular processor and included many global variables. Because different simulated objects needed different values for these global variables, only one object could be run per executable. As a result, more copies of each simulation were needed than would otherwise be the case.Emulations are never the same as the real thing. The VxWorks emulator that was used to integrate code from the hardware environment had a number of options. These needed to be set correctly in order for the emulator to operate in the same way as the hardware environment. A great deal of trial and error was required before a set of option values was found that provided reasonable performance.Testing with real time systems requires more logging of data than testing pure simulations. A simulation cannot be stopped at a breakpoint when running with a real-time system. The only way to determine what is happening internally is to write data to a log file that can be examined after the run has been completed.Regression testing is essential. Changes made to fix a problem in one mode can easily cause problems in a different mode. All modes need to be tested on a regular basis to ensure that no defects have been injected by fixes made for other modes.HLA EnhancementThe ECS interface was integrated as a parallel interface with HLA. An alternative would be to include the ECS interface as a part of HLA. It was proposed in Reference  REF _Ref169670061 \r \h [3] that the data transport mechanism of the RTI could be separated from the simulation management functions. The result would be communications between federates optimized for the needs of the federates.If the ECS interface had been integrated with HLA, it would have been included as a second data transport mechanism. The RTI would then decide whether an attribute update or interaction was to be sent over the traditional RTI network or over the ECS link. Integrating at this level might have eliminated the need for a multi-threaded ECS package. Instead, the RTI would have managed communication services for both itself and ECS. This mechanism could also have been used for the rerouting of local interactions in the all-digital mode. Such rerouting would have resulted in a less complex implementation of the overall simulation. The simulation layer would only be concerned with simulating and would leave environment questions to the HLA layer.ReferencesMil Std 6016C, Tactical Data Link (TDL) 16 Message Standard, dated March 31, 2004Joint Data Network Subnet (JDNS) Interface Control Document (ICD) for the Surface Launched Advanced Medium Range Air-to-Air Missile (SLAMRAAM) System, Document Number H350556, dated 26 April 2006Jeffrey Wallace, Barbara Hannibal, Matthew Dorsch, and Victor Skowronski, “Complex Simulation System Infrastructure, Supporting Composability and Performance,” Proceedings of the International Society for Optical Engineering, April 2004, Orlando FLAuthor BiographiesVICTOR SKOWRONSKI is a Principal Engineer with Raytheon’s Integrated Defense Systems (IDS) where he develops and integrates models of sensors and C2 systems. Prior to joining Raytheon, he worked at Northrop-Grumman on advanced HLA concepts, SEDRIS, and terrain representation. Victor received his PhD from RPI where he did research in solid modeling and tolerance synthesis.STELIOS PISPITSOS is a Senior Systems Engineer in the System Analysis, Modeling, and Simulation section of the Integrated Air Defense Systems Department. He has been with Raytheon for 8 years and has a diverse background ranging from autopilot design, development, and analysis to distributed simulation and system performance analysis. He has been a contributor of several autopilot design projects and is currently the Simulation Development Technical Lead on the SLAMRAAM program. Stelios received a BSME, BSAE, and a MSAE from West Virginia University.SCOTT GLENNON is an engineer with Raytheon’s Integrated Defense Systems (IDS). He has 18 years experience at Raytheon in the area of simulation development and system performance evaluation on programs such as HAWK, Patriot and AIM-9X and has recently worked SLAMRAAM as the modeling and simulation project manager.  Scott received his B.S. degree in Aerospace Engineering from Syracuse University.  EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 1. SLAMRAAM Architecture EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 2 Software architecture