Simulation and Stimulation for the Warriors Edge Portfolio of the Horizontal Fusion Quantum Leap 1 and 2Mark A. ThomasUS Army Research, Development and Engineering CommandUS Army Research LaboratoryAMSRD-ARL-CI-CTAberdeen Proving Ground, MD 21005410-278-5011 HYPERLINK "mailto:markt@arl.army.mil" markt@arl.army.milKeywords:Simulation, Live Virtual Integration, Warriors Edge, Horizontal Fusion, Net-Centric WarfareABSTRACT: The Horizontal Fusion Quantum Leap 1 and 2 demonstration was an Office of the Secretary of Defense initiative to bring web-based technology to the Global Information Grid. The Army initiative, called Warriors Edge, was responsible for bringing global information down to the soldier on the edge. Technologies developed and used in the Warriors Edge included live soldiers with command and control information devices, unmanned sensors and vehicles, web-based command and control software. Simulation was used to provide interaction between the live squad and their adjacent virtual squads, play higher headquarters, and provide the posture and simulated information fusion for the global grid. Software was developed to provide interaction between the live soldiers and adjacent virtual squads, translate data from the simulation network to the live C4I network, and provide simulated data fusion at the global level. This paper will describe the simulation software developed and used in the Warriors Edge, challenges, and lessons learned. 1. IntroductionIn August 2003 through August 2004, the US Army Research Laboratory (ARL) participated in a technology development effort to insert web-based information technologies into military operations. The exercise was sponsored by the Office of the Secretary of Defense. The exercise was named Horizontal Fusion. The ARL was responsible for Army Urban Operations. Called Warriors Edge (WE), technologies showcased by ARL included micro robots, sensors, integrated soldier sensor/communications backpacks, mobile networking, and local to global information fusion and multi-level security. The Warriors Edge exercise consisted of fifteen soldiers representing a Dismounted Infantry (DI) platoon. The fifteen soldiers were actually a platoon headquarters section with a rifle squad. The other squads were simulated using computer generated forces.In year one of the Warriors Edge project, software was developed to translate simulation data packets into tactical objects [1]. The software, DIStoTOS, provided the necessary message translation to insert simulated individuals and units into MIL-STD 2525B symbols. The global battlespace was reqresented by a notional S2 Analyst Workstation. Simulation was used to drive the fusion processing of the S2 Workstation. In addition, the Army standard OneSAF test-bed (OTBSAF) was used to provide individual soldiers, vehicles, and time-based scenario movements for the exercise. The combination of this software proved successful in year one, but one deficiency was apparent. The OTBSAF interface for individual soldiers was too labor intensive for fine-grained live/virtual interaction. OTBSAF entities are commanded to perform explicit tasks; but these tasks are non-deterministic as to time to complete and movement patterns (soldiers would inexplicably wander off); and the single keyboard/mouse interface limited the number of entities which could be adjusted in real-time.To supplement OTBSAF, computer gaming techniques were used to insert a man-in-the-loop first person shooter entity for adjacent squads. A squad simulation (SquadSim) was developed. The software simulated a Dismounted Infantry rifle squad composed of a squad leader and two fire teams. The squad leader was played by a Subject Matter Expert (SME). The SME controlled the squad leader using the computer interface to the SquadSim. The fire teams reacted to the squad leader’s actions using computer generated forces logic.This report describes the software developed to integrate the live squad with the simulated entities, called DIStoTOS, the gaming software developed for greater interaction, called SquadSIM, and the S2 Analyst interface software, S2StationDriver. Lessons learned from the experiment and integration effort will be given.2. Warriors EdgeWarriors Edge is a suite of technologies to make each individual soldier a node on the global network. Warriors Edge consists of integrated sensors, robots, and instrumented soldier packs. The entire system is connected using mobile, wireless ad-hoc network technologies to transmit voice and data to all parts of the system. Data from the soldier systems was transmitted to higher echelons through a local fusion node. The local fusion node managed network communications, did local information fusion of tracks and sensors, and transmitted the data to the global fusion node at Brigade level. The global fusion node at Brigade was a surrogate S2 Analyst Workstation. The role of the S2 Workstation was to send and receive intelligence reports to and from the Global Information Gateway (GIG), display information to the S2 Analyst, and perform fusion of received information. A notional schematic of the Warriors Edge is shown in Figure 1. SHAPE  \* MERGEFORMAT Figure 1. Notional Warriors Edge SchematicDue to the limits of available hardware and live troops, simulation was used to supplement the dismounted infantry and stimulate the S2 Analyst workstation. The Warriors Edge represented the Army contribution to the global fight. The actions of more that a single squad had to be represented to the global community. Adjacent companies, battalions, and other dismounted squads all needed to be played in the Quantum Leap scenario. Simulation was used to fill this role.Linking simulations with live entities presented several challenges. Time management, data rates, and data content all had to be compensated for. The remainder of this paper will discuss how these problems were solved at the individual soldier level, brigade level, and simulation level.3. Squad Simulation (SquadSim)The SquadSim was developed to put a man-in-the-loop (MITL) for better response to the platoon leader. Year one of the WE required OTBSAF fire teams to respond to platoon leader commands. The OTBSAF interface made this cumbersome, and in some instances the troops did not arrive at the destination in time. SquadSim was developed to provide squad level action, real time response to orders, and MITL realism and decision making for the Warriors Edge. Using open source and commercial off the shelf (COTS) software, a first-person shooter game with computer generated forces logic was developed.SquadSim simulates a squad of dismounted riflemen. The keyboard operator is the squad leader, and the fire teams are computer generated forces. The keyboard and mouse control speed, direction, and actions. The operator can fire the squad leader weapon, change the weapon, resupply, move across the terrain database, and change posture. The squad leader controls two fire teams using simple commands issued from the keyboard and mouse. The squad leader may command the squads to move to a location, move on a path, or follow him through a building. The fire teams respond to squad leader firing, enemy force firing, and other sound events (weapons detonations). Fire teams move in accordance with FM 7-8, Chapter 2, Operations [2]. Fire teams may deploy in file, wedge, or echelon left/right formation. Fire team formation parameters are modified by the operator using a separate graphical user interface (GUI) called SquadSim Client Console (SS-CC).Locomotion in the 3D mode imitates real human movement. Speed across the terrain is limited to appropriate speeds for human walking, running, or crawling. The player can assume a standing, kneeling, or prone posture. The player may jump over obstacles, walk through multi-storied buildings, or walk along the terrain. Terrain collision is enabled by default. Multiple collision points on the squad leader avatar provide for accurate collisions with different sized objects.The first person view displays the player’s weapon, terrain and features, friendly and enemy entities, munitions effects, and simulated natural environment. SquadSim can display cloudscapes, fog, and time of day. Fully textured models for troops, vehicles, buildings, roads, and other terrain objects are included. The first person view is shown below.Figure 2: SquadSim First person viewThe squad may also be controlled using a 2D look down view of the terrain. The 2D view allows the squad leader to lay down movement routes, see the entire squad at a glance, and monitor the formations. The 2D mode allows for quick navigation through the terrain. The 2D view is shown below.Figure 3: SquadSim 2D View of the simulated environment4. SquadSim in Warriors EdgeThe Warriors Edge simulation suite was composed of two SquadSim stations, a OneSAF Test Bed Dismounted Infantry SAF (DISAF), a DIStoTOS station, and SquadSim Server Console (SquadSim-SC). The DISAF was used to supply troop movement and activity outside the McKenna MOUT site village, while SquadSim supplied troop movement and functionality inside the village. DIStoTOS provided the communications between the simulations and the C4I equipment, and the SquadSim-SC coordinated the runtime configurations of the two SquadSims.SquadSim was used to play two squads. Two SquadSim stations running on Laptop computers were used for this purpose. Each squad was given a call sign in the platoon and maneuvered according to the scenario script.Follow-on work in this effort includes better movement algorithms for the fire teams in close quarters, engagement models, and mount/dismount capability with different troop carriers. Further integration with battle command language to provide multi-media communications with live C4I equipment is required. In addition, Spot Report generation through the SS-CC would provide Command and Control and Intelligence for information fusion purposes.5. DIStoTOSDIStoTOS provides bi-directional message flow between the DIS network and the Tactical Object Server (TOS). The program listens to the DIS network, keeps a database of entities on the DIS network, and formats TOS messages to create, update, and delete entities as necessary. It is intended to populate a live exercise with simulated entities and to send live entity posture data to the simulation network.Information sent to TOS from the DIS network included entity identification, latitude and longitude, entity type, and parent unit. Entity types were expressed as MIL STD 2525 icon strings. Icon strings were implemented for friendly and enemy dismounted infantry, the MULE, a HMWWV, the unmanned guided vehicle, a generic enemy vehicle, friendly unmanned ground robots, and an unknown entity. Because DIS uses enumerated data for entity types, and TOS uses MIL STD 2525 icon strings, a mapping between DIS entity enumerations and MIL STD 2525 icons was implemented as follows:DIS KindDIS CountryDIS CategoryDIS Sub-categoryMIL STD 2525 Icon3225N/AN/AFriendlyDI3222N/AN/AEnemyDI122562MULE122561HMMWV122527N/AUGV1222N/AN/AEnemyVehicleTable 1: Mapping from DIS enumerated type to MIL 2525 icon typeMapping from TOS Icons to DIS entity enumerations was implemented as below:Object / MIL STD 2525 Icon StringDIS KindDIS DomainDIS CountryDIS CategoryDIS Sub-categoryEnemyDI    “SHGPEWR--------“312221205FriendlyDI    “SFGPEWR--------“31225132MULE           “SFGPEVU--------“1122562HMMWV  “SFGPEVUX-------“1122561PacBot       “SEPGEVAL-------“11225272ATRV2        “SEPGVAL--------“11225272UGS                 “SFGPES---------“11225272Enemy Vehicle “SHGPEVUX-------“1122223Table 2: Mapping from MIL STD 2525 icon string to DIS enumerated typeDIS entity information includes an eleven-character marking field. This field was used to identify each individual entity as well as indicate force structure. This mapping was implemented as follows:Entity TypeMarking Field 5Marking Field 6PlatoonDI1NA1DI2NA2DI3NA3Other5,6,7,8,911Other5,6,7,8,922Other5,6,7,8,933Other??UnknownTable 3: Conversion From DIS Entity Marking to PlatoonFor example, a marking of “100A264” is a member of platoon 2 if the entity is a dismounted infantryman. A marking of “100A521” is a member of platoon 2 if the entity is a vehicle.This entity marking method has another advantage. Aggregation is easier. MIL STD2525 includes icons for all echelons in the military. Therefore, it was easy to extend this DIS marking nomenclature to aggregate from entity, to squad, to platoon, to company, all the way up to battalion. This capability allows a single vehicle to represent an entire battalion, therefore reducing the number of entities required by the simulation to populate the global space with Army units.Coordinate conversion from latitude/longitude to DIS world coordinates was accomplished using the SEDRIS coordinate conversion routines. Inputs to the converter were the UTM Easting and Northing reference point and the grid zone number.Separate entity list was kept for the DIS and the TOS networks. Because of the DIS entity timeout in DISAF, TOS entity information needed frequent updates whether TOS updates or entity movement occurred or not. A memory resident database of TOS entities was kept, and their data were transmitted to the DIS network as Entity State PDU’s every 5 seconds.The TOS network required no heartbeat. DIS entity information was sent to the TOS network when an entity was discovered, if it moved, once per minute, or when it was deleted. Frequent updating of the TOS network caused latency problems in the TOS system, so it was decided to only update DIS information to the TOS network as required.TOS network data is XML formatted. The XERCES parser from xml.apache.org was used to perform the parsing from XML into the entity list structure.The DIStoTOS has a command line interface to list entities, change the DIS entity timeout, delete all TOS entities owned by DIStoTOS, add DIS entities in DIStoTOS to the TOS network, and shutdown the program.6. S2StationDriverS2StationDriver (S2SD) provided data to the prototype S2 Analyst Workstation in the Warriors Edge brigade level web-based information portal. Data provided was used to track friendly entities and insert messages used for data fusion and information dissemination. S2SD provided a link between the web based prototype S2 Station and the DIS simulation network.The prototype S2 workstation used a web service for web interactions. The web service called the TACSUM, used an XML data format for all web interactions. S2SD communicated to the TACSUM, which then forwarded the message to the prototype S2 workstation.An XML specification for TACSUM web interactions was developed. The specification, called dcgsa, provided messages to convey posture data, freetext messages, and other battlefield information. The dcgsa schema included data from the midb, gmi, and gov XML message specifications for comprehensive message content.Data flow between the S2SD and the TACSUM was via the Simple Object Access Protocol (SOAP). When data was ready for uploading to the TACSUM, a socket was created between the S2SD and TACSUM, the data sent, and the socket closed.S2SD aggregated DIS entity data into units for the S2 station. The S2 station, being a brigade-level asset, displayed both individual entities and units. For this exercise, individual entities were aggregated according to the process described in Table 1. Two files were created. One, the individual_dcgsa.xml file, was used to send posture data for each individual friendly entity in the simulation. The second, units_dcgsa.xml, sent unit data (Platoon 1, Platoon 2, Platoon 3). Each file was sent per iteration. On the first iteration, all entities were sent using the individual_dcgsa.xml file. After that, only entities that moved were sent via the individual_dcgsa.xml file. The units.xml file was sent each iteration.Unit location was computed as the average location of all entities in the unit. There was a choice between using the platoon leader’s location or the average, and the average was chosen. Because unit location changes slowly, this fit well with the S2 workstation’s update rate of once every 2 minutes.In addition to the automatic posture data updates, the S2SD provides the user the ability to send an XML formatted file to the TACSUM manually. This capability gives the S2SD the flexibility to simulate multiple data inputs (human and signal intelligence) to the TACSUM for information fusion. For the Horizontal Fusion demonstration, the S2SD’s XML message transmission capability was used to initiate scenario events by sending messages at scripted times.Transmitting the XML files was performed using the POST method. The function, PostFileToWebServer, takes 3 arguments. The first argument is the hostname of the webserver. The second argument is the name of the file to post. This must be the entire pathname of the file. The third argument is the port that the webserver is listening to for connections. PostFileToWebServer calls helper functions to open a connection, read in the file, prepend and append appropriate headers and footers, and send the file. After sending the file, PostFileToWebServer() performs a select() on the socket to detect a response from the webserver(not used). The socket is then closed, and the function returns. The implementation of the web posting is included in the appendix.7. Lessons LearnedThe Warriors Edge suite is composed of many systems using a common XML schema to communicate. Linking these systems with simulators using DIS required careful integration.DIS heartbeats had to be maintained for live entities on the TOS network. DIStoTOS handled this by sending heartbeats for the TOS entities. However, TOS has no heartbeat requirement. Therefore, DIStoTOS had to send updates as needed by TOS. This was normally done when entities moved.XML schemas are wonderful, until they change. Mature schemas early in the development process. In addition, the schemas should be developed with the simulation in mind to ensure enough data is available to the simulation to function properly. For example, the TOS sends only latitude and longitude information for soldiers. This makes dead-reckoning difficult for dismounted soldiers, who can move and change direction quickly.Data content between simulators and live systems were not consistent. The live soldier systems had GPS data only, and transmitted latitude and longitude coordinates only. The simulators have perfect knowledge of its entities such as altitude, speed, and orientation. The missing data, where relevant, had to be inserted by DIStoTOS to completely fill in the Entity State PDU for the OTBSAF and SquadSim to use. For this exercise, speed, orientation, and altitude of live entities was set to zero, and ground clamping of live entities was done by the simulators.Wireless networking affects all systems which depend on it. The simulation software must be able to handle data drop outs, network outages, and start/restarts.The fusion simulation performed well. Scenario controlled events and pre-formatted messages provided the necessary input to the S2 Analyst Workstation for intelligence gathering, fusion, and planning functions to occur.8. References[1]Thomas, Mark: “Warriors Edge Simulation System”, ARL-TR-3430, US Army Research Laboratory, Aberdeen Proving Ground, MD, February 2005.[2]https://atiam.train.army.mil/soldierPortal/atia/adlsc/view/public/4718-1/fm/7-8/toc.htmAuthor BiographyMARK THOMAS is the team leader of the Distributed Simulation Team at the Army Research Laboratory, Aberdeen Proving Ground, MD. His research focus is realism in distributed simulation and the C4I interface. His work has provided methods to distribute damage among simulators due to weapons fire, the integration of live with the virtual, and visualization of damage. Mr. Thomas has presented to the SIW in the SNE Forum, and now works with the Command and Control community.Local node pulls information from global node to help plan next missionLocal node fuses global pull with their organic sensors to develop better Sit AwarenessLocal node pushes critical information to global nodeLocal node has similarinteractions with adjacent local nodesGlobal node supports the pull of information relevant to the needs of the local node to complete analysisGlobal node fuses filtered information coming up from local node into its own information baseLocal (Dismounted) FusionGlobal (UA/UE) FusionGLOBAL / LOCALFUSIONLOCALFUSIONLOCAL / GLOBALFUSIONLOCAL / LOCALFUSIONSoldiersSoldiersFusion NodeOrganic SensorsOrganic SensorsFusion NodeC2UA/UE OrganicTheater/National