Virtual Technology Demonstrator (VTD) - A WEAG Technology Assessment FrameworkMarco BrasséRob BakkerTNO Physics and Electronics LaboratoryP.O. Box 968642509 JG The Hague, The Netherlands{brasse | bakker}@fel.tno.nlKeywords:HLA, Federation Development, FOM Agility, Scientific Visualisation, Virtual Technology DemonstratorABSTRACT: Both distributed simulation and scientific visualisation should help military decision-makers to assess the impact of new technologies at an early stage. To this end, the Western European Armaments Group (WEAG) initiated a study into the concept of a Virtual Technology Demonstrator (VTD).  The VTD enables the assessment of the impact of new technologies on future military systems through the development of a generic framework of simulation and visualisation capabilities. The VTD is an open and extensible framework that integrates both simulation and visualisation capabilities based on the High Level Architecture (HLA) and Modular Visualisation Environments (MVE). Usage of a common VTD framework enables the various research studies (organised in Common European Priority Areas) to address interoperability of future SoS (system-of-systems) concepts through simulations of the impact of new technologies (for instance in the scope of advanced radar technologies and electric ship concepts).The paper describes the results of the first phase of this WEAG project, in which a prototype VTD framework was developed and demonstrated. The case study for demonstration focused on the effectiveness of a future radar technology for maritime AAW. The HLA federation incorporated a radar model and advanced tracking model located on a ship to track incoming missiles. It was shown how the existing (MatLab) models were converted into a set of working HLA federates using the FEDEP and state-of-the-art HLA component based middle-ware. The resulting federation was placed in the (FOM agile) VTD framework to allow the user to monitor the simulation through scientific visualisation of any FOM data elements (or combinations thereof) at run-time. In addition, the VTD supports a 'computational steering' concept that enables the user to interact with the federation by allowing the modification of the values of predetermined simulation parameters during run-time. IntroductionThe Western European Armaments Group (WEAG) initiated a project to study the concept of a Virtual Technology Demonstrator (VTD). The VTD concept aims to combine and direct various European defense research efforts to recognisable military applications. To this end, a unifying VTD framework based on available M&S standards and information technology should be established to combine the research efforts across various WEAG sponsored research groups (organised in so-called Common European Priority Areas, or CEPAs). The overall objective of the VTD concept is to enable the assessment of the impact of new technologies on future military systems through the development of a generic (i.e., application independent) framework of simulation and visualization capabilities. In the first project phase (‘VTD Phase 0’), a prototype framework is developed, based on readily available simulation models and visualisation tools. EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 1  Focus of VTD in life-cycle The VTD focuses on the very early phases in the system life cycle (see  REF _Ref507386265 \h Figure 1). It strengthens the SBA/D initiatives through a unified approach for an architecture that supports both HLA simulations and generic scientific visualisation. The proposed capabilities of the VTD can be used on three levels:Assessment of technology (CEPA): use VTD to explain and visualise how technology works and identify/present areas of problems or progress.Simulate and visualise the effect of a certain technology (or a cluster of technologies) on system performance, e.g. improvements in radio-emission technology on radar equipment and operations research. Study System-of-System interoperability: perform trade-off studies and define requirements for future systems for improved combined and joint operations.From a technical perspective, the VTD complements other ongoing NATO and European R&D projects for M&S, such as NATO SG61 / NIREUS [1], and EUCLID RTP 11.13 [2]. The main technical goals that the VTD characterises are:integration of visualisation and simulation capabilities in an open and extensible framework based on international standards;enabling technology assessment through visualisation and simulation.This paper describes the first phase of the VTD, which is concerned with the development of a prototype VTD framework and a small trial case study. Visualisation is used as an important tool in this environment for the presentation of simulation results and illustrating the benefits of adding run-time user interaction (parameter steering) for scientific simulations. In addition, a prototype Demonstrator has been developed and successfully demonstrated in May 2002 at TNO-FEL. Section 2 presents an overview of  the VTD Framework. Section 3 is concerned with Data Mapping within the FOM-agile Visualisation Federate. Section 4 describes the evaluation of the VTD Phase 0 prototype implementation. The paper presents some concluding remarks in Section 5.VTD Framework – Phase 0 The VTD incorporates HLA as standard for M&S, supporting simulation composition and promoting reusability and ease of replacement of individual simulations components. Secondly, the VTD focuses on the visualisation of simulation data: it should be possible to present simulation data that is being exchanged between the simulation models at run-time through visualisation. In addition, the VTD framework supports interactive steering, i.e., the user can change simulation parameters, resolution, or representation during the federation execution, and watch the effects.Visualisation is becoming an increasingly important part of scientific simulations. Visualisation enables scientists to observe and understand the data that characterizes their problem. The human perceptual system (i.e., vision) enables rapid interpretation of images that convey possibly large amounts of data. Visualisation also plays an important role in the communication of knowledge to other scientists and decision-makers. Solutions to problems may be understood better if they are presented graphically, and many people are not expected or willing to analyze tables with crude numerical data in a short time.Run-time visualisation is the next step to a more interactive approach between the simulated system and its observer. The simulation data produced at each time step is visualised by the VTD framework and can be inspected during run-time. Next, the scientist is also allowed to modify the values of the simulation parameters. In this way, immediate visual feedback is obtained on the simulation’s behavior as a result of the change in simulation parameter values. This form of interaction is closely related to a scientific concept known as computational steering [3]. An important goal for the VTD framework is to enable a flexible design with respect to how the visualisation and GUI components are connected to the HLA simulation. The VTD supports the visualisation of simulation data that is published by federates that do not have any visualisation capabilities themselves. To this end, the VTD separates the simulation logic from the front-end visualisation and user interaction. By clearly separating the visualisation from the simulation in the VTD framework, we gain the opportunity to freely change the visualisation toolkit (i.e., its implementation), independent from the actual HLA federation. The architecture of the VTD framework is presented graphically in  REF _Ref31718093 \h  \* MERGEFORMAT Figure 2 below. The “visualisation shell” provides visualisation services like the HLA RTI provides data exchange services. The visualisation services provide the means to logically control the parameters of the individual simulation models, i.e., the federates. The actual control of simulation parameters, in terms of the necessary data transfer, will be done through an HLA wrapper, the so-called ‘Viz2Sim Gateway’. From an HLA point of view, the ‘visualisation shell’ and the ‘Viz2Sim Gateway’ together constitute a single HLA federate. This federate is called the Visualisation Federate (or VisFed for short). A formal specification of the visualisation services has not been pursued in this initial VTD phase. Like the HLA RTI specification, the visualisation services should be the result of elaborate experiments with relevant prototype federations. In the current phase, it is investigated how the enabling technologies can be used to perform these experiments.  EMBED PowerPoint.Slide.8  Figure  SEQ Figure \* ARABIC 2 The VTD combines an HLA federation with a visualization shellVisualisation FederateThe visualisation in the VTD is supported by a type of visualisation paradigm that has become known as “Modular Visualisation Environments” (MVEs). MVEs are mainly based on a data flow model for visualisation introduced by Upson et al [4], and enhanced by Haber & McNabb [5]. These authors described a conceptual visualisation process using three major transformations. These transformations occur in most visualisation processes, and convert raw simulation data into images that can be interpreted by the human vision.The first transformation is described as data enrichment, data enhancement, or filtration. It operates on the input data, which is obtained by a simulation in our case. The input data is modified into derived data for subsequent visualisation operations. This means that the input data is filtered to obtain the data of interest. For instance, extracting a cross-section of data, or interpolating scattered data in order to obtain a regular grid.The second transformation is the visualisation mapping.  The aim is to convert the data of interest into geometric representations (‘abstract visualisation object’). The representation may include attributes such as geometry, time, color, transparency, luminosity, reflectance, and surface texture. An example is the operator that computes the geometric surface of data points of equal value.The third transformation is the rendering phase. Rendering operates on the geometric representations to produce at least one displayable image. The typical rendering operations would include view transformations (like rotation, translation, scaling, perspective mapping, and clipping) and optical models (such like hidden surface removal, shading, shadowing, anti-aliasing, and so forth). Some advanced operations might deal with for instance volume rendering.MVEs are considered a potentially good choice for the type of visualisation system that is of benefit to both the simulation developer and end-user of the VTD. Although the VTD framework is focused on MVE technology, other visualisation paradigms and tools can be integrated as well, ranging from graphic libraries to application specific visualisation tools, such as:3D Graphics APIs (OpenGL, DirectX);Visualisation APIs (Open Inventor);Visual Interfaces (Ensight, LightView);Turn-key/special applications (Mäk Stealth Viewer).The architecture of MVEs is based on small to medium sized software components that are tightly coupled to create a visualisation pipeline. These components are called modules that encapsulate various functions. MVEs allow modules for filtering, mapping and rendering to be combined into executable flow networks (see  REF _Ref31774606 \h Figure 3). So the developer can build a specific visualisation application by constructing a network from suitable and existing modules, the so-called map of modules. To do this, an MVE contains a graphical user interface from which the developer selects modules from menus and places the icons representing the modules in a diagram. Each module may appear as a box and connections between the modules are drawn as lines. Once the map of modules has been specified, the MVE data-flow kernel is ready to execute the network when input data (from HLA-RTI) is available. In this way, the input data flows through the consecutive filtering, mapping, and rendering modules in order to be displayed.Figure  SEQ Figure \* ARABIC 3 MVE Map Editor snapshotEach of the MVE modules performs a simple or complex task on its input data. Connecting modules is done in a graphical interactive way in a ‘Module Editor’. The run-time communication between the modules is through data structures (e.g., lattices) and is supervised by the MVE Activation Engine (i.e., the kernel of an MVE). Four types of MVE modules are distinguished:Source Modules: this module generates an MVE data structure (e.g., based on input data). Transform Modules: an MVE data structure is transformed into another MVE data structure.Output Modules: an MVE data structure is either rendered (i.e., visualised) or written to file.Control Modules: needed by the MVE Activation Engine to construct loops in the connections.In order to visualise the data that is exchanged between the federates (i.e., FOM data) we need to build a source module that can interface with the HLA-RTI (see  REF _Ref31776456 \h Figure 4, Visualisation Control). This module creates an MVE data structure from the FOM data. All subsequent transformations on the data are done through the transform modules of the MVE such as co-ordinate system transformations or the creation of composite or aggregated data. In this way, effective use is made of the computational capabilities of an MVE.Figure  SEQ Figure \* ARABIC 4 Visualisation Federate (“VisFed”) compositionThe Visualisation Federate is composed of three major parts: Visualisation ControlAn MVE source module that converts, selects, and combines FOM data (received through the RTI) into data structures that can be processed by the subsequent MVE modules.Steering ControlA GUI connected to the MVE to modify the parameters of the visualisation. This GUI is also used to allow the user to change the values of predefined simulation parameters at run-time.Visualisation modules Collection of MVE modules (transform, output, control) that can be linked by the simulation developer into an executable (data) flow network with computational and rendering modules.A high-level decomposition of the system is shown below.Figure  SEQ Figure \* ARABIC 5 top-level system decompositionData MappingA common data structure that can be processed by most MVEs is a curvilinear lattice. A curvilinear lattice has space for explicit coordinates and the number of coordinate variables per point can be greater than the dimensionality of the lattice itself.  REF _Ref31777142 \h Figure 6 depicts a 2D curvilinear lattice in 3D space. In general, each node in a curvilinear lattice can be described conceptually by a coordinate-part and a data-part.Figure  SEQ Figure \* ARABIC 6 A curvilinear lattice representationThe VTD framework uses the curvilinear lattice as the output format of the aforementioned ‘Visualisation Control’ module in  REF _Ref31776456 \h Figure 4. This structure is a well-known data structure and can be processed by most MVE implementations.  The developer knows which FOM data is relevant for inspection and he has to provide a mapping from the FOM onto a multi-dimensional curvilinear lattice structure. The format itself is not a real restriction in terms of visualisation: the user may deploy additional MVE transform modules at run-time to convert the curvilinear lattice structure into a more convenient (MVE) data structure.The Visualisation Federate in the VTD framework has to co-operate with any conceivable FOM (i.e., FOM agile). Therefore it is not possible to hard code which FOM data is used for the co-ordinate part of a lattice node and which data is used for the data part. This is where the VTD concept of data mapping comes in. It enables the user to specify which FOM data elements are used for any of the curvilinear lattice data parts. Besides the FOM data, it is also possible to use the (HLA) simulation time as a data element to be mapped. The data mapping specification is used by the VTD framework during run-time to provide the values of the curvilinear lattice based on the actual state of the HLA objects and interactions.Now one of the innovative approaches of the VTD framework is to solve the data mapping specification problem by using relational database theory. The Visualisation Federate captures all FOM data during run-time and organizes (stores) the data in a set of database tables (see  REF _Ref31777620 \h Figure 7, ‘Store FOM Data’). The observer of the simulation can subsequently specify the mapping onto the lattice structure (see  REF _Ref31777620 \h Figure 7, ‘Select Data’). In general, this approach can also be applied to the well-known FOM agility problem.The following example illustrates that the data mapping, i.e., from FOM data to lattice, can be decomposed into several activities:capture FOM data into relational database tables;combine data from the different tables into a table with the data of interest (e.g., using SQL);map the elements from the output table onto the nodes of a curvilinear lattice.Figure  SEQ Figure \* ARABIC 7 Data Mapping Approach using an in-memory relational database approach for ‘Visualisation Control’ This approach has the benefit of decomposing the data mapping problem into more manageable parts and exploit existing technologies to support the VTD concept. For the sake of argument, and to provide a small example,  REF _Ref31778123 \h Figure 8 shows a (pseudo) OMT description with merely a single object class Ship that potentially travels in 1-D and attacks other ships. Now the hypothetical question is how to visualise –for all ships– the correlation between the (x-)position of a ship in relation to the (x-)position of a ship it attacks. We assume the presence of three Ship objects with (x-)positions 0, 100, and 200, each attacking each other. Now a straightforward visualisation of the correlation information is given in  REF _Ref31778350 \h Figure 9.Figure  SEQ Figure \* ARABIC 8 pseudo-OMT exampleFigure  SEQ Figure \* ARABIC 9 visualising the correlation of 1-D positional data, based on lattice that contains all (xi,xj) pairs for each ship i attacking ship jThis visualisation is not part of the ship federation and may never have been envisaged during its federation design. Nevertheless, the VTD is capable of such visualisations using the data mapping approach. In particular, the VTD (i..e, the Visualisation Federate) will store the run-time data from the Ship objects in the database. Now the question should be answered how to obtain the information by which a curvilinear lattice can be generated from the FOM data. This can be done as follows. Suppose the stored Ship object table looks like:Figure  SEQ Figure \* ARABIC 10 FOM data received through RTINow this table can be represented in a normalized form, using relational database theory:Figure  SEQ Figure \* ARABIC 11 normalized data Using relational database theory, we can apply a so-called natural-join operation on this table with itself. In general, the natural join is a binary relation that combines certain selections and a Cartesian product followed by some projection. In our case, the user can specify to take the (mathematical) product of all entries in the table for which ship.id equals ship.target_id. This operation yields the following result:Figure  SEQ Figure \* ARABIC 12 result of join operationTo obtain our graph, we specify in addition another relational database operator, namely the projection of this table on the attributes (ship.x, ship.target_id.x), which results in the following table (see  REF _Ref31779040 \h Figure 13 ).Figure  SEQ Figure \* ARABIC 13 end result of database operationsThe data in  REF _Ref31779040 \h Figure 13 can be stored pair-wise in a 2D curvilinear lattice in a straightforward way to obtain the visualisation in  REF _Ref31778350 \h Figure 9. More complex examples can be envisaged by introducing multiple classes and visualising multiple relations between them.All (in-memory) database operations can be specified during run-time in the VTD by the simulation observer. The VTD prototype makes use of the well-known database query language SQL and a high-performance in-memory relational database management system. VTD Framework evaluationThis section describes a specific test scenario that will be executed, and evaluated towards the defined VTD objectives. To evaluate the proposed VTD Framework concept a small radar simulation was developed (see  REF _Ref31782019 \h Figure 14), based on HLA RTI-NG 1.3v3.2 and the TNO-FEL RCI component based HLA middle-ware [6,7]. The federation design is based on available in-house radar models, which required a conversion from MatLab code to C. The radar simulation consists of three main functions: generate the trajectories (missile);simulate or read the radar contacts (radar);track the contacts (tracker). The model behavior can be adjusted to the users needs. Parameters, which determine the model behavior, are called steering parameters. Examples that determine radar characteristics are peak power and radar cross section. The time steps in the simulation are determined by maximum scan time and azimuth beam width.  EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 14 HLA Federation of VTD Radar SimulationEach radar case simulation component of the prototype owned one or more parameters. Based on these parameters a GUI is created in order to steer the available parameters (see  REF _Ref31782407 \h Figure 15). The GUI was created using the MVE tool SGI IRIS Explorer.  REF _Ref31782407 \h Figure 15 shows four parts. The top left, middle, and right part reflect the available steering parameters of the radar case simulation components. The lower left part reflects the simulation control of the radar case components. The user can stop the simulation a specific simulation time. The user can also pause the simulation at any given moment evaluate the situation, study the produced visuals in more detail and/or alter any steering parameters to be invoked after the simulation is resumed again.The implementation of the VTD phase 0 framework showed to be suited for run-time evaluation of one single run. Currently data of previous runs is not stored. However, the SQL database functionality, in order to access data of previous runs and other functionality, allows a full-fledged analysis environment for future extensions.Figure  SEQ Figure \* ARABIC 15 VTD Parameter SteeringPrototype ScenarioThe radar case test scenario consists of a single missile approaching a stationary ship. The ship contains a single surveillance radar that tries to track the missile as accurate as possible. The ship will not employ any countermeasures. Via available steering parameters of the radar case simulation components (the missile, the radar, and the tracker) the user is able to alter settings during scenario execution. The user can change specific parameters in order to produce meaningful information to assess the used radar-case technology.In order to operate the VTD prototype properly the user needs to have sufficient knowledge of the current VTD implementation (the MVE and its data mapping). The user requires adequate understanding of the MVE toolkit (for VTD Phase 0 this is the MVE SGI Explorer) to connect the required MVE modules in the Map Editor (see  REF _Ref31774606 \h Figure 3 and  REF _Ref31782745 \h Figure 16).The user also requires adequate understanding how to create SQL queries in order to obtain the needed information from the database (e.g., see the blue part in the lower left window of  REF _Ref31782745 \h Figure 16).Furthermore, the user requires adequate understanding of the simulation models in order to handle the steering parameters correctly and create relevant output.Figure  SEQ Figure \* ARABIC 16  The SGI Explorer Editor environment; LatHLA <1> and LatHLA<2> are minimised versions of LatHLA<3> (the lower left window)Federation ExecutionThe execution of the test scenario and the MVE modules produces two type of visualisations. The top right render module of  REF _Ref31782745 \h Figure 16 produces  REF _Ref31783259 \h Figure 17: a 3D representation of the test scenario. Green balls represent radar contacts. The arrows reflect the deduced speed and direction of a radar contact. The red ball is the current location of the actual missile. The subsequent balls are a deduced track. The scattered green balls present presumably noise but are currently seen, by the tracker component, as the beginning of a possible new track.Figure  SEQ Figure \* ARABIC 17 a 3-D  synthetic environment in VTDThe lower right render module of  REF _Ref31782745 \h Figure 16 produces  REF _Ref31783416 \h Figure 18: an example of a 3D representation of the expected error deviation of each radar contact.Figure  SEQ Figure \* ARABIC 18 another 3-D representation in VTDThe rectangles represent the error deviation in x, y, z-axis for each current radar contact. The colour represents the amount of deviation in its axis.Within the available time to produce an environment to analyse or visualise of the used simulation technology the user (i.e., the radar expert) saw the potential of the VTD framework to dynamically alter representation using the MVE, and adding basic analysis functionality with the aid of the Data Mapping concept. Results from PrototypingThe intention of this type of federation execution towards the proposed radar simulation case was to show the potential of visualisation capabilities to aid in the assessment of a virtual technology. In our case the tracker component of the radar system was the new technology to be assessed. The optimised tracker algorithm could be embedded in an operational radar system if the performance would meet the operational requirements. The current prototype implementation of the VTD framework provides the user with a first impression of the radar component capabilities. Based on the results, the federation design is optimised in order to investigate the more intricate details that play a role in the assessment. Specific visualisation requirements may require the development of new MVE modules that can render specific mathematical objects (e.g., tensor fields). However, this was kept of the VTD Phase 0 scope. Based on the evaluation using this test scenario the VTD framework showed the experts an initial framework to extend their analysis capabilities using HLA and MVE. In addition to run-time analysis, it is also possible to perform an evaluation on the basis of simulation data that is logged during multiple federation execution runs (batch oriented). In this case, the federation consists of merely two federates: the data logger and the visualisation federate. The current implementation is focused on run-time analysis in an HLA federation execution, and does not yet provide specific support for off-line analysis.The VTD framework enabled our expert (user) to assess the innovative radar components. The user was able to control the execution of the simulation components, and he was able to modify the available simulation parameters at any given time, and watch the effects. The MVE tool used in VTD Phase 0 was able to provide the expert with an initial understanding of the interaction between the simulation components he developed. So the VTD offered a more thorough insight into the effect of parameter settings of the simulation components and the interaction models. The run-time 3D visualisation offered a more rapid understanding of the run-time behaviour of each simulation component. The experiment provided actual guidance for the assessment of the improved tracking technology at hand. The user confirmed that the modular HLA approach, the interactive control, and the run-time 3D visualisation enabled him to accelerate the development and optimisation of his simulation algorithms.Concluding remarksVTD Phase 0 provided a prototype implementation and successful demonstration of the VTD concepts in which HLA and MVE technology are integrated in a unifying HLA compliant VTD framework.  Typical tasks that can be performed with a full VTD implementation include:Comparison of different (sub)systems technologies with respect to a common reference;Validation and/or integration of military operational requirements for new systems;Initial estimation of Measures Of Effectiveness (MOE) en Measures Of Performance (MOP);Examination of system integration issues through simulation interoperability and visualisation.Some technical lessons-learned during development:converting MatLab code requires careful consideration of how to map large multi-dimensional data structures onto HLA-OMT;much effort is needed to invent clean HLA interfaces to existing radar simulation components;run-time parameter steering is very useful to determine relevant parameter value ranges for detailed experimentation;existing database technology provides the required flexibility to implement a FOM agile simulation and visualisation framework.Currently, a multi-national WEAG Ad-hoc Planning Group (APG) is in the process of formulating requirements for the future development and exploitation of Virtual Technology Demonstrators within the WEAG. This hopefully results in a multi-national effort  into VTD Phase 1 in which the basic technology from VTD Phase 0 is applied to specific missions areas. References[1]	Sally White, “NATO/PfP HLA Federation of VTOL Operations Supporting Simulation Based Acquisition” (01E-SIW-034), Published in Proc. European Simulation Interoperability Workshop SIW, University of Westminster, London, UK, June 2001.[2]	Keith Ford, “EUCLID RTP 11.13 Realising the Potential of Networked Simulation in Europe” (01E-SIW-011), Published in Proc. European Simulation Interoperability Workshop SIW, University of Westminster, London, UK, June 2001.[3] 	H.C. Donkers, A.J.F Kok, J. van Lawick van Pabst, “High Performance Visualisatie: ontwerp van de visualisatie server”, TNO-FEL, FEL-98-C185, 1998.[4]	C. Upson, et al. “The application visualisation system: a computational environment for scientific visualisation” IEEE Computer Graphics & Applications, 9(4):30-42, 1989.[5]	Robert Haber and David McNabb, “Visualisation idioms: a conceptual model for scientific visualisation systems” in B Shriver, G. Nielson and L Rosemblum, eds, Visualisation in Scientific Computing, pgs 74-93, IEEE Computer Society Press, Los Alamitos, 1990.[6]	Marco Brassé, Wim Huiskamp, Olaf Stroosma, “A Component Architecture for Federate Development” (99F-SIW-025), Proceedings Fall Simulation Interoperability Workshop, Orlando, FL, September 1999.[7]	Wim Huiskamp, Marco Brassé, Joost Hamers, “Interoperability between Virtual and Constructive Simulations within an HLA Architecture” (01E-SIW-031), Published in Proc. European Simulation Interoperability Workshop SIW, University of Westminster, London, UK, June 2001.Author BiographiesMARCO BRASSE is a member of the scientific staff in the Command & Control and Simulation Division at TNO-FEL. He is involved in several national and European projects focusing on HLA development and SBD. He holds a M.Sc. degree in Computing Science and a Master of Technological Design (MTD) degree in Software Technology, both from Eindhoven University of Technology, The Netherlands. His research interests include parallel and distributed software architectures and algorithms, HLA based component architectures, and design methodologies. He is a member of NATO SG61 and work-element lead of Federation Composition in EUCLID RTP 11.13. ROB TH. BAKKER is a member of the scientific staff in the Command & Control and Simulation Division at TNO-FEL. He holds a M.Sc. in Computer Science from University of Amsterdam, The Netherlands. His research interests include visualization and distributed simulation applications.