High Level Architecture Gateway for Wargame 2000Mitch PeckhamMetron, Inc.720 Irwin Avenue, Rm 3107Shriever AFB, CO 80912719-567-8861mitch-peckham@jntf.osd.mil Keywords:HLA, FOM-Agile, Middleware, SPEEDES ABSTRACT:  At the Joint National Test Facility, Wargame 2000 is a command and control simulation under development for joint missile-defense missions.  The second large software build, Block 20, required a High Level Architecture (HLA) interface.  Specific requirements included compatibility with the underlying simulation framework, Synchronous Parallel Emulation and Execution for Discrete-Event Simulation (SPEEDES), and the creation of HLA gateway that was both user-definable and modifiable without source code recompilation.  A SPEEDES HLA Gateway was developed that allowed the user to configure the federate’s interface to the federation using text files.  These files allowed the user to specify the federate’s Simulation Object Model and to specify the data mapping between the simulation objects and interactions to the Simulation Object Model classes and interactions.  Once the Gateway was configured, simulation objects and interactions were automatically forwarded between the simulation framework and the Run Time Infrastructure.  The file-driven approach allows users of the simulation framework to easily add new classes or interactions to their Simulation Object Model without recompilation of the Gateway.  This implementation satisfied the requirements for a file-driven gateway, and offered a straightforward method for participating in an HLA federation within simulation framework.1. IntroductionMany simulations can benefit by teaming up with other simulations in an HLA federation, in order to model situations that they could not do alone. These simulations generally have different names for their objects and interactions which causes federates to make compromises on object and interaction names while designing their Federation Object Model (FOM) [1].  After the FOM is agreed upon, one or more of these simulations has to write code that translates from their simulation name space to the FOM name space.  To make matters worse, if a simulation wants to participate in another federation, then this labor intensive and time consuming name translation code must be reworked for the new federation.  What federates need is an interface that can be easily modified without application code modification [2] [3].Wargame 2000 (WG2K) selected SPEEDES as their parallel simulation framework.  WG2K requirements for the HLA interface were twofold: compatibility with SPEEDES and an interface that could be configured and modified without changing the simulation source code.  Ideally, this interface would be easy to use and text file configurable.  The advantage of using text files is that it allows the input files to be human readable and requires no additional tools for creating the files.The SPEEDES HLA Gateway for Block 20 has been designed, built and tested.  This paper describes both the existing Gateway and planned enhancements. 2. SPEEDES OverviewA SPEEDES simulation is composed of simulation objects and events that perform work on the simulation objects.  SPEEDES [4] provides the following capabilities to simulations:Object Distribution –  REF _Ref454784387 \h Figure 1 shows an example of a four-processor simulation.  Simulation objects can be distributed between the different processors in any fashion desired including card deal, block or other user defined method.  Simulation parallelization can occur with object distribution, which can provide for simulation speed up.Time Management – SPEEDES can be configured to run using different time management algorithms [5] (e.g. Sequential, Breathing Time Buckets, Time Warp or Breathing Time Warp).  SPEEDES can coordinate simulation time across multiple processors when using a parallel time management algorithm.  Built-in C++ data types automatically handle rollback/rollforward mechanisms for optimistic time management.Figure  SEQ Figure \* ARABIC \s 2 1: SPEEDES Block DiagramObject Proxies – Simulation objects can make a subset of their attributes visible to other simulation objects through their Object Proxy [6].  These attributes are made available to other simulation objects in a read only mode by an Object Proxy “subscribe” mechanism.  Once a simulation object has expressed interest in another object’s proxy, it will be automatically delivered to the simulation object at the appropriate time.  Simulation objects and their attributes are assigned string names, which can be used to examine object state data.  All of the data in a simulation object’s Object Proxy will be available for use in an external module. Interaction Distribution – Interactions are a special type of event in SPEEDES.  Interactions are identified by ASCII names and are received by simulation objects that subscribe to these names.  Interaction parameters are also assigned ASCII names, which allow simulation objects access to the interaction data.  Interactions are also available for use in an external module.External Communications – External module(s) can be written that enable users to “see” the state of simulation objects.  External modules have access to all of the simulation object’s attributes through SPEEDES subscription services.  An external module will receive Object Proxy updates for all object types to which it has subscribed.  There are similar subscription and delivery services for interactions.  An external module has several time synchronization calls available that allow it to interact with the SPEEDES internal time algorithm.  These calls allow the external module to control simulation time advancement if time control is required (i.e. simulation time held back to match a real-time clock, or time advancement controlled by an HLA RTI, etc.). Simulation developers will use these built-in features of SPEEDES while designing their simulation.  During their design, they will give all of their objects, interactions, attributes, and parameters string names that most likely will be different than the FOM names.  The SPEEDES HLA Gateway has been designed to handle the name and data translations for the developer. 3. SPEEDES HLA GatewayThe SPEEDES HLA Gateway can be broken down into several functional blocks as shown in  REF _Ref455365016 \h Figure 2.  The various pieces are described in the following sections.Figure  SEQ Figure \* ARABIC \s 2 2: SPEEDES HLA Gateway3.1 SPEEDES InterfaceThe SPEEDES Interface contains all of the services described earlier in the External Communications section. Its main function is to handle all communication with SPEEDES and provide internal SPEEDES data to the Gateway.  Data provided from the simulation is retrieved from the SPEEDES internal object and transferred to FedConnector for output to the federation.3.2 FedConnectorFedConnector [7] was developed at the JNTF by the Technology Insertion Studies and Analysis group in support of WG2K.  It handles all the data conversions and mappings between the simulation name space and the FOM name space.  FedConnector also handles the interface with the RTI.FedConnector must be initialized with the FOM data definitions along with the SPEEDES-to-FOM data mappings.  The Thin Layer Data Interface (TLDI) creates a database of these definitions and maintains instances of HLA objects created by SPEEDES or externally discovered objects. Initializing the TLDI consists of first defining the FOM data structures.  This was accomplished by defining all of the primitive data types (i.e., int, float, double, etc.) used in the FOM.  These data types are predefined built-in data types in the Gateway.  Complex data types are then defined using any primitive or other previously defined complex data type.  These complex data types will correlate directly with definitions for the classes, interactions, attributes, and parameters defined in the FOM (during initialization, the complex data type names will be compared to the names defined in the .fed file; therefore, they must match).  HLA object and interaction publication and subscription services are defined during this phase by properly tagging the complex data type with the appropriate service required.Once all of the data types are defined, data mappings between SPEEDES and the FOM are defined.  For each SPEEDES object type and interaction, data mappings to the FOM are defined.  Data mappings for object attributes and interaction parameters are also defined during this phase.After the TLDI has been configured, sending data to the federation via the RTI became as simple as instantiating an object or interaction defined by the map, and populating the attributes or parameters (an example is described in section 3.4).  Once done, FedConnector would make the appropriate RTI calls for sending the object or interaction.  Receiving an object or interaction required a callback be registered with FedConnector, which transferred HLA data to the simulation.The RTI interface was responsible for handling all of the RTI calls necessary for WG2K. This included federation creation, join, resign, publish, and subscribe capabilities, and the translation of object and interaction data between the TLDI and the RTI.3.3 Gateway ControllerThe Gateway Controller tied the SPEEDES interface together with FedConnector.  The Gateway was configured during initialization by three input text files.  These files contain the necessary information to define the complex data types and data mappings between the SPEEDES simulation and the FOM.  Other functions of the Gateway Controller are:Transfer SPEEDES objects and interactions to FedConnectorTransfer FedConnector interactions to SPEEDES (objects are a future enhancement)Coordinate time between SPEEDES and FedConnectorSPEEDES objects and interactions are transferred to FedConnector fairly easily.  When the Gateway receives updates from the SPEEDES simulation for objects or interactions they can be identified by string names.  These names are used to create an TLDI object instance that represents the SPEEDES object or interaction.  For SPEEDES published objects, a TLDI object is created only once and saved for future updates.  Once the object has been created, the string name is used to query FedConnector, which returns the names of the attributes or parameters contained in the SPEEDES object or interaction.  Now the data in the SPEEDES object or interaction is retrieved by name and used to populate the TLDI object.  Attributes and parameters types in the TLDI are converted to their appropriate FOM data types, as defined in the data type and map input files. Received interactions are handled similarly to the above process.  When an interaction was received from the federation, the callback registered for the interaction was executed.  The data in the TLDI object was retrieved and used to build a SPEEDES interaction.  Once the interaction was built, it was sent into SPEEDES by the interaction name defined in the map.The WG2K Block 20 requirement for time management was to run in an unconstrained non-regulating time management mode.  In this mode, objects and interactions are simply forwarded between SPEEDES and the federation in order of receipt.  The SPEEDES simulation framework and the external interface, however, can handle the more restrictive time-constrained and time-regulating modes of time management.  In the time-constrained mode, SPEEDES will allow the federation control over simulation time.  In other words, SPEEDES simulation time (GVT) will only be allowed to advance to the current federation time.3.4 DiscussionConfiguring the SPEEDES HLA Gateway was quite simple.  The user must supply three initialization files, which are HlaParams.par, data type definitions, and the map definitions.   REF _Ref454785180 \h Figure 3 shows an example of the HlaParams.par file.  It consists of three sections which are:Figure  SEQ Figure \* ARABIC \s 2 3: SPEEDES HLA ParametersGW_Init contains initialization parameters for the Gateway.  The first two items specify the file names for the data type and map definition files.  TimeLag specifies the amount of time that SPEEDES can advance simulation time past the current external module time (federation time).  This time can be zero, although non-zero values may improve simulation performance. The “NamedPause” item specifies the name of a simulation named pause.  A named pause in SPEEDES allows the user to define a simulation synchronization point, a location in the code where the simulation will stop and wait until it is told that it can proceed. In this case, the SPEEDES simulation will pause at the place denoted by the NamedPause parameter (“Pause1”) and wait there until the Gateway has performed all of the required initializations.RTI_Init contains parameters necessary for the RTI or FedConnector initialization.  The names are self-explanatory. Debug allows the user some access to internal SPEEDES or TLDI data for debug.  The first two items display the FOM data types and map definitions contained in the TLDI.  CheckNames turns on some runtime data type definition error checking.  DumpProxies will display the attributes for all of the SPEEDES objects that are received at the Gateway.Figure  SEQ Figure \* ARABIC \s 2 4: Data Type Definitions REF _Ref454784419 \h Figure 4 shows an example of a data type definition file.  The data definitions must be derived from the FOM.  Several examples of complex data type definitions are shown.  PositionStruct and EntityTypeStruct show data definitions containing only primitive types.  BaseEntity is composed of two previously defined complex data types.  Munition inherits all of the data types defined in BaseEntity as well as adding a new string attribute.  Munition and Detonation have the key word Pub following their definitions, which indicate that these complex data types are to be published to the federation.  This keyword could have been Sub or PubSub, which specifies HLA subscription, or both publication and subscription services respectively. REF _Ref454784394 \h Figure 5 shows an example of a map definition file.  The map definition file is the key that ties SPEEDES objects and interactions to the FOM object classes and interactions.  The map definition file shows the SPEEDES Missile object being mapped to the FOM class Munition.  It also defines how the attributes in the SPEEDES object are mapped to the FOM class attributes.  For example SPEEDES attribute country in object Missile is being mapped to attribute EnitityType.Country in the FOM class Munition.  The type of each attribute is specified, which allows for the correct type conversion functions to be initialized in the TLDI.  SPEEDES interactions are mapped to FOM interactions in a similar fashion.Figure  SEQ Figure \* ARABIC \s 2 5: Map DefinitionsOnce these files have been defined, interoperating with other federates is simple.  To join a federation, all that is required is that the SPEEDES HLA Gateway be started along with the SPEEDES simulation.  The Gateway will join the federation and start transferring data between the SPEEDES simulation and the federation.  All that is necessary in order to join a different federation is to build a different set of definition files.  No recompilation of source code is required.4. Future EnhancementsThe SPEEDES HLA gateway is currently work in progress.  To date, the necessary functionality to meet WG2K Block 20 requirements has been completed, which has been presented in this paper.  Several enhancements to the Gateway are:Incorporate time-regulating and time-constrained HLA time management modes,Subscription to objects owned by other federates,Attribute and parameter rescaling (i.e. inches to feet),SPEEDES dynamic attribute conversion methods,HLA Data Distribution Management, andImprovements to the input file definitions and input parser.5. ConclusionThis paper presented the approach WG2K used to solve their HLA requirements.  One of WG2K’s requirements was no application code modification when participating in a new federation.  WG2K also wanted to be able to modify the SOM interface on a run-by-run basis without application code recompilation.  The Gateway discussed here fulfills these requirements and offers an understandable and editable interface.  Users of the SPEEDES HLA Gateway need only to provide the input files and edit them as necessary. 6. References[1]	Defense Modeling and Simulation Office: “High Level Architecture Interface Specification,” Version 1.3, April 1998.[2]	L Granowetter: “Solving the FOM-Independence Problem”, Simulation Interoperability Workshop, 99S_SIW_141, March 1999.[3]	K Hunt, J Graham: “OMni TM: A FOM and Language Independent Interface to The RTI”, Simulation Interoperability Workshop, 99S_SIW_150, March 1999.[4]	J Steinman: "SPEEDES: A Multiple-Synchronization Environment for Parallel Discrete-Event Simulation" International Journal in Computer Simulation, Vol. 2, pp. 251-286, 1992.[5]	J Steinman:  "Breathing Time Warp." 7th Workshop on Parallel and Distributed Simulation (PADS93), Vol. 23, No. 1, pp. 109-118, July 1993.[6]	J Steinman: “Time Managed Object Proxies in SPEEDES.” Object Oriented Simulation Conference (OOS'98), pp. 59-65, 1998[7]	C Martinez: “Supporting the Flexible Federate”, Simulation Interoperability Workshop, 99F_SIW_031, September 1999.Author BiographyMitch Peckham is a software analysis at the JNTF for WG2K.  He is currently involved in development of the SPEEDES HLA interface for WG2K.