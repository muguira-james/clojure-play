Enhancing Performance in Analytic FederationsDavid W. SeidelAnnette L. WilsonMITRE Corporation.1820 Dolley Madison BoulevardMcLean, VA 22102703-883-6828, 703-883-5365dseidel@mitre.org,  HYPERLINK mailto:awilson@mitre.org awilson@mitre.orgKeywords:HLA, performance. ABSTRACT: Analytic simulations have unique performance requirements: speed and correctness. In order to complete multiple executions of each scenario, they must execute as fast as possible; in order to present  valid military results, they must be operationally correct;  and in order to be analytically credible they must be causal and repeatable. HLA federations designed to perform analysis must accomplish this in an HLA environment. This paper examines methodologies to improve performance of HLA analytic federations by adjusting federate HLA interfaces and parameters and by evaluating and modifying how federates process the data that they send and receive from the federation.1.  IntroductionFederations of simulations that are used for analysis present unique challenges. They extend requirements that are common to analytic simulations into the distributed realm. These requirements include validity, repeatability, extractability of results, and speed.In this paper, we recognize the need to maintain and enforce the first three requirements, but concentrate on improving the fourth: the ability to execute simulation runs quickly. First, we expand on the requirements for analytic federations; then we propose areas of investigation for improving performance. Next we provide an example of experiments that explore these areas and describe lessons learned in the process. Finally, we recommend actions based on our experience.2.  Analytic Federation RequirementsThe four prime requirements for an analytic federation are validity, repeatability, extractability of results, and speed.a.  Validity. The execution of the entire federation must be valid. This goes beyond assuring that each federate has passed its Verification, Validation, and Accreditation (VV&A) requirements—that it operates correctly alone. It also encompasses evaluation of whether outputs from each of the federates are properly understood and acted upon by subscribing federates.b.  Repeatability. Given the same inputs, the federation must produce the same results. Assuming that each federate is repeatable, the High Level Architecture (HLA) supports this requirement through its time management features. These features must be employed to assure repeatability.c.  Extractability of Results. Typically, analytic simulations come with the ability to save data that is relevant to an analysis. The added challenge in an analytic federation lies in the requirement to correlate the data across federates and to trace timelines where the action crosses federate boundaries.d.  Speed. The federation must execute quickly. Statistically significant analysis normally requires many executions, where each execution varies some aspect of the scenario. If the federation executes slowly, either the analysis becomes more costly in terms of calendar time and resources (people, computers, facilities) or it sacrifices some of its robustness by reducing the number of executions. An analytic simulation running in isolation usually reduces execution time by executing faster than real-time—by simulating an hour of activity in much less wall-clock time; a federation used for analysis must do the same.The rest of this paper discusses approaches and techniques for improving federation speed, while retaining validity, repeatability, and extractability of results.3.  Sources Performance ImprovementOur goal is to improve the performance of the federation. By this we mean to increase the rate at which simulation time advances relative to wall clock time. This is known as federation execution ratio or game rate. An inherent characteristic of conservative, time-managed federations is that the maximum federation game rate is that of its slowest member federate. Therefore, an upper limit to possible performance improvement is established.We assume that members of the federation are optimized for speed in themselves—that when they are running by themselves, they run as fast as possible. Therefore we focus on aspects of performance that are unique to federated execution. We identified four of these aspects: RTI processing, Serialization, Reducing arriving traffic load, and Reducing processing in subscribing federates.Each is discussed separately below.3.1  RTI ProcessingThe HLA Run Time Infrastructure (RTI) seems to be a prime candidate for performance improvement. It is involved in the coordination of simulation time, the transmission of data for publishing federates and the reception of data for subscribing federates. However, this appears not to be the case for analytic federations. A typical analytic federation shares data on hundreds of objects, updating them every 5 to 10 simulated seconds. With a game ratio of 20:1, this federation would generate about 1000 updates per second. Improving performance by modifying RTI processing is extremely dependent on the particular implementation of the RTI that is being used by the federation. The discussion that follows applies specifically to RTI version 1.3, and perhaps to specific releases of that version (we used release 3 for most of our investigation).RTI performance testing [1] demonstrated that the RTI is capable of distributing at least 2000 updates per second. However, this testing also demonstrated that some aspects of how the RTI is used may affect performance. We examined four areas: bundling, transportation type, tick, and reliable distributors.a.  Bundling. Bundling is the process where the RTI saves outgoing data (updates, send interactions) until an efficient-sized bundle is obtained. The RTI sends the bundle when enough data has been received to reach the right size or when a timer expires. In performance testing, the maximum capacity of the RTI was greater in bundled operations than in unbundled. The relationship of bundling to latency remains to be explored. Some work for a particular type of federation was performed by the Joint Advance Distributed Simulation (JADS) program [2][3].b.  Transportation Type. The RTI provides the option of transporting data using either reliable or best effort methodology. In performance testing, best effort seemed to offer about a 10% advantage over reliable. However, for analytical federations, the effect of potential loss of repeatability must be considered.c.  Tick. Tick is the mechanism by which a federate gives control of the computer to the RTI so that the RTI can receive data, coordinate time, and call the federate back with appropriate data. Elements of tick that could effect performance are how frequently tick is called and what values are used in the tick arguments. The effect of calling tick too frequently or not frequently enough has not been analyzedTick arguments represent the minimum and maximum amount of time that the RTI will keep control of the computer (in wall-clock seconds). In experiments in their federation the JADS program found that the most effective values for tick arguments were 0.005 and 0.020.d.  Reliable Distributors. In RTI 1.3, a federation designer can select the number of processes used to distribute reliable information. That is, the designer can cause the RTI component associated with each federate to distribute its information to all other RTI components, or it can cause it to funnel this information through a single reliable distributor. The number of reliable distributors could effect repeatability (by varying the possible paths that data takes from source to destination) or performance (by funneling all data through a single point)3.2  SerializationOne of the advantages of executing simulations in a federation is that the federates can execute in parallel. In fact, the highest performance can be obtained when all of the federates are operating totally in parallel. In practice, this is almost never attained—different federates require different amounts of processing time to reach the same point in simulation time, so one federate must wait for another.Parallel operations can be improved by increasing the lookahead values. Each federate specifies its own lookahead; this is the difference between the federate’s simulation time and the earliest time that the federate will generate new data. Increasing lookahead for a federate lets other federates to process further into the future, knowing that they will not receive data from the this federate prior to present time plus lookahead.A concern in using large lookahead values for analytic federates is that the increase in time granularity might disrupt the operational validity of the federation.3.3  Reducing Arriving Traffic LoadEach object attribute reflection and interaction received by a federate must be processed by the federate. Reducing the number that arrive reduces its processing load. We examined three mechanisms for accomplishing this: verifying subscriptions, adjusting update timing, and focusing the object class tree.a.  Verify Subscriptions. The most straightforward way to reduce incoming data is to stop subscribing to it. Each federate carefully examines its own subscription set and pares it to the absolute minimum. If the results of this effort are entered into the FEPW cross-reference table [4], some data may be found to have no subscribers and therefore can and should be deleted from publication lists.b.  Adjust Update Timing. For those data elements that are needed by the receiving federate, the next issue should be determining how frequently they are needed. If an attribute is updated periodically, the period should be evaluated; if it is updated on  the basis of accuracy, the accuracy requirements should be evaluated. Proponents of each receiving federate must reach consensus on the maximum acceptable value. Once this consensus is reached, the generating federate should be adjusted to set the generation frequency to the agreed-upon value. c.  Focus the Object Class Tree. Another way to reduce incoming data is to extend the object and interaction class trees in the Federation Object Model (FOM) so that federates receive only the members of a class that they need. For example, if a federate were only interested in sensor aircraft but the current object class tree ended in aircraft, it might be worthwhile to subclass aircraft so that one subclass was sensor. If all attribute definitions were left at the aircraft level or above, the only federates needing to be changed are the sending federate (to register objects at the subclass level) and the receiving federate (to subscribe at that level).Reducing Processing in Subscribing FederatesPerformance is also affected by the type of processing performed by a federate on received information. This processing is often dictated by particular attribute values for attributes or even by the presence of an attribute. In order to reduce processing, federation designers need to understand both sides of the interface—what the receiving federate does with the incoming information and why; and how the sending federate produces the information (how it’s calculated and why).4.  An ExampleThe principles discussed in Section 3 were applied in a series of performance experiments using the Joint Warfighting Program (JWP) Trailblazer federation [5]. This section describes the federation, explains the experiments we performed on it, and presents the results of the experiments.4.1  Target FederationThe JWP Trailblazer is an HLA federation designed to conduct information superiority experiments using simulation. As depicted in  REF _Ref439555807 \h Table 1 and  REF _Ref435599503 \h Table 2, the federation consists of three simulations and a federation manager. The first phase of these experiments (called Build 0) was conducted in September 1998. It is intended that further experiments be conducted from December 1998 through February 1999 (called Builds 1 and 2).During Build 0, data on about 50 objects was shared among the three simulations in a scenario that took place over three hours of simulated time. This activity consumed about one hour of wall clock time. Multiple executions were conducted, evaluating several excursions from a base case and a proposed enhanced state. During Builds 1 and 2, data on about 400 objects will be shared in a scenario that takes place over 12 hours of simulated time. In order that it be feasible to conduct a significant number of simulation runs, the performance of the federation must be significantly improved.Table  SEQ Table \* ARABIC 1. Federate DescriptionsEADSIM	RoleAir Force air; detailed air defense	SponsorUS Air Force Electronic Systems Center (ESC)	DeveloperTeledyne Brown EngineeringMITRE CorporationNSS	RoleNaval air; detailed sensors	SponsorUS Navy Space and Warfare Command (SPAWAR)	DeveloperMetronEagle	RoleGround warfare; ATACMS	SponsorUS Army Training and Doctrine Command Analysis Center (TRAC)	DeveloperSAICFMT	RoleFederation management	SponsorDefense Modeling and Simulation Office (DMSO)US Army Simulation, Training, and Instrumentation Command (STRICOM)	DeveloperMITRE CorporationTable  SEQ Table \* ARABIC 2. Federate ConfigurationsFederateComputerOSMemoryEADSIMSGI OctaneIRIX 6.4512 MBNSSSun Ultra 2Solaris 2.5.1256 MBEagleSun Ultra 1Solaris 2.5.1128 MBFMTSun Sparc 20Solaris 2.5.1128 MB4.2  ExperimentsWe conducted a series of experiments [6] and [7] to test the hypotheses described in Section 3 as applied to the JWP Trailblazer federation. Access to the federate code was limited, so we centered the experiments on aspects of the federation that could be manipulated by federate parameters and Management Object Model (MOM) interactions. Several scenarios were used for the experiments; the number of objects modeled and the update and reflect rates for the largest scenario are shown in  REF _Ref439578185 \h Table 3 and  REF _Ref439577923 \h Table 4. Note that the update and reflect rates reflect the approximate game rate achieved with that scenario: about 3:1.The Federation Management Tool (FMT) [8] was an essential element of the experiments. It provided a mechanism to alter subscriptions and lookahead values and provided a display of the game ratio that allowed us to evaluate the results of the experiments. The experiments that were conducted are described below.Table  SEQ Table \* ARABIC 3. Objects Updated and ReflectedEADSIMEagleNSSObject ClassUpRefUpRefUpRefair.FixedWing9221ground.SAM_mobile181107ground.SAM_fixed20ground…1818Total210181602108Table  SEQ Table \* ARABIC 4. Updates and Reflects per SecondEADSIMEagleNSSObject ClassUpRefUpRefUpRefair.FixedWing2.71.21.20.3ground.SAM_mobile54.332.1ground.SAM_fixed6.0ground…0.80.8Total63.02.00.801.232.4a.  RTI Processing. We ran two experiments on RTI aspects: bundling, and reliable distributors.  REF _Ref435509239 \h Table 5 describes the RTI settings used during the performance experiments. Our experiments determined bundling setting (on or off) had no effect on federate performance. We further determined that the number of reliable distributors had no effect on performance.Table  SEQ Table \* ARABIC 5. JWP Trailblazer RTI settingsEADSIMEagleNSSRTI Version1.3 r31.3 r31.3 r3BundlingOnOnOnBundling timer5 ms5 ms5 msTransportationReliableReliableReliableTick frequencyWhen time step completeWhen processing completeWhen processing completeTick argumentsnonenonenoneOther RTI aspects were deemed inappropriate to this federation: transportation type (because reliable transportation was needed for repeatability), and tick (because federates only invoked tick when they were otherwise idle).b.  Serialization. As shown in  REF _Ref435599622 \h Table 6, each of the three member simulations advances time in a different manner. From observation of FMT screens, it appeared that EADSIM was most often waiting for the other federates. Therefore, we ran three experiments, separately increasing Eagle, NSS, and EADSIM lookahead values to 5 seconds. As expected, increasing lookahead improved performance.Table  SEQ Table \* ARABIC 6. Federation Time AdvanceFederateAdvance mechanismTime stepLookaheadEADSIMTime advance request5 sec1.0 secEagleNext event request60 sec *0.1 secNSSNext event requestN/A1.0 sec* Eagle processes basic ground unit activities (movement, ground combat, etc.) on a 60-second time step. It processes interactions with other federates on an as-needed basis, scheduling events within the 60-second time step.c.  Reducing Arriving Traffic Load. As described above, we pursued three avenues for reducing the amount of data arriving at a federate:.Verify Subscriptions. Publications and subscriptions in the JWP Trailblazer federation had evolved over the life of the federation as requirements evolved. A fresh look at the requirements resulted in dropping four object classes from Eagle’s subscription tree and three from NSS. We recommended that two of these classes be dropped from EADSIM’s publication tree. Two experiments were run in which we used the FMT to turn off the subscriptions separately from Eagle and NSS. Each improved performance.Adjust Update Timing. EADSIM is a time-stepped simulation whose time step was set to 5 seconds for JWP Trailblazer. It had been updating all attributes of each object every time step. Federate proponents collectively determined that 10-second updates were adequate for both NSS and Eagle; i.e., that EADSIM should update attribute values every other time step.An experiment was run in which EADSIM was modified so that its time step was set to 10 seconds. While this was not functionally the same as EADSIM updating every other time step, we felt that it provided a first order approximation of the effect. The experiment improved performance.Focus the Object Class Tree. An examination of the federation conceptual model determined that NSS was only interested in receiving data on sensor aircraft. However, the federation FOM categorized all aircraft in a single object class. By subdividing the aircraft class into subclasses, NSS could subscribe only to the sensor aircraft, reducing the amount of data being delivered to it.Since we did not have access to simulation source code, we couldn’t modify the class tree. Therefore, we did not determine the effect of this change. We recommended that the change be implemented in the next phase of the federation. Again, performance improved.d.  Reducing Processing in Subscribing Federates. We interviewed federate developers to determine the type of processing performed by each federate when it received data, particularly data that was received frequently. From these interviews, we determined that Eagle was performing considerable processing when it received a reflection of aircraft data, but that the processing was only necessary when flight dynamics changed  (when the aircraft changed course or speed). To evaluate this situation, we ran an experiment where we turned off Eagle’s subscriptions to air objects. While this was significantly different operationally, we felt that the processing load change was approximately correct. As a consequence, we recommended that Eagle change its code for the next phase of the federation to bypass the processing when flight dynamics are unchanged.4.3  ResultsWe believe that the following statements can be made as the result of our experiments:Reducing the number of objects to which Eagle and NSS subscribed improved performance.Reducing the frequency of updates by EADSIM to every 10 seconds improved performance.Increasing Eagle and NSS lookahead to 5 seconds improved performance. Refining the object class tree so that NSS subscriptions could be more focused improved performance.RTI settings for bundling and reliable distributors had no effect on performance.The combination of the above factors improved JWP Trailblazer federation game rate from 3.0:1 to 9.4:1.5.  ConclusionsWe believe that three elements are needed to significantly improve the performance of a federationUnderstand improvement candidates. For our federation, the four areas discussed earlier (RTI controls, parallelization, reducing arriving traffic, and reducing federate processing) were appropriate and fruitful. This suggests that they could serve as a starting point for other performance efforts.Understand the federation. Three aspects of a federation must be understood to be effective in improving performance:Performance requirements. It is necessary to know which aspect of performance is to be improved. Our federation was trying to increase federation speed; others might be interested in reducing latency or network bandwidth.Design constraints. Some aspects of a federation are immutable due to validity considerations.Algorithms. In order to improve federate processing of input data the existing algorithms of both the receiver and sender must be understood.Experiment. We believe that experimentation lends substance to analysis and grounds theories in actual experience. We encourage its use in any performance improvement process.6.  RecommendationsOur approach for enhancing federation performance was successful for at least one federation. This suggests that it would be worthwhile for other federations to follow this approach when they are seeking to improve execution performance.Feedback from other federations on the results of performance experiments would add to a growing body of performance knowledge.7.  References[1]	Richardson, R: “RTI IPT Update”, Briefing to the HLA Architecture Management Group, DMSO, Alexandria VA, October 1998.[2]	Harris, C, J Black: “RTI Testing for a Performance Oriented Federation and Results” Proceedings of the Fall 1998 Simulation Interoperability Workshop, paper 98F-SIW-142, Orlando FL, September 1998.[3]	Harris, C, J Black: “RTI Testing for a Performance Oriented Federation and Results”, Briefing of paper 98F-SIW-142 at the Fall 1998 Simulation Interoperability Workshop, Orlando FL, September 1998.[4]	Federation Execution Planner’s Workbook (FEPW) Version 1.3 Draft 7, DMSO, Alexandria VA 1998.[5]	Zabek, A, J Calpin, L Feinerman, D Prochnow, D Seidel: Joint Warfighting Program Information Superiority Experiment Trailblazer FY98 Final Report, MITRE Corporation, McLean VA, October 1998.[6]	Seidel, D: JWP Trailblazer Report: Performance Experiment Phase 1, MITRE Corporation, McLean VA, November 1998.[7]	Seidel, D: JWP Trailblazer Report: Performance Experiment Phase 2, MITRE Corporation, McLean VA, December 1998.[8]	Prochnow, D, E Page, B Youmans: “Development of a Federation Management Tool: Implications for HLA” Proceedings of the Spring 1998 Simulation Interoperability Workshop, paper 98S-SIW-100, March 1998.Author BiographiesDAVID W. SEIDEL is an associate manager for the Software and Information Architecture Technical Area in the Information Systems and Technology Division at the MITRE Corporation. For DMSO, Mr. Seidel supports the Joint Warfighting Program and the Cadre program, primarily working with the T&E community. Mr. Seidel has been active in the refinement of the Management Object Model, the Federation Execution Developer’s Workbook, and the Object Model Template. Previously, Mr. Seidel supported the JSIMS Program Office, the STOW program, and the ALSP project. He has developed Navy, Army, Air Force, and Joint wargames and Navy command and control systems. Mr. Seidel has a BS from Illinois Institute of Technology and an MBA from Bryant College.ANNETTE L. WILSON is a Lead Modeling and Simulation Engineer in the Information Systems and Technology Division at the MITRE Corporation, McLean, VA. She is project engineer for the RTI Verifier, is a member of the RTI 1.3 development team, and supports the Cadre program providing RTI expertise for participating federations. Ms. Wilson was one of the developers of the ALSP Infrastructure software (AIS) and chaired the AIS subgroup of the ALSP Interface Working Group. Previously, Ms. Wilson worked as a system analyst supporting the TACWAR model. Ms. Wilson has a B.S. in Computer Science from Texas A&M University and is pursuing an M.S. in Computer Science at George Mason University.PAGE  