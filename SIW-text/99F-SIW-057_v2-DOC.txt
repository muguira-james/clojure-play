Demonstration of High Level Architecture (HLA) Middleware Technology Integration with a Legacy Application ArchitectureErik S. Hougland, Ph.D.Daniel J. PatersonResearch and EngineeringNaval Air Warfare Center Training Systems Division12350 Research ParkwayOrlando, Florida 32826-3275407-380-4670     407-380-8564 HYPERLINK mailto:houglandes@navair.navy.mil houglandes@navair.navy.mil       HYPERLINK mailto:patersondj@navair.navy.mil patersondj@navair.navy.milKeywords:High Level Architecture,  HLA, Simulation Middleware Object Classes, SMOC, Middleware, Modular Semi-Automated Forces, ModSAFABSTRACT:  This paper describes the work required to integrate an HLA Middleware package, Simulation Middleware Object Classes (SMOC), with a legacy  application architecture, Modular Semi-Automated Forces (ModSAF).  Basic instructions for SMOC integration with the ModSAF legacy application are covered.  SMOC into ModSAF integration code requirements are illustrated.  A final section covering the test and demonstration program for the resulting code, SMOC - ModSAF, is included.1.  BackgroundThe Modular Semi Automated Forces (ModSAF) system is one of the bases for generation of opposing and friendly forces in constructive and virtual simulations in the United States Armed Forces, as well as those of our allies.  It operates on networks using the Distributed Interactive Simulation (DIS) protocol.  It does not have a native High Level Architecture (HLA) capability using the Defense Modeling and Simulation Office (DMSO) family of Run Time Infrastructures (RTI).  These RTI’s meet the DMSO RTI specification.  Use of such an RTI is a requirement of the Under Secretary of Defense for Acquisition and Technology for HLA compliance.  ModSAF 4 and 5 can be configured to use the Synthetic Theater of War (STOW) RTI.  However, this does not allow for DMSO HLA certification.  Three options exist for DMSO HLA compliance certification.  The first is modification of the “Native” ModSAF code to use the DMSO RTI Application Program Interface (API) for the simulation architecture and networking interface.  This would require an extensive redesign of the ModSAF architecture, or a careful translation of the STOW RTI function calls distributed throughout the code.  It is not believed that this would be worth the cost for the use gained until future generations of SAFs are released.  The second is to use a “Gateway” to a HLA network.  ModSAF been used to certify the gateway developed for the Army Simulation, Training and Instrumentation Command (STRICOM).   REF _Ref447685254 \h  \* MERGEFORMAT Figure 1 shows the gateway architecture.  This requires two processors per ModSAF simulation, one, labeled SGI,  to host ModSAF, and one, labeled NT,  to host the gateway and perform the Protocol Data Unit (PDU) to HLA translation.  The transmission delay in translating data in the second processor, or latency, is believed to be a significant performance factor.  This has not been proven yet.  The third HLA certification option is to incorporate HLA data transmission into the ModSAF simulation using a “Middleware” layer to act as an “internal gateway” to the HLA network. There are two major benefits of this approach.  The first is the relatively straightforward conversion of the code, once the data transmission points are identified.  The second is the direct transmission of HLA data without gateway processor latency delays.  This is the option chosen for this effort.  The “Middleware” package used here is the Simulation Middleware Object Classes (SMOC) developed at the Naval Air Warfare Center Training Systems Division (NAWCTSD).   REF _Ref447685240 \h  \* MERGEFORMAT Figure 2 shows the Middleware concept with the SMOC-ModSAF package hosted on the processor labeled SGI.  Other processors can be SGI, NT, or others as appropriate. .Figure  SEQ Figure \* ARABIC 1.  ModSAF HLA Gateway ArchitectureFigure  SEQ Figure \* ARABIC 2.  ModSAF HLA via SMOC Middleware Architecture2.  SMOC - ModSAF Integration Concept2.1  Basic RequirementsHLA conversion of an application via  SMOC integration has three basic requirements:  [1]1.  Identify the point, or points, of data input to the application2.  Identify the point, or points, of data output from the application, and3.  Identify the application’s execution timing loop, or loops, for merger with the SMOC timing cycle mechanism.The amount of time to learn the ModSAF code in order to locate these design points for the SMOC integration was considerable.  Once these integration points in the ModSAF code were located, the next step in the integration was the development of a plan to merge SMOC’s data transmission architecture into the overall ModSAF architecture. 2.2  MODSAF DescriptionModSAF is a large system of linked “C Language” functions.  [2]  There is an executive function, “main,” which manages the actions of over 530 libraries of functions. It is in these libraries that the actual processing takes place.  The libraries are in the categories of simulation management, behavior simulation, and system services. They are hierarchically organized so that the only direct function calls made are from upper to lower level functions.  During ModSAF initialization, upper level functions “Register” their data requirements with lower level functions.  The lower level functions return these data to upper level functions by a process of “Call Backs.”  These are established in the registration process. The first action of the ModSAF application is to initialize itself based on command line parameters or their default values.  These parameters specify such items as the terrain for the simulation, the basic scenario, and communications parameters, such as the network service.  In the ModSAF 4.0 and 5.0 base line configurations, the network services are User Datagram Protocol (UDP), Shared Memory (SHM), SIMNET Associative Layer (ASSOC), and No Network, if networking is not to be performed.  The basic ModSAF architecture is shown in  REF _Ref455201262 \h Figure 3.  The presence of other DIS based simulations on the network is also shown.  These can be other ModSAF’s as shown in  REF _Ref447685254 \h  \* MERGEFORMAT Figure 1, but that is not required.  Figure  SEQ Figure \* ARABIC 3 .  ModSAF DIS Network Architecture2.3  SMOC – MODSAF Integration ConceptThe bulk of the SMOC integration modifications were made in the service function libraries that perform data transmission to and reception from the network in use.   REF _Ref455201427 \h Table 1.  SMOC - ModSAF Integration Points, lists the libraries requiring customization.  The ModSAF initialization process initializes the network in the PDU processing library, known by the acronym LIBPDUPROC and function prefix PDUP.  The Network Service initialization in LIBPDUPROC sets parameters used to handle input and output data “Packets” with an accompanying network service data structure called the “Valve.”  These data operations are performed in the library LIBPKTVALVE, function prefix PV.  It has a set of service functions for each network service.   REF _Ref455209681 \h Table 1 lists these functions and their actions, as well as other libraries and functions that were determined to be critical to the SMOC - ModSAF integration effort.  Scheduling functions are performed in LIBSCHED, function prefix SCHED. There are two major parts to meeting the basic requirements of SMOC ModSAF integration listed at the start of this section.  The first part is the incorporation of SMOC into the network service structure as a network service, selectable by a command line option. This part meets basic requirements 1 and 2. This was accomplished by adding a SMOC library, LIBSMOC, prefix SMOC.  Functions in this library performed the network services described above through the use of the DMSO RTI functionality.  The second part is the merging of the SMOC simulation timing loop into the ModSAF timing loop in LIBSCHED. This part meets basic requirement 3. REF _Ref448042550 \h  \* MERGEFORMAT Figure 4 summarizes the resultant SMOC-ModSAF HLA Network architecture.  Section 3 discusses it in detail.Table  SEQ Table \* ARABIC 1.  SMOC - ModSAF Integration PointsINTEGRATION POINTDESCRIPTIONthe single point of data input, in functionPV_(Service)_Read,When external data packets are received from the network in DIS PDU format, they are dispatched to the upper level libraries via callback mechanism by function PV_(Service)_READ.  During the dispatch operation, LIBPDUPROC converts them to the appropriate internal format using the function PA_DECODE. The single point of data output, in function PV_(Service)_Write, andLIBPDUPROC receives output data packets from the upper level ModSAF libraries in an internal format.  It invokes the PDU Application Program Interface Library (LIBPDUAPI, prefix PA) to convert the data to the external, network, DIS PDU format using the function PA_ENCODE.  They are then distributed to the network via the LIBPKTVALVE function PV_WRITE_PACKET, by calling the appropriate PV_(Service)_WRITEThe ModSAF execution Timing Loop in function  SCHED_Invoke_Functions_UntilThe library that directs the execution of scheduled ModSAF functions, LIBSCHED, uses a fixed time period for discrete steps in the simulation.  The use of such a fixed time period, or “Frame,” is also the basis of the SMOC processing.  In the final integration, SMOC and ModSAF share a common timing loop. Figure  SEQ Figure \* ARABIC 4.  SMOC - ModSAF HLA Network Architecture3. SMOC - ModSAF INTEGRATION DetailsBasic instructions for SMOC integration with legacy applications, such as ModSAF, are contained in the SMOC documentation.  The documentation also states that custom coding will be required for each application.  Two levels of integration were required.  The first involved modifying and creating the functional libraries described above.  This will be discussed in section 3.1.  The second involved modifying the ModSAF Configure and Make process to build the integrated SMOC ModSAF executable application.  This will be discussed in section 3.2.  One of the objectives for which the SMOC was designed was the conversion of legacy DIS based simulations to HLA.  The Real Time Platform Reference Federation Object Model (RPR-FOM) was developed for publishing and subscribing of DIS attributes and interactions on an HLA network.  This integration used the RPR - FOM manager based HLA duties. 3.1  SMOC - ModSAF Integration Code RequirementsAs stated previously, ModSAF is a “C Language” system.  SMOC is a ”C++ Language” system.  Mixed systems of the two languages are not difficult, but certain integration rules must be followed.  The primary one is that all function calls from ModSAF libraries into LIBSMOC must use C language conventions.  This means that all of the SMOC “Object Oriented” C++ functions must be enclosed in a “C Linkable” “Wrapper” function.   REF _Ref448042550 \h  \* MERGEFORMAT Figure 4 shows the ModSAF – SMOC integration architecture.  The basic ModSAF architecture, from  REF _Ref455201262 \h Figure 3, is in the upper part of the figure.  Three functional groups have been added to the architecture.  The first is the LIBSMOC addition in the lower center and right side.  The second is the RTI executable programs, RTIEXEC and FEDEX.  The third is an HLA application to generate and log test data, “SMOC-FLY.”  Other HLA and DIS applications may be added to the networks, but, for clarity, are not shown.  The ModSAF and LIBSMOC architectures are joined at two points.  ModSAF output flows to the SMOC and thence to the HLA network through the arrow out of the box headed “PV_WRITE,” specifically using the new service functions, PV_SMOC_WRITE  and SMOC_WRITE.  HLA network input through SMOC enters ModSAF through the new functions SMOC_READ and PV_SMOC_READ.  Table  SEQ Table \* ARABIC 2.  SMOC - ModSAF Changes: Existing and New LibrariesLIBRARYSERVICE_FUNCTIONACTION / SMOC modificationPDUPROCPDUP_INITAdded SMOC Network Service to Command Line Argument List as DEFAULT serviceInitialized VALVE pointers to SMOC functionsInitialize LIBSMOC if selected on command linePKTVALVEPV_SMOC_WRITEC Function to send ModSAF output PDU to C++ “Wrapper” function, SMOC_WRITEPV_SMOC_READC Function to receive network traffic from the C++ “Wrapper” function, SMOC_READ and DISPATCH it to registered ModSAF recipients. (See  REF _Ref455209681 \h Table 1 and  REF _Ref448042550 \h Figure 4)SMOCSMOC_INITInitialize LIBSMOC operationsSMOC_CALLED_EACH_FRAME1. Create and Join HLA Federation during Frame #12. Perform Cyclic SMOC operations:Entity table ProcessingInitiate generation of PDUs to send into ModSAF based on “Subscribed” HLA Attributes and interactions received from the network,Based on ModSAF PDU output, “Publish” HLA Interaction and Attribute updates to the network.“Tick” the RTISMOC_READC++ “Wrapper” function to route input PDU data generated by SMOC to ModSAF and to update the SMOC entity tableSMOC_WRITEC++ “Wrapper” function to route output ModSAF PDU data in the SMOC architectureSCHEDSCHED_INVOKE_FUNCTIONS_UNTILAdd SMOC Timing Loop functions to ModSAF Timing Loop3.1.1  SMOC - ModSAF InitializationThe LIBPDUPROC function PDUP_INIT initializes the SMOC when tasked to do so by a ModSAF command line parameter.  This parameter, “smoc,” was added as part of the integration.  It specifies that SMOC is to be the network service for the run, and turns off the other network services.  It is the default choice, replacing the baseline default network service, UDP.  The function SMOC_INIT performs the administrative details for LIBSMOC initialization.  The HLA Federation is “Created,” if need be, and “Joined at” the beginning of the first simulation frame by the function SMOC_CALLED_EACH_FRAME.  3.1.2 SMOC – ModSAF OutputModSAF output PDUs are sent to the function SMOC_WRITE.  If the PDU is of type ENTITY_STATE, a check is made on whether it is in the LIBSMOC Entity Table as a local entity.  If it is not in the table, it is added to the table.  If it is in the table, the data for the entity is updated.  If the PDU is NOT of type ENTITY_STATE, it is sent to SMOC via the LIBSMOC internal Architecture Manager Class function, ARCHMGR::SEND_DIS_PDU,  where it is processed to see if it matches any publication requirements for the exercise.  If so, HLA network traffic is sent.  The ModSAF “Persistent Object” protocol uses the PDU mechanism to communicate between ModSAF simulations.  It was not implemented as part of this proof of concept demonstration. 3.1.3 SMOC - ModSAF InputHLA Network traffic is based upon the publish and subscribe interactions and attributes in the RPR-FOM, as managed by the RPRMGR functions in SMOC.   ModSAF input PDUs are prepared during the processing of the SMOC Entity Table during each simulation cycle.  They are based on attribute and interaction updates received by the RPRMGR and updates to remote entities in the SMOC Entity Table.  SMOC creates a queue of PDUs to be sent to the ModSAF architecture.  This queue is interrogated during the scheduled ModSAF Read Loop.  PV_SMOC_READ interrogates SMOC_READ for PDU data from this queue.  If a PDU is present, and it is of type ENTITY_STATE, the data for the remote entity is UPDATED in the SMOC Entity Table.  The PDU is also forwarded to PV_SMOC_READ.  There a MODSAF data packet is built with additional routing data. The packet is DISPATCHED  to registered “Call Backs. ”  A “GOT_PACKET” flag is returned to ModSAF, which continues to interrogate PV_SMOC_READ until a “NO_PACKET” flag is returned.3.1.4  SMOC – ModSAF HLA Administration OperationsAs stated in 3.1.1, the HLA federation is “Created,” and “Joined” as part of the first simulation frame activities.  This was because of the long time between LIBSMOC initialization and the beginning of simulation with periodic “TICK” calls to the RTI.  Other Federates attempting to Join the Federation during this period were abnormally terminating execution because of a “Not responding” Federate, namely  the SMOC – ModSAF application.  This could have been fixed in two ways:  delay the Federation Creation and Join until the last possible moment, or initiate another “Thread” process for Federation “Creation,” “Join” and the “Tick” of the HLA timing loop.  The delayed “Creation” and “Join” was chosen as was the least complicated for the UNIX based operating system in use.  The SMOC_CALLED_EACH_FRAME function is called at the beginning of each ModSAF timing cycle.  If SMOC is not in use, no action is taken.  If SMOC is in use, the SMOC Entity Table is processed and the RTI is “Ticked.”.  Updated local Entity State attribute data is sent to the RTIEXEC / FEDEX for publication on the HLA network.  Updated remote Entity attribute data received from the network are used to form Entity State PDUs which are sent to ModSAF.  Other attribute and interaction update network traffic is used to form PDUs of other types which are then sent to ModSAF. 3.2  SMOC - ModSAF Integration Configure / Make / Build RequirementsOne of the deliverable results for this integration project was an integrated package that could be produced using the standard ModSAF MAKE process.  This required adaptations to the UNIX environment and the ModSAF CONFIGURATION process.   The baseline ModSAF 4.0 configuration does not require the use of C++.  In fact, C++ will not compile many of the ModSAF 4.0 libraries.  SMOC is a C++ application.  Consequently, both C and C++ compilers were required in the MAKE process.  Because C++ objects were present, the linking of the executable file had to be performed by the C++ linker.  Additionally, C/C++ language header and library files had to be referenced.  “Wrapper” functions to allow C usage of C++ functionality were required.  These “Wrapper” functions had to specify C linkage to allow them to be linked with BOTH C and C++ functions.  A test for a system parameter was used to instruct the C++ preprocessor to specify C linkage for these library header files.  No such action was needed for the C preprocessor. 4. SMOC - ModSAF Test and Demonstration ProgramThe development and test of the SMOC-ModSAF integration was performed in the STRICOM Engineering Computer Resource Center (ECRC) using two Silicon Graphics (SGI) Indigo 2 computers, and other WINDOWS-NT machines as needed for test.  The following table lists the specifics for each machine:Table  SEQ Table \* ARABIC 3.  SMOC - ModSAF Test and Demonstration ConfigurationParameterSGI-3 / “E”SGI-1 / “H”ECRC NT (Desk Top)NAWC NT (LapTop)RAM192 Meg128 MegProcessorSGI R4000 seriesSGI R4000 seriesOperating SystemIRIX 6.5IRIX 6.5WINDOWS NT 4.0WINDOWS NT 4.0C / C++ CompilersSGI 7.2 / Mips 3 /-n32Microsoft Visual Studio 6.0RTI1.3v61.3v61.3v61.3v6Available ApplicationsSMOC-ModSAFSMOC-ModSAFSMOC_FLYSMOC_FLYSMOC-F14SMOC-F14RTI-EXECRTI-EXECRTI-EXECRTI-EXECFEDEXFEDEXFEDEXFEDEXSMOC-ModSAF testing was attempted for several configurations.  The first was the STRICOM ECRC laboratory, shown in  REF _Ref455218509 \h Figure 5  The second will be the NAWCTSD HLA Data Distribution Management (DDM) experiment to be conducted for DMSO in 1999. The Distributed Interactive Simulation Applications (DIS APP) in  REF _Ref455218509 \h Figure 5 that are used in this test program are the SMOC-ModSAF combination, the SMOC-FLY combination, and the SMOC - F14 application.  Any other DIS APP that has been converted to HLA via SMOC could be used.   EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 5.  SMOC-ModSAF Test NetworkFigure  SEQ Figure \* ARABIC 6  SMOC HLA - Distributed Interactive Simulation  Protocol Data  Unit RelationshipsThe SMOC  HLA – DIS PDU application middleware relationship is shown in figure 6.  This shows two test requirements.  The first is that the test program should look for accurate reproduction of entity state PDU (ESPDU) information, but not necessarily the same PDU count out of one application and into the other.  The second is that the non-ESPDU counts and interaction data content should be identical. 4.1  SMOC-ModSAF, SMOC - Fly, and SMOC - F-14 combinationsTest layouts were set up for the ECRC laboratory to demonstrate the ability of SMOC-ModSAF to transmit, receive, and display PDU based HLA network traffic.  This was shown in several ways.  The first was the fact that entity tables in the SMOC layer of each application, ModSAF and FLY, match.  This was observed in all cases.  Counts of PDUs input and output to each simulation were maintained.  As shown in  REF _Ref457606953 \h Figure 6, attribute oriented PDUs should match in both type and count.  Entity State PDUs, type 1, are built from the updated SMOC Entity Table, not from individual items in the HLA traffic.  There is no reason for them to match in number.In these tests using the SMOC - ModSAF combination, the “Fly” target generator, and the NAWCTSD F-14 simulation, objects generated in one simulation were tracked in all others.  Interactions tested were Weapons Fire and Munitions Detonation.  These were successful.  Unit SGI-1 / “H” with 128 MB of memory would start the SMOC - ModSAF application.  However, when additional dynamic memory was required, as when discovering a remote entity, the application would terminate due to insufficient memory.  Unit SGI-3 / “E”, with 192 MB of memory did not suffer from this problem.  4.2  NAWCTSD DDM ExperimentThis experiment being conducted by NAWCTSD is scheduled to use SMOC - ModSAF as the HLA application to test Data Distribution Management by defining dynamic application changes and corresponding Distribution Region Changes.  It will continue the development process.  It will be completed in August, 1999.5.  ConclusionsThe ability of MODSAF to send and receive data via a HLA network using a Middleware approach, SMOC, has been demonstrated.  Complete memory requirements for SMOC – ModSAF could not be determined at this time.  Two or more machines with 192 MB, or more, will be needed for this determination. Additional Effort should be made to extend this effort to MODSAF 5.0, to the “Next Generation” HLA Run Time Infrastructure, RTI-1.3NG, and to the LINUX operating system.  6.  Lessons LearnedSituationConclusionDue to circumstances beyond project control, “Y2K” compliance actions, the operating system (OS), C and C++ compiler set was changed.  The resulting mixed set of SGI OS and SGI and GNU compilers did not work.  This delayed the project until a consistent set of SGI compilers could be obtained. Use a consistent set of compilers for development.A nagging problem was not allowing the last SMOC based federate to join the federation and receive updates from the other federates until one of the existing federates resigned from the federation.  Insights from the DMSO RTI 1.3v6 Help Desk response to our e-mail allowed this bug to be solved.The DMSO support system works and should be used by application developers. The aforementioned operating system and compiler change was not supported by the DMSO supplied set of HLA Run Time Infrastructures.  DMSO’s RTI 1.3v6 Help Desk contractor supplied a new RTI within 3 hours of our request.7.  References[1] SMOC Documentation (on distribution CD-ROM), Naval Air Warfare Center Training Systems Division, 1998[2]  ModSAF Documentation:  Users Guide, Version Description Document, Library Text Information Files, ModAF 4.0, 1998, ModSAF 5.0, 19998.  AuthorsERIK S. HOUGLAND is an electronics engineer with the Naval Air Warfare Center Training Systems Division Systems Engineering Division, Battle Force Simulation Branch.  His work interests include the implementation of HLA compliance in Navy training systems.DANIEL J. PATERSON is an electronics engineer with the Simulation & Models Division, Modeling & Simulation Development Branch.  His work interests include the implementation of HLA in Naval training systems, and participation in HLA development groups at the DOD level.PAGE  1PAGE  i FILENAME \p D:\SAFwork\SMOCSAF\99F-SIW-057_V002.doc