Support for Heterogeneous Communication Infrastructures in the HLA RTISteven B. BoswellDaniel J. Van HookLincoln Laboratory, MIT244 Wood StreetLexington, MA 02420-9185 HYPERLINK mailto:Boswell@ll.mit.edu boswell@ll.mit.edu,  HYPERLINK mailto:dvanhok@ll.mit.edu dvanhook@ll.mit.eduKeywords:HLA, RTI, Shared Memory, SCRAMNet, MPI, SPP, Heterogeneous Communications, ScalabilityABSTRACT: A communications infrastructure is heterogeneous if it is composed of parts with disparate transportation services that cannot directly interoperate.  Examples of different transportation services are the Internet Protocol (IP), shared memory, SCRAMNet, which emulates shared memory on a LAN, and the Message Passing Interface (MPI) utilized in Scalable Parallel Processors (SPPs).  There is a clear need to support transportation services other than IP, so that platforms that rely on those services may make use of the HLA RTI.  It will of course be desirable to combine platforms employing these disparate communication infrastructures in a single federation execution.  As a concrete example, consider connecting an IP-based workstation with a shared memory multiprocessor.  One architectural approach for addressing heterogeneous systems is to provide a bridging application that operates above the RTI API.  An alternative approach is to provide interconnection services that operate below the RTI API.  Making particular reference to the DMSO-sponsored RTI 1.3, this paper discusses how heterogeneous services may be incorporated within a single RTI implementation, internal to the API.  The paper also considers performance and usability implications of the different approaches.1.  IntroductionTwo communications infrastructures are heterogeneous if they cannot directly communicate with one another using the mechanisms native to each.  It is important for widespread applicability of the HLA that its RTI facilitate the integration of heterogeneous communication infrastructures. This paper considers the prospect of supporting multiple communications infrastructures within a single RTI implementation, beneath the application programming interface (API) of the RTI. This work has been sponsored by the Defense Modeling and Simulation Office (DMSO).The paper is organized as follows.  Section 2 states the problem that is addressed in this paper and discusses its significance.  Sections 3 through 5 present a design concept for supporting interoperation of heterogeneous infrastructures in the RTI. Section 6 discusses several issues arising from the approach presented in earlier sections, and Section 7 gives a brief summary.Problem StatementThe HLA and its RTI offer federates a collection of services that among other things abstract the underlying communication infrastructure. Effectively, federates deal only with the service abstractions of the RTI API. Federates can remain ignorant of the details of how those services are supported, as implied by Figure 2.1.Figure 2.1: Federate Point of ViewRTIs developed to date generally support only IP. However, performance and other concerns indicate the need for RTIs that support additional transportation service types [1]. Examples include shared memory multiprocessors [2], SCRAMNet distributed reflective memory [3], and MPI (Message Passing Interface) [4] on Scalable Parallel Processors (SPPs). In addition, systems employing more than one transportation service are also of interest. Such a heterogeneous communication infrastructure is depicted in Figure 2.2. This figure shows federates attached to different portions of the infrastructure communicating via IP over Ethernet and an ATM WAN, shared memory on a multiprocessor, and MPI on an SPP.The problem addressed in this paper is how best to support federates’ homogeneous RTI service abstraction viewpoint, alluded to in figure 2.1, when the underlying communication infrastructure is heterogeneous, as illustrated in figure 2.2. Some of the important issues and problems in trying to interconnect system segments that differ in their transportation services are as follows:Incompatible addressing.Incompatible message formats.Disparate resources and capabilities.Efficient data distribution across transportation service boundaries.Clearly, specialized gateways for converting between transportation services could be developed on a pairwise basis for each combination of transportation service types. However, such an approach is unsatisfying.  It is merely a point solution. Better solutions are clearly desirable and possible. The following sections of this paper explore a more general approach.Infrastructure Point of ViewApproach: Routing Domains, Routers and ForwardersThis section introduces the basic elements of an approach to the problem of integrating heterogeneous communications infrastructures in an HLA federation execution.  Figure 3.1 gives an architectural abstraction of the approach, with key functional components identified.   The components are Routing Domains, Routers and Forwarders.A Routing Domain (RD) is a collection of applications that share a common communications infrastructure.  For communications within the domain, applications can make use of a common addressing scheme and common transport services and protocols. Forwarding, as the term is used in this paper, is moving data between Routing Domains.  A Forwarder is an intermediary with interfaces to the transport services of two or more communication infrastructures, hence to two or more Routing Domains.An integral part of the forwarding function is mapping addressing information employed in the source RD to addressing information that will serve in the destination RD.   For this purpose, address mappings are stored in a database, which we will refer to as a Forwarding Table. Figure 3.1: Router, Forwarder and Routing Domain ConceptRouting amounts to determining addressing information for data transfer, in particular for forwarding between RDs.  In part this determination consists of identifying destinations (that is, applications in a federation execution) that need to receive an offered element of data.  In the HLA this linking of senders and receivers is conducted by use of the Declaration Management (DM) and Data Distribution Management (DDM) service groups.  Routers, as used in this paper, are an extension of RTI support for these service groups to the heterogeneous infrastructure problem.  Note that the usage of the term in this context is distinct from the more common use of Internet "routers".  Figure 3.2 is a simple example that illustrates these concepts. This figure shows two routing domains connected by a forwarder and a single router. One routing domain might be a set of federates running on a shared memory multiprocessor and the other might be one or more federates running on workstations connected by an Ethernet and using IP. The router calculates connectivity information by matching associations and subscriptions. Associations and subscriptions are DDM services defined in the HLA Interface Specification.  In essence, subscriptions express desires to receive data and associations express intentions to produce data.  Both associations and subscriptions specify the nature of the data to which they refer.  The RTI1.3 implementation represents the specifications as data structures consisting of classes or object identifiers, attributes, and regions in routing spaces [5].  The connectivity information (e.g., addressing) is stored in table form and is made available to the forwarder. The forwarder uses this connectivity information to determine which data to forward between routing domains and how to forward it.Figure 3.2: Routing FunctionEvery forwarder needs to have a router that provides address mappings for it.  However, the relationship need not be one-to-one.  Architecturally, a single router element may serve any number of forwarder clients.  This provides flexibility for load balancing and other reasons.4.  Approaches to ScalabilityLarge numbers of rapidly changing subscriptions and associations are a significant challenge for RTI implementations. Computation and communication costs for Declaration Management and Data Distribution Management can negatively impact performance measures such as throughput and latency. The problem is depicted notionally in Figure 4.1, which shows a large system composed of many routing domains, forwarders, and routers. By implication, a large number of federates are generating many rapidly changing subscriptions and associations. The crux of the problem is that without any other assumptions, all routers potentially need to process all subscriptions and associations to ensure correct data distribution.  Figure 4.1: Notional large systemThis could represent an overwhelming computational and communication load.  Fortunately, there are techniques that can be brought to bear on this problem. The following paragraphs discuss three particular techniques that build upon each other to significantly enhance scalability.The notion of locality is depicted below in Figure 4.2. This figure shows the same system as Figure 4.1 but with portions of the system encapsulated in a cloud from the point of view of router R1. The key idea of locality is that a router only needs to operate on subscriptions and associations that it views as originating from its local neighborhood.  The value of this characteristic is that a large system can be viewed hierarchically. This permits a very large and complex system to be treated as though it were much smaller and simpler. As a consequence, the amount of information that any one router must cope with can potentially be reduced.Figure 4.2: LocalityThe notion of aggregation is depicted in Figure 4.3. This figure shows how subscriptions (or associations) can be aggregated together so that only a smaller number of subscriptions (or associations) must be processed. In Figure 4.3, two regions are aggregated by router R2 before presentation to router R1. As a consequence, the computational load of router R1’s matching calculation is reduced – there are fewer subscriptions and associations to operate on. Clearly, as the number of subscriptions and associations is increased, this technique has more and more impact.Figure 4.3: AggregationThe notion of recursive DDM [5] is depicted in Figure 4.4. The key idea of recursive application of DDM is to use DDM itself to efficiently distribute the data on which DDM operates, i.e., subscriptions and associations. A corollary of this concept is that subscriptions and associations are represented as attributes of RTI object classes (private to the RTI) so that the RTI data distribution mechanisms can be employed to support DDM. Referring to Figure 4.4, the RTI subscribes for subscriptions (to match against a publisher’s associations) and subscribes for associations (to match against a subscriber’s subscriptions). The recursive DDM concept has been successfully applied in the RTI1.3 implementation to enhance scalability. Applying these concepts to the router/forwarder approach of this paper, routers subscribe for subscriptions that could match associations emanating from local routing domain(s). Similarly, routers subscribe for associations that could match subscriptions emanating from local routing domain(s). The result is that routers need to process only those subscriptions and associations that have a reasonable possibility of matching. The recursive DDM approach effectively provides a coarse filter so that more refined (and expensive) calculations are minimized. The key result of applying DDM recursively is that the computational load of routing can remain essentially constant even as the system grows, given realistic and reasonable execution scenarios.Figure 4.4: Recursive DDMA More Detailed ExampleThe basic, core functionality of a link between heterogeneous domains is summarized in Figure 3.2 and the corresponding text above.  However, in a more complex configuration with multiple forwarding hops, as illustrated in Figure 3.1, some additional considerations arise. To perform Data Distribution Management, information about associations and subscriptions issued by one application must be made available to all other applications that might discover overlapping interest with those associations and subscriptions.  This section sketches a design concept that illustrates the principle of localization introduced in Section 4.  In this design, interest expressions are propagated throughout the federation execution, and matching calculations and forwarding operations are conducted for each inter-domain link in a distributed way.  Note that the example is presented in more detail than other discussions in the paper, and it can be skipped by readers who are not interested in greater detail.5.1 AssumptionsBefore proceeding further it is advantageous to state some organizational and topological assumptions that apply for the discussion in this section.• Each router knows the set of forwarders for which it is to perform matching calculations.  • Routers have the ability to exchange messages with one another.  They may use the same forwarding and communication infrastructure that is used for simulation data flows, or they may use an entirely separate communication mechanism.Also, it will be assumed that• There is a known spanning tree rooted at each routing domain.  The spanning tree specifies the sequence of forwarding links to follow in transporting object data and interactions to all other domains.• Router elements have knowledge of the collection of all these spanning trees.• Routers know which router manages each forwarding node.  These assumptions are not essential to the integration of heterogeneous communication infrastructures in an HLA federation, or to the particular design concept presented herein.  They can be relaxed, allowing more agile, albeit more complex implementations.  However, by omitting the complications of topology discovery, loop elimination, and path selection encountered in Internet routing, for example, the discussion here is simplified and allowed to focus upon services specific to the HLA and RTI.  No constraints are imposed on the mesh of forwarder interconnections.Routing FunctionFigure 5.1 illustrates a strategy by which subscription and association expressions are repackaged as they are disseminated among heterogeneous routing domains, and treated, for each forwarding node, as if they derived from immediate neighbors of the forwarder.  Two labeled routing domains are called out in Figure 5.1, and two forwarders, each with its own router.  The figure is organized around the viewpoint of router R1, which is acting on behalf of F1.  Connected to F2 is an ensemble of HLA applications which, from the viewpoint of R1, constitute the "rest of the federation execution," reached via F2.  In the figure, an association has been issued from an application within RD1, and is conveyed to R1.  Router R1, knowing that data published by a member of RD1 would flow to RD2 through F1, reissues an association on behalf of F1 into RD2.  The association will be handled within RD2 in the same manner as any other association from an application within RD2.  Also, knowing that data published by a member of RD1 will flow from F1 to the remainder of the federation execution via F2, and knowing that R2 provides the routing functionality for F2, R1 will also reissue the association to R2 on behalf of F1. In turn, R2 will reissue the association on behalf of F2 to its neighboring elements as appropriate.  Similarly, in Figure 5.1, a subscription is received by router R2, identified as emanating from an application elsewhere in the federation that interfaces with F2.  Router R2 relays this subscription to R1 on behalf of F2, and R1 relays it again to RD1 and RD2 on behalf of F1. Figure 5.1: Repackaging and dissemination of associations and subscriptionsNow, on behalf of forwarder F1, router R1 has a local view of the interest expressions pertaining to F1, expressed in a form relevant to the possible operations of F1, and R1 is equipped to perform matching calculations and establish flows through F1 in a distributed manner.  If a match exists between the association from RD1 and subscription from F2, then R1 will establish a transport mechanism through F1 by constructing and loading a forwarding table entry into F1.ForwardingThe forwarding process, and the forwarding tables used to support it, are conceptually quite simple.  Forwarders have an enumeration or labeling of the communication interfaces they support, both for incoming and outgoing data flows, and routers, as discussed above, are apprised of the connectivity of their forwarders.  An illustration of forwarding tables matching the configuration in Figure 5.1 is given below in Figure 5.2.  The first row in the tables listed for forwarders F1 and F2 corresponds to the matched association and subscription depicted in Figure 5.1.  Assume that the association from RD1 is for updates.  The router for F1 arranges that messages containing attribute updates for the associated object, if any, arrive at forwarder F1 tagged with what we will call a flow tag, S1.  The router knows that such messages will reach F1 on input interface A (the only possibility in this case), and will be resent to F2 on F1's output interface A.  The router for F1 selects a flow tag, S2, to use for the outgoing message, and it supplies F1 with the four-tuple that comprises the first row of its forwarding table.  Similarly, the router serving F2 selects a flow tag for messages on the output interface, and supplies F2 with a forwarding table entry composed of an input pair (tag, interface) and an output pair (tag, interface), or more generally, a list of such output pairs.  The second entry in the table for F1 contains a list of output pairs.  Notionally, another association issued from within RD1 has matched both with a subscription from RD2 and with a subscription originally issued on the far side of an interface to F2, none of them pictured in Figure 5.1.  The matching results in a multi-destination flow that bifurcates at F1 with branches on both output interfaces.Figure 5.2: Forwarding table illustration.Clearly, coordination must occur to insure that the tag used on output from F1 is the same used for input by F2.  However, this is easily handled if routers select output tags and pass them forward while disseminating association parameters, as depicted in Figure 5.1.  In this case the next-link router is informed in advance of the input flow tag that will be used whenever data corresponding to the association is sent.6. DiscussionThe following sections discuss a number of aspects of the approach propounded in this paper.6.1 Relationship to Bridge FederatesThe notion of a bridge federate has been described previously [6,7]. Bridging at the federate level is a complementary technique to the approach described in this paper. Both techniques are useful and have their own particular advantages, listed below.Below the RTI API ApproachHigher performance. Data transfer between segments employing different transportation services is at a lower level in the software so the information is subject to less processing. In addition, because the bridging function is resident inside the RTI, internal information can be exploited to boost performance.Homogeneous viewpoint. Federates can all be members of the same execution, unlike the bridging federate approach. This simplifies federation management and the federation execution management tools.Enhanced scalability. Access to internal information and services can lead to better scalability. For example, in the case of RTI1.3, the capability to exploit DDM recursively enhances scalability.Bridge Federate ApproachApplicable to RTIs from different vendors. The bridge federate approach can be employed to connect federates using heterogeneous RTIs.Suitable for operation in conjunction with a security guard application that controls information flow between different classification levels.Both approaches could even be used at the same time. For example, an RTI supporting heterogeneous communication infrastructures from one vendor could be connected to an RTI from another vendor using a bridge federate. Federates employing each RTI could then interoperate.6.2 Impact on the Interface Specification and RTI APIAt this point in time, we believe that no changes to the Interface Specification or the RTI API will be required to support our approach. The heterogeneous nature of the underlying communication infrastructure should be transparent to all federates.6.3 Support in Different RTIsNot all RTIs need to provide support for heterogeneous communication infrastructures. The ability to support heterogeneous communication infrastructures may become a feature by which RTI vendors can distinguish themselves in the marketplace. Other factors, such as performance, scalability, and transportation service types supported may also become distinguishing factors. 6.4 RTIexec and Fedex ProcessesRTI1.3 uses an RTIexec process for managing execution naming and creation and a Fedex process for managing each individual execution. These processes may be executed on any processing resource independent of the transportation service type.6.5 Applicability to Other RTIsThe approach described in this paper is not limited to RTI1.3. We believe that the forwarder, router, and routing domain architectural approach is sufficiently general that it can be successfully applied in other RTIs. Certainly the details of the implementation will be specified to each individual RTI but the overall concepts can be tailored to the implementation at hand.7. SummaryIn this paper we have discussed the problem of providing interoperability in HLA federation executions for federates with fundamentally distinct communication infrastructures.  In particular we have tried to understand and to explain what functional capabilities are needed to build support for heterogeneous players within the RTI itself, and to identify organizational principles that lead to efficient and scalable solutions.  We have briefly discussed essential elements of a design concept for implementing the required capabilities in an RTI.  Certainly, there are many possible approaches to this problem, and it is not claimed that the design elements presented here are superior to other alternatives.   Many issues remain unaddressed, including dynamic topologies and fault tolerance and failure recovery.  The discussion has been intended to clarify issues, establish feasibility, and suggest some reasonable first steps in supporting heterogeneous communication infrastructures within the RTI.  We have identified advantages that accrue from making this support native to the RTI, concerning both ease of use and performance, and we have also considered interoperation with gateway federates.AcknowledgmentsThis work was sponsored by the Defense Modeling and Simulation Office (DMSO). Judith Dahmann of DMSO has provided overall guidance and direction in this work. James Calvin of MIT Lincoln Laboratory made significant contributions. References[1] Paul J. Christensen, Daniel J. Van Hook, Harry M. Wolfson: “HLA RTI Shared Memory Communication,”  99S-SIW-090, 1999 Spring Simulation Interoperability Workshop, March 14-19, 1999. [2] Unix System V IPC suite, for example.[3] SCRAMNet is a product of Systran Corporation. See  HYPERLINK http://www.systran.com http://www.systran.com.[4]  See the MPI page at the Argonne National Laboratory web site  HYPERLINK http://www.anl.gov http://www.mcs.anl.gov/mpi/. [5] Daniel J. Van Hook, James O. Calvin, “Data  Distribution Management in RTI 1.3,” 98S-SIW-206, 1998 Spring Simulation Interoperability Workshop, March 9-13, 1998.[6] Keith Briggs: "A Required RTI Gateway Standard as a Solution to RTI Interoperability," 98S-SIW-188,  1998 Spring Simulation Interoperability Workshop, March 9-13, 1998. [7] Christina Bouwens, Daphne Hurrell & David Shen: "Implementing Ownership Management Services With a Bridge Federate," 98S-SIW-197, ,  1998 Spring Simulation Interoperability Workshop, March 9-13, 1998. Author BiographiesSTEVEN B. BOSWELL is on the staff of MIT Lincoln Laboratory.  He worked on the STOW RTI prototype and RTI1.3.  Prior to that he was involved in research and development related to civil air traffic control and traffic management.  He holds a Ph.D. in Mathematical Sciences and preliminary degrees from Rice University.  His technical interests are in distributed systems, software engineering, and data analysis and modeling.  Before joining Lincoln Laboratory he worked as a biostatistician at Harvard Medical School and taught probability and statistics at Georgia Tech.DANIEL J. VAN HOOK is on the staff of MIT Lincoln Laboratory where he has most recently worked on the STOW RTI prototype and DMSO's High Level Architecture. His primary technical interests are in the areas of distributed systems, communications, signal and image processing, and software engineering. Prior to joining Lincoln Laboratory, he was employed by Loral Advanced Distributed Simulation and by BBN Advanced Simulation Division, working on distributed simulation systems including the SIMNET program.  Mr. Van Hook received Engineer and SM degrees from the Massachusetts Institute of Technology and a BS from Rutgers College of Engineering, all in Electrical Engineering.