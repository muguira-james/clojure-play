Web Services Interest ManagementKatherine L. Morse, Ph.D.Science Applications International Corporation10260 Campus Point DriveSan Diego, CA  92121858-826-6728HYPERLINK "mailto:kmorse@epsilonsystems.com"morsek@saic.comJ. Mark Pullen, D.Sc.Department of Computer Science & C3I CenterGeorge Mason University, Fairfax, VA 22030703-993-1538 HYPERLINK "mailto:mpullen@gmu.edu" mpullen@gmu.eduKatherine L. Morse, Ph.D.Science Applications International Corporation10260 Campus Point DriveSan Diego, CA  92121858-826-6728HYPERLINK "mailto:kmorse@epsilonsystems.com"morsek@saic.comRyan P.Z. BruntonScience Applications International Corporation10260 Campus Point DriveSan Diego, CA  92121858-826-6872HYPERLINK "mailto:kmorse@epsilonsystems.com"bruntonr@saic.comDavid L. DrakeScience Applications International Corporation10260 Campus Point DriveSan Diego, CA  92121858-826-2278HYPERLINK "mailto:kmorse@epsilonsystems.com"drakedavid@saic.comKeywords: XMSF, Web Services, Interest Management, C2IEDMDesign Patterns, Conceptual Models, Component Models, Composability, Object-Oriented Analysis, FEDEP, BOMs, XMSF, SRMLABSTRACT: As part of our work on the Experimental Command & Control Interface (XC2I) we are developing a Web Services Interest Management (WSIM) capability.  WSIM is enabled through the integration of web services with an XML-based Command & Control Interest Management Language (C2IML).  Our approach to WSIM, while currently focused on integration of C2 viewers, uses a layered approach to enable integration with different C2 viewers and other, native interest management and data distribution management approaches.  The mapping layers from the viewer to C2IML to the native IM are a key component of the WSIM architecture.  In this paper we describe the design of the WSIM architecture, focusing on the mapping layers and C2IML.  We also discuss the possibility of integrating C2IML with the Command and Control Information Exchange Data Model (C2IEDM) to address a recently-recognized shortcoming of C2IEDM with respect to querying.IntroductionThe potential of Internet/Web technologies to facilitate distributed software systems for simulation and C4I has recently come to the forefront [4]. Initial work in this area has yielded very promising results [5], including the DCEE [1] Viewer (XDV) proof of principle sponsored by the  US Joint Forces Command (JFCOM) J9. A next logical step is to build on the XMSF to create a distributed software system for data visualization that uses Web services to manage distributed data. Toward this end, JFCOM has sponsored an experimental design for a Web service-based viewer to provide both two-dimensional and three-dimensional visualization of experimentation terrain; scale up to large federations of distributed simulations as needed for Joint Urban Operations; and provide advanced support features such as role-based access control (RBAC), area of interest management (AOIM) [2], and aggregation interest management (AGIM). Interest Management plays a key role both in enabling users to define effective visualization of the experimental environment and in maintaining affordable levels of network traffic. Toward this end, we have developed an architecture for the Experimentation Command and Control Interface (XC2I) system and created prototype modules for some system elements. This paper describes the elements of the WSIM elements of the XC2I architecture.  Section  REF _Ref487614895 \r \h  \* MERGEFORMAT 2 gives a brief overview of the entire XC2I project.  Section  REF _Ref487534282 \r \h  \* MERGEFORMAT 3 describes the WSIM architecture and its components.  Section  REF _Ref487534306 \r \h  \* MERGEFORMAT 4 describes the semantics of C2IML followed by examples of C2IML in  REF _Ref487534333 \r \h  \* MERGEFORMAT 5.  A summary and ideas for future work are provided in section  REF _Ref487534363 \r \h  \* MERGEFORMAT 6.  The C2IML schema is provided at the end as an appendix.XC2I OverviewXC2I has been a collaborative effort between SAIC, GMU, and VMASC with funding from JFCOM J9, the eventual goal of which is to develop a flexible 2D/3D viewer/controller for C2I distributed simulations.  The rationale for such a system is one of straightforward economics: it is often neither practical nor effective to relocate ranking officers to simulation centers in order to allow them to view and interact with systems engaged in cooperative simulation events.  A single, flexible C2I viewer/controller platform which can remotely connect to these events and be transparently tailored to different systems would allow these officers to view and interact with the simulations without the cost in time and money associated with relocation.  Toward this end, the teammates designed an architecture for such a system and began implementation of a prototype for use with an existing simulation involving distributed JSAF instances modeling JUO scenarios.  While this prototype will be used as an exemplar throughout the rest of this paper, it is important to note that it was simply a proof of concept implementation tailored to a specific application, and therefore some of the functionality and capabilities designed into the architecture do not apply directly, and in fact have in some cases yet to be implemented.The prototype implementation was designed to interact with an HLA-compliant simulation of distributed JSAF instances customized for JUO scenarios and was interconnected using RTI-s.  This meant that actual implementations were needed for the access control subsystem, AOIM, AGIM, and an HLA data feed connector built for RTI-s.  An additional data feed connector was also required to connect directly to the JSAF Persistent Object Store (POS) as not all required data could be retrieved directly via RTI-s.  Finally, a C2IML-aware control system needed to be added, with another connection directly to the POS, to allow orders to be passed from the XC2I client to entities controlled directly by JSAF.  The visualization component chosen for the front-end was a modified SOFVIZ 3D viewer, itself a customization of OpenSceneGraph for the Windows platform.   REF _Ref487514545 \h Figure 1 shows an overview of the architecture.  EMBED PowerPoint.Show.8  Figure  SEQ Figure \* ARABIC 1.  Experimentation Command and Control Interface ConceptWSIM Architecture REF _Ref487514811 \h Figure 2 illustrates the top-level architecture for XC2I. EMBED PowerPoint.Show.8  Figure  SEQ Figure \* ARABIC 2.  XC2I Web Service Interest Management Top-Level Architecture REF _Ref487531962 \h Figure 3 shows the software modules derived from the WSIM architecture. The subsequent subsections describe the components of this architecture relevant to WSIM.WSIM ClientThe functions of the WSIM client are to interface to the supporting network services, and to provide the following to the GUI client:Role-based Access Control user interface - access control is based on the user’s role in the federation.  The user authentication to the RBAC client becomes input to the Access Control Web service.Area of Interest Management user interface– AOIM is based on geographic location and other attributes such as object type or object ID.  See [2] for more information on interest management. The user’s definition of  geographic, temporal and functional interests becomes input to the Web service controlling the Server AOIM function.Aggregation Interest Management user interface– AGIM is a new concept developed for this viewer whereby the user defines an aggregated view of individual entities. This concept is most applicable to force-on-force simulations.  The AGIM function must cache values of all C2 data, collect finer-grain objects into coarser-grain objects, and substitute XML tags for the coarse-grained version in the C2 data stream. AGIM presents some difficult challenges including integrating the unit order of battle when it is not explicitly provided in the federation data and determining the location at which to display the aggregated entity.  We have provided this architectural element as a place where these functions can be performed in future versions of WSIM. WSIM ServerThe WSIM server is responsible for adding tags to federate data and feeding data to clients.  The input data is tagged by an interface so the simulation, federation, or other data source, to enable filtering at subsequent layers.  It is filtered in the following order:First by access privileges – access control happens first because there is no point in proceeding if the user doesn’t have the privileges to view the data.Then by area of interest – by definition, data outside the area of interest should not be sent. This means the AOIM filter must maintain IM state for each supported viewer and filter data appropriately. We have implemented a prototype filter that is schema-driven in that it draws C2 and IM schema, expressed in XML, from a webserver and uses these to establish internal tables that will enable rapid categorization of C2 data passing through the AOIM filter.Finally by aggregation interest management – once all the viewable data has been identified, it has to be aggregated in accordance with the user’s subscriptions.  Since one of the purposes of IM is to reduce network traffic, aggregation should be performed at the server.Communications InterfaceA particular focus of our work has been to resolve the differences in communication performance implied by various possible XC2I applications. If client-server communication is implemented as a standard XML/SOAP/HTTP Web service, the client must poll the server continually for updates. Furthermore, the protocol overhead in this type of service can present an unacceptable network load where large simulations with many objects are to be viewed. Consequently, we specified and prototyped two types of communication:Classical Web service, which amounts to a Remote Procedure Call (RPC) where the client invokes a process in the server to provide any changes in filtered data state since the last polling update.Streaming multicast service, where the initial RPC starts a stream of state update data that can be delivered via TCP, unicast UDP, or multicast UDP. The data carries the tags from the C2 data stream. Because these tags can be quite lengthly, we provide an optional mode where the tags from the C2 schema are enumerated. The enumerated values are available from the Object ID Web service and can be used as a compressed version of the tags, The Object ID server serves as a central coordinator for multicast group assignment.Support ServersWhereas a given experimentation environment is expected to have multiple instances of the WSIM client and server, there are three other servers that provide coordinating support, so that only one instance of each is needed. (Shadow backups could be used if extremely high reliability is needed.)  The three servers are:Access ID server: a Web service that authenticates access requests by clients, after they are passed through the WSIM RBAC function.Schema server: a traditional webserver that provides the C2 and IM schemas as XML documents to WSIM processes on demand, thus ensuring consistency across the entire experimentation environment.Object ID server: a Web service that provides unique values for object instances, compressed XML tags from schemas, and identity of available multicast groups. EMBED PowerPoint.Show.8  Figure  SEQ Figure \* ARABIC 3.  WSIM Software Modules and Information FlowC2IML SemanticsAt a recent workshop on the Command and Control Information Exchange Data Model (C2IEDM) [3], the issue was raised that C2IEDM is well defined for sending (publishing) data relevant to C2, but that it currently contains no mechanism for requesting (subscribing) data.  Since XC2I is intended to use C2IEDM as its data representation model, it was logical that the subscription mechanism should also be based on C2IEDM.  We have named the resulting interest management language C2 interest management language (C2IML).  Wherever possible, the naming conventions for C2IML tags are consistent with the naming conventions for the same concepts in C2IEDM.The set of possible IM actions for a particular instance of the architecture is expressed as an XML schema.Interest Management LayersIn the architecture and prototype we have developed, the user subscribes to types of entities in a geographic region using a GUI.  However, the same language could be used for non-GUI-based interest managers.  The goal is to insulate the user from the details of the IM protocol and underlying, native IM mechanisms.  Mapping between these components is handled at layers beneath the viewer.  REF _Ref487531316 \h Figure 4 illustrates this concept for a completely generic WSIM architecture.Figure  SEQ Figure \* ARABIC 4.  Generic Mapping Layers REF _Ref487512702 \h Figure 5 illustrates the use of C2IML in the context of mapping layers for the specific viewer.Figure  SEQ Figure \* ARABIC 5.  C2IML Mapping LayersInterest ExpressionsFor simplicity, all interest expressions (IEs) have at most one viewbox. All other operands are interpreted to be subscriptions within the viewbox. The following restrictions are enforced for the limited scope of the current viewer:A user can only subscribe to entities in the current viewbox.If an entity of interest moves out of the viewbox (“out of scope”), its updates won’t be delivered again until it’s back in scope, but the subscription will remain in effect. This is enforced by the viewer, not by C2IML.The current language assumes that interest expressions are additive, i.e. that each subscription for a given viewbox adds to any previous subscriptions for the same viewbox. We anticipate that ultimately the language will also be able to represent unsubscriptions.C2IML ExamplesWe begin by illustrating C2IML with the following six examples. Each example illustrates a different use case for the C2IML defined in the C2IML Schema.  The schema itself is presented in Appendix A.  Explanations follow each example.Example 1: Simple Interest Management  1  <?xml version="1.0"?>  2  <c2iml:InterestExpression xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  3    xsi:schemaLocation= "file://./c2iml.xsd"  4    xmlns:c2iml="http://www.xmsf.com/xc2i/c2iml">  5    <c2iml:Viewbox>  6      <c2iml:CornerPosition lat="30.720" lon="-98.588"/>  7      <c2iml:CornerPosition lat="31.720" lon="-97.588"/>  8      <c2iml:BoxHeight baseAltitude="0" height="9000"/>  9    </c2iml:Viewbox> 10    <c2iml:ObjectTypeList> 11      <c2iml:ObjectType id="1"/> 12      <c2iml:ObjectType id="2"/> 13      <c2iml:ObjectType id="4"/> 14    </c2iml:ObjectTypeList> 15    <c2iml:ObjectItemList> 16      <c2iml:ObjectItem id="356"/> 17    </c2iml:ObjectItemList> 18  </c2iml:InterestExpression>This is a simple interest expression delimiting the client's area of interest. The parent element, InterestExpression, defined on lines 114-156 of the C2IML Schema, is seen on line 2. Lines 5-9 define a geographical Viewbox, defined on lines 74-92 of the C2IML Schema, giving the upper left and lower right corners in terms of their latitude and longitude (6-7), the base height of the bottom of the bounding box, and the height of the box(8). This information is sufficient to define a geographically unique volume in space.  The BoxHeight element is optional; if not included it is assumed that the area of interest includes all heights above and below sea level within the rectangle defined by the two bounding corners.Following the Viewbox is a series of general ObjectType entries (10-14), describing an interest in particular classes of entities. After the class interest statement is a separate list of individual entities of interest (18). Example 2: GeodeltaFilter  1  <?xml version="1.0"?>  2  <c2iml:InterestExpressionxmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  3    xsi:schemaLocation= "file://./c2iml.xsd"  4    xmlns:c2iml= "http://www.xmsf.com/xc2i/c2iml">  5    <c2iml:ViewBox>  6      <c2iml:CornerPosition lat="30.720" lon="-98.588"/>  7      <c2iml:CornerPosition lat="31.720" lon="-97.588"/>  8    </c2iml:ViewBox>  9    <c2iml:GeodeltaFilter distance="1000"/> 10    <c2iml:ObjectTypeList> 11      <c2iml:ObjectType id="1"/> 12      <c2iml:ObjectType id="2"/> 13    </c2iml:ObjectTypeList> 14  </c2iml:InterestExpression>This example differs from its predecessor in several ways. First, the optional Viewbox BoxHeight element is missing, as is the optional ObjectItemList. Added here however is the GeodeltaFilter on line 9. This element, defined on lines 66-73 of the C2IML Schema, defines a minimum geographical granularity filter, asking that updates that involve a delta less than this distance not be sent. This filter would be used to limit traffic to a viewer to changes that could be seen at the current zoom resolution.Example 3: TemporalFilter  1  <?xml version="1.0"?>  2  <c2iml:InterestExpression xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  3    xsi:schemaLocation="file://./c2iml.xsd"  4    xmlns:c2iml="http://www.xmsf.com/xc2i/c2iml">  5    <c2iml:ViewBox>  6      <c2iml:CornerPosition lat="30.720" lon="-98.588"/>  7      <c2iml:CornerPosition lat="31.720" lon="-97.588"/>  8    </c2iml:ViewBox>  9    <c2iml:TemporalFilter> 10      <c2iml:Time>300</c2iml:Time> 11      <c2iml:Update>10</c2iml:Update> 12    </c2iml:TemporalFilter> 13    <c2iml:ObjectTypeList> 14      <c2iml:ObjectType id="1"/> 15      <c2iml:ObjectType id="2"/> 16    </c2iml:ObjectTypeList> 17  </c2iml:InterestExpression>Here a TemporalFilter replaces the Geodelta Filter of example 2 on lines 9-12.  The TemporalFilter, defined in the C2IML Schema on lines 53-65, sets a filter on the rate at which updates are to be passed to the client. In this case, line 10 asks that updates be filtered if they are received more than once every 300 milliseconds, and line 11 asks for only every tenth update.Example 4: Status Request  1  <?xml version="1.0"?>  2  <c2iml:Request xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  3    xsi:schemaLocation= "file://./c2iml.xsd"  4    xmlns:c2iml= "http://www.xmsf.com/xc2i/c2iml">  5    <c2iml:Status>  6      <c2iml:ObjectItem id="1538"/>  7    <c2iml:/Status>  8  </c2iml:Request>Demonstrated here is an active client request for data. While interest expressions are used for modifying area of interest, Request elements are used to either actively request an update or give an order. Here a status update is requested for the entity with id “1538.”Example 5: History Request  1  <?xml version="1.0"?>  2  <c2iml:Request xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  3    xsi:schemaLocation= "file://./c2iml.xsd"  4    xmlns:c2iml= "http://www.xmsf.com/xc2i/c2iml">  5    <c2iml:History>  6      <c2iml:ObjectItem id="1538"/>  7    </c2iml:History>  8  </c2iml:Request>While the previous example requested the current status of an entity, this example demonstrates a request for the historical status of an entity. This could be useful for plotting the path taken by a unit or the orders it has received.Example 6: Entity Order  1  <?xml version="1.0"?>  2  <c2iml:Request xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  3    xsi:schemaLocation="file://./c2iml.xsd"  4    xmlns:c2iml="http://www.xmsf.com/xc2i/c2iml">  5    <c2iml:Order>  6      <c2iml:ObjectItem id="42"/>  7      <!-- Note that the structure of the "Move" command must be defined in another Schema, and that Schema must be included, along with c2iml.xsd in the final set of namespaces used by the web service -->  8      <jsaf:Move xmlns:jsaf="http://jfcom.mil/dcee/jsaf">  9        <jsaf:Position lat="30.720" lon="-98.588"/> 10      </jsaf:Move> 11    </c2iml:Order> 12  </c2iml:Request>This final example is an active order given to an entity in the simulation. For this example a JSAF entity is given an order to move. Please note that lines 8-10 do not have corresponding entity definitions in the C2IML Schema. Because C2IML is designed to be general purpose, and may be applied to any number of different simulations, we concluded that the Order element should be externally extensible. This allows schemas to be developed for different simulations that make sense semantically within potentially heterogeneous environments.Summary and Future WorkWe have developed an architecture and design for Web Services Interest Management, intended to continue progress in use of Internet/Web technologies to enable distributed software systems for defense simulation and C4I. Key aspects of this design are appropriate assignment of functions to layered Web services and schema-driven processes. A C2 data schema based on C2IEDM is combined with a compatible C2 Interest Management Language schema. Used within the context of a larger, layered web services architecture, C2IML is an important step toward making existing and future C4I and force-on-force simulations available over wide area networks.  A passive participant must be able to view relevant portions of the evolving scenario with minimum requirements for installation of software, and through potentially limited network bandwidth.  WSIM and C2IML are key steps in this direction.The version of C2IML presented here is the initial version of a complete WSIM language.  In particular, C2IML doesn’t yet have a way of associating handles with subscriptions, nor of representing unsubscriptions.  The latter requires the former.  In addition, moving interest regions or changing interest expressions associated with interest regions requires handles for both.ReferencesInformation about DCEE can be found at http://www.jfcom.mil/about/fact_dcee.htmKatherine L. Morse, Lubomir Bic and Michael Dillencourt, “Interest Management in Large Scale Virtual Environments,” MIT PRESENCE - Teleoperators and Virtual Environments, February 2000.2004 C2IEDM Workshop Report, available soon at  HYPERLINK "http://www.vmasc.odu.edu/c2iedm/ws2004.html" http://www.vmasc.odu.edu/c2iedm/ws2004.htmlBrutzman, D., M. Zyda, M., J.M. Pullen, and K.L. Morse, “Extensible Modeling and Simulation Framework (XMSF): Challenges for Web-Based Modeling and Simulation,” US Naval Postgraduate School, 2002Pullen, J. et. al., Using Web Services to Integrate Heterogeneous Simulations in a Grid Environment, Proceedings of International Conference on Computer Science 2004, Krakow, Poland, June 2004Author BiographiesDr. Katherine L. Morse is a Chief Scientist with SAIC.  She received her B.S. in Mathematics (1982), B.A. in Russian (1983), M.S. in Computer Science (1986) from the University of Arizona, and M.S. (1995) and Ph.D. (2000) in Information & Computer Science from the University of California, Irvine.  Dr. Morse has worked in the computer industry for over 20 years, specializing in the areas of simulation, computer security, compilers, operating systems, neural networks, speech recognition, image processing, and engineering process development.  Her Ph.D. dissertation is on dynamic multicast grouping for Data Distribution Management, a field in which she is widely recognized as a foremost expert.  With Don Brutzman (NPS) and Mark Pullen (GMU), Dr. Morse is one of the founding XMSF partners.  She is also a key contributor in the area of HLA-Advanced Distributed Learning (ADL) integration. Dr. J. Mark Pullen is Professor of Computer Science at George Mason University, where he heads the Networking and Simulation Laboratory in the C3I Center. He holds BSEE and MSEE degrees from West Virginia University, and the Doctor of Science in Computer Science from the George Washington University. He is a licensed Professional Engineer, Fellow of the IEEE, and Fellow of the ACM. Dr. Pullen teaches courses in computer networking and has active research in networking for distributed virtual simulation and networked multimedia tools for distance education.Ryan P.Z. Brunton is a Software Engineer with SAIC.  He received his B.S. in computer science (2001) from the University of California, San Diego.  Prior to completing his B.S. he worked at the MOVES Institute at the Naval Postgraduate School.  Mr. Brunton’s key areas of expertise are modeling & simulation, object-oriented design and development, and the extreme programming methodology.David L. Drake is currently a Program Manager in the C2 Modeling & Simulation Division working in the area of Modeling and Simulation development. His current duties involve the oversight of a number of projects related to web enabling the Run Time Infrastructure interface to allow distributed, legacy simulations to act as web services. Advanced distributed learning is one of the key areas where Mr. Drake's team is applying this technology. Previously, Mr. Drake was the Vice President of Software Development at Sequentis, Inc. In this role, Mr. Drake was responsible for the design, development, and deployment of all software products that Sequentis was developing, particularly a secure delivery system that employs client-server technology to allow end-users a secure way to transfer arbitrarily large files and folders. Prior to that, Mr. Drake was the Intrusion.com's Vice President of the Security Software Development Group and responsible for the technical direction, design and implementation of the Kane Secure Enterprise product line, a commercial intrusion detection system. In that role, Mr. Drake oversaw 45-person software development team, and managed a $5M annual budget. Mr. Drake was also Intrusion.com's security expert and spokesperson, providing technical details and professional opinions for the industry and Intrusion.com's customers, as well as contributing information and expertise for articles, interviews and conferences. Appendix A – C2IML Schema  1  <?xml version="1.0"?>  2  <xs:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"  3    targetNamespace="http://www.xmsf.com/xc2i/c2iml"  4    xmlns:c2iml="http://www.xmsf.com/xc2i/c2iml">  5    <xs:annotation>  6    <xs:documentation>  7      Command and Control Interest Management Language © 2004 Katherine L. Morse & Ryan P. Z. Brunton  8      Katherine L. Morse, morsek@saic.com  9      Ryan Brunton, bruntonr@saic.com 10      created: 11 May 2004 11      revised: 22 June 2004 12    </xs:documentation> 13    </xs:annotation> 14  <xs:complexType name="positionType"> 15    <xs:annotation> 16      <xs:documentation> 17        Defines a point on the globe in 18        terms of latitude and longitude. 19      </xs:documentation> 20    </xs:annotation> 21    <xs:attribute name="lat" type="xs:float"/> 22    <xs:attribute name="lon" type="xs:float"/> 23  </xs:complexType> 24  <xs:complexType name="ZType"> 25    <xs:annotation> 26      <xs:documentation> 27        Vertical element. "baseAltitude" is the 28        altitude of the starting point in meters 29        above sea level.  Negative values can be used 30        for distance below sea level.  "height" is the 31        distance in meters above "baseAltitude." 32      </xs:documentation> 33    </xs:annotation> 34    <xs:attribute name="baseAltitude" type="xs:float" default="0.0"/> 35    <xs:attribute name="height" type="xs:float" default="0.0" minInclusive="0.0"/> 36  </xs:complexType> 37  <xs:complexType name="object-type-idType"> 38    <xs:annotation> 39      <xs:documentation> 40        The unique object type id that identifies object 41        classes.  This is represented as a long. 42      </xs:documentation> 43    </xs:annotation><xs:attribute name="id" type="xs:long"/> 44  </xs:complexType> 45  <xs:complexType name="object-item-idType"> 46    <xs:annotation> 47      <xs:documentation> 48        The unique object item id that identifies object 49        instances.  This is represented as a long. 50      </xs:documentation> 51    </xs:annotation><xs:attribute name="id" type="xs:long"/> 52  </xs:complexType> 53  <xs:complexType name="temporalType"> 54    <xs:annotation> 55      <xs:documentation> 56        The type used to define temporal filters. 57        "Time" is the number of milliseconds between 58        updates while "Update" is the number of 59        simulation updates between sent updates. 60      </xs:documentation> 61    </xs:annotation><xs:choice maxOccurs="2"> 62      <xs:element name="Time" type="xs:long"/> 63      <xs:element name="Update" type="xs:long"/> 64    </xs:choice> 65  </xs:complexType> 66  <xs:complexType name="geodeltaType"> 67    <xs:annotation> 68      <xs:documentation> 69        The type used to define geographical delta filters. 70        The "distance" units are meters. 71      </xs:documentation> 72    </xs:annotation><xs:attribute name="distance" type="xs:long"/> 73  </xs:complexType> 74  <xs:complexType name="viewboxType"> 75    <xs:annotation> 76      <xs:documentation> 77        This type defines a three dimensional viewbox on 78        the simluation terrain.  Given two opposite corners 79        a rectangular region is defined.  If "BoxHeight" is 80        not supplied it is assumed that the chosen viewbox 81        extends to encompass all objects contained within 82        the rectangle at any altitude.  Because the viewbox 83        is stretched over a globe, the 3D space is actually 84        curved.  This curvature becomes more pronounced the 85        greater the viewbox size, and anomalies will occur 86        at the poles. 87      </xs:documentation> 88    </xs:annotation><xs:sequence> 89      <xs:element name="CornerPosition" type="positionType" minOccurs="2" maxOccurs="2"/> 90      <xs:element name="BoxHeight" type="ZType" minOccurs="0"/> 91    </xs:sequence> 92  </xs:complexType> 93  <xs:complexType name="object-item-list-Type"> 94    <xs:annotation> 95      <xs:documentation> 96        A list of specific object items that fall 97        within the requestor's area of interest. 98      </xs:documentation> 99    </xs:annotation><xs:sequence>100      <xs:element name="ObjectItem" type="object-item-idType" minOccurs="1" maxOccurs="unbounded"/>101    </xs:sequence>102  </xs:complexType>103  <xs:complexType name="object-type-list-Type">104    <xs:annotation>105      <xs:documentation>106        A list of specific object types that fall107        within the requestor's area of interest.108      </xs:documentation>109    </xs:annotation>110    <xs:sequence>111      <xs:element name="ObjectType" type="object-type-idType" minOccurs="1" maxOccurs="unbounded"/>112    </xs:sequence>113  </xs:complexType>114  <xs:element name="InterestExpression">115    <xs:annotation>116      <xs:documentation>117        The InterestExpression element, ordering118        C2IML filters with increasing specificity.119      </xs:documentation>120    </xs:annotation>121    <xs:complexType>122      <xs:sequence>123        <xs:element name="Viewbox" type="viewboxType" minOccurs="1" maxOccurs="1"/>124        <xs:element name="GeodeltaFilter" name="geodeltaType" minOccurs="0" maxOccurs="1"/>125        <xs:element name="TemporalFilter" name="temporalType" minOccurs="0" maxOccurs="1"/>126        <xs:element name="ObjectTypeList" type="object-type-list-Type" minOccurs="0" maxOccurs="1">127          <xs:annotation>128            <xs:documentation>129              This element uses an XPath expression130              to guarantee that each listed object131              type is unique, ensuring that this132              is a set rather than a bag.133            </xs:documentation>134          </xs:annotation>135          <xs:unique name="typeList">136            <xs:selector xpath="ObjectType"/>137            <xs:field xpath="@c2iml:id"/>138          </xs:unique>139        </xs:element>140        <xs:element name="ObjectItemList" type="object-item-list-Type" minOccurs="0" maxOccurs="1"/>141          <xs:annotation>142            <xs:documentation>143              This element uses an XPath expression144              to guarantee that each listed object145              item is unique, ensuring that this146              is a set rather than a bag.147            </xs:documentation>148          </xs:annotation>149          <xs:unique name="idList">150            <xs:selector xpath="ObjectItem"/>151            <xs:field xpath="@c2iml:id"/>152          </xs:unique>153        </xs:element>154      </xs:sequence>155    </xs:complexType>156  </xs:element>157  <xs:element name="Request">158    <xs:annotation>159      <xs:documentation>160        This is the only parent element other than161        "InterestExpression."  It represents a direct162        request to the underlying simulation for either163        immediate information regarding a specific164        entity, or an order given to a specific entity.165      </xs:documentation>166    </xs:annotation><xs:complexType>167      <xs:choice>168        <xs:element name="History" type="historyType"/>169        <xs:element name="Status" type="statusType"/>170        <xs:element name="Order" type="orderType"/>171      </xs:choice>172    </xs:complexType>173  </xs:element>174  <xs:complexType name="requestType" abstract="true">175    <xs:annotation>176      <xs:documentation>177        Abstract base type for all requests.178      </xs:documentation>179    </xs:annotation>180    <xs:sequence>181      <xs:element name="ObjectItem" type="object-item-idType"/>182    </xs:sequence>183  </xs:complexType>184  <xs:complexType name="historyType">185    <xs:annotation>186      <xs:documentation>187        The "historyType" asks for object-item history188        for extent time into the past.  See the definition189        of xs:duration, a W3C Schema simple data type, for190        format.191      </xs:documentation>192    </xs:annotation>193    <xs:complexContent>194      <xs:extension base="c2iml:requestType">195        <xs:sequence>196          <xs:element name="Extent" type="xs:duration" minOccurs="0">197            <xs:annotation>198              <xs:documentation>199                If this element is omitted, get object-item200                history from the beginning of simulation.201              </xs:documentation>202            </xs:annotation>203          </xs:element>204        </xs:sequence>205      </xs:extension>206    <xs:complexContent>207  </xs:complexType>208  <xs:complexType name="order">209    <xs:annotation>210      <xs:documentation>211        Rather than enumerate all possible orders,212        the content of the order element was left open213        ended.  This allows the language to be customized214        to specific applications through the inclusion of215        a schema that makes sense for the available orders.216        This will however strictly check the validity of217        elements included from other namespaces.218      </xs:documentation>219    </xs:annotation>220    <xs:complexContent>221      <xs:extension base="c2iml:requestType">222        <xs:sequence>223          <xs:any namespace="##other"/>224        </xs:sequence>225      </xs:extension>226    <xs:complexContent>227  </xs:complexType>228  <xs:complexType name="status">229    <xs:annotation>230      <xs:documentation>231        Nothing beyond object-item-id needed232        to retrieve status.233      </xs:documentation>234    </xs:annotation><xs:complexContent>235      <xs:extension base="c2iml:requestType"/>236    <xs:complexContent>237  </xs:complexType>238  </xs:schema> The role-based access control architecture and mechanisms is defined in another 2004 Fall SIW paper, 04F-SIW-099.