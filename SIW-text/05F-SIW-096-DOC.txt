WEB SERVICESA SOLUTION FOR REAL TIME M&S DATA STORAGE, RETRIEVAL AND VISUALIZATIONSaikou Diallo, Kevin Dupigny, Andreas TolkVirginia Modeling Analysis & Simulation Center (VMASC) Old Dominion University Norfolk, VA 23529 HYPERLINK "mailto:sdial002@odu.edu"sdial002@odu.edu, HYPERLINK "mailto:kdupi001@odu.edu"kdupi001@odu.edu,  HYPERLINK "mailto:atolk@odu.edu" atolk@odu.eduKeywords:C2IEDM/ JC3IEDM, Configurable GUI, Data Engineering, Data Mediation Services, Service Oriented Architecture, Web ServicesABSTRACT:  The traditional approach when coupling Command and Control  (C2) with Modeling and Simulation (M&S) systems requires an immense amount of engineering and implementation effort.  Moreover, it results in point to point solutions and eventually bottlenecks, as more systems are added. An alternative proposed by the Virginia Modeling Analysis and Simulation Center (VMASC) shows that Service Oriented Architectures (SOA) in general, and Web Services in particular are a viable approach for facilitating information storage and retrieval. This paper generalizes VMASC’s approach by using cascading web services to implement real time information exchange within multilateral operations.  The paper will describe the core ideas, the Web Service architecture and the configuration of its layers. Additionally we present a prototypical implementation that utilizes C2IEDM as the centralized data repository. A Graphical User Interface (GUI) configurable via Extensible Markup Language (XML) files will also be shown.IntroductionIn the current data centric environment, data modelers often create models that are only suitable for the needs of the moment. The issue of interconnecting the model thus created with others already in existence is relegated to an afterthought thus making it very hard to have truly interoperable systems. The core problem as we see it is to bring together systems (both command and control and modeling and simulation systems) that have been created for a specific purpose and have them exchange information in not only a correct way but also a meaningful way. Traditionally this problem has been tackled by creating well-defined interfaces that act as translation buffers between systems. The advent of the Extensible Markup Language (XML) has greatly facilitated the description of data thus making it easier to exchange bits and bytes. Additionally advances in Service Oriented Architectures (SOA) in general and web services in particular offer advantages particularly in terms of flexibility and reusability that did not exist before. This paper will first describe the traditional point-to-point solutions that are currently prevalent and show their limitations. In the next section it will present a short description of web services and data centric architectures. Since interoperability cannot be achieved without an unambiguous data mapping effort, the paper will discuss the data engineering process and the importance of a central reference model. The following sections will focus on the visualization aspect of data through a potent architecture that facilitates data access and meaningful display via open source tools. Finally, the paper will describe a prototypical implementation that uses the Command and Control Information Exchange Data Model (C2IEDM) as the reference model between the Battle Management Language (BML) a C2 model and a Modeling and Simulation system. The implementation was done via web services and the Openmap software tool was used as the visualization engine   Traditional solutions and Web services  When coupling two systems the usual approach is to bring experts on both sides together to decide how to solve two types of issuesData exchange:  this discussion focuses on the meaning of the data moving on either side of the systems. Ontology and nomenclature issues are usually resolved at this level (for example a tank on one side is an armored vehicle on the other or a person is a student). Resolution and level of detail problems are also discussed and made explicitly clear so that the interface layer can successfully aggregate and/or deaggregate data (for example system A is at the unit level and system B at the individual level so it is agreed that a tank unit at location X in system A is represented by four tanks at locations X1, X2, X3 and X4 using deaggregation algorithm “Alpha”)Communication Protocol:  At this level the type of architecture and the                    software/firmware issues are resolved. Parties agree to a given data exchange protocol and discuss how to manage specific events  (for example the High Level Architecture might be used to federate two systems). This approach clearly results in a point-to point solution that works only for the systems involved. The injection of a third, fourth, or even fifth system renders any previous work obsolete since the two processes highlighted above have to be repeated each time. The advantage of having clearly defined interfaces is negated by the lack of flexibility inherent to this approach. Service oriented Architectures in general and web services in particular help solve this problem. The main idea behind web services is to offer software applications as services following standards defined by the World Wide Web Consortium (W3C). Conformant to those standards, web services must be describable, discoverable and possess a communication protocol. Most web services are described by the Web Service Description Language (WSDL), discovered through a Universal Description, Discovery and Integration (UDDI) directory and use the Simple Object Access Protocol (SOAP) as the means of communication. Through these standards web services inherently possess what traditional point-to-point solutions lack. They are flexible and reusable as well as portable and stable because the status of a service is independent of that of their clients.  Additionally because web services use XML to describe themselves, they combine the two processes described earlier in this section into one.  Data modelers and experts on both sides can now focus on the important task of meaningful information exchange which has to be distinguished from mere data exchange. It is a common error to equate the exchange of bits and bytes (which is a technical issue relatively simple to solve) with that of information exchange (this effort is a much more complex data engineering process that is dealt with in [6]).WSs and Data centric M&S architecturesAs discussed earlier web services are an excellent way to bring flexibility and reusability to traditionally inflexible point-to-point solutions. While it is a very good architecture in terms of data exchange it is still lacking when it comes to information exchange. In order for information exchange to occur, services have to be orchestrated in such a way that the atomic parts of the model can be combined to produce meaningful information. Additionally work done at VMASC [3] has shown the importance a common reference model when available. The introduction of such a model reduces the complexity of the mapping from an O (N2) effort to an O (N) effort. Furthermore the common reference model can then be used to feed and receive data from all participating systems without the user being able to tell which system she is getting it from. The number of engineering hours thus saved can be used to focus on the main issue which we discuss next. Mapping to a common reference data model The introduction of a common reference model reduces the size of the mapping effort and requires that modelers know only two models (their own and the common reference model) instead of the N that their system can be potentially connected to. Nonetheless a mapping effort has to be undertaken in order to reach a certain level of interoperability [1]. This effort has to be based on engineering principles and the process has been discussed in detail in [6]. The final objective is to attain not only attribute mapping but also most importantly concept and relationship mapping. For instance it is important to map <person> to <student> and <social security number> to <student ID number> but it is essential that one knows that a <person> has a <social security number> and a <student> has an <ID number>. Without the concept and relationship mapping the process is incomplete and can lead to inaccuracies and holes in the web service.  Combining Web Services and a Common Reference ModelThe Coupling of C2 and M&S system provides a platform that makes is possible to perform unit tasking and task execution on multiple levels.  Possibilities for training scenarios are virtually boundless when C2 systems are used to feed live, virtual, and constructive simulations in a simultaneous or asynchronous fashion.   As stated earlier in this paper, web services must be combined with a reference model in order to obtain a truly flexible and usable architecture. Three essential components are needed to facilitate C2 to M&S coupling via web services: A reference model is defined as any relational model containing constructs that covers the entire scope of the simulation space. Establishing a common language allows virtually any system within the domain to participate via a translator. A translator or data mediator is a program or script capable of converting the systems native dialect to that of the reference model and vice versa.  Therefore a translator is the only component of the web service architecture that needs to be system specific. The data engineering process is used to define which information is exchanged and that is done correctly. A Web Service:  As described earlier, web services are self-described, discoverable and have a clearly defined communication protocol. Services and methods can be developed to monitor and manage data flow (update, insert, delete) in the reference model [3]. Furthermore the translator component can offered as a service of services or a composition of services Simulations need not know the operational state of the participating systems thus allowing for quick integration.  Accessing the data becomes a matter of calling the described methods in the WSDL.  The interface to the data is a trivial matter; it is the maintenance of the data meaning that is important.  Visualization And Data InterpretationData can be represented either as individual elements or as a collective whole.  Web Services reduce data into the individual items that they understand and are able to communicate.  A human in the loop has to assemble and interpret data in order to turn it into information. In order for web services to provide information and not just individual data items, services have to be orchestrated. The end result is that services are combined into super services that ultimately fulfill the user’s need. Beyond just providing information rather than data to the user/war fighter, orchestrating services reduces the amount of traffic on the network.  Service orchestration is based on two main principles:Concept filtering:  This consists of dividing the reference model into well-defined concepts (organizations, resources, locations, reporting objects). Most models are inherently thus divided, making this process relatively simple. Access flexibility:  In order to support service orchestration it is necessary to have access to data on multiple levels. The first level is defined as atomic access. This is a set of services that provide access to individual data items within any object.  The second level is the composed access.  These are services that provide access to a combine set of objects describing a given concept. Access flexibility allows data to recombined according to the user’s needs without having to redefine a new set of services. In dealing with the visualization aspect of information, the layout of data is a key component. An effective layout is one that is aligned with the user’s purpose.  For example a cataloging system in which products are displayed by name, description and category is easier to read than one that only shows an id number and abbreviation.  Obviously, depending on the user and the needs of the moment, information display can be very disparate. The traditional approach, which is to create one-size fits all visualization interfaces, makes it impossible to customize information display the way it is described above.  Solving this problem requires interfaces with configurable layouts that allow the users (administrators, commanders, soldiers) to view information according to their priorities and preferences. Such an interface using configurable XML files is presented in the next section.  Yet another constraint of the layout is the reference model itself. Information shown at the interface level is constrained by what the references model covers within its ontology [7]. Knowledge of the reference model though not necessary for carrying out developmental task is essential to developing meaningful interfaces. Information obtained from the web services when coupled with a graphics engine results in creating another level of flexibility and clarity by enhancing the visualization process. In military environments this translates to visualizing entities within a common operational area.  From such vantage point information such as force size, entity or aggregate side (friend, foe), status, location, speed and bearing is easily relayed to the viewer.   Prototypical ImplementationTo demonstrate the feasibility of the Web Service approach to data access and manipulation a prototype was developed using only open source software, tools and standards.  The prototype implements all of the techniques and methods discussed previously. Services are orchestrated to provide information that is viewed via graphical battlefield representations.The prototype was constructed with open source and open standard technologies that can be easily obtained via free download. Not all of the implemented technologies were standard. Those that were not standard compensated by being open source and free.  Table 1 above provides a list of the technologies used in the construction of the prototype.The reference model utilized in the development of the prototype is the Command and Control Information Exchange Data Model (C2IEDM), which is maintained and distributed by the Multilateral Interoperability Program (MIP) as its reference model.  The Mediator developed within the prototype translates a relational BML data repository into the agreed upon language of the system (C2IEDM).  The final component, the WSDL, was developed along the two levels of service orchestration described in the previous sectionDomainSolutionVersionConnectivityNetBeans / J2EE SDKV 3.6 / V 1.4.2DatabaseMySQLV 4.0.21Database connectivityMySQL ODBC Driver3.51.9-winWeb ServicesTomcat ServerV 5.0Table  SEQ Table \* ARABIC 1: Prototype technology listThe web service is built to facilitate access to the five W components of the C2IEDM. The overall C2IEDM data model is implemented as a MySQL database. We chose a layered composite services approach, which can be summarized as follows: For each table of interest, there is a web service allowing the inserting, updating, and selecting information. These are atomic messages directly accessing the SQL interface of the database. The web services are transparent to the user, so that individual table access is supported, although not recommended.  For each business object, which is defined as a collection of information of interest for the war fighter distributed over more than one table, multiple views were defined. These views are presented as one service, but they make use of the underlying atomic messages. They are called composite messages. We recommend the use of these services to access and manipulate the database. Table 2 shows an excerpt of the Web Service Definition Language giving an idea of the high level view of available services.  Each of these is a composed message; they are broken down into lower-level composite messages until they consist only of atomic messages that access the tables and relations used for the storage service. The arguments of these messages equal the attributes used within a respective data replication call, which means that at least the mandatory attributes must be provided. This is true for atomic messages as well as for composite messages. <?xml version="1.0" encoding="UTF-8" ?> <wsdl:definitions … xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:tns1="http://www.w3.org/1999/XMLSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema"> … + <wsdl:types> + <wsdl:message name="getMilOrgTypeRequest"> + <wsdl:message name="getAircraftRequest"> + <wsdl:message name="getActEffectItemRequest"> + <wsdl:message name="getActionsRequest"> + <wsdl:message name="getUnitsRequest"> + <wsdl:message name="getVehiclesRequest"> + <wsdl:message name="getOrgMaterialsRequest"> + <wsdl:message name="getTaskFormationRequest"> + <wsdl:message name="getMilPostRequest"> + <wsdl:message name="getLandWeaponryRequest"> + <wsdl:message name="getActEffectTypeRequest"> + <wsdl:message name="getLocationRequest"> + <wsdl:message name="getEquipmentRequest"> + <wsdl:message name="getOrganizationsRequest" /> … + <wsdl:portType name="WSmethods"> + <wsdl:binding name="WSmethodsSoapBinding" type="impl:WSmethods"> + <wsdl:service name="WSmethodsService"> </wsdl:definitions> Table  SEQ Table \* ARABIC 2: WSDL excerpt The figure below (figure 1) shows how the web services are currently used within the prototypical implementation at the Virginia Modeling Analysis & Simulation Center. The SQL server comprises the tables of the C2IEDM. The individual tables are accessed via the selected Java Database Connectivity driver as atomic services realizing the basis SQL statements for data manipulation: select, insert, update, and delete. These atomic services are used to define the Java Web Service (JWS) implementations, which can be individual access routines or views that are more complicated. The typical Who-What-Where-When-Why constructs of BML are defined on this level. The JWS implementations are described using the Web Service Definition Language (WSDL) and wrapped into the Simple Object Access Protocol (SOAP). The configurable GUI elements use these web services to retrieve the information to be displayed. In case of need, additional data manipulation (such as summing fields up) can be conducted before the results are displayed. Every application can implement the interface individually. Alternatively, we recommend using the data mediation services which translate web service calls from the proprietary dialect into C2IEDM structured calls and vice versa. The data mediation service communicates the request-response dialog in two languages: the proprietary dialect of the system and the coalition namespace of the Department of Defense XML repository. Figure 1: Web Service ArchitectureC2IEDM Service Client Architecture The C2IEDM GUI from a conceptual perspective has three layers of operations before the raw data is presented (visualized) to the user. The Figure below (Figure 2) shows an overview diagram of the GUI’s architecture. The GUI provides a “watered down” view of C2IEDM based on the users desires, which is emphasized by the funnel-like shape of the preprocessing layers associated with the GUI. These pre-visualization layers perform simple yet necessary tasks that are kept separate for reusability and maintenance purposes.   The WS access layer: This layer is responsible for establishing and maintaining a connection to the Web Service, as well as providing access to the methods that are available. The calls to the Web Service are made via precompiled stubs, which provide a class-formatted interface to the methods described in the WSDL. The data storage layer: This layer handles the collected data, which is stored in meaningful packets.  The life span of the data within the packet is limited only to the current “browse session”, this is discussed further later in this section.  The data preparation layer: This layers’ work is based on the object tab (each tab corresponds to one of the 5Ws) that the user is working on as well as the user’s current configuration of that tabs’ controls. Essentially this layer is used to make sure that that layout preserves the meaning of the data.  The client is a simple tool and is not smart enough to make such decisions; this layer requires hard coded layout rules that are based on the reference model as well as intention. Visualization window. The funnel-like shape is intended to suggest the compacting of data. One of the main goals of the C2IEDM GUI is to present the user with the information that they want/need and nothing more.Figure 2: GUI ArchitectureA browse session is defined as being the track through C2IEDM that the user is following at a given time (ire. reviewing details of a specific organization, discovering resources for an assigned task). This data is encapsulated within a data packet from which any information that it possesses can easily be gathered without having to make a call to any of the web service methods (only true within the same browse session). Limiting the number of calls made to the web service reduces networking overhead associated with transferring the data. The usefulness of the data packet becomes evident with heavily populated repositories which would required longer search times to arrive at specific data.  The browse session thereby ends when the users purpose changes.Visualization OptionsControl layout on the form directly influences the preparation of the data, and determines what the user is able to see. For this reason it was necessary to allow the user to be able to configure the look and feel of the GUI. This is possible via XML constraint files and open source java libraries. This library is freely distributed and provides many additional features that allow great flexibility in describing a layout without a significant coding effort. Each tab has a set of controls, which it utilizes to provide a full description of that associated W.  A sample constraint specification is shown below (Figure 3). Creating a collection of XML files then specifies multiple preset configurations where each configuration can be tailored for specific purposes, users, etc.  Web services can now play an additional role of distributing configuration files or the interface itself.  Figure 3: XML constraint exampleFigure 4 shows a screen shot of the developed visualization GUI. As stated before each tab on the interface corresponds to a single W of the 5Ws of an operation as described in BML. This is not implying that each tab has to be visited in order to obtain a complete operational picture.  Each tab is able to review all of the 5Ws; the difference between them is the access point to visualizing the operation. For example, the user desires to obtain all future operations for several organizations. The user has only organizations for which they have interest and knows nothing else. This data is easily gathered using the ‘Who’ tab as the access point. The Who tab by default provides a list of the available organizations, selecting the organization then displays the other W’s associated with that organization. Figure 4: GUI ScreenshotThe other four tabs operate in a very similar manner using one of the W’s to obtain the others (see figure 5). Following this arrangement presented the possibility of numerous unassociated chunks of data to be stored within the GUI running memory; defining browse sessions alleviated this. Actually, it is always the same data, which are displayed, you just enter from a different view. When starting with Who, you want to know which organizations are there, What they are doing, where they are doing this, etc. Alternatively, one can start with a location (Where) and ask: What activities are going on there, and who is doing it when? With the described configuration a browse session within the GUI is essentially the gathering of a single 5W description. Referring to the previous example, the user would need to conduct a browse session for each of the organizations. The browse session begins at the access point which the user sets (by choice of tab), and ends when a new access point is selected. New browse sessions are also possible on the same tab by choosing a new base (i.e. selecting a different organization on the Who tab). Figure 5: Access Point illustrationThe GUI also employs an open source map visualization tool, which allows plottable browse session data to be rendered on a world map.  Now it is possible to graphically review the previously gathered textual data.  This gives the user a robust information-searching tool that is easily expandable, user friendly and provides meaning access to data within the data model.  Many of the functional details of the GUI are only possible due to the nature of the reference model and the intended purpose of the tool.  The C2IEDM service client is a data visualization tool, which allows users to monitor and soon update the state of the data model.  Figure 6: OpenMap Visualizer screenshot Future workAs the current implementation shows, combining the five W’s to determine “Who is doing What, Where, When and Why” is a mature way of expressing the commander’s intent. The next step is to go beyond the world of intention and into the world of “informed decisions”. Part of making an informed decision is being is aware of: Who is where: Given the location of an enemy, what entities are available within a certain radius Who has what: Given the mission parameters, which entities have the necessary equipment to undertake the task What is where: In a joint operation what other entities/nations are available for support. The order of battle might look quite different if this type of information is available in real time to a commander on the field. For instance a commander might need an infantry unit to search a building in Baghdad, Iraq. If none is available, he can choose to task a marine unit that is close by to perform the job. Web services would render this process very powerful by making it near real time. Since the problem reduces to a meaningful composition of web services, the data model remains intact. In addition, the current implementation will not change dramatically; it will be rather extended, as some of these functionalities are already implemented. The Customizable GUI Developed was merely designed to show the feasibility of working with C2IEDM in a free form fashion via web services, but there is not a lot of work to be done for it to become a complete usable tool. For ease of configuration there should be a global set of controls (list boxes, buttons, etc.) rather than having controls only be accessible from the tab that they are on. This will maximize the effectiveness of the XML configuration files now by allowing the same control names within the different configuration file. Also, having a common pool of controls eliminates the need to redefine new controls to carry out similar tasks, making the GUI lighter and more portable.  The delivery of configuration files via web services makes the entire system distributable including personal preferences or standard configuration sets. The Openmap tool is very easy to use and facilitates many methods of entity visualization.  Icon sets can be fed to the tool via external services/servers.  The default icon set distributed with the tool is the military standard 2525 symbol set.  These icons are stored locally and are easily buried under a service which returns the icon file given a string identifier.  Therefore it is possible to integrate multiple icon sets by developing an icon servers for each desired symbol set.  ReferencesAndreas Tolk: “XML Mediation Services utilizing Model Based Data Management,” Proceedings of the 2004 Winter Simulation Conference, IEEE Catalog Number 04CH37614C, pp. 1476-1484, Washington, DC, December 2004 2.  Andreas Tolk, Curt L. Blais: “Taxonomies, Ontologies, and Battle Management Languages – Recommendations for the Coalition BML Study Group,” Spring Simulation Interoperability Workshop 2005, Paper 05S-SIW-007, San Diego, California, April 2005 3.  Andreas Tolk, Saikou Diallo, Kevin Dupigny, Bo Sun, Chuck Turnitsa: “Web Services based on the C2IEDM – Data Mediation and Data Storage,” Spring Simulation Interoperability Workshop 2005, Paper 05S-SIW-019, San Diego, California, April 2005 4.  Andreas Tolk, Saikou Diallo, Kevin Dupigny, Bo Sun, Chuck Turnitsa: “A Layered Web Services Architecture to Adapt Legacy Systems to the Command & Control Information Exchange Data Model (C2IEDM),” European Simulation Interoperability Workshop 2005, Paper 05E-SIW-034, Toulouse, France, June 2005 5.  Andreas Tolk, Chuck Turnitsa: “Evaluation of the C2IEDM as an Interoperability-Enabling Ontology,” European Simulation Interoperability Workshop 2005, Paper 05E-SIW-045, Toulouse, France, June 2005 6.  Andreas Tolk, Saikou Diallo: “Model-Based Data Engineering for Web Services” IEEE Internet Computing, July – August 2005Authors' Biographies SAIKOU DIALLO is M&S Master Student at Virginia Modeling Analysis and Simulation Center (VMASC) of Old Dominion University (ODU) of Norfolk, Virginia. He implemented the web service architecture and interfaces. KEVIN DUPIGNY is M&S Master Student at Virginia Modeling Analysis and Simulation Center (VMASC) of Old Dominion University (ODU) of Norfolk, Virginia. He implemented the C2IEDM database.ANDREAS TOLK is Senior Research Scientist at the Virginia Modeling Analysis and Simulation Center (VMASC) of the Old Dominion University (ODU) of Norfolk, Virginia. He is the principal investigator. He has over 15 years of international experience in the field of Applied Military Operations Research and Modeling and Simulation of and for Command and Control Systems. His domain of expertise is the integration of M&S functionality into real world applications based on open standards. C2IEDM is available at the MIP homepage:  http://www.mip-site.org/ This functionality is achieved using the Relative Layout freeware distributed at http://www.onjava.com/pub/a/onjava/2002/09/18/relativelayout.html