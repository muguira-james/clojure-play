Model Based Simulation CompositionJesse AronsonDavid WadeScience Applications International Corporation1100 N. Glebe Rd. Suite 1100Arlington, VA 22201703-907-2553/2560 HYPERLINK mailto:jaronson@std.saic.com jaronson@std.saic.com,  HYPERLINK mailto:dwade@std.saic.com dwade@std.saic.comKeywords:Simulation, Composition, JSIMS, Software EngineeringABSTRACT: The Joint Simulation System (JSIMS) is being built to provide robust, flexible simulation capability in support of joint training. JSIMS has requirements to satisfy a number of use cases ranging from classroom environments to large joint task force training exercises. The system must be able to be used across the range of missions and geographic areas in which U.S. forces may be called upon to operate. To meet this wide range of requirements the JSIMS program has gone with a composable software approach. This technique provides a common simulation infrastructure that serves as the host for interchangeable sets of software components representing various real-world objects and phenomena, thereby allowing users to compose custom simulations tailored to their immediate needs.  However, composability can increase the complexity of creating simulations for any given exercise. Simulation engineers face the task of assembling sets of components based on training requirements and must take into consideration requirements on completeness, consistency and interoperability as well as constraints on operating environments and interfaces. Model Based Simulation Composition is a technique for providing decision support and automation to engineers faced with composing a simulation system from a repository of components. Component selection is based on a set of requirements provided by the user in domain terms. MBSC starts with these requirements, expands those to form target system specifications, maps the specifications to abstract components and then searches the repository for a mutually compatible set of components to instantiate the abstract components. A multi-step selection and fitting process is used to define component requirements and select components.IntroductionAs the military works to maintain readiness in a climate of shrinking operating budgets and as the range of missions the military faces grows ever broader, simulation becomes an ever-more significant way for war-fighters to gain experience in operations which would be either impossible or unaffordable to practice live. This increased application of simulation imposes new, more stressing requirements on the flexibility and usability of simulations. The U.S. Department of Defense is currently designing and developing a new generation of training simulations known as the Joint Simulation System (JSIMS).[1] JSIMS has the requirement to satisfy a number of use cases, from classroom environments to crew trainers to large joint task force training exercises. It is clear that no “one size fits all” software solution can satisfy all JSIMS requirements and use cases. The JSIMS program has therefore gone with a composable software approach. There will be a common simulation infrastructure which will serve as the host for sets of software components representing various real-world objects and phenomena. The framework will manage execution control of the simulation: time management, message passing and the like. The model components will, under the coordination of the framework, simulate physical objects, their behaviors and interactions. Together the framework and the selected models form a complete war-gaming simulation.Building a simulation system in a composable fashion is challenging in several ways. The process of creating something of the scale of Unified Endeavor exercise is highly complex and time consuming: the exercise development process presently takes roughly a year’s worth of time of which several months can be devoted to configuring a simulation to meet exercise requirements. Composing software as is envisioned for JSIMS increases the complexity of creating a simulation for an exercise (while consequently increasing the quality of the resulting simulation). Without appropriate tool support the exercise process will grow even longer.The translation between exercise requirements and composition requirements offers challenges as well. System requirements for simulations are typically expressed in domain terms, not software component terms. [2] While natural language specifications of simulation functionality [3] are not practical for already cited reasons of domain complexity, some mechanism is needed to allow target system requirements to be expressed in domain terms. Also, as noted in [4], the correspondence between the composition of the physical world and the set of software components used to model that world may not be one-to-one, and so any composition support method for simulations must take into account the required mapping from domain to software models.Composable software offers challenges from a technical perspective as well. Retrieval of components from a repository is a critical step in simulation assembly and so searchable meta-data descriptors of repository components are required. Individual simulation components, however, may represent fairly complex physical objects and behaviors and so can be difficult to describe. Formal specifications [5][6] would be impractical to use for components of this level of complexity.  Retrieval of components via signature matching [7] would fail in that due to the framework-based nature of the implementation, many components may have virtually identical interfaces. Furthermore, the large-scale nature of the JSIMS repository makes it impractical to craft complex custom descriptors for each component, and in most cases operators responsible for maintaining the repository cannot be expected to master formal languages.Simulations also typically include representations of many physical objects with a correspondingly large number of data flows and so may require a large number of components to be assembled. In such a case, ensuring that target system compositions are complete, that the selected components inter-operate in a valid way and that all data flows are satisfied becomes a difficult and error-prone process.Figure  SEQ Figure \* ARABIC 1: Composed Object ClassesThe DARPA Model Based Simulation Composition (MBSC) project is chartered with developing automated approaches to assist simulation composition and is therefore part of the overall JSIMS push towards rapid scenario generation. This paper presents the MBSC methodology. Component selection in MBSC is based on a set of requirements in domain terms. MBSC expands these requirements to form target system specifications, maps the specifications to abstract components and then searches the repository for a mutually compatible set of components to instantiate the abstract components. A multi-step selection and fitting process is used to define component requirements, select candidate components and validate the composition.Composition in Simulation EnvironmentsBefore describing MBSC it is important to consider what it means to compose a simulation. Composition in the context of war-gaming simulations primarily refers to assembling a set of mission space objects, i.e., representations of “real-world” battlefield objects, processes and in addition support elements such as data collectors and external system interfaces. These models run within a framework that handles central coordination issues such as time management and message passing. The underlying simulation framework is fairly static; its composition is modified only infrequently.The base classes used in composition of simulation models are shown in  REF _Ref415198796 \h  \* MERGEFORMAT Figure 1. Composition can be performed at varying levels of granularity; the example shown in the figure shows composition at the level of individual mission space objects. At this level of composition each mission space object is modeled as an aggregation of sub-models. Thus, an airplane might be represented as an aggregation of flight dynamics and radar models along with a model representing the decisions and actions of the pilot. The airplane class is derived from a Model Coordinator base class. The Model Coordinator  class contains interfaces relating to overall control of this object and its sub-models within the context of the overall simulation. Each model and sub-model can have associated with it Federation Objects, which publish data to other model objects, and TriggerView Objects, which implement subscriptions to other model objects’ published data.Assembling a mission space object such as an F15E aircraft includes determining what the pieces of an F15E are in an abstract sense (e.g., an F15 has an APG-63 radar, a 6DOF kinematics model, etc.) and then finding mutually compatible components for each piece such that one can assemble a representation of an F15. The global composition problem is to do these local compositions while ensuring that all the composed mission space objects properly interoperate.MBSC Process MBSC consists of four major steps as shown in the ovals within Figure 2. The first two steps are prescriptive in nature and capture target system requirements and constraints to form a simulation specification. The paradigm for specification creation is based on a domain model for both the mission space (real-world elements to be represented within the simulation) and the user space (support elements such as data collectors to be included with the simulation). The first step in creating the specification is to capture user requirements and expand them into simulation requirements. User requirements are typically expressed as a mixture of represented training requirements (“the simulation should stimulate training in UJTL task OP 1.5.3”), units and behavior (“the simulation shall simulate a composite air wing performing DCA, OCA, SEAD and Interdiction missions”; “the simulation needs to include Theater Missile Defense”). Requirements are usually provided at a level of detail which is insufficient to fully specify a simulation and therefore MBSC must expand and infer the details of the requirements. MBSC uses a combination of task decomposition knowledge and domain model expansion to extend and complete the given requirements. For example, a requirement to “include Theater Missile Defense” would be mapped to a set of mission space object and behaviors needed to implement a TMD operation. The net effect of the first step is to build a list of items – mission space objects, support objects, etc. – which need to be included in the target simulation.Nothing in this process, however dictates how the selected set of mission space objects should be simulated. The Domain Model Tailoring step assigns constraints of several types to mission space objects to create a software specification for each mission space object. Functional constraints require that the right domain entities, activities and behaviors be represented to create a reasonable representation of the physical world. Structural constraints apply to the software architecture view of assembling components: that selected components are properly connected and inter-operate consistently. Allocation identifies how the functional aspects of the program are realized by the software structure; it would map the entities, environment and other functional aspects to software components. Non-functional constraints relate to the performance of the system and its viability within the constraints of the target computing environment. Last, the software Coordination aspect focuses on the overall synchronization and low-level communication within the program. The output of the Domain Model Tailoring step is a set of model descriptors – effectively a set of queries to be used against the repository. These descriptors are formulated as a set of constraints on components.In Component Binding components are selected to fulfill the specification and constraints generated in the first two steps. A given mission space object could conceivably be implemented via one of a number of different component topologies (as shown in  REF _Ref423242486 \h  \* MERGEFORMAT Figure 3) and there may be a choice of components to fill each slot in a topology. Component binding has the job of selecting appropriate topologies and populating them with components based on the given specifications.Figure  SEQ Figure \* ARABIC 3: Three component topologies for an aircraft modelIt should also be noted that while there may be multiple choices for each component slot, there may also be a paucity of components – there may not be any component cluster that completely satisfies the requirements for a particular mission space object. In that case MBSC uses a reinfement-based guided requirements relaxation process which allows valid compositions to be created even when requirements cannot be perfectly met. [8]The last step in MBSC involves a global reconciliation of the local component clusters developed in the previous step. Mission space object compositions not only have to be self-consistent but also have to inter-operate with each other in valid ways. Composition specification creation checks the candidate compositions for consistency of representations, completeness and software interoperability issues and finally generates a specification for creation of the target simulation. The baseline MBSC system does not goes as far as to retrieve and assemble the components – automated creation of appropriate glue code is an area needing further research. Rather, MBSC creates a specification of components and abstract interconnections. This specification can then be used by simulation engineers or further automated algorithms to assemble the target simulation.ArchitectureThe high level architecture for the MBSC project is shown in Figure 4.  MBSC is implemented as a three tier application, with User Interfaces communicating with the underlying data stores through a business object layer. The Composition business objects also encapsulate the composition algorithms which form the heart of MBSC processing. In the figure, there are five major configuration items that are to be used, researched, and/or prototyped:User Interfaces and Tools: The front end tools and utilities for users of the MBSC systemComposition Business Objects: The behind the scenes applications that encapsulate the MBSC algorithms and perform any knowledge-related, distributed, and/or automated tasks.Databases for the Unified Scenario Data Model: The data stores used for the MBSC functionsCOTS/GOTS Development Products: The underlying development and implementation productsJSIMS/Joint Training Tools and Data: Input Data from JSIMS and other sources and tools relating to creation of that data.The user interacts with MBSC via five user workbenches including the Simulation Developer, Model / Component Developer, Military Domain Expert, Simulation Administrator, and MBSC Administrator. The first of these is the primary interface used in developing compositions while the remainder are used for building up component repositories and knowledge bases and for administering the system. Because the major focus of this effort lies in the creation of the Unified Scenario Data Model and MBSC processing, some of the identified user applications will be left for future support, and others will use readily available commercial products. The ‘business objects’ perform a majority of the processing for the MBSC system, and there are four of these that will operate on top of two Inference Engines.  The objects are: Requirements Expansion, Tailored Domain Model Generation, Component Selection, and Scenario Specification Generation.  An agent-based architecture has been considered because of the types of interfaces that will be required to the individual simulation components.  The two Inference Engines are a Requirements Inference Engine and Component Selection Inference Engine.MBSC contains four repositories of data, each supporting some element of the simulation composition. These repositories are designed to be fully integrated, in a software sense as well as an information sense, and together compose the Unified Scenario Data Model. The Domain Model Repository will be based on the JSIMS domain models, extended to support intelligent component selection and tailoring. The Capabilities Representation Repository extends the JMSRR metadata to support MBSC component selection algorithms.  The Simulation Requirements Repository will contain detailed requirements that expand upon the user requirements to create the Simulation Requirements, including information on the specific personnel, equipment, logistics, and simulation site specific information.  Finally, the Composition Repository will contain a history of scenario specifications and tailored domain. All these databases are linked through a consistent underlying MBSC ontology.  The ontology can be considered a fifth repository, acting as an MBSC data/concept dictionary.Summary MBSC is a fairly new effort. The technique appears to hold significant potential for aiding simulation engineers in composing simulations, however further prototyping and experimentation need to be done to determine the optimal implementation and application of this approach. Additional work also needs to be done to scope the knowledge and constraint bases which would be needed in a production implementation of MBSC. MBSC is only part of the overall scenario generation process. Composition is performed within the context of a training event; training events are held within the context of an overall training plan. Thus, to realize the full potential of MBSC it should be integrated with upstream requirements and exercise definition tools. Also, composition design affects the creation of simulation initialization data. In the future, MBSC should be made to integrate with downstream component assembly and data generation tools.Last, there are functional enhancements we would like to add to MBSC. Compositions tend to be evolutionary – a “learning” capability which would allow MBSC to improve its component selections over time based on user feedback would be interesting. ACKNOWLEDGEMENTSThis work was supported under the DARPA Advanced Simulation Technology Thrust program. The authors are grateful to Dell Lunceford and Larry Willis of DARPA for their insight and guidance.REFERENCES[1] 	JSIMS Mission Needs Statement. Available at  HYPERLINK http://www.jsims.mil http://www.jsims.mil[2] 	D. Pautler, S. Woods, and A. Quilici. Exploiting Domain-Specific Knowledge To Refine Simulation Specifications. Proc. 12th Annual IEEE Conference on Automated Software Engineering, Incline Village, Nevada, pp. 117-124, November 1997.[3] 	W. R. Cyre, J. R. Armstrong and A. J. Honcharik. Generating Simulation Models from Natural Language Specifications. Simulation 65:4, pp. 239-251.[4] 	R. Kazman, et. al. A Challenge for Software Architecture: Distributed Flight Simulation, in Handbook Of Parallel And Distributed Computing, A. Zomaya (ed.), McGraw-Hill, 1995.[5] 	A. M. Zeremski and J. M. Wing. Specification Matching of Software Components. 3rd ACM SIGSOFT Symposium on the foundations of Software Engineering, October 1995.[6] 	J. Penix and P. Alexander. Design Representation for Automating Software Component Reuse. Proc. 1st International Workshop on Knowledge-Based Systems for the (Re)use of Program Libraries, Sophia Antipolis (France), June 1995.[7] 	A. M. Zeremski and J. M. Wing. Signature Matching, a Tool for Using Software Libraries. ACM Transactions on Software Engineering and Methodology (TOSEM), April 1995. [8] 	Mili, R. Mili and R. Mittermeir. Storing and Retrieving Software Components: A Refinement Based System.Proceedings of the 16th International Conference on Software Engineering. May 16-21, 1994. Sorrento, Italy. Pages 91-100.[9] 	D. M. Wade. Final Report on Intelligent Agents in the DOCT Environment. December 1997. Avaliable at:  HYPERLINK http://www.sdsc.edu/DOCT/Publications/g5/g5.html http://www.sdsc.edu/DOCT/Publications/g5/g5.htmlAuthor BiographiesJESSE ARONSON is a Senior Engineer at Science Applications International Corporation. He holds a M.S. from Polytechnic Institute of New York and a B.E. from The Cooper Union, both in Electrical Engineering and is currently a doctoral candidate at George Mason University Mr. Aronson has been active in the DoD simulation community for ten years. Prior to this Mr. Aronson designed sonar and satellite navigation systems.DAVID WADE is a Senior Software Engineer at Science Applications International Corporation.  He holds a M.S. from Johns Hopkins University in Computer Science and a B.S. from Washington University (St. Louis) in Electrical Engineering.  Mr. Wade has been working in the DoD modeling and simulation arena for 2 years, with a major focus on simulation setup and design.  Mr. Wade has 10 years experience in software engineering, with research focus on human-computer interface design and process engineering as well as application of agent technologies.  FFigure  SEQ Figure \* ARABIC 4: MBSC Architecture EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 2: MBSC Process