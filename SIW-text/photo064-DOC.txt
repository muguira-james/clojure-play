Flexibility, Time, and Ownership in Federate SimulationsChristopher L. Martinez Sterling SoftwareJNTFRDC â€“ CSF 270730 Irwin AvenueSchriever AFB, CO 80912-7300(719) 567-8546martinec@jntf.osd.milKeywords:HLA, FOM, Flexibility, MDST, Wargame 2000, Simulation, Federation, Time Management, Expert System, WG2K ABSTRACT: At the Joint National Test Facility, the Technology Insertion Studies and Analysis project implemented two new tools that support flexible HLA federates. FedConnector is a generic framework that allows rapid federate development and FedConsole is a federate viewer and control console. The two were reviewed in a paper at the last Simulation Interoperability Workshop and are currently supporting a number of federates at the Joint National Test Facility including Wargame 2000, Missile Defense Space Tool, and a generic Gensym G2 Gateway/Interface. This paper discusses FedConnector internals and application program interface. It describes the challenges and solutions for flexibility and generality required for time management and object ownership. The FedConnector extension uses an embedded expert system with an easily configured rule-based interface to provide configuration and management of both internal and external objects. The FedConsole enhancements innovate real-time federate data activities for objects and interactions. Both FedConnector and FedConsole are profiled in an implementation study that demonstrates the stages of development and testing including the creation of test federates. IntroductionHigh Level Architecture (HLA) has become the standard for interfacing (federating) many simulations/systems (federates) together (federation) to share data in the form of objects, functionality in the form of interactions and synchronization in the form of time management. Object ownership management allows the ownership responsibility of an objectâ€™s attributes to be passed among federates. Data distribution management allows the federate to define a routing space on an area of interest, thereby reducing data requirements.HLA defines the use of the:Simulation Object Model (SOM) -  definitions of simulation objects and interactionsFederation Object Model (FOM) -    a union of all of the federate SOMs in a federationManagement Object Model (MOM) â€“ object and interaction definitions required for management overhead.The goal is to utilize HLA in an efficient, flexible way.The main obstacle to flexibility is the dependency between the SOM and FOM. Each SOM contains a subset of the simulation objects and interactions in the federationâ€™s FOM. If changes to a simulation effect the SOM, this effect will cascade to the FOM.  Conversely, when changes are made to the FOM, the effect moves in the opposite direction. When flexibility is built in between the simulation and the SOM, the simulation can adapt to the federation creating a flexible federate.The HLA tools developed at the JNTF address FOM dependency as well as time management and ownership management.HLA ToolsFedConnector, FedWizard and FedConsole comprise the set of HLA tools developed at the JNTF. FedConnector and FedWizard provide the C++ libraries required for HLA federate development (see figure 2.1). FedConsole is a Java application that adds built-in federate control/monitoring of either FedConnector or FedWizard. All tools were developed on Silicon Graphics machines running IRIX 6.5. Versions are planned for Linux and Solaris.  Figure 2.1 JNTF HLA Tools2.1 FedConnectorThe FedConnector API evolved from a small a C++ library designed to minimize the federate overhead involved in creating, joining, and resigning from an HLA federation. It was expanded to automate object and interaction management, data definition and data mapping to provide FOM independence.   2.2 FedWizardFedWizard is a C++ API that adds an additional layer of automation to federate development. The development environment is simplified using only two C++ classes and requiring only the FedConnector library and one header file. FedWizard is well suited for the development of test federates. 2.3 FedConsoleFedConsole is a Java application that provides a remote federation view/control from the federate perspective. User definable controls provide custom closed loop control of the simulation.   FedConsole can be useful at all stages of federate development, test and fielding. 3. FedConnector Internals/APIFedConnector contains a number of C++ classes that are brought together to make an HLA implementation easy. The FedConnector provides the layer between the Simulation code and the Run-Time Infrastructure (RTI) API as shown in figure 3.1 The FedConnector API supports multiple levels of calls to include the native RTI API for controlling the HLA/RTI interface. FedWizard simplifies FedConnector by combining some of the C++ classes.  Figure 3.1 the FedConnector Based Federate A FedConnector based federate is developed using the three C++ classes shown in figure 3.2.  The CDataTypes contains all data definitions, maps, and attributes and needs to be instantiated only once. It supplies and maintains all instance data CData objects to the user application. The FedConnector class further configures the CDataTypes class and updates and processes incoming and out-going HLA objects and interactions. Figure 3.2 User FedConnector C++ Classes 3.1 CDataTypesThe CDataTypes class is the Thin Layer Data Interface (TLDI). The TLDI is generic data interface/converter. It relies on the application to define all data/maps through member functions or external text files. The TLDI supports user:Data DefinitionData MappingData ConversionData InstantiationData DeletionData Publication/SubscriptionLocal/Remote Host Interfaces Local/Remote New/Updating/DeletionData Constructor/Destructor Data Definition Associated User dataData WarehousingData UtilitiesDefinition ParserThe bulk of the TLDI is pictured in Figure 3.3. It is shown configured by definition and mapping files. Local and remote hosts operate sharing data that is defined by the data definition. The local host has the option of using the native format or one or more alternate-mapping interfaces. In the case of multiple mappings the TLDI notifies the local host of remote data creation/updates by calling the first update function registered. Figure 3.3 The Thin Layer Data Interface 3.2 FedConThe FedCon class is the target for the TLDI remote host providing an HLA interface. Figure 3.4 shows a FedConnector-based federate. FedConnector reads the Federation Execution Data (.fed) file and combines the configuration information of the TLDI with the FOM reporting any errors found. All new/update/delete functions are registered with the TLDI to automate the processing of all-local objects and interactions. FedConnector then joins the federation and processes all publishing and subscription requirements. Figure 3.4 The FedConnector Based Federate 3.3 CDataThe CData class provides instance data previously defined/mapped and instantiated by the CDataTypes class. A rich set of accessor and mutator member functions that can be used for setting and getting data. Configurable update member functions update objects and send interactions. Copy functions transfer like attributes of objects of different types. Native and user defined conversion functions supporting mapping are managed by the CData object. The CDataTypes class warehouses all CData instances.4. Flexibility in Time ManagementThe role of time management in a federation ranges from complex to non-existent. HLA defines a number of time management modes. The RTI can be configured to support eight variations of time management. Time Management ModesFree Run Free Run RegulatingTime SteppedTime Stepped RegulatingEvent BasedEvent Based RegulatingOptimisticOptimistic RegulatingFlexible time management was added to FedConnector via Plugin Behavior Modules (PBM) shown in figure 4.1. A PBM is a C++ object that provides the behavior and characteristics of the targeted time management mode. Figure 4.2 shows the breakdown of the time management modes along with the corresponding RTI API calls that were used to create the eight PBMs.Figure 4.1 Time Management PBMsFigure 4.2 Time Management and RTI API CallsAt runtime, FedConnector provides switching between the different time management interface modes. When operating in regulating modes automatic time stamping is provided. The DIStimestamp use of the RTIâ€™s user defined tag API parameter as defined by the Real-time Platform-level Reference (RPR) FOM is supported in any mode.  Some time management modes are extended and tailored by adding additional configuration and interfacing. All modes run in an automatic mode by default.5. SynchronizationThe RTI provides functions for setting up synchronization points among federates. The process of setting up a synchronization point is a burden to the developer and difficult to manage and maintain dynamically. FedConnector automates this process with a synchronization manager. The manager responds to synchronization commands entered via the definition file, FedConsole, or by the developer through the FedConnector API. Synchronization points initiated by other federates are handled based on the information provided to the manager. Synchronization CommandsRegister Synchronization PointsCheck Status of initiated and non-initiated synchronization points.Register a donâ€™t care Synchronization PointsRegister callback functions for synchronization point state changes.Optionally, FedConnector registers synchronization points to synchronize unsynchronized HLA services discussed in [1].  The effectiveness of this option is dependant on the response of the other federates in the federation.For closed loop requirements the synchronization manager is configured to issue a synchronization point in response to incoming synchronization point. This allows start/pause/stop points to be synchronized.6. Flexibility in Ownership ManagementThe RTI allows object attribute updating and deleting responsibilities to be shared among federates. Object attributes are owned by one or more federates. There is currently no support for transferring object ownership between federates [2]. This may be worked out in the future.   Enabling more then one federate to share responsibility for updating the attributes of an object instance promotes a very powerful federation. Common position data are maintained by having a GPS federate update position attributes of all vehicle objects. Object attributes can change scope by allowing the update responsibility to be passed to another federate. Object attribute assignments between federates are pushed and pulled [3,4]. A push is defined as a federate attempting to give responsibility for given objects attribute to another federate. A pull is a federate attempting to gain responsibility for an object attribute from another federate. The RTI provides ownership management services that support push and pull operations. The challenge is to provide a flexible and effective implementation. FedConnector executes ownership management with a small inference engine. Inference engines normally fall under the Expert System category of artificial intelligence research.  An inference engine is structured like traditional database allowing information retrieval at a later time.  In addition they guide the user or application through solving problems, point out unnoticed information and suggest alternative solutions. 6.1 Small Integrated Expert SystemInformation is supplied to the knowledge base in the form of rules as shown in figure 6.1. It is retrieved through queries. FedConnector loads all object information when it combines the configuration information from the TLDI and the FOM from the .fed file. Federation data is maintained by subscribing to various objects in the MOM. Rules for runtime operation are included in the data definition/map file, entered in via FedConsole, or added and updated by the simulation. Figure 6.1 FedConnector Ownership Management6.2 Ownership Management RulesRules are allocated at the object and attribute level including privilege-to-delete. The rules can make reference to other federates by name when federate names are passed in the optional UserSuppliedTagField during push and pull operations. Rules are weighted and referenced to internal values such as fedTime or object attribute values that are modified at runtime.Figure 6.2 Rules for Ownership Management Figure 6.2 demonstrate simple ownership management rules. When the user enters rule number one, if missile position then allow pull, the knowledge base is searched, when missile position is not found three rules are generated (2,3,4) before the user rule 1 (1) is entered. These automatic rules add the object and attribute information to the knowledge base. Then user rule 1 (1) enables the attribute for pulling by another federate. User rule 2 (5) specifies a federate by name that pulls and acquires responsibility for an attribute. If no federate rules are specified all federates are assumed. Ownership management rules are entered to operate in the opposite directing pushing attributes on to other federates. The knowledge base is queried for requesting attributes from other federates as well.Implementing a rule-based system for HLA ownership management has simplified the task of federate object attribute push and pull operation.7. Runtime Control and ObservationFedConsole provides the user/developer with access to federation status, detailed HLA object and interaction information, and labeled controls for federate operation. FedConsole Components:Object informationFederation InformationInteraction InformationUser assignable controlsFederate Status WindowCommand line entry windowRefer to figure 7.1 for the following explanations.7.1 Object InformationThe Object information provided consists of published and subscribed totals. The totals published are those requested by the RTI. Moving downward the object instance count, local count, remote count and the total object transactions are displayed.  An object viewer that displays a list of all object types is available in a separate dialog. Clicking on a type brings up a further dialog box listing all instances of the selected type. Clicking on an instance brings up a final dialog box displaying the object values in a standard dump format. The developer can register an optional formatting function to tailor this display. There is no limitation to the number of object viewers that can run concurrently.    7.2 Federation InformationFedConsole also provides the following information: Federation NameFederate NameSimulation TimeLook Ahead ValueFederation TimeRTI StatusTick CountThe time values are updated only in modes using time management. 7.3 Interaction InformationThe Interaction information displayed is similar to the object information, containing published and subscribed totals, counts of local and remote interactions, and total interaction transactions. An interaction catcher is available in a separate dialog box and displays a list of all interaction types. Clicking on a type brings up a dialog box that will be active in response to an incoming interaction of the type selected. There is no limit to the number to types of interactions that are captured.Figure 7.1 FedConsole Dialogs7.4 User ControlThe FedConnector API allows the developer to assign callback functions to FedConsole controls. The controls are used to start, stop, halt, and reset a simulation, and to synchronize, or execute events. The FedConsole labels can be modified by the simulation to provide closed loop feedback or customized for simulation operation.   7.5 Text FieldsThe developer can send text to FedConsole in five areas:Object Information AreaFederation Information AreaInteraction Information AreaLarge Federates Notes AreaSystem Status LineFedConnector uses the same areas to report runtime activity.7.6 Command InputThe command line entry field is used to input commands to FedConnector. If FedConnector cannot interpret it is passed to the simulation when the developer has provided a callback function.7.7 FedConnector ConnectivityA FedConnector based federate can support multiple FedConsole connections when it is configured and enabled in the definition file. FedConsole is utilized at any stage of development or operation. 8. ImplementationThe process of implementing FedConnector depends on the situation of the target simulation. FedConnector has been implemented in new [5] simulations, legacy HLA and non-HLA simulations. In the case of the HLA simulation, all of the existing RTI API calls were removed. In all cases, implementing a few lines of code the simulation was able to join, publish, subscribe and resign from a federation. Development Steps:Identify simulation objects and interactionsCreate a SOM/FOM (FEDEP) Define and map all simulation objects and Interactions to the SOM.  Create a simple test Federate for testingIntegrate FedConnector into simulationConduct HLA Compliance Testing The items identified are any objects or interactions that subscribe to or published.  This process is refined during the Federation Development Process (FEDEP).Simulation objects and interactions and the SOM are key in defining and mapping data. The TLDI defines data for a remote client, the HLA SOM. The simulation accesses the defined data directly or though one of the mappings that provide alternate names and data types for object attributes and interaction parameters. If the simulation changes, the only requirement is an update to the data mapping. If the SOM changes, a simple update to the data definitions is required. Figure 8.1 demonstrates this relationship.Figure 8.1 Simulation and SOM Data RelationshipThe data definitions and mappings are tested by the TLDI for ambiguity and are developed incrementally with a test federate [6]. A good test federate design allows two or more instances to participate in a federation test. The test federate is used later for simulation testing. Once all definitions and mapping are tested the TLDI and FedConnector C++ objects are included in the simulation code.  HLA objects and interaction instances are requested from the TLDI. After instance data is updated it is published. The simulation will be notified of subscribed objects and interactions through callback functions.  Small functions are registered to activate the FedConsole buttons providing control over the simulation and test federate. Synchronization, time management and ownership management options are added at any time enhancing the functionality of the simulation. 9. ConclusionThe HLA tools and efforts continue to evolve at the Joint National Test Facility supporting a growing number of federates. The FedConnector and FedConsole approach will continue to focus on a flexible, generic approach in order to support rapid HLA federate development.  10. References[1]	R.M. Fujimoto and Tacic, I., Time Management of Unsynchronized HLA Services. Proceedings of the 1999 Fall Simulation Interoperability Workshop. Orlando, FL, September 1999.[2]	Z. Li, C. M., and M. R, The Problem of Object Ownership Transfer in HLA-Compliant Logistic Simulations, Proceedings of the 1998 Fall Simulation Interoperability Workshop. Orlando, FL, September 1998.[3]	Defense Modeling and Simulation Office (DMSO), High Level Architecture Run-Time Infrastructure Programmers Guide, 1.3 version 6, March 12, 1999. [4]	Defense Modeling and Simulation Office (DMSO), High Level Architecture Interface Specification, version 1.3, April 2, 1998.[5]	Mitch Peckham: High Level Architecture Gateway for Wargame 2000, Proceedings of the 1999 Fall Simulation Interoperability Workshop 99F_SIW_140, September 1999.[6]	C Martinez: Supporting the Flexible Federate, Proceedings of the 1999 Fall Simulation Interoperability Workshop, 99F_SIW_031, September 1999.Author BiographyCHRISTOPHER L. MARTINEZ is a Senior Software Engineer at the Joint National Test Facility, Schriever AFB, CO.  He is a member of the Technology Insertion Studies and Analysis (TISA) group where he has been supporting the Wargame 2000 HLA efforts. ....HLA/RTIFedConnectorSimulation    RTI APIConfiguresQueriesUpdatesProcessesCreatesMaintains11**CData11CDataTypes(TLDI)FedCon(Remote Application)RTI Application Program InterfaceFedConsoleRuntime Rule EntryOperation FeedbackFedConsoleJavaFedWizard â€“ C++FedConnector â€“ C++.map .def TLDITLDI .fed FedConnectorFedConnectorHLA/RTISimulationCDataTypesCData Configuration FilesDefsMapsInterfaceThin Layer DataMapping/TranslationDataData DefinitionApplicationLocalApplicationRemoteTLDI/FED FileObject/Attribute InformationKnowledge BaseRulesInterfaceApplication InterfaceInference EngineSmall Integrated Expert SystemFedConnectorRTI APIOptimisticOptimisticRegEvent BasedEvent BasedRegTime SteppedTime SteppedRegFree RunRegFree RunFedCon ClassTime Management  - Plugin Behavior ModulesFedConnectorInteraction Capture DataInteractionType ListObject  DefinitionObject  Instance DataObject InstanceListObject Type ListCommand InputFederate StatusFEDInfo.InteractionInformationUser ControlObject InformationFedConsoleHLA Object Dialog BoxesHLA Interaction Dialog Boxes                                                 FedConsole                                                 User Interface                                                                                              SOMSimulation DataTLDIData DefinitionsData MappingFedConnector Ownership Management Rules  Rule         Order Number   Entered     Rules                                                                     1             4          User rule 1)   if missile::position then allowPull               2             1          Auto rule 1)   if missile then object        3             2          Auto rule 2)   if missile::position then attribute       4             3          Auto rule 3)   if missile::position then missile         5             5          User rule 2)   if gpsFederate then missile::position EMBED Word.Picture.8  