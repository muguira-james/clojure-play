New Features for OASES: The Operations GUIRobert A. Reynolds, David K. LarsonNorthrop Grumman Information Technology55 Walkers Brook Dr.Reading, MA 01867781-205-7579 HYPERLINK "mailto:robert.reynolds@ngc.com" robert.reynolds@ngc.com,  HYPERLINK "mailto:david.larson@ngc.com" david.larson@ngc.com Christopher G. ScannellThe Naval Research Laboratory4555 Overlook Avenue, SWWashington, DC 20375202-767-1127HYPERLINK "mailto:christopher.scannell@nrl.navy.mil"christopher.scannell@nrl.navy.mil Keywords:OASES, GUI, TAOS, usability, monitor, control, Tcl/Tk, GOTSABSTRACT:  In GFY'04 the Defense Modeling and Simulation Office (DMSO), with support from the Naval Research Laboratory and the Joint Forces Command, sponsored the development of a comprehensive graphical user interface (GUI) for the Ocean, Atmosphere and Space Environmental Services (OASES) system. With guidance and feedback provided by the newly formed OASES User Group, the goal was to design, implement, test, document and deliver a robust system usable by METOC officers in support of large, distributed training exercises such as the Fleet Battle Experiments. This paper describes the product of this effort: a new version of OASES baselined and configuration-managed in a Government resource repository, and available to all Government modeling and simulation programs.BackgroundThe Total Atmosphere Ocean Services (TAOS) system was developed under Defense Advanced Research Projects Agency (DARPA) sponsorship for the Synthetic Theater of War (STOW-97) program.  TAOS comprised two primary subsystems – the Integrator and Distributor – and ran in one of three modes: Capture, Replay or Live.  A single, comprehensive Graphical User Interface (GUI) was developed to manage these operating modes, referred to as the Operations GUI.  The Operations GUI provided the user with a single logical interface for managing the TAOS subsystems and included functions for both controlling and monitoring the system.The Ocean, Atmosphere, Space Environmental Services (OASES) system evolved from TAOS under Defense Modeling and Simulation Office (DMSO) sponsorship within the Environment Federation (EnviroFed) I, II and III projects.  A primary goal of the OASES development effort was to improve the composability and reusability of the TAOS system by reorganizing it along the six functional lines proposed by Birkel et. al. in Breaching the M&S Operational Barrier: The Worldwide Low-Resolution METOC Database [1].   These functions define the life-cycle of M&S environmental data:Collection – the process of discovering and establishing access to environmental data.  This function is commonly performed by the Master Environment Library (MEL) for cases where the synthetic natural environment (SNE) is to be based on a historical dataset.  When the SNE is to be based on the most currently available nowcast and forecast data, the OASES Receiver plays a part in the collection process; in these cases the “forecast data feed” may be provided by MEL or an operational forecast server such as the Navy’s Tactical Environmental Data Server (TEDS).Integration – the process of taking disparate data sets obtained by the collection process and merging them into a physics-consistent, logically integrated, and physically single data set.  Operating external to OASES, the Environmental Scenario Generate (ESG) provides a relatively complete integration service. Internal to OASES, logical integration into a single dataset is performed by the Ingestor on a physics-consistent set of input transmittals.Extension – the process of “filling the gap” between the basic physical measurements or variables provided by available Numerical Weather Prediction (NWP) models and the variables required by a federation, as expressed in a Federation Object Model (FOM).  External to OASES, ESG provides an extension service; within OASES, this function is performed by the Transformer.Transmission – the process of taking the collected, integrated and extended data set and furnishing it to the simulation/federation scenario developer in a readily accessible form.  This function is outside of OASES and is facilitated by the Synthetic Environment Data Representation and Interchange Specification (SEDRIS) technologies.Tailoring – the process of adjusting the received METOC data set to meet exercise- or scenario-specific training/analysis requirements.  This function is performed by the OASES Editor.Sharing – the process for communicating the final ready-to-go METeorological Oceanographic (METOC) scenario to all federation participants.  This function is performed by the OASES Federates:  the Publisher, the Time Federate and most recently the Query Server [2].With the OASES system now comprising six primary subsystems, supporting many more than three operating modes, the TAOS Operations GUI became obsolete.  While the OASES system provides all of the functions of TAOS and many additional ones, there is currently no centralized application for operating the system, placing the burden on the user to understand a mix of command-line and subsystem-specific graphical interfaces.  The DMSO-sponsored development of a comprehensive Operations GUI for OASES – the subject of this paper – is being pursued to improve the usability of the system by making it easier to control and monitor it and by reducing the time required to train operators.Design ProcessInitial DesignDuring the initial, NGIT-internal design phase of the effort, two competing approaches to the Operations GUI (henceforth “OpGUI”) architecture were considered.  The first, based on the popular “Wizard” GUI paradigm, consists of a main interface that would present the user with several alternatives in answer to the implicit question “What do you want to do?”.  In the context of OASES the choices might be 1) import a transmittal, 2) transform or edit an existing environmental scenario, or 3) publish an existing scenario to a Federation execution.  Subordinate dialogs, whose detailed options and parameter settings would depend on what had been selected at the previous higher level, would lead the user down to a point where a meaningful subset of OASES could be executed to perform the desired functions.The alternative approach considered was to reuse and build on the approach taken to develop the TAOS GUI and some early “unreleased” versions of a similar OASES GUI.  Under this approach, the main interface presents the user with a depiction of the system-level data flow, with each OASES subsystem represented by an object which responds to a right mouse button (RMB) click with a popup menu of available actions (Figure 1).  The user, who is presumably familiar with the OASES concept-of-operations (CONOPS), uses the option menus to issue the sequence of Configure, Start, Monitor and Stop functions necessary to perform the desired functions.The second approach was selected for these primary reasons:It provides the user with a more complete view of the system functionality.  Wizards, which streamline common tasks, are a nuisance for performing uncommon tasks and are generally outgrown quickly by experienced usersIt allows for maximum reuse of existing software components, and builds on the previous experience of the developers.It provides a graphical, intuitive view of the system, which supports rapid determination of system health and status for executions that involve multiple subsystems.Community ReviewAn initial design proposal for the OpGUI was documented and distributed to the newly formed OASES User’s Group [3] for review.  The document included screen-captures and/or PowerPoint-based screen mockups for each interface with textual descriptions of the interface’s functional aspects.  The original design document and its subsequent revisions were posted to a web-site accessible to all User Group members.  A reflector was established to support online discusson of the design, and in addition the design was reviewed during three two-hour teleconferences.  A particularly valuable item of feedback came in the form of a proposed revision to the OASES main interface that placed the subsystems in a left-to-right order that reflected the order in which these subsystems needed to be configured and run by the user; the OpGUI would then enable “downstream” functions only when the required upstream functions had been performed.  The problem with this approach was that the order proposed only applied to use cases based on recent Fleet Battle Experiments for a relatively restricted range of OASES system functions.  However, the suggestion to guide the user via ordering the subsystem icons led to an idea to significantly improve on the usability of the original design, as described in the next section.Figure 1:  Operations GUI Main InterfaceAn “Explorable” GUIIn the spirit of designing a GUI that guides the novice user through the procedures necessary to operate the system, but which is not strictly Wizard-based, the OpGUI design was extended to include the adoption and enforcement of the rules described in the subsections below.Initial StateThe initial state of the OpGUI will be based not on an example configuration, as had been done previously and which left all subsystems in an executable state due to the inclusion of example input data and pre-ingested scenarios in the release, but on a configuration that provides values only for “defaultable” parameters and leaves the rest undefined.Active ScenarioIn OASES parlance, a scenario refers to an encapsulation of the digital, three-dimensional time-history of the atmosphere, ocean and/or space environments for a distributed simulation exercise. The active scenario refers to the input, output or input/output scenario that is the target for all OASES operations and which must be specified for every subsystem.  The OpGUI design embraces the notion that, for any given system-level configuration, all subsystems are dedicated to operations on the same scenario, and enforces the policy that the user must specify the active scenario before he is allowed to configure or run any given subsystem.Federation ExecutionAdditionally, the OpGUI design embraces the notion that, for any given system-level configuration, the OASES Federates are dedicated to supporting the same Federation execution.  The OpGUI enforces the policy that the user must specify the configuration parameters that specify the Federation execution before the user can configure or run an OASES Federate.State TransitionsThe OpGUI maintains awareness of the state of the configuration and control parameters for the overall system and for each subsystem, and prevents the user from:Configuring a subsystem if the active scenario and Federation configuration have not yet been specified at the system level.Starting a subsystem if its configuration does not yet establish values for required parametersStopping or monitoring a subsystem that has not yet been started.  This is an obvious rule but one which could be overlooked if the GUI is developed with too many assumptions regarding what the user does or doesn’t know.Modifying the configuration of a subsystem that is currently running.Configuring and/or running a subsystem that would conflict or interfere with the operation of a subsystem already running.Additionally, if a user attempts to use a function which is currently disabled, the OpGUI will post a dialog box explaining what prerequisite condition or conditions need to be met before that function can be used. In combination, these rules should help to ensure that the user can explore the OASES system through a process of guided trial-and-error, and thereby learn how to operate the system.Key Features of the DesignBackground ProcessesThe majority of OASES subystems run as background processes, and once initial configuration is complete these subsystems do not interact further with the user.  These subsystems – the Receiver, Ingestor, Transformer, Publisher, Time Federate and Query Server – are managed by the OpGUI through four straightforward actions available through popup menus:Configure – invoke a dialog for specifying the parameters that control the operation of the subsystem once it is started.  An example of a configuration dialog is given in Figure 2 for the Publisher.Start – execute the subsystem.  The subsystem’s icon on the main interface changes color to indicate its status.Monitor – launch an interface for monitoring the operation of the subystem.  An example of a monitoring interface is given in Figure 3 for the Ingestor (this monitoring interface is also used by the Transformer).Stop – shut the subsystem down, or abort the execution if the subsystem would have eventually shut down under its own volition.Figure 2: Publisher Configuration InterfaceFigure 3: Integrator Monitoring InterfaceInteractive ProcessesTwo OASES subsystems interact directly with the user and therefore provide their own dedicated graphical interfaces; these are the Editor and Visualizer.  The Editor and Visualizer main interfaces are shown in Figures 4 and 5 respectively.  In previous releases of OASES, these subsystems were the only subsystems that provided a graphical interface; as a result of the efforts described by this paper, these subsystems are now integrated within the  larger context and concept-of-operations provided by the OpGUI.Figure 4: Editor Main InterfaceFigure 5: Visualizer Main InterfaceObtaining OASESThe enhanced OASES system described by this paper is fully government-off-the-shelf (GOTS) software, available to the M&S community through NRL [3].  The initial target platforms are the current front-running Intel / Linux platforms including both the Enterprise and Fedora product lines.  Interested users should contact NRL [3] to gain admittance to the OASES User’s Group and associated Reflector, and to obtain the latest available documentation and software.ReferencesBirkel, P.A. et al, Breaching the M&S METOC Operational Barrier: The Worldwide Low-Resolution METOC Database, Proceedings of the Spring 1999 Simulation Interoperability Conference, Paper 99S-SIW-015, Orlando, FL., March 1999Reynolds, R.A., New Features for OASES: The Query Server, Proceedings of the Fall 2004 Simulation Interoperability Conference, Paper 04F-SIW-088, Orlando FL, September 2004 (pending)Contact Christopher Scannell of the Naval Research Laboratory in Washington, DC for information on the OASES User’s Group and the OASES software and documentation products:  HYPERLINK "mailto:scannell@ait.nrl.navy.mil" scannell@ait.nrl.navy.mil, (202) 767-1127.Author BiographiesROBERT A. REYNOLDS is a Principal Engineer at Northrop Grumman Information Technology, Defense Enterprise Solutions, and has been the system architect and lead developer for the OASES system and its predecessor TAOS.  His primary professional interests are in the areas of software/simulation engineering, object-oriented modeling, visualization, distributed simulation and synthetic environments.  He has a BS in Physics from the Massachusetts Institute of Technology and an MS in Nuclear Engineering from Carnegie-Mellon University.DAVID K. LARSON is a Software Engineer at Northrop Grumman Information Technology, Defense Enterprise Solutions, and  has provided development support for TAOS and OASES beginning with the development of the Global-98 JSIMS METOC database and continuing through the EnviroFed projects to the present.  His primary professional interests are in the areas of software engineering, visualization and object-oriented modeling. CHRISTOPHER G. SCANNELL is an Electronics Engineer with the Naval Research Laboratory.  He has worked in the Acoustics Division and the Information Technology Division researching distributed simulation applications, virtual reality applications and parallel processing paradigms.  He has a BS in Physics from Georgetown University, a BSEE from the Catholic University of America and an MS in Electrical Engineering from Johns Hopkins University. Northrop Grumman Information Technology, the original developer for the TAOS and OASES systems, is currently contracted to do the OpGUI development.PAGE  PAGE  1PAGE  PAGE  3PAGE  PAGE  6