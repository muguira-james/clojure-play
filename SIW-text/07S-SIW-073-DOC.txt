Development Life Cycle of a Virtual Training EnvironmentAaron C JohnsonMarshall R MillerU.S. Army Aberdeen Test Center400 Colleran RoadAPG, MD 21005410-278-8645, 410-278-0508 HYPERLINK "mailto:Aaron.c.johnson1@atc.army.mil" Aaron.c.johnson1@atc.army.mil, marshall.r.miller@atc.army.milKeywords: Simulation, Gaming, Modeling, Virtual, MOUT ABSTRACT: A virtual training environment, if produced successfully, lends itself to be a configurable, maintainable, and functional instrument that can complement the capabilities of a physical training site.  The effectiveness of developing such a tool will provide such beneficial features including, but not limited to: infinite reusability, substantial reduction in maintenance and training cost, and visual construction planning.This paper documents the process of replicating a Military Operations on Urban Terrain (MOUT) site by creating a digital duplicate of a physical facility that can be traversed in a virtual environment for test and training purposes.  Using Commercial Off-The-Shelf (COTS) gaming software as a developmental and visual foundation, we are able to concentrate our efforts on acquiring maps, blueprints, and photographs, and converting them into accurate digital representations.  The paper will discuss, extensive descriptions of the gaming engine, developmental tools, data acquisition, conversion, verification methods, as well as a focus on the integration of realistic Future Combat System (FCS) air and ground vehicle models, weapon models, and soldier systems, coupled with accurate terrain databases and vehicle dynamics through a DIS/HLA/TENA interface.1. RequirementsIn the field of Test and Evaluation, simulation is a necessity in order to ensure the efficiency and reliability of a test or training exercise.  Therefore, the accuracy and relevance of the simulation is effectively as important as the test itself.  The focus of this paper will be the process in which a MOUT facility is modeled using the COTS video game Unreal®  Tournament 2004 (UT2004) as well as a discussion as to how the virtual domain can be used to streamline the test and training process.In order to run a real-world simulation when using an urban training facility, or any training facility for that matter, there exist some major concerns that arise before/during the test can take place.  Resources.  Do the testers have the resources (funding, work force, facilities, etc) to execute the testing?  Time.  Can the testers allocate enough time to run this test?  Have they considered all of the hurdles and roadblocks that could slow down or potentially stop the test?  Safety.  Is this test safe for the participants (usually soldiers)?  Is it feasible to run the test based on given restraints?The effectiveness of a simulated test environment may be leveraged.  With such an environment, a test engineer can accurately plan an exercise by running simulations prior to the event, thus saving both resources and money.  The issue of safety is drastically reduced using a simulated test environment, because the test facility is now digitized and the users are interacting with a virtual environment through a computer.The effectiveness of any simulation relies exclusively on the accuracy of what is being simulated.  If the simulation is lacking realism or usability, the effectiveness of the simulation is inherently diminished.  This process of creating realism is perhaps the most important aspect of any simulation.  2. Data AcquisitionWhen creating a simulated environment, the most effective tools used to recreate the realism of the environment are terrain maps for physical terrain and blueprints for physical structures.  To ensure integrity and quality, the validity of any acquired data should always be questioned.  Although, despite what will be a tedious acquisition process, it is important to remember, “Beggars can’t be choosers”.  In the simulation development arena, a developer has to effectively and efficiently use what is offered and if needed, supplement data gaps as best as possible.2.1 Gathering the DataThe first step to data acquisition is to survey the terrain and/or structures that will be used in the simulation.  This requires the developers to travel to the facility and gather as much initial data as possible.  Initial data includes anything that could be useful once development begins: pictures, terrain and structure characteristics, light source placement (electric and natural), vehicle parking, fences, location of debris, etc. After an initial survey is conducted, one must now try to gather as much physical data as possible.  Physical data includes blueprints, aerial photographs, training maps, terrain data, etc.  Anything that has a physical scale or numbers attached to it falls into this category.  It is also important to remember that in this phase of data acquisition, one can never have enough physical data; the more data one has to supplement for discrepancies, the more accurate the simulation will ultimately become.2.2 Data ProcessingNow that all of the data has been acquired, it must be verified.  There is an old carpentry saying which states, “Measure twice, cut once.”  This rule is equally true and important in the development of a simulated environment.  Do not assume that the acquired data is accurate.  This cannot be stressed enough.  Verify that the environment matches the data that has been acquired.  Without accurate data, the beneficial aspects gained by using a simulated model are substantially degraded.An efficient method to organize and process the bits and pieces of data that have been collected is to create what is called a “developmental blueprint” of the environment.  Gather all acquired data and make a draft, paper or electronic, of the terrain and structures that will be used in the simulation.  Refer back to the initial survey and compare blueprints and terrain data with pictures and notes.  Make annotations of any discrepancies or gaps in data on the developmental blueprint.  Once the developmental blueprint has been drafted and the acquired data has been detailed, a final trip to the facility needs to take place.  This final survey will authenticate the blueprint that has been created.The final survey is a two-step process: verification and detailing.The verification process is comprised of a walk-through of the facility.  Check the developmental blueprint against the real terrain and architecture.  Take pictures and make notes detailing flaws in the developmental blueprint.  Be specific and thorough with this documentation. After the developmental blueprint is verified, the facility needs to be detailed.  This step requires another walk-through of the facility.  Do not combine this with the verification stage of the final survey.  Detailing the facility requires complete attention to every facet of the environment to obtain the highest level of accuracy.  The most important tool used during this stage of acquisition is a digital camera.  Make sure the camera has a high level of resolution – at least five megapixels.  There are three primary types of pictures that will be used to detail a simulated facility: relative, texture, and detail.A relative picture is one that shows particular angles of the facility.  Aspects of the facility that should be paid close attention to, such as important vantage points, terrain vistas, structural and terrestrial symmetry, etc.  Essentially, it is important to document as many key viewpoints of the facility as to add a more realistic aspect to the simulation.Texture photographs are high-resolution images that will be used to face the models within the simulation itself.  These pictures include such objects as terrain types (grass, gravel, road, etc.), structural appearance (brick, drywall, wood, paint, wallpaper, etc.), signs and markings (graffiti, posters, artwork, etc), and any detail of the facility that will give the simulation an accurate “look and feel”.Detail pictures are those that capture certain aspects of the facility that require close attention.  Include features such as cracks in a wall, dilapidated rooftops, or perhaps an odd terrestrial structure.  These unique attributes are essential to create an accurate and realistic simulation.Before the final survey is complete, ensure that all data is verified and accounted for.  Accurate and conclusive data is a necessity to streamline the development process.3. Development ToolsAmong the tools used will be an image editor, a modeling program, and a map editor that is native to the game engine being utilized, which in the case of this paper is UT2004.  Some of these tools may be acquired freely, which helps to reduce development costs.The development phase was entered with the intent of using a freeware image editor application called The GIMP, which stands for The GNU Image Manipulation Program.  Although the application is free, it is important to remember that there is a learning curve with this application and time might be wasted becoming familiar with the interface.  An alternative, non-freeware solution is Corel’s Paint Shop Pro®, which can be purchased for under $100.  Using the vast array of features and tools that these applications provide, one is able to convert large, high-resolution photographs into compatible textures used to face virtual buildings.  It is also used in conjunction with the next application to develop custom artwork and models to place throughout our simulated environment.	The second program is a popular package in the modeling industry called 3D Studio Max® (3DSM).  This program comes complete with many tools and functions that allow for the creation of highly detailed models, ideal for a realistic virtual environment.  	The third is the staple development tool of the project, Unreal® Editor, more commonly known as UnrealEd.  UnrealEd comes standard with the purchase of the UT2004 game package ($30).  UnrealEd allows for the creation and manipulation of basic shapes to be molded into any desirable object.  The key issue here is that every entity resides within the grid of the map.  This has many benefits, including the ability to see how each entity will appear as it is built, how it fits into limited space and edit the entities individually or as a whole/combined unit.  UnrealEd is a fairly powerful and stable application, which is sufficiently easy to learn and develop within.  4. Developmental ProcessThe development process begins with an outline of the building sites and an establishment of their dimensions.  This process segment relies upon the developmental blueprint previously constructed from the “Data Processing” section, as well as any other supplementary data.  Using the measurements and scale from the developmental blueprint, the next step is to convert the structural or terrestrial dimensions to the coordinate system that UT2004 supports.  These units are aptly named an Unreal Units (UU).To aid in the unit conversion process, there is a simple tool called Real2Unreal.  Through the use of this tool one has only to input a value in feet or meters, and Real2Unreal outputs the proper UU value.  This process should be repeated for all of the measurements taken from overhead photographs/maps, as well as for all exterior and interior building dimensions.  Once the conversion from real world units to UU is complete the virtual site can now begin construction within UnrealEd.  Tutorials on how to use UnrealEd can be found freely online.  There exists numerous communities and forums that are available to  help and support nearly any needed requirement.  4.1 Textures and DetailAt this point, there should be a map with accurately sized buildings at appropriate distances from one another, modeled using UnrealEd.  It is at this point that the un-textured buildings, which look like nothing more than solid blocks (called brushes in UnrealEd), need to be textured to look like the actual structures.  The textures will originate from actual (texture) photographs of the buildings that were taken during the Data Acquisition process.  Using the image editor, each photograph will have to be opened, cropped, edited, reduced to 256-color quality, resized, and saved as a bitmap (.BMP).  The task becomes increasingly complicated if transparent or other “special” textures are required.  Since textures are restricted to dimensions that are typically much smaller than the buildings they envelop, many will be repeated as continuous tiles across the building brush.  It is very important to edit the photos such that the tiling effect is not so obvious.  Other textures will be explicitly used as a single image, usually for small detail items like doors, vents, appliances, etc; for these it is important to rotate the image so that it is completely horizontal.  When all editing is complete, the image quality must be reduced to a 256 color palette, resized to dimensions that are powers of two (i.e. 512 x 512, 1028 x 256, …etc), and saved using the bitmap format.  If one of these requirements do not meet the standards of the editor, UnrealEd will not allow the texture to be imported.  A successful import will be evident by the texture immediately appearing in the texture browser within UnrealEd.  Applying a texture to a surface is accomplished by selecting the surface(s) and then clicking on the desired texture.  At this point, the texture can be resized, rotated, or edited further to fit the surface as desired.The development process does not always operate in a linear manner, where all models are created and then textured to perfection.  UnrealEd allows the developer to add or edit content in any order, a very advantageous feature of the program.  If a room inside of a building is not to specification, or a window is misplaced, it can easily be revised, moved, or withdrawn from the map entirely.  Likewise, any objects of detail can be added to the environment or a building at will.  This is especially useful when the physical site being  modeled undergoes changes and it is then necessary to replicate them in the virtual model.  Given enough development time and proper attention to changes, a team can maintain an identical virtual representation of its physical counterpart.4.2 Custom ModelingIf the development fund allows for the more expensive tools like 3D Studio Max, they should be used when applicable.  Now that a virtual environment exists, additional objects that require custom or extensive modeling that is beyond the capability of UnrealEd can be added.  These objects can be as simple as a road sign, or as complicated as a military vehicle.  Entities like the latter can even be designed with full interactivity in mind.  A tank can be entered into and driven around the virtual terrain, a weapon can be picked up and used, or a civilian can be made to stand near his utility vehicle.  Extra time should be granted in the development planning for such tasks, as they require a substantial amount of skilled crafting and development time.  Due to the nature of the software being utilized, a futuristic fictional video game, the default character models in the virtual environment are not likely to resemble anything convincingly realistic by default.  3D Studio Max enables the creation of characters to replace these incumbents, so that the developer can produce the virtual environment, but also the virtual character(s) that interact with it.  There also exist modifications to the UT2004 gaming engine, more commonly known as “mods”.  These mods can be used to import various packages, which, when used correctly, can add realism to the simulation such as realistic guns, FCS vehicles, FCS soldier models, etc.4.3 EnvironmentUnrealEd offers a myriad of options that when used correctly can drastically increase realism.  For example, UT2004 supports the use of two-dimensional “sprites” or “static meshes”.  These objects may be used in large quantities to imitate groups of trees, small vegetation, background buildings, etc.  They consume far less resources than individual brushes to a similar effect, which allows for faster and more efficient rendering of the virtual arena.  Adding bodies of water or a realistic moving sky is also a feasible option using the UT2004 game engine, although it does involve substantially more work.  Many entities that are added to the virtual environment will require property adjustments.  Glass requires transparent properties, water and other fluids require liquid properties, and so on.  Each individual surface belonging to every entity has a large number of properties associated with it, regarding appearance, interaction, movement, light reflection, etc.  Likewise, every object has a list of lighting properties, but often the light around it, and not the entity itself affects these objects.4.4 LightingWhen the UT2004 engine loads and then continuously renders the map, it essentially does so in layers.  Geometry is the fundamental layer, followed by textures and surface properties, and then lighting, shadows, and optimization.  Each source of light is, in essence, its own entity.  Without light entities, the remaining entities would not be visible.  Thus, the developer must add each individual light entity as well as specify such properties as brightness, radius, direction, hue, and more.  UnrealEd offers pre-loaded light settings, such as spotlights, flickering light, and dim lighting.  It also offers a separate light entity, which simulates the lighting effects of the sun.  It is important to remember that adding lighting effects will require substantial tweaking in order to achieve the developer’s desired appearance.  There will inevitably be situations where, after populating a zone with objects and rendering them, there will appear to be strange shadows or other light behaviors.  Sometimes the existing light (or brush) entities can be edited, but other times the fix may necessitate additional lighting.  Proper lighting and optimization is an absolute must when attempting to develop a realistic virtual environment.4.5 InteroperabilitySystem interoperability is an essential aspect of an effective simulated environment.  Can the simulation communicate with entities outside of its own environment?  If the answer is no, then the system has lost amplitudes of value. The simulation may achieve interoperable status by becoming compliant with U.S. Department of Defense simulation communication standards, DIS, HLA, and TENA.  Development to comply with these standards is possible since the simulation platform is using the UT2004 gaming engine.  This avenue of development will be very tedious and time consuming, and will require an expert knowledge of the gaming engine, Unreal Script (UT2004’s native programming language), as well as DIS, HLA, and TENA protocols. 5. SummaryA virtual training environment, if developed successfully, lends itself to be a configurable, maintainable, and functional instrument that can complement the capabilities of a physical training site.  This paper does not document the definitive developmental life cycle of a virtual training environment.  It is intended to offer a framework for development as well as a checklist, of sorts, to aid in pitfall prevention and management.  In closing, the most important aspect of simulation is that of acquisition and verification.  Ensure the validity of the acquired data and the simulation has made great steps towards achieving success.  Author BiographiesAARON C JOHNSON is a computer scientist at Aberdeen Test Center, Aberdeen Proving Grounds, Maryland.  He graduated from the University of Maryland Baltimore County with a BS in Computer Science and minors in Writing and Mathematics.MARSHALL R MILLER is a computer scientist at Aberdeen Test Center, Aberdeen Proving Grounds, Maryland.  He graduated from Edinboro University of Pennsylvania with a BS in Computer Scientist and minors in Mathematics and Information Technology.Development Life Cycle of a Virtual Training Environment -  PAGE 5