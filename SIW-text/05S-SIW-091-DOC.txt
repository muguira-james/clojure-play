Moving Towards a Service-Oriented Architecture (SOA) for Distributed Component Simulation Environments Paul GustavsonTram ChaseLarry RootKarl CrossonSimVentions, Inc.11903 Bowman Drive, Suite 102, Fredericksburg, VA 22408-7307Keywords:  Aggregation, Distributed Component Simulation Environment, SOA, BOMs, HLA, XML, Web Services, UDDI, automated servicesABSTRACT:  The Service-Oriented Architecture (SOA) is an intriguing architectural concept focused on the loose coupling of integrated elements. SOA’s aim is to minimize unnecessary dependencies among systems and software elements while maintaining functionality.  Consider how a DVD player, which can connect to virtually any television, can also play a myriad of DVD movies.   Those same DVDs can be played on other devices, such as a laptop, or automobile entertainment system.  All of these devices integrated with the DVD provide common functionality, although the quality of the service may differ.   This loose coupling of integrated elements is analogous to the SOA principle. SOA is often associated to the technologies it applies, which includes XML, SOAP, WSDL, UDDI, and others, but it is more than that.  SOA encourages the use of these aforementioned technologies to achieve a level of flexibility and agility that most object-based architectures have failed to deliver, including the HLA.    HLA historically binds data and processing tightly together.  Consider how most HLA federates often must be tightly coupled with a FOM, and most federations must be tightly coupled with specific RTI implementation.  The desire, from an SOA point-of-view, is for the FOM to behave like a DVD, and the federate to function like a DVD player capable of loosely coupling with any FOM.  In this paper we will explore how SOA and supportive technologies such as XML, WSDL and BOMs can begin to be applied to provide this loose coupling and better support distributed simulations, including the HLA – and how this concept is being applied to support aggregation.IntroductionService Oriented Architectures (SOA)!  Pick up just about any copy of eWeek magazine within the last eight months and you will find an article on SOA advertised on the front cover or addressed in major articles [1, 2, 3].  WebServices Journal and C/C++ Users Journal, alike, have also been publishing articles about SOA [4, 5].  It seems to be one of the latest buzz words in the IT industry. Many consider SOA as an umbrella term related to the 2nd generation of web service standards and technologies including XML, SOAP, WSDL, UDDI, and BPEL4WS.  However, it is more than just a label for these technologies.  SOA is focused on the interoperability and loose coupling of integrated elements.  Its goal is to achieve a level of flexibility and agility that most object-based and object-oriented architectures have failed to deliver. XML-based technologies such SOAP and WSDL provide a means for supporting the implementation of an SOA design – but they in themselves are not inclusive of SOA.  SOA AnalogiesThe principles of SOA can be found in numerous places.  That is to say, there are examples that abound that are analogous to the SOA ideal.  Consider how different items – potentially manufactured by different vendors -- integrate together to provide some repeatable service.  For instance, a DVD player, which can connect to virtually any TV, can also play just about any DVD movie.    Those same DVDs can be played on another device, such as a laptop, or automobile entertainment system.  All of these devices integrated with the DVD provide common operational service, although the quality of the service may be different.   As another example, consider batteries which are used for numerous consumer electronic devices.  The common service provided is loosely coupled power.  It is possible to take the same AA batteries out of a MP3 player, and plug them into a small flashlight, or wireless mouse to receive for power needs.Similarly, the objective of SOA is to minimize unnecessary dependencies among systems and software elements.  This in effect, is what loose coupling is all about.   In this paper we will dive deeper into SOA and later explore how we can take SOA techniques and related technologies and evolve HLA to support a loosely coupled architecture allowing faster integration and execution play.Common SOA Implementation ApproachThe SOA concept and how it actually works can be further understood in the illustration depicted in figure 1.1. INCLUDEPICTURE "http://www.service-architecture.com/images/web_services/service-oriented_architecture_basics.jpg" \* MERGEFORMATINET Figure 1.1 – SOA Service and Connections [6]This simple illustration of a service-oriented architecture shows a service consumer sending a request message to service producer.  A response message is then provided by the service producer back to the service consumer.Both the request and subsequent response interfaces are defined in a way that is comprehensible to both the service consumer and the service provider. A common mechanism to define this interface connection is the use of Web Services. In fact Web Services is a key building block for an SOA implementation.The key of an SOA implementation is to focus on exposing existing application logic as loosely coupled services. The relationship of the common standardsused to support an SOA implementation is illustrated in Figure 1.2.  SHAPE  \* MERGEFORMAT Figure 1.2 – SOA Service and Connections [2]An SOA implementation encapsulates application logic and functionality within the services it provides.  This functionality is shared via a common communications protocol often using Web services.  Other XML technology layers such as WSDL and SOAP are combined to describe, bind and enable communication for these Web services.   Additionally a technology such as UDDI can be used as a service broker, which enables discovery of desired services.  Need for the Loose Coupling of M&SSOA is intended to provide and support the integration and interoperability of loosely coupled subsystems and software elements.  This differs from most object-based architectures, which bind data and processing tightly together. In these instances, integrated elements can not be decoupled, at least not easily.  For example, this tight coupling is a problem that affects many within the M&S community.  There has been a long standing issue with how HLA is applied for enabling distributed simulation environments.  For instance, a FOM typically does not provide loose coupling of federates.  Or perhaps it should be said that the federate can not typically be loosely coupled with a FOM. Consider that each federate must be tooled to operate to the agreements of a FOM, and that these agreements may vary from FOM to FOM.  The irony is that the coupling of federates is absolutely necessary to formulate a federation.  It’s just that it can’t be considered a loose coupling because federates have to be made to play to a new sheet of music – known as FOM.  Thus, exchanging one federate for another, while possible, is not always easy.  The desire would be for the FOM to behave like a DVD, and the federate to function like a DVD player capable of loosely coupling with any FOM – and thus interoperating with other federates within a federation.  In other words, in a SOA compliant HLA, a federate should be able to digest and adapt to a FOM and be able to perform accordingly.   We must realize the quality of service may vary among any one of these federates, but the operational aspect (i.e., interoperability) should always be the same.  Specifically, the federate is capable of playing, whether efficiently or poorly, to the common model information identified in the FOM.Opportunity for Applying SOA PrinciplesIt can be argued that the great thing about DIS was that it fit closer to an SOA approach.  Consider one could take any 2.03 DIS simulation and make it work within any other 2.03 DIS simulation environment. It was a simple mechanism allowing a simulation to be decoupled and reattached to other environments.   It could be argued that a RPR-FOM Federate could also work within any RPR-FOM Federation, but consider the difficulty to take a federate and make it easily work for different FOMs and, just as importantly, different RTI implementations.  The truth however is that HLA provides a much more extendible approach for interoperability than DIS provides.  There’s no limitation to a specific set of Protocol Data Units (PDUs) as DIS requires.  The FOM is intended to be an extension enabler allowing federates to be better represented and reflected in a distributed environment.   Furthermore the mechanisms of exchange are architected in a manner that is much more optimal in comparison to the performance of DIS, which required updates of complete entities whether information changed or not.   Essentially HLA allows only the data that needs to be exchanged to be ultimately reflected, and therefore can be much more efficient.  The key is to advance HLA in a manner that it adheres to SOA principles.   Federates as Software AgentsThe mechanics of SOA are commonly attributed to the application of software agents, where self-autonomous software agents interact among one another; acting as providers and consumers in a very loosely coupled environment.  A provider can be a web service providing functional remote procedures and data access, whereas a consumer can be a client application that might request a provider for computational analysis or access of specific data and/or the autonomously receipt of subscribed information when it becomes availableIt is quite possible that in HLA, a federate could be considered a software agent as well.  The key requirement for this capability to take hold is through the application of common interfaces that can be understood by other agents or federates.The Application of a Common InterfaceAccording to Hao He[6], the interoperability and loose coupling of integrated elements, which SOA achieves can be attributed to the following two constraints: A small set of simple and ubiquitous interfaces to all participating software agents. Only generic semantics are encoded at the interfaces. The interfaces should be universally available for all providers and consumers. Descriptive messages constrained by an extensible schema delivered through the interfaces. No, or only minimal, system behavior is prescribed by messages. A schema limits the vocabulary and structure of messages. An extensible schema allows new versions of services to be introduced without breaking existing services.According to these constraints the key for SOA interoperability is the application of common interface.  Specifically we can identify from He’s analysis the following requirements for supporting the loose coupling of an interoperable environement: The common interface must be leveraged by all participating software agents (i.e. federates)That the interfaces must be accessible and understood by all providers and consumersInterfaces serve as the framework for the messages that are to be exchangedMinimal system behavior is provided by these interfaces (or messages)An XML schema should be applied to define the vocabulary and structureAdditional services should be able to be added without impairing the common interface. A principle need within the M&S community is to determine how common interfaces can be established, shared and integrated within a distributed component simulation environment that is supported by HLA federates and other resources.  BOMs as a Common InterfaceOne may think that the FOM could provide a common interface, but this maybe actually part of the problem.  Consider that an HLA federation is often contingent upon federates that collectively fulfill a specific FOM.  It is the FOM that is binding.  If one federate drops out, then the full service described by the FOM may not be satisfied.Furthermore, can one take a federate and easily make it work for different FOMs?  Can one take a FOM and make different federates snap together to support a federation?  The answer to both these questions is often no.  We find that there is a high degree of binding.  In most cases a FOM typically results in the tight coupling of federates.  Thus, this is where the binding issue is revealed.  What is required is another mechanism to define the interface; a more modular approach that can be utilized in different ways.This is where the concept of Base Object Models (BOMs) makes sense.    A BOM is a standards-based approach for describing a reusable component or piece part of a simulation or system [7].  BOMs are unique in that they are able to represent or support discrete patterns of interplay within or among simulations.  A BOM distinguishes between a component’s or piece part’s interface and its implementation.  Specifically, a BOM reflects a language neutral interface that identifies the essential elements provided by a component or piece part. The implementation (or functionality) for that component or piece part can be captured independently through source code, a binary object such as a Windows DLL, a Unix Object, or in other ways such as the Simulation Reference Language Markup (SRML).This separation of interface from implementation allows BOMs to serve as building blocks for supporting the composability of loosely coupled systems.  SOA Functionality for Distributed SimulationsThe question to be answered is what type of SOA functionality might result from the integration of XML-based technologies such as Web Services, WSDL and BOMs in regards to supporting distributed simulations -- including HLA federations. While there maybe many possibilities, there are two service offerings that can be provided as ancillary service to a simulation environment.  This includes the concepts of Adaptability and Aggregation.Adaptability ConceptsWhen it comes to exercise execution, federates need to get online quickly and be able to participate with the other federates in the federation. Typically in HLA, if federates don’t conform to the same interface, which is known as a FOM, then interoperability may not be achieved.  Federates must utilize the same FOM, among one another; to enable consistent communication with other federates.  A federate can potentially be both a producer and consumer in a common environment.  While the interface is important in SOA, in this scenario the FOM interface becomes a binding constraint.   If the interfaces, associated and used by the various federates, do not match up, then federates must often be modified to conform to a common FOM interface.  This can be a time consuming effort and does not meet the objective of a loosely coupled system.A recommended approach for supporting fast and efficient integration of a federation is for federates to be represented by a composite of BOMs.  In this manner, federates can participate in a federation, not through conforming to an interface, but by adapting its interface to other consumer and producer interfaces.  This is identified as adaptability, which can be supported by XSLT BOM Transformation Mappings (BTMs).  BTMs are created and can be used real-time during an exercise execution to allow BOMs used by one federate to conform to BOMs used by another federation.   This real-time translation of related data among models using BTMs can be applied the application and use of an XSLT processor, which is typically provided with an XML parser. Furthermore, BTM implementations, which are used to support this translation, can be stored in a common repository and then distributed and shared using web services that access such repositories.Aggregation ConceptsOn the rise within the joint warfare community is a growing number of large-scale simulation exercises which require an entity load in excess of thousands.    This can result in undue strain on the systems that are at play requiring an exorbitant amount of computational hardware, network bandwidth, and exercise management.  While scaling and filtering techniques can be applied to boost abilities, they are still limited to the available resources a system can allocate.   The concept of aggregation, which is a technique for coupling multiple entities or models into a single inclusive group, is considered a practical approach for managing large scale simulation exercises and improving overall performance.  The greatest potential benefit of aggregation is in reducing the amount of traffic distributed over the exercise network.  Unfortunately models used to represent entities and interactions have not typically been built with aggregation in mind.  The key is in separating what’s being represented to how internally it may be modeled by each federate.  In this regard it is possible for an “interface” mechanism like BOMs to be used and combined to form higher level “interfaces” representing aggregates.BOMs allows clean separation between the interface (and coupling of interfaces) and the actual models used to support the behavior identified in an interface.  Aggregation can occur, creating necessary groupings without the need to scale the behavior models of those entities that have been assimilated into an aggregate.  At the federate level, those behavior models can continue to be applied operating at full resolution within the federate that is responsible for the associated entity or entities.  Only the message information being shared among federates within a federation needs to be altered; an aggregate message reflects information regarding multiple entities (or sub-entities if it is a pattern aggregation).  A set of web-services can be defined to offer aggregation support for federations before or during an exercise execution.   BOM Aggregation FrameworkIn the context of SOA, web-services provide the logical automation framework for supporting BOM to BOM Assembly aggregation (and de-aggregation), load balancing, behavior preservation, and delivery of model-to-model transformations for supporting adaptability.   This BOM Aggregation Framework (BAF), which is currently under development for an SBIR Phase II effort sponsored by the U.S. Army RDECOM, provides a common service interface for a myriad of federates developed for different platforms and languages [8].  BAF is a design for an SOA implementation to support aggregation.  It also includes some limited support for enabling adaptability, providing execution monitoring, accessing resources available within an external digital library.  In fact, the BAF design identifies a set of services to help establish, assist and analyze an execution environment.   The principle set of services that have been defined thus far are identified in Table 3.1.3.  Keep in mind this effort is still under development and services are subject to change.Table 3.1.3 - List of BAF Web ServicesAggregation ServicesPattern Aggregation MethodsAggregateModelsToBOMAssemblyDeaggregateModelsFromBOMAssemblyExtractModelFromBOMAssemblyAppendModelToBOMAssemblyQueryBOMAssemblyForModelsInstance Aggregation MethodsAggregateObjectInstancesToBOMAssemblyDeaggregateObjectInstancesFromBOMAssemblyExtractObjectInstanceFromBOMAssemblyAppendObjectInstanceToBOMAssembly QueryBOMAssemblyForObjectInstancesLibrary/Support ServicesConnect To Resource Libraries…BOM Library MethodsGet Available BOMsSearch For Candidate BOMsFetch BOMsAdd BOMs To LibraryAdd Use History Metadata To BOMsBOM Transformation Mapping (BTM) Library MethodsGet Available BTMsSearch For Candidate BTMsFetch BTMsAdd BTMs To LibraryAdd Use History Metadata To BTMsBOM Implementation (BI) Library MethodsGet Available BIsSearch For BIsFetch BIsAdd BIs To LibraryAdd Use History Metadata To BIsMonitoring/Intercessory ServicesDataLogging SupportSettingsEnableDisableFetch LogView HistoryInstance Aggregation Load Balancing SupportAutoTrigger SettingsFederate SubscribeFederate UnsubscribeEnableDisableView HistoryTransfer Control SupportRequest TransferResponse To TransferView HistoryModel To Model Transformations (BTM)Request Transformation AssistanceResponse To TransferView HistoryStatistics / ScoreboardSettingsReset CountReset Play ClockObject Instance CountInstance Aggregation CountPlay Clock ValueTransformation Support ServicesBOM To HLA FOMBOM To HLA 1.3 FOMBOM To HLA 1516 FOMBOM To HLA 1516 Evolved FOMHLA FOM To BOMHLA1.3 FOM To BOMHLA1516 FOM To BOMHLA1516 Evolved FOM To BOMFOM To FOMHLA1.3 To HLA1516HLA1516 To HLA1516 EvolvedWhile the intent of BAF is to offer a single, unified design for establishing a loosely coupled distributed simulation environment through a set of service calls that provide load balance control through mechanisms such as aggregation, it is highly desired that multiple instances of BAF implementations can be made available to the community, which utilize and offer these services. One current BAF implementation under development is SimVentions’ BOM Aggregation Support Service (BASS).  The date for the initial release of BASS to the community has not yet been announced, but is expected no later 4th quarter ’05.  In the meantime, the community is encouraged to participate in the maturation of the BAF specification.Figure 3.1.3 provides another illustration viewed previously in Figure 1.2, but this time with HLA federates and BOMs depicted in the view, and how those federates utilize an SOA implementation of BAF.Figure 3.1.3 – BAF SOA Service and Connections with HLA Federates and BOMsMajor States of a Distributed Component Simulation EnvironmentIt’s interesting to discover how common interfaces such as BOMs and services such as the BOM Aggregation Framework can be used to support essentially three major states of a distributed component simulation environment.  These include the following:Pre-Exercise State, which requires collaborative decision, design and developmentExercise State, which requires the interoperability of live, virtual and/or constructive simulations and integration of analysis and collection tools.Post-Exercise State, which requires collaborative after action analysis and reviewPre-Exercise State SupportIt seems most time is spent supporting this state.  Requirements are captured.  Conceptual modeling and design is performed.  Development and integration of models and systems are completed.  A lot of effort is required to perform these activities; specifically in tuning a federate to conform to a FOM.The key is to optimize the time spent performing these activities for this state, not necessarily eliminating them.   What is required is reflection of the essential conceptual model within software modules, libraries and plug-in components that allow intent to be understood so that they may be discovered and reused.  For instance, the model information within a Base Object Model (BOM) is intended to provide this capability; it can be quite richer in metadata when compared to an HLA Federation Object Model (FOM).  Even still, a service oriented mechanism is needed to be able to seek candidate models that support requirements.  How can this be accomplished?It is suggested that the establishment of a UDDI portal and the connection of web service interfaces be provided to tap into available reuse library and repositories.  This provides one of the pieces that allow the realization of a semantic web.   The benefit of this is that appropriate software modules, libraries and plug-in components (including BOMs) can be found and leveraged in establishing the capability of a federate or federation.  BAF is intended to provide support for accessing and discovering BOMs during this state, as well as the aggregation models before execution, and various transformation services to allow BOM-based federates to participate in HLA FOM-focused federations.Exercise State SupportThis is where the rubber meets the road.   Federates need to get online quickly and be able to participate with the other federates in the federation.  Each federate can perform as both producer and consumer; in context of SOA they are software agents.  Therefore they must utilize an interface that other agents can use to communicate too.     Additionally, they must be able to rely on other services to help expedite the comprehension and delivery of information, and yet still maintain a loose coupling.   At this early juncture we can identify several services that can be employed to help enable an SOA balanced exercise environment.  One is the service of adaptability used to help make interfaces meaningful to one another, and the other is the service of aggregation used to help make information shared by interfaces less redundant.  Both these services are offered by the BAF design.Post-Exercise State At the end of the execution, it is time to determine the success and failures of the exercise.  It is helpful to have mechanisms in place that capture relevant information exchanged during the event.  Additionally statistics including entity load, message counts coordinated to a play clock, can provide invaluable information for the analysis. BAF is intended to provide support for monitoring an exercise and, while doing so, collecting information that can be processed to support After Action Review (AAR).  SummaryThe concept of the Service-Oriented Architecture (SOA) is not new -- it is a principle that can be found played out almost everywhere such as the analogy we provided of a DVD player or the DC power provided by batteries. SOA is about the loose coupling of integrated elements using technologies like XML, SOAP, WSDL and BOMs to achieve a level of flexibility and agility that most Object-Based and Object-Oriented (OO) architectures have failed to deliver.   In fact, the common difference between a SOA and an OO architecture is that most OO architectures, including object-based ones like HLA, bind data and processing tightly together.  They can’t be decoupled, at least not easily.  However, there are ways to evolve architectures into an SOA paradigm.  In our discussion, we have only scratched the surface regarding the steps necessary to a moving towards a Service-Oriented Architecture (SOA) for distributed component simulation environments.  However we have identified the key tenant for supporting a loose coupled simulation environment – and that is a common interface.   We have explored how BOMs provide a unique mechanism useful in supporting a common interface and how, as a common interface, federates can act as software agents playing both the role of producer and consumer. Additionally, we have identified an SOA design for distributed simulation environments, called the BOM Aggregation Framework (BAF) that provides federate support before, during, and after an exercise.  For instance, at run-time, a BAF is designed to provide federates the ability to exchange meaningful data through mechanisms such as BOM Transformation Mappings (BTMs) and aggregation techniques, which are all provided by of set of easily accessible web services based on a common interface.  AcknowledgmentsThis document was prepared based the results and findings of SimVentions in support of U.S. Army RDECOM in the areas of aggregation and load balancing for distributed simulation environments, which utilizes the application of BOMs.  The BOM specification, which is identified in this text, is based on the work produced by the SISO BOM Product Development Group (PDG).  The authors would also like to thank Steve Goss for his insights and comments provided in the final development of this paper.ReferencesTaft, Darryl K., “IBM Rolls Out SOA Plan”, April 26, 2004, eWeekCoffee, Peter, “Taking a New Tack With SOAs”, October 18, 2004, eWeekTaft, Darryl K., “Sun’s ‘Kitty Hawk’ Helps SOAs Soar”, June 29, 2004, eWeekBruno, Eric J., “C++, Java, & Service-Oriented Architectures”, September 2004, Vol. 22, Num 9, pg 40Afshar, Mohamad; Hilderbrad, Hal; Kavantzas, Nickolaos; Shaffer, Dave; Surpur, Ashwini; “Process-centric Realization of SOA”, WebServices Journal, Nov 2004, Vol 4, Issue 11, pg 34 He, Hao, “What is Service-Oriented Architecture?”, September 30, 2003,  HYPERLINK "http://webservices.xml.com/pub/a/ws/2003/09/30/soa.html" http://webservices.xml.com/pub/a/ws/2003/09/30/soa.html.Erl, Thomas, “Service-Oriented Architecture: A Field Guide to Integrating XML and Web Services”, Prentice Hall,  HYPERLINK "http://www.informit.com/articles/article.asp?p=336265&seqNum=1" http://www.informit.com/articles/article.asp?p=336265&seqNum=1Base Object Model (BOM) Template Specification, SISO-STD-003.1-TRIAL-USE-V0.9b“BOM Aggregation Framework Design Specification”, RDECOM/SimVentions, Draft, V0.2Author BiographiesPAUL GUSTAVSON is Chief Scientist and co-founder of SimVentions, Inc.   He has over 15 years experience supporting a wide variety of modeling and simulation, system engineering, and web technology efforts within the DoD and software development communities.  Mr. Gustavson has been a long-time advocate and pioneer of the Base Object Model (BOM) concept for enabling simulation composability, interoperability and reuse. He has also co-authored and edited several software development books and articles related to C++, UML and mobile computing. His e-mail address is <pgustavson@simventions.com>.TRAM CHASE is a software engineer at SimVentions, Inc. (http://www.simventions.com) and is focused on the development and integration of technology for creating innovative and engaging experiences and solutions. In support of BOMs, Tram has been the lead developer of BOMworks™, a tool used to build, edit and compose BOMs.  Tram is a graduate of Virginia Tech, with a B.S. in Mathematics (1994), and has supported a wide variety of modeling and simulation and system engineering efforts within the DoD. Tram lives in Virginia with his wife.  His e-mail address is <tchase@simventions.com>.LAWRENCE M. ROOT is co-founder of SimVentions, Inc. and has been involved in the broader modeling and simulation community since the onset of HLA. Larry has over 20 years of real-time tactical software and system engineering experience supporting Navy C4I combat systems and related analysis.  Most recently he has been involved in assisting the Navy in shifting its tactical combat system development paradigm from the current platform-centric approach to a battleforce-centric approach that supports and encourages the development of “composable components” that span missions and platforms.  As such, he supports the Navy’s contributions to Single Integrated Air Picture (SIAP), Force System Engineering Council (FSEC), and Open Architecture (OA). He has published several papers within SISO and is currently the Chair for SISO’s BOM Product Development Group (PDG). His e-mail address is <lroot@simventions.com>.KARL CROSSON is a software engineer at SimVentions, Inc. (http://www.simventions.com). In support of BOMs, Karl has been supporting the development of the BOM Aggregation Framework (BAF) design, BOMworks™ help documentation, and software development support as it relates to M&S. Karl is a graduate of Syracuse University, with a B.S. in Computer Engineering (2004).  His e-mail address is <kcrosson@simventions.com>.