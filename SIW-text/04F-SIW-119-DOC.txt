Using Java Web Services to Interface with Real-World C4I SystemsEugenio RodriguezUniversity of Central Florida/ Raytheon Co2603 Challenger Tech Court, Suite 150, Orlando Fl, 32826United States of AmericaABSTRACTWith the development of new applications and programming interfaces that allow for faster and better connectivity, the need to modify and update existing simulation interfaces becomes highly desirable.  Many of the Command, Control, Communications, Computers, and Intelligence Surveillance and Reconnaissance (C4ISR) systems presently deployed, are being modified to be Web enabled.  The Theater Battle Management Core System (TBMCS) used by the Air Force, is one of those systems that will be Web enabled and will be the C4ISR System that will be used as an example of how Web technologies can be applied as an interface to real-world equipment for simulation systems.  Using the capabilities of the World Wide Web (WWW), and specifically Java Web Services, applications can be developed to interact and stimulate C4I systems. KEY WORDS:  TBMCS, Web Services, C4ISR, Air Force, Simulation.1. IntroductionPresently the TBMCS applications operate under Unix-based versions.  This makes accessibility to the information difficult and very constraint.  For simulation purposes, the process of obtaining the Air Tasking Orders (ATO) and the Airspace Control Orders (ACO) is especially difficult and possibly hazardous to the C4ISR equipment, since the data has to be obtained by directly accessing the system’s database, and this could damage or corrupt the data.This paper will discuss the changes to the TBMCS to make it Web-enabled, and how this can be used to make the integration of C4ISR systems into existing and future simulation systems easier and safer.  For the sake of comparison to an existing simulation system that uses a TBMCS Adaptor, the Joint Simulation System (JSIMS) will be used as an example..2. C4I WEB SERVICESThe following figure illustrates the operational Command and Control cycle for the TBMCS.  Starting with the “Strategic Planning” and finishing with the “Reporting & Analysis”.  Just as in the real world, any simulation system has to be able to implement and functionally accomplish all of the parts of the cycle.  However, in existing simulations, which contain a TBMCS, the first three parts, “Strategic Planning”, “Air Battle Planning”, and “Mission Preparation” are completed using the actual TBMCS.  The “Mission Execution” and the “Reporting & Analysis” are accomplished by the simulation system. . SHAPE  \* MERGEFORMAT Figure  SEQ Figure \* ARABIC 1. Operational Command and Control Execution Cycle.The JSIMS’ TBMCS Adapter is a High Level Architecture (HLA) federate designed to provide the simulation the “Mission Execution” and the “Reporting & Analysis” functionality using a real world TBMCS (Figure 2).  Following are some of the functional threads that the TBMCS Adapter accomplishes.Generates a series of scenario files from the Scenario Generator (Simulation information) database.  These files will contain all the necessary information, such as aircraft types, airbases, and weapons that are supported by simulation.  This information is compared and if necessary, mapped, to match the real-world data.Extracts Air Tasking Orders (ATO) and Air Control Orders (ACO) information directly from the TBMCS Air Operations Database (AODB). Sends or publishes the ATO and ACO to the simulation after comparing the scenario data.Provides feedback to TBMCS using email messages and/or database (TBMCS/AODB) updates in the form, for example, of takeoff times and landing times.Figure  SEQ Figure \* ARABIC 2. Existing TBMCS Simulation Interface.The Air Battle Plan (ABP) data needed by the TBMCS Adapter to construct the ATO and the ACO is obtained by connecting directly to the AODB.  This information is then stored in a separate database that will be used by the Adapter to send the ATO and ACO information to the simulation.  Another use for the Adapter’s database is to store the differences between the simulation and real-world nomenclature, for example, in the simulation an F16 fighter might be called F16-C and in the real-world (TBMCS) is called F16C; therefore, in order for both system to interface correctly, the data is mapped and stored in the database.With the new Web-Enabled TBMCS, some of the above mentioned threads and/or process will need to be modified.  The existing TBMCS Adapter will have to be redesigned to implement and use Web Services.  The World Wide Web Consortium (W3C, www.w3.org/TR/ws-gloss) describes Web Services as follows: “A Web service is a software system designed to support interoperable machine-to-machine interaction over a network. It has an interface described in a machine-processable format. Other systems interact with the Web service in a manner prescribed by its description using Simple Object Access Protocol protocols (SOAP)-messages, typically conveyed using Hypertext Transfer Protocol (HTTP) with an Extensible Markup Language (XML) serialization in conjunction with other Web-related standards”.  SOAP messages define the structure of an XML document, rule, and mechanisms that can be used to enable communications between applications ([3] page 107).[1] New Web services technologies give organizations the flexibility to integrate information silos. Web services are loosely coupled software components that interact with one another dynamically via standard Internet technologies. Developers can quickly and easily use Web service enable application functionality by applying a thin veneer of code without changing the underlying application. All of these Web services can interact over both corporate networks and the Internet, making it easy for organizations to integrate services within their own organization or with those of customers, suppliers, and partners outside the organization.Modifying the existing TBMCS Adapter to be Web-Enabled will increase the effectiveness and efficiency of the Adapter when used with different simulation systems. In order to accomplish this, the TBMCS Adapter will be turned into a Web Application. According to Sun Microsystems [2], a Web application consists of Web components, static resource files such as images, and helper classes and libraries. The Web container provides many supporting services that enhance the capabilities of Web components and make them easier to develop. However, because it must consider these services, the process for creating and running a Web application is different from that of traditional stand-alone Java classes. The process for creating, deploying, and executing a Web application can be summarized as follows: Develop the Web component code.Develop the Web application deployment descriptor.Compile the Web application components and helper classes referenced by the components.Optionally package the application into a deployable unit.Deploy the application into a Web container.Access a URL that references the Web application.The JSIMS’ TBMCS Adapter was developed using Java; therefore, Java Web Services would be used to create the Web application. [3] Java Web Services Application Programming Interfaces (API) are designed to integrate different Web-enabled applications.  Using those APIs and existing standards, such as the XML and SOAP, allows the used of Internet browsers (although browsers are not necessary to utilize Web services) as the window for applications to communicate and exchange information.  An implication of this is that systems or applications can communicate regardless of the individual network or operating system.  The following table (Table 1.) shows some of the APIs and applications related to Java and XML.  This APIs will be used to modify the TBMCS Adapter in order to interface with the TBMCS.JAVA/J2EEXMLJavaServer Pages (JSP)Document Object Model (DOM)ServletsExtensible Stylesheet LanguageEnterprise JavaBeans (EJB)Transformations (XSLT)Java Database Connectivity (JDBC)XML SchemasJava Transaction API (JTA)Simple API for XML (SAX)Java Naming and Directory Interface (JNDI)XSQLJava Message Service (JMS)Internet Data Access Presentation (IDAP)Java Authentication and AuthorizationXML Path Language (XPath)Service (JAAS)Simple Object Access Protocol (SOAP)Web ServicesWeb Services Description Language (WSDL)Table  SEQ Table \* ARABIC 1. Examples of JAVA and XML APIs and Applications related to Web Services.[4] The use of COTS (commercial off the shelf) standard XML (extensible markup language) and web services technologies for current and future C2 (command and control) systems is showing great promise as a way of reducing the extensive number of military proprietary interfaces and data formats, as well as improving integration and interoperability. The following are five items or issues that have direct implications to the implementation of Web Services: The XML family of technology including select elements of web services; COTS tools for XML and web services including native XML databases; The current application of this technology in several domains/mission areas including maneuver, intel, and MTI (moving target indicator) from Army ABCS (battle command system) and FCS (future combat system) as well as USAF TBMCS (theater battle management core systems) and joint message formats USMTF (message text format) and JVMF (variable message format); The variety of existing interfaces and data exchange formats; and The potential of XML to reduce these formats, achieve some data unification, and advance interoperability and integration for the joint forces via program insertions, developer networks, and e-gov/e-communities.Taking under consideration the previously mentioned items, the following are some of the changes that will be implemented in order to modify the TBMCS Adapter to interface with the new TBMCS Web Services:A Graphical User Interface (GUI) will be created to run as a Browser Client.Web related code would be added in order to access the TBMCS Web Services and make the TBMCS Adapter into a Web Application.The ABP data will be obtained from XML files that are part of the TBMCS Web Services.  This means that the data will not be extracted directly from the AODB.The TBMCS Adapter’s database could be eliminated by storing the necessary data in XML files.  If mapping between the simulation scenario and the real-world TBMCS ABP data is necessary, this can also be stored in XML files.Additional functionality can be added into the TBMCS Adapter, such as the WebMap to make it a more complete application.Figure 3 shows the interface between the TBMCS Adapter and the Web-Enabled TBMCS.  The present interface to the simulation will not have to be modified since it will remain an HLA connection, and the type of data being published or subscribed to will not change. SHAPE  \* MERGEFORMAT Figure  SEQ Figure \* ARABIC 3. Web Enabled TBMCS Simulation Interface.3. ConclusionModifying the TBMCS Adapter will allow the simulation systems it interfaces with to take advanted of more functionality available from the new Web-Enable TBMCS.  It will also make the Adapter more adaptable flexible to changes.The following are some of the advantages of using Web Services [3]:Interoperable – Connect across heterogeneous networks using ubiquitous web-based standardsEconomical – Recycle components, no installation and tight integration of softwareAutomatic – No human intervention required even for highly complex transactionsAccessible – Legacy assets & internal applications are exposed and accessible on the webAvailable – Services on any device, anywhere, anytimeScalable – No limits on scope of applications and amount of heterogeneous applicationsAdvantages of creating a TBMCS Adapter Web application:Create a more practical GUI.Possibly, eliminate the necessity of having a dedicated database.  This will simplify the code and lower the cost of the application dramatically.Allow the application to be deployed in any platform.By utilizing some of the new Web Services provided by the TBMCS, the Adapter can become a more complete interface tool.It would allow the Adapter to be used in a Network Centric Command and Control Simulation Architecture. [5]Some of the limitations of the modified TBMCS Adapter Web application are as follows:Accessibility to a real-world Web-Enabled TBMCS for integration and test.  The new systems will be deployed to only a few sites for initial evaluation, which could delay the development of a TBMCS Adapter Web application. The fidelity and the purpose of the simulation will dictate the type of information that could be sent and received by the TBMCS Adapter.Since the TBMCS Adapter was developed to be used with HLA, in order to used it under different architectures, a gateway or additional code would have to be integrated into the Adapter.ReferencesProceedings Papers:[2] Sun Microsystems, Eric Armstrong, Jennifer Ball, Stephanie Bodoff, Debbie Bode Carson, Ian Evans, Maydene Fisher, Scott Fordin, Dale Green, Kim Haase, Eric Jendrock, The Java Web Services Tutorial, December 17, 2003.[4] Joseph J.  Molitoris Dr., "Use of COTS XML and web technology for current and future C2 systems", MILCOM 2003 - IEEE Military Communications Conference, no. 1, Oct 2003 pp. 221-226[5] John J. Daly, Dr. Andreas Tolk, “Modeling and Simulation Integration with Network-Centric Command and Control Architectures”, 2003 Fall Simulation Interoperability Workshop.Journal Papers:[1] Above All Software, Beyond Integration: Assembling Business Solutions from Web Services, WebServices Journal Whitepapers (http://sys-con.com/webservices/), 2003, 6.Books:[3] Ramesh Nagappan, Robert Skoczylas, Rima Patel Sriganesh, Developing Java Web Services (R.E. Moore, Interval analysis (Indianapolis, Indiana: Wiley Publishing Inc., 2003)Strategic PlanningAir Battle PlanningMissionExecutionReporting & AnalysisMissionPreparationTBMCSDatabasesAODBISDSTAPDBNetworkInterfaceSIMULATIONTBMCS ADAPTERBrowserClientWeb ServicesPublic Information ServicesACO Weapon TargetATOWeb ApplicationsMapsWebMapDBTBMCS ADAPTERSIMULATIONTBMCSNetworkInterfaceTAPDBISDSAODBDatabases