HLA Federation Design for Dismounted Infantry SimulationMark A. ThomasU.S.Army Research LaboratoryComputational and Information Sciences DirectorateAberdeen Proving Ground, MD 21005-5067markt@arl.army.milKeywords:Dismounted Infantry Simulation, Federation, Dynamic Terrain, Real-Time Simulation, Distributed Interactive Simulation, High Level Architecture, Military Operations In Urban Terrain (MOUT)ABSTRACT:  Dynamic terrain is a continuing problem for distributed simulations.  Disparate databases, computer architectures and visual systems add to the complexity of distributing dynamic terrain changes in real time.  The Army Research Laboratory has been developing algorithms for dynamic terrain for use in Dismounted Soldier simulation and visualization.  These algorithms provide realism to training applications, and are used in the Virtual Environments for Dismounted Soldier Simulation, Training, and Mission Rehearsal Science and Technology Objective.  This paper will present a concept for the development of a flexible, open architecture for distributing dynamic terrain changes in distributed, real-time simulations. 1. IntroductionCreating realistic simulations for Dismounted Soldier simulation presents many challenges.  High terrain resolution is required for micro-terrain effects which affect visibility, cover and concealment, and lines of sight.  Light effects from atmospherics are important in addition to time of day.  The terrain changes due to battlefield events such as weapons detonations and collisions.  Group training tactics require distributed processing, correlated terrain databases, and terrain databases correlated over time.The Army Research Laboratory (ARL) is developing technologies to create rich virtual environments for Dismounted Soldier visualization [1].  These technologies include algorithms to compute and display terrain cratering, polygon decimation, terrain shading due to clouds, and real time shadowing.  The architecture of the system requires all components to run on a single workstation, tightly integrated to create the real time visual display.  This approach works well when the simulation platforms are homogeneous. But it fails when dissimilar systems are used in a simulation environment.This paper will describe the current system, its strengths and weaknesses, and present the new architecture.  The new architecture will be used as a component in the Virtual Environments for Dismounted Infantry Simulation, Training, and Mission Rehearsal Science and Technology Objective.2. BackgroundThe Dismounted Soldier community is using a mixture of PC-workstations and Silicon Graphics workstations for visualization.  These systems include the PC-based Reality By Design Soldier Visualization System (SVS), the PC-based RealGuy system developed by Veridian, Inc., and the Silicon Graphics based Dismounted Infantry Simulation (DISim) developed by ARL.  These simulators are being used to investigate Dismounted Soldier simulation issues such as simulation fidelity, team training, man-in-the-loop issues, and dynamic environments.  In the past, UNIX workstations were used exclusively, running the Naval Postgraduate School NPSNET.  With the addition of the PC-based systems, the need arose to develop robust standards which all computer platforms can use to modify runtime databases in real time.The ARL is developing a distributed system modeled after the DTSim/DTScribe developed by Lockheed-Martin for the Synthetic Theater of War (STOW) program.  Called the Dismounted Infantry Simulation Federation Object Model (DISimFOM), it will use the High Level Architecture/Run-Time Infrastructure (RTI) to distribute terrain changes.  This technique promises to decouple the computational geometry algorithms from the rendering engines.  Using a Federation Object Model (FOM), terrain changes will be transmitted to interested simulators in a graphics independent format.  The receiving simulator can then incorporate the new terrain information in the format of its choice.3. Current ArchitectureARL researchers develop dynamic terrain algorithms on a Silicon Graphics workstation.  Mathematical and geometric algorithms are written in the C++ programming language.  All algorithms use object oriented programming techniques.  The graphics library used is the Performer Graphics library, a high-performance rendering library for SGI platforms.The ARL dynamic terrain algorithms are developed and tested in a simulation test-bed called the Dismounted Infantry Simulation (DISim)[1].  These algorithms include polygon tesselation for inserting holes into polygons, a terrain shader to shade terrain based on overcast clouds, and an object shadower.  The algorithms are integrated, debugged, and benchmarked in the DISim for real time performance.  When this process is completed, the algorithms are distributed to STO partners for integration into their simulators.This method works well when the simulation systems use the same or similar graphics libraries and software architecture.  However, most of the dismounted infantry simulators are hosted on PC-based platforms.  This is a problem for integration, as SGI developed algorithms, no matter how object oriented, must be tweaked by the PC-developer to work properly.  For example, software developed using Performer must be modified to work with OpenGL.  And algorithms which run in threads on SGI’s using pthread() must be modified to use the thread mechanism in Windows95/98/NT.  Figure 1 shows the current dismounted infantry simulation suite.Figure 1: Current Dismounted Soldier Simulation Network Architecture3.1 Dynamic Terrain ArchitectureCurrently, computations of dynamic terrain changes are based on the Detonation Protocol Data Unit (DetPDU)[5].   The DetPDU contains information about the type of munition, the velocity, and the point of impact on the object.  Using this information, an algorithm computes the damage.  If the result of the damage computation is a breach in a structure, a hole is inserted into the geometry to simulate a breach. This algorithm must be run on every simulator that requires display of wall breaches.   It works reasonably well for homogeneous simulators on a network, but has some problems.  First, DIS protocol does not provide reliable message transport; therefore all simulators are not guaranteed to receive the DetPDU.  If a simulator does not receive a DetPDU, it will not reflect the damage to the structure, and the terrain databases will not be correlated.  Second, differences in operating systems and programming interfaces require porting, integrating, and some modification of the software to work on all platforms.  This introduces potential programming errors which may adversely affect runtime performance.  The current dynamic terrain computation is shown in Figure 2.Figure 2:  Current Image Generator ConfigurationARL is seeking a more robust network solution to address these problems.  The Synthetic Theatre Of War (STOW) Advanced Concept Technology Demonstration (ACTD) demonstrated dynamic terrain in a large scale simulation.  The architecture and lessons learned from that exercise offer a potential solution to the current stove-pipe architecture.  3.2 Lockheed-Martin Dynamic Terrain and Objects (DTO)The Lockheed-Martin developed Dynamic Terrain and Objects (DTO) is a network architecture developed for the Defense Advanced Research Projects Agency (DARPA) Synthetic Theatre Of War 97 (STOW97).  STOW is a major application of the DARPA initiative in Advanced Distributed Simulation.  The STOW initiative is the development and demonstration of technologies to integrate virtual and constructive simulation from the Individual Combatant to Joint Task Force levels.  The DTO is the dynamic terrain component of the simulation architecture.  DTO utilizes distributed protocols, multi-state objects, polygonalization, and runtime database modification serialization to compute, distribute, and maintain a consistent terrain database across all simulators in an exercise [2]. The DTO is comprised of separate components.  These components include Dynamic Terrain Simulators (DTSim), Dynamic Terrain Scribe (DTScribe), Dynamic Terrain Agents (DT Agents), Dynamic Terrain Repolygonization (DT Repoly), and the Dynamic Terrain Database.  These components work together to compute, distribute, and update client simulators on the network. DTSims compute the actual environmental effects.  The effects include global weather effects on the terrain, collateral damage to structures, and damage due to weapons detonation.The DTScribe is responsible for recording and distributing all changes to client DT agents.  The DTScribe sends Environmental Change Notices (ECN) to client applications when they enter the network to initialize their databases to the current environmental state.  The DTScribe arbitrates ECNs and sequences them for transmission to clients.The DT Repoly service converts high-level parameterized ECNs into ECNs containing complete geometry and attributes for all databases being modified by DT Agents.The Dynamic Terrain Database is used by the DT Repoly and DT Sim to make DT changes.  It is an authoritative representation of the synthetic environment.Berkeley and Muller [3] recommended enhancements to the Real-time Platform Reference FOM based on lessons learned from the DTO STOW 97 exercise. These suggestions provide the data interchange required to distribute environmental objects, lanes, gridded fields, markers, minefields, and mines.  The DTO architecture was tested during the STOW 97 exercise.  It is scaleable, robust, and well documented [2].  This architecture is the basis of the Dismounted Infantry Simulation FOM.4. The Dismounted Infantry Simulation FOM (DISimFOM)The DISimFOM is modeled after the DTO STOW 97 FOM.  It will utilize the architecture of the DTO, with a manager agent and environmental generators.  The DTScribe will manage environmental updates, and DTSims will compute dynamic effects.  The DTSims will be dynamic terrain models currently resident in the DISim software.  The DISim models will be upgraded to utilize the services of the DISimFOM.The DISimFOM will be an extension of the STOW 97 FOM.  The STOW 97 FOM includes extensions to the RPR FOM, providing objects for environmental entities, gridded objects such as minefields and berms, and mines.These objects, however, do not have sufficient fidelity to support the capabilities of the DISim models.  For example, wall breaching requires a repolygonalization of the entire wall surface, and this must be transmitted to all visualization agents on the network.  The DTO “environmental” object contains attribute data for the entity type, the model used to represent the entity, active or inactive status, and model-dependent data regarding state and geometry.  This object definition is adequate for a system which uses multi-state objects, such as the DTO.  The DISim, however, modifies the polygons of an object in real time to display the damage [4].  It is a higher fidelity representation of the actual damage to a structure, versus the multi-level damage states used in the DTO.  Therefore, the DISimFOM will extend the DTO “environmental” object with attribution for polygon repolygonization.  The DTO “gridded_field” object contains attributes for grid size and orientation, the coordinate system used, the environmental entity type, the updated environmental state, and indexing information to keep track of multiple pieces of the update.  The DISim computes terrain changes due to weather effects using the Weather and Atmospheric Visualization Effects for Simulation (WAVES) model [6].  The output of the WAVES model provides the data necessary to modify terrain color.  The “gridded_field” object must be updated to include coloring information for the grids, as these will change due to cloud shading of the terrain.  Figure 3 shows the proposed architecture.Figure 3:  DISimFOM Network ArchitectureThis architecture mirrors the DTO architecture.  It will require modification of the client simulations (SVS, RealGuy, DISim).  The modifications required will be to subscribe to the “environmental” and “gridded_field” objects, and subscribe to the “ecn” interaction.  Each simulator will be responsible for receiving the data, and updating its internal graphical database to reflect the changes.5. ConclusionLeveraging the advances of the STOW 97 ACTD affords an effective means to enhancing the architecture of the Dismounted Infantry simulation community.  Utilizing a tested and proven capability will provide a favorable outcome with minimal risk.The proposed architecture will require some modifications to existing simulators.  Non-native HLA simulators must be upgraded.  Dynamic scene graphs must be developed.  However, these changes will result in a more robust and scaleable architecture than the current system.The ARL DISim is being upgraded to implement the current architecture.  The ARL Hole Library [4] is being extracted from the DISim and made a standalone Federate.  The standalone federate will compute effects on structures and distribute the changes using the “environmental” object and the “ecn” interaction.  Code to process the federation data into a scene graph will be included.The new architecture will provide connectivity and functionality for Dismounted Soldier simulation in a platform-independent architecture.6. ReferencesThomas, Mark, Neiderer, Andrew, “Transmitting Dynamic Terrain Changes In Real-Time Distributed Simulation”, Paper Number 98F-SIW-096, Proceedings of the Fall 1998 Simulation Interoperability Workshop, Orlando, Florida, September 1998.Miller, Dale D., et al. “Dynamic Terrain and Objects in the STOW 97 Advanced Concept Technology Demonstration using the High Level Architecture”, Paper Number 98S-SIW-161, Proceedings of the Spring 1998 Simulation Interoperability Workshop, Orlando, Florida, March 1998.Berkeley, Joseph J, Muller, Pete, “Enhancing the RPR FOM To Include STOW 97 Capabilities”, Paper Number 98F-SIW-200, Proceedings of the Fall 1998 Simulation Interoperability Workshop, Orlando, Florida, September 1998.Neiderer, Andrew, Thomas, Mark, Pearson, Richard. “A Fracturing of Polygonal Objects”. ARL-TR-1649, U.S. Army Research Laboratory, Aberdeen Proving Ground, MD, April 1998.IEEE Computer Society, “Standard for Distributed Interactive Simulation – Application Protocols.” IEEE Standard 1278.1-1995, Institute of Electrical and Electronics Engineers, Inc., NY, 1995.Gillespie, Patti, Wetmore, Alan, Ligon, David, “Weather and Atmospheric Effects for Simulation, Vol. 1.”  ARL-TR-1721-1, U.S. Army Research Laboratory, Adelphi, MD, September 1998.Author BiographyMARK THOMAS is a General Engineer at the U.S. Army Research Laboratory, Aberdeen Proving Ground, MD.  He is the team leader of the Virtual Technologies Team and represents the ARL on a number of Agency and Command level simulation working groups.  Mr. Thomas has been active in real-time visual simulation for seven years and has published papers on real-time geometry modification methods.  He holds a BS in Aerospace Engineering from Virginia Tech.