ENGENA Simulation Environment GeneratorBurton GrippinDavid CallowayNova TechnologiesAn Employee Owned Engineering Company429 S. Tyndall Pkwy, Suite LPanama City, Florida 32404(850)914-0002Keywords:HLA, environment, weather, NavaidsABSTRACT: Participants in Distributed Interactive Simulation (DIS) and High Level Architecture (HLA) exercises should interact in a common simulation environment. However, most individual simulators in distributed exercises currently simulate their own environment, including air temperature and pressure, wind, visibility, navigational aids, etc. These conditions can have a dramatic effect upon the performance of the simulated vehicles and upon the trainees who operate them. When simulated separately, there are no guarantees that trainees in the same exercise are operating under the same conditions.   For realistic training, all participants in an exercise should be assured that they are operating within the same environment. ENGEN is a simulation environment generator that is being developed by Nova Technologies to provide a solution to this problem. ENGEN is being developed and installed into the Special Operations Forces Coordination Cell as part of the Advanced Distributed Simulation Technology II program. ENGEN is designed using a Client-Server approach, with one ENGEN server providing weather and Navaid data for the entire network. ENGEN clients subscribe to the server data and calculate the specific weather conditions at the position of the local client simulation.  The local environment is thus derived from the global data broadcast by the server.  The ENGEN client then provides this local environment data to its host.ENGEN uses Simulation Middleware Object Classes (SMOC), developed by the Naval Air Warfare Center Training Systems Division (NAWCTSD),  as middleware for connecting to an HLA or DIS network. This paper discusses the need for a common simulation environment, provides a description of ENGEN and it’s current capabilities, and describes the client server mechanism ENGEN uses to provide individual simulations with local data derived from global sources. Introduction Participants in Distributed Interactive Simulation (DIS) and High Level Architecture (HLA) exercises need a common simulation environment. However, most individual constructive and virtual simulations in distributed exercises currently simulate their own environment, including wind, visibility, and Navigational Aids (Navaids). These conditions can have a dramatic effect upon the performance of the simulated vehicles and upon the trainees who operate them. When simulated separately, there are no guarantees that trainees in the same exercise are operating under the same conditions.Current Environmental InconsistenciesWeather InconsistenciesMost virtual simulations are controlled by an Instructor Operator Station (IOS) operator, who is responsible for configuring a simulation to meet the requirements of a particular training exercise.  Each individual simulation in a training exercise typically has its own IOS operator and its own database of weather conditions.  The IOS operators at each facility select weather conditions from their individual simulator databases as part of an Initial Conditions (IC) set, and may modify these conditions as the simulation progresses.  Presumably, the exercise plan will establish the desired set of weather conditions and the IOS operators at each facility will configure their simulators to match the information in the plan.  The IOS operators have the luxury of operating in a non-real-time environment before the simulation actually gets underway.  So, the IC sets generally contain the correct set of data and many simulated exercises start off with similar weather conditions.  However, even in this situation differences are likely to occur due to the different levels of fidelity supported by the various simulations.As the simulation progresses, it becomes more and more likely that weather conditions will differ from one simulator to the next.  During the heat of battle, the IOS operators may forget to update the weather conditions at the same time.  When discrepancies are noted, the IOS operators will then update their local simulations.However, at this point some damage has already been done in the training exercise.  Trainees mentally project into the training environment and their minds are (somewhat) fooled into believing that they are in the actual situation being modeled.  This experience is similar to the experience one gets reading a good novel, when you experience the situation at a much deeper level than just reading the words.  However, an outside distraction can pull you “out of the book” and back into the real world.  Likewise, noticing something like a difference in weather conditions reminds a trainee that he is in a simulator and pulls him out of the virtual world he had been participating in and places him back in the real world.  Even after the problem has been corrected, it can take some time before the trainee is mentally re-immersed into the training situation.  This, of course, detracts from the realism of the exercise and makes it more difficult to achieve the training objectives.Sometimes, a discrepancy in weather conditions may not even be noticed by the IOS operators or trainees. This can also cause problems that detract from the realism of the exercise.  For example, if there is supposed to be dense cloud cover or fog at a particular place and time in the simulation, and one of the simulators does not properly simulate this condition, that simulator will be able to see buildings, targets, and other participants that would otherwise not be visible.  This would provide one trainee with an unfair advantage in the simulation, and again detract from the training objectives.Navaid InconsistenciesCurrently, a typical simulation will use data from a local database to drive it’s Navaid instrumentation. This data may have been read by a software tool from the Digital Aeronautical Flight Information File (DAFIF) or a Jeppeson database, or it may have been manually entered using some other source of known Navaid transmitters. In any case, the data typically represents the Navaids known by the given source at a certain point in time. These Navaid parameters control the simulator instruments which are then used by the pilot for navigation. When two or more simulators participate in a distributed exercise, it is not unusual for different Navaid data to be used in each simulation. As a result, aircraft flying in formation, under separate simulations, may have conflicting information driving their instruments. Likewise, one simulator in an exercise may simulate the presence of Navaids that other simulators do not. This situation can detract from the training. The existence of different Navaids, located at different positions or transmitting on different frequencies, can be confusing and distracting  for trainees.  These situations can have the same detrimental effects as those described in the weather example.The ENGEN Solution The Simulation Environment Generator (ENGEN) is being developed by Nova Technologies to provide a solution to the environmental inconsistencies that exist among disparate simulations.  ENGEN consists of a single server and multiple clients that are connected into a DIS or HLA network exercise.  The ENGEN server generates global simulation environment parameters to be used by all participants in the exercise. The ENGEN clients receive the environment parameters from the network, perform selective processing to convert the global descriptions to accurate local data, and provide the appropriate data to their local simulations.  Since only one source exists for all parameters, all simulators will operate with the same environmental information. ENGEN Client-Server ArchitectureFigure 1 illustrates the ENGEN client-server architecture.  This architecture consists of a Graphical User Interface (GUI), weather and Navaids databases, the ENGEN server, the HLA network, the ENGEN clients, and the host simulators.The GUI provides a set of forms for the user to enter the parameters needed to define a weather environment and configure the location and attributes of the ENGEN Navaids.  The GUI also provides a mechanism for viewing the current state of the environment during run time.  Figure 2 shows the main screen of the ENGEN GUI.  This figure shows the tab for weather air data parameters.  Other tabs contain the relevant parameters for clouds and precipitation, winds, storms, microbursts, Navaids, and EW Threats (an ENGEN extension which is not discussed in this paper).The weather and Navaids databases are populated by the ENGEN GUI and are accessed by the ENGEN server during run time.  The ENGEN server is responsible for publishing the global weather class, storm cell and micro-burst classes, and the NAVAIDS class over the 	HLA network.  A subset of this data that matches the IEEE 1278.1 standard set of DIS PDUs can be transmitted to support a DIS exercise.  The information an ENGEN server publishes is obtained from the weather and Navaids databases.  Weather information consists of:A time sequenced series of sea-level temperature, pressure, humidity, and visibility.Cloud and precipitation parameters.Wind speed and direction at various altitudes.Storm cell locations, intensities, and movement direction and speed.Micro-burst cell locations, intensities, and movement parameters that are used to introduce wind shear at specific locations in the scenario.  Navaid data published by the ENGEN server consists of the Navaid location and receiver/transmitter parameters (channel, frequency, power, etc.) for each Navaid defined in the database.Each ENGEN client subscribes to the global weather and NAVAIDS data and also monitors the state of its associated host simulation.  All host-related state information is obtained from the network itself; a back-channel is not used. The clients calculate weather conditions appropriate for their associated host simulation based on the global data provided by the ENGEN server, the current time of day, and their host simulator position.  For example, the current temperature and pressure is based on the own-ship altitude and the sea-level temperature for the current time of day.  The client interpolates weather conditions between the specific points in time published by the ENGEN server.  The clients also determine the current location of each storm cell and wind shear micro-burst cell as they track across the database.  The clients provide a high resolution estimate of the instantaneous wind intensity and direction at the location of the host simulator based on the surrounding wind layers, turbulence, and wind shear parametrics associated with any micro-burst that is close enough to affect the host simulator.  The wind data is a good example of information that can change dynamically at a relatively high rate.  Wind speed and direction with turbulence and shear is essentially random data over any short time interval.  This information could not be transmitted directly over the HLA network without consuming an unnecessary  amount of network bandwidth and introducing unwanted latency into the system.  However, the ENGEN clients can calculate the current wind conditions based on the global parameters with update rates that coincide with the host simulator frame rate (e.g. 16Hz – 64 Hz updates).  This enables the host simulator to experience dynamic winds and wind shear conditions that are realistic without consuming unnecessary network bandwidth.Navaid information is based on the global ENGEN data, host simulator position, and other state information provided by the host simulation Navaid receiver channel and frequency settings (which the host simulator publishes to the HLA network).  Each ENGEN client communicates information to its associated host simulator over a high-speed, low latency interface (e.g. reflective shared memory or a Direct Memory Access (DMA) interface).  This enables the ENGEN client to send updates at a rate that matches  the frame rate of its host simulator.The host simulators retrieve some information directly off the HLA network (e.g. entity-state information for other entities participating in the simulation) as well as the high-rate data provided by the ENGEN clients.  The host simulators are also responsible for publishing their own entity-state data (for use by all interested participants), and Navaid receiver settings (primarily for use by their ENGEN client).ENGEN DIS/HLA CompatibilityENGEN is able to operate in both DIS and HLA environments by using the Simulation Middleware Object Classes (SMOC) developed by the Naval Air Warfare Center Training Systems Division (NAWCTSD).   The SMOC middleware provides an Application Programming Interface (API) that shields an application from the intricate details of the networking environment.  This underlying implementation of the SMOC middleware supports the Realtime Platform Reference Federation Object Model (RPR FOM) for HLA interactions as well as DIS Protocol Data Units (PDUs) compatible with the IEEE 1278.1 standard. The FOM used by this federation is based on the RPR FOM, with extensions to support weather and Navaid parameters.  The open architecture of the SMOC software enabled us to add the necessary objects and interactions to the SMOC kernel to support the modified FOM.Weather EnvironmentThe approach ENGEN uses to specify weather is designed to introduce specific types of weather conditions into a training scenario.   This approach is best used in relatively short-duration exercises when one or more aircrews are to be trained to react to a particular weather condition.  For example, to train an air crew to react appropriately to wind shear conditions, the IOS operator might station a micro-burst cell near the end of a runway and instruct the student to perform a takeoff or landing.  This can also be used to let a team of students in individual simulators react to formation flying in the presence of turbulence or wind shear.  The ability to “force” a particular weather condition to be present at a particular place and time in the scenario can be used as described above to produce a training condition that is likely to be experienced by the student.  Wind shear associated with a micro-burst cell near the end of a runway is one example; targets located in fog or under a defined level and intensity of cloud cover or precipitation is another.  The disadvantage of this approach is that it is more difficult to develop weather scenarios that are realistic for long-duration exercises.  A possible extension to the ENGEN architecture would be to extend the user interface and weather modeling capabilities to include a sophisticated weather model that can “grow” storms and create realistic weather conditions based on a reasonably small set of input parameters. NAIVAIDs EnvironmentENGEN is designed to parse a DAFIF file for Navaid data, and store this data directly into a local ENGEN database. When the ENGEN server is  started, it reads the latest DAFIF file and uses this data to replace the existing Navaid data, allowing the database to be kept current with the latest known Navaids.  ENGEN also has a JAVA front-end GUI that allows additional Navaids to be easily added or edited.  A similar database translator could be configured to parse a Jeppeson database of Navaids.Exercise ParticipationOnce the database is populated with Navaid and weather data, ENGEN will be ready for participation in a DIS or HLA exercise. Before starting a DIS exercise, the user interface allows the exercise staff to identify the exercise ID, site ID, and application ID for ENGEN.  For an HLA exercise, the user interface allows the definition of the exercise name, federation name, and federation object model (FOM).  In both cases, IP addresses and port information will be defined. Integrating ENGEN into an Existing Simulation ArchitectureThe ENGEN server runs on a stand-alone Personal Computer (PC) with a connection to the DIS or HLA network.  Each client also runs on a PC.  It is possible to host both the server and client on a single PC.  This approach might be taken when ENGEN is used to provide a synthetic environment for a simulation that is otherwise stand-alone (i.e. no other hosts are participating in the exercise).  Currently, the ENGEN server and clients run under Windows NT.  A Linux version is also under consideration.In addition to adding the ENGEN clients and server to the network, it is also necessary to modify the existing simulations themselves.  In most cases, the ENGEN data replaces information that was previously provided by the simulator’s host software.  So, this host software must be modified to replace the internally generated information with the corresponding information provided by ENGEN.  In most cases, the IOS is extended to provide an option to use either the internal source or an external (i.e. ENGEN) source for weather and Navaids.The following two sections elaborate on these changes based on whether ENGEN is used in a DIS or HLA network.Impact On Existing DIS-Compatible SimulationsThe Navaids PDU is part of IEEE 1278.1a DIS Interface Specification, and ENGEN uses this PDU to transmit Navaid data over the network. In order to make use of ENGEN in a DIS exercise, existing simulations may require updates to be capable of processing the Navaids PDU. The necessary changes would involve updating the DIS Interface Unit (DIU) to accept Navaid PDUs from the ENGEN client, and pass the pertinent data to the host simulation. Also, the host simulation would need to be updated to bypass processing of locally simulated Navaids, output Navaid receiver settings, and to look for inputs from the ENGEN client for updated navigational information. The host simulation is responsible for calculating degradation effects of distance and atmospheric conditions on the Navaid emissions, as is currently done for locally simulated Navaids.Impact On Existing HLA-Compatible SimulationsENGEN includes a Simulation Object Model (SOM) that defines the structures for the environmental data available from the ENGEN Server. These data structures would be added to existing FOMs for the inclusion of environmental data using an ENGEN client-server approach.A connection between the ENGEN client and the host simulator must be established.  This is relatively simple with reflective shared memory architectures, but may be more difficult to achieve with other architectures.  Typically, the ENGEN client will interface to the host using the same method that the HLA Interface Unit (HLA-IU) uses.  Finally, the host simulator will need to be updated to accept the environment data from the ENGEN client, rather than from its internal sources.  Likewise, it will be necessary to update the HLA-IU to publish information about the state of the host simulator’s Navaid receivers in order for the ENGEN client to pull this information off the network rather than from a back channel.  This approach is required to satisfy the HLA rules prohibiting private (non-HLA) comm-unications between entities on an HLA network.ConclusionThe ENGEN environment generator provides a method to ensure that multiple simulators in a single exercise all experience the same set of weather conditions and see the identical sets of Navaids in a common location.  ENGEN’s client-server architecture enables the server to publish a concise description of global weather and Navaid parameters.  ENGEN clients then interpolate the global data to produce local data to their attached host simulators with low latency and low network bandwidth requirements.Author BiographiesBURTON GRIPPIN is a software engineer at Nova Technologies an Employee Owned Engineering Company.  He is currently working on a project with Lockheed Martin to develop an AC-130U Gunship simulator for the USAF Special Operations Forces.  He is the author of the ENGEN weather model and HLA interface.DAVID CALLOWAY is also a software engineer at Nova Technologies.  He is responsible for the Aural Cueing System and Communications System for the AC-130U Gunship simulator and he is the author of the user interface for the ENGEN system. EMBED Visio.Drawing.5  Figure  SEQ Figure \* ARABIC 1  ENGEN Architecture EMBED PBrush  Figure  SEQ Figure \* ARABIC 2  ENGEN GUI