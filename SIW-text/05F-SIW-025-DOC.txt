Building Game Based Training Applications for the Other Eighty Percent of Military TrainingPerry L. McDowellRudolph P. DarkenMOVES Institute – Naval Postgraduate School700 Dyer Road, Room 366Monterey, CA 93943-5001831-656-7591 HYPERLINK "mailto:mcdowell@nps.edu" mcdowell@nps.edu,  HYPERLINK "mailto:darken@nps.edu" darken@nps.edu Keywords:ADD KEYWORDS – Games, game engines, military training. ABSTRACT: The military is continuing to use game based training to meet a larger percentage of its training needs and this trend is likely to grow. While many agencies are using commercial off the shelf (COTS) games to meet this requirement, this is only possible if there is a market for the application in the civilian sector. For example, the military can modify games such as Ghost Recon to train Special Forces’ tactics or Steel Beasts to train armor tactics. However, in areas where the military requires expertise but the tasks don’t lend themselves to civilian games, there are no COTS games to modify to meet the training needs. Unfortunately, for every area such as squad tactics or armor which have COTS games which can be converted, there are many where it is unlikely that a commercial game will ever be developed, such as logistics, vehicle repair, military police, upkeep, or machinery operation. However, these areas require game based training just as much as the others. In order to address this shortfall, the MOVES Institute has built Delta3D, an open source game engine designed for military training. While Delta3D can easily be used to build any type of game, it is ideally suited to build training games in areas where commercial games are unavailable for conversion to training tools.1. Background1.1 The move to military game-based trainingSince the advent of computers, military and scientific needs have driven major advancements in the field. However, in the last fifteen years, the entertainment industry has been driving improvements in many fields of computer science, notably graphics and artificial intelligence. This was first noted almost ten years ago in a National Research Council report which predicted that the Department of Defense (DoD) would need to take advantage of the advances in entertainment to keep pace with the state of the art [1]. The intervening years, especially the last three, has proven this belief true.One area which was a major factor in pushing for advances in the entertainment industry has been the computer and video gaming areas (hereafter referred to simply as computer games). Games have driven graphics card makers to build devices which can produce in real time images nearly indistinguishable from reality. Computer games have driven artificial intelligence research to derive algorithms allowing computer controlled characters (non-player characters, or NPC’s) to act nearly the same as those controlled by humans. Games have advanced the creation of intuitive user interfaces so users can immediately play a game without a long instruction period, and have enhanced the simplicity of loading and integrating software into a computer. Additionally, they have made significant advances in the networking of games; the state of the art networking is now being performed to create larger and large massively multi-player online games (MMPOG’s).During this same time period, while simulations’ capabilities have increased, they have not kept pace with those of games. Today’s simulations require a great deal of planning to set up as opposed to games which begin when an eight year old puts a disk in his GameCube. Most simulations also still require large and expensive hardware to run, as opposed to the COTS PC’s or consoles that most games run on. They also require significant contractor support during both installation and run-time. Also, there are very few training simulators which a user can use without significant training in how to use them; since this is training in how to use the simulator, as opposed in how to do their job, it does not add to the military members’ ability to do their actual job, this is wasted time and effort. Additionally, the increases in realism in either graphics or the behavior of NPC’s have not kept pace with computer games. With all these advancements in games and the lack of corresponding advances in military simulation, it is not surprising that military trainers have begun using game technology (sometimes called lightweight federates or tactical decision making aides to avoid the negative connotations among some senior personnel of the word games) for various purposes, including training. Games are used in recruiting, with the Army beginning the trend by releasing America’s Army in 2002 [2] and the Air Force [3] and Navy [4] following suit later. The Marine Corps has long been in the forefront of using games to train, beginning with Marine DOOM, a mod which adapted the popular DOOM game to the training needs of the Marine Corps [5]. Since that time, there have been many games built for the military for a wide variety of reasons, such as the Army’s Full Spectrum Warrior and Full Spectrum Command and the Marine Corps Close Combat: First to Fight.1.2 Limitations of using COTS gamesAll the games mentioned above, and most of the games developed for the military, have been designed or modified from existing games. In some of them, the military paid commercial developers between hundreds of thousands and millions of dollars to modify a game the developer was already building so that it would better meet the needs of military training. In others, the games were used as designed by the game company which the services deemed realistic enough to provide training. The advantage of these methods is that the military gets a game for training without having to provide all of the development costs associated with the game and most of the games have been proven to provide training value.However, the problem with this method of developing game for military training is that it limits the types of training games which can be used to those which have commercial viability. While most people think of military tasks as employing weapons, flying aircraft, or driving tanks, in reality only a very small percentage of military members perform tasks like that, and normally those tasks take up a small percentage of their activities. Unfortunately, the tasks which make commercially viable games are a very small percentage of the tasks the military actually performs, but military members need to be trained in all required tasks, not just those that would make. The brilliant assault into Iraq in 2003 proves a great example of this. At one point, it appeared that the spearhead units would have to cease the offensive because supplies were not keeping up with the speed of the advance and units were running short of gasoline, food, and ammunition. Thus, the training of the supply clerk who was ensuring that the front line troops were constantly resupplied was just as important as the tank gunner – if either of them failed to know their jobs, the offensive was in jeopardy. No game company is going to produce a commercial game simulating the job of that supply clerk because it is very unlikely to sell. However, the training of that clerk can be increased greatly by using game based training as a component of his overall training.Supply clerk is just one example of the myriad of military jobs which are critical for success in combat but do not translate into commercially viable computer games. Other examples of this are machinery maintenance, Naval damage control and engineering drills, all forms of logistics, shipboard line (rope) handling, and tons of others. An informal survey of military officers estimated the percentage of military tasks which did not translate into commercial games at somewhere between eighty and ninety-five percent. The military would lose a valuable training tool if it dismissed using computer games to train those tasks.Using COTS games exclusively for training also has another disadvantage. There are many training tasks which do not require an entire game in order to properly train the military member. In fact, some training applications might take as little as fifteen minutes to one hour to complete. There is no current business model which would allow such applications to be cheaply built using COTS software. Additionally, another disadvantage of COTS games is that once a game is built using a COTS solution, the material created can only be used with the original game. It is very difficult to talk material created for one game and put it into another game.1.3 Alternatives to COTS gamesWhile COTS games undoubtedly have a major place in military training, there needs to be an alternative to overcome their limitations and build the applications for which they are not well suited. Normal game and simulation software is not well suited for this because of the reasons given above: most simulation software is not as advanced as game software and licensing issues make and expenses make it very difficult to economically use. Instead of these alternatives, we at the MOVES Institute at the Naval Postgraduate School have built an open source game engine specifically for military applications. In other words, it is particularly well suited to build applications to train the other 80% of the military.2. DELTA3D GAME ENGINE2.1 Origin of Delta3DResearchers at the MOVES Institute originally conceived of Delta3D when they ran into problems with current simulation software. Although the Institute had seat licenses available for state of the art software for building simulations, using it had many inherent problems. First, often the software didn’t do what we needed it to do. When this happened, since the software was proprietary, there was no way to make changes to it so it provided the needed functionality. The only option to fix the software was to inform the software company of their product’s shortcoming and ask them to fix it. However, at best this resulted in a fix in several months, at worst the problem was never fixed no matter how many people complained about it on forums. In the meantime, the only option for the project was to create a workaround, which often required a significant amount of developer’s time and effort, slowing production.Secondly, the licensing issues often made it difficult to produce products. One example of this is an application built by two USMC students at MOVES, Lieutenant Colonel David Brannon and Major Mike Villandre. For their master’s thesis in 2002, they built a software system designed to train Forward Observers, those Marines who spot artillery fire (Brannon 2002). However, this trainer, The Forward Observer Personal Computer Simulator (FOPCSIM), was built atop a commercial development tool, Vega®, from Multigen/Paradigm. While the MOVES Institute had a development license for Vega®, in order for this application to be shipped and run on PC’s to train Marines in the Fleet, Vega® run time licenses would have to be procured for each computer the Marines wanted to use it on. The cost of these licenses was determined to be too high by the Marine Corps Program Manager for Training Systems (PM-TRASYS), and the system could not be deployed to Marines in the Fleet at that time.Thirdly, these simulation systems were priced as if each was filled with unique features, often times running into the five or even six figures for each application built. However, in reality, a review of most simulation software reveals that almost all systems have essentially the same features; probably 90% of the functionality each provides is basically the same, with minor differences. The differences between all of them essentially boils down to the most advanced features each provides. However, these advanced features are not needed for the vast majority of simulations. For all these reasons engineers at MOVES began to search for low cost or free software which could provide the needed functionality. While no system was found which met all requirements, several open source systems were found which could be used for a specific module needed. A thought occurred: “Someone ought to merge all these projects – it would produce an exceptional open source game engine.” Since no one appeared to be doing it at the time, Erik Johnson, an engineer at MOVES decided to be that “someone.”2.2 Design philosophyAfter examining the problems with the current software to build simulations and games, we came up with a four-part philosophical credo upon which we based building our game and simulation engine:Keep everything open to avoid lock-ins and increase flexibility.Make it modular so we can swap anything out as technologies mature at different rates.Make it multi-genre since we never know what app it's going to have to support next.Build a community (or leverage existing ones) so the military doesn't have to pay all the bills.These simple principles, which we used as our guides when making decisions throughout the development process, are described below.The first of these, “Keep everything open to avoid lock-ins and increase flexibility”, addresses two of the problems in the current paradigm. By keeping everything open, no vendor would be able to lock the military into its technology. This would allow follow-on applications to be bid-on by multiple companies, with the resulting competition reducing their costs. Additionally, because the tools are open, developers have access to the source code. This means that if the tools don’t meet the developers’ requirements, the developers can change the tools as needed for their applications without waiting for a vendor to decide to do so.The second of these tenets, “Make it modular so we can swap anything out as technologies mature at different rates”, will allow the engine to be state of the art for a long period of time. Each of the various elements of the game consists either of an open source library or code developed in house. In either case, we have kept the different modules as separate as possible. Therefore, if one of the modules making up Delta3D is surpassed by another open source project and is no longer the “best of breed”, it is possible to replace that module with the better one. This can continue with only minor modifications to the Delta3D API, thus allowing the engine to remain current significantly longer than most existing game engines.The third principle, “Make it multi-genre since we never know what app it's going to have to support next”, is designed to ensure that Delta3D can meet whatever needs the military might have. Just within one service, the Navy, the number of training applications is immense. When he was the commander of the Navy Education and Training Command (NETC) in 2004, Vice Admiral Alfred Harms estimated that he would need approximately 1,500 training games to meet his requirements of performing all individual training within the Navy. Therefore, there is not going to be one genre of games which will be able to meet all those requirements, which are just a small portion of all those in the military. While traditionally game engines have been built for a single genre, even a single game, that model would not work for the military. By having one engine which can meet all requirements it is easy to standardize the production pipeline and reuse content for multiple applications, thus reducing the cost involved.The final part of the credo, “Build a community (or leverage existing ones) so the military doesn't have to pay all the bills”, is another factor driving us towards an open source solution. The power of open source projects is that the energy of a huge development team can be brought to bear upon problems without actually employing such a large team. By building a well designed system that people are interested in using for their own applications, they will also add improvements to the original system. Over time, these may add up to have significantly more value than the original system. However, building such a community takes a great deal of time. Leveraging existing open source communities by incorporating current open source projects with large developer bases into the engine creates a built-in group of developers. The advantages this accrues will be discussed more below.2.3 Technical Issues and Our ApproachThere are several technical issues involved in building an open source game engine. The first is determining how to build the engine. There are several options, such as writing the entire code in-house, choosing an existing open source engine and modifying it to perform all required functionality, or taking several existing open source projects, each of which performs one or more functions needed in the engine, and then hooking these unrelated modules together to produce an engine. Writing the entire engine in-house was rejected as impractical due to time and resource restraints. Several open source game engines were considered, but all had major problems with meeting the requirements of our credo. We determined that modifying each to meet our credo’s requirements would require more work and yield an inferior final product. Therefore, our approach to this problem is to use the “best of breed” of previously existing open source software as building blocks for our open source game engine.This decision has produced many benefits. The first is that we have been able to build a robust engine on a small budget with limited resources. Delta3D itself is consistent API layer that integrates many existing open source libraries. We proudly claim that we have written approximately 4% (50K lines out of 1.2M total lines in all the libraries which make up Delta3D) of the source code that comprises Delta3D – the rest is existing open source projects. The second benefit is that Delta3D constantly leverages existing open source communities. Our engine is improved not only by “direct” contributors (those who make contributions to the code base of Delta3D), but it is also enhanced by “indirect” contributors (those who contribute to the code base of one of the component projects making up Delta3D). This is a huge advantage, especially to a project in its early stages. The third advantage is that it allows us to maintain Delta3D as being made of the “best of breed”, as discussed in the philosophy discussion above. One final advantage is that most open source projects are multi-platform, which means that it was a simple matter to make Delta3D run on multiple platforms. Delta3D has been tested and runs on Windows and Linux. Additionally, it is likely capable on running on operating systems similar to Linux (such as Unix or MAC-OSX), but it has not been tested on these.The next technical challenges are determining exactly what features to add to the engine, and once this has been done, whether an existing open source project could be used to meet the requirement. If multiple open source projects could be used to meet the requirement, then we had to determine which is the best choice to provide that functionality. In certain circumstances, the required functionality doesn’t exist in an open source project and it has to be written from scratch. We have tried to keep Delta3D extremely lean and have begun by adding only those features which are required for the majority of applications. As the use of the engine expands, we (or hopefully, other developers using Delta3D) will add functionality to the engine. As for choosing which projects to use as the modules of Delta3D, we had two criteria: a project’s technical merits and its user support base. The rationale for choosing projects upon their merits is obvious and considering a project’s base has allowed Delta3D to gain many “indirect” developers. Additionally, projects with large user bases are more likely to remain current and state of the art than those with only a small base, reducing the likelihood of needing to swap a module. The initial modules using open source projects, along with the specific projects used for that module, are shown below in Figure 1. Figure 1 Delta3D’s underlying open source librariesOne other design issue we felt strongly about and always kept as a factor in design decisions was that Delta3D must be easy to use. We tried to make everything as high level as possible, making it simple for the designer to create objects, have them interact with the other objects in the world, and display the results. For example, it is possible to declare an object which is transformable, has physical properties (such as appearance, mass, size, bounding box, animations etc.), and can be “linked” to other objects. After doing that, designers no longer have to concern themselves with all those low level details. They make the object do whatever they want it to, and the engine handles any low level interactions (positioning, rendering, checking collisions, etc.) that occur. However, if the designers so desire, they can always get to the underlying code if they don’t like the way Delta3D handles some of the interactions and they wish to change them. Thus, Delta3D provides the best of both worlds, a simple easy to use API with the ability to completely control all actions.Another area where we made things as easy as possible for developers is the content creation pipeline. We realize that content creators have their own favorite tools, and we have not imposed any requirements upon file formats that Delta3D will accept. Additionally, we try to make it as easy as possible for content creators to get their work into the engine. For example, we support OSGExp, which is a plug-in for 3DS Studio Max so that it can output files into OpenSceneGraph format. OSGExp has support for Geometry, Material, Texture, Multitexture, Proceduraltexture, Environmentmaps, Cameras, Animations and has helpers for OSG style Level of Detail, Billboards, Switches, Impostors, Occluders, Nodemasks and much more.Because Delta3D can import many different file formats, the content creator has a wide variety of tools to choose from. In most applications, a blend of open source and commercial content creation tools are used3.0 Delta3D’s Major Libraries3.1 RenderingFor rendering, Delta3D uses OpenSceneGraph (OSG). OSG is an open source high performance 3D graphics toolkit, used by application developers in fields such as visual simulation, games, virtual reality, scientific visualization and modeling. It is written in Standard C++ and uses OpenGL as its underlying rendering API. It has gained a large following and continues to grow; in a recent poll of visitors to the modsim.org website, OSG was used by more than half of those who responded as shown in Figure 2 [7]. OSG supports several graphics concepts which greatly improve performance, such as view frustum culling, occlusion culling, small feature culling, Level of Detail (LOD) nodes, state sorting, vertex arrays and display lists as part of the core scene graph. It also supports other methods to improve performance, such as customizing the drawing process by implementing Continuous Level of Detail (CLOD) meshes atop of the scene graph [8]. Delta3D can use OSG to create realistic scenes with high complexity in real time (> 30 FPS) as shown in Figure 3, a screen shot of a demonstration application built in Delta3D.Figure 3 Screenshot from Delta3D3.2 PhysicsPhysics in Delta3D is performed by the Open Dynamics Engine (ODE) library. ODE is a high performance library for simulating rigid body dynamics. It is fully featured, stable, mature and platform independent with an easy to use C/C++ API. It is currently used in several computer games, 3D authoring tools and simulation tools. ODE can realistically model several devices/physical phenomena, such as joints, springs, damping devices (e.g., shock absorbers), friction, gears, motors, and collisions. Very advanced rigid body mechanics can be built out of these simulations, providing exceptionally realistic behavior of objects in the games world. ODE uses low order integration and constraint based actuators to reduce the amount of time tuning that a developer needs to use to create this realistic behavior. It is particularly useful for simulating vehicles, objects in virtual reality environments and virtual creatures [9].3.3 AudioDelta3D’s audio is handled through the Open Audio Library (OpenAL), which is a software interface to the audio hardware. It resembles the OpenGL API in coding style and conventions and uses a syntax resembling that of OpenGL where applicable. The interface consists of a number of functions which allow a programmer to specify the objects and operations in producing high-quality audio output, specifically multichannel output of 3D arrangements of sound sources around a listener. Consequently, legacy audio concepts such as panning and left/right channels are not directly supported. OpenAL does include extensions compatible with the IA-SIG 3D Level 1 and Level 2 rendering guidelines to handle sound-source directivity and distance-related attenuation and Doppler effects, as well as environmental effects such as reflection, obstruction, transmission, reverberation. To the programmer, OpenAL is a set of commands that allow the specification of sound sources and a listener in three dimensions, combined with commands that control how these sound sources are rendered into the output buffer. The effect of OpenAL commands is not guaranteed to be immediate, as there are latencies depending on the implementation, but normally such latency is not noticeable to the user [10].3.4 Character AnimationDelta3D uses the Character Animation Library 3D (Cal3D) to animate characters. Cal3D is a skeletal based 3D character animation library written in C++. One nice feature of Cal3D is exporters, which are plug-ins for most popular (both open source and proprietary) 3D modeling packages. Thus, artists can use their preferred modeling tools to create characters, animations, and textures, and then output them into a format Cal3D can use to control the characters in applications. The Cal3D C++ library loads exported files, build characters, run animations, and access the data necessary to render them with 3D graphics. Cal3D can perform animation blending, which allows multiple animations to be executed at the same time with Cal3D will blending them together smoothly. This effect allows characters to transition smoothly between different animations, such as walking and running, in any methods to get a wide variety of movement characteristics. Cal3D provides an automatic level-of-detail control, which improves performance without reducing fidelity by reducing the number of a character’s polygons when the character is distant. Also, it is also possible to create truly dynamic motion at runtime without the aid of predefined animations. For instance, it is possible to turn a character's head as an object moves past him, rotating the head directly to keep the avatar facing the moving object [11].In addition to Cal3D, we also use another open source library for character animation. ReplicantBody is a character animation toolkit written in C++, built upon Cal3D and OpenSceneGraph. ReplicantBody is a simple interface for creating and controlling an animated character. It makes a character’s movement in the world correspond to that character's feet and makes the avatar follow the ground, making motion appear much more realistic. It also improves the behavior of a character by representing different animation types as actions, and has a manager which keeps track of running actions. This makes it simple to combine actions, i.e., "walk" and “look at" makes a character which continually looks at an object while walking. ReplicantBody is integrated with OpenSceneGraph, which allows it to take advantage of OpenSceneGraph state sorting, greatly improving performance [12].3.5 ScriptingThe scripting language is one of the most critical factors in allowing advanced behaviors to be added to a game with a minimum of C++ programming on the developers’ part. For scripting, Delta3D uses the Python scripting language, which is a portable, interpreted, object-oriented programming language which has been in development since in 1990. The language has an elegant but not over-simplified syntax, with a small number of powerful high-level data types built in. Developers can extend Python by adding new modules implemented in a compiled language such as C or C++. Such extension modules can define new functions and variables as well as new object types. Python includes classes, a full set of string operations, automated memory management/ garbage collection, and exception handling. A large number of extension modules have been developed for Python. Some of these are part of the standard library of tools, usable in any Python program (e.g. the math library and regular expressions) and are thus available to developers using Delta3D. Additionally, Delta3D has full binding to connect Python with the C++ code making up Delta3D, which makes it easy for application developers to link their Python and C++ code [13].4. Delta3D’s Additional FunctionalityAdditionally, there were no open source projects which meet requirements for the following features, so we developed them in-house:Graphical Level EditorAdvanced terrain/vegetation renderingAdvanced environmental featuresBSP compilerParticle system editorRecord and playback capability3D model viewerOne of the most important items contained in Delta3D is the level editor being released as part of version 1.0 of the engine in September 2005. The level editor, built by members of the Delta3D team at BMH Associates, is an easy way for developers to build advanced levels in a graphical manner. The level editor can input all the model types that OSG supports, and the developer can position them in the world, make them move, insert triggers, and incorporate game logic. This will make it easy for both professionals and novices to build advanced levels for Delta3D applications.Delta3D can be used to render extremely realistic terrains with several advantages over current terrain models used in games and flight simulators. Delta3D uses the Generating Enhanced Natural Environments and Terrain for Interactive Combat Simulations (GENETICS) terrain and vegetation engine, created by William Wells, an Air Force PhD student at MOVES. Wells’ approach enhances the apparent quality of the given set of terrain elevation data and surface imagery, adds vegetation and man-made objects (such as buildings) that are placed similarly to the arrangement within the actual environment, and generates a plausible synthetic terrain environment where data is missing or incomplete. For further details on how this is accomplished, see [14]. What this means is that Delta3D offers high performance rendering of large areas as necessary for traditional jet flight simulators, where the user is operating “high and fast,” but also offers the visual cues necessary for flight simulators of aircraft, such as helicopters, which operate closer to the ground, i.e., “low and slow.” It is extremely rare for a single engine to be able to provide the required performance and fidelity to perform both tasks well. Figure 4 shows GENETICS terrain from a high altitude, while Figure 5 shows a low altitude terrain, vegetation and houses placed by the engine.Another advanced feature of Delta3D is the way we handle environmental features, such as the sky, clouds, etc. Once again following our requirement to be as simple as possible, we have built Delta3D to make use of environmental features as high level as possible. Like many engines, Delta3D can use sky boxes to give the atmosphere a realistic appearance. However, developers are limited by the static texture applied to Figure 4 High altitude view of GENETICS terrain and featuresFigure 5 Low altitude view of GENETICS terrain and featuresthe sky box; the user cannot change weather conditions or time of day. Delta3D can go a step beyond this. By using the sky dome, the built-in ephemeris calculations, and high-level weather controls, the developer can merely input a time and weather conditions (clear, partially cloudy, overcast, etc.) and Delta3D will procedurally generate the clouds and position the sun to match. One other environmental feature included in Delta3D is procedural clouds. One of the problems with many 3D games and simulations are that, although their skies appear quite realistic upon first glance, after watching them for some time the user begins to notice that they are unreal, since they never move. To prevent this, Delta3D has two forms of procedural clouds, 3D clouds and planar clouds, which change over time. An additional feature contained in Delta3D is a particle system editor. This editor allows developers to use graphical tools to change the properties of a particle system and see the effects immediately in real time. This greatly speeds the development process by eliminating having to run the application to see the effects of changing a particle system’s properties.Two other features which Delta3D has that many engines do not are a 3D model viewer and the ability to record and playback scenarios. The model viewer is designed to allow developers to load a model quickly and view it from all angles without having to write an application to do this. The record and playback capability arises out of Delta3D’s origins as an engine for training and educational applications. This capability allows both instructors and trainees to go back to a particular moment in a scenario and discuss what was occurring, what the trainee did, and what actions should have been taken. 5. Applications Built Using Delta3DAlthough the 1.0 release of Delta3D is not due out until September 2005, there has already been one training application built using it, and several others are currently in development.5.1 FOPCSIMSection 2.1 discussed how the current software licensing practices prevented deployment of the trainer built by Brannon and Villandre. In 2004, two other Marine Corps students at MOVES, J.P. McDonough and Mark Strom, decided that the trainer Brannon and Villandre built in 2002 was too valuable to remain unused. They took the Brannon and Villandre’s code and modified it to run on Delta3D. In addition to not having any licensing fees, access to the engine’s source code allowed McDonough and Strom to freely modify it, allowing them to remove several “hacks” originally intended to work around various shortfalls in the Vega® engine. Now, PM-TRASYS has made FOPCSIM a program of record and plans to employ it as the trainer of choice for forward observers in the Marine Corps. Additionally, the other three services are planning to use it. Figure 6 contains a screenshot of the current version of FOPCSIM. (NOTE: McDonough and Strom’s master’s thesis documenting this application, along with test results comparing FOPCSIM to previous training methods, will be published in September 2005. It will be available in .pdf format from  HYPERLINK "http://www.movesinstitute.org" http://www.movesinstitute.org.)Figure 6 FOPCSIM5.2 FirefighterAnother application built atop Delta3D at MOVES is a shipboard firefighting application. This was built as a proof of concept of Delta3D’s (then called P-51, its development name) ability to serve as the engine of a training application [15]. While never intended to be used as an actual training application, this prototype demonstrated several features which will be useful in building actual training applications, such as recording and playback, a grading system, and feedback to the users as to their performance. A screen shot of the firefighter system is shown in Figure 7.Figure 7 Delta3D shipboard firefighting prototypeAdditionally, several other applications are in development. MOVES is current building a trainer for Forward Air Controllers (Airborne) (FAC-A), which will become part of the Virtual Technologies and Environments (VIRTE) program at the Office of Naval Research. In addition, an intelligence team trainer is planned which will train Naval personnel both ashore and at sea, and several others are currently under discussion.6. ImpactDelta3D has the capacity to significantly change the way that serious gaming and military simulation are done. The current paradigm of the military paying multiple times for same commodity can finally be ended. Additionally, the days when the initial developer was the only contractor who can expand or modify a system, and could charge whatever exorbitant fee desired because the application was tied to that contractor’s proprietary tools, are over. The military will be able to pay whichever contractor can provide best value in upgrading and maintaining training applications.Another area where Delta3D will make a huge difference is the academic arena. For quite a while, traditional computer graphics and virtual worlds classes have needed a simple API for students to create advanced applications for hands on experience and to experiment with new ways of doing things. With the huge increase in interest in games as a career and a business, many schools are beginning to offer classes and degrees in gaming, and the need is even more pressing there. While some of these are well funded by industry, most have limited resources, especially community colleges, where a large portion of these programs are being created. Delta3D offers an outstanding choice for academic institutions looking for an API upon which to build class projects, theses, and other such applications.Additionally, Delta3D makes a great platform for anyone who wishes to build either a game or simulation without a big budget, such as small companies or people desiring to build a game as a demo to help them get into the gaming industry. 7. Future WorkOur next modifications to the engine will be adding generic after action review (AAR) and scenario generation capability to the engine, which will make it easier to build advanced trainers using the engine. Additionally, we plan to add the capability for close coordination between the game engine and a Learning Management System (LMS); we are currently investigating whether that should involve adding a LMS to the engine, adding the engine to an LMS, or simply putting the hooks for easy communication into both. One issue that we are looking into is the best way to create long term support for this project. Sponsors will not want to continue funding development and maintenance of the engine indefinitely. We feel that a “Red Hat” model is appropriate, where the engine itself is free for anyone who wishes to use it, but companies can buy technical support and other services from a company which oversees the status of the engine.8. ThanksWe would like to thank our sponsors, the NETC Learning Strategies Division for their innovation grant, and the Joint Force Command Joint Warfighting Center for their funding to incorporate Delta3D into the Joint National Training Capability.9. References [1]	National Research Council, Committee on Modeling and Simulation: Modeling and Simulation: Linking Entertainment and Defense, National Research Council: Washington D.C. 1997.[2]	E. C. Wardynski: “Informing Popular Culture: The America’s Army Game Concept.” In M. Davis (Ed.), America’s Army PC game: Vision and realization, (pp. 6-8). Monterey: U.S. Army and MOVES Institute.[3]	M. Peck, “Air Force’s Latest Video Game Targets Potential Recruits”, National Defense Magazine, January 2005, downloaded July 13, 2005 from  HYPERLINK "http://www.nationaldefensemagazine.org/issues/2005/Jan/AirForceLatestVideoGame.htm" http://www.nationaldefensemagazine.org/issues/2005/Jan/AirForceLatestVideoGame.htm [4]	J. Nichols: “Navy Recruiting to Launch Online Video Game”, from Navy Newstand, June 11, 2005, downloaded 6/15/2005, from  HYPERLINK "http://www.news.navy.mil/search/display.asp?story_id=18596" http://www.news.navy.mil/search/display.asp?story_id=18596[5]	M. Prensky: “Marines Learn at the Speed of DOOM” LearningCircuits.com, February 2001, downloaded 7/13/05 from  HYPERLINK "http://www.learningcircuits.org/2001/feb2001/doom.html" http://www.learningcircuits.org/2001/feb2001/doom.html . [6]	D. Brannon and M. Villandre: The Forward Observer Personal Computer Simulator (FOPCSIM), Master’s Thesis, Naval Postgraduate School, Monterey, CA., March 2002.[7]	MODSIM.org Poll, Results of a poll on modsim.org, March 15, 2005. Retrieved March 17, 2005from  HYPERLINK "http://www.modsim.org/devrim_extras/poll_piechart_scenegraph2005.png" http://www.modsim.org/devrim_extras/poll_piechart_scenegraph2005.png .[8] 	OpenSceneGraph’s Home Page, Retrieved March 17, 2005 from  HYPERLINK "http://www.openscenegraph.org" http://www.openscenegraph.org/ .[9]	Open Dynamics Engine Home Page, Retrieved March 18, 2005 from  HYPERLINK "http://ode.org" http://ode.org/ .[10]	Open Audio Library Specifications Page, Retrieved March 18, 2005 from  HYPERLINK "http://www.openal.org/oalspecs-specs/x44.html" http://www.openal.org/oalspecs-specs/x44.html .[11]	Character Animation Library 3D FAQ Page, Retrieved March 18, 2005 from  HYPERLINK "http://cal3d.sourceforge.net/docs/api/html/cal3dfaq.html" http://cal3d.sourceforge.net/docs/api/html/cal3dfaq.html .[12]	ReplicantBody’s Home Page, Retrieved April 8, 2005 from  HYPERLINK "http://www.vrlab.umu.se/research/replicantbody/#doc" http://www.vrlab.umu.se/research/replicantbody/#doc .[13]	Python Software Foundation Introduction Page, Retrieved March 18, 2005 from  HYPERLINK "http://www.python.org/doc/Introduction.html" http://www.python.org/doc/Introduction.html [14]	McDowell, P. and Darken, R. (2004) Using Open Source Game Engines to Build Compelling Training Simulations, Proceeding of 2004 Interservice/ Industry Training, Simulation and Education Conference, Orlando Florida: National Training Systems Association, December 2004.[15]	W. Wells and C. Darken: Generating Enhanced Natural Environments and Terrain for Interactive Combat Simulations (GENETICS) Proceedings of the 2005 IMAGE Conference. Tempe, Arizona: The IMAGE Society, July 2005Author BiographiesPerry McDowell is a former Naval Nuclear Power – Surface Warfare Officer, whose sea tours include USS-VIRGINIA (CGN-38), USS ELROD (FFG-55), and USS ENTERPRISE (CVN-65). He is currently a Research Associate at MOVES Institute at the Naval Postgraduate School in Monterey and the Executive Director for the Delta3D Game Engine Project. His research has been primarily focused on game based training with an emphasis on Naval applications. Currently, he is researching the best ways to implement game based learning into various military curricula via learning management systems. Mr. McDowell graduated with a B.S. in Naval Architecture from the U.S. Naval Academy in 1988, and an M.S. (with honors) from the Naval Postgraduate School in 1995. He currently is conducting research for his PhD in Computer Science. Rudolph Darken is an Associate Professor of Computer Science and the Director of the Modeling, Virtual Environments, and Simulation (MOVES) Institute at the Naval Postgraduate School in Monterey, California. He also directs the Laboratory for Simulation and Training and modeling and simulation efforts for the Center for Homeland Defense and Security. His research has been primarily focused on human factors and training using virtual environments and computer gaming media with emphasis on navigation and wayfinding in large-scale virtual worlds. He is a Senior Editor of PRESENCE Journal, the MIT Press journal of teleoperators and virtual environments. He received his B.S. in Computer Science Engineering from the University of Illinois at Chicago in 1990 and his M.S. and D.Sc. degrees in Computer Science from The George Washington University in 1993 and 1995, respectively.