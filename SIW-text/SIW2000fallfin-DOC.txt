Interoperability in Distributed Supply Chain Simulation using GRIDSRajeev SudraSimon J.E. TaylorTharumasegaram JanahanCentre for Applied Simulation ModellingDepartment of Information Systems and ComputingBrunel University, Uxbridge UB8 3PHUNITED KINGDOMTel: +44-1895-203375, Fax: +44-1895-251696{rajeev.sudra, simon.taylor, t.janahan}@brunel.ac.uk Keywords:Distributed supply chain simulation, Simulation interoperability.ABSTRACT: With a variety of work in the area of Supply Chain Simulation, there has been a move towards connecting these simulations together to represent more complete descriptions of the logistic dependencies that organizations face. Rather than to re-code the distributed simulations into a single model which is not always economically viable, it is proposed that connecting existing models together could provide a more cost effective alternative. The individual simulations known as federates require linking into a coupled model (often called a federation) as the overall representation of the logistic supply chain.The executions of simulations on distributed hosts as a coupled model require both co-ordination and facilitating infrastructure. It becomes the responsibility of this infrastructure to ensure that the progress of the coupled simulation occurs consistently and concurrently. Without these measures, federates within the simulation potentially can advance too rapidly and possibly incur time causality errors. A distributed environment, the Generic Runtime Infrastructure for Distributed Simulation (GRIDS) is suggested as a research infrastructure to investigate these issues. This infrastructure promotes interoperability and reuse by linking deployed simulations together and also provides a novel service distribution model to address the problem of causality errors by employing a conservative time synchronization algorithm. The infrastructure presented demonstrates scalability without loosing flexibility for future extensions based on open industry standards. 1. IntroductionDistributed Simulation is currently used most frequently in military simulation. Transfer of these distributed simulation techniques has been slow to non-military applications but has begun to gain momentum. Benefits can be gained from these techniques when applied to assist connecting existing models together. This promotion of simulation reuse could have many benefits including cost and re-coding factors. Simulation interoperability could allow the connection of proprietary models without exposing their internal organization during collaborative projects. The key component of such an environment promoting interoperability would be an extensible infrastructure capable of supporting a broad range of simulation types. This paper examines features of such an infrastructure and its application in supply chain simulation.Our paper is structured as follows. In section 2 we review the techniques and reasons for simulating supply chains. Section 3 presents the Generic Runtime Infrastructure for Distributed Simulation (GRIDS), our contribution to the field of distributed simulation. The section discusses the extensible features of the infrastructure, issues of interoperability and a description of the package interfaces. Section 4 provides a case study illustrating how the distributed service mechanism can be applied to supporting a coupled simulation. The paper ends with some conclusions in section 5.2. Supply Chain ManagementSupply Chain Management (SCM) is the series of activities that an organization uses to deliver products, services or a combination of both to its customers. Recent opinions coupled with a shift in modern economics have shown a de-emphasis in the benefits of vertical integration such as economies of scale [1] towards a focus on the benefits accrued from being specialized [2].Supply Chain Simulations (referred to as SCS in this paper) are used in order to observe the performance of a supply chain. Observations are made on processes such as customer demand planning and production logistics. Archibald et al. [3] presents a more comprehensive list of processes that when optimized are suggested to yield a successful SCM. In this context, simulation provides an ideal vehicle to discover these optimizations.A supply chain can represent both the internal processes that occur between departments but also the interactions between organizations representing suppliers and consumers of products and services as part of the total supply chain. Actual supply chains usually involve multiple sites and partners who may be located in disparate positions geographically. This distribution of models requires aggregation to represent the complete supply chain. The supply chains can be linked and organized into complete models covering source materials through to end customers as has been demonstrated by Zeigler et al. [4]. Zeigler’s paper goes on to suggest that the distribution of a supply chain simulation can benefit from parallel execution. This is based on DEVS, a discrete event formalism. However, for any performance improvement to be accrued and also to maintain coordination, parallel and distributed execution is substantially dependent on a type of time synchronization mechanism [5], which we address in a later section as a feature of our execution environment.3. Review of GRIDSGRIDS [6,7] has already been seen to support Distributed Interactive Simulation. GRIDS is best described as an execution environment capable of supporting a broad range of simulation types. The primary role of the infrastructure is to coordinate the activities of distributed components using a message based scheme. The environment’s functionality is further enhanced by the use of a novel service distribution model known as Thin Agents. EMBED Word.Picture.8  Figure 3.1 : Protocol LayersGRIDS is built using the Java language [8]. Java was chosen since it offers a large set of features appropriate to distributed systems construction. Figure 3.1 describes the protocol layers present in a typical GRIDS implementation and how it relates to Java. In particular, Java provides the facility to load objects from across the network using the dynamic class loader. Java also allows deployment of its code across most of the popular operating systems ensuring an increased potential user base and allows connectivity of simulations running on several platforms. EMBED Visio.Drawing.4  Figure 3.2 : GRIDS Coupled ModelSimulations require services to both supplement and enhance execution. The GRIDS extensible service architecture is realized by thin agents. These agents may be used to support the simulation by providing tasks such as optimizations and assistance. Figure 3.2 provides an illustration of a typical GRIDS coupled model. Simulation objects/federates are connected to a GRIDS client via the published interface. Thin agents are distributed to participating clients and instantiated to provide the required services. A description of the execution model and the client and thin agent interface is now examined.3.1 GRIDS execution modelA GRIDS session has three distinct stages of execution: Register, Broadcast, and Run.Stage 1: RegisterRegistering involves individual simulation nodes making their presence known to the GRIDS “Boot Server” and publishing the initial state variables of that node. Additionally, the Boot Server builds up the namespace of all the clients registering, and builds a central entity list of all entities in the simulation. Once all clients are registered the server closes all incoming connections for registration.Stage 2: BroadcastUpon a simulation “Start” event, the boot server broadcasts to all registered clients the entire entity list built up during registration. The entity list is stored in the internal database on each GRIDS client. In addition to broadcasting the entity list, the server broadcasts the namespace for all participating clients to be stored internally within each GRIDS client.Stage 3: RunOnce all entity lists and namespaces are broadcast to the individual clients, the server issues a “go” command to all the clients, signaling the start of the simulation. At this point, the server will terminate and cease to be a part of the simulation. The clients would communicate directly as necessary in a peer to peer fashion. The GRIDS client is responsible for “ticking” the host application to perform a simulation cycle, and for synchronizing entity attributes between the local and remote nodes.3.2 System OverviewThe GRIDS client is composed of four primary services: communications, the simulation interface, data services and thin agent services. Figure 3.3 describes the key class relationships that exist within a typical GRIDS client and are explained in more detail. Communication is handled through a message manager that is capable of sending GRIDS messages via both stream and datagram oriented connections. It is a queue based messaging service and is accessible to the client components through the MessageManager. The simulation executive, another infrastructure component, provides execution context as well as coordinating the activities of the other systems within the client. Some of these systems are now described. EMBED Visio.Drawing.4  Figure 3.3 : GRIDS Client Diagram3.3 GRIDS simulation interfaceIn this section, we describe how a federate within the coupled simulation model would connect to the GRIDS client infrastructure. The simulation would need to implement the SimAPI interface in order to allow GRIDS and the federate to call appropriate methods to process incoming and outgoing messages.interface SimAPI {	void send (GridsMessage message) throws GridsException;	GridsMessage receive () throws GridsException;}As the federate executes, it will generate and require data from remote parties within the coupled model. The SimAPI provides a location transparent method of producing and consuming this information. The data generated is routed to its desired location by consulting a topology configuration map that is constructed during the registration process. This map describes the connectivity constraints that the infrastructure must fulfil to allow the coupled model to progress. In this way, the federate can continue to produce data that the SimAPI handles by checking the map for delivery targets. If none are listed than the data is handled locally.3.4 Data servicesThe data services in GRIDS provide much of the configuration information regarding a given federate. The service is accessed through the MDBInterface that implements a generic data storage area. DataItems are organized into DataGroups which in turn are stored in the DataStore. The interface provide methods to search based on either item names, or group names and provide a rich access method to the data. EMBED Visio.Drawing.4  Figure 3.4 : Data Services Class DiagramFigure 3.4 describes the relationships that are implemented to provide data services. The access methods in the interface provide only generic access. Components that require access to the data impose semantic meaning via the use of the DataGroups to organize the information. Each group can be used to store similar information. Entity name resolution tables in a coupled model can be stored in its own group with the topology configuration map stored in a separate group. Thin agent assignments to tasks are also stored in a separate group also and are discussed next.3.5 Thin agent interface modelThis section describes the interface that needs to be adopted by designers of thin agents for use within a GRIDS session.abstract ThinAgent {	void initialise (GridsClient) throws GridsExeption;	void sendMessage (GRIDSMessage m);	void receiveMessage (GRIDSMessage m)}A thin agent service needs to implement the above-published interface in order to be used by the GRIDS client. Providers of thin agent services need not implement all the above methods, but rather only implement a subclass of the generic thin agent class, and override the relevant methods allowing development of a taxonomy of thin agent types. Figure 3.5 describes the process taken to deploy a thin agent service from sub-classing through to instantiation on to the target client. EMBED Visio.Drawing.4  Figure 3.5 : Thin Agent MechanismThe initialise method is called by GRIDS when instantiating a thin agent for use by a client. Thin agents can register themselves within the MetaDatabase to handle specific simulation attributes. Access to data and other services is provided through the use of the sendMessage and receiveMessage methods. The actual messages contain the description of the task to be completed. Messages are routed to and from thin agents via the ThinAgentManager. This manager provides an interface also between the simulation executive (main tread of execution) and the SimAPI. Its job is primarily to intercept any messages that the thin agents may need to action and act as a service proxy for the thin agents. Routing information regarding target agents are stored in a separate DataGroup in the data services component.4. Case StudyThe case study discussed here centers on the ability of the thin agents to assist the coupling of a distributed model. More specifically, the thin agents are used to coordinate the time synchronization of the coupled model.Our scenario is loosely based on the Global Food Manufacturing case study described by Archibald et al. [3]. The paper describes an organization that has multiple sites, suppliers and consumers, some of which are exogenous parties. Due to geographical and organizational constraints, it is likely that individual supply chain simulations of the parties may exist separately. Our model is composed of these supply chain simulations that require connecting into a coupled model. GRIDS is employed as the linking middleware. The infrastructure’s primary functions are to provide execution context, simulation data services and a mechanism for interoperability between the separate simulations. An infrastructure to support a supply chain simulation would need to support an event list, a simulation clock that is advanced to the time of the next scheduled event on each iteration of the simulation, and state variables containing the state of the simulation.In order to implement simulation support of the supply chain simulation within the GRIDS infrastructure, we extended the application interface of the generic GRIDS client to provide additional support for Discrete Event Simulation. This resulted in a specific client interface designed for DES in a similar fashion to proprietary client development. In a situation where distinctly differing DES interfaces are needed to connect simulations deployed in proprietary simulation environments, complimentary proprietary interfaces could be developed as extensions to the existing API providing a method for interoperability between the deployed simulations.4.1 Synchronization thin agentOne of the key tasks of the thin agent is in the synchronization of events across the coupled model. To exemplify this approach we use a conservative parallel simulation algorithm. Fujimoto [5,9] provides a detailed discussion of this field. Synchronization thin agents that are distributed to all participating simulations coordinate consistent time advancement of the coupled model. The thin agents control access to the two types of event queues, incoming and outgoing. Events are always sent with non-decreasing time stamps ensuring arrivals are queued in the order that they are sent. The thin agent is able to send event messages both locally as well as remotely. This process ensures that locally generated events are also processed in the correct order avoiding local causality errors. EMBED Visio.Drawing.4  Figure 4.1 : Event QueuesFigure 4.1 illustrates how the model is arranged. The thin agents control the passing of events to the simulation by taking the next event with the lowest time stamp from its connected incoming queues and internal queue in line with the conservative approach. The local clock is advanced to the time stamp of that event and the simulation processes it. This processing may generate an additional event (either local or remote) which is handed back to the thin agent to be scheduled. If event is local, it is redirected back into the internal event queue, otherwise the event is sent to the remote client’s thin agent. Outgoing events are scheduled with time stamps avoiding the generation of causality errors for the target simulation. EMBED Visio.Drawing.4  Figure 4.2 : Synchronization Thin AgentFigure 4.2 shows a more detailed view of the thin agent. Although only one incoming queue is shown here, there can actually be more with each one holding time ordered events from the same or different source simulation. Null messages are used to avoid deadlock. This feature is also implemented in the thin agent. The null message algorithm introduces a property known as lookahead that is utilized by virtually all conservative synchronization algorithms. Lookahead is used to generate the time stamps of null messages scheduled in the future and is further discussed by Fujimoto [9].4.2 GRIDS proprietary interface for SCSTo implement the synchronization thin agent, we needed to extend the GRIDS client interface to add support for requirements of SCS. A description of the additional methods is presented.gridsSCSClient extends gridsClient{	void registerServer		(gridsServer Server,		string EntityName, gridsSCSRunnable callback) throws GridsException;	void scheduleEvent		(string Entity, SCSEvent event, double scheduleTime) throws GridsException;}interface gridsSCSRunnable {	void processEvent (SCSEvent event) throws GridsException;}class SCSEvent {	Long EventUID; //unique number for the event	String targetName;	double scheduleTime	String Value;}SCSAgent extends ThinAgent{	void scheduleEvent		(string Entity, SCSEvent event, double scheduleTime) throws GridsException;}The registerServer() method is modified to only allow a callback class that implements the gridsSCSClient Java interface. The method scheduleEvent() within the GRIDS interface is a proxy method used to invoke the SCSAgent. Events dispatched by the thin agent increment a counter that is used to capture transient messages [5]. Counters can be matched globally to check if there are any events that have not arrived into event queues. When an event needs to be processed the infrastructure calls the processEvent() method in the application with the event as the parameter.This description of the extended interface is actually a move towards a proprietary supply chain simulation client. This involves taking the generic GRIDS client and adding the required behaviors for the given simulation type. It can be seen that several different types of interface can be generated and specifically applied to a range of simulation types. This feature allows connectivity of simulations without compromising internal structure and allows for additional services not directly catered for in the core GRIDS distribution. A major goal of GRIDS is extensibility and this is provided in part by using thin agents and also by subclassing the GRIDS client.5. ConclusionThis paper has reviewed a case for promoting interoperability within simulation. The distribution of simulations as a result of mutually exclusive development has created a demand for building infrastructures that can support connectivity in a similar fashion to middleware. This replaces the need to rebuild simulations and rather relies on the use of existing models. Additionally, model reuse is promoted reducing the effort of redevelopment. We have introduced a novel paradigm for implementing the middleware technology in GRIDS and provided another example of its extensible services architecture using mobile objects. The potential exists for organizations to publish proprietary interfaces, in part to protect models but also to allow easier integration of stakeholder’s simulations with other models.This contribution primarily demonstrates an alternative approach to distributed simulation. It serves as an exemplar of GRIDS support for a range of simulation types. The continued use of Java as the implementation vehicle serves to further evaluate its capabilities in distributed simulation. Issues surrounding speed, usability and reliability are the focus here and feedback from our research group is available on request. More so, it is our intention to prototype possible architectures that look at issues surrounding interoperability.  If this type of architecture was to meet with success then it is possible that a high speed implementation could be implemented in C++ or possibly future versions of Java (with optimization). This work is continuing through further development of the infrastructure in supporting other desirable middleware properties as well as its applicability to problem domains other than DES (web-based simulation and our continued efforts in DIS). Examples of the GRIDS implementation are available from www.brunel.ac.uk/research/casm.6. References[1]	European Commission: “Impact on Competition and Scale Effects: Economies of scale” The Single Market Review, Office for Official Publications of the European Communities, UK 1997.[2]	S.E. Masten, J.W. Meehan Jr, and E.A. Snyder: “The Cost of Organisation”  Journal of Law, Economics, and Organisation, Vol. 7(1), pp. 1-25, 1991.[3]	G. Archibald, N. Karabakal, and P. Karlsson: “Supply Chain vs. Supply Chain: Using Simulation to Compete Beyond the Four Walls.” In Proceedings of the 1999 Winter Simulation Conference, P.A.. Farrington, H.B. Nembhard, D.T. Sturrock, and G.W. Evans, eds, pp 1207-1214. Phoenix, AZ. 1999.[4]	B.P. Zeilger, D. Kim, and S.J. Buckley: “Distributed Supply Chain Simulation in a DEVS/CORBA Execution Environment.” In Proceedings of the 1999 Winter Simulation Conference, P.A.. Farrington, H.B. Nembhard, D.T. Sturrock, and G.W. Evans, eds, pp 1333-1340. Phoenix, AZ. 1999.[5]	R.M. Fujimoto: “Parallel and Distributed Simulation.” In Proceedings of the 1999 Winter Simulation Conference, P.A.. Farrington, H.B. Nembhard, D.T. Sturrock, and G.W. Evans, eds, pp 122-131. Phoenix, AZ. 1999.[6]	J. Saville and S.J.E Taylor: “Interest management: Dynamic group multicasting using mobile Java policies.” In Proceedings of the Fall 1997 Simulation Interoperability Workshop. Orlando, FL, USA. 1997.[7]	S.J.E. Taylor, J. Saville, and R. Sudra: “Developing Interest Management Techniques in Distributed Interactive Simulation Using JAVA.” In Proceedings of the 1999 Winter Simulation Conference, P.A.. Farrington, H.B. Nembhard, D.T. Sturrock, and G.W. Evans, eds, pp 518-523. Phoenix, AZ. 1999.[8]	K. Arnold, and J. Gosling: “The Java Programming Language.” Addison-Wesley, USA. 1996.[9]	R.M. Fujimoto: “Parallel and Distributed Simulation Systems (Wiley Series on Parallel and Distributed Computing).” John Wiley & Sons, New York, NY. 1999.Author BiographiesRAJEEV SUDRA is a Ph.D. candidate in the Department of Information Systems and Computing at Brunel University, UK. He received his B.Sc. in Computer Science and Economics also from Brunel University. He has gained much experience working in industry ranging from distributed systems software development to designing and deploying large-scale computer networks. His research focuses on interoperability issues with simulation and agent-based systems.SIMON J.E. TAYLOR is the Chair of the Simulation Study Group of the UK Operational Research Society. He is a Senior Lecturer in the Department of Information Systems and Computing and is a member of the Centre for Applied Simulation Modelling, both at Brunel University, UK. He was previously part of the Centre for Parallel Computing at the University of Westminster. He has an undergraduate degree in Industrial Studies (Sheffield Hallam), a M.Sc. in Computing Studies (Sheffield Hallam) and a Ph.D. in Parallel and Distributed Simulation (Leeds Metropolitan). His main research interests are distributed simulation and applications of simulation health care. He has also been known to occasionally tread the boards.Tharumasegaram Janahan is a Ph.D. candidate in the Department of Information Systems and Computing at Brunel University, UK having completed a B.Sc. there. His research has focused on Distributed Interactive Simulation and Parallel and Distributed Simulation. He has previous industrial experience in Defense, Banking and Engineering.