LIFE IMITATES SIMULATION;LIVE AND PRE-RECORDED LINK-16 TRACKS IN THE HLA ENVIRONMENTPhilip YanniANZUS Inc.9747 Business Park AveSan Diego, CA 92131(619)-547-912870571.2714@compuserve.comKEYWORDSC4I DATALINK COMM PLANNING JAMMING JAST CEC LINK-16 JTIDS MIDS SINCGARS IDM LINK-11 SIGNAL EMISSION SENSOR CORRELATION COM DCOM CORBA MISSION REHEARSALABSTRACT: Although Link-16 is the premier datalink of the military world, and the backbone of future military tactical realtime track exchange, there is almost no simulation or realtime interface capability in the HLA/DIS  world.  The complexity of the Link-16 waveform, and the multi-layer error correction protocol that sits on top of the waveform, have made it extremely difficult to accurately simulate.  Until realistic realtime Link-16 HLA models are available, playing back recorded missions and interfacing to live terminals is the only practical solution.  The most difficult aspects of Link-16 to simulate are track accuracy (Link-16 Relative Navigation) and antijam capability since they can change from packet to packet.  Converting a pre-recorded live mission to HLA accurately addresses both of those issues.  To generate realistic Link-16 tracks for a simulation, ANZUS Inc. has developed a miniature 1553 bus recorder used to trap entire Link-16 missions on a three pound handheld computer.  This paper describes the expansion of the recording system to allow SQL access to the track playback function.  An approach to access live Link-16 data directly from the JTIDS/MIDS terminal is also discussed1.0 IntroductionImplementation of Link-16 in the military is moving forward at a rapid pace.  Figure 1 depicts current capabilities of Link-16.  Currently, the Navy, Air Force, Army and Marines all have significant air and ground assets that are Link-16 equipped.  Navy F/A-18s and the remaining F-15s will be outfitted over the next 2 years.  Unfortunately, the simulators for these aircraft have only basic Link-16 datalink models.  Further, in the HLA/DIS world there is almost no support for complex datalinks.  Several architectures have been developed that could support Link-16 simulation however, the complexity of modeling relative navigation and the JTIDS/MIDS waveform have slowed progress. This paper will discuss issues surrounding the use of playback capability of the JTIDS Moving Map Tactical Information Display System (JMMTIDS) to perform Mission Rehearsal.  Both the recording system and tactical display playback system are notebook based and can be deployed in the fleet immediately.  Microsoft Flight simulator is used to drive the ownship fly-thru.Figure 1. The modern digital battlefield2.0 Complexity of Link-16 Modeling As the significance of datalinks increases, the requirement for accurate simulation will become paramount.  In a recent Military & Aerospace article on UCAVs clearly pointed out that data links are the backbone of implementing future air vehicles.  David Whelan, director of DARPA's tactical technology office stated, "In terms of the ability of the aircraft or overall systems to perform its mission, the critical technologies are the communications links, the level of technology required in the air vehicle, weapons, and guidance systems are basically here today"[1].  His comment is not limited to UAVs.  JAST and other programs that rely on offboard sensors will require extensive data link simulation.  Prior to expanding the fleet implementation of tactics that require data links, simulation systems need to be available for mission rehearsal.  What has prevented simulation of advanced data links is the interaction of multiple levels of protocols.  An advanced data link can be defined by the following list of major functional attributes [2]:Message StandardCryptoFrequency BandProgrammable CapacityAntijam TechniquesRelay CapabilitiesNavigation CapabilityIn an advanced data link, each of these techniques is programmable and in fact can change from packet to packet.  Proposals have been made for modeling various advanced data link functions, for instance Dixon represented spread spectrum antijam margin as a function of bit error rate[3].  The interaction of these functions has thwarted a realtime Link-16 model.  For instance, the Link-16 paired-slot flood relay technique can add significantly to antijam margin[2].  Multiple platforms re-transmit the same packet offering multiple paths to the receiver.  Another interaction occurs between the Link-16 Relative Navigation function and the programmable throughput function.  Relative Navigation relies on each participant in the data link exercise transmitting their  Precise Position Location Identification (PPLI) messages.  The more PPLIs received, the better the navigation accuracy becomes  By increasing the rate of PPLIs in the data link exercise the relay function and antijam function can have a positive impact on navigation quality.The examples above are simplified, but the issue remains that effective simulation will require implementing the nuances of advanced data links.  The interactions among comm functions is not limited to Link-16 data links, CEC and other programmable spread spectrum data links have similar issues.  3.0 OPERATOR FEEDBACKAs with any aspect of simulation, realism in data link interaction is the goal.  Unfortunately, comm realism is quite the opposite of visual realism. Where visual realism simply requires more accuracy, comm realism requires inaccuracy.  To a data link operator (e.g.. AWACS, E-2C, AEGIS, MCE), if all the tracks correlate all the time, then the simulation is not realistic.  Even in Link-16 where connectivity is extremely good, track correlation issues are still paramount.  To perform realistic mission rehearsal we must generate "the fog of war".  To Link-16 systems this means that platform connectivity depends on range, line-of-sight, and the electromagnetic environment.  Track accuracy varies with the sensor, sensor-to-target range, and accuracy of platform navigation data.Several feedback mechanisms are critical to mission rehearsal.  One is the sheer volume of tracks: small exercises generally have over a hundred sensor tracks, large exercises can have thousands.  Varying track quality is another important feature of live data link exercises.  Link-16 track quality varies on a track by track basis, from less then 50 feet to hundreds of miles.  Tracks data forwarded from Link-11 to Link-16 can have track inaccuracies of thousands of miles.  In addition there are many non-realtime tracks in any data link exercise.  The varying track qualities define the look and feel of each exercise.  In a perfect world, track correlation is an automatic process.  In reality, the Joint Interface Control Officer (JICO) constantly monitors the overall quality of the tracks from each platform in the exercise and makes final the determination of which platform will be allowed to hold "reporting responsibility".  Drop Track commands, ID conflicts, and other management messages are constantly exchanged on the network  This process is ongoing throughout the mission. In advanced data links like Link-16 the correlation process is defined as part of the data link standard [4].  Track Quality, which is an estimate of the platform and Radar's ability to accurately position a track, is used to perform correlation and determine reporting responsibility.  To the operator, tracks correlate and decorrelate as the targets maneuver.Sensor Registration is another aspect of modern data links that has become critical to the operator and requires modeling.  As depicted in Figure 2, ownship position reports (generated by friendly platforms) are compared to sensor position reports to define pointing errors.  The longer a platform is in the data link exercise, the better their nav accuracy becomes, and their sensor pointing error is reduced.  To the operator, track accuracy rises, targets tend to correlate a lot sooner, and things generally run smoother.Figure 2.  Datalink Sensor  RegistrationTo the fighter on the other end of the data link, modern data links are revolutionizing the way they fight.  In the past, Air Controllers would send targets via Link-4A and back them up with voice.  Link-4A tracks were often off by hundreds of miles.  With Link-16, track accuracy has consistently been excellent and is often less than a mile.  This allows focusing a radar directly over a Link-16 track saving scan and acquisition time. It also enables "silent shooter" techniques where the aircraft with the weapon does not have to turn on its radar till the last possible moment.4.0 Why PlaybackPlayback of Link-16 tracks and injecting live Link-16 tracks into a simulation meets many training objectives at an extremely low price point.  Needless to say, it is not the final answer and work needs to continue on a realtime advanced data link engine that could handle a variety of modern data links.However, in the context of mission rehearsal, playback realistically simulates a live data link.  Imagine the scenario where a surveillance operation is ongoing in a mountainous area of the world where there are a significant number of SAM sites.  By recording missions onboard an AWACS or E-2C in the days prior to the actual flight, an operator would have a realistic number of data link tracks and SAM site signatures to "fly thru" during a mission rehearsal onboard the carrier.  Tracks collected in the days prior would accurately represent the additional Situational Awareness the operator could expect during the actual mission.Playback of  real data meets several training objectives:A realistic number of tracks can be easily displayedThe connectivity issues are clearly evident.Tracks Correlate and Decorrelate as they tend to in a realtime system.ID conflicts, IFF conflicts and other coordination issues are clearly evident.It is as "unreliable" as the actual datalink.It can be easily deployed in the field on notebook computers.In addition it meets software development issues as well:It is low cost.It provides extremely realistic track qualities and ID/IFF conflicts.It can be deployed immediately in the fleet.One of the unique advantages of playing back live track is that all of the ID data on a track is maintained for operator training.  In Link-16 the ID data includes ID category, ID Amplification, Strength, Platform, Platform Activity, Type of sensor used to generate the track,  a series of ID conflict indicators as well as the standard Lat, Long, Altitude, Course and Speed.  Generating all this data on a simulation would be quite complex and extremely time consuming.  If the track is a friendly position report, the data also includes current Voice net numbers, and status of most sensor and avionics sub-systems.Realistic Connectivity without requiring a complex Frequency Hopped Spread Spectrum (FHSS) comm model is of course one of the significant advantages of playback.  If there was a jammer available during the data recording session the connectivity would be extremely realistic allowing the operators to adjust to the level of SA lost when the jammer is on.  With realistic navigation errors, ID information, and a large number of tracks, mission rehearsal will be significantly improved.The downside of track playback is that connectivity between the air controller and the aircraft performing mission rehearsal is not accurate.  This can be resolved by additional software in the the playback architecture.  A software module that checks for LOS, and range between controller and fighter will resolve a large percentage of the connectivity issue.  For mission rehearsal in a jamming environment, the connectivity between the Air Controller and the fighter jet could be degraded by the track server.  A static Signal-to-Noise ratio algorithm could be used to degrade connectivity which would significantly improve the simulation realism without a large burden on the track server.  Figure 3 represents the Eb/No calculation for a communication systems and could be used to estimate the connectivity[5].  For the purposes of Mission Rehearsal and reduced CPU loading, all the variables would remain constant except for signal strength at the receiver (Srx) which is based on the relative distance between the jammer and the platforms trying to communicate.Eb  = ________Srx/Rd_________   whereN0          KT(NFmm+NFrx)+I/B                .Srx(dB)=Ptx-Lcable/connector+Gtx_antenna+Grx_antenna-LpathThe variables are defined as follows:Srx = signal strength at the receiverPtx = power of the transmitted signalLcable/connector = loss due to cable/connector at the transmitter and receiverGtx_antenna = gain of the antenna at the transmitterGrx_antenna = gain of the antenna at the receiverLpath = propagation lossRd = bit rate of the channel (Kbps)K = Boltzmann’s constant (-228.6 dBW / HzK)T = 290 KNFrx = receiver noise figure (dB)NFmm = man made noise figure (dB)B = Bandwidth of the channel (KHz)I = interferenceFigure 3.  Signal to Noise Ratio4.1 Access to Mission RehearsalAccess to mission rehearsal equipment in the ready room has been a goal of the military for quite sometime.  In Desert Storm, the F-117 squadrons brought their flight simulators with them, however, we are probably 3-5 years away from having portable simulators available throughout the military.  Several programs are in place to bring simulators onboard the carrier, but there will be limited availability for quite sometime.  Even with these systems in place, mission playback has an important role to play in improving the realism of the training device.To get a feel for the data link environment in the operational area, JMMTIDS can be driven by Microsoft Flight Simulator.  This is an extremely low cost, immediate implementation of a mission rehearsal system.  Images of the target can be displayed on the JMMTIDS imbedded in a DTED view of the surroundings.  This is a 2-D representation of the 3-D world, but it is immediately available and it will accurately playback the data link picture as it was recorded in a previous mission.  Specifically, it is expected that mission commanders and fighter pilots can discuss a mission in terms of Situational Awareness.  They can discuss SAM site calls, mission abort routes, navigational cues, and track correlation issues in the context of yesterday's mission in the same area.  Command and Control can be practiced in an environment where the limitations of the data link connectivity are well established.  These are mission critical issues that currently are not addressed by Silicon Graphics based room size flight simulators, let alone on a notebook PC.5.0 JMMTIDS ARCHITECTUREThe JMMTIDS architecture is a notebook based integration of  realtime distributed Component Object Modules (COM) that perform a variety of avionics and tactical display functions.  The functions currently include a Track Server, Mission Recording, GPS Moving Map, Link-16 Tactical Display System,  Data link Router, and PC-Card access to a Mil-Std 1553 databus.  Interfaces to Ethernet and TCP/IP are also available.  The software modules can be either co-located on a single notebook, or distributed among several CPUs without reprogramming.  PC-Card Plug 'N Play technology enables switching the network interfaces between the software modules.  Figure 4 is a screen shot of the JMMTIDS display in single window mode.  Link-16 tracks are being  displayed over a DTED backgroundFigure 4.  JMMTIDS Screen shotThe architecture includes the ability to pass multiple datastreams to the moving map simultaneously.  Datastreams are a combination of network protocols and avionics message formats. Examples of Datastreams are TADIL-J over 1553, VMF over 1553, NEMA Commercial GPS over RS-232, and MS Flight Simulator '98 over Ethernet.  Ownship position can be generated by the aircraft INS, GPS, or MS Flight Simulator.5.1 SQL-J access to Tactical Data LinksA key architectural feature of  JMMTIDS is the use of pseudo-SQL to pull tracks from the track server.  The language has several advantages, first its a non-proprietary industry standard, and second its an ASCII text string. Very simple text strings can be used to manipulate and access complex HLA/DIS and data link protocols.  The example of SQL-J below pulls all the Link-16 track data from the datalink terminal in realtime and displays it on the moving map:-- SELECT--   "###"=sys.packetNo, trackno, time,--    track.latitude, longitude, altitude, course, speed,--    sys.Symbol, Hostile, Indicators, Environment,  Indicators-- from "bosnia.001"-- WHERE sys.trackNo="50.*"-- options (time scale=1.0)As Figure 5 indicates, the objective of SQL-J is to allow Visual Basic, JavaScript, or even a spreadsheet program to easily access the track data in realtime without any apriori knowledge of the structure of the data.  The approach allows merging data types, for example DIS tracks and Link-16 tracks.  The display systems, in this case the moving map, does not have to translate message standards.Figure 5.  SQL-J Access to Common PictureThe most significant difference between SQL-J and its commercial counterpart is that SQL-J is realtime. It has been designed to allow multiple users access to multiple datastreams, and the goal is to use as many web server techniques as possible to further simplify access.  Note that the primary mechanism of the Web is ASCII text HTML.5.2 Text Driven Software The architecture of JMMTIDS is designed to support multiple datastreams of tactical data link and navigation messages.  The current system supports TADIL-J, VMF, and GPS datastreams.  The message format and reporting rules for TADIL-J, VMF, and GPS are stored in a text file and parsed on boot up.  This allows rapid reconfiguration of the track server by simply editing the textural database stored on the hard drive.  In the case of Link-16 the entire MIL-STD-6016 is available in electronic format and was converted to an ASCII file.Figure 6 is an overview of the text parsing architecture.  The data link messages and data link navigation data are parsed based on rules in the MIL-STD-6016 database.  Software initialization includes a function that converts the ASCII 6016 database into internal message structures.  Once the structure of each TADIL-J word has been parsed into memory (approximately 5 seconds for all of TADIL-J, GPS, and JTIDS Navigation) the system is ready to translate hex data on-the-fly. The hardware interface to the current Link-16 hardware, "JTIDS Class-II" terminal, is a MIl-STD 1553 interface and runs on a 50ms cycle time.  The 1553 data packets are read into the notebook and translated in into TADIL-J messages each cycle.  The messages are then sent to the track server and made available for access via SQL-J.Figure 6.  Text Driven Software5.3 Realtime Track ServerThe realtime track server is an in memory database of Link-16 tracks, commands, and Navigation data.  As shown in Figure 7 the database structure hides the complexity of Link-16 or any other datastream.  Link-16 is probably the most complex datastream,  one track can be spread across several 1553 messages and all the track data is  not transmitted each time.  Generally lat, long, and alt are transmitted with every track, but other track amplification data is only transmitted when there is change.  The track management function includes coordination of the tracks as well as managing drop track, associate track, and ID/IFF conflict data.Figure 7.  Track Server Architecture5.4 Mission Recording and PlaybackMission Record is performed as a separate thread under Windows NT (See Figure 8).  The actual 1553 data packets are streamed onto the disk, not an interpretation of the TADIL-J data.  This technique does require more disk space, however, it guarantees accurate playback of the data.  The 1553 packets are time-stamped and a 20:1 compression ratio is achieved when writing to the hard drive.  A six hour mission requires about 500MBs of disk space.  Multiple datastreams can be written to the hard drive and are stored in their native format; 1553, Ethernet, etc.  Compression also helps reduce the throughput requirements of the hard drive.  JMMTIDS is notebook based, so optimizations have been made throughout the system to match the performance of  notebook hard drives and graphics displays.Mission Playback can be performed in one window while the tactical display is updating in a second window.  The SQL-J call to the playback mechanism is identical to the SQL-J call to the live feed with one exception, a filename is requested. This "realtime" playback functionality was designed to support Search and Rescue.  The last radar track on a down aircraft can be quickly located and analyzed while the AWACS or E-2C is still in the air and on-station.  Search and Rescue can being immediately with a well defined aircraft  track.Figure 8.  Track Server ArchitectureThe playback mechanism is also the engine that drives Realtime Mission Playback of Link-16 data into a DIS environment.  This is described in Section 6.05.5 COTS Interfaces to DatastreamsAs stated earlier, all the software modules in the JMMTIDS system are COM compliant.  The component object model allows programs written in Visual Basic, Visual C++, and any other language to exchange structures of data.  The advantage of COM in the JMMTIDS architecture is that it allows modules to be developed independently and then re-assembled for testing and final delivery.  Individual COM objects can be upgraded without impacting the other objects in the system.  COM Objects are registered in the Windows NT registry allowing access by multiple software modules.Developing in the COM environment makes available all the commercial software interfaces that are standard with Windows NT.  Figure 9 is a representative protocol stack for Windows NT.  DCOM Interface defined in Figure 9 is an abstraction layer above all the networking infrastructure, but below the application layer.  DCOM allows seemlessly distributing software modules across Local networks or via the NT Remote Access Server Wide Area Network Internet protocols.Figure 9.  JMMTIDS COTS interfaces5.6 DCOM, Network Interfaces between software modulesDCOM is the "distributed" version of the Component Object Model.   It allows separating the COM objects across a network.  Although TCP/IP is the preferred network in most cases, DCOM is not limited to a specific network.  As depicted in Figure 10, in the JMMTIDS architecture, DCOM enables separating the Moving Map client from the Track Server without writing any software.  DCOM objects can be relocated as required.  Although primarily a Windows product, DCOM is also available on a variety of Unix platforms. Figure 10.  DCOM Network Aware SoftwareDCOM is an enabling technology, it makes available to the software developer a network and programming language independent interface to the huge array of commercial software products.  Specific to JMMTIDS, DCOM allows using Microsoft flight simulator to fly-thru the Moving Map.  Since each DCOM interface appears as a unique stream in the JMMTIDS architecture, Flight Simulator can be used to fly thru a playback stream.  6.0 Live AssetsThe JMMTIDS system is designed to be a portable tactical display for Link-16 and other data links.  Although this is the primary focus of the seven pound notebook system, the architecture can easily be expanded to read and write HLA/DIS tracks.  To read a new datastream the message format is created in ASCII text format and stored on the hard drive.  For DIS PDUs this can be performed from the existing electronic versions of the messages.  JMMTIDS already supports TCP/IP interfaces and no additional development would be required.  As depicted in Figure 11, to retrieve and display the tracks the client would make the same SQL-J call that is used for other datastreams.  Figure 11.  HLA Datastream in JMMTIDS6.1 Track Conversion from Link-16 to HLA/DISTranslating Link-16 tracks into HLA objects or DIS PDUs is similar to the Link-16 to VMF conversion function currently existing in JMMTIDS.  This function is performed by a translation engine that currently resides on the track server notebook.  This allows carrying the notebook onboard an aircraft and exchanging TADIL-J and VMF messages.Figure 12 describes the modification required to the JMMTIDS system to handle translation of Link-16 tracks to DIS PDUs or HLA format.  In the case of PDUs, their format would be added to the parsing engine.  The rules for translating Link-16 tracks to DIS tracks would be stored in the translator.  As with the other modules, the rules are stored in a text file and can be easily edited.  As with the current system the track manager would allow SQL-J clients to make one call and receive all the TADIL-J, VMF, and HLA/DIS tracks.Figure 12.  Link-16 to HLA/DIS Track Conversion6.2 Injecting HLA/DIS tracks into a Link-16 networkReading HLA/DIS tracks and returning them to the JTIDS terminal for transmission over a live Link-16 network is non-trivial.  Since each Link-16 track requires accurate navigation data, the track server would be required to perform the equivalent of the relative navigation equations.  The difficulty of injected realistic tracks into a Link-16 network are defined in previous work [4], "...realtime tracks in a TADIL-J host will time-out if not updated, decorrelate if not in the Link-16 relative navigation grid, and require ongoing track quality updates." For low end mission rehearsal systems reporting non-realtime tracks over the Link-16 live network is an effective solution.  In addition to Link-16 sensor tracks, the ownship position of the JMMTIDS simulator can be injecting into the network with track quality set to zero (i.e. non-realtime track) and the track indicator set to exercise.  Reporting all HLA/DIS tracks as non-realtime has several advantages:They will not adversely effect host computers correlation algorithmsThey will not be confused with live sensor tracksThey update and traverse appropriatelyConverted HLA/DIS tracks into non-realtime Link-16 tracks enables 90% of the functionality for 10% of the cost.  The cost of realism is constantly debated, but clearly a notebook system that allows training with live assets is far more functional than a complete realtime simulator that is left behind when the fleet deploys.  Non-realtime tracks eliminate the "expensive" CPU cost of Kalman filtering and Link-16 track quality management.  At issue is whether this approach can improve fleet readiness, and even though non-realtime "Red" forces, Emergency Tracks, and Mission assignments could still injected into a live Link-16 network.  The functionality required to enhance training would still be available.7.0 CONCLUSIONThe push to connect the warfighter is on.  Each year warfighting exercises add additional data links and bridges among them.  Extremely low cost Tactical Display systems like JMMTIDS are enabling all the warfighters to participate in the battlegroup data link architecture.  The warfighters cannot afford to wait for simulators that model their data link, they have already implemented tactics that require data link connectivity.  Unfortunately, accurate Link-16 simulation is several years away and simulation of the multilink environment of Link-16, VMF, CEC, and IDM interacting is much further away.  Figure 12.  Mission PlaybackUsing pre-recorded "live" tracks (See Figure 12) for mission rehearsal is a cost effective near term solution to the warfighter’s training requirement.  The current generation of pilots, flight officers, and air controllers are more familiar with Flight Simulator '98 than with their own tactical full motion flight simulators.  JMMTIDS leverages their experience successfully blending COTS flight simulator products with legacy military hardware.REFERENCES[1] Wilson, J.: "New pilotless aircraft to push the bounds of data links, electrical technology". Military&Aerospace Electronics, Vol 8, pp9, December 1997.[2] Yanni, P.: "Modeling Comm Planning and Advanced Datalinks in the DIS/HLA Environment", Spring  1997 Simulation Interoperability Workshop[3]  Dixon, R., "Spread spectrum systems / R. C. Dixon", New York : Wiley, c1976[4] Yanni, P.: "Level of Detail and Culling for advanced data link modeling in HLA", Fall 1997 Simulation Interoperability Workshop[5] La Rocca, D., Strater, J., "Close Combat Tactical Trainer SINCGARS Radio Model Validation", Spring  1997 Simulation Interoperability WorkshopIEEE Std 1278.1-1995 Standard for Distributed Interactive Simulation --  Application Protocols.Roney, K., (1996). "Applying Virtual Prototyping and Advanced Distributed Simulation to Warfighting Needs", Proceedings of the 18th Interservice/Industry Training Simulation and Education Conference (I/ITSEC). November 1996. Orlando, FL.Van Wechel, R.J., Jarrell, R.P. (1994). "Application of GPS Hybrid Live/Constructive/Virtual Training Systems",  Proceedings of the 16th Interservice/Industry Training Simulation and Education Conference (I/ITSEC). November 1994. Orlando, FL. pp. 4-15.ABOUT THE AUTHORPhilip Yanni holds a BSE from the University of Pennsylvania.  He has 13 years of experience in commercial and military avionics and simulation.  He has been Principal Investigator for several HLA/DIS scene generation SBIRs.  In his role as a communications engineer he specializes in developing hardware to bring Internet protocols onboard commercial and military aircraft. He is the project manageer for the JTIDS Moving Map Tactical Information Display System (JMMTIDS).