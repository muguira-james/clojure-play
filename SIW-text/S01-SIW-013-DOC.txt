WARSIM 2000 and C4I Device Initialization Simulation Interoperability Workshop Paper 01S-SIW-013SAIC document number SAIC-00/7751&00 WARSIM 2000 and C4I Device InitializationJude AnthonyScience Applications International Corporation12479 Research PkwyOrlando, FL 32826407-306-4328Jude.J.Anthony@cpmx.saic.com Keywords:Distributed Systems; Interoperability ABSTRACT: WARSIM 2000 is a distributed simulation meant to replace the Army's current CBS simulator and represent the Army in JSIMS.  Although it does not currently use HLA as its underlying architecture, it is mandated to do so at initial operational capability in FY 2002.WARSIM 2000 supports the Army's directive to "train as you fight" by using a unit's native C4I devices as the unit's interface to the simulation.  As such, it must initialize the C4I devices to correspond to the simulation's data.This paper describes the ongoing efforts to allow WARSIM to initialize those C4I devices.  It presents some lessons learned in the process, and explains the direction future WARSIM development is expected to take. 1. IntroductionWarfighter’s Simulation (WARSIM) 2000 is a distributed simulation supporting the Army’s “train as you fight” directive.  One of WARSIM’s objectives is to reduce the time needed to prepare for an exercise.  WARSIM scenario generation tools allow for rapid simulation scenario development, but historically the Command, Control, Communications, Computers, and Intelligence (C4I) devices must be prepared manually by the device operators.  To overcome this time consuming and error prone task, WARSIM requirements mandate an automated C4I device update capability.   This automated capability, dubbed “download”, is also useful for initializing TA C4I devices when the simulation restarts from a previous checkpoint, or a TOC is added to the simulation while it is running.To avoid contradictory information from  sources other than the simulation, WARSIM’s C4I Interface (C4II) completely reroutes all outside communications of the Tactical Operation Center (TOC) to the simulation.  This isolates the TOC from all inputs other than those provided by WARSIM, allowing the simulation to completely control everything the training audience (TA) sees and hears.  This isolation minimizes the differences between an exercise and an actual conflict[1], but it also requires WARSIM be capable of downloading all the data necessary for the TA’s C4I devices to operate properly.This paper examines some characteristics of the data transferred in the download exchange, including the storage of that data within WARSIM and the TOC.  It explains the methods WARSIM currently uses to initialize the C4I devices, discusses the methods planned to implement download in the future, and lists some of the lessons learned thus far during the implementation of WARSIM download functionality.2. Download Data2.1 Perceived TruthTo closely model the behavior of real units, WARSIM implements the concept of “Perceived Truth.”  Each unit has its own set of facts dealing with all aspects of the simulated environment, such as its location and condition, the location and condition of other friendly and enemy units, and the existence of terrain features, such as bridges and minefields.  Simulated units make decisions based on this perceived truth, as opposed to using the actual simulation data, or “Ground Truth.”  The perceived truth may be incorrect or incomplete, just like a real-life unit’s data, causing the simulated unit to make an incorrect decision.  In a non-distributed simulation, incorrect decisions can be simulated by probabilities.  Since the entire simulation runs in a single executable, it is easy to account for mistakes and simulate their effects. In a distributed simulation, the decision of a single simulated unit may affect thousands of other units, running on other computers.  Some of these computers may even be predicting future behavior of simulated units.  It is much harder to synchronize all the computers to allow for mistakes generated by probability.  By allowing each unit to have its own perceived truth, incorrect decisions can be easily simulated.In actual operations, no unit knows ground truth.  Therefore, when we initialize the C4I devices, we want to use the perceived truth of the unit representing the TA in the simulation.  The isolation of the TOC is beneficial to this process, since the C4I devices can be initialized without respect to other TOCs or simulated units.  This allows WARSIM to download the perceived truth of a single unit, instead of the ground truth of the entire simulation.  2.2 The World ModelSince the vast majority of an actual unit’s data may be contained in the Joint Common Database (JCDB), it seems obvious that simulations could gain great benefits from using the JCDB as their primary data store.  It would certainly make C4I device initialization easier, since the entire database could be transferred without any translation or formatting.   EMBED Word.Picture.8  In fact, WARSIM did consider using the JCDB for the perceived truth of simulated units.  However, the storage requirements for the JCDB are hefty; C4I devices use eight gigabytes of disk storage for the database.  Historical entries take up the vast majority of this space, of course.  However, the JCDB does not allow data sharing, so each simulated unit would require a separate JCDB to hold its perceived truth, as shown in figure 2.1.  With a requirement to run more than 100,000 units in a single simulation, and up to 1,000 units on a single computer, WARSIM designers realized that they needed to optimize the storage requirements of simulated units.  The data needed to be stored in a single database, referenced by multiple units.  The perceived truth of a simulated unit would then be composed of a set of these facts, thereby allowing the perceived truth of multiple units to overlap, as shown in figure 2.2.  The WARSIM designers made their own data store, which they called the World Model.  The World Model will allow simulated units to share data in a way the JCDB does not, and will keep storage requirements to an acceptable level. EMBED Word.Picture.8  3. How WARSIM Downloads3.1 Early AttemptsArmy Battle Command System (ABCS) 5.0 included the JCDB on all C4I devices supported by WARSIM.  To test the feasibility of download, we developed a small download application designed to reside on a Maneuver Control System (MCS).  The C4II software would collect data including each simulated unit’s UIC, location, speed, and direction.  The C4II would then telnet to the MCS and run the download application, transform the data into units used by the MCS, and use the collected data as parameters to the download application.  The download application used the JCDB Application Programming Interface (API) to insert the data into the JCDB.  The MCS then used System Replication (SR) to send the data to other C4I devices within the TOC.This approach worked well, although we realized that textual parameters were not suitable for large data transfers.  We imagined using a socket interface for our finished product.  We further imagined that data not contained in the JCDB could be inserted through Standard Query Language (SQL) accesses to the C4I device’s database, since the database application could be programmed with access to the database.  However, this approach was unacceptable under ABCS 6.0 security regulations.3.2 ABCS 6.0With the advent of ABCS 6.0 came new security regulations prohibiting “back doors.”  Because the download application acted as a back door, it was no longer acceptable.  We learned one of our first lessons with respect to C4I device initialization: the difficulty of designing a simulation to interface with devices that were upgraded frequently[3].  We redesigned WARSIM’s download capability by adding a JCDB to the C4II.  The isolation of the TOC allowed us to place our own router between the TOC and the simulation, thus allowing us to include the C4II computer as a part of the TOC network.  A few modifications to the SR data allow the C4II’s JCDB to be acknowledged as any other C4I device’s JCDB.At this point the download application is no longer a back door, but a part of the C4II software.  The C4II collects the data to be downloaded, translates it, and inserts it into the JCDB using the JCDB API.  The SR software duplicates the data to the MCS and other C4I devices in the TOC.  This approach is still being developed, and seems feasible for the near-term.  WARSIM has made progress on the modifications necessary to SR data and routing tables.  Only units controlled by a TA require a JCDB, thus keeping storage requirements to a minimum.  The approach does not violate ABCS 6.0 security standards, making it a reasonable design for the near future.However, the only data transferred in this approach is JCDB data.  All the C4I devices (except the MCS) have data that is not represented in the JCDB; we call this “device-specific data.”  An additional approach is necessary to initialize device-specific data.  In some cases, real-world C4I devices exchange device-specific data with other C4I devices via automatically processed messages.  This is the case for All Source Analysis System (ASAS) devices, for instance.  In these cases, WARSIM uses the Common Message Processor (CMP), a Defense Information Infrastructure Common Operating Environment (DII COE) component, to create an appropriate message (in the case of the ASAS, a W007 message is used; for the Combat Service Support Control System (CSSCS), multiple USMTF-like messages are required) and sends the message to the appropriate C4I device.  The CMP is the same message processor used by the C4I devices themselves.  The C4I device then processes the message, adding it to the C4I device database, where it becomes a part of the TA’s perceived truth.While this approach has advantages, it does not cover all C4I devices supported by WARSIM, nor is all data in a given C4I device initialized by messages.  For instance, the Air and Mission Defense Work Station (AMDWS) and Advanced Field Artillery Target Data System (AFATDS) either do not use messages for initialization, or have been unable to provide the format of the initialization messages.  This was another lesson for us:  many C4I devices lack a defined, published, and stable interface [3].To handle these situations, WARSIM needs yet another data conduit.  In discussions with the DCARS team, WARSIM designers discovered the Data Collection Module (DCM).  The DCM is a DII COE component, installed on all ABCS 6.x systems, used by the DCARS data collection software.  It receives commands from a Data Collection Gateway (DCG) and executes those commands on its behalf.  In the DCARS system, this capability allows a simulation to read data from C4I device databases and system files in support of After Action Review (AAR) activities.  The DCG sends the DCM a collection of SQL statements and system commands appropriate for the C4I device type and version upon which the DCM resides.  The DCM uses the data sent to it from the DCG to perform its data collection activities.  It can be commanded to collect data regularly or upon request.  The DCM is not restricted to SQL statements and system commands that read data from the C4I device.  By modifying the SQL commands to insert data into the C4I device database, it could be used to initialize C4I devices.  Knowledge of the C4I device database schema is required, of course.  With the DCARS team’s support, we analyzed the possibility of creating a system to take advantage of the DCM capabilities and insert data that could not be accessed through the JCDB or initialization messages.  We determined that WARSIM could create its own DCG, which would be completely separate from the DCARS system.  The WARSIM DCG would accept commands from WARSIM, without operator intervention.  WARSIM would limit the SQL statements and system commands used by the WARSIM DCG to the systems and versions supported by WARSIM.  All code and data would be the sole responsibility of WARSIM.In this design, the C4II collects data from the simulated unit, then translates and hands it to the DCG.  The DCG sends the data to the DCM on the appropriate C4I device, which inserts the data into the C4I device database.  Thereafter it is part of the TA’s perception.Development of the WARSIM DCG has been delayed in favor of other WARSIM development.  Given access to the DCARS source code, WARSIM can rapidly develop a WARSIM DCG and data store to support its download requirements.Figure 3.1 shows the full data flow diagram for WARSIM download.  Note that although the diagram only shows communication with the MCS, the DCG and CMP can communicate with any C4I device in the TOC, while the JCDB data path uses the TOC server.3.3 Future Download CapabilitiesThe flexibility of the DCM is incredible.  It is capable of initializing all data on a C4I device.  If the WARSIM DCG is implemented and works as well as projected, WARSIM may use the DCM to perform all non-JCDB C4I device initialization in the future.  The only exceptions would be devices for which no database schema is available; among the devices supported by WARSIM, the AFATDS is presently the only such device.In the next ten years, all DII COE devices will access data through a common data access component[2].  Until then, any process depending on access to low-level data structures is susceptible to even minor changes in database schema or system configuration.  In the same way that DCARS keeps and updates a repository of data for data collection purposes, some entity could do the same for C4I device initialization purposes.WARSIM has proposed making a reusable DCG and  data repository.  This would entail an API to access the DCG, and convenience functions for data used most often by simulations.  The API would allow execution of commands from the repository of SQL statements and system commands, as well as arbitrary SQL commands to support systems and versions not included in the data repository.     The resulting system has been dubbed the Army Standard Database Synchronization Module (ASDSM), and it is being considered for funding.  If implemented, any simulation could easily initialize C4I devices simply by linking with an ASDSM library file, supplying an SQL repository for the C4I devices supported by the simulation, and making appropriate calls to the ASDSM API.  The library file would contain the WARSIM DCG, which would be controlled through the ASDSM API.  The data repository would be updated with data for other devices and versions as simulations required it.Another possibility for the future of WARSIM is the C4I FOM.  Since the FOM represents a data structure, it could be used to initialize C4I device data.  It is also a starting point for data translation.  However, the schedule for the C4I FOM implementation on C4I devices does not overlap the WARSIM development schedule, so this is not expected to become a method of data initialization.5. ConclusionThe current download process, involving JCDB, messaging, and possibly a custom DCM interface, is expected to work well for the devices supported by WARSIM, with exceptions as noted.  The author believes that simulations could more easily implement C4I device initialization if the message and data formats of C4I devices were defined and published.  The capability of the DCM to access C4I databases creates the possibility of complete, automatic C4I device initialization.  Implementing a published interface to the DCM with a useful repository of DCM commands, such as the proposed ASDSM, would provide simulations with an easily implementable solution for C4I device initialization.4. References[1]	M. Newcomb, J. Gustafson, P. Nguyen: “The WARSIM 2000 C4I Interface”  Paper 99F-SIW-036, 1999 Fall Simulation Interoperability Workshop, 1999.[2]	M. Hieb, R. Sprinkle: “Simulation Infrastructure for the DII COE Architecture: The Army Vision”  Paper 00F-SIW-35, 2000 Fall Simulation Interoperability Workshop, 2000.[3] J. Brennan, E. Smith: “M&S-C4ISR Interoperability/Synchronization Issues and Potential Solutions”  Paper 01S-SIW-094, Spring Simulation Interoperability Workshop, 2001.Author BiographyJUDE ANTHONY is an SAIC Software Engineer working on the WARSIM project at the Lockheed Martin facility in Orlando.  Jude graduated with a Bachelor of Science degree in Computer Science from the University of Central Florida.  As a member of the WARSIM 2000 C4I CSCI, Jude is responsible for designing and developing WARSIM’s download capabilities. EMBED Word.Picture.8  