Building Flexible Software for Today’s Distributed Mission Training TestbedJason CoxJeremy Hendrix, Captain, USAFRobert A. CaseAir Force Research Laboratory,Warfighter Training Research Division6030 S. Kent St., Building 560Mesa, AZ  85212-6061480.988.9773 x477, x227, x425 HYPERLINK mailto:jason.cox@williams.af.mil jason.cox@williams.af.mil,  HYPERLINK mailto:jeremy.hendrix@williams.af.mil jeremy.hendrix@williams.af.mil,  HYPERLINK mailto:robert.case@williams.af.mil robert.case@williams.af.milKeywords:HLA, DIS, DMT, NT, NIU, operator, controller, director, record, debrief, legacyABSTRACT: The Distributed Mission Training (DMT) Testbed requires software that allows users to control simulator state, record simulated missions, and debrief using these recordings. The Warfighter Training Research Division of the Air Force Research Laboratory (AFRL/HEA) achieves this functionality with the DMT Control Station (DCS).  In building the DCS software, today’s developer faces a dual-sided challenge.  The DMT engineer must produce software that is compliant with the High Level Architecture (HLA) standard, while maintaining a tested and reliable system needed to support the current training community.  Provisions must exist for the Distributed Interactive Simulation (DIS) protocol and HLA if the software is to fully support training and research at AFRL/HEA.  To efficiently meet both requirements, the developer needs an internal record format independent of network protocol.  This is provided by the AFRL/HEA network interface unit (NIU), which defines a network independent common data format, along with translations to any required network protocols. Using the AFRL/HEA NIU, the DMT engineer can develop DCS code independent of the underlying network protocol.  The DCS controller module can issue commands in the NIU’s independent format, allowing the NIU to translate and send them using the required protocol.  A data collector module can record the data in the independent format, allowing post-processing and debrief tools to be written free of any network protocol requirement.  This implementation also enables the DMT developer to easily support new Federation Object Model (FOM) definitions and changes to existing FOMs, since the NIU provides the new or updated translations.  However, data could be lost in translation, and this impact needs to be addressed.These issues are at the forefront of what drives software development in support of the DMT Testbed at AFRL/HEA.  To meet the needs of a continually evolving modeling and simulation community, engineers must develop code that can likewise evolve.  This paper will discuss how the DMT developer has done this in production of the DCS.1. BackgroundTo understand the perspective of the Distributed Mission Training (DMT) Testbed engineer, it is important to have a brief overview of the DMT Testbed at the Air Force Research Laboratory's Warfighter Training Research Division (AFRL/HEA) located in Mesa, Arizona.1.1 General overviewAFRL/HEA is part of the U.S. Air Force Research Laboratory’s Human Effectiveness Directorate within the Air Force Materiel Command (AFMC).  The Warfighter Training Research Division is the USAF’s premier organization for research and development in warfighter training techniques and technologies.  The division’s mission is to “develop, demonstrate, evaluate, and transition training technologies and methods to train warfighters to win.”  The mission is accomplished through an open, collaborative environment in which government, academia, and industry team with users and customers to develop and exploit new technologies, applications, and environments that will support the warfighter. The collaboration is designed to improve development, validation, and transition of needed training products to users, customers, and solution providers supporting the premise of “training the way we intend to fight” and recognizing that “training is the peacetime manifestation of war.” [1]1.2 Distributed Mission TrainingThe need for realistic training is precipitated by concerns of aging aircraft, training environment encroachment, expanding ops tempo, and cost.  Using advanced training technologies, the DMT integrated, scaleable and synthetic environment can be used to supplement “live-fly” aircrew training.  DMT increases training capability by allowing multiple players at multiple sites to engage in common scenarios ranging from individual training and team exercises to full theater-level battles. [2]DMT is, simply stated, a shared training environment comprised of live, virtual, and constructive simulations allowing warfighters to train individually or collectively at all levels of war. DMT allows multiple players at multiple sites to engage in training scenarios ranging from individual and team participation to full theater-level battles. [3]2. DMT Control Software Requirements2.1 Operational requirementsAt AFRL/HEA, DMT software is required to support multiple functions.  These functions include controlling simulators, pilot direction, data logging, debrief, and data analysis.  The DMT Control Station (DCS) meets these requirements.  DCS is a Windows NT 4-based application that provides support for required DMT software operations.A DCS operator uses the software to send locations and weapons store information to simulators.  The mission director uses DCS to direct traffic in the simulated world, via range, bearing, and altitude information provided by a three-dimensional map.  Any operator or director can remotely control the DCS data logger in recording simulated missions, and DCS can later be used to playback or analyze data from recorded missions.In the DMT console, the DCS executable is run on a number of different computers in order to support these multiple functions.2.2 Network requirementsBecause the High Level Architecture (HLA) has become a required element of Department of Defense (DOD) modeling and simulation (M&S), AFRL/HEA has begun to support the HLA in its simulators and software suites.  However, AFRL/HEA must constantly operate in support of training exercises that require a highly reliable simulation environment.  The HLA-based system does not yet provide the same level of training, as do existing simulator systems.  Most training activities are still supported under the Distributed Interactive Simulation (DIS) network protocol.  Thus, in developing DCS, the engineer has to support both the HLA and DIS.2.3 HLA complianceDCS software, along with the AFRL/HEA simulators, has to be HLA compliant.  Under DOD mandate, AFRL/HEA has had both the simulators and DCS software certified.  To date, AFRL/HEA has taken part in the Tasmanian Devil (TAZ) Working Group, experimented briefly with the Real-Time Platform Reference (RPR) Federation Object Model (FOM), and investigated the usage of an agile FOM interface.  To easily support multiple FOMs, the DCS developer prefers a single low-level interface to simulated data.2.4 DIS supportRegular training exercises, involving the simulators and threat generators, are all run under DIS.  The DCS software suite has been targeted to replace current control, director, logger, and debrief software.  This requires the DCS developer to provide support for DIS to maintain the training capability provided at AFRL/HEA.  Having to support DIS and HLA demands the DMT developer to utilize one single low-level interface to simulated data.2.5 What this paper is not aboutThis paper will discuss usage of the AFRL/HEA Network Interface Unit (NIU), which is a software library utilized by DCS that serves as the interface to the network.  The NIU supports all low-level network operations for both the DCS software and simulators at AFRL/HEA.  The inner workings of the NIU are a separate issue and discussion of them is left to the AFRL/HEA NIU developer.  Within the scope of this paper, the AFRL/HEA NIU is considered a black-box library, made use of only through an application programming interface (API) and record definitions.   This paper is intended to discuss the kinds of software that the AFRL/HEA NIU enables the DMT software engineer to develop.2.6 Peaceful coexistenceTo fully support both the HLA and DIS, the DCS engineer requires the ability to interact with the network in a manner independent of not only FOM definition, but of network protocol altogether.  The AFRL/HEA NIU provides this ability in the form of a set of common data formats, which are defined independent of network protocol.The NIU, as previously mentioned, is a software library utilized by DCS that serves as the interface to the network protocol in use, whether it is DIS or a given HLA FOM.  The NIU defines the common data formats, and provides translations between them and any required network protocol.  This allows the DCS engineer to develop software independent of any network protocol.Recall that for the purpose of this paper, the NIU is considered a black box.  The DCS developer only has access to the NIU’s API and the internal record format definitions.3. Common Data Format UsageThere are numerous advantages to using a common data format in developing DMT Testbed software.  All DCS operational modes can make use of the common data format when performing network operations, letting the NIU translate to the proper protocol.3.1 Usage in command and controlThe DCS controller module issues commands to the simulators.  Examples of commands include freezing and unfreezing the simulators, passing them initial condition data, and sending mission names to threat generators.In DIS, unfreezing a simulator involves sending a StartResume protocol data unit (PDU).  In the TAZ FOM, it involves sending an ExerciseResume interaction.  The DCS software developer can simply issue an internal StartResume record, which is one of the common data formats.  The black-box NIU then provides a translation to the DIS StartResume PDU or the TAZ ExerciseResume Interaction, whichever is called for.  All simulation management-type records can be handled in such a fashion, allowing the DCS engineer to develop command code free of network protocol constraints.Similarly, consider the usage of entity type records.  Under DIS, simulators send out whole Entity State PDUs in order to update the other players of changes in an entity’s state.  Under HLA, the RTI only passes through those attributes that have been updated on entity-type objects.  The NIU always provides a complete common data format Entity State record to the host, allowing any update to provide DCS with a complete set of entity information.  This provides DCS (and any other host code) a complete picture of any object at any given time, which is something quite important when maintaining a map or in during a debrief session.3.2 Usage in recording and playbackLogging data for playback independent of network protocol is important at AFRL/HEA.  The DCS logger records data in the common data format.  Having log files that are not tied to a specific FOM definition enable great flexibility in using existing and new software tools in debrief.For example, many legacy debrief software tools at AFRL/HEA run under DIS.  The DCS software can record a simulated engagement under the TAZ FOM and then play that log file back over a DIS network.  This provides a great opportunity for the legacy tools to be reused in support of debriefing activities.  Likewise, data analysis tools can be used in a variety of different ways that take advantage of a common data format.Virtual Technology Corporation (VTC) markets a data collection tool, called hlaResults, that is HLA compliant and runs under whatever FOM definition a user provides it.  Suppose hlaResults provides an extremely useful function, something not already supported in software at AFRL/HEA.  For the sake of argument, assume the ability to export data into a Microsoft Access database is required for certain data analysis.  The DCS software can be used to record a training exercise under DIS, and then play that log file back under the RPR FOM (or any other FOM that supports the required data needed in analysis).  The hlaResults software can also run during playback to collect data from playback of the simulated engagement.  This allows AFRL/HEA to use hlaResults for data collection and analysis support under DIS, enabling users to generate Microsoft Access databases for use in analysis by human effectiveness psychologists.3.3 Support of new and updated FOM definitionsAs new FOMs are defined and existing FOM definitions change, the DCS software easily maintains compatibility.  However, the DCS software does not fully support a new or changed FOM until the NIU does, as it provides the necessary translations.  This has a positive effect of containing code changes and additions within the NIU, along with relegating the FOM development to the NIU engineers.The DCS software developer’s only concern is that the NIU supports a given FOM definition.  Of course, it also possible that modifications to a FOM or implementation specific details causes something to be changed in the common data format.  In these occasional incidents, users of the NIU may need to update code in order to operate under the changes.  The lesser the impact on host code (DCS and cockpits), the better. 4. Problems and Lessons LearnedThe AFRL/HEA solution to a multifaceted network environment has not been perfect.  As always, there are caveats and imperfections in both design and implementation.4.1 Conceptual differencesOne set of problems faced by the DCS software engineer exists in basic conceptual differences between the HLA and DIS.For example, DIS operates on a timeout principle.  If an entity does not put out any information within a certain period of time, other entities are supposed to consider that entity timed out and no longer available on the network.  In HLA, the RTI manages all federate interaction.  Federates only receive updates on information that has changed within other federates.  It has proven difficult to keep the RTI execution stable if a federate does time out.  It certainly doesn’t inform other healthy federates that a given one has gone out of touch.  The RTI simply stops sending out updates to the other federates.This could require DCS (or the NIU) to implement its own feature for handling timeouts of federates under the HLA (and therefore entities under DIS).  Problems can arise if a federate is actually still active, but simply not sending out updates to the RTI.  DCS, not receiving an update from the NIU in the form of an Entity State record, may think a federate has timed-out, when in reality it is simply frozen or not moving.  Currently, the DCS identifies federate deletion when the NIU sets a deactivate bit in subsequent Entity State records after the RTI notifies federates of another’s removal.4.2 Potential data loss in translationAnother problem faced by the AFRL/HEA software engineer is that of the potential loss of data when translating record formats from one network protocol to another.Consider the entity identification methods of DIS and the HLA.  DIS makes use of a standard entity identification attribute, a 48-bit value that encapsulates site, host and application numbers.  Under the HLA, there are potentially two ways to identify federates.  The RTI handle, a 32-bit value, is always a unique identified, but changes with each execution of the RTI.  Secondly, Federations may define additional entity identifiers in the object model that may or may not correspond to the DIS-type identifier.  Problems for DMT software arise when using the RTI handle as an identifier.  Control software and stealth viewers run during playback both require advance knowledge of an entity’s identification value.  The traditional method for this requires static entity identification, something not provided when using the RTI handle as an identifier.For instance, the common data format defines an Entity State record.  This record contains an entity identification value (based on the site-host-application DIS paradigm).  In the TAZ FOM, the entity-type objects do not contain an equivalent entity identifier.  In the original definition of the FOM, the Run-Time Infrastructure (RTI) handle was used to identify entities.  Specifically, the NIU had to translate between a 32-bit RTI handle and a 48-bit site-host-application structure.  This caused a problem for controller software, like the DCS, because foreknowledge of an entity’s identifier is paramount when sending information to a specific entity, such as a set of initial conditions.  The RTI handle changes with every execution.  The controller never knew what the RTI handle was going to be, and thus had no foreknowledge of controllable entity identification.  This translation did not offer support for the site-host-application information needed to pre-identify an entity on the network.  The solution for DCS involved interfacing with the simulator developers and having them encode the site-host-application information in the federate’s marking string.4.3 Compatibility with third partiesEarlier, a method in which to make use of VTC’s hlaResults tool with DIS exercises was described.  Other HLA tools may exist that can be utilized in a similar fashion (record an exercise under DIS and playing back to a tool under a specific HLA FOM).  However, there may also be tools that aren’t usable, in any manner, under DIS.Also, potential data loss problems, along with certain conceptual differences, may prohibit usefulness of a log file recorded under DIS and played back through a specific FOM.  The same problems exist for third-party DIS tools, should a DCS user wish to record an HLA execution and play it back under DIS.Lastly, some tools may not be as flexible as hlaResults, which can read any “.fed” file and run with minor, if any, tweaking.  In general, no code changes are required to get hlaResults running under a given Federation.  However, some tools may be written for a specific FOM, one that may not be suitable for translation from DIS to the HLA.  These limitations and their impact on the DMT Testbed must be considered.4.4 Final thoughtsDespite the best intentions of the AFRL/HEA NIU implementation, problems continue to exist.  A future HLA FOM could define support for a concept that has no meaning or hope of implementation under the DIS protocol.  The time needed to interface multiple FOMs and DIS under the same tool set may not be practical in all cases.  Lastly, DMT developers can’t accurately predict the future of modeling and simulation, and an entirely new concept or paradigm may emerge that invalidates some or all prior work.  This is unlikely, but it is possible.There is no total solution, yet the DMT developer feels that the AFRL/HEA NIU is a powerful software library that enables development of practical and diverse usage of both the DIS protocol and the HLA in the DMT Testbed.  Supporting DIS is a necessary part of everyday life at AFRL/HEA, and that will not change in the immediate future.  HLA compliance is mandated, and in order to interact with other simulation centers in the future, AFRL/HEA must support the HLA and any required FOM definitions.  A solution that supports all of these requirements is not only prudent, but is a powerful step towards the birth of a simulated training environment nearly as dynamic as the modeling and simulation community itself.5. References[1]  Warfighter Training Research Division (2000).  AFRL/HEA Laboratory Introduction [WWW Document]. URL  HYPERLINK http://www.williams.af.mil http://www.williams.af.mil[2] Air Force Research Laboratory, Human Effectiveness Directorate, Warfighter Training Research Division (2000).  [Brochure].  Mesa AZ:  Author.[3]  Warfighter Training Research Division (2000).  Distributed Mission Training Technology and Methods [WWW Document]. URL HYPERLINK "http://www.williams.af.mil/html/dmtdev.htm"http://www.williams.af.mil/html/dmtdev.htm Author BiographiesJASON COX is a Software Engineer at the Air Force Research Laboratory in Mesa, Arizona.  He works for Link Simulation and Training, a division of L3 Communications, a company who contracts for the Air Force Research Laboratory’s Warfighter Training Research Division (AFRL/HEA).  Jason works as one of the Distributed Mission Training Testbed software engineers, primarily responsible for the DMT Control Station software.  He has a B.S. in Computer Science from the University of Arizona and is currently pursuing a Masters of Computer Science from Arizona State University.CAPT JEREMY HENDRIX is an U.S. Air Force communications officer assigned to the Air Force Research Laboratory’s Warfighter Training Research Division (AFRL/HEA) in Mesa, AZ.  He is the HLA transition team leader for AFRL/HEA.  Capt. Hendrix holds a B.S. in Aviation Computer Science from Embry-Riddle Aeronautical University in Daytona Beach, FL.ROBERT CASE is a Senior Software Engineer for the Boeing Company assigned to the Air Force Research Laboratory’s Warfighter Training Research Division (AFRL/HEA) in Mesa, AZ.  He is the developer for the AFRL/HEA NIU.