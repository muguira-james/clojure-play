Suggested RTI Enhancements for Engineering Level Simulation: The Paint the Night Experience Mr. Maximo Lorenzo, Don TidrowCECOM Night Vision and Electronic Sensors Directorate10221 Burbeck Road, Building 309Fort Belvoir, VA 22060703-704-3185 HYPERLINK mailto:lorenzo@nvl.army.mil lorenzo@nvl.army.mil, dtidrow@nvl.army.milJohn LangworthyScience Applications International Corporation4001 N. Fairfax Drive, Arlington VA 22203jlangwor@nvl.army.milKeywords:  RTI, Performance Testing, LatencyAbstract: During the first half of FY 2001, the Paint the Night team conducted a major revision of the Paint the Night and SWISS Together FOM. Extensive system testing in support of the SMART 2001 and FCC2 effort revealed a number of limitations in RTI performance with respect to scalability and reliability. Suggested areas for improvement include: priority queuing, discovery process optimization, 64 bit implementation, gcc compiler support for Windows NT, optimized default .rid file parameters (especially with regard to advisories), queue management, and availability of better benchmark and diagnostic tools. This paper will discuss these issues with respect to their impact on engineering level simulation architecture, focusing on Paint the Night and emerging AMC RDEC FOM development.IntroductionThe DMSO RTI is a powerful tool, whose complexity must be mastered. One of the advantages of the RTI is that it provides a high level tool to communicate simulation data and interactions. However, the RTI’s use necessitates assumptions, which can have a significant and sometimes negative impact on real time performance. The “black box” nature of RTI services complicates usage of these services. For example, data distribution management apparently is intended to be used in a specific manner, however, these services may be used in a manner unintended by the RTI developers.Description of RTI Performance during SMART 2001 and FCC2Impact of RID file parametersAdvisories. Advisories are an optional step in the Declaration Management process. The purpose of advisories is to limit bandwidth utilization in cases where there are few or no federates subscribing to specific object classes, or to regulate object updates. The RTI generates advisories based on events triggered by publishing, discovering, and subscribing federates. When advisories are enabled, the discovery process is significantly lengthened – up to five times longer – due to the RTI generating advisories to publishing federates. In SMART 2001, advisory messages became backed up in the queue during discovery, and it became necessary to disable all advisories in the RID file.(Advisories      (ClassRelevanceAdvisorySwitchDefault Disabled)	(AttributeRelevanceAdvisorySwitchDefault Disabled)	(AttributeScopeAdvisorySwitchDefault Disabled)      (InteractionRelevanceAdvisorySwitchDefault Disabled)	(RelevanceAdvisoryInteractionClassHeartbeatInSeconds Off)	(RelevanceAdvisoryInteractionClassTimeoutInSeconds Off)	(RelevanceAdvisoryObjectClassHeartbeatInSeconds Off) 	(RelevanceAdvisoryObjectClassTimeoutInSeconds Off)	(RelevanceAdvisoryAttributeInstanceHeartbeatInSeconds Off)	(RelevanceAdvisoryAttributeInstanceTimeoutInSeconds Off)	(ProvideAttributeValueUpdateDelayTimeInSeconds 0.0)    )Figure 1 Example RID Entry with All Advisories OffFigure 1 shows an example RID file advisories section with all advisories turned off. The heartbeat and timeout advisories have been explicitly turned off – the default settings do not disable advisories or mitigate problems in discovery(2) Networking. In past exercises, the PST Federation has generally used reliable transport to ensure that critical updates are received by subscribing federates, In FCC2 and SMART 2001, use of best effort was explored to maximize the supportable object/entity count; however, reliable transport remains a viable mechanism for PTN applications. Further experience with the 1.3.2vNG RTI shows that improved polling techniques and greater control over reliable networking parameters would facilitate RTI efficiency.  Discovery. The discovery of large numbers of objects may cause the RTI and those simulation components that are dependent on the RTI to slow down. The FCC2 exercise hosted an entity count varying from 2500 to 5000 objects, many of which were aggregates. This hindered the Paint the Night federation from joining in the exercise in a responsive and timely manner. While the SMART 2001 exercise scenario was significantly less demanding (e.g. with entity counts in the 200 object range), sequencing and responsiveness of joining federates was likewise an issue, since unique scenarios had to be changed in 5 minutes or less. Post exercise reviews at NVESD have benchmarked initialization process times at the five-minute mark…. with RTI and RTI-based applications performance judged by this standard. When linked to an external federation through a gateway, the PST (Paint the Night and SWISS Together) federation discovery process in the current RTI implementation occurs in the following steps:PST Gateway application receives discovery callback from the RTIA PST Object is created to contain reflected updates on the discovered object.The PSTFed gateway requests a “provide” to get the initial attribute values for the discovered object from external (e.g. RPR) federates.The Step 3 request is reflected in the PST gateway, including parsing of binary data and XDR functions. PST uses the 1014 external data representation (XDR) standard, with special purpose software to accommodate byte ordering schemes that lie outside this methodology.NVESD is conducting an ongoing diagnosis of perceived backup in the RTI queue during and after discovery. In FCC2 and SMART, the presence of advisories made such logjams discernable with only about 700 objects in the simulation. However, the disabling of advisories improved this performance sufficiently to function in FCC2, but not within the required 5-minute initialization window. At present, the following possibilities are being explored to trace the cause of suboptimal discovery:Heartbeat conditions in non-HLA applications (e.g. when an RPR-FOM or PST gateway is used to import entity data from a DIS network).Packet loss on the physical network, either an Ethernet LAN or an ATM network using Ethernet emulation. Lag introduced by conversion to and from XDR.Lag in the RTI, including inability to keep up with DIS updates.Although it is important to measure and account for performance degradation due to packet loss or infrequent updates from non-HLA publishers, these often represent externally imposed conditions under which HLA applications must operate. It would certainly be desirable for all HLA applications to use the same XDR standard, but without improved RTI benchmarking tools, it is difficult to isolate RTI-specific lag from application-specific performance degradation, such as might be introduced by XDR conversion. Queue Management. System level testing before, during and after SMART 2001 and FCC2 has demonstrated that, in large scale exercises with thousands of entities, queuing in the RTI can result in the overwhelming of buffers by the sheer quantity of data flowing into the queue.  In such cases, the entire simulation must be restarted because the RTI cannot respond in a reasonable amount of time. Queue management is particularly important to the Paint the Night application, since some information is critical, more so than other less time critical information.  For example, sensor control information that drives Paint the Night sensor image generation is more sensitive to latency (e.g. in the 250 millisecond range) than entity attribute updates.  If some entity attribute updates are slow or lost, dead reckoning algorithms can compensate, whereas if control information is lost, the resultant latency is immediately perceivable by the simulation user. Therefore, a more refined priority management scheme in conjunction with the DDM “regioning” process would facilitate the expansion of HLA into real-time simulation environments with embedded control data passed through the RTI on a “fast track”.  Interest management. While in previous tests by NVESD using DDM, significant performance benefits were observed, the sensitivity of the RTI to regioning updates inhibited the reliable delivery of control information across the PST Federation. NVESD initially attempted to resolve this problem by adjusting the region update interval so that it did not occur as frequently; this provided good performance and responsive publication of control information – however this did not resolve the problem of lag during the 30-60 seconds in which regions were being updated in the RTI. This situation caused the PTN development team to “work around” DDM by setting up an object filter in the PST gateway, limiting the number of objects passed on to PST Federates based on arbitrary bounds which could not be reset without restarting the PTN simulation.  A second filter has been implemented in the Sensor Image Generator (SIG) to limit unnecessary rendering of entities.RTI Deployment and Support. In SMART 2001, two PST applications were hosted on PC platforms. One of these applications, the PTN Sensor Effects federate, uses a Windows NT operating system and is configured to use a gcc compiler. The other application, a TARDEC vehicle simulation was projected to use the NVESD HLA wrapper, in order to be integrated with the PST federation in SMART 2001. The delivery of both of these applications to support SMART 2001 was hampered by lack of gcc compiler support. The configuration of PST Federation applications varied (see Figure 2), from the SMART 2001 configuration, based on a local, Ethernet-only site, to the FCC2 configuration, which combined local and remote applications linked by ATM media across the Defense Research and Engineering Network (DREN). Both configurations involved high resolution and “data dense” terrain databases requiring data paging services in the Sensor Image Generator (SIG), linked to entity generation tools such as OneSAF Testbed. These challenging exercises demonstrated that, with increases in database complexity and database extents, better memory management is needed.  In simulations, contiguous memory allocations are necessary for operation and the ability to page in data as needed.  However, libraries needed for execution may be placed in arbitrary memory locations, in 32 bit systems, impacting the availability of sufficient contiguous memory.  Remapping of libraries is one solution that has had limited success.  In the future, 64-bit memory addressing will be needed to allow for sufficient memory resources needed for high fidelity man-in-the-loop simulations.Figure 2: PTN Deployment Diagram for SMART 2001f. Benchmarking and Diagnostic Tools. Particularly in SMART 2001, the limitations of existing RTI benchmarking and diagnostic tools limited the exercise integrators’ ability to determine the source of latency and bottleneck problems.  In practice, this meant that an inordinate amount of time was spent having individual federates join, one at a time, to determine where and when RTI overloading might occur. This inevitably resulted in individual federates having to troubleshoot problems in an “off-line” mode, in order to keep the simulation network as stable as possible, with minimal risk. Improved benchmarks and new diagnostic tools would greatly improve the flexible integration implementation of HLA applications in large scale exercises, and allow exercise integrators to troubleshoot problems and implement performance improvements at the source, rather than plugging in and pulling out parts.Suggested ImprovementsWith these experiences in mind, NVESD suggests the following RTI improvements could improve the acceptance and utilization of current and future HLA applicationsQueue management. Mechanisms should be developed and improved to support queue management in the RTI. Queue flushing should be supported to flush stale items periodically, or manually. This includes removal of subsequent updates of data lying in the queue. This feature would preserve the ability RTI-dependent applications to operate continuously in large-scale exercises, eliminating the functional disturbance and overhead associated with recycling the application in the midst of an exercise. Priority queuing of designated objects and/or interactions would also facilitate the continuous functionality and employment of control-dependent, real-time or near real-time HLA applications in a scaleable synthetic environment. Declaration Management. The object discovery process needs to be improved so that the discovery of each object occurs more quickly. The simulation should be able to execute satisfactorily with discoveries taking place in a background mode, thereby allowing each federate to function successfully upon joining the federation, rather than “waiting” for the discovery process to complete.Performance Optimization (e.g. DDM).  Performance tuning documentation should be improved, with emphasis on DDM. Such documents should provide examples of “best practices” for application-specific definition of routing spaces, with the consideration on performance impact of regioning updates on subscribing applications.d. Networking Support.  Real-time implementation support could be enhanced by adding a parameter to the .rid file to add control over which network interface to use for reliable traffic. The capability to override .rid file parameters with a view to support for multiple rtiexecs and multiple subnets should be supported. Establishing a hard boundary on maximum tick time should enhance polling mechanisms; also the ability to query how many callbacks are in the tic queue should be added. Concurrent access restrictions from all callbacks should be removed, as is planned by the DMSO RTI development team.e. Cross-Platform and 64 Bit Implementations. The RTI compiler should support CYGWIN, with GCC support for WIN32 applications. A 64 bit RTI implementation should be supported as soon as possible to facilitate improved memory management. Better Benchmark and Diagnostic Tools. RTI benchmark tools should be enhanced to support a large matrix of .rid file options and test conditions, with accompanying data analysis tools to compare results.Conclusion The SMART 2001 and FCC2 represent different levels of acceptance and challenge for HLA-based models and simulations, particularly for NVESD’s high fidelity engineering level Paint the Night sensor simulation, which makes full use of HLA support and services. Because Paint the Night, like many HLA applications is maturing and therefore faces increasing demands for robustness and efficiency, a fully mature RTI must be flexible and easily mastered by PTN developers and users. The adoption of the RTI improvements recommended in this paper will facilitate continued acceptance of HLA, and improvement of simulation functionality and composability. Where appropriate, SISO should consider “best practices” documentation that better describe how to exploit existing RTI features, and to troubleshoot known problems.References:[1] Lorenzo, Maximo, Riggs, B.; Caruso, M., and Muus, M. “RTI Latency Testing over the Defense Research and Engineering Network” SIW Paper Number 01S-SIW-081, March 2001[2} “High Level Architecture Run-Time Infrastructure Programmer’s Guide” DMSO, 21 September 1998[3] Lorenzo, Maximo; Riggs,  B., Caruso, M. and Schell, D. “Integration of Engineering Level Sensor Federation into a Brigade Level C4ISR Experiment Using RTI V1.7” SIW Paper Number 00f-SIW-050, September 2000MAX LORENZO is the Chief of the CECOM Night Vision and Electronic Sensors Directorate Virtual Prototyping Systems Branch. He has a B.S. in Geology from The College of William and Mary.DON TIDROW is an Electrical Engineer with the CECOM Night Vision and Electronic Sensors Directorate Virtual Prototyping Systems Branch. Don is currently the lead developer for the Paint the Night sensor graphics visualization system, which is HLA compliant. He has a B.S.E.E. from Kettering University.JOHN LANGWORTHY is part of the Night Vision Paint the Night sensor simulation development team.  John is the PTN team lead developer for the view control and video transfer federates.  He has also done research in machine learning and semi-automated forces.  He has an MS in electrical and computer engineering from CMU (Carnegie - Mellon University).