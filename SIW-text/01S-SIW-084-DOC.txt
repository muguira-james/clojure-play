An Extensible RTCA Engine for High Fidelity Synthetic Indirect Fire EffectsShawn M. HillisMark V. RahnerSPARTA, Inc.13501 Ingenuity Drive, Suite 132Orlando, FL 32826407-380-0076 HYPERLINK mailto:shawn_hillis@sparta.com shawn_hillis@sparta.com HYPERLINK mailto:mark_rahner@sparta.com mark_rahner@sparta.comSPARTA, Inc.13501 Ingenuity Drive, Suite 132Orlando, FL 32826407-380-0076 HYPERLINK mailto:mark_rahner@sparta.com mark_rahner@sparta.comKeywords:Tactical Engagement Simulation, RTCA, characteristic detonation, simulated flyouts, collisiondetection, TRISS, Non-Line-of-Sight, Geopositioning, A-TES, OICW.ABSTRACT:  A growing number of indirect fire and advanced weapon systems, such as the Objective Individual Combat Weapon (OICW), require simulated munitions flyouts for use in live tactical engagement training systems. These weapon systems increase the need for casualty assessment systems to accommodate the inclusion of indirect fire effects weapons, particularly in force-on-force, infantry level training engagements.  Advanced instrumentation systems are expected to provide an increasing ability to perform high precision geopositioning of players and weapons. The requirement for simulated munitions flyouts combined with the ability to perform high precision geopositioning, implies a requirement to provide high fidelity Real-Time Casualty Assessment (RTCA).This paper describes the design of a high fidelity, extensible RTCA engine that can handle imperfect data and communication errors expected from a real instrumentation system.  The RTCA engine tracks player and weapon positions from instrumentation system data packets. In response to firing events, munitions flyouts are computed with collision detection performed on players and static terrain to determine munitions burst points.  A "characteristic" fragmentation model is used for each munitions type.  This model allows each fragment to be flown out from each munitions detonation.  Efficient algorithms determine which fragments may strike a player thereby quickly removing many fragments from further consideration.  The remaining fragments are then flown out to determine player collisions fully accounting for potential terrain occulting.  Player damage consists of both trauma damage from fragments and overpressure from the detonation.  Trauma damage is calculated for player body parts accounting for any mitigating effects of body armor, and body part damage is combined into a whole body score. IntroductionExisting tactical engagement simulation systems do not adequately address training problems posed by non line-of-sight weapons (M203) and indirect munitions.  For example, laser-based shooter-target pairing systems will not support training with the high explosive munitions of the Objective Individual Combat Weapon (OICW).  This “training gap” will be exacerbated as more advanced weapon technologies are developed; such as smart weapons, guided munitions, and non-lethal weapons; and the need increases to support engagements between physically disparate ranges (e.g., tanks at a CTC attacking a remote MOUT facility).[1]  To support these weapon systems and inter-range play, simulated engagements are needed that include:Simulated environmentSimulated munitions flyoutsSimulated detonation and fragmentationCasualty assessmentTo provide for these simulated events, a simulation system would need to know:Weapon location and orientation at time of fireLocation and orientation of all potential targetsDetailed terrain modelsGeopositioning is the key technology to enable simulated events.[2]  High precision geopositioning will allow for high fidelity tracking of location and orientation of players, weapons, vehicles, and aircraft. Once this data is available, an RTCA engine can determine player casualty assessment from intersections of simulated projectile flyouts and simulated players and include the obscuration of terrain.This paper describes the design of an extensible RTCA engine for processing data from a future, high fidelity geopositioning system.  Scalable algorithms are used to accommodate  instrumentation systems with varying levels of fidelity. Because a high fidelity geopositioning system does not yet exist to drive the RTCA engine, an exercise simulation was developed to drive the RTCA engine and visualize the results.The RTCA engine and the corresponding exercise simulation described in this paper were designed and implemented to support the A-TES STO’s Crossbow Project.  This Project has provided a unique opportunity to analyze and understand the requirements of future RTCA systems.  The design focuses on flexible munitions representations and efficient, scalable algorithms.  This focus is intended to allow future range architectures to gracefully accommodate a wide variety of weapon systems and the inevitable transition from current crude geopositioning systems to full fidelity tracking.[3]Primary Components and Data FlowThe RTCA simulation system has four primary components:Scenario defining “Simulation Truth”Instrumentation SimulationReal Time Casualty Assessment EngineVisualization SystemThe data flow and interrelationships between these four components are illustrated below in Figure 1.The Scenario is the simulation substitute of live players and terrain.  It specifies “simulation truth”. The Instrumentation Simulation is the virtual substitute for range, player, and weapon instrumentation systems that would provide the telemetric data for a real-time casualty assessment system.  The purpose of the Instrumentation Simulation is to model the errors and imperfections that would be introduced by an actual instrumentation system.   It reads the “true” data from the Scenario and injects errors into the data.  The Real Time Casualty Assessment Engine attempts to compensate for errors in the data stream from the Instrumentation Simulation and provides a real-time casualty assessment from player movements, weapon firings, firing events, projectile flyout-terrain collisions, and projectile flyout-player interactions.The Visualization System provides a graphical stealth display of the simulation as players moving in a 3D virtual environment.In Figure 1, dotted lines, dotted boxes, and italicized text indicate components that may be desirable to add in the future but are beyond the scope of the current simulation.  These components include:Dynamic terrain.  The ability to shoot through and destroy terrain obstacles such as windows, doors, and walls would be desirable in future RTCA systems.  This ability to dynamically alter the virtual terrain to match similar changes in the real terrain would enable these specialized events to be included in training scenarios.Weather.  Future RTCA systems may include the effects of weather (e.g., the effects of wind on the flight of munitions).Instrumentation system responding to requests from RTCA system.  As will be explained below in Assumption #2, extreme scaling may require the instrumentation system to provide information in response to queries made by the RTCA system.Player feedback control system.  An RTCA system must provide feedback to live players during training. This feedback must including player incapacitation notification and might include audio indications of simulated events such as detonations.Fundamental AssumptionsTwo fundamental assumptions are made regarding the instrumentation and communication systems that drive the RTCA engine.  Fundamental Assumption #1The first fundamental assumption is that the weapon position at time of firing is part of the fire event packet.  This assumption requires that weapon tracking and fire event detection be performed either by one system or by cooperating systems. Because the accuracy of weapon position at time of firing is so critical to correct casualty assessment, good training simulations would be implemented in this way.  This instrumentation system design also allows for a more efficient RTCA system design.Fundamental Assumption #2The second fundamental assumption is that the instrumentation data stream will not overwhelm the RTCA system.  While scalability is one of the requirements for the RTCA system, extreme scaling of the number of tracked entities would eventually require an architecture in which the entity tracking system:Cached recent entity position historiesGave less frequent position updates to the RTCA systemResponded to queries for positions at critical times.A complete investigation of extreme scaling issues would require a detailed, instrumentation system-specific model.  Since the focus of the Crossbow simulation is RTCA, not instrumentation, extreme scaling issues were not investigated.Scenario RepresentationThe Scenario defines “Simulation Truth” for the Crossbow simulation.  It incorporates data regarding players, weapons, and the environment.  Player data includes the player types (soldier type, OPFOR, etc.), the body armor worn by each player, and the player positions at all times.  Weapon data includes weapon types (AK47, M-16, OICW, etc.), weapon positions at all times, weapon firing times, and corresponding weapon settings – such as KE, HE, detonation distance, etc. for the OICW.  The environment consists of static terrain in OpenFlight format.Scripted movements for players and weapons were required to provide the player and weapon position data within a force-on-force engagement.  To provide realistic human body motion, DI-Guy – a COTS software product from Boston Dynamics Inc. (BDI)[4] – was incorporated into the Crossbow simulation.  DI-Guy allows for programmatic access and control of 54 human body degrees of freedom and 6 weapon degrees of freedom.  The human body degrees of freedom include the location and orientation of the pelvis and joint angles for the back, neck, shoulders, elbows, wrists, hips, knees, and ankles.  A scripting language was implemented to simplify the specification of coordinated player activity within the scenario.  A scenario interpreter reads the high level scripts for each player and translates them into high-level DI-Guy commands such as walk, run, move along a path, stand, kneel, crawl, aim, etc. Corresponding DI-Guy API calls are made and player and weapon position data are extracted as required.[3]Instrumentation SimulationThe purpose of the Instrumentation Simulation is to generically simulate an instrumentation system’s ability to generate and transmit a data stream for use as input to the RTCA system.  It reads “Simulation Truth” data from the Scenario,  then modifies the packet data to incorporate errors that might be produced by a real instrumentation system.  Statistical parameters control the quality and timing of the generated output data stream packets. The control provided by these parameters is intended to allow a wide variety of instrumentation system capabilities to be represented.  The output data stream consists of degraded and delayed player and weapon data packets that are not chronologically sorted.  Four types of instrumentation and communication system errors are modeled:  entity position errors, synchronization errors, packet latencies, and packet transmission errors.Entity Position ErrorsEntity position errors model how accurately the instrumentation system tracks entity (player and weapon) positions.  Entity tracking data is defined with respect to the “native” BDI player and weapon degrees of freedom described in section 4. Separate statistical parameters control the errors applied by the Instrumentation Simulation to each degree of freedom.  No correlation is assumed between the errors associated with different degrees of freedom nor between successive errors for the individual degrees of freedom.Synchronization ErrorsAny distributed entity tracking system will require some form of synchronization.  The Instrumentation Simulation assumes that there is one clock associated with each tracked entity.  The “master clock” is the “simulation truth” clock implied by the Scenario.  Three time stamps are associated with each data packet:  when the event occurred with respect to the master clock, when the event occurred with respect to the corresponding entity’s local clock, and when the packet arrived at the RTCA engine with respect to the master clock.Modeled synchronization errors represent the variations in the distributed clocks associated with the tracked entities.  As such, they influence the time stamps associated with the entity-local clocks and the timing of regular update packet generation. Modeled errors for device synchronization include:Initial synchronization error.  This simulated error represents how accurately an entity’s clock was initially synchronized to a master clock.   A separate draw from a single statistical distribution function is made once for each tracked entity.  It is also assumed that no clock re-synchronizations occur during the exercise.Clock drift rate.  Each clock is assumed to have a linear drift rate relative to the master clock. A separate draw from a single statistical distribution function is made once for each tracked entity.Time between synchronization and exercise start.  It is assumed that each clock was individually synchronized before the start of the exercise and thus had the opportunity to drift during that interim. A separate draw from a single statistical distribution function is made once for each tracked entity.Packet LatenciesStatistical parameters were used to represent the latencies associated with the formation and transmission of data packets.  Data generation and data transmission latencies are distinctly modeled as separate draws from two statistical distribution functions.Packet Transmission ErrorsIn any real communication system, packet transmission errors will cause some packets to not arrive at their destination and will cause other packets to have detectable, but uncorrectable, bit errors. The Instrumentation Simulation models the combined effect of all such transmission errors using a single value representing the percentage of dropped packets.  The RTCA Engine ignores all data packets that are identified as dropped by the Instrumentation Simulation.To reduce the risk that critical data from weapon firing events are not lost due to dropped packets, it is assumed that data from the most recent firing event is redundantly embedded in all update packets from that weapon.  It is the responsibility of the RTCA system to ensure that individual firing events are not processed multiple times.Visualization SystemThe Visualization System provides a graphical view of the scenario as a stealth view of the players and weapons moving in a 3D virtual environment.   It displays time-tagged data from exercise log files using OpenGL-based graphics for high performance and portability.  DI-Guy is used to display tracked player and weapon data which is maintained by the RTCA Engine in BDI “native” format.  Terrain models are read from OpenFlight files and are displayed with corresponding OpenGL calls.  For viewer convenience, default camera views are retrieved from the scenario specification.RTCA EngineThe RTCA system is responsible for assessing player casualties as quickly as possible using terrain data and data received from the Instrumentation Simulation.  It tracks entities (players and weapons) from degraded position updates.  In response to weapon firing events, the RTCA:Computes munitions flyout and detonationComputes collisions of projectiles (munitions & fragments) with tracked entities and static terrainEnsures appropriate collision timing fidelityPerforms player casualty assessmentThe output of the RTCA system is a nearly chronologically sorted exercise data stream.RTCA Timing Timing ChallengesIn general, the RTCA input data stream will not be chronologically sorted and will contain data packets with widely varying latencies.  This poses several challenges to the RTCA Engine which requires chronologically sorted data in order to:Properly determine projectile-tracked entity collisions fully accounting for the motion of entities during projectile flyout.Properly handle the processing of “simultaneous” flyouts.Prevent any effects from rounds fired by players who have recently been “incapacitated.” Provide a nearly chronological output data stream to support real time exercise monitoring.Timing ApproachThe timing challenges mentioned in the previous section were addressed by temporally discretizing projectile flyouts into relatively short time-stamped segments and by implementing a fixed RTCA delay to ensure adequate knowledge of the recent past.  Specifically, projectile flyouts were broken into sets of individually time-stamped line segments small enough so that potential targets could reasonably be assumed to be stationary during segment traversal.  A fixed RTCA latency parameter (t allows a reasonable opportunity to acquire and sort recent tracking data.  All queries about entity states at time t are delayed until time t + (t.  Similarly, all output events associated with time t are delayed until time t + (t.  This latency parameter establishes a lower limit on the time required to perform RTCA, effectively accounting for the latency of the instrumentation and communication systems without adding to them.Latency Parameter TradeoffsNo value of (t can ensure that all relevant packets have arrived at the RTCA system.  Straggling packets that are delayed longer than (t get passed along but do not affect RTCA and are not visualized during real-time exercise monitoring.  The setting of (t provides a tradeoff between RTCA responsiveness and accuracy.Aggressive (small) values of (t result in faster but less accurate casualty assessment as more packets are ignored by the RTCA system and thus more entity positions need to be extrapolated from recent history.  Conservative (large) values of (t result in more accurate, but slower casualty assessment as more data packets are made available for the purpose of RTCA.Timing ImplementationThe RTCA Engine implements a chronologically sorted event queue for all timing sensitive events.  It delays processing an event associated with time t until time t + (t.  In this respect, the RTCA engine is very similar to a discrete event simulation engine driven at wall clock time.The RTCA Engine currently implement the event queue as a single process on a dedicated processor.  Event processing could relatively easily be distributed across multiple processors if required for performance and/or scalability.  The current implementation balances input processing with event processing according to the following pseudo-code:	loop forever {		while ( input pending ) process input;		if ( wall clock >= first event time + (t ) process first event;}}Position Update ProcessingFigure 2 illustrates the data flow model for processing position updates.Position updates enter the RTCA input processor. The Entity Tracker stores recent player and weapon position data in “native” BDI format and stores armor and health status information for each player.  Upon request, it determines entity position at a specific time, extrapolating or interpolating if necessary, and converts the data into a format that is appropriate for RTCA.  For each player update, the player’s centroid (pelvis) location is passed to the Entity Localizer.The Entity Localizer provides access to players according to location.  It efficiently returns lists of players that are near a point (e.g. a detonation location) or near a line segment (e.g. a segment of a munition flyout).  It models the battle space as a 2-dimensional rectangular grid and associates players with grid elements according to their pelvis location.  A quad-tree could be used in place of the 2-D grid to provide extreme scaling and could be augmented with a simple height check to handle “tall terrain” such as engagements inside a skyscraper.Fire Event ProcessingFigure 3 illustrates the data flow model for processing weapon fire events.The RTCA input processor processes a fire event packet by queuing an associated output event, then passing a Fire Event (including information on the weapon position, player ID, and munition type) to the Flyout Generator.The Flyout Generator generates simulated projectile (munition or fragment) flyouts as a series of varying length, time stamped line segments.  The length of the flyout is limited by the maximum effective range of the projectile and may be further limited by detonation settings of HE munitions.  Individual segment lengths are determined by comparing projectile speed to the maximum speed of a target.The generated flyouts are ballistic and incorporate the effects of aerodynamic drag.  Since no closed form solution exists for the path of a particle subject to aerodynamic drag, an approximate energy based method was used to avoid the instability of numeric integration.The generated flyout is sent to the Projectile-Terrain Collision Detector where it may be shortened due to terrain interference.  To perform the many line segment-terrain collision tests, a state-of-art surface-surface intersection detection code originally developed for real-time graphics was obtained.[5]  This code was then optimized to perform exceptionally efficient line-surface intersection tests that return the nearest collision point along the line.  The “surfaces” are represented by hierarchies of “k-DOPs” which are geometric bounding volumes designed for efficient overlap determination.[6]  The complex terrain “surface” is fully pre-computed from terrain data specified in a very flexible  “triangle soup” format.It is worth noting that this projectile-static terrain collision detection technique could be used to perform projectile-vehicle interactions as well by representing the problem with respect to a local coordinate system associated with the vehicle.Finally, the Projectile-Terrain Collision Detector places a Munition Flyout Segment Event associated with the first line segment of the flyout on the event queue for processing at the appropriate time. Munition Flyout Segment Event ProcessingFigure 4 illustrates the data flow model for processing queued munition flyout segment events.The Entity Localizer is queried for the list of tracked entities that are “near” the flyout segment at the time associated with the segment.  The tracked entities that are in the returned list are then responsible for determining whether they were intersected by the time tagged line segment.  This flexible design allows for tracked entities to be represented with arbitrary complexity.  For the purposes of collision detection, players are currently modeled as a collection of 11 spheres and 9 cylinders as illustrated in Figure 5.  The centers of the shoulder, elbow, and knee spheres are co-located with the centers of the end caps of the overlapping cylinders.  The spheres for the head, hands, and feet are tangentially attached to the centers of the adjoining cylinders’ end caps.  This model allows efficient computation of line segment intersections and can readily be modified to increase or decrease fidelity.A player’s position at a particular time is determined by extrapolation or interpolation of recent player position data that has been cached by the tracked entity object.If a line segment intersects a player more than once, the corresponding tracked entity object determines which intersection is closest to the start of the line segment and reports only that intersection.  If no player collisions are detected and there are more segments in the munition’s flyout path, the next segment is queued for future processing.  If there is no collision and there are no more segments in the flyout path, the munition is checked for possible detonation.  If the munition is an HE round, a detonation event is queued for processing at the appropriate time.  If the munition is not an HE round, then the processing associated with this fire event is complete.If there is a player collision and the munition is an HE round, a detonation event that includes fragmentation data is created and queued for future processing.  If the munition is not an HE round, an impact event is created that includes the collision point location with respect to both global coordinates and local body coordinates and information about the player and body part impacted.In all cases, an output event with a potentially modified end point is created for this flyout segment.Detonation Event ProcessingFigure 6 illustrates the data flow model for processing detonation events.Each munition type is represented by a “characteristic detonation” which includes complete fragmentation and an overpressure data.  Each fragment is represented explicitly by a mass, an aerodynamic drag coefficient, and an initial position and velocity relative to the munition position and velocity at time of detonation.  Overpressure is represented as having a propagation speed, a characteristic distance from the detonation point, and a characteristic overpressure at that distance.  Below the characteristic distance, the overpressure is modeled as being equal to the characteristic overpressure.  Above that distance, the overpressure decreases proportionally to the distance cubed.Even though each fragment is explicitly modeled, a detonation may be generated extremely efficiently since the characteristic for each munition type is pre-computed.  Furthermore,  this model is extensible to many different munition types because it makes no assumptions regarding munition size, shape, or axial symmetry.When a detonation event occurs, the Entity Localizer is queried for the list of players that might be within the effective range of the munition.  If no players are within range, then the fragments do not need to be processed further.  For each player within range, a fragment quick intersection test is performed to efficiently eliminate fragments that have no possibility of colliding with a player and to generate a short list of potential player targets for each fragment that remains.  The fragment quick intersection test  assumes that each fragment travels in a straight line based upon its initial location and velocity.  The length of the flyout segment is limited by the maximum effective range of the fragment which is relatively small due to relatively high drag.  This short distance allows straight lines to closely approximate the fragment’s flyout over the maximum range.  For the quick intersection test, players are modeled as “big spheres” that account for the size of the player, the maximum distance the player can move during the fragment’s flyout, and the fact that the fragment’s path has been approximated as a straight line. Each remaining fragment is then flown out by the Flyout Generator and the first segment of each generated flyout is queued for future processing as a fragment flyout segment event.  Each queued event includes information about the fragment and a list of players with which it might collide. The Entity Localizer is also queried for a list of players that might be within range of the overpressure wave.  The range of the overpressure wave is specified as a distance at which the pressure is less than two times normal atmospheric pressure.  This distance can be computed using the wave’s characteristic distance and characteristic overpressure.  The head location for each player in range is obtained from the appropriate tracked entity and an overpressure event is queued at a time in the future corresponding to when the overpressure wave would overtake the head as determined by the propagation rate of the wave and the distance from the detonation to the head at time of detonation.Fragment Flyout Segment Event ProcessingFigure 7 illustrates the data flow model for processing fragment flyout segment events.As noted in the figure, each fragment flyout segment event contains a list of potentially affected players.  The flyout segment is tested for potential collision with each player and determines the first potential collision point.  If there is a potential collision, the entire fragment flyout up to that collision point is sent to the Projectile-Terrain Collision Detector to test for terrain obscuration.  If the fragment collides with terrain, then there is no player impact, and processing related to that fragment’s event is complete.If the fragment does not collide with terrain, then the detected player collision indicates a true impact and an impact event is created and queued.  The impact event includes fragment data, the collision point location with respect to both global coordinates and local body coordinates, and the player and body part impacted.If no player collision was detected and there are more flyout segments for the fragment, the fragment’s next flyout segment is queued as another fragment flyout segment event.  If there are no more flyout segments, then processing for this fragment is complete.It should be noted that fragment flyout processing differs from that for munition flyouts.  For munitions, the projectile terrain collision is done ahead of time and each munition segment flyout event obtains a new list of potentially affect players.  For fragments, - each fragment segment flyout event already contains a list of potentially affected players and testing for terrain occultation is postponed until it is known that the fragment would hit a player if there was no occultation. Impact Event ProcessingFigure 8 illustrates the data flow model for processing impact events.Projectile impacts cause trauma damage to player body parts through the transfer of kinetic energy.  Mass and velocity of the impacting projectile determine its kinetic energy.   Damage to a player is based on a trauma scoring system[7].  The probability of survival (Ps) of a player is specified by a TRISS (Trauma Score – Injury Severity Score) according to the formula:Ps = 1 / ( 1 + e-b ),  Where  b = -2.5355 + (0.9934)(RTS) + -0.0651(ISS)ISS (Injury Severity Score) is an anatomical scoring system that provides an overall score for patients with multiple injuries.  Each injury is assigned an Abbreviated Injury Scale (AIS) score and is allocated to one of six body regions (Head-Neck, Face, Chest, Abdomen, Extremities (including Pelvis), and External).  Only the highest AIS score in each body region is used.  The AIS scores are ranked on a scale from one to six as indicated in Table 1.  The three most severely injured body regions have their scores squared and added together to produce the ISS score.  InjuryAIS ScoreMinor1Moderate2Serious3Severe4Critical5Unsurvivable6Table  SEQ Table \* ARABIC 1 Injury Severity ScoringRTS (Revised Trauma Score) is a physiological scoring system determined by data from the Glasgow Coma Scale, Systolic Blood Pressure, and Respiratory Rate.   This RTCA system models penetrating trauma damage and focuses on AIS scoring, but does not model body vital statistics.  For the purposes of casualty assessment, an optimal health value of 7.8408 is used for RTS.Body armor is modeled and is represented as superpositions of thin layers on the surface of the body.  The layers may cover the spherical and cylindrical body parts described above and the range of covering is defined in terms of the natural coordinates of the body part.  Figure 9 illustrates an example of how the extent of armor layers would be specified for a cylindrical body part.  The specification for spherical body parts is analogous. The affect of armor is represented as a reduction of the kinetic energy transferred to the body part.The impact event data includes the body part impacted and the impact location with respect to that body part’s local Cartesian coordinate system.  The impact location data is transformed to the natural (i.e., spherical or cylindrical) coordinates associated with the body part, then compared to the armor at that point.  If armor covers the impact point, the armor reduces the kinetic energy transferred.  The final kinetic energy is converted to an AIS score depending on body region as specified in Table 2.AIS Score by Body RegionsEnergy in JoulesAbdomen & ChestExternal & ExtremityHead-Neck & Face0 – 1000010 – 5011250 – 100213100 – 300324300 – 700435700 – 10005461000+656Table  SEQ Table \* ARABIC 2 Energy Damage ScoringBecause data packets may arrive in non-chronological order, future weapon firing events associated with an incapacitated player might have arrived earlier and been queued for processing.  Therefore, when a player is determined to be incapacitated, any events associated with that player firing after the time of incapacitation are removed from the queue and further incoming fire events from that player are ignored. Finally, an output event for the impact event and the player’s health state is created.Overpressure Event ProcessingFigure 10 illustrates the data flow model for processing overpressure events.An overpressure event identifies the single player that might be affected by the overpressure wave.  Since the head is the body part that is either affected directly by overpressure (ear and eye damage) or through which other body parts are damaged (collapsed lungs), overpressure events affect players that have no terrain elements intervening between their head and the detonation location.  The Projectile-Terrain Collision Detector is reused to perform the intervening terrain test.  If the terrain does not protect the player, the maximum pressure at the head is calculated from the characteristic distance, the characteristic overpressure, and the distance from the detonation location to the head.  Player damage is then assessed according to Table 3.Player incapacitations caused by overpressure are treated similarly to incapacitations caused by projectile impact.Finally, an output event for the overpressure event and the player’s health state is created.PSI over normalatmospheric pressureDamage DescriptionAIS ScoreAffected Body Region0 - 2None0None2 – 5Stunned1Head-Neck5 – 10Ear & Eye Damage2Head-Neck10 – 15Unconscious3Head-Neck15 – 25Organ Damage4Abdomen25 – 40Severe Organ Damage5Abdomen40 +Dead6AbdomenTable  SEQ Table \* ARABIC 3 Overpressure Damage ScoringOutput Event ProcessingOutput events create data packets that are sent to the exercise log file at the appropriate time.ReferencesSPARTA, Inc.: "A-TES STO Phase 1 Final Re-port", Nov. 1999.M. Rahner: "Applying TM-UWB Technology to Simulate Live Force-on-Force Training with Non-Line-of-Sight Weapons", SPARTA, Inc., March 26, 2000.SPARTA, Inc.: “A-TES STO Phase 2 Final Report”, Jan. 2001.Boston Dynamics Inc.  HYPERLINK http://www.bdi.com/ http://www.bdi.com/J. Klosowski, M. Held, and J. Mitchell: “QuickCD Software Library for Efficient Collision Detection”,  HYPERLINK http://www.ams.sunysb.edu/~jklosow/quickcd/QuickCD.html http://www.ams.sunysb.edu/~jklosow/quickcd/QuickCD.htmlJ. Klosowski, M. Held, J. Mitchell, H. Sowizral, and J. Zikan: “Efficient Collision Detection Using Bounding Volume Hierarchies of k-DOPs”, IEEE Transactions on Visualization and Computer Graphics, March 1998, Volume 4, Number 1.Trauma.org  HYPERLINK http://www.trauma.org/scores/index.html http://www.trauma.org/scores/index.htmlAuthor BiographiesSHAWN M. HILLIS is a Senior Engineer in SPARTA’s Simulation Technology Division.  He has worked on the A-TES project since its inception.  Mr. Hillis holds Bachelor’s General Studies and Master’s degrees in Computer Engineering from the University of Central Florida.MARK RAHNER is a Senior Scientist in SPARTA's Simulation Technology Division.  As SPARTA's Technical Lead on the A-TES project, Mr. Rahner has developed A-TES concepts, geopositioning algorithms, and related simulations.  Mr. Rahner holds Bachelor's and Master's degrees in Aeronautics and Astronautics from the Massachusetts Institute of Technology.  His professional experience has been as a software engineer and structural dynamicist specializing in the modeling and testing of spacecraft.InstrumentationData StreamExerciseLog FilesPlayer FeedbackControl SystemInstrumentationSimulationRTCASystemVisualizationSystemScenarioVisualization DataDefault Camera AnglesEnvironmentStatic TerrainDynamic TerrainWeatherPlayersPlayer TypesScripted MotionArmorWeaponsWeapon TypesScripted MotionScripted Firing EventsFigure  SEQ Figure \* ARABIC 1 Crossbow Simulation Data FlowExerciseData StreamOutput EventCentroid Location UpdateTracked EntityEntity LocalizerPosition UpdatePosition Update PacketEvent QueueRTCA Input ProcessorFigure  SEQ Figure \* ARABIC 2 Position Update Processing Data FlowRTCA Input ProcessorFlyout data is sequence oftime-tagged line segmentsContains weapon position at time of firing (Fundamental Assumption #1)Munition Flyout Segment EventsOutputEventMunition and Flyout DataFlyout GeneratorProjectile-Terrain Collision Detector(potentially shortens flyout)Fire Event DataFire Event PacketEvent QueueFigure  SEQ Figure \* ARABIC 3 Fire Event Processing Data FlowEntity-Line SegmentCollision Detector(determines collisionwith impact only,collision with detonation,or no collision)Optional Impact,Detonation, or Munition FlyoutSegment EventPotential CollisionsLine SegmentNearby EntitiesLine SegmentTrackedEntities(players)EntityLocalizerOne line segment only -Already know segmentdoesn’t intersect terrainMunition SegmentOutput Event(potentially truncated)Munition FlyoutSegment EventEvent QueueFigure 4  Munition Flyout Segment Event Processing Data FlowFigure 5  Player ModelingFor RTCATracked Entity Body Part(accounts for effects of body armor; computes body part trauma in terms ofAbbreviated Injury Score (AIS))Tracked Entity(combines AIS values to form overallTrauma Injury Severity Score (TRISS))Impact/AIS/TRISSOutput EventDe-queue FutureEvents fromIncapacitatedPlayersAIS ScoreImpact EventEvent QueuePotential CollisionsLine SegmentTrackedEntitiesOptionalImpact EventTerrain ObscurationPotential CollisionEvent QueueFigure 6  Detonation Event Processing Data FlowFragment Flyout Segment Events (containing short list of potential targets)TrackedEntitiesFragment/Entity CandidatesFlyout GeneratorOverpressureEvents(one per nearbyplayer - delayedbased upon dis-tance to heads)Centroid andHead LocationsNearby EntitiesDetonation LocationEntityLocalizerDetonationOutput EventDetonation Event (contains munition data)Detonation EventProcessor(generates fragmentand overpressure data;performs quick intersectiontest to eliminate mostfragment/entity pairs)Figure 7  Fragment Flyout Segment Event Processing Data FlowTerrain ObscurationHead & Det. LocationLine Segment-TerrainCollisionDetectorTracked Entity-25( < ( < 25(, 4 < z < 7-30( < ( < 30(, 2 < z < 8Projectile-TerrainCollision Detector(involves all flyoutsegments up tocurrent one)One line segment only -Contains list of potentiallyaffected playersFragmentSegmentOutput Event(potentiallytruncated)Fragment FlyoutSegment EventEntity-Line SegmentCollision Detector(determines collisionwith impact onlyor no collision)Event QueueFigure 8  Impact Event Processing Data FlowOverpressure/AIS/TRISSOutput EventDe-queue FutureFire Events fromIncapacitatedPlayersOverpressure Injury ScoreTracked EntityHeadOverpressure EventEvent QueueFigure 10  Overpressure Event Processing Data FlowFigure 9  Body Armor Representation