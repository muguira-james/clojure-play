Standardized TENA Logging and Playback using the Reflect Suite of ToolsRyan NormanU.S. Army Redstone Technical Test CenterHuntsville, AlabamaCSTE-DTC-RT-F-FL, Bldg. 7884Redstone Arsenal, AL 35898-8052 HYPERLINK "mailto:dbrowning@rttc.army.mil" ryan.t.norman@us.army.milKen AllredKEnetics Incorporated555 Sparkman Dr., Suite 1615Huntsville, AL 35816 HYPERLINK "mailto:ken.allredjr@kenetics-inc.com" ken.allredjr@kenetics-inc.comRazak ArunaogunKEnetics Incorporated555 Sparkman Dr., Suite 1615Huntsville, AL 35816 HYPERLINK "mailto:razak.arunaogun@kenetics-inc.com" razak.arunaogun@kenetics-inc.comMike CarusoKEnetics Incorporated555 Sparkman Dr., Suite 1615Huntsville, AL 35816 HYPERLINK "mailto:mike.caruso@kenetics-inc.com" mike.caruso@kenetics-inc.comKeywords: TENA, Reflect, Reflect Replicator, Reflect Plug-in Generator, FCS, JT&EABSTRACT: Reflect is a cross-platform, Government Off-the-Shelf (GOTS) suite of applications that provides general Test and Training Enabling Architecture (TENA) event management support, such as Logical Range Object Model (LROM) logging and playback capabilities and overall TENA Middleware situational awareness.  Logging and Playback in Reflect is done in relative real-time, meaning that items played back will occur in the same sequence and at the same iteration of time as they did when originally logged. The Reflect suite is a powerful TENA-Enabled utility that can be used for data analysis and experimentation with “what if” scenarios through custom generated XML logged files that can be imported and played back. TENA application development and integration can be greatly accelerated by not relying on pre-existing applications that publish data for which the developer requires. Reflect tools enable developers to work with subscribed data before executing a TENA application in a live event therefore aiding in the development of robust TENA applications. With support and feedback from the community, the Reflect suite can be enhanced to better meet the needs of the users.  In order to facilitate logging and playback of event data in relative real-time, the Reflect suite contains the Plug-in Generator and the Replicator applications.  The Plug-in Generator utilizes auto-code generation techniques to enable the Replicator to log or playback data from any TENA LROM without having to manually write a single line of code.  The Graphical User Interface (GUI) of the suite was designed for ease of use where the user can visually identify object models for record and playback of data at the touch of a button.  Once the plug-in has been generated, it can be utilized by the Replicator to perform logging and playback of the plain’s supported object models.In addition to other capabilities, Replicator offers features such as pause, start, stop, variable rewind, variable fast forward, book marking, publish filtering and subscribe filtering.  Data is logged to a documented, non-proprietary binary file natively with the ability to export to XML and ASCII Text formats. XML and ASCII Text formats can also be imported to the binary format.  Reflect was used in FCS experiment 1.1, 3CE FY06 SECA, Joint Test and Evaluation (JT&E) Events and at other DoD sites.  Whether you are a developer, test planner or an analyst, the Reflect suite of applications empowers you to capture and reproduce many of TENA’s capabilities.IntroductionReflect is a cross-platform, Government Off-the-Shelf (GOTS) suite of applications readily available to all US Government entities and their subcontractors that provides general Test and Training Enabling Architecture (TENA) event management support, such as Logical Range Object Model (LROM) logging and playback capabilities and overall TENA Middleware situational awareness.  Logging and Playback in Reflect is done in relative real-time, meaning that items played back will occur in the same sequence and at the same iteration of time as they did when originally logged.Reflect Suite of Applications can be used for rapid development by application developers and can also be used for analytical purposes. Below are two example scenarios in which Reflect can be used:1.1	Reflect As a Development AidDuring TENA application development, time is spent on software development as well as publication and subscription verification.  Significant time can be spent ensuring that incoming data is being interpreted correctly and outgoing data is properly set.  There are many tools to assist in software development but not in exercising and testing the data being published and subscribed.  Reflect can be used as a development aid to help developers test their applications against real world recorded data from other TENA applications that they are integrating with.  For example, a developer has been tasked to integrate some published data from a highly specialized TENA application that requires unique hardware to be attached to it.  Since the hardware is not easily movable the developer would have to travel to the location and work within limited time constraints to develop and test an application which has a high risk of failure.  Reflect would reduce time and risk in a situation such as the one described by recording data from the specialized hardware dependent TENA application and giving it to the developer who is integrating with the specialized TENA application.  The developer does not have to travel now and can spend more time by playing back the recorded data while subscribing to it any time and as many times as needed. This allows developers to focus on what problems they attempting to solve without worrying about the LROM manipulation in source code and compilation debugging.1.2	Reflect as an Analytical AidWith Reflect’s capability to log TENA data from any object model and exportable standard formats such as XML, many existing XML tools can be used to analyze logged data.  Charts and graphs may be plotted based on different member variables of a message or class.  Since every event is time stamped in the Reflect log file metrics and performance characteristics can be gathered. Analysis can be performed on collected data via the Reflect Replicator. Data collected can also be played back and accessed at different points or points of interest in the logged data using the Replicator. Test performed is repeatable using the Reflect Suites of tools and data logged can be exported into different scenarios for analysis.2.0	The Reflect Suite of ToolsThere are currently two main applications in the Suite and they are described in detail below.  The Reflect Suite of Tools relies on auto-code generation to support any type of TENA LROM without requiring any software development by the user.  This is done using the Reflect Plug-in Generator (RPG).   This plug-in is then loaded into the Reflect Replicator (RR) for TENA logging and playback.  Please see Figure 1 for an overarching Systems View (SV-1) of the Reflect Suite of Tools.Figure 1: SV-1 of the Reflect Suite of ToolsReflect Plug-in Generator (RPG)The Reflect Plug-in Generator (RPG) is the application that code generates and compiles a plug-in for use with the Reflect Replicator (RR) based on identified object models.  The RPG is the beginning of the workflow in the suite of Reflect applications.  RPG operates similar to a wizard style application with next and back buttons that allow a user with little knowledge of TENA to create and use a plug-in with the logging and play back capability of RR.  Figure 2 displays the Graphical User Interface to the RPG.  There are three phases to RPG:Object Model IdentificationOutput and Platform Configuration Code Generation and Compilation Figure 2: Reflect Plug-in Generator (RPG)Object Model IdentificationIn the object model identification phase the user is presented with all TENA versions and object models found in the TENA installation.  For informational purposes the packages, classes and messages are shown beneath each object model to aid the user in choosing object models that are appropriate for their needs.  The user selects object models by right clicking and selecting add or dragging from the available object models column on the left to the selected object models column on the right.  Identified object models may be removed by right clicking on a selected object model on the right and selecting remove.  During the object model identification process RPG automatically de-conflicts incompatible object models by disabling them.  An incompatible object model is one with the same name but different version number or a dependency on an object model with the same name or different version number.  Once finished with object model identification click the next button to move to the Output and Platform Configuration phase.Output and Platform ConfigurationThe output and platform configuration phase involves selection of a source code and a plug-in output directory.  Directory names must not contain spaces.  The generated source code will reside in the output source code directory if a user wishes to examine the code.  All necessary compilation infrastructures are also output, on Windows a Visual Studio 2003 .NET project file is generated with appropriate project properties and on Linux the autoconf system is utilized through an input configure script and automake makefiles.  Before moving onto the compilation phase the user may select which configuration to build if any (debug and/or release or none).  If there is no build configuration selected the source code will still be output to the selected destination without compilation.  The “Choose Build Platform” shows a list of all available platforms supported by the operating system and the TENA installation.  For example if a user had multiple versions of TENA installed on a Linux computer such as fc4-gcc4 and lets say fc4-gcc5 the user can select which of those to build for.  Even though TENA distinguishes debug from release by using a “-d” in many names of files and scripts the “Choose Build Platform” dropdown menu will never contain a “-d” in it because debug is identified by the “Build Debug” check box.  The plug-in file name text box allows control over the name of the dll or so that is being produced.  The plug-in file name will have appended to it automatically the value of the TENA_PLATFORM environment variable and the version of TENA.Code Generation and CompilationCode generation takes place in this phase based upon all previous LROM selections made by the user.  Once the code has been generated compilation of the Reflect Plug-in begins.  Since Reflect Suite of Applications is Operating System (OS) Independent, users are allowed to select compiler of choice installed on the OS to compile the Plug-in library. For example, Reflect Plug-in Generator automatically detects installed compiler such as the Visual Studio 2003 .NET and Visual Studio 2005 .NET on Windows.  On Linux the autoconf system is used for compilation and must be installed in order for RPG to perform automatic compilation.  During Compilation, RPG determines which TENA version the user selected and automatically runs the appropriate TENA script for that version.Reflect Replicator (RR)The Reflect Replicator (RR) is the application that utilizes the plug-in generated by the Reflect Plug-in Generator (RPG) to log and playback any “over the wire” TENA data.  The RR (Figure 3) is designed so that a user requires very minimal experience to become proficient in its use.  The plug-in allows RR to offer capabilities such as play, pause, stop, rewind, fast forward, go to beginning, go to end, record and on-demand.  RR also provides XML-based configuration settings to setup user preferences such as selecting publishable and subscribable LROMs with features to set TENA options to join execution and specify TENA parameters.  In other words, users can configure the RR to log any TENA SDOs or Messages that are part of the plug-in and playback any number of TENA SDOs or Messages found in the selected log file.  Additionally, RR users can set bookmarks within a logged file.  Bookmarks enable the user to jump to any specified point in the log file for replay without having to rewind or fast forward.  Figure 3: Reflect ReplicatorBenefits of ReflectThere are many notable benefits with using a standardized data logging and playback solution.  Most notably, a standardized data logging and playback solution enables the creation of standard log file formats.  Standard log file formats have a structure that is independent of any specific occurring test and enable the test community to develop standard data reduction tools.  The creation of these standard reduction tools will expedite the analysis process while quickly and easily providing common data views to aid in evaluation as-needed, even in real-time.There are even more benefits when you select Reflect as the data logging and playback solution for a test event.  First, since Reflect is GOTS so any US Government entity and its contractors can install and utilize Reflect without any licensing fees.  As the Reflect suite is enhanced to further meet the needs of the users with the community, the enhancements funded by others will be made available to the rest of the community free of charge.  Reflect relies on auto-code generation and, therefore, is not dependent on any version of the TENA Middleware or any of its specific Logical Range Object Models (LROMs) to run.  Users can define an infinite number of logging or playback scenarios without having to write a single line of code.  Reflect tools enable developers, engineers, or, more generically, users to work with subscribed data before executing a TENA application in a live event therefore aiding in the development of robust TENA applications. In other words, users can experiment with their applications by using the standard log file format to create “what if” scenarios or to test their applications against actual test data whenever they need to.  For example, if a user would like to see how a piece of instrumentation would have reacted had it been involved in a test run or how it might react in a potential test scenario, they can do so with Reflect.  The user need only define an XML log file and then rely on Reflect to perform all the necessary TENA functionality to publish and/or subscribe to the data necessary to run the scenarios.  Furthermore, users can rely on log files from other systems they will be dependent upon to test system interoperability before integration actually occurs.  Doing so greatly accelerates both application development and integration since the user is not dependent on the availability of pre-existing applications that publish or subscribe to data the user requires.  Reflect in Test EventsThe Reflect suite of tools has been utilized in several test events.  RTTC has delivered data logging and playback solutions to Future Combat Systems (FCS) Experiment 1.1 and the Cross Command Collaboration Effort (3CE) FY06 Simulation Environment Characterization Assessment (SECA) that were ready for use literally within an hour.  During Experiment 1.1, Reflect enabled all test data published using TENA on the distributed test layer to be logged in a single, standard format.  Data could then be examined for accuracy or replayed as-needed in order to replay the test runs without the need of re-running live test entities through the test scenarios.  More information on RTTC support of FCS Experiment 1.1 and its use of Reflect can be found in the 2007 Spring Simulation Interoperability Workshop paper “Testing the Test: Distributed Testing in support of System of Systems Integration” (07S-SIW-085).Reflect was a huge part of the 3CE FY06 SECA as well.  The goal of the FY06 SECA was to verify a baseline level of interoperability amongst the Army’s TRADOC, RDECOM, and ATEC.  Reflect was responsible for the logging of all TENA data, including data from MATREX received via a gateway, within the interoperability assessment.  The data was logged in real-time and without incident.  Reflect is also the data logger and playback solution of choice for Joint Test and Evaluation (JT&E) Events.  Specifically, Reflect is the solution in use in the Joint Test and Evaluation Methodology (JTEM) testbed, which is used to verify identified methods and processes to aid in the execution of tests within a Joint Mission Environment (JME).Future Reflect Tools and DevelopmentCurrently, Reflect Suite of Applications provides a wide range of solutions for rapid cross platform development and analytical resources with built in ease of use. However, there are more features needed to be implemented to help the users of Reflect leverage existing applications which will enhance their Reflect experience.Implement Database supportData reduction and analysis toolImplement more robust import/export capabilityImplement community identified featuresAcquiring ReflectReflect Suite of Applications is a GOTS tool and is accessible for Government use. Reflect Suite of Applications can be downloaded from the TENA SDA website,  HYPERLINK "https://www.tena-sda.org" https://www.tena-sda.org by anyone with a TENA SDA login account. With a TENA account, users can then join the Reflect group and download the Reflect Suite. The Reflect group web page provides user guide and Reflect related articles.Author BiographiesRYAN NORMAN is currently serving as Software Architect for the U.S. Army Redstone Technical Test Center (RTTC) under the Information Management Branch.  Along with his primary duties, Mr. Norman serves as Hardware Integration Lead for the Cross Command Collaboration Effort (3CE) M&S Working Group, contributes to the TENA Architecture Management Team (AMT) as RTTC representative and is a frequent contributor to SIW conferences.  Mr. Norman holds a Bachelor of Science degree in Computer Science from the Georgia Institute of Technology.KENNETH ALLRED JR. holds a Bachelor of Science Degree in Electrical Engineering (B.S.E.E) and is a US Air Force veteran whose experience began in the Biomedical Engineering field.   Mr. Allred currently has over 15 years of experience in areas such as systems engineering, conceptual and abstract model design, Object Management Group standards (e.g. UML, MDA), Department of Defense Architecture Framework (DoDAF), distributed Live/Virtual/Constructive (LVC) environments, system of systems test and evaluation, signal and image processing, target signature simulation and empirical analysis, and missile guidance/control.  Mr. Allred’s current duties include business development, and  Subject Matter Expertise support to various DoD and commercial projects.RAZAK ARUNAOGUN is the Programs Director at KEnetics Incorporated. He is responsible for technical operations and contributes a significant amountof time to System Architecture and Software Development. Mr. Arunaogun has been working in the Modeling and Simulation (M&S) and Test and Evaluation (T&E) arenas for most of his professional career. He was part of the team that authored the TENA Reflect Suite application used to log and playback data. Mr. Arunaogun holds a Bachelor of Science degree in Electrical Engineering from Morgan State University.MIKE CARUSO is the Chief Computer Scientist at KEnetics Incorporated.  Mr. Caruso holds a Bachelor of Science in Computer Science from the City University of New York and has extensive experience in software design, development processes, simulation and computational algorithms.  Recently Mr. Caruso has focused on advanced GPU algorithms, TENA tool design and system integration for Redstone Technical Test Center.