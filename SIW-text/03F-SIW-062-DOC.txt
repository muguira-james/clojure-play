Expanded Sonar Environmental Acoustic Effects Server Capabilities for Fleet Battle ExperimentsTerry ForemanAnteonCentury Building, Suite 12502341 Jefferson Davis HighwayArlington, VA 22202202-767-5104 HYPERLINK "mailto:tforeman@anteon.com" tforeman@anteon.comDan SpeicherLockheed Martin Information Systems164 Middlesex TurnpikeBurlington, MA 01803 HYPERLINK "mailto:dan.speicher@lmco.com" dan.speicher@lmco.comKeywords:Fleet Battle Experiment, synthetic natural environment, active sonar, reverberation, Fresnel volume, scattering, OASES, WAM, ATLoS, acoustic effects server, Gaussian beam, FeyRayABSTRACT:  In a prior effort with the support and supervision of the Naval Research Laboratory, we built the Acoustic Transmission Loss Server (ATLoS) system, a federated sonar environmental acoustic effects server that uses timely high-resolution environmental acoustic data such as temperature and salinity profiles to make accurate, environmentally sensitive, and site-specific predictions of acoustic effects.  We implemented these capabilities by (1) acquiring environmental acoustic data updates from OASES and WAM, and (2) providing those data as input to a high-speed physics-based underwater acoustic propagation model. The combination of accurate environmental data and physics-based acoustic modeling enables ATLoS to make accurate, site-specific predictions of acoustic effects of tactical importance to sonar system performance, such as shadow zones and ducts.  The sensitivity of these predictions to local conditions, especially in complicated shallow water environments, represented a significant advance over more traditional server sonar system models.During fiscal year 2003, we extended ATLoS's capabilities to include: (1) distributed computing to support multiple contact/sensor pairs, (2) the ability to use ocean surface wave heights as well as sea states to model surface interactions, and  (3) monostatic and bistatic reverberation modeling for active sonar systems.  Some of these capabilities were successfully demonstrated during Fleet Battle Experiment Kilo (FBE-K); others are still being tested.1.  IntroductionDistributed Computing and Multiple Contact/Sensor PairsAs the number of sound sources (including active sonar projectors), contacts, and receivers increases, the number of contact/sensor pairs increases in a combinatorial explosion.  Many of these pairs can be culled based on such considerations as separation distance or frequency band but the number of contact/sensor pairs nevertheless remains high and will increase as Fleet Battle Experiments come to involve more federates equipped with sonar systems.Distributed computing offers a partial solution.  We describe an enhancement of the ATLoS [1] acoustic effects server system that enables clients to distribute the computational load among available servers.Surface Wave Heights and Surface LossAcoustic effects models have traditionally relied on wind speed or sea state data to make crude estimates of rough sea surface scattering loss.  However, acoustic effects servers can now avail themselves of timely, site-specific sea surface wave height predictions provided by oceanographic models.  ATLoS was therefore extended to use either traditional wind speed data or to use surface wave height data directly to predict rough surface losses and scatter.Active Sonar Systems and Reverberation ModelingActive sonar systems locate objects by projecting high-intensity tones or sound bursts and listening for echoes from the objects.  Unfortunately, the system receives echoes not only from objects of interest but also from the rough sea surface and bottom and from bubbles and other suspended matter in the water.  The undesirable echoes, collectively called reverberation, very often overwhelm echoes from objects of interest and effectively hide them.  A high fidelity acoustic effects server intended for Fleet Battle Experiments involving active sonars must provide accurate reverberation predictions in real-time to sonar system federates  (clients) in order for the clients to make accurate site-specific predictions of sonar system performance.High-fidelity reverberation modeling in 3D environments has historically proven very difficult, however, even when there are no real-time performance requirements.  We describe a simple reverberation model, implemented in ATLoS, which exploits computational economies offered by the Gaussian beam representation of acoustic effects.As noted, reverberation modeling in acoustic effects server systems and other real-time systems is an ambitious undertaking.  In order to satisfy the requirement for speed in particular, it was necessary to resort to shortcuts that serendipitously make it possible to undertake simplified bistatic as well as monostatic reverberation calculations.  (The source and receiver are collocated in a monostatic sonar system but separated in a bistatic system.  A monostatic system, for example might consist of a hull-mounted hydrophone array that both emits sonar pulses and receives echo returns.  A bistatic system might consist of an air-deployed explosive sound source used in conjunction with an air-deployed buoyed receiver array at a separate location.)  Bistatic reverberation modeling is much more difficult than monostatic modeling from a software design standpoint and far more computationally intensive.  Bistatic reverberation modeling was somewhat beyond the original scope of this task but must eventually be supported; it was therefore provided here in a limited form.  We believe ATLoS was the first real-time server system to provide physics-based bistatic reverberation modeling.2.  Distributed ComputingThe ability to run multiple ATLoS servers in the same federation was added in order to support larger exercises where a single ATLoS server would not be able to handle all of the ATLoS requests sent by clients.  Each ATLoS server in a federation publishes a unique id to the network.  Each time a client needs to send a request, it decides which ATLoS server it wants to handle the request, and fills in the appropriate unique id in the request interaction.  Each ATLoS server receives all requests, but will ignore any request that doesn't have a unique id.This distribution method places most of the protocol in the clients, not the server.  This greatly simplifies the code and renders it safer, but it makes it difficult to add more types of clients since each new client type would have to implement its own version of the protocol.  When deciding which server should handle a message, the clients simply pick a random server rather than attempting to do explicit load balancing.  If this turns out to be unworkable, then a simple load balancing scheme could be added whereby the servers also publish their current load and the clients pick the least-loaded server to handle their request.  However, given the difficulty of measuring the load on a server (since we do not have a good method to guess how long queued requests will take to process) and given the large number of requests sent, a random distribution causes requests to be fairly evenly divided among the servers.Since the ATLoS servers save some of their state each time they process a request, the clients save information about past requests so that each contact/sensor pair will be handled by the same server each time a new request is generated.  If a server goes down, the requests currently queued on that server will be lost, but future requests will be automatically redistributed to surviving servers since the clients always verify the existence of a saved server id before sending a request.  Clients will also detect the addition of a new server to the federation and flush all of their saved states.  This should cause the new server to immediately take up its portion of the request traffic.  This functionality isn't needed if all of the ATLoS servers are online at the start of the exercise, but it will cause better load distribution if an ATLoS server is added in the middle of an exercise in response to higher-than-expected loads on the ATLoS servers.DDM is not used in this protocol.  Using DDM to distribute the load among multiple ATLoS servers was considered, but it is expected that all ATLoS requests will be concentrated in only a few small areas during most exercises.  This sort of setup does not lend itself to an efficient use of DDM.3.  Surface Wave Heights and Sea States  A calm, flat ocean surface is a near-perfect reflector of sound waves at all angles of incidence and at all frequencies, acting very much like an acoustic mirror.  (In fact, sound waves that reflect from a smooth surface and interfere with unreflected waves give rise to an interference phenomenon called the Lloyd mirror effect).  Sound waves reflecting from a rough ocean surface, however, suffer scattering losses that depend on the surface roughness, the frequency, and the angle of incidence.  Gaussian beam acoustic effects models such as FeyRay account for these losses by applying simple semi-empirical mathematical models of surface loss to rays (beams) whenever they strike the surface.The surface loss models in question, however, usually require estimates of surface roughness as input and such data have typically not been directly available to server and trainer systems; traditionally, these systems have instead been provided with estimates of wind speed or sea state from meteorological data.  To obtain the required estimates of surface roughness given sea state or wind speed, the acoustic effects model would again apply appropriate semi-empirical models, but the latter models assume a “fully developed sea state”; that is, a stable sea state established by steady winds blowing over large areas of sea surface.  By the same token, however, these assumptions are not justified while sea states are still evolving, or in coastal waters where there are no large expanses of open water available for the development of a steady sea state.  Recently, server systems have begun to exploit physical oceanographic data provided by federated data servers such as OASES, for example, that provide now-casts and near-term forecasts of oceanographic conditions as they are evolving.  Such systems are capable of serving timely and accurate predictions of ocean state to clients on relatively small spatial scales under evolving conditions.  In particular, the OASES [2] data server system can provide surface wave heights predicted by the Navy standard Wave Model (WAM) [3] directly to a client without making any assumptions about sea states.In order to take advantage of these new oceanographic data services, ATLoS has been extended to use either traditional wind speed data or to use surface wave height data directly to predict rough surface losses and scatter [4].  Surface wave height data provided by WAM through OASES are preferred.4. Reverberation ModelingReverberation levels at the receiver are rarely uniform in intensity over extended periods of time; instead, reverberation levels tend rise abruptly as the sonar pulse reflects from various scattering surfaces and volumes and arrives at the receiver and then fall off more slowly.  The earliest reverberation return is often backscatter from a rough sea surface, usually followed shortly thereafter by a scattered return from the rough bottom.  Returns from the various surfaces and volumes are uncorrelated and, as a practical matter, add incoherently.The reverberation level at the receiver, plotted as a function of time as illustrated in Fig. 1, is called a reverberation envelope [5, pp. 237, 238, fig. 8.1].Figure 1.  Reverberation Envelope.  The three earliest returns are indicated for a typical monostatic system: surface scatter, bottom scatter, and scatter from the surface following a bottom reflection.The central task of a typical reverberation model is to compute the reverberation envelope.  This entails performing overlap scattering integrals over all of the scattering surfaces and volumes.  In principle, this would require (1) computing the acoustic field at every point on the surface and bottom and throughout the ocean volume within range of the source, (2) computing the scattering from each scattering point into the acoustic paths leading from the scattering points to the receiver, and (3) summing the scattered acoustic field at the receiver from each of the scattering points.This task is unfeasible as stated, even without real-time performance requirements.  We can, however, avail ourselves of some simplifying assumptions offered by practical considerations involving the nature of the beams produced by real sonar systems and some features of Gaussian beam models that felicitously allow us to exploit the nature of the sonar beams.  (The confusion arising from the coincidental use of the term “beam” to mean both sonar beams and a mathematical abstraction called a “Gaussian beam” is an unfortunate but unavoidable result of historical precedent and conventional usage.)  We are primarily interested in the reverberation received along the main beam of the receiver system.  Receiver beams are usually made as narrow as possible to maximize sensitivity to a possible echo from a candidate target location while rejecting clutter from scatterers.  Moreover, the source usually will form beams also, perhaps narrow beams, for the sake of power efficiency and to reduce the reverberation clutter from scatter outside the desired “look direction.”We therefore consider an approach to reverberation modeling that considers only sound projecting along the main beam of the source and arriving only along the main beam of the receiver.  If one or both of these beams is narrow, the computationally savings can be dramatic.  Gaussian beam models readily lend themselves to this approach since they explicitly model wave propagation as a summation of contributions to the acoustic field from narrow beams (see Fig. 2).Figure 2.  Gaussian beam.  A Gaussian beam leaves the source, located at 250 m EMBED Equation.3  0 km, and refocuses conspicuously at two points where it grazes caustics.  The bright bands indicate the strength, size, and location of the Fresnel volumes—regions over which coherent wave propagation takes place.The general strategy of the ATLoS reverberation model is to represent sonar beams from the source and receiver as a summation over a small number of Gaussian beams.  The Gaussian beams can be weighted so as to represent actual sonar beams from the source and receiver.  These beams form roughly elliptical “footprints” when they strike scattering surfaces such as the rough sea surface and these footprints overlap to a greater or lesser extent (see Fig. 3).  The reverberation model performs the scattering overlap integration necessary to compute the scattering of sound incident on the scattering surface from a source beam into the overlapping beam from the receiver.  The Gaussian beam formulation also simplifies this task by directly providing the reverberation model with the beam field strength from the source and receiver over the footprints and providing an easy means of approximating the travel time from the source and receiver to any sample point in the overlap region.Figure 3.  Bistatic Surface scattering overlap integral.  The Gaussian beam model computes the travel times from the source and receiver to each grid sample point in the overlap region of the sonar beams where the beams intercept the surface.  The model also computes the beam intensity at each grid point.  A reverberation model computes the surface reverberation by summing the contributions of the grid sample points.The reverberation model can be thought of as a driver or “wrapper” around a Gaussian beam point-to-point propagation model (FeyRay in this case) that serves as the computational kernel or engine for the reverberation model.  The following section supplies a few more details on the Gaussian beam formulation that help to explain why Gaussian beam models are particularly well-suited to the task of reverberation modeling.4.1	The Gaussian Beam Representation of the Acoustic FieldIn general, Gaussian beam models [6] such as FeyRay must perform two computationally intensive but essential tasks: (1) trace rays by solving the ray path equation, which may be written compactly in the form EMBED Equation.3  ,and (2) solve the ray path spreading equation, also called the dynamical equation EMBED Equation.3  .Here, V = 1/(2c2), where c is the speed of sound and r is a position vector designating a point along a ray.  The ray path position vector r(, ) is a function of an initial value such as a ray launch angle and a path parameter  EMBED Equation.3  related to path length s by d = c ds.  The sound speed varies significantly with location in the water, especially depth, but not appreciably with frequency, which greatly simplifies the use of the Gaussian beam formulation for underwater acoustic wave propagation modeling applications.The ray path spreading q(, ) is the rate of change of the ray path position in response to changes in the initial value; that is, q = (r/(The spreading equation is obtained by differentiating the ray path equation with respect to the initial value.The representation of the ray and spreading equations varies greatly among models, as do the computational methods used to solve them, yet they must all somehow perform the tasks of tracing rays and solving the dynamical equation.  FeyRay solves these differential equations directly by numerical integration.  The ray path equation is said to be nonlinear because the differential equation for the dependent variable r depends in a nonlinear fashion on r itself; specifically, d2r/d2 depends on V(r) and V is in general a nonlinear function of position r.  Notice, though, that the spreading equation is linear because the dependence of d2q/d2 on q is linear (the nonlinear function V depends on r, not q).  Because the spreading equation is linear, any linear combination of any two linearly independent solutions q1 and q2 of the spreading equation (i.e., q = aq1 + bq2 where a and b are constants) is also a solution of the spreading equation.  Notice also that the ray path and spreading equations are both independent of frequency; that is, the ray paths do not depend on frequency, nor does the ray path spreading.  The linearity of the spreading equation and the frequency independence of the ray and spreading equations are keys to the efficient calculation of the acoustic field in the Gaussian beam formulation.The Gaussian beam formulation thus has several features that make it particularly attractive for reverberation modeling applications:The computationally intensive ray traces and spreading calculations are frequency independent and may be performed once-for-all, and the few remaining frequency-dependent computations are not computationally intensive.  By contrast, many other types of models must recompute the acoustic field for each spectral component of a sonar signal.  To be sure, these economies are obtained at the expense of approximations that render Gaussian beam models less accurate than very high fidelity wave models, for example.  On the other hand the Gaussian beam formulation is far more robust and accurate than the ray theory formulation.  The Gaussian beam formulation thus offers a compromise between speed and accuracy.Gaussian beam models explicitly compute the travel times, path angles, and beam field strengths required by the reverberation model.By computing two linearly independent solutions q1 and q2 of the spreading equation just once, one can combine them linearly with different coefficients and further process them to produce a wide variety of useful quantities.  In particular, by introducing appropriate frequency-dependent coefficients (that is, by forming q = a( f )q1+b( f )q2 with the appropriate complex-valued coefficients a and b, one can directly compute the frequency-dependent acoustic field within the beam near the ray.  The coefficients can be chosen to represent real sonar beams.  The q’s can be further processed to yield estimates of travel times to points in the beam near the ray, and so on.  The Gaussian beam formulation naturally produces many of the quantities required by reverberation models that are not so readily forthcoming from other types of acoustic propagation models.ATLoS Reverberation Model APITwo new interaction objects were introduced and an existing interaction object was modified to support reverberation modeling.  The purpose of the new interaction objects is to enable the client to obtain from ATLoS the reverberation envelope information needed to estimate probability of detection and carry out other active sonar system performance estimates.  The modified interaction object (ATLoSResponse) contains new information about the dominant transmission path from a source to a receiver in addition to the transmission loss.The two new reverberation interaction objects are: a ReverberationRequestNarrowBeam, and a ReverberationEnvelope.  An active sonar source entity publishes ReverberationRequestNarrowBeam interaction objects.  ATLoS subscribes to these requests and publishes reverberation envelope interaction objects in response.  A sonar receiver entity  (a client)—an entity representing a sonar receiver whether a component of an active sonar system or not—in turn subscribes to the ReverberationEnvelope responses.4.2.1 ReverberationRequestNarrowBeamAn active sonar entity (the client) solicits a reverberation envelope prediction from the server (ATLoS) by publishing a ReverberationRequestNarrowBeam.  The request specifies thelocations of an active sonar source, a receiver, and a prospective contact;source and receiver beam patterns;times at which the reverberation level are desired;frequency range over which to compute the reverberation level.Corresponding to the ReverberationRequestNarrowBeam beam interaction object is an ATLoS C++ data object (a struct) with the same name.4.2.2 passive_transmissionTo assist the client to select suitable times and source and receiver beam patterns, the client may avail himself of new information provided in the modified and extended passive transmission interaction object.  Typically, the client would request a passive_transmission from the source to a prospective contact location and from the receiver to the same contact location.  A suitable start time for a reverberation envelope request might then be the total travel time from source to contact to receiver, and suitable beam steering angles might be chosen to coincide with the dominant eigenray path angles provided by the response to the passive_transmission request.  (An eigenray is an energetically important path of sound propagation between two points of interest, such as from a source to a receiver.)The existing ATLoSResponse interaction object for passive transmission was modified in the FOM by adding attributes for the travel time and the launch and arrival angles (Fig. 4) of the dominant transmission path.  ATLoS sends this interaction using a modified send_response in the libkkio library with the new signature    void     send_response( passive_transmission& );Figure 4. Eigenray launch and arrival Angles. Eigenray angles are specified as depression angles; that is, they are measured with respect to the horizontal, the positive sense being downwards.4.2.3 reverberation_envelopeIn response to a ReverberationRequestNarrowBeam reverberation envelope request, ATLoS publishes a reverberation envelope interaction object by calling a new overloaded version of send_response, with signature    void    send_response( reverberation_envelope& );where reverberation_envelope is an ATLoS C++ data object.5.  Future EffortsThe demands on the server system to support increasing numbers of contact/sensor pairs are already severe and are rapidly growing more acute.  Some measures have been taken to address this problem through distributed computing.We will soon begin a task to attack this problem in two ways: (1) accelerating the computational speed of the FeyRay ocean effects model, and (2) upgrading the KingKong ATLoS interface to FeyRay so as to consolidate and reuse FeyRay runs and thus greatly reduce the number of calls to FeyRay.In yet a third and independent effort, the developers of some client systems will undertake to cull the number of source/contact/sensor pairs using considerations such as effective range of sonar systems and frequency band sensitivities of sonar systems.6.  AcknowledgementsThis effort is funded by the Defense Modeling and Simulation Office with supervision and collaboration by the Naval Research Laboratory.References[1]	J. Collins, T. Foreman, and D. Speicher, “A New Design for a Sonar Environmental Effects Server,” Simulation Interoperability Workshop, Paper 02F-SIW-114, September 2002.[2]	R. A. Reynolds, et al., “The Ocean, Atmosphere and Space Environmental Services (OASES) System,” Simulation Interoperability Workshop, Paper 01S-SIW-047, March 2001.[3]	WAMDI Group: “The WAM model—a third generation ocean wave prediction model,” J. Phys. Ocean. 18, pp. 1775–1810, 1988.[4]	C. Scannell and J. Collins, “Providing an Improved Real-Time Natural Environment for the Navy’s Fleet Battle Experiments,” Simulation Interoperability Workshop, Paper 03F-SIW-062, September 2003.[5]	R. J. Urick, Principles of Underwater Sound, 3rd ed., McGraw-Hill, New York (1983).[6] V. Cerveny, M. M. Popov, and I. Psencik, “Computation of wave fields in inhomogeneous media|—Gaussian beam approach,” Geophys. J. R. Astr.  Soc. 70, 109–128 (1982).Author ProfilesTERRY FOREMAN is a physicist with Anteon Corporation in Arlington, VA, and is the developer of the FeyRay acoustic propagation model and the ATLoS KingKong data management front-end to FeyRay.DAN SPEICHER is a computer scientist with Lockheed-Martin Information Systems in Burlington, MA.