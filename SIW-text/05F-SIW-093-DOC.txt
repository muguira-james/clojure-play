Documenting the Web Enabled RTI - An XMSF Profile Prototype Ryan P.Z. BruntonScience Applications International Corporation10260 Campus Point DriveSan Diego, CA 92121858-826-6872bruntonr@saic.comKeywords: XMSF, XMSF Profile, HLA ABSTRACT: The goal of the eXtensible Modeling and Simulation Framework (XMSF) Profile Study Group has been to develop a set of guidelines for documenting and referencing technologies to be used in next-generation Modeling and Simulation (M&S). Having worked for the last two years on the problem, various technologies, standards, and goals were identified, ranging from UML diagrams to XML-metadata models. This paper documents the Profile prototype created to describe the Web Enabled Run-Time Infrastructure exemplar developed under XMSF funding (supported by the Defense Modeling and Simulation Office), elucidates the process by which the Profile was created, investigates the applicability of the identified documentation mechanisms, demonstrates the application of some of these technologies, and recommends how this Profile may be used as an example for extension by other XMSF exemplars to meet the objectives of the XMSF Profile definition.Background on the Web Enabled Runtime InfrastructureThe concept of that lead to the building of the Web Enabled Runtime Infrastructure (WERTI) was to produce a High Level Architecture (HLA) [1] federate that is able to communicate with a Runtime Infrastructure (RTI) [2] through web-based services. The end goal, which was achieved, is to have multiple federates that are able to reside as web services on a Wide Area Network (WAN), permitting the composition of a federation through the inclusion of these federates.For the implementation, we built a prototype HLA federation using XMSF-compliant Web Services for communication between the two federates communicating via the DMSO/SAIC RTI (RTI 1.3NG), using the Simple Objects Access Protocol (SOAP) and Blocks Extensible Exchange Protocol (BEEP). We created SOAP-formatted RTI interfaces employing the BEEP communication layer. These RTI interfaces are consistent with the Java bindings for the chosen RTI. BEEP allows bi-directional calls through the interface, enabling Federate Ambassador callbacks to be processed without polling. By relinking the existing federates with these interfaces, we have taken the initial steps to making the RTI callable as a Web Service. This approach also enables encapsulation of non-reentrant RTI libraries and permitted multiple instances of federates as Web Services.It is this XMSF exemplar that I used to develop an XMSF Profile. The content of the Profile can be found online [3]. The WERTI was employed in a number of web-based simulations [4, 5].XMSF Profiles DefinedXMSF Profiles are formal technical specifications for the application of interoperable web based technologies enabling composable and reusable modeling and simulation, and facilitating enterprise integration. The objectives of XMSF profiles are to:Provide unambiguous specification of the functionality of components, and interfaces among components of the frameworkEnsure interoperability between existing and new web enabled technologies, both within M&S and in related domainsProvide the necessary metadata to facilitate composability and reuse of components across multiple M&S application domainsFacilitate development of new applications and services that are functionally interchangeable with existing applications and servicesEnable development of new applications and services that readily extend functionality for continuous evolution of capabilitiesThe goal is to provide enough information within the profile to fully explain how the exemplar application works, how it fits into the modeling and simulation domain, and how to either interoperate with the existing application or implement a compatible alternative.Profile ComponentsTraditionally, with all of this required information comes the unfortunate potential to obscure data relevant to different target users, as well as the possibility of obscuring data through incompatible file formats. To eliminate this problem, we (the Simulation Interoperability Standards Organization’s XMSF Profile Study Group), decided that technologies and formats that are based on open standards, and meet specific target user goals, would be used to create Profiles.First Component: Formatted Descriptive TextWhile a number of textual and non-textual components compose a Profile, a single over-arching document is needed to tie the components together into a coherent whole. After reviewing user needs, and the automated infrastructure that will eventually support Profile discovery, we came to the conclusion that the Profile, as a text document, must be delivered in a platform-neutral, transparent XML [6] format capable of including extensive metadata markup. The DocBook [7] format was chosen because it fulfilled all of these goals and could be easily transformed via existing eXtensible Stylesheet Language (XSL) [8] stylesheets into browser-friendly HTML as well as generated easily from the XML-based Open Document Format (ODF) [9]. These formats have been recently accepted by OASIS [10] for representing word processing documents. Free DocBook tools are nearly ubiquitous, as are free and Open Source word processors that support both ODF and DocBook (e.g., Open Office 2.0, Kword, and Abiword), allowing for easy adoption by exemplar developers without requiring a steep learning curve or expensive, specialized software. While the DocBook XML is likely to be generated automatically by one of the word processing tools mentioned above, an abbreviated sample from the Web Enabled RTI Profile is shown in  REF _Ref519765299 \h Figure 1 to give the reader a feel for the format.It is worth noting the <indexterm>, <primary>, and <secondary> tags in the document excerpt above. These are meta-data tags linking the preceding word or phrase with weighted keywords. These tags can be easily parsed in an automated fashion and be utilized for discovery in a future Profiles repository. It is also worth noting that a human end user will likely never see this markup, as the DocBook document can, and should, be converted to a more human-friendly format (e.g., HTML, PDF, etc.) via an XSL transform and included in the delivered Profile. Second Component: UMLIt is said that a picture is worth a thousand words, and it is that principle which lead the XMSF Profile Study Group to recommend the inclusion of UML diagrams to describe the architecture and use cases for XMSF exemplar technologies. Currently, the following UML-2 [11] diagrams have been recommended by the XMSF Profile Study Group for Profile inclusion, though not all are strictly necessary:Use Case DiagramsClass DiagramsSequence DiagramsDeployment DiagramsWhile developing the WERTI Profile, we utilized all four classes of diagrams, though not necessarily in the traditional ways. UML diagrams are usually used as graphical means to design software, from class interfaces and package composition to component interaction a hardware deployment. Because of this, the diagrams can become quite large and complex, as all interfaces and interactions must be fully and rigorously defined.While this completeness is necessary and useful for full software design, where it is critical to give both developers and automated tools a full and accurate model to generate code from, the same diagram can rapidly become too verbose and complex to be easily digested in a descriptive document with the accessibility goals of a Profile. We therefore found ourselves paring down existing UML models to include only core public classes, interfaces, and interactions required to understand the functionality of the exemplar and leaving out low-level implementation details. This was entirely consistent with our stated goal of facilitating interoperability and has the added benefit of keeping Profiles accessible to a larger potential user base.  REF _Ref519765544 \h Figure 2 shows an example of a reduced class diagram used in the WERTI Profile.1  <book>2    <bookinfo>3      <title>XMSF Profile: Web Enabled RTI</title>4    </bookinfo>5    <chapter>67      <title>Overview</title>89      <section>10       <title>Summary</title>1112       <para>13         The Web Enabled RTI (WERTI)14         <indexterm>15           <primary>Runtime Infrastructure</primary>16           <secondary>Web Enabled RTI</secondary>17         </indexterm>18         was developed by SAIC for XMSF19         <indexterm>20           <primary>Extensible Modeling and Simulation Framework</primary>21         </indexterm>22         with funding from DMSO23         <indexterm>24           <primary>Defense Modeling and Simulation Office</primary>25         </indexterm>26         . The primary focus of the project was to develop libraries which27         allowed HLA 1.328         <indexterm>29           <primary>High Level Architecture</primary>30           <secondary>1.3</secondary>31         </indexterm>32         compliant federates to be joined into functional federations over a33         wide area network (WAN) using web services technologies.34       </para>35     </section>36     ...37 </chapter>38 ...39 </book>Figure  SEQ Figure \* ARABIC 1: An Abbreviated Sample of the Web Enabled RTI Profile Descriptive TextFigure  SEQ Figure \* ARABIC 2: Example of a Reduced Class DiagramFigure  SEQ Figure \* ARABIC 3: Example of a Reduced Sequence DiagramSimilarly, sequence diagrams were only included when doing so illustrated a core interaction that could impact deployment, or was needed to develop an understanding of the overall system function. An example from the WERTI Profile is in  REF _Ref519765988 \h Figure 3. Note that a number of low-level interactions have been omitted to facilitate an understanding of how the core components interoperate without focusing unduly on implementation specifics. This allows the Profile user to gain a comprehensive understanding of the systems and concepts embodied by an exemplar without becoming lost in implementation details better left to API documentation or Web Services Description Language (WSDL) service descriptions (see sub-section  REF _Ref519766146 \w \h 3.3 below).Use Case diagrams are the only set of diagrams that could be declared mandatory regardless of the exemplar subject matter. A Profile that fails to enunciate the purpose of the underlying exemplar, and how the Profile audience would use the technique or system being described, is inadequate by definition. Use Case diagrams are the single most accessible UML diagrams for end users, and we found them critical when describing how, and by whom, the WERTI might actually be used.  REF _Ref519766325 \h Figure 4 is a diagram used in the WERTI Profile as part of a section describing the use of the WERTI technology to connect a live HLA simulation to SCORM conformant learning materials.In addition to testing which UML models were practically applicable, we discovered during development of the WERTI Profile that UML file formats also needed specification. While there is a current OMG specification for delivery of XML-encoded UML diagrams known as XMI-2 [12], there is little industry agreement on how visual data must be encoded and decoded. Practically speaking this means that while the models generated by one UML tool can be imported by other tools, the visual layout of components is unlikely to be preserved across the tools. As UML derives its descriptive usefulness primarily from its visual representation of data, this shortcoming becomes critical for Profile deployment. Therefore, it was decided that all UML diagrams should be included in two forms:XMI-2 encoded XMLAn open standard binary image format (i.e. PNG) for inclusion in the master documentSince the image can be used to display the diagram within the HTML version of the Profile document, users will get a consistent document package independent of the browser used to view it.This second requirement may be relaxed as the XMI encoding standard is more fully implemented by vendors. For now, inconsistent support for encoding graphical element placement requires the inclusion of a binary image export. In the future, this requirement may be removed and replaced by a stylesheet conversion that transforms the XMI encoding into a browser-viewable vector format such as SVG.Figure  SEQ Figure \* ARABIC 4: Example of a reduced Use Case DiagramThird Component: Additional Supporting MaterialsIn addition to the primary descriptive document and any applicable UML diagrams, other supporting materials may be required to describe the exemplar in adequate depth to meet the needs of the Profile audience. These materials may include, but are not limited to:API documentationXML SchemasXML Document Type Declarations (DTDs)WSDL deployment descriptorsThe rule of thumb I used while composing the WERTI Profile is simple: if a document is required to meet one or more of the Profile goals as stated earlier in Section  REF _Ref519766772 \w \h 2 of this paper, it should be included. While this may lead to inconsistent inclusion or exclusion of certain components among different Profiles, it has the benefit of helping to ensure that any given Profile is usable by its intended audience and not crippled by a requirement to included additional documentation which may not be applicable to the system or technique being described (i.e., API documentation is not applicable to a non-programmable system or technology). In addition, I found that using the core DocBook document to link out to other parts of the Profile, rather than directly include them all in formally defined sections, allows for a consistent look and feel across Profiles regardless of any discrepancies in the actual supporting materials used.While specific formatting instructions for particular supplementary documents will likely be added by the XMSF Profile Study Group over time, the only current requirement is that these documents be in open, royalty-free formats whenever possible. For instance, API documentation could be submitted in an HTML format as generated by Javadoc [13] or Oxygen [14], but not as a Microsoft Word document. Lessons LearnedThe primary lesson I learned during the development of the WERTI Profile is that the Profile standard is going to be constantly evolving. Many techniques and tools will be ideally suited to certain exemplar technologies, while utterly mismatched for others. Despite this likely diversification, certain best practices will evolve over time, which I have already begun to see with the WERTI Profile. In an attempt to capture these best practices, categorize them, and encourage active community participation, an XMSF web portal has been developed and deployed at <http://www.xmsf.org>. This site will also act as an initial repository for Profile deployment, and already includes an annotated copy of the WERTI Profile.The second critical lesson learned while developing the WERTI Profile is that the use of open standards often requires the use of different tools and environments than are commonly deployed for documentation and design. While these tools are fairly simple, often free, and have familiar user interfaces, the process of discovering and aggregating these tools can be difficult. As the use of open, extensible standards is critical to the deployment of usable Profiles, we have attempted to alleviate this potential burden on Profile developers by providing a list of these tools on the <http://www.xmsf.org> website. A truncated version of this list appears in  REF _Ref519780115 \h Table 1, including some of the tools used to develop the WERTI Profile.Obviously, this list is not comprehensive, but as more Profiles are developed the website list will grow, making subsequent development efforts easier.ConclusionXMSF Profiles point the way to a future documentation standard that will facilitate both the discovery and understanding of next-generation simulations and technologies. While the standard is still in its infancy, the WERTI Profile has illuminated a number of best practices and solidified certain open standards usable across all Profiles. Table  SEQ Table \* ARABIC 1: Example Open Standards Tools Usable for XMSF ProfilesOutput FormatToolXMI-2 encoded UMLPoseidon UMLDocBook document + HTML via XSL transform XMLMindAPI documentation (HTML)JavadocXML Schema Butterfly XMLThese will allow for the development of comprehensive and robust documentation that can be utilized by a number of target users, ranging from managers and planners, to engineers and automated systems. While the standard is constantly evolving, the WERTI Profile has provided a solid foundation upon which future work and progress may be built, and the web portal that evolved from the lessons learned during development has provided a location for collaboration to facilitate this progress. ReferencesDefense Modeling and Simulation Office (1998) “Department of Defense High Level Architecture Interface Specification, Version 1.3,” April 2 1998.<https://www.dmso.mil/public/transition/hla/rti>The WERTI document is available as a JAR at <http://xmsf.org>. Click on “Links” and then “Web Enabled RTI Profile”. The components within the JAR file can be extracted using StuffIt Extractor or a similar tool that accesses the contents of a file archive.Katherine L. Morse, Ryan Brunton and David Drake, “WMDOA Integration Employing Web Services for Federate Communication – an XMSF Exemplar,” Proceedings of the Spring 2003 Simulation Interoperability Workshop, March 2003.Ryan Brunton, Justin Busch, David Drake, Katherine L. Morse, and Erik Jilson, “Enhanced Distance Learning for DVTE: Real Time Feedback in an Integrated SCORM Environment,” Proceedings of the 2005 Spring Simulation Interoperability Workshop, San Diego, CA, April 3 – April 8, 2005.<http://www.w3.org/XML/><http://www.docbook.org/><http://www.w3.org/TR/xsl/><http://en.wikipedia.org/wiki/OpenDocument><http://www.oasis-open.org/><http://www.eclipse.org/uml2/><http://xml.coverpages.org/uml2xmlDesignRules.html><http://java.sun.com/j2se/javadoc/><http://www.oxygenxml.com/>Author BiographyRyan P.Z. Brunton is a Software Engineer with SAIC. He received his B.S. in computer science (2001) from the University of California, San Diego. Prior to completing his B.S. he worked at the MOVES Institute at the Naval Postgraduate School. Mr. Brunton’s key areas of expertise are modeling & simulation, object-oriented design and development, and the extreme programming methodology.