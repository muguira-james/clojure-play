The Euclid RTP 11.13Synthetic Environment Development & Exploitation ProcessKeith FordThales Training & Simulation Ltd.Gatwick Road, CrawleyWest Sussex, RH10 9RLEnglandkeith.ford@thales-tts.comPascal PeyronnetThales Training & Simulation SA1, rue du Général de Gaulle95523 Cergy-PontoiseFrancepascal.peyronnet@thales-tts.comKeywords:Euclid RTP 11.13, Synthetic Environments, Process, SEDEP, FEDEP, HLAABSTRACT: Euclid RTP11.13 is a European Defence Research & Technology activity undertaken by the Western European Armament Group (WEAG). The RTP11.13 team is led by Thales Training & Simulation (UK) and comprises of 23 European companies from 13 Nations. The programme spans November 2000 to October 2003 and has a budget of €17 million (Euros). The aim of the project is to 'overcome the obstacles that prevent Synthetic Environments (SEs) being exploited in Europe by developing a process and an integrated set of prototype tools, which will reduce the cost and timescale of specifying, creating and utilising SEs for collective training, mission rehearsal and simulation based acquisition'. This paper describes the SE Development & Exploitation Process (SEDEP) that has been produced to support the creation and utilisation of synthetic environments and the work that is currently in progress to converge the SEDEP with the FEDEP.IntroductionEuclid is an acronym of European Co-operation for the Long-term In Defence. It provides a funding mechanism for European industry to collaborate on common defence problems and is managed by the Western European Armaments group (WEAG) research Cell. Each Euclid Research and Technology Programme (RTP) is managed by a Management Group that comprises of representatives from each nation contributing funds to the programme. The chair is from the nation that proposes the research study.The RTP11.13 team is led by Thales Training & Simulation (UK) and comprises of 23 European companies from 13 Nations. The programme started in November 2000 and will run for 36 months. It is the largest European Defence Research & Technology activity undertaken by the WEAG, with a budget in excess of 17 million Euro. The aim of the project is ‘to overcome the obstacles that prevent SEs being exploited in Europe by developing a process and an integrated set of prototype tools, which will reduce the cost and timescale of specifying, creating and utilising SEs for collective training, mission rehearsal and simulation based acquisition'.The aim will be met by achieving the following objectives:Determine and mitigate obstacles which prevent networked simulations being exploited in Europe.Provide a process and prototype tools which will reduce the life-cycle of synthetic environment production, execution and evaluation.To develop the software required to set-up a European repository of simulation assets.An overview of the project is given in [1]. The purpose of this paper is to describe the SE Development & Exploitation Process (SEDEP) that has been developed for creating and utilising SEs.TerminologyThe term ‘Synthetic Environment’ (SE) has many different meanings and there is often confusion about what is meant by an SE. Some people use the term SE to mean the instantiation of a networked simulation whereas other people take a broader view and use it to describe a framework for integrating and reusing modelling and simulation technologies to solve a range of related problems. For the purpose of Euclid 11.13, an SE is considered to be the instantiation of a heterogeneous networked simulation, whereas the supporting framework is referred to as a SE Development Environment. The term SE and Federation are therefore synonymous and in this paper, the choice of word depends on the context in which it is being used.Rationale for the SEDEPThe development and exploitation of Synthetic Environments requires the definition of a process to:Provide support to encourage the use of SE Technology on military programmes;Provide guidance for developers and users to plan and perform the different activities necessary to produce the required products and results;Promote good practice for developing SEs on time and within budget;Promote reuse of products (federation, federates, components) and results;Provide a framework for a tool set to reduce the cost and time for producing and using SE.Following discussions with the RTP 11.13 Subject Matter Experts, it was decided that rather than developing a new SE process from scratch, to use an existing accepted process and enhance it to meet the exact constraints and requirements of the application domains. Two options were considered; DMSO’s HLA Federation Development and Execution Process (FEDEP) and the use of the TRA process developed in Euclid 11.14. The advantages and disadvantages associated with these processes are described in the following sections.DMSO’s HLA FEDEPThe Federation Development and Execution Process (FEDEP) has been produced by DMSO to support the use of the High Level Architecture [2]. The analysis conducted on the FEDEP identified the following advantages and disadvantages.ProsIs an accepted process for any HLA development and a lot of experience has been gained by the HLA community.Is in the process of being standardised as an IEEE recommended practice.Its use is already established in many organisations.Several existing COTS tools support the FEDEP.ConsDoes not cover the complete lifecycle of a SE, it just focuses on the development part.Main emphasis of re-use is at the federate level, rather than at the federation and component level.Is focussed on the implementation of HLA federations and does not support other interoperable technology e.g. DIS.Does not provide guidance to all the different types of SE user.EUCLID RTP11.14 TRA ProcessThe TRA process was developed in Euclid 11.14 [3] to promote the use of SEs for Training, Rehearsal and Acquisition purposes. An important concept of the process is that it is supported by a data repository. This provides the primary means for storing and transferring data between the different phases of the process and for providing tool support. The following advantages and disadvantages were identified for the TRA process.ProsCovers complete life cycle of SE creation and use from initial analysis of user needs to feedback of evaluation results.Re-use promoted by storing all products and intermediate results in a repository.Applicable to different interoperability technologies e.g. DIS.Provides interfaces to Training, Rehearsal and Acquisition application domains.ConsProcess not recognised outside of Euclid 11.14 consortium.Experience of using it limited to Euclid 11.14 programme.Insufficient definition of activities at task level.Limited tool support.FEDEP as  a baselineTo take advantage of the desirable features from both processes, the best features of both processes have been amalgamated. The FEDEP has been used as a baseline, and this has been modified and extended to overcome the identified limitations of it. The resulting Euclid 11.13 process is known as the Synthetic Environment Development & Exploitation Process (SEDEP). The use of the term SEDEP has been chosen to reinforce its close links with the FEDEP whilst promoting its more general use for developing SEs by losing its association with the HLA. It should be noted that the current steps of the FEDEP exist as a sub-set of the SEDEP.SEDEP Enhancement to FEDEPThe following enhancements to the FEDEP are provided by the SEDEP:Incorporates relevant activities from Capability Maturity Models [4] to promote good System Engineering practice.Introduces two new steps dedicated to supporting the user in determining the suitability of an SE in solving their problem and estimating project parameters such as cost, duration, risk etc.analysing the execution outputs and evaluating the results.Extends the FEDEP’s overlay representation to provide guidance on many other activities that span across all the SEDEP steps.Generalises the wording and definitions so as not to be dedicated to only using HLA technology.Identifies and explicitly defines inputs and outputs for each step and activity of the process. Identifies and defines explicitly the different library components in the repository used by the different steps and activities.Supports the composition of federates from components and provide the capability for federation, federates and components reuse.Specifies the use of a repository to provide a means of storing the information about the SE and for support tools to transfer data between the different phases of the process.Overview of SEDEPTwo complementary representations (‘views’) are used to describe the SEDEP:Steps representation: the different activities of the process are organised in steps sequentially along the whole process. Each step covers a specific phase of the SE lifecycle. Overlays representation: the different activities of the process are thematically organised in overlays along the whole process. Each overlay covers a specific theme or aspect of the SE, which requires a specific technical environment and/or specific expertise.SEDEP Steps RepresentationThe SEDEP is defined by 8 steps as shown in Figure 1. Although the steps are shown as a sequential sequence of operations, in practice, the steps may run concurrently with a step starting before the proceeding one has finished. There are also feedback loops where it may be necessary to revisit an earlier step as a result of actions performed in later ones.Step 0: Analyse User’s Needs The purpose of this step is to analyse and scope the user’s problem, describe it in terms of application domains, decide if an SE provides a suitable solution and to obtain an estimate of the project parameters.Step 1: Define Federation User Requirements The purpose of this step is to define and document the specific User requirements and detailed objectives, addressing both the development and the operation of a Federation and the definition of the evaluation criteria and metrics.Step 2: Define Federation System Requirements The purpose of this step is to specify the requirements of a system to provide an appropriate representation of the real world domain that applies to the Federation problem space and to develop the Federation scenario. It is also in this step that the Federation user requirements are transformed into a set of highly specific Federation system requirements that will be used as success criteria during Federation testing.Step 3: Design Federation The purpose of this step is to identify, evaluate, and select all Federation participants (Federates), allocate required functionalities and the subset of the scenario pertinent to those Federates. It also supports the design of components, either new or modifications to existing ones, designing the databases (visual, environmental) and designing the network and computer infrastructure.Step 4: Implement Federation The purpose of this step is to produce the Federation Object Model (FOM), build and/or modify federates if necessary, and prepare the Federation elements for integration and test (database development, scenario development, network implementation, security procedure implementation, etc.).Step 5: Integrate & Test Federation The purpose of this step is to integrate the Federation elements with the runtime infrastructure and test the Federation ready for operation. This includes testing the interactions between Federates, ensuring that the network is reliable and can handle the expected traffic, verifying the Federation against the system requirements, and validating the Federation against the user requirements.Step 6: Operate Federation The purpose of this step is to train instructors, operators, technicians, participating in the federation, rehearse the Federation executions to identify unforessen problems, execute the Federation, and to archive the Federation execution outputs.Step 7: Perform Evaluation The purpose of this step is to post-process the outputs acquired during the Federation execution, analyse them, and evaluate the results. The results are then fed back to the user to decide if the problem has been solved or if further work is required.Where appropriate, the SEDEP can be iteratively applied to support an SE project. For example, before applying the full process, it may be necessary to perform a feasibility study to see if an SE can solve the problem under investigation or to determine the total cost of the full programme. In this case, only some of the steps will be performed. The depth to which the process is applied during each iteration will depend on the quality of information needed. So if only rough costs and timescales are required, not as much analysis will need to be done compared to if accurate estimates are required. The process is underpinned by a Repository to store and reuse knowledge, products and information about SE assets e.g. simulations, databases, support tools, etc. An important feature of the SEDEP is that all the products are stored in the repository, so that successive iterations of the process can build on the information already available.SEDEP Overlays RepresentationThe purpose of the SEDEP overlays representation is to combine the activities associated with a particular aspect (theme) of the SE development and exploitation that span across several process steps. Overlays provide an orthogonal and complementary view and provide visibility of the transformation of the ‘theme’ along the whole process. An important use of overlays is to provide the ability to tailor the process to meet the requirements of a particular application.The existing overlays for VV&A and security that have been defined for the FEDEP have been significantly expanded in the SEDEP. In order to base the SEDEP on System Engineering best practice, the results from the work on Capability Maturity Models (CMMs) have been incorporated as overlays to the process. The following CMM activities have been identified because of their direct relevance to the development and exploitation of SEs:Engineering Overlays Requirements Development (RD), Technical Solution (TS), Product Integration (PI), Verification (Ver), Validation (Val), Requirements Management (RM).Support Overlays Decision Analysis and Resolution (DAR), Configuration Management (CM), Measurements and Analysis (MA), Process and Product Quality Assurance (PPQA).Project Management Overlays Project Planning (PP), Project Monitoring and Control (PMC), Integrated Project Management (IPM).Process Management Overlays Organisational Process Definition (OPD).Overlays specific to the development and exploitation of SEs have also been identified. These include:Engineering Overlays Scenario, Simulation, Architecture, System Operation, Real-time Infrastructure, Network Infrastructure, Computer Infrastructure, Measurement, Verification, Validation.Support Overlays Repository, Security, Training.Application Overlays Training Application, Rehearsal Application, Acquisition Application, Test & Evaluation Application, Experimentation & Analysis Application.User Profile Overlays: Problem Setter, Problem Solver, SE Implementer.The presentation of the overlays is made using a matrix/table type representation with a line for each overlay and a column for each step. An example of a SEDEP overlay is shown in Figure 2. The abbreviations show the mapping with the corresponding CMMI activity.AnalyseUser’sNeeds0DefineFederationUserRequirements1DefineFederationSystemRequirements2DesignFederation3ImplementFederation4Integrate& TestFederation5OperateFederation6PerformEvaluation7ENGINEERINGIdentify the mission area addressedRDIdentify scenario :. location or nature of the   area . type of engagementRDDefine Federation scenarioRDAllocate scenariosTSImplement scenario:. natural environ. database. tactical environ. database. natural scenario instance. tactical scenario instanceTSReview scenario inputsDevelop test scenariosPIPerform scenarioTake into account scenario deployment, if applicable for evaluation.Scenario Define Federation Conceptual  ModelDefine Federation RequirementsRDSelect federationSelect federatesSelect componentsDesign federate fromcomponentsAllocate functionalityTSImplement FederateTSPrepare Federation:. prepare federates. test federates. incremental integrationIntegrate FederationTest FederationPIExecute FederationSimulationArchitectureSystem OperationDefine Federation system Requirements (infrastructure part)Define federation system operation requirements (infrastructure part)RDAllocate Objects/interaction publish/subscribeDesign NetworkAllocate ComputerTSDevelop Federation Object ModelImplement Real-Time InfrastructureImplement Network & Computer InfrastructureTSPrepare FacilityImplement Network & Computer InfrastructureImplement Real-Time Infrastructure PIUse of Infrastructure for on-line execution.Use of  Infrastructure for on-line evaluation.Real-timeNetworkComputerInfrastructureIdentify the problem to be solvedRDIdentify  the “object” to be measuredRDIdentify metrics and indicators to be appliedRDIdentify observable parametersTSImplement observable (recordable) parametersImplement analysis algorithms or formula for evaluation, if necessaryTSTest observable parameters logPILog Federation outputsPrepare Federation execution outputs.Analyse Federation execution outputs.Prepare results (statistics, metrics).Measurement Verify needsVALInitial VV&A planning document Verify federation objectivesVALVerify Federation RequirementsValidate Federation Conceptual ModelVERVerify Federation DesignVERVerify Federation ImplementationVERVerify TestingValidate FederationVER - VALV&V SEDEP Relationship with FEDEPThe steps representation provides a convenient way of showing the relationship between the SEDEP and the FEDEP. It can be seen from Figure 3, that there is a one-to-one mapping between the SEDEP and FEDEP steps. To reinforce this consistency, the SEDEP steps are numbered from 0 – 8 so that SEDEP step 1 performs the same activities as FEDEP step 1. The FEDEP, therefore, becomes a sub-set of the SEDEP, which preserves the wealth of experience gained with the FEDEP. The enhancements to the FEDEP steps that are provided by the SEDEP include: Define Federation User Requirements (DMSO FEDEP v1.5 Define Federation Objectives): The name has been changed to reflect the use of system engineering best practices. An activity has also been added for developing the user requirements for Evaluating the results from the federation execution (Step 7).Define Federation System Requirements (DMSO FEDEP v1.5 Define Federation Conceptual Model): The name has been changed to reflect the use of system engineering best practices. An activity has been added to explicitly define the necessary system outputs to perform the required evaluation.Design Federation (DMSO FEDEP v1.5 Design Federation): Activities added for generating federates from components, database design and for designing the network infrastructure.Implement Federation (DMSO FEDEP v1.5 Develop Federation): The word ‘Develop’ was considered to be too imprecise and was changed to ‘Implement’ to suggest the building, integration and testing of federation elements. Activities have been added for implementing federates from components, implementing real time infrastructure, and implementing the network infrastructure.Integrate & Test Federation (DMSO FEDEP v1.5 Integrate & Test Federation): Activities added for configuring federates and network elements. Operate Federation (DMSO FEDEP v1.5 Execute Federation & Prepare Results): The name of this step was changed since additional tasks were added and ‘Execute Federation’ now becomes a task within this step. New tasks have been included for preparing the federation for execution, training operators and technicians and rehearsing federation executions. The task for preparing results has been moved to the new SEDEP step 8.SEDEP Process DescriptionA new format has been generated for describing the process to make the information more accessible (Appendix A). The following information is given for each step:Description of purpose of step.Data flow diagram showing activities, products, and required library information.Description of internal and external inputs and outputs.Description of library information required.Description of activities to be performed.SE Development EnvironmentIt is proposed that the development and use of a Synthetic Environment is supported by an SE Development Environment which is defined as a type of Integrated Development Environment that comprises of the process, tools, products and knowledge base used for supporting the lifecycle of SE projects. It provides the necessary technical environment to solve a range of related problems from a particular application programme. The elements of the SE Development Environment are described in the following table:ProcessDefinition of the activities, interfaces and products required to support the creation and utilisation of an SE in order to solve a User’s application domain problem.Tools Tools to capture the User’s Needs for representing and simulating the application problem space.Tools to develop (define, design, implement and test) the simulation application which will represent with the necessary level of fidelity the application problem space within its operational environment.Tools to set-up, control, monitor and log the different parameters during the execution.Tools to evaluate the data from the federation execution in order to provide a solution to the application problem being investigated.Repository to store and reuse knowledge, products and information about SE assets e.g. simulations, databases, support tools, etc.KnowledgeMission Space knowledgeDomain Application knowledgeModelling & Simulation knowledge (modelling, computer, network, databases, etc.)Programme knowledge e.g. typical implementation costs, schedules etc.Engineering knowledge e.g. Best practices, guidance, help.SE AssetsSimulations of equipment (sensors, etc.), platforms (vehicle, weapon system, etc.), tactical units (company, battalion, etc.), natural environment, etc.Databases (visual, natural environment, etc.)Support tools (IOSs, Data Loggers, Execution Management, etc.)Products (outputs from the process activities)Federation definition and development materialsTested FederationResults (raw results, evaluation results, etc.)Projects parameters (costs, time, etc.)Table  SEQ Tableau \* ARABIC 1  SE Development Environment ElementsConclusionsThe main conclusion from this work is that the FEDEP has proved to be a valuable process for developing and executing SEs, but which would benefit from further enhancements. To overcome some of the limitations of the FEDEP, Euclid 11.13 has developed an SE process (the SEDEP), which enhances and extends the steps of the FEDEP. In particular, activities are included, to support an operational user who may have little experience of using SEs, and for promoting reuse at the federation and component level. In order to gain the SE community’s acceptance of the SEDEP, the process has been defined in such a way so as to preserve the investment in time and tools from use of the FEDEP.Further WorkTo promote the ideas developed in this work element to the SE community, a concerted effort is being made by members of the consortium to influence the next development of the FEDEP before it becomes an IEEE recommended practice.  Discussions have already been held with the FEDEP Productisation Group who are receptive to the idea of converging the development of the FEDEP with the work being performed by RTP 11.13.AcknowledgementsWe would like to acknowledge the help of our colleagues at Thales Training & Simulation and the Euclid consortium with the preparation of this paper.We would also like to acknowledge the co-operation of Bob Lutz and the FEDEP productisation team for their valuable discussions on how to promote the results from RTP 11.13.References[1]	K.J. Ford, Euclid RTP11.13 Realising the Potential of Networked Simulation in EuropeEuropean SIW, Paper 01E-SIW-011, June 01.[2]	High Level Architecture Federation Development and Execution Process (FEDEP) Model, Version 1.5, December 8 1999.[3]	Euclid RTP 11.14 Executive Summary, WEU Research Cell, Contract No. 98/EF 11.14/008, 1999.[4]	CMMI for Systems Engineering/Software Engineering, Version 1.02, Carnegie Mellon Software Engineering Institute, Nov 2000.Appendix ASEDEP STEPS AND TASKSDEFINITION(1) Define Federation User RequirementsThe purpose of this step is to define and document the specific User requirements and detailed objectives, addressing both the development and the operation of a Federation and the definition of the evaluation criteria and metrics. EMBED Word.Picture.8  INPUTProblem DescriptionComplete and unambiguous description of user problem.Program DescriptionDescription of the major programme technical and management constraints i.e. use of specific equipment or technology, or facility, duration of the project, budget guidelines, etc.Proposed SE SolutionMain features of an SE that will solve the User problem.Estimated Project ParametersCritical Project parameters (cost, schedule, complexity) necessary to define the dimension and complexity of the SE solution derived using knowledge of previous SE designs.OUTPUTFederation User Requirements Requirements for what the SE must do to solve the problem under investigation.Evaluation User RequirementsRequirements for parameters that must be evaluated in the evaluation step, e.g. record of number of missile used against each target.INTERNALFederation User Needs StatementsDescription of user problem translated in needs for federation development, execution.REPOSITORYAvailable ResourcesIndustrial and human resources (equipment, specialist, facilities, etc.)Identify Federation User NeedsThe primary purpose of this activity is to develop a clear understanding of the problem to be addressed by the federation. The needs statement should include, at a minimum, high-level descriptions of critical systems of interest, coarse indications of fidelity and required behaviors for simulated entities, key events that must be represented in the federation scenario, and output data requirements. In addition, the needs statement should indicate the resources that will be available to support the federation (e.g., funding, personnel, tools, facilities) and any known constraints that may affect how the federation is developed (e.g., due dates, security requirements). In general, the needs statement should include as much detail and specific information as is possible at this early stage of development.An explicit and unambiguous statement of federation needs is critical to achieving clear communication of intent among the developers of the federation. Failure to establish a common understanding of the required product can result in costly rework in later stages of the federationdevelopment process.Develop Federation User RequirementsThe purpose of this activity is to refine the needs statements into a more detailed set of specific User Requirements for the federation. The federation User Requirements is intended as a foundation for generating federation System Requirements, i.e., translating high-level user/sponsor expectations into more concrete, measurable federation goals. This activity requires close collaboration between the federation user/sponsor and the federation development team to ensure that the resulting objectives are consistent with the stated needs. Examples of the types of information that might be documented as a result of this activity would include the following:• A prioritized list of measurable objectives for the federation• A high-level description of key federation characteristics (repeatability, portability, time management approach, etc.)• A federation development plan showing an approximate schedule and major milestones• Estimates of needed equipment, facilities, and data• Operational context constraints or preferences, including friendly/threat/civilian Order of Battle, geographical regions, environmental conditions, and tactics• Identification of security needs, including probable security level and possible designated approval authority (or authorities, if a single individual is not possible)• A configuration management plan• Initial planning documents (e.g., VV&A, test, security)Early assessments of federation feasibility and risk should also be performed as part of this activity. In particular, certain objectives may not be achievable given practical constraints (such as cost, schedule, availability of personnel or facilities) or even limitations on the state-of-the-art of needed technology. Early identification of such issues and consideration of these limitations and constraints in the Federation Objectives Statement will set appropriate expectations for the federation development effort.Finally, the issue of tool selection to support scenario development, conceptual analysis, VV&A and test activities, and configuration management should be addressed before the Develop Objectives activity is concluded. These decisions are made by the federation development team on the basis of tool availability, cost, applicability to the given application, and the personal preferences of the participants. The ability of a given set of tools to exchange federation data is also an important consideration.identify the tool under consideration (one or more simulation, hardware-in-the-loop, C2 systems).identify preferred location and method for development, integration, test, and execution (local, at a specific site, distributed, other).review applicable fidelity standards and referents ; identify high level fidelity objectives, including accuracy and capacity ;identify VV&A participants, activities, and products.determine desired level of security required. Actual security level may depend on the data or federates.review security constraints and requirements. These may impact timelines as well as cost (hardware, safes, procedures, etc.)identify security authority for federationDevelop Evaluation User RequirementsThe purpose of this activity is to identify the different objects to be evaluated and the different measures, criteria to be associated.identify application objects to be measured (e.g. trainee readiness, mission success, system performance)identify the criteria and measures to be applied to the application objects.define how to present the results of the evaluation.Figure 3	SEDEP Relationship with FEDEPFigure 2	Example of SEDEP OverlayFigure 1	SEDEP Steps and Products