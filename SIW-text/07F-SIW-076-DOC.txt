Enhancing Virtual Simulation Systems Interoperability through V-DISLance R. MarrouMark A. FaulkScience Applications International Corporation (SAIC)12901 Science DriveOrlando, FL 32826 USA(407) 243-3710 (phone)(407) 243-3586 (fax) HYPERLINK "mailto:lance.r.marrou@saic.com" lance.r.marrou@saic.com HYPERLINK "mailto:mark.a.faulk@saic.com" mark.a.faulk@saic.comTerry B. TysonLockheed Martin STS12506 Lake Underhill RoadOrlando, FL. 32825 USA(407) 243-3818 (phone)(407) 243-3586 (fax) HYPERLINK "mailto:tysonte@se-core.net" tysonte@se-core.netMr. Brian KemperU.S. Army Program Executive Office for Simulation, Training, andInstrumentation (PEO STRI) 12350 Research ParkwayOrlando, FL. 32826 USA(407) 384-3816 (phone)(407) 384-3611 (fax) HYPERLINK "mailto:brian.e.kemper@us.army.mil" brian.e.kemper@us.army.milABSTRACT: Distributed Interactive Simulation (DIS) is an infrastructure that promotes interoperability amongst various training systems, whether they belong to the same vendor or not.  It links multiple types of simulations from the constructive, live, and virtual domains, and across different types of networks.  Even within the same organization, different training systems utilize a slightly different flavor of DIS.  The reason for this is simple, these systems require functionality not available in the current (at the time the training system was developed) standard and extensions or modifications are necessary.  The IEEE and SISO standards cannot hope to remain in lock-step with the development of new technologies in simulators.The U.S. Army Program Executive Office for Simulation, Training, and Instrumentation (PEO STRI) Project Manager Combined Arms Tactical Trainer (PM CATT)  initiated the Synthetic Environment (SE) Core Architecture & Integration (A&I) program.  This contract is tasked with developing a Virtual Simulation Architecture (VSA) with the goal of providing the warfighter with enhanced training by increasing interoperability between training systems, increasing the reuse of products developed for training systems, protecting the investments made in developing current virtual training simulations, and increasing the adaptability and extensibility of the virtual training simulations that are developed to enable the easy incorporation of new features.  A large segment of the PM CATT virtual domain programs uses DIS, so this standard is important in legacy, current, and future training systems. Establishing a single flavor of DIS that will be used by the training and simulation programs under PM CATT and then communicating the desired changes to the standards community at IEEE and SISO is one of the initiatives contributing to resolving the interoperability issues within the U.S Army virtual domain.This paper describes the SE Core VSA effort in performing the gap analysis and in developing the extensions and modifications to create VSA DIS (V-DIS).  We discuss the challenges of developing a useful standard while minimizing the impact on legacy training systems.  We also describe the effort of correlating our requirements with the existing efforts within the DIS community to provide an extensible and updated standard.  This correlation will minimize the impact to the U.S Army training systems with respect to DIS when the revision gets published.IntroductionDistributed Interactive Simulation (DIS) is an infrastructure that promotes interoperability amongst various training systems, whether they belong to the same vendor or not.  It links multiple types of simulations from the constructive, live, and virtual domains, and across different types of networks.  However, it is a known issue that even within the same organization different training systems utilize an incompatible variant or flavor of DIS thus impacting the interoperability objectives.The U.S. Army Program Executive Office Simulation Training & Instrumentation (PEO STRI) Synthetic Environment (SE) Core program is supporting the Training of our Warfighters by providing a Common Virtual Environment (CVE) that links system and non-system simulations into a fully integrated and interoperable training capability. The SE Core concept includes the development of a Virtual Simulation Architecture (VSA) responsible for providing the Warfighter with enhanced training by increasing interoperability between training systems, increasing the reuse of products developed for those training systems, protecting the investments made in developing current virtual training simulations, and increasing the adaptability and extensibility of the virtual training simulations that are developed to enable the easy incorporation of new features.  A large segment of the Project Manager Combined Arms Tactical Trainer (PM CATT) virtual domain programs use DIS; so this standard is important in legacy, current, and future training systems. Establishing a single flavor of DIS that will be used by the training and simulation programs under PM CATT and then communicating the desired changes to the standards community at IEEE and SISO is one of the initiatives contributing to resolving the interoperability issues within the U.S. Army virtual domain.  REF _Ref175564328 \r \h [1]Problem SpaceWithin PEO STRI PM CATT DIS is widely used by a large majority of current virtual training systems. However each of these different training systems implements a slightly different flavor of DIS.  Most systems have diverged from the original standard they were based on in order to meet their needs, ultimately resulting in the fact that the virtual domain’s utilization of DIS no longer provides a common language for product and system interoperation. To address this issue programs develop gateways to translate a limited set of the protocol between existing dialects.From an SE Core perspective the overarching objective of developing interoperability solutions for the virtual domain needs to encompass a solution to the DIS issue. The approach is to analyze the functional requirements for a virtual instantiation or dialect of DIS (V-DIS) and then converge on a single consolidated specification that will restore a common interoperation language for product insertion, providing one step toward plug and play products. V-DIS provides a common language for system interoperation, enabling more complete exchanges than existing gateways provide.  It also provides a common point to Monitor, Influence, & Plan for future DIS standards evolution for PEO STRI and act as a buffer between domain systems and the on-going standards evolutionThere are many challenges associated with this effort including developing a useful standard while minimizing the impact on legacy training systems.  Correlating our requirements with the existing efforts within the DIS community helps provide an extensible and updated standard that works well for all PM CATT programs and will minimize the impact to the U.S Army training systems with respect to DIS for additional revisions.V-DIS Development ApproachThe V-DIS development approach and analysis processes are defined to support our core mission: “To increase interoperability within and across PEO STRI virtual training systems.” The process goal is to bring the domain programs and the standard as close together as possible and to provide a common, coordinated management of the remaining differences.  REF _Ref169942742 \h Figure 1.1 - V-DIS & Standards Evolution shows a notional view of the evolution for both V-DIS and the underlying standards. The V-DIS change process and the V-DIS team involvement in the standards both contribute to minimizing the gap between V-DIS and the standards.Figure  STYLEREF 1 \s 1. SEQ Figure \* ARABIC \s 1 1 - V-DIS & Standards EvolutionThe V-DIS development effort is composed of three main phases. Phase one defines a common DIS Protocol Data Unit (PDU) and Enumeration set for use by the virtual domain. Basic dialect differences are incorporated or reconciled from the reference set of virtual training systems. This phase also bounds the V-DIS problem space by identifying areas of DIS not currently needed within the VSA domain. A common master enumeration list is produced along with any additions or changes to the DIS standard PDU structures.Phase two looks at functionality required by the VSA domain programs but not supported or not clearly defined by the current DIS standards. In some cases one or more of the domain programs have locally extended or modified DIS to solve the problem. The V-DIS team must look at each of these possible solutions along with any related efforts within the DIS standards groups. For these problems, the V-DIS development team will capture and analyze the potential or competing solutions. A V-DIS working group including VSA domain program representatives is stood up to review these issues, consider V-DIS recommendations, and ensure the domain program needs and constraints are addressed.  REF _Ref169942829 \h Figure 1.2 - V-DIS Analysis Process illustrates how the V-DIS analysis and review output are fed back to influence the DIS standards. EMBED Visio.Drawing.11  Figure  STYLEREF 1 \s 1. SEQ Figure \* ARABIC \s 1 2 - V-DIS Analysis ProcessIn the third phase, V-DIS sustainment, SE Core will continue to monitor, influence, and plan for the future of the DIS standards. Both electronic collaboration mechanisms and in-person working group meetings will be employed.  REF _Ref169942337 \h Figure 1.3 - V-DIS Sustainment Process shows how V-DIS acts as a buffer between the VSA domain and the standards organizations.Figure  STYLEREF 1 \s 1. SEQ Figure \* ARABIC \s 1 3 - V-DIS Sustainment ProcessV-DIS Engineering ProcessesThis section provides a high level description of the processes performed during V-DIS development. At the highest level, the V-DIS process is as follows:Determine the standard protocol on which the V-DIS specification will be based.Determine the problem scope based on the core mission.Determine the gaps between the domain programs and the end state.Determine how to close or minimize the gaps while:Maximizing commonality across the domain.Minimizing costs to the domain programs to achieve the end state.Provide evolutionary paths for high impact areas.Manage the evolution of the standards.Participation by the domain programs is essential in all phases to ensure both technical and political buy-in. The domain programs are the end consumers and if they are not confident that the V-DIS development has fully considered their needs, it is unlikely to be adopted. Additionally, there will always be technical issues involving the requirements for each of the programs that will not be fully understood outside the program.  Without this understanding, an implementation in the specification may not be entirely correct.  The remainder of this section describes how we are achieving these goals.Determine the Base StandardsDIS is required to support the large, current investment of PEO STRI DIS-based virtual simulation training systems. The decision to base V-DIS on the latest DIS standards was primarily driven by the following:Many of the experimental DIS solutions promoted by our domain are incorporated into the latest standards.A major goal of the VSA is to provide an open architecture fully supporting the incorporation of COTS and GOTS solutions.The DIS standards reflect a large collaborative industry wide effort. It is to our benefit to leverage that effort.The V-DIS base standards are as follows  REF _Ref175564311 \r \h [2]  REF _Ref170636800 \r \h [3]  REF _Ref175563383 \r \h [4]:Doc. NumberTitleSISO-REF-010-2006Simulation Interoperability Standards Organization (SISO) Enumeration and Bit Encoded Values for use with Protocols for Distributed Interactive Simulation Applications (EBV-DOC)IEEE 1278.1-1995IEEE Standard for Distributed Interactive Simulation – Application protocolsIEEE 1278.2-1995IEEE Standard for Distributed Interactive Simulation – Communication Services and ProfilesIEEE 1278.1A-1998IEEE Standard for Distributed Interactive Simulation – Application protocols (Supplement to IEEE Std 1278.1-1995)IEEE P1278.1/D13Draft Standard for Distributed Interactive Simulation – Application protocolsIn addition to these published standards, we have embraced the ongoing drafts proposed by the SISO DIS Product Development Group (PDG).  Although by definition, the draft is not final, we are willing to adapt to the upcoming new DIS standards. Determine the Problem ScopeDuring this process step, the functional needs of the VSA domain programs are analyzed and consolidated. Areas of DIS that are not currently required by the domain programs are put on the low priority lists. High priority problems and low hanging fruit solutions are identified. All functional areas are prioritized based on the near term domain program interoperability and SE Core internal development needs. Some solutions are as straightforward as stepping up to the newest DIS standards. In such cases where a workable, even if not optimal solution exists, the V-DIS team recommendation is typically to adopt that solution. This is in agreement with the long term goal of minimizing the gap between VDIS and DIS. Gap AnalysisAs the initial step, we performed a variance analysis between the base standard and selected VSA domain programs to determine what differences exist in their implementation of DIS, including the enumerations.  The programs reviewed the analysis and provided feedback to the V-DIS development team. The analysis results were presented uniformly using a combination of Microsoft Word and Excel documents.  The documents were designed to minimize the review effort by the domain programs. Discrepancies such as non-standard enumeration values were clearly identified in the enumeration analysis spreadsheets along with the V-DIS recommended solution.  An on-line review and collaboration web facility was utilized. A VDIS working group was established to facilitate organized, collective presentation and discussion of the material.  Ease of participation was paramount as the availability of qualified domain program engineers is extremely limited.Some gaps were more difficult to quantify. Functions such as asset status and initialization are not fully defined by the DIS standards but are essential if SE Core is to develop products which can truly plug and play between virtual domain training systems. In these cases a more ad-hoc analysis and write-up was performed to describe the variances between domain programs. Establish RecommendationsSimple deviations from the DIS standards such as enumeration values generally yield straightforward recommendations. More complex situations arise when the existing DIS standards are inadequate or unclear how to support some functionality. Clarification as to the purpose, content, and usage of datum records and values was included in the V-DIS specification to ensure consistent usage and behavior. The cost to the domain programs is an additional factor that must be considered, though high impact solutions may require a less costly interim recommendation. The V-DIS working group forum is used to sell the solutions to the domain programs, who will review them and comment on them, perhaps requiring additional changes or modifications to a proposed solution.  The recommendations are intended as a roadmap for the domain programs to step up to the V-DIS specification. Feedback from the program allows the exchanges of key technical information that may be missing from a cursory or even in-depth review by the V-DIS team.For those difficult functions that are not fully defined within DIS, the V-DIS team has proposed a more complete and well-defined solution.  This solution is then presented to the working group for review and concurrence.Gap ClosureResponsibility for gap closure falls to the domain programs themselves.  The step up will typically be phased into the planned maintenance and upgrade cycles based on the near term interoperability needs and cost benefit to the program.  The step up may not even occur until the necessary V-DIS functional requirements are incorporated into the DIS standard.  This is another reason why it’s important to correlate our recommendations with the draft standard and within the existing DIS community.Manage the Standards EvolutionOnce the initial V-DIS specification is defined, the effort of reconciliation with the DIS standards steps up. Additionally, the DIS standard is expected to continue to evolve beyond the current change proposals. The V-DIS domain program needs will also continue to evolve. New programs will bring in yet more needs. The SE Core VDIS team serves as a broker between the domain programs and the DIS standards organizations to help manage and mitigate risks from theses changes. This provides several benefits to the PEO STRI programs:SE Core can speak with a single voice to help influence the DIS standards evolution based on our domain program needs. This significantly increases the integrity of the functional requirements by ensuring that the systems design for each is consolidated amongst a variety of training systems.The programs can minimize their efforts in monitoring the DIS standards activities. Issues of significance to our domain will be summarized and distributed to the domain programs. When required, SE Core will host special topic working groups to establish a consolidated position.As V-DIS is defined, differences between it and the DIS standards will be submitted to SISO as DIS Problem/Change Requests (PCRs).  After review, the DIS PDG members of SISO will then provide feedback, which may involve a revision to the PCR and further review by the V-DIS working group.The time to complete a change to the DIS standards may be substantial, so it is therefore expected that there will typically be some deltas between the V-DIS and DIS definitions. SE Core will strive to minimize those deltas.Current FocusThe following subsections provide a glimpse into some of the topics which have current focus within the VDIS specification.  For Simulation Management, it’s important to note that we’ve adopted the reliability protocol, thus none of the non-reliable PDUs are recommended for use.  Additionally, although we identify a Simulation Controller and Asset Manager, they need not be part of a centralized computer that operates across multiple training systems.Initialization and Asset ManagementVSA scenario initialization is performed via the Simulation Controller product distributing the scenario initialization data to all simulation applications participating in an exercise. The Simulation Controller provides instructions to each simulation application to read its initialization parameters from its view of the scenario file. The scenario file data will be tagged to identify the initialization data that is appropriate for each simulation application. The simulation application will parse its initialization parameters from the scenario file and apply values to initialize itself for scenario start. When the scenario initialization for a simulation application is complete, the simulation application will notify the simulation controller that it is ready to start exercise simulation.The SE Core program is working towards the development of a standard exercise file definition.  The exercise file would provide definitions for scenario, configuration, asset assignment, radio networks, and other items associated with an exercise or series of exercises.  The files would reside on a shared file system within the training suites or sites so all systems would have access to them.  The current V-DIS definitions try to reflect these concepts without eliminating existing capabilities.The V-DIS Initialization capability establishes the set of initial conditions for a simulation application to operate under during exercise simulation.  Initialization cannot occur until a simulation application has joined an exercise and is therefore listening to that exercise traffic.  The VDIS Simulation Controller sends an Action Request-R PDU (Initialize Internal Parameters) in order to establish a simulation application’s set of initial conditions.  The datum record sent with the Request contains the Exercise File Path, Name, and Application Role.  The Exercise File Path and Exercise File Name provide the location of the exercise file to be loaded from the shared file system.  The Application Role defines the current role of the simulation application and is used as a label to parse the exercise file to extract the application’s initialization data.  The role concept allows for a different asset to be assigned to a different entity within the exercise while also allowing multiple initialization sets that can be dynamically allocated to applications within a single scenario file.  The simulation application sends an Action Response-R (Complete) when it is ready.  The application must respond with an Executing if the request will take longer than the timeout period.  The Simulation Controller can send Set Data-R PDUs to applications with various (e.g.) entity parameters to alter the definitions as initialized from the scenario file.  This allows the operator to alter the scenario prior to or during the exercise.Within the V-DIS environment a method of asset discovery has been added.  This provides the capability for the Asset Manager to discover which assets are available as they come online and allocate them to an exercise.  The Asset Manager is specific to a given site and should be the first application brought up.  The site application manager should start by listening for PDUs on Exercise 0.  When an asset instantiates itself, it will send one or more unsolicited, unacknowledged Data-R PDUs to all applications on Exercise 0 showing that it has come online (these PDUs will contain Application State/Status information).  The asset retransmits another Data-R PDU (Application Status) at the defined heartbeat rate.  The Asset Manager can request an application status at any time via the Data Query-R PDU.To assign an Asset to an exercise, the Asset Manager sends an Action Request-R (Join Exercise) for the Application to join a specific exercise (with a datum specifying the Exercise ID) and the asset responds with an Action Response-R PDU acknowledging the assignment.  The asset then begins listening to the specified exercise.  The Asset then broadcasts a Data-R PDU with its Application State/Status on Exercise 0, which is picked up by all systems concerned about assets.  The Asset then issues an Action Response-R of Complete.  Finally, the Asset provides a Data-R PDU with the Exercise State on the given exercise.   REF _Ref175563110 \h Figure 2.1 illustrates asset control application sequences for joining an exercise and querying / sending application status.Figure  STYLEREF 1 \s 2. SEQ Figure \* ARABIC \s 1 1 – Asset Control Application SequencesFor redundancy or ease of use, a given site may have more than one Asset Manager.  V-DIS supports a peer to peer methodology that allows the Asset Managers to cooperate with each other. The Asset Manager may also alter the status heartbeat frequency using the Data Query-R Time Interval.  If the state and status heartbeats become an issue, this could be used to reduce their frequency of update.Network ProtocolsThe V-DIS Transport Level Protocol for DIS traffic is based on  REF _Ref175563383 \r \h [4], herein referenced as the Communications Standards document. The DIS standard identifies two profiles for use with existing DIS applications. V-DIS will adopt the usage of Profile 2: Internet Protocol Profile – Multicast Service. The Communications Standards document addresses the communication services network layers 3 (Network) and 4 (Transport) only.  The following are the key networking assumptions adopted by V-DIS:Real-time considerations: VDIS will define the timeliness required to support human-in-the-loop operation (using the Quality of Service parameter default values listed the Communications Standards document as the base).Long haul connection: VDIS will support the connection of multiple sites to participate in a single exercise or a joint After Action Review (AAR) by providing a common definition of the PDU protocol interactions and a common set of DIS enumerations to be used by VSA compliant training systems.Multiple exercises: VDIS will support the execution of multiple concurrent exercises at a single site.  The method of assignment of an exercise ID is provided in Initialization and Asset Management.  Different multicast groups or virtual networks may be utilized to isolate PDU traffic from the various exercises.Non-PDU traffic: The VSA communication services will support several types of data transmission that may or may not be directly related to DIS applications, though any one service instance will typically support only one type (e.g. DIS, CGF traffic).Communication management requirements: The network communication management protocols will be defined by the training systems.Security: Security requirements and methods will be defined on a case-by-case basis, as required by the training systems.V-DIS will adopt all of the multicast service requirements from section 4.2.1.2.3 of the Communications Standards document.  Also, VSA shall provide services to support the bundling (concatenation) of PDUs being sent onto the network. The PDU bundling will optimize message transport by sending fewer larger blocks of PDUs in lieu of individual smaller PDUs where possible. Services shall be provided to un-bundle the PDU when received by the receiving simulation applications.The bundling of PDU traffic, when bundling is enabled, shall capture PDUs that share common routing attributes within the same frame and concatenate them into a single PDU buffer. When the number of bundled PDUs exceeds the maximum PDU buffer size, no additional PDUs are added to that buffer, the buffer is sent and a new buffer is started. When the time interval for a frame has expired, all PDUs for that frame are sent.The common routing attributes that allow PDU bundling can include multicast PDUs sent on the same multicast groups or broadcast PDUs sent to the same destination (e.g. to a specific simulation application or to an entire exercise). PDUs that are sent point-to-point and PDUs that are issued for a local-send are not candidates for bundling.XML FilesThe large number of enumeration lists and values makes it difficult for training systems to keep up to date.  It’s also not entirely practical to implement all of the enumerations, particularly if some of them do not currently pertain to the training system.  Unfortunately, by not including the entire list at the beginning, it makes it more costly to upgrade functionality at a later date.  Similar to the work at SISO and the NPS Moves Institute, SE Core is generating files that provide the enumerations in a machine-readable format.  We’ve chosen XML for the simple reason that it is very common, open, well-defined, and very easy to use.Instead of aggregating all of the enumerations in a single, large file, however, we’ve separated them.  The purpose for this is to minimize project impact should one file change or, more likely, should the training system decide to step up to only one change.  By maintaining independent files, we’ve simplified some of the larger data sets, most notably the entity types and the datum record IDs.  Additionally, smaller files make it more likely for them to be usable at run-time, should a training system be designed for run-time modifications.All of the enumeration files contain at least three elements: the value, description, and a source code compatible name.  The value is the numerical identifier within the enumeration, such as an integer or even the septuplet for the entity type.  The description is a concise definition of the enumeration, but it may contain some punctuation and spaces.  The name is unique (amongst all of the enumeration files) and source code compatible, containing no punctuation or spaces.  Should a training system utilize the source code compatible names, then upgrading to a future revision should be trivial (purely from an enumeration perspective, as obviously additional functionality may be required for new enumeration values).  From a PM CATT point of view, these files are even more useful because they will contain the V-DIS enumerations that were modified from the SISO standard to consolidate the functional requirements across all of its domain programs.  For the Entity Type enumerations, the “value” will actually be the septuplet defining the kind, domain, country code, etc.  Similarly for Object State.Datum RecordsDatum records are used in DIS in various PDUs to send or request additional information not directly contained in one of the PDUs.  For example, an Event Report-R PDU will identify the Event Type, but will also contain some number of datum records to describe the event in more detail.  Datum records are either “fixed” in size, an atomic value of 32-bits in length or less, or “variable” containing more than 32-bits, having multiple fields, or having a string value.  The definition of each of the datum identifiers found within the DIS standard is unfortunately not entirely complete and contains some errors (e.g. Accomplished Accept and CD ROM Number having the same ID).  Although some of them are defined as being fixed and type provided, or variable and a defined structure noted, many are not defined at all.One of the XML enumeration lists SE Core has constructed contains all of the datum record IDs.  As noted previously, we’ve also identified each of their descriptions and unique source code compatible names.  The descriptions were initially based on the SISO list, but that result turned up several duplicates and possible conflicts.  We’ve attempted to resolve them by sorting the entire datum list by functional equivalence and renamed them appropriately (by providing an additional definition to the name).  The goal is obviously to identify how each of the datum records should be used and in what PDU.  Moreover, we’ve endeavored to define the datum records themselves, either from the SISO table or from exemplary training systems’ source code.  In some cases, we’ve had neither and had to make a best guess of how that record is defined and thus how it could be used.  This sorted list and the record definitions have been captured in a text document, not in machine-readable format yet because we have not completed our analysis of how such a format could be best utilized.  A schema file of some sort is the logical choice, or perhaps some other method.MinefieldsThere are two methods of modeling minefields used in PM CATT training systems. The first method is “high” fidelity and models the individual mines in the minefield. Each mine has a specific location allowing minefield density to be variable across the area. When an exercise participant that is affected by a particular mine type encounters the location occupied by such a mine, a detonation event is simulated and that mine is expended. The second method is “low” fidelity and provides a probabilistic modeling approach where the number of mines is determined to be evenly distributed across the minefield with no specific locations defined for any mine. Using density, a detonation event is triggered based on a probabilistic determination of the exercise participant encountering a mine while moving through the minefield. When an exercise participant is determined to have encountered a mine in this minefield, a detonation event is triggered by the minefield simulation and the total mine count is decremented.Since both mechanisms for modeling of minefields are effective, V-DIS recommends the usage of the Minefield family of PDUs to represent the minefield status in an exercise. The Minefield family (8) can be modified to support both modeling schemes, whereas the Areal Object State PDU does not provide individual mine locations. The Minefield family, with minor changes recommended by V-DIS (simply using the 14-bits of padding to represent the total mine count in the minefield), supports the lower fidelity probabilistic approach as well as the higher fidelity individual mine monitoring approach.The DIS standard defines two minefield protocols to communicate information associated with the location, appearance, and other pertinent details of individual mines and minefields: heartbeat and Query Response Protocol (QRP). V-DIS recommends the use of the heartbeat mode for the lower fidelity, probabilistic modeling where the state of individual mines is not provided by the minefield simulation. In this mode, only the Minefield State PDU is sent during exercise simulation. The Minefield Query and Minefield Data PDUs are not allowed in the low fidelity simulation. Additionally, high fidelity simulations can interoperate with the low fidelity minefield by recognizing the mode and not transmitting queries.  V-DIS recommends the QRP mode for the higher fidelity minefield modeling because the PDU traffic produced for the Minefield Data PDU could be excessive for most simulations. In this mode, the Minefield State PDU is still sent out on a heartbeat. Additionally, we recommend that the Minefield Data PDU be issued only in response to the Minefield Query PDU. Entity AppearanceThe Entity State PDU is the main unit to describe each of the entities in play during a simulation exercise.  Unfortunately, this PDU is insufficient to capture an entity’s complete description as higher fidelity training systems become the standard.  The appearance field of the PDU is a simple 32-bit field of flags or enumerations.  It attempts to capture not just dynamic appearance, but some static values and even functionality of the entity that is not strictly appearance, such as fire power kill, entity state, and power plant status.A reasonable design goal in modifying DIS is to maintain backward compatibility with legacy systems.  This goal is important in the simulation industry due to the high costs of changing some of the legacy training systems and, in some cases, the impracticality of modifying them.  Thus, to cope with the limitations of the appearance field in the Entity State PDU, the solution should be either to utilize Variable Parameters (VP) or a secondary PDU such as the proposed Attribute PDU.  In this case, a VP record is the clear preference because it does not require the overhead of a second PDU and it is more logically organized with the remaining entity state information, regardless of PDU bundling mechanisms in place.  Because SE Core is sponsored by PEO STRI, our focus for this variable parameter is obviously towards functionality required by the U.S. Army.  As our work and research matures, we will have a better definition of the requirements and will be able to propose VP candidates to SISO that can be vetted by the DIS community at large.  For example, our current needs require a description of each vehicle’s make, model, color/paint scheme, and even year of manufacture.  REF _Ref175564495 \r \h [7]  Thus, we will be generating a list of civilian and commercial vehicles by make and model that will be reasonably complete, but hopefully others (particularly the manufacturers) can step in to flesh it out further.  Additionally, like most other training systems, we’ve uncovered a larger number of lights and other vehicle appearance flags not currently handled.  These will need to be supported in a VP record as well.LifeformsLifeforms are special entity types that are strangely implemented very differently than the other entity types.  The two special characteristics for lifeforms are that some have the number of individuals identified in the Specific field and that some are defined by a single weapon type within the Subcategory field.  Unfortunately, the number of individuals is only defined for special cases and not used consistently throughout all of the lifeforms.  The weapons usage is also not consistent and it implies that a training system cannot implement the functionality of an initially unarmed non-combatant picking up a fallen weapon and using it.  The number of individuals is not even used consistently within the animal domain as land animals are individuals, but a single bird can be represented either as an individual bird or a flock containing one animal.In the real world, lifeforms that carry weapons typically carry more than one, especially in the military.  As with Entity Appearance, the most logical place to capture this requirement is by using a VP record to define the additional weapons, whether it be a new type of record or using attached / articulated parts.  The act of dropping the weapon and creating a new weapon entity type is then much more easily possible if the weapon type is not specific to the lifeform.  Unfortunately, this creates a significant conflict within the existing standard and leads to breaking the design goal identified earlier.  Should the lifeform enumeration be overhauled to fix not only the weapon type but also the number of individuals?  If so, legacy systems will be broken.  If not, then any implementation to identify additional weapons, add weapons to “unarmed civilians,” or remove weapons from an armed lifeform will conflict with the existing standard.As with vehicles, the appearance field in the Entity State PDU is insufficient to support a more complete description of the lifeform, including functional state.  The paint scheme plus camouflage type is not enough for a higher fidelity simulation that has models for similar individuals wearing differently colored shirts.  It is also not sufficient to define a lifeform’s race, ethnicity, or age.  Other parameters not supported in the appearance field are the mounted state, more than two weapons identified in use, and other equipment that is in use, such as binoculars, a rebreather, or a parachute (though the parachuting state obviously implies usage).Task OrganizationThe representation of task organization information in a training exercise provides exercise participants, exercise facilitators, and exercise managers insight into the simulation task organized units on the playing field. The information is especially useful to the Instructor Operator Station (IOS), the teams creating AAR analysis and briefing material, and the facilitators at the Role Player stations. The task organization information is usually introduced into a training exercise during scenario generation force laydown. The entities participating in the exercise can be task reorganized during exercise simulation.A problem exists in distributing this task organization to the exercise. If the initial conditions scenario file contains a clear mapping between the simulated entities and the task organization structure, then any simulation application that has access to the file should be capable of presenting the task organization data to its users. The task organization information could be presented on the PVD, on a menu display, or in the visual scene. For those simulation applications that do not have access to the scenario file, and for those situations where the task organization is changed during exercise simulation, this information can be distributed to exercise participants from the IOS or from a Role Player workstation.In training systems analyzed by V-DIS, there are three mechanisms used to distribute the task organization information to exercise participants:Scenario initial conditions fileEntity task organization variable datum recordEntity marking stringTwo training systems use the scenario file to distribute the task organization information to the constructive simulation assets. Another uses the entity marking string to distribute call signs or “bumper numbers” to the exercise. The Entity State PDU entity marking string is used to encode the task organization data for each entity. A common software service is used to decode this information. Any simulation application that receives the Entity State PDU can decode the entity marking string to extract the task organization data for the entity. This scheme is very specific to land platforms and allows a predefined configuration file to enumerate the task organization levels and relationships. It works well in that the task organization data is distributed with every Entity State PDU, but it is very rigid in its use. To add or alter units, the task organization configuration file must be altered, which unfortunately ties exercise playback to a specific, compatible version of the configuration file.V-DIS will use the entity marking string of the entity state PDU to distribute the ASCII text to be used for marking the entities in the visual scene and on the PVDs, such as the call sign or a bumper number. Services are provided in VSA to extract the ASCII text from this marking string to be used as a label for entities. When the entity marking string contains the Army Marking character set, the data will be decoded as an entity bumper number using a revised and expanded enumeration.The V-DIS recommendation for distributing the task organization data to an exercise is to create a VP record. A VSA task organization encoding configuration file will be created to work with the scenario generation capability to encode task organization data when entities are created in the scenario file. This encoding scheme will support U.S. Army echelons from Division through dismounted infantry fire teams. The encoding will also include unit type and vehicle numbers (for platforms). Each simulation application with simulated manned platforms will receive their encoded task organization data at exercise initialization. For those simulation applications that initialize themselves from the scenario file, parsers will be provided to allow the task organization data to be fetched from the file during exercise initialization.After exercise start, task organization data will be distributed to the latecomer simulation applications brought into an exercise. The latecomer simulation application will distribute its task organization data via its Entity State PDU when it starts simulation in the exercise. When the task organization data is changed at an IOS or Role Player station, the updates are sent to the changed simulation applications and their updated task organization data will be distributed via the Entity State PDUs. The Data Query-R PDU is used by applications to request a full update of all current task organization data for an exercise. A variable datum record containing data similar to the contents of the VP record will contain the task organization issued in response to the Data Query-R PDU.Future TopicsSE Core is planning to continue development in V-DIS and interaction with SISO.  The following subsections provide a sample of some of the topics in which will have an interest.Dynamic EnvironmentsDestructible buildings, deformable terrain including craters and tracks, terrain enhancements such as berms, and atmospheric effects such as rain and wind all belong to the category of dynamic environments.  This is not even an exhaustive list as research into dynamic environments will be progressing for still a number of years to come.  The problem, however, is how to make dynamic environments interoperable through DIS.Dynamic Terrain is certainly not a new concept as implementations existed even in the early 90’s  REF _Ref175563767 \r \h [5],  REF _Ref170636095 \r \h [6].  The DIS Synthetic Environment Family supports Dynamic Environments via two approaches: process and object.  The process approach uses the Environmental Process and Gridded Data PDUs while the object approach uses the Point, Linear, and Areal Object State PDUs.  The approach recommended by SE Core will be defined during the government fiscal year 2008 work.Logistics and Spare PartsThe Logistics Family PDU interactions are provided in two modes: the ‘magic’ repair/resupply and the doctrinally correct repair/resupply interactions. Messages representing requests for services and the transfer of supplies are exchanged between simulation applications that are providers of the repair or resupply service, and those simulated entities in need of such service. The ‘magic’ repair and resupply of manned and CGF simulators are achieved from the IOS or from the Role Player workstation. The doctrinally correct repair and resupply interactions are provided by the use of PDU interactions between manned and CGF simulators that are used to simulate the logistic operations during exercise simulation. This section discusses those logistic operations that are achieved through the use of DIS PDU interactions. The ‘magic’ repair and resupply interactions are provided through the use of the Set Data-R, Data Query-R, and Data-R PDUs. The Data Query-R PDU provides the capability for an IOS operator to request repair and supply status from simulation applications in an exercise. The Set Data-R PDU then allows the IOS operator to send resupply data to that simulation application. The Data-R PDU provides the mechanism for the simulation application to respond to the IOS. The Action Request-R / Action Response-R PDU protocol is used to effect repairs from the IOS or Role Player workstations.The doctrinally correct interactions require that the participants adhere to the time and space requirements that are required when the operations are performed in real-time. These operations follow the procedures and protocols established by the military units and provide the mechanism for the participants to train for the actual repair and resupply events. Logistics support in DIS is accomplished through a series of request and response messages between two entities and between a simulated entity and a Combat Service Support LOGPAC. The doctrinally correct interactions will use the Logistics Family PDUs.Spare parts are not well represented in DIS, if at all in most cases.  If spare parts are to be represented as separate entities, then this will create an impractically large number of new entities (multiplying the existing number of entities by a factor of perhaps hundreds, or ever how many spare parts per entity are required).  Thus, a method will need to be engineering to represent these spare parts for usage in resupply/repair.Future Exercise Management TopicsAdditional exercise management recommendations will be made for the VSA at a future date. The V-DIS team is working to define the PDU protocol interactions for the exercise management capabilities of daily readiness checks (DRC), restart, reconstitute, reposition, and checkpoint reset. The DRC capability analyzes the status of simulation applications to determine their readiness and availability to participate in an exercise. The Restart capability starts the exercise from the beginning with the original initial conditions. The Reconstitute capability restarts a “killed” manned simulator in an exercise with the location and state data it held immediately prior to the kill (though it may be subsequently repositioned or reset with alternate initialization data). The Reposition capability changes the location and orientation of a manned module simulated entity during exercise simulation.  The Reset to checkpoint capability restarts all simulation applications in an exercise to a previously stored checkpoint.Slaved ViewportsThe use of slaved viewports provides the capability for an IOS or an AAR station to monitor the tactical sights of a manned simulator during exercise simulation and during exercise playback. VSA is investigating approaches to adopt and recommend for slaved sights.CGF CommunicationsComputer Generated Forces (CGF) provides the basis of discussion of a new area of DIS not yet implemented.  Whether a simulation exercise is purely constructive or a mixture of live, virtual, and constructive does not strictly imply that the communications amongst the CGF should not be interoperable.  The reasons to maintain the communications in a proprietary networking protocol are to minimize bandwidth for what are otherwise unnecessary data packets and to hide company confidential protocols and information passing.  The reasons to provide CGF communications in an open format are to allow constructive simulations to interoperate and for higher fidelity functionality that may be unsuitable for other types of DIS PDUs (though with the proposal of the Information Operations Family, this reason may no longer exist).Improvised Explosive Devices (IEDs)Improvised Explosive Devices are difficult to model within the current DIS standard.  In most cases, they are specific entities (vehicles, cultural features, even lifeforms) that act like another (munitions).  In some cases, they are a combination of entities (e.g. two lifeforms carrying a litter). How can these be simulated in such a way that the IED could be interpreted correctly, whether by an AAR, constructive simulation, or even visually by a manned module?  Generating a large number of new munitions is impractical because, in essence, every other entity and some combinations thereof could become an IED.  Another option would be to utilize the guise mode, but that doesn’t account for multiple entities acting as a single IED or even for an IED using the guise mode.Entity StatusEntity Status is provided largely from monitoring the Warfare and Entity Interaction PDUs. The Entity State PDU provides location, orientation, rate of movement, and appearance data. The Fire and Detonation PDUs can be monitored to determine ammunition expenditure. VSA is defining extensions to the entity appearance data with the use of the VP records of the Entity State PDU. These extensions will provide additional appearance data above what is currently provided. The proposed Entity Damage Status and the existing Event Report-R PDUs will be used in VSA to provide additional details not issued in any of the Entity Interaction and Warfare PDU families. The Event Report-R PDU is used to announce entity status when significant events occur. The Entity Damage Status PDU is used to provide high-fidelity damage status to a specific area on the surface of an entity that was affected. Detailed damage sustained by an entity shall be communicated by specific Damage Description records in the Entity Damage Status PDU.SummaryThe SE Core program is working to improve simulation interoperability across the PEO STRI virtual simulation programs. The V-DIS specification in concert with other SE Core initiatives provides a significant step toward that goal. The V-DIS specification strives to balance consideration of the designs of existing system and the costs of change to systems, future trends within the domain, and ongoing changes within the DIS standards. It provides a significant evolutionary approach to achieve the SE Core interoperability goals. ReferencesFaulk, Mark, Richard Fuchs, Jeffrey Todd Littlejohn, Brian Kemper. “A Product Line Approach for the Virtual Domain.” Proceedings of the 2006 I/ITSEC.IEEE 1278.1-1995: “IEEE Standard for Distributed Interactive Simulation – Application protocols”.IEEE 1278.1a-1998: “IEEE Standard for Distributed Interactive Simulation – Application protocols”.IEEE 1278.2-1995: “IEEE Standard for Distributed Interactive Simulation – Communication Services and Profiles”.Kilby, Mark, Lance Marrou, Guru Prasad, and Sean Waldron. “Final Report: Mobility Across Dynamic Terrain – An Engineering Change Proposal to the Dynamic Terrain Testbed Project.” Institute for Simulation and Training, IST-TR-94-20, April 28, 1994.Buckley, Jr., Robert Lee. "BwanaVision: A Software Image Generation System Supporting Dynamic Terrain." Masters Thesis, Department of Computer Science, University of Central Florida, December 9, 1993.Kochmann, Mike, Michael Kokowicz, Brett Windisch, and Linda Young. “Creating Common Moving Models.” IMAGE 2007 Conference.Author BiographiesLANCE R. MARROU is a senior systems engineer at SAIC in Orlando, Fla.  He is currently a lead in the SE Core Architecture & Integration program, developing V-DIS.  Mr. Marrou received his Master’s degree in computer science from the University of Central Florida.  He began working with simulation and training systems since 1992 and has more than 20 years experience in software and system design.MARK A. FAULK is a senior systems engineer at SAIC in Orlando, Fla.  He is currently the system architect for the Synthetic Environment (SE) Core Architecture & Integration program, developing a virtual domain product line architecture for the Army.  Mr. Faulk received his bachelor’s degree in computer science from the University of Central Florida.  He has over 13 years of experience with simulation and training systems and more than 21 years in software and system design.  Mr. Faulk has been involved with multiple simulation programs including CCTT, VCCT, UK CATT, CTIA, and EST 2000.  He has performed design, development, and consulting in the areas of C4I communications, interoperability (DIS and HLA), user interface, AAR, and network communications in the virtual and live domains.TERRY B. TYSON is a staff software engineer at Lockheed Martin STS in Orlando, Fla.  He is currently working on system engineering tasks for the Synthetic Environment (SE) Core Architecture & Integration program, developing virtual domain product line architecture for the Army. Mr. Tyson received his bachelor’s degree in Information Systems from Georgia State University. He has over 12 years of experience with the CCTT and UK CATT simulation and training systems and more than 28 years in software and system design. He has performed design and development in the areas of simulation management, AAR, user interface, and network communications in the virtual domains.BRIAN E. KEMPER is the lead architect for the U.S. Army Program Executive Office for Simulation, Training, and Instrumentation on the SE Core program.  Mr. Kemper received his undergraduate degree in electrical engineering from the University of Central Florida.  Mr. Kemper has 21 years of systems engineering experience in both industry and civil service, supporting DOD military, training and simulation, and NASA design and development initiatives.