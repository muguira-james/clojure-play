A Product Line Approach for the Virtual DomainMark A. FaulkRichard C. FuchsJeffrey Todd LittlejohnScience Applications International Corporation (SAIC)3504 Lake Lynda DriveOrlando, FL 32817USA(407) 243-3553 (phone)(407) 243-3586 (fax) HYPERLINK "mailto:mark.a.faulk@saic.com" mark.a.faulk@saic.com HYPERLINK "mailto:richard.c.fuchs@saic.com" richard.c.fuchs@saic.comjeffrey.todd.littlejohn@saic.comMr. Brian KemperU.S. Army Program Executive Office for Simulation, Training, andInstrumentation (PEO STRI) 12350 Research ParkwayOrlando, FL. 32826USA(407) 384-3816 (phone)(407) 384-3611 (fax) HYPERLINK "mailto:brian.e.kemper@us.army.mil" brian.e.kemper@us.army.milAbstract: The United States Army strives to maximize the training benefit to the warfighter given a finite set of resources.  To manage these resources effectively, there is a need to minimize overall life cycle costs on training devices.  Life cycle costs are driven largely by costs for maintaining systems and software, as well as training warfighters and operators on the use of systems and software.  Approaches that promote commonality between systems, such as software reuse, can significantly reduce life cycle cost through shared maintenance of the systems and common interfaces for both the trainee and instructor.  This basic idea drives a powerful construct for minimizing life cycle cost, known as the product line architecture.  Within PEO STRI, the product line approach has already yielded more consistent training products and the efficient use of development resources.  Traditionally, most virtual training systems have been developed as unique, stove-pipe solutions requiring unique operations and software maintenance.  Limited opportunistic reuse has meant that even systems from a common software base quickly diverge, limiting further reuse benefit.  Past efforts to develop a common set of building blocks have typically resulted in proprietary closed architectures.The Synthetic Environment (SE) Core Architecture & Integration (A&I) contract is tasked with developing a Virtual Simulation Architecture (VSA) with the goal of providing the warfighter with enhanced training by increasing interoperability between training systems, increasing the reuse of products developed for training systems, protecting the investments made in developing current virtual training simulations, and increasing the adaptability and extendibility of the virtual training simulations that are developed to enable the easy incorporation of new features.  VSA’s realization of these goals will reduce total life cycle costs for the Army’s virtual training systems.  The VSA utilizes a product line approach to define a framework that emphasizes systematic reuse, interoperability, and compatibility with the overarching Live, Virtual, Constructive Integrated Architecture (LVC-IA) vision.  The VSA effort is leveraging the experience gained from current product line efforts in the live and constructive domains to develop a virtual domain product line (e.g., “toolbox") to support construction of PEO STRI virtual training systems.  The SE Core A&I program is developing a strategy to evolve current virtual training system architectures to the VSA product line architecture.This paper describes the SE Core VSA process for defining the standards, interfaces, and product/component boundaries to support the large, diverse virtual training domain that spans individual, crew, collective, and combined arms training systems. It describes the complexities, challenges, and solutions that arose from this effort and how the VSA provides the flexibility to allow for the varied product composition to support this domain. The paper also discusses the VSA architectural features and products that allow VSA-based training systems to integrate into the live, virtual, and constructive training environment.IntroductionThe U.S. Army Program Executive Office Simulation Training & Instrumentation (PEO STRI) strives to maximize the training benefit to the warfighter given a finite set of resources.  To manage resources effectively, there is a need to minimize overall life cycle costs on training devices.  For virtual simulation training systems, the largest portion of overall life cycle costs is driven by costs for maintaining hardware and software of the systems as well as training warfighters and operators on the use of systems.  Additionally, rapidly changing technology and mission needs generate ever-increasing time to market pressures.  To best meet these constraints, the Army must become more efficient in developing new, and updating existing, training systems to provide more available training while maintaining or improving the quality of that training.Training Simulation Domain DefinitionThe domain definition establishes the scope of the Virtual Simulation Architecture (VSA) as the architecture for the virtual simulation domain.  It provides a basis for informally determining whether a system is properly within that scope.  Simulations within the Army are broken down into the simulation domains in which they exist. Simulations are categorized into the live, virtual, and constructive domains. While the domain scopes and boundaries have become blurred as the supporting technologies have evolved, the following provides general definitions of the three domains obtained from the Defense Modeling and Simulation Office [1]:Live simulation – a simulation involving real people operating real systemsVirtual simulation – a simulation involving real people operating simulated systems.  Virtual simulations inject human-in-the-loop (HITL) in the central role by exercising motor control skills, decision control skills, or communication control skillsConstructive simulation – a simulation involving simulated people operating simulated systems.  Real people stimulate (make inputs to) such systems, but are not involved in determining the outcomes The virtual simulation domain can be divided into four major classifications: individual (the focus of training is on one individual), crew (training two or more members of a single Battlefield Operating System [BOS] to interact and work as a team), collective (training two or more crews from a single BOS), and combined arms (training crews from two or more BOSs to interact). Within the individual classification, four sub classifications are defined: immersive (trainee is immersed in virtual environment),   interactive (trainee interacts with a simulated system without full immersion), familiarization (focus on spatial relationships and tactile feedback for controls) and computer based training (CBT).  There are no subclassifications for the crew, collective, or combined arms classifications.The VSA domain includes all of the classifications and sub classifications defined above with the exception of individual CBTs.Historical Approach to DevelopmentTo date, most virtual simulation training systems have been developed as separate, single purpose systems, with each system  developing its own architecture, subsystems, and software base to provide a narrow, stovepipe solution. Contractual and funding boundaries discourage or prevent effective reuse across training systems. Opportunistic reuse is typically limited to cut-and-paste copying of software source. This means that even systems from a common software base quickly diverge, limiting further reuse benefit. Limited ownership rights often mean that software from one contract is not freely available for reuse under a different contract. Past efforts to develop a common set of building blocks have typically been within a specific company and have resulted in proprietary, closed architectures. Approaches that promote commonality between systems, such as software reuse, offer the opportunity to significantly reduce life cycle cost because maintenance and training activities can be shared for each of the reused system pieces.The Product Line Architecture (PLA)A response to solving the problems created by the historical approach to development was the advent of the product line architecture.  The intent of a product line is to address and provide a method for solving the technical problems presented by the stovepipe solutions common in current systems.DefinitionA product line development approach differs from the conventional system development approach in that it is focused on a group of products sharing a common, managed set of features rather than just a single product. It follows that a PLA describes the structural properties for building a group of related systems (e.g., product line), typically the components and their interrelationships  [2].  In the case of VSA, the group of related systems (the domain) is the PEO STRI virtual simulation training systems.Using a product line approach, building a new system becomes more a matter of assembly or generation than one of creation; the predominant activity is integration rather than programming.  One of the benefits provided by a PLA is that systematic reuse, rather than opportunistic reuse, is the major reuse method.  By systematically reusing software components, the cost of maintaining and extending components is shared across all of the systems that are using the component.  These components also become robust more quickly because there is a larger base of users testing the components.We have shown how developers and maintainers benefit from a PLA, but the system users also benefit from the product line approach.  The product line, through systematic reuse and common rules and standards, provides a common look and feel for the systems instanced in the product line.  This allows users (warfighters) to reduce the amount of training time needed to understand how to configure and run systems in the product line.  The reduction of system specific training, allows users to move between systems with a minimum of system training.History within PEO STRIThe Product Line approach has been embraced by PEO STRI and is currently being utilized to create a product line of interoperable products and services that maximize responsiveness to Warfighter needs. Within PEO STRI there are product line initiatives within the Live, Virtual, and Constructive Domains. These initiatives include the Live Training Transformation (LT2), Synthetic Environment Core (SE CORE), and the Joint Land Component Constructive Training Capability (JLCCTC), as well as the Future Combat System (FCS) Embedded Training capability and the LVC Integrated Architecture (LVC-IA) program. Each of these efforts, are moving forward with systematic reuse initiatives. SE Core is leveraging to the extent possible the lessons learned and from the more mature architectural efforts and collaborating across the domains in support of enterprise wide architectural synergy.Virtual Simulation ArchitectureIntroduction to the SE Core A&I ProgramThe Synthetic Environment (SE) Core Architecture and Integration (A&I) program is tasked with developing a VSA, a common, PLA supporting the development of new and the evolution of current PEO STRI virtual simulation training systems. The VSA applies the PLA concepts to provide a set of reusable products, components, services interfaces, and standards that allow current and future PEO STRI programs to satisfy their service needs.   REF _Ref138418575 \h Figure 1 - VSA Domain Context shows the VSA in relationship to other PEO STRI training programs. The PEO STRI end goal is to have a full product line of virtual training simulation systems based on the VSA architecture and products. However, many such systems are currently in operation and will remain operational for the foreseeable future. Those current system customers are not looking for a new training system; they already have one. They are looking for VSA Products that can satisfy their needs for increased functionality, technology refresh, and reduction of operational and maintenance costs.  It is expected that this business case analysis will determine how rapidly the current systems will adopt the VSA.  Furthermore, these current systems cannot just shut down their training programs or their ongoing enhancement programs to make a big bang transition to the VSA, so the VSA must support a phased evolution path for these programs.In contrast, the number of newly developed training systems expected over the near to medium term is small. These new programs avoid some of the constraints on the evolving current systems.The scope of the SE Core A&I program also influences the VSA from a product line perspective. SE Core A&I is not a system development program, but rather an enabler for others. In short, this means that the SE Core A&I program does not build any virtual training systems, which are the end goal of the VSA product line. Given these realities, SE Core A&I provides a product line tool-box consisting of architectural definitions and rules (VSA) along with a set of common core product line assets or building blocks (the VSA Products/Subproducts defined in section  REF _Ref138823923 \w \h 2.3.1). Figure  SEQ Figure \* ARABIC 1 - VSA Domain ContextMajor Technical DriversFour motivations are identified as the main technical drivers for the VSA: interoperability, reuse, current system investment, and adaptability and extensibility.InteroperabilityVSA defines and addresses interoperability between multiple Products deployed within a training system and between multiple training systems. In each case, the interoperability capability must address:A common data model/protocol set to provide a common language (e.g., understand and speak the same language), a common time management to provide time synchronization throughout the simulation, a common sense of place provided via a common correlated synthetic natural environment (SNE), and a commonality of essential model behavior to ensure realistic interactions between simulation entities (fair fight). ReuseTo eliminate the duplicate development and sustainment costs of the traditional stovepipe development, major software applications must be available for reuse across the domain. This requires a common repository for the reusable software such that individual programs can locate, understand, and tailor reuse candidates with the minimum amount of effort.  Additionally, the VSA must maximize support for incorporating software from current training systems.  Current System InvestmentThe Army has significant human and capital investment in existing training systems.  Much of the near term usage of the VSA will be to update and evolve the current PEO STRI virtual training systems. The VSA must provide a cost effective path for these programs to migrate toward the VSA to allow those systems to reap the reuse and interoperability benefits of the VSA. Consideration must also be made to avoid interruption to the ongoing training capabilities of these systems during that migration. Additionally, there is a great deal of working functionality within the current systems that should be leveraged and made available through the VSA. The VSA should strive to minimize the effort of reusing that functionality.Adaptability and ExtensibilityThe realities of the contemporary operating environment (COE) (emerging technologies and doctrine that support the warfighter) are important to Army transformation and result in the need for virtual simulation systems to support new platforms, doctrine, and tactics, techniques, and procedures (TTP).  These new capabilities are added to current and future virtual simulation systems in the form of new and modified models, visuals, and behaviors.  Consider also the diversity of the Army’s virtual training domain, which includes individual, crew, collective, and combined arms.  This, along with the advancements in virtual simulation technology, is broadening the operational capability that can be represented by these virtual training systems.This means virtual simulation systems must be extendable to support these changes.  The flexibility to adapt quickly, affordably, and sustainably must be designed into a virtual simulation system.  The future training system requirements for these domains can be anticipated to a limited extent.  For VSA to be relevant now and in the future, it must be extendable to support the evolving requirements of each of these training domains.  Otherwise, the significant development investment in the virtual simulation system is lost because the system becomes irrelevant over time.  VSA DefinitionThe VSA is specified in the Product Line Architecture Specification (PLAS) document. The PLAS provides SE Core program stakeholders (end users, clients, customer, developers, etc.) with multiple integrated architectural views of the VSA.  The primary focus of this document is product line decomposition, architectural boundaries, and overall interoperability interfaces, which are all necessary for proper component development and use.   REF _Ref138428662 \h Figure 2 - PLAS Document Breakdown illustrates the various specifications and architecture views contained in the VSA PLAS.Figure  SEQ Figure \* ARABIC 2 - PLAS Document BreakdownVSA PLAFOne essential view contained within the PLAS is the Product Line Architecture Framework (PLAF), which is a two-dimensional view providing a high-level quick reference for engineering and other technical staff.  The boxes contained within the layers identified by the System View (SV) label (SV label on right side of figure) of  REF _Ref138457977 \h Figure 3 - VSA PLAF represent the functional pieces of the VSA PLA.  The PLAF view shows the architectural layered organization of the VSA. That same layering is also reflected in much of the VSA PLAS document structure.  The PLAF is a tool intended to assist the developers of systems, by helping them identify the architectural components, boundaries, breakdowns, and typical compositional relationships between the layers of the architectural elements.Figure  SEQ Figure \* ARABIC 3 - VSA PLAFThis paper is primarily concerned with the portion of the PLAF labeled “System View.” The VSA PLAF system view area is divided into the following layers:Training Segments – Training segments list the major groupings or segments of training systems within the VSA domain.Operational Capability – The operational capability layer shows the high-level training operational activities performed by the domain training systems. The operational activities describe the major tasks/functions that are required for the domain training system sites to accomplish their missions. Product – Products are stand-alone, end-user visible functionality representing the very high level applications or application suites that are typically deployed as a unit. They represent significant architectural pieces of a training system, such as an after action review (AAR) or instructor operator station (IOS). The VSA defines the specific interface protocols to facilitate the Product level interoperability. Subproduct – Subproducts are just smaller scale products and maintain the same characterizations as a product. The hardware analogy is that of a line replaceable unit (LRU), allowing substantial subsystem level functionality to be swapped out within a training system.  Subproducts will often be deployed into a training system as a collection composing a full Product, however, they may be deployed individually as necessary to meet a specific training system’s needs.  For example, a simulation controller Subproduct may be deployed at an after action review workstation allowing an operator to perform exercise control from that physical station area.Component – Components are the systematically reusable building blocks of Products and Subproducts. This is where the majority of software is produced within the VSA framework.  Components are built on the VSA services providing further software reuse, portability, and interoperability.Service – The VSA services are a set of common software service interfaces that provide the framework or infrastructure on which VSA common components are built.  The common services promote systematic reuse and consistency for component distribution, component and service discovery, data models, data distribution, component communications/messaging, scaling, and portability across the VSA common components.  Platform – The platform layer represents the host hardware, operating systems, and network technology supported by the VSA.  This is typically commercial off-the-shelf (COTS) or open source and is not being developed by SE Core A&I.  The VSA will, however, specify requirements on this layer such as real time execution support  REF _Ref138682770 \h Figure 4 - VSA Architectural Elements within PLA shows how the VSA products and components relate to the target virtual training systems.Department of Defense Architecture Framework (DoDAF) ViewsThe SE Core program has integrated the utilization of the DoDAF products into the SE Core systems engineering processes and is generating a set of DoDAF compliant architecture views to further describe the VSA.  Many of the Products within these views are also incorporated into the VSA PLAS.  They provide relational information to supplement the PLAF, such as hierarchal software composition of services into Components into Subproducts into products.  Section  REF _Ref138459019 \w \h 2.4  REF _Ref138459019 \h System Composition describes how software composition is supported by the VSA.Figure  SEQ Figure \* ARABIC 4 - VSA Architectural Elements within PLAArchitectural Element SpecificationThe contents of the Product/Subproduct, component, and service layers are referred to collectively as VSA architectural elements. These architectural elements represent the set of reusable core assets that can be leveraged by the developers of systems.  Each architectural element within the VSA is specified by a component contract. A component contract is a uniform collection of information and artifacts providing a description of an architectural element within the VSA and is intended for use by architectural element and training system developers.  The content of the component contract is evolving, but it will provide a description of the architectural element, functional requirements and interfaces, and it will capture other information such as known limitations, specific to each implementation instance.  It supports distributed development and systematic reuse by describing the necessary interactions of the "black box" component with its environment.System Composition The VSA domain definition bounds the system composition that must be supported by the VSA.  These bounds constrain us to consider composition as it applies to validated training and maintenance simulations in the virtual domain.  This domain contains systems that vary considerably not only in their hardware configurations but also in the functions required of their software.  For example, the functions that need to be performed by a data analysis tool used in the Close Combat Tactical Trainer (CCTT) would be much more complex than the functions needed by a gunnery trainer.  The issue at hand is what mechanism can be employed by the VSA to support the domain and meet the motivations of the architecture (reuse, protection of current system investment, adaptability and extensibility, and interoperability as defined in section  REF _Ref138671868 \w \h 2.2).   VSA has determined that composition is that mechanism.The VSA defines multiple levels of composition to provide the flexibility needed to meet the domain of the product line.  Each level of composition describes where logically the composition occurs, not how the composition occurs (e.g., composition occurs at the system level, but is realized by Products, Components, Services, and data).Data level composition is the creation and modification of exercise scenarios, parametric, and characteristic information.  This level of composition is defined to provide for the variability between exercises and the need of the trainer or simulation operator to configure the exercise to realize specific training objectives (e.g., reducing fuel and ammunition quantities of a unit at the beginning of the training mission to stimulate the need to request supplies).Component level composition is where the majority of the systematic reuse in VSA is achieved.  Component level composition allows software reuse across component instances.  In the  REF _Ref138651064 \h Figure 5 - Component Level Composition, two instances of the Student Performance Measurement component are developed.  The functionality required by each instance differs based on its intended use, but both components still meet the same interface which allows the other components that send or receive data from the student performance measurement component to be agnostic to which version of the Student Performance Measurement component is composed into the system.Figure  SEQ Figure \* ARABIC 5 - Component Level CompositionProduct level composition is comprised of VSA Components or other architectural elements that result in an architectural element that meets the defined VSA interoperability protocol.  This level of composition is influenced by the architectural motivation to protect the investment in current systems.  After analyzing the domain, it was determined that the best mechanism to protect the investment in current systems was to provide a framework that facilitates the reuse of the constituent parts of those systems.  The Product layer of the PLAF (and consequently the Product level of composition and the interoperability layer) was intended to align with the major constituent parts of the current systems.  The example below in  REF _Ref138651129 \h Figure 6 - Product Level Composition shows a simulation controller product that has been composed from several components and the VSA services.  However, the simulation controller Product could have been reused in its entirety from an existing system and because of the loose coupling of the Product level of composition, the reuse would be transparent to the rest of the system.Figure  SEQ Figure \* ARABIC 6 - Product Level CompositionThe VSA also defines a system level of composition.  This level of composition, however, is just an instantiation of one system in the product line.   The training system instance can be composed from multiple Products, multiple Components, or combinations of Products and Components.The needs of the varied simulation domain and the motivations of the architecture lead the development team to define several levels of composition.  Each level provides unique aspects that, taken together, allow the architecture to achieve the goals set for it.Product Level CommunicationsCommunications at the VSA Product and Subproduct level are defined by the following: a common communication protocol, common understanding of time (e.g, time management), and common understanding of environment (e.g., common or correlated synthetic natural environment [SNE]). This allows the Products and Subproducts to maintain a very loose coupling which helps to minimize the effort when swapping out Product instances within a training system.  This is especially useful when inserting or replacing Products and Subproducts into current virtual training systems.  Minimizing the impact to evolve current training system is a key motivation of the VSA development effort. The VSA initially specifies two supported interoperability protocols, High Level Architecture (HLA) and Distributed Interactive Simulation (DIS).  HLA is specified due to its usage within the simulation community and to satisfy explicit technical requirements levied on the SE Core program. The Real-time Platform-level Reference (RPR) Federation Object Model (FOM) is being considered as a starting point for the VSA HLA specification.  DIS was selected to maximize support for the evolution of current systems to the VSA architecture. Neither the RPR FOM nor the DIS standard satisfies all VSA interoperability needs. Protocol exchanges to support areas such as simulation management and special manned simulator to AAR have been defined uniquely within multiple training systems. The VSA must define these exchanges consistently to support plug-and-play interchangeability of VSA Products.  The VSA will clarify or extend the base RPR FOM and DIS standards, where needed, to support these specific communications needs between VSA Products.  SE Core will work with the standards organizations to include these clarifications or extensions into the base standards as applicable.The VSA Services composability allows training system developers to select which interoperability protocol, time management services, and SNE services and database best meets their needs and minimizes the effort required to add new interoperability protocols to support future needs.Figure  SEQ Figure \* ARABIC 7 - Product CommunicationsThe VSA is an open architecture, which means the architectural definition of the VSA architectural elements, including Application Programming Interface (API) and protocols, is available with full government rights. This promotes competition, including the development of COTS products and components in accordance with VSA architectural specification.  Those COTS solutions may be submitted for inclusion into the VSA repository as an option to satisfy the architectural element within VSA based training systems.Keeping the Product-to-Product interface definitions primarily to industry standard protocols further provides a wealth of COTS products to satisfy specific VSA Product needs. The COTS product vendor would only need to ensure that they meet the specific versions of the standards and some minimal amount of extensions as specified in the VSA. Components of current systems can be become VSA compliant by utilizing the interoperability mechanisms defined at the interoperability layer.  For example, an AAR data logging application from a current training system can become compliant at the Product interoperability layer by meeting the HLA or DIS interoperability protocol.  When the data logging application meets the interoperability protocol, the need for a data collection Subproduct is satisfied, helping to further preserve the investments made in current virtual training systems. Note that, as with all VSA architectural elements, all functional requirements must also be met.Component Level CommunicationsVSA components exist primarily as loosely coupled, cooperating elements.  Most Component-to-Component communications occur via the VSA services. This minimizes the direct coupling/invocation between components.  Components can be interchanged within a VSA Product with little or no impact to other Components. For example, munitions fly-out or specific damage assessment responsibility could be moved from Components embedded within a simulator to remote servers with minimal or no impact to the remaining simulator software.Figure  SEQ Figure \* ARABIC 8 - VSA Component CommunicationsWhen direct Component-to-Component communications is required, there are two alternatives (direct and remote invocation).  Direct invocation involves the compilation and linking of Components and Services into the Products and Subproducts being developed.  Remote invocation provides the mechanism for distribution of components to other computing resources to gain processing efficiencies.  For distributed communications, several component middleware alternatives are possible: Java RMI, CORBA, .Net Remoting, and Web-services.The VSA Component layer architecture does not specify a component middleware framework.  Instead, the Component layer architecture specifies that each VSA PLAF component will provide an API that defines the interface to that component.  Additionally, over time the component will evolve.  Therefore, an architecture review board (discussed in section  REF _Ref138817705 \r \h 4  REF _Ref138817723 \h VSA Client (customer) Support) will be established to manage component configurations.It will be the responsibility of the training system developer to provide the necessary component language and operating system (OS) binding, if it does not already exist.  Newly developed bindings are then provided back to the architecture review board for inclusion in the VSA component repository, for reuse on other training system development efforts.VSA Service InfrastructureThe VSA Services layer provides an underlying framework intended to be common for all Component development.  The architectural objective is to provide a consistent set of common services that can and will be reused by Components.  This avoids the costly overhead of each Component developing its own set of required services.  This ensures that each service is developed only once and that the services are consistent across the components and provides the basic infrastructure that makes Component development easier, faster, more reliable, and portable across VSA compliant development environments.  The services enforce a common language (common data model) and provide mechanisms for maintaining the same time (time management) and same place (common SNE services).  The services also promote some model compatibility (e.g., common coordinate conversions).   Additionally, the service layer hides the specifics of the product layer interoperability protocols, allowing those protocols to be changed within the service layer with little or no impact to the component software. The VSA Environment Services provides the consistent access to a common SNE, further facilitating interoperability between VSA products.VSA DevelopmentThis section describes some of the key VSA development activities affected by the PLA approach. VSA Domain Requirement AnalysisMultiple simulation training programs were selected from the VSA domain to gain adequate domain representation. A survey was distributed through PEO STRI collecting program information to help identify the most promising candidate programs.  Trainer type, training echelon level, exercise scale, etc., were captured to ensure wide coverage across the domain.  Additional factors, such as availability of program documentation and program fielding/upgrade plans, were also considered to identify prime candidates.Requirements Analysis ProcessSystem requirements were gathered from the participating domain programs. All requirements were captured electronically within Telelogic DOORS®, the SE Core A&I requirements management tool.  The requirements were sorted into 32 functional bins to facilitate analysis. Some requirements were allocated to multiple bins. Requirements within each bin addressing similar functionality were further grouped and compared and merged into a single VSA requirement where appropriate. Related requirements from different source programs differed significantly in level of detail and completeness. Multiple reviews of the initial VSA system requirements were required to settle on an appropriate level of detail.Once the initial requirements were stabilized, additional domain program requirements were captured in DOORS, sorted into bins, and merged to expand the domain coverage. Typically, three program sets of requirements were merged at a time to avoid confusion in the generation and review process steps.Requirement VariabilityCommon requirements were captured and grouped according to the functional requirement bins.  Related requirements were consolidated into common requirements where possible, in part or in whole. Requirement variability across related requirements was captured in two ways.  Requirements with clear variability, such as scale, were captured using a variability module within DOORS.  The variability module stored the multiple variants.  The main DOORS module stored the common requirement text and included a variability token (e.g., $FAN_RANGE) to link to the variant values. This mechanism was defined based on work done on the Common Training Instrumentation Architecture (CTIA) program.  Requirements unique to a specific training segment or trainer type were segregated within DOORS using subsection headers.Domain Architectural AnalysisIn parallel to the domain requirement analysis, some domain programs were analyzed from an architectural perspective.  Since a significant VSA task is to provide an evolution path for current programs, the VSA must be sensitive to the interface boundaries current program subsystems and major system functions.  Ignoring these realities could result in VSA architectural boundaries that appear elegant for new development, but significantly increase the cost of evolving current systems.  For the Project Manager Combined Arms Tactical Trainer (PM CATT), key programs of Aviation Combined Arms Tactical Trainer (AVCATT), and the CCTT, DoDAF System View (SV)-1 systems interface description and SV-4 functional decomposition products were produced and compared.  Commonality between the two functional decompositions was identified and a first cut at a VSA system decomposition was formed.  The results from this analysis were a significant influence on the functional bin definitions used in the requirement analysis effort and to the current VSA product and subproduct boundaries.The functional descriptions and decomposition boundaries were mapped to the VSA and the coverage was examined.  Changes to the VSA were made where coverage was incomplete.  An initial mapping of requirements to the architectural decomposition elements was completed, as shown in  REF _Ref138635879 \h Figure 9 - Domain Requirement Analysis Functional Bins.  This mapping helped to mature both the requirements and the decomposition boundaries and provided a head start toward a more formal requirements allocation effort.Figure  SEQ Figure \* ARABIC 9 - Domain Requirement Analysis Functional BinsIn addition to programs from the PEO STRI virtual domain, the One Semi-Automated Forces (SAF) and CTIA programs, from the constructive and live domains respectively, were also analyzed architecturally.  These programs were selected because they are both based on product line architecture approaches.  The VSA also had access to architecture subject matter experts (SMEs) from both programs. VSA Client (customer) SupportFor the VSA and the SE Core A&I program to be successful, the VSA definition, products, and architectural elements must be readily and easily accessible, must be understandable, and must assist users with processes and tools to help stand up or extend a development environment.  These needs are fulfilled by the SE Core repository.The SE Core repository will be Web-based, containing the VSA definition documentation, architectural elements and their corresponding documentation, composition tools, development processes, and build procedures.VSA client programs and product developers will access the repository though a Web-based portal.  SE Core A&I is currently researching similar portals in place to support the OOS and CTIA programs.  Reuse from these existing portals will help the SE Core A&I team to bring the portal online sooner and avoid pitfalls encountered by the previous programs.Interfaces for developers to locate Products and Components of interest are currently being developed and include a graphical drill-down capability through an interactive PLAF view and a keyword search capability. Once located, the component contract will point to all information necessary to select, build, interface to, test, and extend the element.  System developers then improve and expand the SE Core A&I baseline with feedback of to the VSA, including requests for new or expanded elements and discrepancy reports against existing architectural elements.  Evolution and maintenance of the VSA and elements within the repository are managed by an architecture review board.  Repository procedures will be developed to ensure existing users of the element are not adversely affected by changes and the modified element meets the specifications in the component contract.Another client program support feature is the VSA Evolution Plan (VEP).  In accordance with the major motivation to preserve investments in current training systems, the VEP describes the philosophy and processes for planning and migrating current systems to the VSA.  It will aid in identifying areas of opportunity for evolution including the development of the business case and estimating the engineering effort. Analysis of the candidate program architecture helps identify low hanging fruit where the program can reap improvements with minimal costs.  Compliance assessment tools help evaluate the distance of a system from the VSA and the cost of the evolution. As programs move through this evolution process, data will be collected to forma historical base. Access to that history will help to refine the processes and improve the estimation speed and accuracy. As programs adopt VSA products, they also adopt the VSA framework protocols and rules, making it easier to adopt and interoperate with further Products.  The end state of this evolution is a training system that conforms to, and is consistent with, the VSA products line.Another way to preserve current investment is to evolve, or migrate, existing functionality to VSA, making it available for reuse within the product line.   REF _Ref138681459 \h Figure 10 -Product Evolution to VSA illustrates this evolution.  It is noteworthy that SE Core A&I recognizes that not all functionality will evolve completely to use VSA components and services.  Based on the individual business case, some functionality will be brought into a Product level, interoperable level of compliance.  This is a similar case to a COTS vendor submitting a product for inclusion in the VSA repository, as discussed in  REF _Ref138681712 \w \h 2.5.Figure  SEQ Figure \* ARABIC 10 -Product Evolution to VSAVSA Current StateThe VSA is currently completing its requirements analysis and architecture definition phase. An initial PLAS has been submitted to the government. The following VSA architectural artifacts are currently in draft or final form:PLAS/PLAFSE Core A&I Concept of OperationsDoDAF AV-1 & 2, OV-1, 2, 3, & 5, SV-1, 2, 3, 4, 5, & 6, TV-1VSA Compliance ConceptSystem Design Notes addressing: Product Layer Interoperability, System Composability, Component Layer Communications, VSA Service Layer Definition, Simulation Management Options,  Information Assurance in VSA, GUI Style Guide Approach, Exercise File Compatibility, Safety, System Checkpoint, and Time ManagementSystem Use Cases/Key System ThreadsThe initial architectural elements to support the AAR, C4ISR Interface, and Long Haul Networking are in design and will begin development in the summer of 2006.Definition and a detailed requirement refinement effort have been completed for architectural elements supporting the three initial areas of AAR, C4ISR Interface, and Long Haul Networking. These are currently in the detailed design phase of development. The key VSA Services supporting these functional areas are also in detailed design. Implementation of those key services is scheduled to begin in July 2006.References[1] Online M&S Glossary (DoD 5000.59-M). [Online].   HYPERLINK "https://www.dmso.mil/public/resources/glossary/results?do=get&def=297" https://www.dmso.mil/public/resources/glossary/results?do=get&def=297.  [11 October 2005].[2] Product Line Glossary. [Online].   HYPERLINK "http://www.sei.cmu.edu/productlines/glossary.html" http://www.sei.cmu.edu/productlines/glossary.html.  [24 May 2006].Author BiographiesMARK A. FAULK is a senior systems engineer at SAIC in Orlando, Fla.  He is currently the system architect for the Synthetic Environment (SE) Core Architecture & Integration program, developing a virtual domain product line architecture for the Army.  Mr. Faulk received his bachelor’s degree in computer science from the University of Central Florida.  He has over 12 years of experience with simulation and training systems and more than 20 years in software and system design.  Mr. Faulk has been involved with multiple simulation programs including CCTT, VCCT, UK CATT, CTIA, and EST 2000.  He has performed design, development, and consulting in the areas of C4I communications, interoperability (DIS and HLA), user interface, AAR, and network communications in the virtual and live domains.BRIAN E. KEMPER is the lead architect for the U.S. Army Program Executive Office for Simulation, Training, and Instrumentation on the SE Core program.  Mr. Kemper received his undergraduate degree in electrical engineering from the University of Central Florida.  Mr. Kemper has 20 years of systems engineering experience in both industry and civil service, supporting DOD military, training and simulation, and NASA design and development initiatives.RICHARD C. FUCHS is currently a system engineer with the Strategies, Simulation, & Training Business Unit of SAIC in Orlando, Fla.  Mr. Fuchs’ responsibilities include system engineer for the Virtual Simulation Architecture effort under the Synthetic Environment Core project.  Mr. Fuchs has seven years of system and software development experience with training and simulation systems. He received his bachelor’s degree in computer engineering, from the University of Central Florida in 1999.JEFFERY T. LITTLEJOHN is currently a senior system engineer with the Strategies, Simulation, & Training Business Unit of SAIC in Orlando, Fla.  Mr. Littlejohn’s responsibilities include senior system engineer for the Synthetic Environment Core Architecture and Integration (SE Core A&I) program.  In addition Mr. Littlejohn is the senior system engineer for the Training Systems Contract II with the Naval Air Warfare Center-Training System Division.  Mr. Littlejohn has 18 years of system and software development experience.   In addition, Mr. Littlejohn has 10 years of system and software development experience with training and simulation systems.  Mr. Littlejohn received a master’s degree in computer science from the Florida Institute of Technology in 1994, and a bachelor’s degree in electrical engineering from West Virginia Institute of Technology, in 1987.