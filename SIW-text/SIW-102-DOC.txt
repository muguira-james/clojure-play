Using the SEDRIS Spatial Reference Model: Lessons LearnedN.C. Strauss, Ph.D.MathematicianBoeing HelicoptersPhiladelphia, PA(610)591-3351 HYPERLINK mailto:nicholas.c.strauss@boeing.com nicholas.c.strauss@boeing.comKeywords:Modeling and Simulation Interoperability, Helicopter, Constructive/Virtual Simulation, Digital Terrain, Correlation, Coordinate Conversion/System, Object-oriented, SEDRIS Spatial Reference ModelAbstract: This paper describes software modifications required to adapt a simulator for the AH-64 (Apache) helicopter to use the SEDRIS Spatial Reference Model. The simulator typically uses the ModSAF libraries for coordinate services. However, due to export requirements in support of the Australian DSTO, we modified our simulator to use the SEDRIS services which do not have export limitations.The simulator supports both a low-cost, easily transportable desktop flight simulator and a plan-view constructive operations simulator. The simulator can communicate via DIS protocol and participate in wargaming activities.We summarize our results from testing between the MODSAF and SEDRIS coordinate service including correlation and performance. In addition, we discuss lessons learned in using  some of the new features of  the SEDRIS Spatial Reference Model which include augmented UTM, and vertical datums. 1.0 Introduction: coordinate services from a user’s perspectiveA basic flight simulation requires the use of several mathematical coordinate systems to compute Newtonian dynamics. For example, airframe inertial and ground based coordinates immediately come to mind. Add to this the additional requirements of navigation and warfighting and the science of geodesy and cartographic technology become critical.The user wants to be able to fly over realistic terrain. He wants to look out the simulator cockpit window and see an accurate, high fidelity view, then glance at his moving map display and see a correlated digital map. His heading, his spot reports – all must be consistent and accurate.As the simulation community knows, this fiction is created by running many separate computing processes which must interoperate. One process drives the out-the-window, another the digital map, etc. Some of these processes use 3D representation while others are 2D. The scale of the simulation can range from less than a meter to hundreds of kilometers. The requirements of a helicopter simulation are especially daunting. The helicopter can hover and fly within meters of the ground, and also fly over a hundred knots at thousands of meters above the ground. Providing this fiction is tough, and harder than providing a jet or tank simulation. The jet typically flies at a very high altitude, and so only a few airports need to be accurately modeled. And the tank needs accurate modeling, but its speed and range are limited. The coordinate services that are used in each simulation computing process must be accurate to within centimeters and must be valid over large-scale exercises (> 100 Km). If the coordinates are inaccurate, the resulting fiction is destroyed. Targets on the moving map don’t appear in the out-the-window view, and if they do, may be underground. Or if the targets are visible, the missiles typically miss, because the targets have been ground clamped.There are several important cartographic coordinate systems. The primary ones considered in this paper, are the geodetic, geocentric, and universal transverse mercator (UTM) systems. Other coordinate systems such as the Lambert conformal conic are also important but will not be considered here. The following table illustrates these systems and some of their attributes. The column dimension refers to whether the map use two or three parameters, while column projection refers to whether the geometry has been flattened.Coordinate SystemDimensionProjectionLocal2DYesUTM2DYesGeodetic2DNoGeocentric3DNoFigure One – Coordinate Systems  Our simulation uses the UTM projection for the moving map display and for target placement using our computer-generated forces (CGF) module. In addition, our dynamics model uses a local coordinate system which is essentially a linearly offset UTM. Our simulation uses the geodetic coordinate system as an intermediate system useful between the UTM and the 3D geocentric coordinates.  Both the UTM and geodetic systems are augmented. The augmentation adds the additional elevation z coordinate and neglects any consideration of elevation when computing from UTM to/from geodetic.  There is some debate as to the validity of using this augmented approach, however, we use it because all of our computing processes use it. The standard coordinate pipeline that we use, on the outbound leg, consists of starting from local coordinates, converting to augmented UTM, then to augmented geodetic, and then to geocentric. The inbound leg is the reverse, going from geocentric, to augmented geodetic, to augmented UTM, and lastly to local coordinates. Thus, the coordinate services which we require are transformations from UTM to/from geodetic and geodetic to/from geocentric. This is a total of four transforms needed, two outbound and two inbound. In this paper, we compare two coordinate service providers – MODSAF and SEDRIS, and note correlation achievable between them.2.0 Using the MODSAF coordinate service architectureMODSAF coordinate services are quite sophisticated and reflect several revisions and extensions. Currently, they are the standard for tactical combat simulation interoperability. MODSAF provides a coordinate library which provides the necessary four transformations. There are several complications, however, which must be considered. First, MODSAF was extended to provide a global coordinate system (GCS) capability. This provides the user with the ability to link together multiple local coordinate systems in a well-defined way. Any use of the MODSAF coordinate services must first interface with GCS. Probably the simplest is to declare the interface as legacy SIMNET. This means that only one local system will be considered. For our simulation, this is all that’s needed.Next a horizontal datum must be specified. In practice, we do use more than one datum. This is because many existing map products use a variety of datum. Many continental U.S. maps use the Clark 1866 ellipsoid, while many European maps use the International Spheroid. There is a growing standardization to use the World Geodetic Standard (WGS-84) ellipsoid. For example, the global positioning system (GPS) uses WGS-84. Of course the horizontal datum is more than just the choice of ellipsoid and also consists of the Molodensky offsets. We won’t cover this theory in this paper, but will simply note that the choice of horizontal datum is important in achieving correlation.About the only other source of possible confusion is in the argument order. MODSAF expects northings then eastings, and latitude then longitude. This is opposite to usual mathematical convention where x precedes y.3.0 Using the SEDRIS coordinate service architectureSEDRIS coordinate services are a bit harder to use, however this pays off in improved efficiency. The user must first define a coordinate system transform pair for each set of coordinate systems. This transform pair is like a bridge between the two coordinate systems. Thus to convert from a UTM to a geodetic coordinate, one must first define a UTM-geodetic transform and then one can call the library service routine which actually performs the conversion. The rationale behind this architecture makes sense. The majority of coordinate pipeline calls are repeats. Doing initialization up front once, saves a lot of processor time.SEDRIS expects its arguments differently than MODSAF. These arguments must be first bundled into a SE_UTM_COORDINATE or a SE_GDC_COORDINATE. This packaging can be a minor inconvenience especially if trying to interface to legacy code. And UTM northings must be referred to as “y” and eastings as “x”.  This is clearly wrong. Why go to the trouble of defining a SE_UTM_COORDINATE and then disregard the established conventions of northings and eastings? As is the convention, northing and easting refers to a cartesian grid referenced to a compass.Next both a horizontal and vertical datum must be specified. Horizontal datums were talked about in the preceding section. Vertical datums in the map literature are a value which must be added or subtracted to an elevation. For example in the Vector Product Format Military Specification 21 different vertical datums are defined: (high water, higher high water, Indian spring low water, low water, lower low water, mean high water, mean high water neaps, mean high water springs, mean higher high water, mean low water, mean low water neaps, mean low water springs, mean lower low water, mean tide level, neap tide, spring tide, mean lower low water, lowest astronomical tide, chart datum, highest astronomical tide). In SEDRIS, the following eleven vertical datums are currently defined (although SE_NUM_VERTICAL_DATUMS is not!): mean sea level, WGS84 geoid, WGS84 ellipsoid, and spherical datums ACM, COA, NOG, MFE, MOD_M, MOD_S,  MOD_T, MMR.  It was not clear to me, as a user, which vertical datum to use. Another neat feature of SEDRIS is that you can specify the choice of units for elevation. During a UTM to geodetic conversion, one must specify the northing (Y), easting (X), zone, and hemisphere. This is similar to the MODSAF requirements, however, the hemisphere is an additional argument. This is important since the UTM northing value really is ambiguous with respect to hemisphere. For each point in the Northern Hemisphere there is an antipodal point in the Southern Hemisphere which shares the same UTM northing value.  4.0 Comparison: service differencesIt is always dangerous to do comparisons. Software products often have different maturity levels – MODSAF has gone through five major releases, while SEDRIS is on its first release. In addition, these products might have differing objectives – MODSAF is designed to be a CGF product, while SEDRIS is designed as an interface specification. However, on the component nuts and bolts level, one can indeed make comparisons between the coordinate services.  One finds that each product has strong points, and each has limitations. I note these below, in the hopes that this might lead to improvements in both products.4.1 Software architectureThe big advantage of SEDRIS over MODSAF is here. The dictum of  “Initialize once, use many times” has been consistently followed through in SEDRIS coordinate services. When one defines a SEDRIS transform pair, all constants are computed including many performance enhancing optimizations. In contrast, MODSAF typically must re-compute constants. This is critically important in our helicopter warfighting simulation, where the coordinate transforms need to be initialized only once – at the beginning of the exercise.4.2 DatumsModSAF wins here with its datum database which can be extended and modified without recompiling code. MODSAF also support varying datums as a function of UTM zone number and letter. In comparison, SEDRIS also supports a variety of horizontal datums, and provides a code and name attribute, which is helpful. However, these are not separate as a database, but are relegated to inlined code. MODSAF doesn’t support vertical datums while SEDRIS apparently does. This could be a big win for SEDRIS, however it appears that this feature is not yet implemented (at least in the release that I downloaded). More importantly, the vertical datum would ideally consist of a database.4.3 UTM SEDRIS got the UTM  to geodetic conversion code right with an explicit hemisphere argument. In comparison, we had to patch our MODSAF code to provide the same generality.  However, in general MODSAF support for UTM is much better than SEDRIS. For example, MODSAF provides zone number coercion, while SEDRIS automatically assigns zone numbers (in the call SE_ConvertCoordToGivenSystem).  Being able to coerce a zone number is critical for most warfighting simulations.  Otherwise the local coordinate system will not be correlated after crossing a zone boundary.Figure Two --  A UTM grid zone boundaryFigure Three – Comparison of UTM Easting values at grid boundary5.0 Results: correlating the services.We modified our simulator to use both coordinate services and ran two instances over a distributed interactive simulation (DIS) network. One simulator ran with the MODSAF coordinate services and the other ran with SEDRIS coordinate services. We used OpenFlight digital terrain in both simulations. We achieved  exact correlation between the simulations in real time. This was verified both with a piloted helicopter and with ground threat vehicles. This was achieved with SEDRIS using WGS84 horizontal datum and with vertical datums set to WGS84 ellipsoid, and ModSAF using the WGS84 horizontal datum. For other datums, one can achieve correlation between UTM and geodetic. However, cannot achieve correlation between UTM and geocentric. The problem seems to be because vertical datums are not yet fully implemented in SEDRIS. So for other datums, we could not achieve correlation between the two real-time simulations.5.1 Performance ComparisonsTo compare the relative performance of the SEDRIS and MODSAF coordinate services, we wrote a test program that converted from UTM to geodetic, from geodetic to geocentric, then back from geocentric to geodetic, and finally from geodetic to UTM. We performed this same basic benchmark for both coordinate services, and iterated the basic benchmark ten thousand, a million, and ten million times. Table Four illustrates SEDRIS’s efficiency advantage. Iterations(sec)1.00E+051.00E+061.00E+07MODSAF222220SEDRIS117167improvement50%23%24%Figure Four – time comparison of coordinate servicesWe then profiled the resulting executable running on an SGI OCTANE, and tabulated the relative percentages used by the different procedures. The majority of SEDRIS computation resides in SE_ConvertCoordToGivenSystem (24%). As SEDRIS doesn’t call trig functions, all the 27% total computation usage of trig library calls (sin, cos, atan, tan, atan2, atan) is part of the MODSAF computation. This illustrates how SEDRIS achieves its performance gains – primarily by avoiding trig library calls.procedure%CPU TOTALSE_ConvertCoordToGivenSystem24.20%__sin14.60%xyz_to_llz9.90%coord_utm_to_ll8.60%coord_ll_to_utm8.50%__cos5.00%atan03.80%gcs_llz_to_gcc2.70%SE_ValidCoord3D2.60%__tan2.30%calc_ellipse_params2.10%SE_ValidGDCCoordinate1.90%main1.50%SE_GetErrorFilePtr1.00%SE_ConvertDistance0.90%coord_gcc_to_llz0.80%se_utm_to_geodetic0.80%se_geodetic_to_utm0.80%coord_get_major_axis0.70%coord_get_minor_axis0.70%coord_get_datum_shifts0.70%se_geodetic_to_geocentric0.60%se_geocentric_to_geodetic0.60%__atan20.60%SE_ValidUTMCoordinate0.60%__atan0.50%Figure Five – Relative CPU percentage of procedure calls.6.0 ConclusionWe achieved limited interoperability between MODSAF based simulations and SEDRIS based simulations. We found miscorrelation problems with terrain not using WGS84 as horizontal datum, or for battles conducted near zone boundaries.The extremely efficient coordinate conversion of the SEDRIS coordinate service recommends further work in refining this service. We would like to be able to use SEDRIS coordinate service and expect to do so, in the near term future.AcknowledgementsI wish to thank my colleagues in Mesa and Philadelphia, in military technology and flight simulation.ReferencesM.  Ewing, Introduction to Geodesy, Elsevier, 1970.F. Gloeckler et. al.,  Handbook for Transformation of Datums, Projections, Grids, and Common Coordinate Systems, U.S. Army Corps of Engineers, Topographic Engineering Center, Alexandria, VA. MIL-STD-2407 G.3 Vertical Datum Codes, Department of Defense, Interface Standard for Vector Product Format, 1996.MODSAF Kit, STRICOM, Orlando FL.Multigen II User’s Guide and Options User’s Guide, MultiGen Inc., version 1.5, San Jose, CA, May 1998. Strauss, N.C., “Making a Constructive Terrain Virtual: Lessons Learned”, Simulation Interoperability Workshop, Spring 1999, SISO.Author BiographiesNICHOLAS STRAUSS is a Mathematician at Boeing Helicopters in Philadelphia, PA. where he works in military technology supporting constructive/virtual simulator exercises and image generation applications. Submitted to the 2000 Simulation Interoperability Workshop .  MIL-STD-2407 G.3 Vertical Datum Codes, Department of Defense, Interface Standard for Vector Product Format, 1996. Strauss, N.C., “Making a Constructive Terrain Virtual: Lessons Learned”, Simulation Interoperability Workshop, Spring 1999, SISO. EMBED Excel.Sheet.8  