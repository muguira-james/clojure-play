Federate Compliance and Federation Verification Testing Under IEEE 1516Demetrius CampbellThom McleanGeorgia Tech Research InstituteGeorgia Institute of TechnologyAtlanta, GA 30332-0832404-894-7486, 404-385-1793 HYPERLINK "mailto:thom@cc.gatech.edu" thom@cc.gatech.edu,  HYPERLINK "mailto:demetrius.campbell@gtri.gatech.edu" demetrius.campbell@gtri.gatech.eduABSTRACT:  This paper reviews the Federate Compliance Testing process under IEEE 1516. We review the basic steps, changes from the 1.3 standard, and demonstrate the process using a revised version of the sushi federation.  We also review the federation verification tool, and how it can be used in debugging federation level behaviors.  We show how the FVT is evolving and demonstrate its use to diagnose problems in federation executions. 1. HLA and 1516 Background. The High Level Architecture (HLA) is a general purpose architecture for simulation reuse and interoperability. The HLA was developed under the leadership of the Defense Modeling and Simulation Office (DMSO) to support reuse and interoperability across the large numbers of different types of simulations developed and maintained by the DoD. In September 2000, the Institute of Electrical and Electronics Engineers (IEEE) formally approved the 1516 series of HLA specifications. The new HLA 1516 IEEE standard for modeling and simulation (M&S) consists of three specifications:∙ 1516 Framework and Rules ∙ 1516.1 Federate Interface Specification ∙ 1516.2 Object Model Template (OMT) The key objective to the 1516 IEEE standard was to establish a common technical framework to facilitate the interoperability of all types of models and simulations among themselves and organizations internationally.2. Federate Compliance TestingWhile the new commercial HLA standard is broadly recognized as a significant technical improvement over the older HLA version 1.3, there is also an expressed need within the HLA community for an accompanying process model that would identify and describe the activities necessary to build federations compliant with the new IEEE 1516 standard.  The Federate Compliance Testing Process is the mechanism to verify at runtime that the expected HLA services are being properly implemented and called in the correct sequences for compliance with HLA.Figure 1  New HLA 1516 Federate Compliance Test ProcessSimilar to the original HLA 1.3 federate compliance test process, HLA 1516 consists of a four step procedure, as shown in Figure 1 above.  The first step is simply an exchange of information between the Federate Under Test (FUT) and the Certification Agent (CA) to start the certification process. This process application is basically the same; the only minor change is adding the new 1516 version as a selectable item in the drop down menu list. The second step, the FUT provides required documentation,including the Federation Execution Data (FED), Simulation Object Model (SOM), a Conformance Statement (CS) listing the interface services supported by the FUT, and any other necessary files that may be needed. The CA checks the documentation for conformance to the specifications, and, if the SOM and CS prove to be syntactically correct, internally consistent, and consistent with each other, the CA returns a success message and schedules an Interface Test (IF) test date. Step 3 the CA monitors the IF test using the new Federate Compliance Testing Tool (FCTT) until the tool indicates that a sufficiently comprehensive set of SOM capabilities has been demonstrated.  After this point is reached, the IF Test is concluded. Step 4 completes the process with the After Action Review (AAR) and paperwork to document the federate’s certification of compliance with the HLA.3.Changes from the 1.3 to 1516 standardIn addition to diagramming the changes in the federate testing process, the lesson learned from using the two different HLA standards is discussed.    There are a number of technical improvements in HLA 1516. The 1516 standard solves a number of problems found during practical use of HLA 1.3. It is more strictly defined. The behavior of many functions is more logical. Example: You can subscribe to the x and y position of an object and then subscribe to the z position. In HLA 1516 the new subscription will be added to the earlier one instead of replacing it. Filtering of information (with Data Distribution Management) is easier and more flexible. You may freely decide which dimensions to use for filtering at runtime. Some additions allow for better performance and scalability. For example in simulations with many objects it is possible to pre-register object names before the main simulation starts. When you later want to create the objects this is a fast operation. The documentation of the object model is more complete. This leaves less room for confusion in the project and speeds up integration. The object model now uses industry standard XML format. This opens more possibilities for example to process the XML in standard tools and to do your own code or scenario generation etc. The object models use Unicode character representation instead of ASCII. This is better for international use since virtually any language can be used.4. Porting 1.3 federation to a 1516To integrate the changes between the HLA 1516 and 1.3 standard we ported a well developed HLA 1.3 federation into an HLA 1516 federation. Originally developed, by authors Dr. Frederick Kuhl, Dr. Richard Weatherly, and Dr. Judith Dahmann of the MITRE Corporation, the Sushi Federation was built to comply with the DoD HLA v 1.3 specifications as an simulation example in the book Creating Computer Simulation Systems. The federation was re-complied and executed using Pitch’s pRTI1516  version 2.1 the only existing 1516-compliant run-time infrastructure (RTI) software. Understanding and specifying the lessons learned in accomplishing this conversion, we give a brief overview of the sushi federation. (The book, Creating Computer Simulation Systems goes into further details and explanation) Also we explain the details of how to create, join, declare object instances, and publish and subscribe object classes within a 1516 HLA federation. The HLA Runtime Infrastructure (RTI) is the software component of HLA that makes it technically possible for simulations to interoperate.  The RTI provides commonly required services to simulations for coordination of operations and data exchange during an HLA federation execution.  IEEE 1516 is an open and international standard for both military and civilian use.  The portable of pitch’s 1516 RTI is a platform independent implementation. pRTI 1516 is extremely easy to install and configure. Implementing the sushi federation requires a pitch 1516 v 2.1 build 73 or higher RTI.  The software is not free but if you go to their web site  HYPERLINK "http://www.pitch.se" www.pitch.se you can download a trial version for free.  Installing and configuring the RTI is a simple process and can be easily address by downloading and following the installation directionsThe sushi federation is comprised of five different federates Manager, Production, Transport, Consumption, and Viewer.  The simulation is designed to emulate a sushi boat restaurant model. The Production federate is designed to model any number of chefs in the preparation of making different types of sushi available to be placed on boat’s which represent a tray serving.  The Transport federate models any number of boats that are circling around and acting as an interface to the Production federate and Consumption federate. The Consumption federate models the consumer or diner who wishes to eat the serving the Production federate has produced. The Viewer federate is a simple design to show a graphical representation of what is going on in the federation.   Creating and joining a federate to an RTI is simply the same as a 1.3 HLA.  The minor change is an additional argument in the join method of type Mobile Federate Services. The changes in subscribing, publishing object and interactions are that the arguments take and return new data types.  The 1516 has defined object class handle, interaction class handle, attribute handles, and parameters handles types.  These types are used throughout the federation and have been substituted for the original integer data types within HLA 1.3. The data type’s format standard has changed in 1516 to the External Data Representation (XDR) format data standards.  The External Data Representation is a data exchange method that is not related to any specific operating system or hardware. Instead, the XDR format can be used on practically all computer systems at large. Thus, XDR is an excellent vehicle for numeric data exchange, if a large number of computer systems are involved. The next change in implementing to the HLA 1516 was converting the Federation Execution Data (FED) file into the XML format. XML is the standard for the data Object Model Table (OMT). This is to ensure that the data in the federation is unambiguous between federates and their interfaces. 5. Federate Verification ToolThe Federation Verification Tool (FVT) will assist federation developers in the Federation Integration and Federate Compliance phase by using the information in a federation’s FED, and OMT files to determine a set of tests to be performed before, during, and after federation execution.  These tests will verify whether the federation abides by the contract of execution specified in these files.There are two broad categories of federation testing: application testing and integration testing. Application testing is to verify that a federate can generate the objects and interactions it is responsible for in the Federation. FVT will assist Federation developers test individual federates to verify the service invocation specified in the OIT. Integration testing examines how one federate interacts with another federate.  Additionally, integration testing ensures that the data exchanged by the Federation, as specified in its FOM, is correct.These categories, address specific federation requirements, such as information to be exchanged, data standardization, and timing issues.  In federation level monitoring, the entire execution set is monitored to ensure that the previously checked “federate-federation contracts” are adhered to.FVT’s architecture is an example of the model/view/controller paradigm, which is widely used to develop object-oriented GUI applications.  FVT’s model is an in-memory data structure that keeps track of the information about a federation execution that FVT needs to perform its tests.  FVT initializes its model before federation execution by reading the federation execution’s FED, OMT, and FEPW files.  During federation execution, the model is updated by FVT’s controller.  The controller is responsible for subscribing to relevant federation object and interaction classes (including those of the MOM), handling the ensuing object updates and interactions, and updating the model accordingly.  FVT’s views present the information in its model to the user in a variety of useful ways.  The architecture is shown in Figure 2.Figure 2.6. ConclusionThe HLA federate compliance test process has been upgraded to handle the new 1516 HLA standard. Federates must still demonstrate all of the interface services that they assert. HLA 1516 compliance can emerge as the tool and standardization mechanism that bring the technology together7.  AcknowledgementsThis work is sponsored by the Defense Modelingand Simulation Office (DMSO). 8.  References[1] 	Fredrick Kuhl, Richard Weatherly, Judith Dahmann.: Creating Computer Simulation Systems: IS 9646 Explained, Prentice-Hill, New Jersey 2000.[2]	IEEE Standard for Modeling and Simulation, High Level Architecture Object Model Template Specification, Version 1516.2.1, 21 September 2000.[3]	IEEE Standard for Modeling and Simulation, High Level Architecture Federate Interface Specification, Version 1516.1, 21 September 2000.[4]	Margaret Loper, Thom McLean, Margaret Horst, Kyle Crawford, Georgia Tech Research Institute, “The High Level Architecture Federate Conformance Testing Process (Revised), SIW, Fall 1997.[5]	Margaret Loper, David Rosenbaum, Kyle Crawford, Georgia Tech Research Institute, “The Improvements to the HLA Federate Compliance Testing Process, SIW, Fall 1999. [6]	Margaret Loper, David Rosenbaum, Georgia Tech Research Institute, “The Federation Verification Tool”, SIW, Fall 1998.Author BiographiesDemetrius Campbell is a Programmer  for the Distributed Simulation Systems group at Georgia Tech Research Institute.  He began work at GTRI under the HLA Federate Testing contract supported by DMSO. Current work at GTRI includes migrating the Federate  Conformance Test System to support the new HLA Interface Specification version 1516.  Mr. Campbell has a B.S. degree in Computer Science from Georgia State and is currently pursuing his M.S in Computer Science.Thom McLean is a Senior Research Engineer for the Distributed Simulation Systems group of the Georgia Tech Research Institute.  Prepare Conformance Notebook (SOM, CS, FED file)Gather certificate informationGather environment dataComplete test applicationFederate under TestSuccessSet IF test dateConduct SOM/CS testsCompleteCheck compliance databaseReview applicationSuccessPrepare letter and certificate of compliance; conduct AARConduct IF testCertification AgentStep 1Step 4Step 2Step 3Return if incompleteSubmit application requestSubmit Conformance NotebookSubmit environment data, Confirm IF test dateApprove application and send user ID/passwordReturn SOM/CS results with deficienciesReturn SOM/CS success,  IF test dateReturn IF test results with deficienciesSubmit certificate request and schedule AARReturn certification letter and certification of complianceReturn IF test success