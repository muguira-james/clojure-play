Sling Loads in V-DISLance R. MarrouScience Applications International Corporation (SAIC)12901 Science DriveOrlando, FL 32826 USA(407) 243-3710 (phone) (407) 243-3586 (fax) HYPERLINK "mailto:lance.r.marrou@saic.com" lance.r.marrou@saic.com Mr. Pat Garrity, Ms. Cindi SlepowU.S. Army Program Executive Office for Simulation, Training, andInstrumentation (PEO STRI) 12350 Research ParkwayOrlando, FL. 32826 USA(407) 384-3663, (407) 384-5415 (phone)(407) 384-3611 (fax) HYPERLINK "mailto:pat.garrity@us.army.mil" pat.garrity@us.army.mil,  HYPERLINK "mailto:cindi.slepow@us.army.mil" cindi.slepow@us.army.milABSTRACT: Distributed Interactive Simulation (DIS) is an infrastructure that promotes interoperability amongst various training systems.  DIS, together with the enumerations document, does not provide a satisfactory or comprehensive solution for implementing sling loads in either the virtual or constructive simulation domains.The U.S. Army Program Executive Office for Simulation, Training, and Instrumentation (PEO STRI) Project Manager Combined Arms Tactical Trainer (PM CATT) initiated the Synthetic Environment (SE) Core Architecture & Integration (A&I) program.  This contract is tasked with developing a virtual simulation architecture (VSA) with the goal of providing the warfighter with enhanced training by increasing interoperability between training systems, increasing the reuse of products developed for training systems, protecting the investments made in developing current virtual training simulations, and increasing the adaptability and extensibility of the virtual training simulations that are developed to enable the easy incorporation of new features.  A large segment of the PM CATT virtual domain programs uses DIS, so this standard is important in legacy, current, and future training systems. Establishing a single flavor of DIS that will be used by the training and simulation programs under PM CATT and then communicating the desired changes to the standards community at the Institute of Electrical and Electronics Engineers (IEEE) and the Simulation Interoperability Standards Organization (SISO) is one of the initiatives contributing to resolving the interoperability issues within the U.S. Army virtual domain. This paper details the SE Core VSA solution for sling loads as defined in VSA DIS (V-DIS).  We describe how an exemplary training system would evolve to meet this specification.  We provide detailed enumerations necessary for the various PDU records and complete interaction protocols and use cases, covering capabilities and visualization, hook up and detach, position and orientation with dead reckoning, damage.  We also discuss alternate approaches that were considered.IntroductionDistributed Interactive Simulation (DIS) is an infrastructure that promotes interoperability amongst various training systems, whether they belong to the same vendor or not.  It links multiple types of simulations from the constructive, live, and virtual domains, and across different types of networks.The U.S. Army Program Executive Office Simulation Training, and Instrumentation (PEO STRI) Synthetic Environment (SE) Core program is supporting the training of our warfighters by providing a common virtual environment (CVE) that links system and non-system simulations into a fully integrated and interoperable training capability. The Synthetic Environment (SE) Core concept includes the development of a virtual simulation architecture (VSA) responsible for providing the warfighter with enhanced training by increasing interoperability between training systems, increasing the reuse of products developed for those training systems, protecting the investments made in developing current virtual training simulations, and increasing the adaptability and extensibility of the virtual training simulations that are developed to enable the easy incorporation of new features.  REF _Ref175564328 \r \h [1]Through the development and application of the VSA framework, standards, and common products, SE Core is supporting the overarching objective that we "train as we fight," training in a way that helps ensure mission performance in the contemporary operating environment (COE).  SE Core components will support virtual simulations at home station, Combat Training Centers (CTC), en route to and at deployed locations for training or wartime mission planning and rehearsals.  SE Core is applying an incremental building block approach to the identification and development of key capabilities that represent the highest contributors to the achievement of interoperability and, ultimately, fair fight in support of combined arms training.  The result of force structure changes combined with the reality of current operations has yielded an environment where the level at which the Army needs combined arms training is now at a much lower echelon (platoon and company level). In order to provide effective combined arms simulation training at this level, virtual training system interoperability and fair fight must be achieved. Some of the key SE Core capabilities that represent the highest contributors to the achievement of interoperability and ultimately fair fight in support of combined arms training include common communication protocols, common Semi Automated Forces (SAF), common environment, common databases, common visual models, common sensor models, and common digital communications. The SE Core mission is consistent with the overarching objective to provide the ability to train the effects of the full spectrum of the combined arms force even when only selected elements of the force are available for training.  This enables repetitive training in a realistic, stress-producing live virtual constructive-training environment (LVC-TE), easily tailored to meet mission-specific training and rehearsal needs for active and reserve components.Figure  STYLEREF 1 \s 1. SEQ Figure \* ARABIC \s 1 1 Sling Loaded HMMWVsPhoto used by permission of the U.S. Army Program Executive Office Simulation, Training and InstrumentationA large segment of the Project Manager Combined Arms Tactical Trainer (PM CATT) virtual domain programs uses DIS  REF _Ref203293597 \r \h [5]; as such, the evolution of this standard is a key component to the improvement of interoperability in legacy, current, and future training systems. An example of this improvement is the simulation of sling loads (see  REF _Ref203888774 \h Figure 1.1 Sling Loaded HMMWVs), specifically for rotary-winged aircraft (RWA).  This paper presents a solution for sling loads within the context of DIS (forward-looking with the 1278.1-200X draft  REF _Ref188441213 \r \h [4]) that supports any combination of interactions between computer-generated forces [CGF] and manned modules [MM].Sling Load InteractionsThe V-DIS recommendation for sling loads includes several variable parameter (VP) records, changes in the Entity State Capabilities field, and changes in the Collision PDU.  This section will summarize the interactions for sling loads and leave the structures and enumerations for the following sections.Capabilities and VisualizationAn entity, whether it is a platform, supply crate, or something else, may be sling loaded only if it has its Entity State PDU Capabilities field set appropriately (see  REF _Ref203293285 \r \h 3.1).  There is also a bit in the Capabilities field for indicating if an entity can carry sling loads. (Our expected use case for this only includes RWA, but this could easily be used for any entity types.)  We have also identified appearance information in the Extended Equipment field of the Extended Appearance VP record.  Note that we have not distinguished between the Capabilities and appearance for the purposes of visualization; that is left to the receiving simulation application.  This means that as an entity is “converted” from its non-sling loadable state (the Capabilities bit is set to false) to its sling loadable state (the Capabilities bit is set to true), a simulation application could then alter its visuals.  There could even be a higher-fidelity visualization of the conversion process (using general entity action sequences, which are currently only implemented for lifeforms  REF _Ref203293514 \r \h [6]).  Or, the receiving simulation application could wait until the Sling Loaded appearance flag is properly set.  Note that as discussed below, the entity will not actually be in the sling load yet, even when that appearance flag is set.  We recommend that the RWA provide an attached part (perhaps also an articulated part) for the sling load (line and sling) when it becomes attached.AttachThe interaction between the carrying entity and payload is somewhat complex.  Although this complexity is not an intension of the design, it’s a necessary byproduct in order to most effectively reproduce the desired functionality.  The first goal is to establish the hook-up from the payload to the RWA (carrying entity) or vice versa.  Note that this design does not preclude entities other than RWAs to carry sling loads.  For a visual description of the attachment, please see  REF _Ref203889542 \h Figure 2.1 Sling Load Attachment.This hook-up requires two steps, which we’ve further detailed in  REF _Ref205359912 \h Figure 2.2 Attach Sequence Flow Diagram (failed responses are not shown in the diagram).  The first step establishes the capability of the RWA to carry the sling load and the payload to be carried.  The payload entity must be properly configured and thus have its Sling Loadable Capabilities bit set (see  REF _Ref203293285 \r \h 3.1).  The RWA also must have its Capabilities bit set (a different bit for the carrier, see  REF _Ref203293285 \r \h 3.1).  The appearance bit setting in the VP record is intended for visualization and is a very nice feature but is not a requirement for receiving simulation applications.  The second step calculates whether the current RWA configuration can carry the payload given its current characteristics.  The RWA simulation application (typically a manned module) normally performs this calculation, but it could also be performed by the payload (typically a CGF, but it could also be a manned module, such as a HMMVW).  We suggest using the RWA to perform the calculation, regardless of CGF or MM, because that is the entity doing the work.Figure  STYLEREF 1 \s 2. SEQ Figure \* ARABIC \s 1 1 Sling Load AttachmentPhoto used by permission of the U.S. Army Program Executive Office Simulation, Training and InstrumentationTo support either method, we’ve developed a variable datum record that can be passed with an Action Request (or Action Request-R) PDU.  This datum is the Sling Load Capability record, as identified (and enumerated) in section  REF _Ref203294728 \r \h 5, and is applied to the Sling Load Capability Request (4303) Action ID.  If the entire interaction occurs within the same framework (e.g. the U.S. Department of the Army’s OneSAF®), then this V-DIS interaction need not occur; it could instead occur over that framework.  Similarly, if the simulation application (or training system) desires, then the entire calculation could occur on one side or the other, given predetermined data.Once the capability to sling load is established, then the actual attachment occurs.  To handle this, we’re adopting the implementation of using the Action Request PDU with the Sling Load Attach Request (4301) Action ID.  We require that the same variable datum record be provided, even if additional (last minute) calculations for final acceptance are not performed.  This is because the datum record has the ID of both the RWA and payload.  Although the Action Request PDU has the potential for also storing that information, we’re allowing the option for a simulation controller (e.g. Role Player Station) or some other application to send out the request rather than the CGF backend workstation.  It also allows for the request to target a controlling application other than the backend (simulator) of the receiving entity.  This forward-looking design has little impact (a few more fields in the datum record) while allowing for all potential future use-cases, including manned modules picking up manned modules (and controlled from a simulation controller) and even CGF picking up manned modules.Figure  STYLEREF 1 \s 2. SEQ Figure \* ARABIC \s 1 2 Attach Sequence Flow DiagramAn interesting consequence of using the Action Request PDU is the Action Response PDU Response Status of Pending.  We recommend, but do not require, that the Pending status be used by the RWA in the case where the payload cannot currently be picked up, but that the RWA is in the process of picking it up (perhaps in the middle of a mission behavior or maneuvering into position).  This likely would not be possible for a manned module RWA, but it might function well for SAF RWA where the missions are typically preplanned.Assuming that the connection was successful, the RWA Entity State modifies its Sling Load Status field from empty (1) to loaded (2).  The payload sets the Sling Loaded field from not sling loaded (0) to sling loaded (1). The payload also sets its Present Domain from Land (1) to Air (2) (assuming it was picked up from land) so that ground clamping will no longer be performed on the payload entity.  Note that the RWA should also be taking advantage of the Present Domain field when it lands and takes off.Position and OrientationOnce connected, the RWA starts transmitting an Entity Association VP record with its Entity State PDU.  This record identifies the Association Status as Physical Association Carrier (4), the Association Type as Towed in Air (1), and the appropriate Connection Type (most likely Cable Wire, 2).  The payload also has an Entity Association VP record with similar values except that its Association Status is Physical Association Target (1).  The Associated Object-2 Identifier field for both records will obviously identify the corresponding entity (the payload for the RWA and vice versa).  V-DIS does not require that a separate association be made for every line used in the connection because that level of fidelity is not a requirement (see  REF _Ref205635912 \h Figure 2.3 Sling Loaded Howitzer for examples of two line sling loads).  However, receiving applications should still be able to handle that level of fidelity and, if not necessary for training, then all subsequent physical associations with the same entity should be ignored (for example, if the middle line is the most important, then the middle line should be provided first so that lower fidelity simulations could still maintain the most important characteristics for interoperability and training).In order to maintain a proper position and orientation of the payload, the RWA transmits one or more Entity Offset VP records with its Entity State PDU (see  REF _Ref203295037 \r \h 3.3).  Despite the name of the record, it can be used for both position and orientation of the payload.  The Offset Type in the RWA records denotes either Position Modified by Carrier (2) or Orientation Set by Carrier (3).  For position, the record contains the offset of the payload from the origin of the RWA.  Since this offset is output in the RWA Entity State, it is accurate with respect to the RWA.  For orientation, the record contains the actual, current orientation.Receiving applications that support this functionality (the Entity Offset VP records) will use the calculated position (offset plus RWA position) and given orientation to reposition the payload, ignoring the payload’s actual Entity State position and orientation.  The payload should still attempt to update its correct position and orientation, however, in order to support legacy systems that do not process the Entity Offset VP record.Figure  STYLEREF 1 \s 2. SEQ Figure \* ARABIC \s 1 3 Sling Loaded HowitzerPhoto used by permission of the U.S. Army Program Executive Office Simulation, Training and InstrumentationDead ReckoningDead Reckoning is a concern for high fidelity simulation applications.  For sling loads, the RWA should transmit the dead reckoning parameters of the payload in one or more Dead Reckoning VP records.  Likewise with position and orientation, receiving simulation applications that understand this record should use these parameters instead of the parameters found in the payload.  The payload simulation application should similarly continue to provide dead reckoning parameters for legacy systems, if they are available.  If the RWA simulation application does not support (or provide) this record, then receiving simulation applications that support the Entity Offset VP record should use the dead reckoning parameters of the RWA and not the payload.The RWA that issues these dead reckoning parameters uses the same issuance rules for normal dead reckoning of entity states.  For example, if the payload breaks the dead reckoning threshold but the RWA doesn’t, a new Entity State PDU will still be issued for the RWA.Certain dead reckoning algorithms require different parameters.  If a receiving simulation does not receive all of the required dead reckoning parameters in a valid PDU (given the identified size of the PDU) then it will use the carrier’s dead reckoning parameters for those that are missing (rather than failing or ignoring the PDU). For example, if the dead reckoning algorithm for a payload is listed as FVW (5)  REF _Ref175564311 \r \h [2]  REF _Ref170636800 \r \h [3], and only linear velocity and the offset are included, then the linear acceleration of the RWA is used to dead reckon the payload.  Note that the offset (and orientation depending on the algorithm) of the payload must always be included.Figure  STYLEREF 1 \s 2. SEQ Figure \* ARABIC \s 1 4 Detach Sequence Flow DiagramDetachTo detach, either entity issues an Action Request PDU with the Sling Load Detach Request (4302) Action ID.  Once successful, the RWA will send out a revised Entity State PDU without any Entity Offset or Dead Reckoning VP records used in the sling load operation (though it may have other such records for other purposes).  It will send out one final Entity Association VP record (for this sling load operation) with an Association Status of Association Broken (3) and then it will no longer transmit Entity Association VP records for this sling load operation.  The RWA will also set the Sling Load Status field from loaded (2) to empty (1).  Refer to  REF _Ref205359853 \h Figure 2.4 Detach Sequence Flow Diagram for more information (failed responses are not shown in the diagram).The payload will also send out one final Entity Association VP record (for this sling load operation) with an Association Status of Association Broken (3) and then it will no longer transmit Entity Association VP records for this sling load operation.  The payload will also set the Sling Loaded field from sling loaded (1) to not sling loaded (0).  The payload will also set its Present Domain from Air (2) to Land (1) (assuming it was dropped on land) so that appropriate ground clamping can resume.  In fact, the Present Domain may have already been updated depending upon the fidelity of the payload simulation application (depending on how it processes collisions).Battle DamageBattle damage to each of the involved entities (RWA and payload) shall be handled by the simulation applications modeling those entities.  In particular, the payload will likely have a vulnerability model implemented and this model should not be arbitrarily disabled once sling loaded.  The ownership of the model is not transferred (see  REF _Ref203295670 \r \h 2.8), so it will not be the responsibility of the RWA to model battle damage on the payload.  Should a simulation application determine that the payloads shall not incur battle damage (typically per exercise agreement), then the V-DIS recommendation is to use the Invincible flag of the Status field in the Extended Appearance VP record.  The RWA simulation application also models the battle damage to the line or sling.  The Sling Load Damage of the Extended Equipment for Air Platforms field of the Extended Appearance VP record will be set accordingly.CollisionsThere are four choices for handling collision detection and outputting the Collision PDU as enumerated below.(V-DIS Recommended Approach) Performed by and output by the RWA simulation application – This approach provides the minimum latency between the collision detection and the Collision PDU.  However, it is not DIS-compliant because the RWA simulation application is not the issuing entity.  Fortunately, the impact of this noncompliance is most likely nonexistent on most training systems, because receiving applications will not likely filter the Issuing Entity ID versus the origin of the packet.Performed by and output by the payload simulation application – This approach provides the maximum potential for error, though it is DIS-compliant.  Error may occur when there is significant latency in the position / orientation, such as with high acceleration, which is quite common as the RWA lifts off, lands, or navigates normally.  On the other hand, there is no issue with compliance to DIS and no other informational PDUs need to be transmitted.Performed by the RWA simulation application and output by the payload simulation application – This approach provides as much accuracy as the first method, but it is DIS-compliant.  However, there will be latency between the actual collision detection and the Collision PDU because the information regarding the collision first needs to be sent to the payload simulation application.  The informational processing will require extra design for the records and interactions and extra software development for both simulation applications.  Additionally, this creates a potential latency in the Collision PDU with respect to other entities.  If the collision occurs against the environment, then the latency has little or no bearing.Performed by the payload simulation application and output by the RWA simulation application – This approach is simply not relevant.The second option listed above will not be adopted by V-DIS because it is expected that the error incurred will not be acceptable.  The RWA manned module requires a higher degree of fidelity than that tolerated by this method.  Therefore, collision detection for the sling, line, and payload will be performed by the simulation application modeling the RWA if it is also assigning the payload position and orientation via the Entity Offset VP records (which V-DIS recommends).  If the RWA simulation application is not assigning the position of the payload, then the payload simulation application performs the collision detection for itself, the sling and the line.The RWA simulation application outputs the Collision PDU when it detects a collision for the line, sling, or payload (obviously, in addition to collision detection for itself).  This is a change in the Collision PDU issuance rules and noted in section  REF _Ref203296139 \r \h 4.  When the RWA outputs the Collision PDU for the payload, it sets the Collision Origin field (new field for V-DIS) to the appropriate enumeration value, sets the Issuing Entity ID to the payload Entity ID, and uses an Event ID with itself as the Site and Application Numbers.  If the collision occurs with the RWA itself, then no second Collision PDU will be transmitted.Collision damage to the payload will always be modeled by the payload simulation application, even if the detection was performed by the RWA.  Collision damage to the sling and line will be modeled by the RWA, especially because the sling and line damage is reported in the RWA Entity State PDU as noted above.  This is also important should the RWA simulation application decide that the damage causes the sling load to fail and drop the payload (for example).Other Design Considerations: Transfer Ownership PDU / Attribute PDUIf the payload and RWA simulation applications support the Transfer Ownership PDU  REF _Ref170636800 \r \h [3]  REF _Ref188441213 \r \h [4], then that method provides an alternative to the Entity Offset and Dead Reckoning VP records.  In such a situation, the payload entity state would be entirely controlled and output by the RWA.  This output should ideally coincide with the RWA, but there’s still a possible gap in reception/processing, even if both entity states fit within a single Ethernet packet maximum transmission unit (MTU).  This means that there’s still a potential for dead reckoning errors such as rubber banding.  This approach would also be non-trivial from the aspect of handling all of the transfer ownership rules, including the retransfer of the payload and design and implementation of the internal modeling characteristics (although apparently partial transfers can eliminate some of that concern).  For the use cases of interest to V-DIS, a requirement for Transfer Ownership was determined to be less advantageous (this PDU is not currently implemented by any of the affected training systems).The Attribute PDU offers another choice for design of maintaining accurate dead reckoning of the payload.  The main benefit of the Attribute PDU versus the Transfer Ownership is that the RWA can guarantee that the Attribute PDU be coupled with its Entity State PDU (using the new Coupled Extension Indicator bit in the PDU Status field of the revised PDU Header).  REF _Ref188441213 \r \h [4] A benefit of the Attribute PDU versus the VP records is that it won’t bloat the RWA Entity State and all of the VP records could perhaps be consolidated into a single record.  Unfortunately, the data still must get transmitted and there’s even more overhead for the Attribute PDU than for several VP records (an additional minimum of 40 bytes plus the increased size of the record types and added record length fields).  The other downside to the Attribute PDU is that it would require adoption by receiving training systems of the PDU Status field.  This would generate work for not just the simulation training systems (and controllers), but also for any gateways.  The additional effects and translations to other protocols would be undefined.  For sling loads, we found it easier and better to adopt the VP record approach.Entity StateEntity CapabilitiesThis field of the Entity State PDU specifies the entity’s capabilities to perform certain tasks.  The bit-encoded Capabilities required for V-DIS sling load operations are described below.Sling Load Carrier (bit 5) – The Entity is able to carry a payload in a sling load.  The extended appearance record (if available) will identify the current sling load status. Entity Association, Entity Offset, and Dead Reckoning VP records (if available) will provide additional sling load details (such as payload).Sling Loadable (bit 6) – The Entity is able to be carried as a sling load payload.  The extended appearance record (if available) will identify if it is currently sling loaded. An Entity Association VP record (if available) will provide additional sling load details (such as carrier).Figure  STYLEREF 1 \s 3. SEQ Figure \* ARABIC \s 1 1 Attaching to HMMWV and ArtilleryPhoto used by permission of the U.S. Army Program Executive Office Simulation, Training and InstrumentationExtended EQ for PlatformsThe Extended Equipment field of the Extended Appearance VP record for Land and Air Platforms has been modified to include support for sling loads.  REF _Ref203293597 \r \h [5] The following table provides the revised, recommended equipment list for Land Platforms.Table  STYLEREF 1 \s 3. SEQ Table \* ARABIC \s 1 1 Extended EQ for Land PlatformsFieldBitsNotesSpoiler0not present / presentCargo Racks1not present / presentAuxiliary Power Plant Status2On/OffEmergency Vehicle Lights3not present / presentPadding4unusedSling Loaded5not sling loaded / sling loadedPadding6-15unusedThe following table provides the revised, recommended equipment list for Air Platforms.  Note that air platforms can be sling loaded; we recommend reserving bit 5 for other platforms.Table  STYLEREF 1 \s 3. SEQ Table \* ARABIC \s 1 2 Extended EQ for Air PlatformsFieldBitsNotesAuxiliary Power Plants Status0-2On/Off for power plants #2-4Sling Load Status3-4not present / empty / loadedSling Loaded5not sling loaded / sling loadedSling Load Damage6-7no damage / sling damaged / line damaged / sling or line destroyedPadding8-15unusedEntity Offset VP recordThe Entity Offset VP record contains the following fields:Record Type. This 8-bit enumeration identifies the record as an Entity Offset VP record.Offset Type. This 8-bit enumeration identifies additional details about the type of offset, such as whether it is a positional offset from the carrier origin, station location, or modified by the carrier.  It could also be an orientation assigned by the carrier (orientation is not an offset, the name of the VP record notwithstanding).   This enumeration is:Carrier Origin (0)Station Location (1)Position Modified by Carrier (2)Orientation Set by Carrier (3)Entity Association ID. This 8-bit unsigned integer identifies the ID of the Entity Association VP record to which this offset applies.  The Entity Association ID is the numerical value of the Entity Association VP record within the PDU (similar to the attached/articulated part ID). (Although articulated and attached part VP records require a 16-bit unsigned integer for the ID field, no part ID can ever be more than 255 due to the number of possible parts and the numbering scheme.)  REF _Ref175564311 \r \h [2]Entity Position Offset / Orientation. This field identifies the offset.  It will be represented by an Entity Coordinate Vector record (see 6.2.95(a) of Draft 13) for Entity Position Offset or by an Euler Angles record (see 6.2.34 of Draft 13) for Orientation.  REF _Ref188441213 \r \h [4]Table  STYLEREF 1 \s 3. SEQ Table \* ARABIC \s 1 3 Entity Offset VP recordFieldTypeRecord Type8-bit enumerationOffset Type8-bit enumerationEntity Association ID8-bit unsigned integerPadding8-bits unusedEntity Position Offset / Orientation96-bit recordDead Reckoning VP recordA side effect of the Entity Offset VP record is that a mounted or towed entity may not be dead reckoned properly (if its actual dead reckoning parameters are not equivalent to the carrier).  Thus, we provide the following Dead Reckoning VP record for linear velocity, linear acceleration, and angular velocity.  The Dead Reckoning VP record should not be used without an Entity Offset VP record (Entity Position Offset must be used for all dead reckoning algorithms and Orientation must be used for all dead reckoning algorithms requiring angular velocity). The Dead Reckoning VP record contains the following fields:Record Type. This 8-bit enumeration identifies the record as a Dead Reckoning VP record.Dead Reckoning Type. This 8-bit enumeration identifies the type of dead reckoning parameter included within this VP record.  This enumeration is:Not Specified (0)Linear Velocity (1)Linear Acceleration (2)Angular Velocity (3)Figure  STYLEREF 1 \s 3. SEQ Figure \* ARABIC \s 1 2 Carrying HMMWV and ArtilleryPhoto used by permission of the U.S. Army Program Executive Office Simulation, Training and InstrumentationEntity Association ID. This 8-bit unsigned integer identifies the ID of the Entity Association VP record to which this parameter applies.Dead Reckoning Algorithm.  This 8-bit enumeration specifies the dead reckoning algorithm.Dead Reckoning Parameter. This field identifies the dead reckoning parameter.  It is represented by a Linear Velocity Vector record (see 6.2.95 item c of Draft 13), Linear Acceleration Vector record (6.2.95 item b of Draft 13), or Angular Velocity Vector record (see 6.2.7 of Draft 13).  REF _Ref188441213 \r \h [4]Table  STYLEREF 1 \s 3. SEQ Table \* ARABIC \s 1 4 Dead Reckoning VP recordFieldTypeRecord Type8-bit enumerationDead Reckoning Type8-bit enumerationEntity Association ID8-bit unsigned integerDead Reckoning Algorithm8-bit enumerationDead Reckoning Parameter96-bit recordCollision PDUV-DIS recommends the usage of the Collision PDU (see 1278.1-1995 Sections 4.5.2.2 and 5.3.3.2) to communicate inelastic or low-fidelity collisions between entities or entities and other objects.  V-DIS neither recommends nor forbids the usage of the Collision-Elastic PDU (see 1278.1a-1998 Sections 4.5.2.3 and 5.3.3.3) to communicate high-fidelity elastic collisions between entities or entities and other objects.  We have not established a use case to warrant further investigation of the Collision-Elastic PDU.V-DIS modifies the issuance rules for the Collision PDU that allows for a “third party” simulation application to issue the PDU.  In the following example cases, the Collision PDU may be issued by a simulation application that is not the issuing entity for the Issuing Entity ID identified in the packet:Sling Loads.  The RWA models the payload’s position and orientation and includes them in its Entity State PDU (including dead reckoning).  It also, therefore, performs the collision detection of the payload with itself, other entities, and the environment.Mounted Entities.  Any entity that has other entities mounted on it, where the mounted entity position is relative to the carrier, also typically models the mounted entities position (however there are some cases where this is not always true, unlike for sling loads).  An example of this would be parked aircraft aboard an aircraft carrier that might be damaged by a landing aircraft.The Event ID of the Collision PDU uses the Site Number and Application Number of the issuing simulation application, even if that application is different than the application simulating the Issuing Entity ID.  If a third party simulation application outputs a Collision PDU for a collision between itself and that other entity, then only one Collision PDU will be transmitted for that specific collision instance.  If a collision occurs between an outside force (terrain or other entities) and the main entity plus one or more sling loads or mounted entities, then a separate Collision PDU will be transmitted for the main entity and each separate sling load or affected mounted entity.  For example, if an RWA carrying a sling load crashes into the ground, then at least two Collision PDUs will be generated, one for the RWA itself and one for the payload (additional ones could also be generated if the crew are modeled distinctly as mounted entities).V-DIS has modified the Collision PDU to utilize the padding field to identify the origin of the collision.  This will allow the simulation application to identify if the collision is on the entity itself, on an attached part, articulated part, or one or more of its carried/mounted objects.  This 8-bit enumeration is called Collision Origin.  The enumeration is given in the following table.Table  STYLEREF 1 \s 4. SEQ Table \* ARABIC \s 1 1 Collision Origin EnumerationValueDescription0Other1Collision with Attached Part2Collision with Articulated Part3Collision with Mounted Entity4Collision with Sling LoadThe normal operation, which is backward compatible, should be to set the field to Other (0).  This implies that the collision occurred with the main body of the entity and that the Site/Application of the Event ID is equal to the Site/Application of the Issuing Entity ID.  It may also have occurred with an attached / articulated part for a legacy system that does not support this field.  The other enumerated values may indicate that the Site/Application of the Event ID is not equal to the Site/Application of the Issuing Entity ID, such as for a V-DIS sling load operation when the payload collides with another entity or the environment.  If a collision occurs with part of the issuing entity that is both an articulated and an attached part, then preference in the enumeration should be given to the attached part.  If a collision occurs with multiple aspects of an entity (e.g. the main body plus one or more parts), then preference should be given in the order of the enumeration, specifically using Other (0) if the main body is at all impacted.  If a collision occurs with the entity and one or more sling loads or mounted entities, then as noted previously, multiple Collision PDUs should be generated.Sling Load Capability Datum RecordThe Sling Load Capability datum record (20030) contains the following fields.Payload Entity ID. This 48-bit Entity Identifier record indicates the entity ID of the payload (the object to be carried).Carrier Entity ID. This 48-bit Entity Identifier record indicates the entity ID of the carrier of the sling load (this is typically a rotary-winged aircraft that carries the payload).Current Weight.  This 32-bit floating point identifies the current weight in pounds of the payload.Current Mass.  This 32-bit floating point identifies the current mass in kilograms of the payload.Hook Type.  This 8-bit enumeration indicates the type of hook on the payload.  The enumeration is:Not specified (0)Single Hook (1)Forward Hook (2)Center Hook (3)Aft Hook (4)Tandem Hook (5)Lines Needed.  This 8-bit unsigned integer indicates the number of lines needed to support the payload.  All lines use the same hook type.Line Sling Geometry.  This 64-bit record identifies the geometry for each of the lines.  There will be one record provided for each line as identified in the Lines Needed field.Line Length.  This 32-bit floating point indicates the length of the line in meters.Hook Offset.  This 32-bit floating point indicates the offset from the hook to the payload in meters.Table  STYLEREF 1 \s 5. SEQ Table \* ARABIC \s 1 1 Sling Load Capability Datum RecordFieldData TypePayload Entity ID48-bit Entity Identifier recordCarrier Entity ID48-bit Entity Identifier recordCurrent Weight32-bit floating pointCurrent Mass32-bit floating pointPadding16-bits unusedHook Type8-bit enumerationLines Needed (N)8-bit unsigned integerLine Sling Geometry (N records)64-bit recordSummaryThe SE Core program is working to improve simulation interoperability across the PEO STRI virtual simulation programs.  We’ve presented a design intended to fully support sling load interoperability and, as a byproduct, improves collisions and mounted/towed entities.  Our work has leveraged significantly off previous proposals (lifeforms, Variable Parameter records, etc.), but we have also included a fair amount of original design and have attempted to tie it all together consistently.ReferencesFaulk, Mark, Richard Fuchs, Jeffrey Todd Littlejohn, Brian Kemper. “A Product Line Approach for the Virtual Domain.” 06F-SIW-041, SISO Simulation Interoperability Workshop, Fall 2006.IEEE 1278.1-1995: “IEEE Standard for Distributed Interactive Simulation – Application protocols”.IEEE 1278.1a-1998: “IEEE Standard for Distributed Interactive Simulation – Application protocols”.IEEE 1278.1-200XD13: “IEEE Standard for Distributed Interactive Simulation – Application protocols”.  Draft 13, under review by DIS PDG.Marrou, Lance, Mark Faulk, Terry Tyson, and Brian Kemper. “Enhancing Virtual Simulation Systems Interoperability through V-DIS.”  07F-SIW-076, SISO Simulation Interoperability Workshop, Fall 2007.Marrou, Lance, Mark Faulk, Stephanie Encarnacion, and Brian Kemper. “Lifeforms in V-DIS.”  08S-SIW-071, SISO Simulation Interoperability Workshop, Spring 2008.Author BiographiesLANCE R. MARROU is a senior systems engineer at SAIC in Orlando, Fla.  He is currently a lead in the SE Core Architecture & Integration program, developing V-DIS.  Mr. Marrou received his master’s degree in computer science from the University of Central Florida.  He has been working with simulation and training systems since 1992 and has more than 20 years experience in software and system design.PAT GARRITY is an electronics engineer for the U.S. Army Program Executive Office for Simulation, Training, and Instrumentation on the SE Core program. Prior to his involvement with the SE-CORE program, he worked at the U.S. Army Research, Development, and Engineering Command (RDECOM), Simulation & Training Technology Center (STTC) conducting R&D in the area of dismounted soldier  training and simulation, where he was the Army’s Science & Technology Objective Manager for the Embedded Training for Dismounted Soldiers program.  He earned his B.S. in computer engineering from the University of South Florida and his M.S. in simulation systems from the University of Central Florida.CINDI SLEPOW is the lead systems engineer for the Aviation Combined Arms Tactical Trainer for the U.S. Army Program Executive Office for Simulation, Training, and Instrumentation.  Ms. Slepow received her bachelor's of engineering degree in mechanical engineering from the University of Florida and her master's degree in instructional systems from the University of Central Florida.  She has worked in simulation and training for 15 years, with over 10 years experience in rotary-winged simulation. EMBED Visio.Drawing.11   EMBED Visio.Drawing.11  