C3 and ISR Modeling in ASESSCallie M. BellTeledyne Brown Engineering Company300 Sparkman Drive, MS 170Huntsville, AL 35805256-726-3316callie.bell@tbe.comKeywords:reusable components, user configurable, object oriented, C3, BMABSTRACT: The analysis of decision making processes is currently receiving significant focus due to an emphasis on new Intelligence, Surveillance, and Reconnaissance (ISR) assets and the issues associated with optimum utilization of these assets.  Decision making processes exist throughout most systems whether they involve a human decision maker or not.  For example, sensors can independently determine which targets to track, at what priority, with what pulse types, etc. without a Human-In-The-Loop (HITL).  Depending on the system, the level of human intervention required varies significantly though there seems to be a desire for systems to support more automation and less direct human interaction.  Additionally, when performing optimization or utility analysis to determine how best to employ a system, the analysis should be conducted without a HITL in order to support repeatability and analytical rigor.  However, the complexity of the rule sets can be daunting.  Similarly, since utilization of the asset is the issue, the rule sets must be easily modifiable and extensible to permit the evaluation of different rule sets.  At some point in the analysis, a HITL may need to be inserted into the simulation where appropriate to validate the analysis results.  Thus, in modeling these processes, HITL and machine decision making should not be specifically segregated but interchangeable, and the model should allow the user maximum control over the rule sets applied during execution of the simulation.  The decision making process as implemented in the Advanced Subsystem, Element and System Simulation (ASESS) supports all of these requirements by taking advantage of its model selection paradigm and a hierarchy of user definable decision making building blocks.  This paper will discuss how the ISR and Command, Control, and Communications (C3) have been modeled within the ASESS framework providing user configurable interoperability among system components with or without a HITL and reuse of the same models across all types of decision making processes.1. IntroductionThe overall objective in developing the Advanced Sub-system, Element, and System Simulation (ASESS) was to maximize the return on the investment in software development costs.  This has been accomplished largely through the development of a software framework that supports user selection of the models executed in a dynamic hierarchy.  The entire simulation is constructed using a model selection paradigm.  Each model or building block consists of multiple implementations of similar functions either because the physics of the component can be different, because the fidelity of the modeling may vary, or because multiple standards exist for simulating the function.  In a broader sense, multiple models exist simply to provide logical options from which the user can select to control the simulation execution.  As such, the model selection paradigm can be applied to simulation functions other than physics based modeling of defense system elements.  In fact, the model selection paradigm can be applied anywhere that user options should exist.  As a result, we have applied our framework successfully to a host of diverse simulation functions.  Most recently, we have applied the model paradigm to the development of decision making rule sets.  In applying the paradigm, our goal was to implement a highly user configurable decision making hierarchy that could readily address different Concepts of Operation (CONOPS) and Tactics, Techniques, and Protocols (TTPs).  Additionally, since some type of decision making occurs at all levels of a system with or without a HITL, we also wanted the models to be equally well applied to sensor and weapon systems as well as classical Battle Management/Command and Control (BM/C2) entities.After an introduction to the framework, this paper will discuss how the model structure has been developed and integrated into the existing ASESS framework to support decision making of all types. 2. ASESS FrameworkAs mentioned previously, the ASESS framework is developed around the central concept of reusable model building blocks.  As shown in Figure 2.1, there is an abstract Model class with common methods associated with all models.  Descended from the Model class is a set of abstract Model Type base classes.  These base classes have common methods associated with a specific type of model and encapsulate the basic functionality of a set of models.  For example, Earth is a model type that encapsulates all of the processing associated with modeling the earth and its environment.  The Earth base class defines the interface to all interactions with specific Earth models.  In addition to defining the common interface, it also contains common data parameters and methods.Descending from each Model Type base class is a set of concrete classes with specific implementations of that function. These are called Model Sub-Type classes.  For example two of the Earth Model Sub-Types are Spherical Earth and Oblate Earth.  Each implementation typically has a unique set of data requirements where virtually all data associated with any model is user definable.  By combining data with a model implementation selection, a model instance is created.  Typically, there are numerous instances of specific model implementations defined in the ASESS database file.2.1 Model HierarchyA hierarchy is dynamically created by making a Model Type an input selection of another model called the parent.  When this is done, it is the model base class or type that is specified by the parent model, not a specific model implementation.  Since the interface is the same, the parent model does not care which of the specific implementations of that model type is selected by the user.  The parent model only understands the interface.  The specifics are completely encapsulated within the specific model type implementations or Sub-Types.A set of common functions has been defined for each model type base class and include the following functions:Serialize (read)InitializeExecuteRestartPrintOutputThe interface to the Serialize and Print functions are common across all models and, as a result, are defined in the Model base class.  The Initialize, Execute, Restart, and Output functions are common at the Model Type base class level, and the interface to them is defined there.  Of course, the Model Sub-Type classes inherit from the Model type base class.In each Model Type base class, an interface to only one Serialize, Initialize, Restart, Output, and Print model is defined.  However, some models perform related but distinct functions when called and can support multiple overloaded Execute function.  Different or even the same parent model may use the multiple Execute interfaces as shown below in Figure 2.2.For example, the Gravity Model Type performs two related but distinct functions when calculating the gravity vector versus the undulation of the Geode defining mean sea level relative to the ellipsoid.  In fact, different parent models call the two Gravity Model Type Execute methods.  The Terrain Model Type requires the undulation calculation, but not the gravity vector; whereas, the Move Model Type requires the gravity vector to update the acceleration, but not the undulation.New Model Types can be created quickly and inserted appropriately into the model hierarchy through parent model selection(s).  Because the same basic methods are supported by all models, an existing Model Type is modified to create the new Model Type.  Then the interface is defined.  New Model Sub-Types are created by modifying existing Model Sub-Types again to support the rapid creation of new model implementations.  Since the interface is the same, no modification is required in the parent model(s) unless some modification to the interface is required.2.2 Model and Element ControlAs mentioned previously, ASESS is completely re-configurable.  Thus, the model selection process extends to the highest level.  This Model Type base class is named the Analysis Manager.  Figure 2.2 shows the architecture of model types beneath this model.  However, because not all models within a specific Model Type have the same child models, not every model in the base class actually requires a selection from each of these model types.  Thus, the hierarchy is very dynamic and changes based on the model implementation selected for each parent.The Analysis Manager Model Type defines the environment within which the analysis is conducted.  Its child models are global in nature and available to all other models as required.  For example, wherever a Distribution model type is selected, the Random Number model selected as part of the Analysis Manager inputs is called.  The use of the ASESS model selection paradigm allows ASESS to straightforwardly support an Agile FOM HLA Interface capability [1].  It also facilitated the development of an automatically re-configurable Graphical User Interface (GUI) and user selectable output of text files, charts and maps [2].The remainder of the model hierarchy defined in ASESS descends from the Element base class.  This class defines the elements that interact within the common analysis environment defined by the Analysis Manager Model Type.  All of the Analysis Manager implementations include a list of Elements to simulate.  Elements are nothing more than a specific hierarchy of models as shown in Figure 2.3.  The Element Manager Model Type includes the unique characteristics that distinguish different types of system components.The Element Manager Model type includes a child model type Rule Set, as shown in Figure 2.4, that defines not only the decision making criteria performed by the element, but essentially all of its functionality and is the main point of discussion for this paper.3. Rule Set ModelsThe Rule Set Model Type coordinates the processing of paired Rule and Action Model implementations selected from the Rule and Action Model Types.  By separating the two logically, we have been able to build very powerful user definable decision making logic while keeping the models themselves very simple.  The two basic Rule Set Model implementations allow the user to select a list of Rule-Action Model pairs independently.  The Rule Models are executed in the order defined by the user.  In the first Rule Set Model implementation, each of the Rule-Action Model pairs is executed sequentially.  When a Rule Model returns “True”, the paired Action Model is executed.  In the second Rule Set Model implementation, the Rule-Action Model pairs are executed sequentially, until the first Rule returns “True”.  The paired Action is then executed but any remaining Rule-Action Model pairs are not executed.  To support Element actions that are always taken, a Rule model implementation that always returns “True” has been developed.  Thus, this action can be included wherever appropriate in the Rule-Action Model pairings.  These two implementations support basic sequential versus parallel decision making.  Where necessary, additional Rule Set Model implementations to perform more complex user specific operations can be built.  However, our current requirements have not necessitated any additional Rule Set Model implementations.  The Rule and Action Model Types are discussed in more detail in the following sections.3.1 Rule ModelsIn developing some of the initial Rule Model Type implementations, there was a desire to allow the user as much flexibility as possible while avoiding a large number of Rule Models.  Thus, there was a desire for very low order rules to provide flexibility, combined with the ability to build complex rules easily and with as little confusion as possible.  We addressed these somewhat competing goals by building models at both levels and combining a large number of lower level models into just four models.  These models are grouped to handle the following types of data test parameters:Element or its target state data such as Time-Of-Flight (TOF), altitude, speed, mass, thrust, azimuth, latitude, etc.Element or its target discrimination information such as classification type, identification type, recognition types, friend or foe type either as perceived by the Element or the truth.Element or its target status information such as whether it is still active, engaged, detected, stopped, etc.State characteristics associated with the relative location of the element and a target such as the slant range, azimuth, grazing angle, scan angle, relative velocity, estimated miss distance, etc.Each of these Rule Models allows the user to select from a list of available parameters.  The user also selects what type of test is applied (>, =, !=, <=, etc.) and provides the test threshold value to compare against.  These four Rule Model implementations cover an extremely large number of possible simple rules.  It is also extremely easy to add additional test parameters as required.  Thus, these models address the requirements of flexibility for the user with very few Rule Models.To add flexibility in creating complex rules, another Rule Model implementation allows the user to provide a list of Rule Models and define how the rules are combined in a Boolean sense to result in a single overall decision rule.  The user can build extremely complex decision making logic using this implementation.  However, we have also built specialized Rule model implementations that logically combine test parameters commonly defined by users to enhance ease-of-use.  These include an Engagement Rule model that combines a miss distance test, a time to go test, and a probability of kill distribution model and threshold test to determine the success or failure of an engagement.  Additional specialized rules of this type combine sensor coverage parameters for different types of sensors and a Line Of Sight (LOS) criteria to simulate sensor coverage constraints.A different type of specialized Rule Model defines a set of coordinated events such as those associated with deploy events from a missile system.  These allow the user to combine related rules in a logical manner.Yet another type of Rule model uses the model selection capability.  An example includes the simulation of the reception of messages using the Communicate Model Type.  When a message is sent, this model determines whether or not the message was received successfully.3.2 Action ModelsAgain there was a desire to reduce the number of action models the user must choose from to limit confusion when building a rule set while also allowing the user to define complex actions.  This was accomplished mainly by using the model hierarchy and defining Action Models that simply execute child models of that type.  For example, an Action model simulates platform movement by allowing the user to select the appropriate Propagate Model.  Other Action Models of this type include deploy, allocate weapons, send message, classify, detect, etc.  Because there are multiple methods for simulating these actions, they are encapsulated in a model type.  The model type is selected as an input in the associated Action Model.  To allow the user to define a series of coordinated actions, an Action model implementation also allows the user to provide a list of Action Models that are executed in the order defined.Another key component in a truly dynamic decision making model is the ability to change the rule set applied as conditions change.  This is particularly important when simulating HITL responses that change as their perception of the world changes.  To support this functionality, an Action Model that changes the active rule set was developed.  To support this capability, the Element Manager Model allows the user to specify a list of Rule Set Models.  The first Rule Set Model defined in the list is initially active.  The Action model then specifies the name of the new Rule Set to apply so that multiple alternatives can be defined based on the rule (condition) that is satisfied.3.3 Message ModelsThe flow of decision making is itself an active analytical area.  As such, message traffic flow and the communication network is also an important part of any decision making model.  Again, using the model selection paradigm, we have very flexibly allowed the user to specify this flow of information.  Action models to send and process incoming messages have been included.  A Message Model Type allows the user to define to which system elements a message of this type is sent.  The Communicate Model type is a child model of the Message Models and identifies how the message is transmitted.  Thus, by combining a rule with an action to send a message of a particular type to a user defined set of other system elements again based on the message type, very specific and detailed information flow structure can be simulated.4. Application to an ISR Platform The decision making flow discussed above as part of the ASESS Rule Set Model Type hierarchy has been and is currently being used to evaluate the utility of ISR platforms to the commander.  The platforms have included both satellites and Unmanned Aerial Vehicles (UAVs).  The sensor payload types have included Electro-Optical (EO), Infra-Red (IR), Synthetic Aperture Radar (SAR), Moving Target Indicator (MTI), and Hyper-Spectral Imaging (HSI).  The emphasis of the analysis has been the expected information gathered and the resulting flow of it between battlefield elements.  In this case Rule Model instantiations (model selection combined with data) were developed to simulate the constraints in performing the tasking, collection, processing, and exploitation of the information paired with Action models that simulate these functions.  When the results of the action are transmitted to another element for further processing, a Message Action model instantiation identifying the entities to receive the gathered information is also defined.  Thus, we can simulate a system element that performs all of the actions with no message transmissions as easily as we could a system employing separate elements to perform each of the functions using message transmissions between following each action.  The details of the communication constraints is encapsulated in the Communicate model selected as part of the Message Model hierarchy as shown in Figure 4.1 for the Collect Decision Process.5. HITL To date, we have not incorporated a HITL into the decision making flow discussed above, but have proposed to implement this capability during FY01.  The ability to separate between the rules and actions is again pertinent.  The rules that simulate a HITL decision maker are now replaced with the HITL actually making the decision.  This function requires that the appropriate information be presented to the HITL to permit them to make a realistic decision whether this is interpreting an image or a processing a message.  Additionally, it requires that the HITL then have the capability to effect the appropriate action based on their decision.  The main issue is of course the simulation interface presented to the user.  We currently anticipate a new type of Rule Model implementation set that presents a specific set of information to the user based on their role or function.  This interface would include a set of selectable Action models that a user performing this type of role could take.  The user then provides the data appropriate for the Action Model selected as part of the interface rather than statically during scenario creation.  To include different HITL performing different functions, we plan to develop an appropriate HLA Interface to support the message traffic flow.  We expect the same paradigm to apply to a distributed environment where decisions flow into and out of ASESS from/to other simulations with or without a HITL.  In the Fall of 2000, we are scheduled to test this distributed message flow in a constructive HLA federation that includes a ground combat simulation.  We anticipate Message model implementations that use an HLA interaction rather than an internal interaction to transmit data between system entities.  Adding a HITL is the next logical step.6. Summary ASESS utilizes object-oriented concepts and design principles and a model selection hierarchy specifically to produce simulation objects that are encapsulated and reusable in multiple applications.  This paradigm has been successfully applied to the modeling of decision making processes either performed by a computer algorithm, by simulating a decision made by a HITL, or, in the future, by including a HITL.  We are currently developing additional Rule, Action, Message, and Communicate Models to support our on-going analyses.  Utilizing the existing Rule Set structure and extending it to include HLA interactions or a HITL should allow us to interchange a constructive simulation of a decision making hierarchy with a similar HITL capability.7. References [1]	Hill, C.: “HLA Implementation to Support Multiple FOMs” Simulation Interoperability Workshop, March 1999.[2]	Bell, C.: “An Architecture to Support an Extensible and Scalable Simulation” Summer Computer Simulation Conference, July 16-20, 2000.Author BiographyCALLIE BELL has been employed at Teledyne Brown Engineering since graduating from Clemson University in 1985 with a BS in Electrical Engineering.  She has completed 27 hours towards an MS in Electrical Engineering from the University of Alabama in Huntsville.  She has supported various Modeling and Simulation development activities ranging from high fidelity simulations of the Early Warning System radars to system level analysis models of both NMD and TMD systems.  Additionally, she has performed a number of analyses with these simulations.  EMBED Word.Picture.8   EMBED Word.Picture.8   EMBED Word.Picture.8   EMBED Word.Picture.8   EMBED Word.Picture.8  