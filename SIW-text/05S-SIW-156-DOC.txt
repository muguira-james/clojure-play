Hyperscenarios: Adding Domain Knowledge to Web-Enabled Simulations Dr. Reginald L. HobbsArmy Research LaboratoryBattlefield Information Processing Branch2800 Powder Mill RoadAdelphi, MD 20783, USAhobbs@arl.army.milKeywords:Scenarios, ontologies, HLA, XML, knowledge representation, narrativeABSTRACT:   Supporting the Global Information Grid (GIG) requires that Modeling & Simulation (M&S) systems share not only simulation objects, but also the context under which they were created and manipulated.  There has been discussion in the simulation community about the use of metamodels and mapping frameworks to supply this context.  A narrative metamodel can be used to capture domain information in a form that can be interchangeable between heterogeneous M & S applications.  This intermediate format, called a hyperscenario, is a computer readable scenario representation. The Hyperscenario framework is a narrative ontology, scenario grammar, and XML language implementation, SCML (Scenario Markup Language). This paper presents the results of an empirical study of hyperscenario-directed decision-making. A web-enabled maze simulation and scenario generation environment, called Aesop, was constructed to assess the improved decision-making with the availability of SCML-encoded simulation traces.IntroductionAs defined in the DoD Directive 8100.1, the Global Information Grid (GIG) is a globally interconnected set of information capabilities for war fighters, policy makers, and support personnel  REF _Ref94772438 \r \h  \* MERGEFORMAT [6]. One of the primary policy requirements on GIG assets is interoperability using common or enterprise-level communications and computing architectures. Modeling & Simulation (M&S) systems are a major asset of the GIG and therefore need to support interoperability. The High-Level Architecture (HLA) initiative is an approach that establishes technical interoperability. As stated by a leading M&S researcher, technical interoperability is a necessity but not sufficient for exchanging data at the system level  REF _Ref94930459 \r \h [17].  Meeting the challenge of M&S support for the GIG will require composable models at the conceptual level. To share higher-level information between simulations, it is necessary to describe the context under which they are manipulated in a predictable format.  Interoperability at this level requires meta-models, adaptive models, and common repositories  REF _Ref31023263 \r \h  \* MERGEFORMAT [16]. The Extensible Modeling and Simulation Framework (XMSF) will also incorporate M&S systems with the GIG by taking advantage of web services and existing technologies, such as the Extensible Markup Language (XML), Simple Object Access Protocol (SOAP), and the Web Services Description Language (WSDL), to building interoperable systems  REF _Ref94962692 \r \h [3]. Identifying ontologies that can be used to describe the domains being modeled by M&S systems and implementing those ontologies with web-enabled applications will make the GIG a reality.  A scenario ontology and its implementation as a language is a viable approach to sharing context at a conceptual level. Scenarios have been used in software engineering, cognitive science, and Human-Computer Interaction (HCI) to aid in decision making, comprehension, design, and training  REF _Ref94947845 \r \h [1].  A scenario is an instance of system behavior, a sequence of events and interactions that describe a specific case of system function. These scenarios are used largely as points of discussion in each of these cases.  Building new scenarios or analyzing existing scenarios orient the discussion in collaborative activities and increase understanding in single user tasks. Software developers use scenarios for rapid prototyping, computer simulations, and to assist system development  REF _Ref31044425 \r \h  \* MERGEFORMAT [4].  Scenario "what-if" studies refine system design and test requirements before implementation.  Identifying potential errors and design problems early in system evolution minimizes costly re-design.The claim of this research is that a computer readable scenario framework will assist decision-makers and system developers. The scenario ontology was defined by capturing concepts from different narrative forms. The resulting framework led to the creation of the hyperscenario grammar and specification language. A Hyperscenario is a scenario document containing link structures for navigation between scenario elements  REF _Ref94931226 \r \h [12]. The hyperscenario framework consists of the scenario ontology, scenario grammar, and an XML-based scenario language.The purpose of this paper is to present the hyperscenario framework and the results of an empirical study of scenario-directed decision making. The next section presents the basis for the scenario ontology and gives a brief overview of the hyperscenario framework and the Scenario Markup Language (SCML). Section three describes the web-enable simulation game, Aesop, used as the experiment platform. The result of the study, showing the statistically significant improvement in decision-making, appears in section four. Finally, the implications of the hyperscenario framework on M&S systems and interoperability are discussed. Scenario Ontology & Hyperscenario FrameworkThe elements that make up a scenario were derived by performing an extended narrative morphology (study of forms) to identify commonalities. Different forms of narrative, such as film editing, screenwriting, mental models, literary theory, and use cases were examined  REF _Ref48629296 \r \h  \* MERGEFORMAT [11]. The identified elements were constructed into the scenario ontology. An ontology is a formal explicit description of concepts in a domain of discourse, the properties of each of those concepts and attributes, and restrictions on those properties  REF _Ref94945943 \r \h  \* MERGEFORMAT [5]. An ontology is not just a conceptual model, but also rules and policies that describe elements within the model.The first step in developing scenario ontology is to identify the concepts and classes that make up the scenario domain. These entities are then expressed in a conceptual model showing their relationships.   REF _Ref94768252 \h  \* MERGEFORMAT Figure 1 is the scenario conceptual model depicted in the Unified Modeling Language (UML) notation.  UML was developed as a way to represent objects and classes in object-oriented designs  REF _Ref94947917 \r \h  \* MERGEFORMAT [9]. The choice of UML modeling notation is purposeful; each scenario component is a class or category of elements. Figure  SEQ Figure \* ARABIC 1 Scenario Conceptual ModelElements, such as scenario, episode, and events, and their relationships are part of the conceptual model. A simple natural language description of the conceptual model follows:         A scenario always has a goal and a cast, but may or may not have an inventory. A scenario is made up of either a collection of acts or episodes. A cast is one or more characters. An inventory is one or more props. Every character is either a role an actor or a prop. An archetype is a type of role. An act is a collection of episodes. An episode always has a goal and is either a collection of scenes or a collection of events. A scene is a single setting followed by a collection of events. An event contains a collection of actions.A fundamental building block of scenario is the action. An action is anything that happens in the context of the story. It could be communication between objects, physical movements, or any change of state.  Actions are the lowest-level components of a scenario.  Meaningful sequences of actions make up events, and predetermined lists of events are combined into episodes.  Episodes are goal-based objects, with the individual events occurring to support sub-goals.  Each scenario can be described as a succession of episodes (goals) that were either achieved or thwarted.  The Denotational semantics of an ontology are required to make the rules of the domain explicit. Denotational semantics are mathematical formal models that define the axioms, rules, and properties of a language. Because software languages represent abstract, non-physical systems, set theory and first order logic are the best techniques for mathematical representation. These representations are sufficiently formal as to allow analysis of the language. One of the more widely used formal method notations in language design is Z.Figure  SEQ Figure \* ARABIC 2 Z Schema Definitions for ScenarioZ (pronounced "Zed") is a model-based formal notation used to represent the state of a system. It is a notation for describing state variables, values, and operations  REF _Ref94947979 \r \h [15]. Z uses symbols from discrete mathematics. Z consists of paragraphs, which are structures containing the declarations and operations on state variables. The standard Z paragraph is called a schema. The declaration portion of the schema is used to associate a type with state components. The predicate defines the preconditions, operations, and post-conditions that are modeled by the schema. Each state schema is followed by a natural language description of the properties and rules of the schema.Language definition in Z begins with defining the Abstract Data Types (ADTs) that are present in the language. ADTs are essentially sets of elements; membership in a set establishes the elements’ type.  REF _Ref94817701 \h  \* MERGEFORMAT Figure 2 lists of some basic ADTs defined for the scenario ontology, expressed as Z state schemas.The scenario grammar developed from the model and state schemas is a Context Free Grammar (CFG). A CFG is a formal grammar where every production rule is of the form V = w, where V is a non-terminal and w is a string consisting of terminals and/or non-terminals. These grammars are context free in that a non-terminal V can be replaced with its rule w at any point.Figure  SEQ Figure \* ARABIC 3 Scenario Grammar in BNF REF _Ref94817638 \h  \* MERGEFORMAT Figure 3 is the scenario grammar represented in Backus Naur Form (BNF). BNF is a method for formal specification of languages that are CFGs. The left-hand side of BNF equations is non-terminals to be defined in term of other language elements. The right hand-side is a list of forms made up of terminal symbols and non-terminals. A BNF specification is a set of derivation rules, written as<symbol> ::= <expression with symbols>where <symbol> is a non-terminal, and the expression consists of sequences of symbols and/or sequences separated by the vertical bar, '|', indicating a choice. Any term that does not appear on the left-hand side of the equation cannot be decomposed further. The scenario grammar is a Look Ahead Left-to-Right (LALR) grammar, which can be validated using a parser generator, such as Yet Another Compiler-Compiler (YACC)  REF _Ref94948518 \r \h [7]. LALR grammars require that any input string can be parsed by looking ahead at most a single token. These grammars are deterministic in that selecting the next rule to apply can be uniquely determined by analyzing the preceding input and a finite section of the remaining input.Figure  SEQ Figure \* ARABIC 4 SCML Root Element DefinitionThe language implementation of the scenario grammar had to support two objectives: 1) representation in a form that is general enough to describe the structure of any scenario and 2) expressive enough to support different views of the data. The choice of a markup language supports both these objectives. Markup languages are languages that describe a document's structure using embedded tags, leaving presentation details to the capabilities of the structure-aware applications. Alternatively, a text formatting approach describes the appearance of the document by embedding special commands or control sequences, such as font style or margin settings. Most conventional word processing software applications use a text formatting approach. The problem with text formatters is that the encoding are proprietary and platform-dependent. Each software manufacturer describes a proprietary text formatting technique.The markup language technique best suited for implementing the scenario specification was XML. XML is a meta-language, a language for defining other languages. The developer creates a grammar for an instance of XML within a domain. The XML grammar of a language can be outlined in a Document Type Definition (DTD). It is a list of the elements, entities, notations, and attributes that are available to the language. It establishes the relationships between elements and how they can be nested within one another.The XML syntax and the scenario grammar have been implemented into the Scenario Markup Language (SCML). Scenario components appear as elements in the SCML DTD. SCML tags correspond to the concepts and rules from the scenario ontology. Rules for combining and nesting tag elements are derived from the associations, multiplicities, and cardinalities represented in the conceptual model.  REF _Ref94820002 \h  \* MERGEFORMAT Figure 4  REF _Ref94819972 \p \h  \* MERGEFORMAT above is the syntax for the hyperscenario tag, the root element for SCML.Aesop: A Web-based Maze SimulationThe application built to assess hyperscenario-directed decision-making is called Aesop.  Aesop is a story generator that assigns a plot structure to action traces output from a simulation. The simulation is an immersive, three-dimensional game representing the perspective of someone wandering through a maze. This viewpoint was chosen because it affects how the participants perceive and make decisions about the environment. The navigation through the maze is two-dimensional, involving forward/backward movement and changes in direction. Figure  SEQ Figure \* ARABIC 5 Maze Game User InterfaceAesop consists of source code and a database on an Apache Web server and the web client Graphical User Interface (GUI). The GUI contained three Java applets: 1) the maze game, 2) a session timer, and 3) a story browser. All three applets were embedded in the experiment web page and visible at the same time.  REF _Ref94956874 \h  \* MERGEFORMAT Figure 5 is a snapshot of the GUI as it appears in the Mozilla Internet browser. The top of the web page contains instructions for playing the game. The timer below the game window is coordinated with the both the browser and the game. During game play, the timer shows the time used, point total, and current number of items. Between game sessions, the timer counts down the time remaining to review the browser. The legend that describes the keystrokes for game navigation and interaction is below the timer. The game applet displays a three-dimensional maze drawn with texture-mapped images representing walls and corridors. Movement through the maze is controlled using the keyboard. There are four movements possible within game: move forward, move back, turn right, or turn left one square at a time. Within the maze, there are two texture-mapped avatar images, representing characters with whom to interact. Each avatar had a collection items for player selection. Points are assigned to a player’s running total for each item selected. The player starts each game session with a set number of points, which decreased at regular intervals during game play. The participant must decide which combination of items will improve the possibility of completing the maze.The story engine code, written primarily in Practical Extraction and Reporting Language (PERL), is responsible for taking player session data and determining the events, episodes and scenarios that occurred. The scenario elements were processed with simple pattern matching using Unix style search strings. XML Stylesheet Language (XSL) code was interpreted using an embedded Saxon XSL Transformation (XSL-T) processor to create alternate narrative forms of the sessions. The processor generates a coherent story of what happened during game play by interpreting player actions using domain knowledge of the maze.The main objective of the game is to successfully open the exit, which appears as a texture-mapped image of a closed doorway. There are several sub-goals that have to be accomplished to achieve the this overall objective: 1) Find a path through the maze, 2) Locate the avatars in the maze, 3) Select the appropriate items from each avatar, 4) complete the game within an allotted time, and 5) unlock the exit to complete the game. The player plays the game six times, attempting to determine which combination of actions and item selections will allow them to open the doorway.Decision-making ExperimentThe purpose of this experiment is to confirm the hypothesis that a computer-readable scenario view of information will improve decision-making. To serve as a proof-of-concept, an environment needed to be chosen that had: 1) a narrative basis, 2) differing levels of detail, 3) support for multiple perspectives and, 4) a decision-making aspect. It also had to be sufficiently self-contained as to describe a manageable number of actions, events, and episodes for analysis. The choice of a three-dimensional maze simulation supports these characteristics. It is the storytelling aspect of the simulation that makes it an appropriate choice for the scenario experiment. Movement through the maze and accomplishing tasks/sub-goals can be described from the standpoint of narrative.Two experiment groups, the Logfile group and the SCML group, are supplied with the same amount of information to begin game play. The display of the data captured for each group during game sessions differed. The difference in representation of the data is declarative versus narrative. A declarative view shows a session as a reproduction of the actions in the maze, just as they occurred. A narrative view is a plot-structured view of the data, representing a description of the events and episodes with an “educated guess” as to what was happening. Each group was presented the same amount of data, just structured into a different form. Both groups used the intra-game session data for planning the next game session.Empirical ResultsDecision-making is primarily a cognitive activity. The absence of direct contact with experiment subjects makes assigning quantitative values to decisions more subjective. However, searching for appropriate patterns in user game interaction can induce decision-making trends. The enumeration of good decisions for the maze domain supported quantifying user behavior.The most important aspect of evaluating this research is the establishment of a method to measure the relative improvement of the decision-making process. The Independent Variable (IV) is the presence of scenario-structured documentation. The experimental conditions that correspond to the IV are: 1) The SCML group had plot-structured log file information from game sessions; 2) The Logfile group did not have access to the SCML encoding, but received a conventional session log file. The Dependent Variable (DV) in this experiment is the decision-making of the participants during game play. There were several performance metrics that were tracked or calculated during game play that could be used to evaluate the decision-making patterns of the players. Decision-making can be inferred by examining how resources were used during the game, e.g., the number of moves, the amount of time used, the total points accumulated, etc. Solving the maze was based on the willingness of the participants to trade one resource for another; it increases the number of moves to frequently try and open the door, but doing so can give the player insight into possible solutions.Figure  SEQ Figure \* ARABIC 6 Average Doorway Attempts Per SessionThe number of attempts to open the doorway is an example indicator of the kind of strategy the participant was using to solve the game.  REF _Ref94865182 \h  \* MERGEFORMAT Figure 6 shows the average number of attempts per group, organized by game session. The number of attempts for the SCML group continued to increase through session four. At this point, the attempts decreased to the lowest value by the last session. Overall, the SCML group attempted the doorway more often than the Logfile Group. This is the most effective strategy for solution, because it allows the participants to narrow down choices by analyzing system informational messages. For example, when the system displays a message about the player’s item selection not containing enough items, a player can add items one at a time until that message is no longer shown when the door is tried.Although examining the number of wins by group is a method of gauging improved decision-making, it is not sufficient. It is possible for the decision-making of a group to get better, but not be reflected by the percentage of successful completions. Successfully completing a simulation game with pre-determined objectives is normally done by trial-and-error. Players of video games and PC simulations have to determine patterns in the game that allow them to complete individual tasks. Once these patterns are discovered, achieving the overall goal of "winning" the game is sped up. These patterns are the rules and policies under which the domain operates. The hypothesis that this experiment validated is that a computer-readable scenario view improves the decision-making process of the participants in this game simulation. The "A-ha" factor that exposes the underlying rules and limitations of the game can be achieved much sooner by analyzing a narrative view of the game.The evaluation of the experiment results was based on mapping the decision patterns in each session.  As with any problem-solving activity there are moves that constitute good decisions and bad decisions, given the context for the choice. The maze domain is sufficiently self-contained to anticipate the context of actions and determine when a decision maps to a useful strategy. Although there are an almost infinite number of actions that could be performed in a finite time during a game session, there are a finite number of decisions that could lead to a successful completion of the game. The list of good decisions was used during statistical analysis to compare the strategies between the two groups. The number of good decisions for each game session is determined. This decision count is then compared and analyzed to determine improvement. Most of the good decisions are intuitive; when the system gives the player a message involving a resource, the player modifies their behavior accordingly. In order to infer that the user made the decision purposefully, there were embedded rules for analyzing the pattern. For example, if the system told the user that they require an item from a specific avatar, the event denoting interaction with the avatar has to occur within a set maximum of moves. Figure  SEQ Figure \* ARABIC 7 Maze Game Decision Frequency DistributionsThe relative frequencies of decision-making are another view of how participants in each group fared during the experiment.  REF _Ref94959743 \h  \* MERGEFORMAT Figure 7 depicts histograms of frequency data for both experimental groups. A histogram shows the distribution of data as a cumulative effect. Each bin in the histogram is a count of the number of participants that fell with a certain range. For example, bin fifteen is a count of all players with between zero and fifteen good decisions. Referring to the Logfile group histogram at the top of the figure, it can be seen that there were more players who had fifteen or fewer decisions than any other category. This is also true for the SCML group. However, the cumulative affect is different based on the percentage of total players represented by the bins. Eighty-eight percent of the participants on the Logfile group had forty-five or fewer good decisions, while one-third of the SCML group had more than forty-five good decisions.The results of the experiment were not affected by the demographics or level of experience of the participants in either group. The performance metrics support the conclusion that the SCML group made better decisions about the maze environment at earlier iterations of the game play. There is also a statistically significant improvement in the overall amount of good decision-making for the group that used SCML-encoded information for planning. On the average, there were 30% more of the good decisions during the game from the SCML group.Implications for the GIG and M&S applications3D Maze Simulation ExampleThe hyperscenario framework, specifically the SCML language, has been validated by this experiment as an aid for decision-making. Prior to discussing the lessons learned that could be applied to M&S systems in general, it is necessary to highlight some of the constraints on applying the framework:Capturing stories in a domain may be difficult.   Subject Matter Experts (SMEs) have to define canonical stories. To be useful for decision-making and worth the trouble of SCML encoding, there needs to be a set of recurring stories or themes. Knowledge representation using narrative and SCML is an approach to capturing expert system knowledge - the problems and standard solutions within a domain.Handling simultaneous events and multiple perspectives could cause combinatorial overload. Parallel or mutually exclusive events would be difficult to represent in SCML. Applications that have to determine which of a myriad of events might have occurred at any given moment in a scenario would require some type of probability engine, such as a Bayesian probability network, to create reasonably accurate stories. Potential applications would also require a user feedback mechanism for “tweaking” the accuracy of generated scenarios. XML DTDs are weakly typed. When the development of the scenario ontology and hyperscenario framework first began, DTD representations for XML languages were the most mature of the techniques. However, DTDs suffer from several disadvantages, specifically, the lack of user-defined types. The loose typing of DTD-based languages makes it difficult to validate the form of the data in a document without additional overhead.Given these limitations, what are the implications for the GIG and M&S applications of the hyperscenario framework?A sufficiently described ontology can capture the context in a domain. The log files generated by maze game participants were given semantics because the Aesop environment used the scenario ontology for interpreting user actions.Web-enabled simulations can be the basis for training and problem solving activities. The participants in the maze game experiment were able to discover the objectives and the solution for the simulation with a minimum of information. The entire experiment platform was a web-enabled application, using standard web tools, such as Java Applets, Perl Scripts, XML XSL Transformations, Standard Query Language (SQL) calls to a Microsoft Access( relational database, and Unix-style pattern matching.A narrative view of information is a useful conceptual model for storing domain knowledge. When presented a narrative view of their actions, the participants were able to infer more about the maze domain and the implicit rules for interacting with the environment.Interoperability in the GIG is about sharing context through ontologies. In  REF _Ref94931726 \r \h [14], Horrocks describes ontologies as shared and common understandings of a domain communicated between people and heterogeneous application systems. In philosophy, ontology is defined as a theory about the nature of existence. Ontology can be considered as a set of concepts, classes, properties, and behaviors from a domain. An interesting analogy proposed by Horrocks is that ontologies are to schemas what Entity Relationship Diagrams (ERDs) are to relational databases. Ontologies and ERDs are used to model theory, in this case, domain theory and database models, respectively. XML-Schemas and relational databases are particular implementations of those theories.  Creating those domain theories are the responsibilities of Communities of Practice (CoPs) who would potentially share the information. CoPs is a phrase first coined at Xerox PARC in the 80’s to describe technical professionals who perform the same job, collaborate on shared tasks, or produce a similar product  REF _Ref94945278 \r \h [1]. At a recent workshop at NSF, several CoPs concerned with shared information, specifically defining the Federal Data Reference Model (DRM), gathered to discuss ontologies  REF _Ref94945633 \r \h [7]. The DRM attempts to accomplish for data at the US government level what the GIG proposes for information shared globally.The hyperscenario approach could be used to share information from a simulation environment to a Command, Control, Communications, Computers, and Intelligence (C4I) system.  The work is in determining a mapping of story elements from one domain to the other.  A characteristic that represents a single action in a simulation may be operationalized as several events in a decision support system, for example.  This is where the ability to add annotations, external documentation, and narrative structures become of vital importance.    The simulation environment contains objects with attributes and behaviors.  There may be some low-level context available within the system, but only what could be inferred based on the constraints of the software.  For example, if the simulation contained tanks or armored personnel carriers, it would be fairly straightforward to determine their location in the battlefield and their current mission status.  But the reason for their positioning and under what circumstances would not be apparent.Figure  SEQ Figure \* ARABIC 8 From Narrative to Decision SupportFor computer-generated forces to be examined at both the object level and the abstract level, there needs to be an intermediate form to encode behavior. The state of the simulation objects should be associated with the context under which it came about. This context can be introduced through the use of narrative. The narrative structure can be derived from simulation data to generate canonical stories from domain information. By using military doctrine to describe the scenarios that occur within a simulation, the lessons learned can be applied more directly to C4I systems. The scenario ontology can be used to capture semantics within computer-generated forces and encoded in SCML. Information from a simulation platform could then be directly mapped to an ontology specification, such as the DARPA Agent Markup Language (DAML) ( REF _Ref94943914 \h  \* MERGEFORMAT Figure 8). These scenarios are the basis for decision-making; course-of-action analysis, intelligent agents, training, lessons learned repositories, and systems development. DAML and Resource Description Framework (RDF) were developed by the Defense Advanced Projects Agency (DARPA) to support the creation of the Semantic Web  REF _Ref94946479 \r \h  \* MERGEFORMAT [13]. Tim Berners-Lee, the inventor of the Web, envisions the Semantic Web as the availability of resources to automated processes accomplished through semantic markup and metadata annotations describing content and functionality.  RDF is a standard to represent metadata for web resources using XML syntax. The RDF Schema language (RDFS) incorporates object-oriented concepts such as classes and attributes. Using RDFS syntax, DAML could represent ontologies and markup web resources with links between ontologies. The Ontology Web Language (OWL) is the successor to DAML.ConclusionThis experiment was designed to validate the impact of scenario-structured information on decision-making. The subjects for the experiment were volunteers with Internet access to the web-enabled maze simulation. Aesop was an implementation of a scenario generator, with each component written as Perl scripts or Java applets. The Aesop maze simulation supplied the action traces that were analyzed by the system to determine plot structure. The user interface allowed participants to play the game and perform planning for successive iterations. Players were randomly assigned to either the control group, who received direct log file information, or the SCML group that received scenario-structured documents for review. Experiment evaluation was based on comparing the affect on the dependent variable, decision-making, by the presence (or absence) of the independent variable, scenario-structured information. This research is an example of using an ontology and language framework to aid problem solving. In order to share semantically useful data as required by the GIG, ontologies containing conceptual models, rules, axioms, and grammars are necessary. The hyperscenario framework contributes an ontology that includes a conceptual model of scenarios, a formal mathematical model, a context-free grammar, and a language implementation of that grammar. BibliographyAnderson, J. S. and Durney, B. “Using Scenarios in Deficiency-driven Requirements Engineering”. Proceedings of IEEE International Symposium on Requirements Engineering, San Diego, CA. 1993.Brown, John Seely and Newman, Susan E. “Issues in Cognitive and Social Ergonomics: From Our House to Bauhaus”. Human-Computer Interaction, Special Issue on Context in Design. Volume 9(1), pages 3-36. 1994.Brutzman, D., Morse, K., Pullen, M. and Zyda, M. “Extensible Modeling and Simulation Framework (XMSF): Challenges for Web-Based Modeling and Simulation”. NPS, Monterey, CA. 2002.Carroll, John M. editor. ”Scenario-Based Design: Envisioning Work and Technology in System Development”. John Wiley  & Sons, Inc., New York, 1995.Crubezy, Monica and Musen, Mark. ” Ontologies in Support of Problem Solving”. Stanford Medical Informatics, Stanford University, CA. 2002.Department of Defense. “DoD Directive 8000.1 Global Information Grid (GIG) Overarching Policy”. ASD (C3I). September 19, 2002.Donnelly, Charles and Stallman, Richard M. “Bison Manual: Using the YACC-compatible Parser Generator”. GNU Press. Boston, MA. 2002.Federal CIO Council. “Toward Coherence In All Things Ontological: Making Sense Together”. Collaborative Expedition Workshop, National Science Foundation, Arlington, VA. December 2004.Fowler, Martin and Scott, Kendall. “UML Distilled: Applying the Standard Modeling Object Language”. Addison-Wesley. 1997.Gustavson, P., Zimmerman, P., and Turrell, C. “Capturing Intent-of-Use Meta-Data for the Conceptual Model – A Key to Component Reuse”. In Proceedings of the 2003 Fall Simulation Interoperability Workshop (SIW), Orlando, FL., September 2003.Hobbs, Reginald. “Sharing Stories: Using Narrative for Simulation Interoperability”. In Proceedings of the 2003 Spring Simulation Interoperability Workshop, Orlando, FL April 2003.Hobbs, Reginald. “An XML-based Framework for Battle Planning Simulations.” In Proceedings of the 2000 Winter Simulation Conference, Orlando, FL, 10-13 December 2000.Horrocks, I., Patel-Schneider, P. F., and Van Harmelen, F. “Reviewing the Design of DAML+OIL: An Ontology Language for the Semantic Web”. Presented at 18th Nat. Conf. on Artificial Intelligence (AAAI~2002). 2002. [Online]. Horrocks, I., Klein, M., Fensel, D., and Van Harmelen, F. “The Relation between Ontologies and XML Schemas”. Electronic Trans. on Artificial Intelligence. 2001. [Online]. Jacky, Jonathan. “The Way of Z: Practical Programming with Formal Methods”. Cambridge University Press. 1997.Tolk, Andreas. “Avoiding another Green Elephant – A Proposal for the Next Generation HLA based on the Model Driven Architecture”. In Proceedings of the 2002 Fall Simulation Interoperability Workshop, Orlando, FL September 2002.Tolk, Andreas and Muguira, James. “The Levels of Conceptual Interoperability Model”. Proceedings of the 2003 Fall Simulation Interoperability Workshop, Orlando, FL., September 2003.Author BiographyREGINALD L. HOBBS is a research computer scientist in the Battlefield Information Processing Branch of the Army Research Laboratory.  Dr. Hobbs has over twenty years of experience in the computer industry. Dr. Hobbs has a master’s degree and doctorate in Computer Science from the Georgia Institute of Technology. He has research interests and experience in the areas of software development methods, re-engineering, scenario-based design, XML for knowledge representation, and interactive narrative. 	