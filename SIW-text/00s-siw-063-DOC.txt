FOM Agility and SNEDavid MacannucoPeter WickisDeborah WilbertWayne CivinskasLockheed Martin Information SystemsAdvanced Simulation Center37 North AvenueBurlington, MA 01803(781) 505-9500dmac@lads.is.lmco.com, pwickis@lads.is.lmco.com , dwilbert@lads.is.lmco.com, wcivinsk@lads.is.lmco.comKeywords: FOM Agility, EnvironmentABSTRACT:Previously, we have presented work that shows how the use of the Agile FOM Interface (AFI), a FOM agile RTI middleware layer, within JSAF can reduce the cost of supporting multiple federations with JSAF.  However, this work has concentrated mostly on using FOM agility with the standard warfare objects and interactions, such as platforms, aggregates and detonations.  This paper discusses the use of FOM agility in the context of SNE data.  It explores how some of the fundamental differences between the more standard warfare data and environmental data affect the requirements of a FOM agile implementation and how the AFI was successfully used to map the environmental elements of the JSAF SOM to those of the Envirofed FOM.IntroductionThe Environment Federation project is a DMSO-sponsored effort, which is examining the use of the SEDRIS Data Representation Model (DRM) and Data Coding Specification (DCS) in a run-time simulation federation.  The hypothesis is that using the unambiguous syntax and semantics from SEDRIS to describe the runtime data exchanges will make individual environment federates more broadly re-usable in the DoD modeling and simulation community.  The project also served as a useful demonstrator of the scope and nature of dynamic environment and terrain modeling capabilities that are available today. Since a goal of the Environment Federation (Envirofed) was to produce more broadly re-usable federates, there was motivation to incorporate FOM agility into federates. FOM Agility is the term used to describe the ability of a federate to participate in different federations using different FOMs without requiring application code changes.We have developed an RTI middleware solution called the Agile FOM Interface (AFI) [1] that provides FOM agility.  The AFI had been integrated with JSAF as part of past efforts and the results have been presented in several papers [2,3,4].  These previous efforts have been primarily focused on the standard military tactical environment: vehicles, units, detonations, etc.The Envirofed project provided an opportunity to exercise the AFI in the context of Synthetic Natural Environment (SNE) data to determine if the concepts of FOM agility could be applied to SNE data.The FederatesFollowing is a brief description of each federate participating in the Environment Federation, as shown in Figure 1.Figure 1-1 Environment Federation CompositionThe Environment Data Server (EDS) is the owner and distributor of the ocean, atmosphere, and space data within the federation.  Acting primarily as a publisher of data, the EDS serves dynamically changing values for key environment data elements to the rest of the federation.  In this effort, the Global METOC 98 database was used as the data source.JSAF is an entity-level combat simulation capable of receiving and reacting to dynamic environment and terrain data.  JSAF owns and models all of the simulated entities (e.g., tanks, aircraft, ships) in the federation.  These entities can cause changes to the terrain and can be affected by the dynamic terrain and environment. For example, increased liquid water content near the earth's surface (AKA fog) will reduce visibility and cause moving vehicles to slow down.Similarly, the creation of craters or ditches in the terrain will hamper vehicle movement.The Dynamic Terrain Simulation is a suite of capabilities that when taken together provides a consistent, causally-correct representation of the terrain and its features to the rest of the federation.  The DTSim accepts incoming data about the environmental processes and the actions of simulated entities that may cause changes in the terrain (e.g., detonation of ordnance against a bridge).  It then computes the impact(s) of those events on the terrain and its features and provides that data back to the rest of the federation.ModStealth is a three-dimensional display tool that can accept dynamic terrain data, environment data, and data about simulated entities and render an appropriate 3-D visualization of the battlespace.  A ModStealth exhibits similar interests in terrain and environmental data as virtual simulators and thus is a useful low-cost surrogate for that class of federates.At the start of the Envirofed project, the JSAF federate already incorporated the AFI, however work was needed to complete its use in the context of SNE data. It was natural to leverage this effort to adopt the use of the AFI into the ModStealth and Dynamic Terrain federates as well. The EDS federate, which has less need to be FOM agile, did not adopt the AFI during the timeframe of the Envirofed project.This paper discusses the issues we encountered handling SNE data in FOM agile HLA federates and shows what modifications were made to the AFI to provide support for SNE data.Object ModelsThis section provides a brief overview of some of the more relevant aspects of the Envirofed FOM and the JSAF SOM. Since the ancestors of the Envirofed federates existed as DIS environmental simulations, a brief discussion of the advantages of a HLA Object Model versus the Environmental PDU is provided.The Envirofed FOM   The Envirofed FOM contains a rich set of environmental objects and is available through the Object Model Library (OML).  The interested reader can peruse the full copy of the FOM using any of the standard tools.  The diagram below shows  a subsection of the object class hierarchy table and is provided as reference for the discussions of the remaining sections of the paper.  Table 2.1-1 Envirofed FOM Object Class HierarchyAtmosphereAtmosphere_3DHazeHaze_UTMHaze_GDCWeatherWeather_UTMWeather_GDCAtmosphere_2DPrecipitationPrecipitation_UTMPrecipitation_GDCSurface_HazeSurface_Haze_UTMSurface_Haze_GDCFogFog_UTMFog_GDCCloud_LayerCloud_Layer_UTMCloud_Layer_GDCRadar_DuctRadar_Duct_UTMRadar_Duct_GDCSurface_WeatherSurface_Weather_UTMSurface_Weather_GDCAtmosphere_0DUniform_AtmosphereAtmospheric_Obs_LocalOceanOcean_3DOcean_Volume_GDCOcean_2DMixing_Layer_GDCOcean_Surface_GDCOcean_0DOcean_Surface_ObserverOpen_Ocean_ObserverLittoral_ObserverThe JSAF SOM SNEJSAF supports a wide range of environmental objects.  A full description of the environmental capabilities available in JSAF can be found in [5].  Below is a subset of the Object Class Table and is provided as reference for the discussions in the remaining sections of the paper.  Table 2.2-1 JSAF SOM Object Class HierarchyNetEnvironmentWeatherUniformWeatherObservedWeatherCombicFlareSeaDustEnviroFed versus DIS Environmental PDU.Predecessors of the federates which participated in Envirofed originally transfered atmospheric and oceanic SNE information using the DIS Environmental and Gridded Data PDUs. While these PDUs were part of the DIS standard,  they served as "kitchen sinks," organizing in complex structures all the SNE information which did not pertain to traditional land-based warfare.The Environmental and Gridded Data PDUs could be used to transfer the same basic SNE information. In fact, early producers and consumers of SNE information could be configured to use either format. However, there was no common standard for specifying the exact semantic content, units, and representation for this SNE information.SEDRIS standards provide proven, standardized, non-proprietary mechanisms to unambiguously specify the semantics and encoding of any SNE information. For the Envirofed effort, information that had previously been identified by fieldnames in the Environemntal PDU or by ill-defined enumerations in the Gridded Data PDU were specified using SEDRIS Attribute Codes (SACs) and SEDRIS Classification Codes (SCCs). These SACs and SCCs are reflected in the Envirofed FOM, where SNE information is now organized into classes and attributes rather than PDU structures.This SEDRIS standardization should allow future potential producers of environmental information to easily publish SNE information in a format that will be accepted by the consumers. Further, the organization of the information into attributes of classes and the adoption of the HLA architecture will make it easier to mix-and-match available producers of SNE data, since different producers could own different environmental attributes.It has always been evident that mixing sources of SNE information is useful for providing a rich, tailored environment. For example, one might want to provide baseline SNE from historical data, while manually overriding a specific SNE attribute, such as visibility, to determine differences in outcome as that variable is changed. Another reason multiple producers may be needed is that some federates may specialize in publishing particular attributes and a suite of complimentary federates may be required to provide complete SNE coverage.In the past, achieving this flexibility required architectural support within the SNE information consumers. Now, much of this flexibility can be provided transparently to the federates through the use of HLA attribute ownership.  Thus, the use of the HLA architecture in conjunction with standardized SEDRIS specification of SNE data provides a good foundation for flexible federate configurations using the Envirofed FOM.AFI Challenges of SNEOne of the challenges of the Envirofed effort was to establish if the FOM agility constructs that have worked well for the military tactical environment (MTE) would also work for the types of objects and interactions found in the SNE.  The answer to this question is a qualified yes.  For example, the AFI's converter architecture works equally well for converting units or enumeration values in the MTE as it does in the SNE.  However, in other cases the SNE provided a unique challenge for the AFI.  This section discusses two of these issues and shows how they are addressed in an improved AFI.Singleton Objects and Object Atomicity MappingsOne of the capabilities of the AFI is to map several external objects and interactions into a single internal object.  This is called an object atomicity mapping.  For example, a FOM may specify that a radio shall be represented as a radio object with message interactions, while the SOM may specify that a radio is represented by an object with a message attribute. Figure 3.1-1 An Object Atomicity MappingThe AFI is able to link the object and interaction via a reference parameter in the interaction (Associated_Radio in the example above).  This reference parameter contains the RTI Name (federation-wide unique identifier for the object) of the radio that is associated with this message.  The AFI requires that such a link parameter be present in order to perform an object atomicity mapping.  This requirement however was at odds with certain aspects of the SNE representation, which we shall call singleton objects.Most object classes are instanced many times during a federation execution.  For example, there can be numerous tanks, smoke clouds or FWAs.  Certain objects in the SNE however are instanced only a single time during  a federation execution.  These singleton objects in the Envirofed FOM include:… Open_Ocean_Observer… Littoral_ObserverThese two objects map to the JSAF SOM NetEnvironment.Sea class.  Unlike the radio and message example, the link between the two ocean objects is implicit rather than explicit.  The littoral object has no reference attribute that points to the open ocean object because one is not needed.  Therefore the AFI has no means to link the two external objects into the single internal object.  Rather than modifying the FOM to include a link attribute in the Littoral Ocean object class, the object atomicity mapping capabilities of the AFI had to be enhanced.Figure 3.1-2 Failed MappingThe enhancement that was made is called singleton linking.  It relies on the fact that only a single object instance of the types to be linked can be present.   This enables the AFI to use the class of the object as the linking criteria.  Figure 3.1-3 Ocean Mapping with Enhanced AFIThe concept of object atomicity mappings is important for both the MTE and the SNE.  The initial implementation relied on the assumption that a link attribute would be present.  This assumption is not valid for the singleton SNE objects.  The simple addition of class based linking for singleton objects solved this problem without requiring major changes to the AFI.Gridded DataSome environmental effects are concentrated in one area, such as a dust cloud or light source.  The attributes of such objects contain single value data and are similar to the MTE object classes.  Within in Envirofed, these objects are called 0D objects.  Other environmental data consists of values that can theoretically be sampled at any point within the simulated region.  The common practice, which Envirofed adheres to, is to represent field data as grids of samples in one, two, or three dimensions.  These gridded data types are another example of a unique SNE feature that provided a challenge for FOM agility.  In this case, we solved the problem in a somewhat unsatisfying fashion and we propose an improved approach, which will be implemented in the next year.Most of the 0D or uniform objects were easy to map from the Envirofed FOM to the JSAF SOM, since they were single values with direct equivalents that only rarely needed a converter applied to them.  The 0D objects cleanly fit into the existing AFI design, since they are very similar in structure to the Platform and other warfare objects.  For example the Envirofed class Atmosphere.Atmosphere_0D.UniformAtmosphere maps to the JSAF SOM class NetEnvironment.Weather.UniformWeather.  Multidimensional grids are much more difficult.  Not only does the position and axis format have to change, but the individual data points could potentially need to be transformed as well.Our initial approach was to create special converters for performing gridded conversions.  The special converter contains the code to map the grid as well as the each data element in the grid.  Figure 3.2-1 shows an example of a mapping in the EnviroFed.Figure 3.2-1 Example Gridded MappingThis solution is not particularly satisfying since it requires a new converter for each gridded object class in the Envirofed FOM.   It would be desirable to be able to use the same converters that operated on the 0D attributes on the data elements of the grid.  One of the most important approaches used in the AFI is to provide data driven converters.  These converters allow a single piece of code to be parameterized to provide a wide range of converters.  For example, the AFI has an enumeration converter that allows the user to specify the mapping between enumeration values in a file.  Thus as the AFI mapping developer encounters new enumerations, all that is required is that the mapping be entered into a file.  No code needs to be written, compiled and debugged.    Advanced Gridded ConverterAn appealingly elegant solution would be to allow the gridded data converter to perform the same kind of arbitrary conversions on its data points that the AFI does for individual attributes.  The GriddedConverter would become kind of a 'higher-order converter,' which accepts other converters as parameters; somewhat like the higher-order functions available in some programming languages.  In this way, the rich set of converters available for single valued attributes could be applied to gridded attributes.The GriddedConverter will be implemented by allowing the mapping developer to include the name(s) of a single value converter to apply to all of the grid cells.  The GriddedConverter can than apply this conversion to all the data elements of the grid.  Figure 3.2.1-1 shows how the previous example would look with the new converter.  Instead of a completely new converter class, the gridded converter is configured with the appropriate single value converters (represented by the black dots) for the various attributes of the precipitation class.    Figure 3.2.1-1 The Gridded ConverterThe simplest secondary converters to use will be those corresponding to 1 to 1 invertible functions, such as linear transformations between units of measurement.  For example, converting a temperature grid from Celsius to Fahrenheit can be done with the standard LinearConverter.In some cases additional inputs or outputs could be needed.  For instance, the Envirofed FOM represents wind velocity as two independent grids of scalar values, which correspond to the magnitudes of pre-defined orthogonal vectors (North and East).  JSAF expects a single grid of 3 dimensional values, so an inverted 1 to 2 converter can do the necessary repacking.  Additional outputs could be used to allow a federate to subdivide incoming grids, although JSAF does not currently accept such input. To improve accuracy when converting attributes that depend on the precise positioning of the data point, the converter can be made to accept one additional input representing the location of the corresponding grid cell.  For example, the UTM and GCC coordinate systems do not allow linear transformations between them, since GCC is orthogonal but UTM is relative to the rounded surface of the earth. To convert a wind speed from UTM to GCC velocity, you must know what point on the earth to perform the operation relative to.  For a large grid it would be inaccurate to use the same location for all data points, so the converter should be able to optionally accept a second input of the position of that grid cell. Other higher-order converters, such as an array-mapper, can also be created in a similar way and may be useful as a generic component for future federations.  By reducing the amount of new converters that need to be developed, these higher order converters will ease the development of mappings for gridded data types. Conclusions and Future WorkWe were able to demonstrate, through the Environment Federation experiment, that the FOM Agility concept in general, and the AFI implementation specifically, can be successfully used in federations that require a dynamic representation of the SNE. In this case the producers of the SNE data, EDS and the Dynamic Terrain Simulation, published environment data in a form that was incompatible with the environment models contained within the consuming federates, JSAF and ModStealth.  The AFI was used to convert the published data into a semantic form that both JSAF and ModStealth required. Some of the unique features of the SNE data caused us to rethink certain aspects of the AFI in order to fully support Envirofed.  However, these updates are improvements to existing capabilities in the AFI and have been accomplished without having to rework the architecture.As it happens, the AFI did not contain within it the converter classes needed to handle SNE data conversion.  Several new converters (approximately ten) were developed within the AFI to perform the needed conversions.  Most of these converters dealt with issues related to gridded converters.  The new GriddedConverter presented in the paper should reduce the need for many of these new converters.   Additionally, developing a new converter is in general preferable to modifying the models for several reasons.Does not effect other users of the software baselineDoes not cause the software baseline to fragmentGenerally simpler.The question remains "Does FOM Agility serve a useful purpose for producers of Environment Data?"  Since the RPR FOM v2.0 will provide the community with an SNE object model as part of its charter, we can expect to see developers of dynamic SNE producing federates adopt portions of this object model in their individual SOMs.  Once this occurs, FOM Agility will have no real function for these federates.On the other hand, developers of federates that consume SNE data do not have the same luxury.  In particular, the coming integration of M&S federations with real-world C4ISR systems will require M&S federations to adapt to the syntax and semantics used by the operational systems. FOM Agility may prove invaluable in enabling the integration of M&S federates with C4ISR systems.References[1] D. Macannuco, B. Dufault, L. Ingraham: “A FOM Agile Framework,” Simulation Interoperability Workshop, 98F_SIW_025, September 1998.[2] D. Coffin, D. Wilbert, J. Aaronson, W. Helfinstine: ”Developing a SOM for ModSAF,” Simulation Interoperability Workshop, 98F_SIW_024, September 1998.[3] D. Macannuco, D. Coffin, B. Dufault, W. Civinskas: “Experiences with a FOM Agile Federate,” Simulation Interoperability Workshop, 99S_SIW_052, March 1999[4] D. Wilbert, D. Macannuco, W. Civinskas: “A Tool for Configuring FOM Agility,” Simulation Interoperability Workshop, 99F_SIW_116, September 1999[5] G. Lukes, G. Goodman: “Synthetic Environment and Lessons Learned from the STOW 97 ACTD,“ Simulation Interoperability Workshop, 98S_SIW_097, March 1998.Author BiographiesDAVID MACANNUCO is a Senior Staff Software Engineer at Lockheed Martin Information Systems Advanced Simulation Center (LMIS-ASC). Dave is currently leading several HLA-related efforts, focusing on HLA architectures and the transfer of HLA technologies into mainstream simulation programs. Dave was also the lead developer of the Agile FOM Interface. Prior to working on HLA-related projects, Dave was involved with ModSAF development for the DARPA STOW and ADST programs.PETER WICKIS is a Staff Software Engineer at LMIS ASC.  Peter graduated from Boston University with a B.S. in Computer Science.  Peter is currently working on HLA and SNE related tasks at ASC.DEBORAH WILBERT is a Senior Staff Software Engineer at Lockheed Martin Information Systems Advanced Simulation Center (LMIS-ASC). Deborah is currently implementing the SOM-to-FOM mapping tool described in this paper. Her experience in distributed simulation includes other HLA-related design and development efforts, environmental simulation, CGF development, scalability research, protocol development, and C4I simulation.WAYNE CIVINSKAS is the Manager of Systems Engineering at Lockheed Martin Information Systems Advanced Simulation Center (LMIS-ASC). His responsibilities include research and development of architectures and technologies that support distributed simulation. Wayne's current focus is on transition of distributed simulation technologies from the prototype stage to full-scale engineering development and production programs.RadioObjectMessageCall_SignOthers ….Maps toOthers ….RadioObjectCall_SignOthers ….MessageInteractionMessageAssociated_RadioAFI LinkFOMSOMSOMFOMNo AFI Link!Others ….LittoralObjectBreakerTypeOthers ….OceanObjectSOMSeaStateMaps toOthers ….SeaObjectSeaStateBreakerTypeFOMAFI Singleton Class LinkOthers ….LittoralObjectBreakerTypeOthers ….OceanObjectSeaStateMaps toOthers ….SeaObjectSeaStateBreakerTypeSingle ValueConverters to be applied to grid elementsGriddedConverterAtmosphereAtmosphere_2DPrecipitationPrecipitation_UTMGriddedWeatherFOMGriddedPercipRateConverterAtmosphereAtmosphere_2DPrecipitationPrecipitation_UTMGriddedWeatherFOMSOMSOM