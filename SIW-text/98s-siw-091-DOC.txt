Security Features of the JSIMS DesignDr. Tony ValleSPARTA, Inc.12443 Research PkwySuite 400Orlando FL 32826407-380-0076 x102tony_valle@sparta.comKeywords:JSIMS, security, HLA, federationABSTRACT: Operating in a simulation environment which contains information at multiple levels of classification presents significant design challenges. In this paper, we discuss the key features of the JSIMS architecture and design which have been chosen to provide support for multiple levels of security while still maintaining a composable system and a consistent synthetic battlespace.OverviewSecurity for any complex system depends sensitively on the architecture and design of the system. JSIMS is a simulation engine, but also is a “stimulator” for real world C4I devices used by a training audience. As such, it contacts potentially sensitive information maintained by those C4I systems—sensitive information which must be protected in the interests of national security. Understanding the security design for JSIMS requires a fairly in-depth understanding of the architecture, which we endeavor to provide in this section.In subsequent sections we analyze these components of the JSIMS architecture in more detail, highlighting the security features and expectations for each. We conclude the paper with a description of the mechanisms proposed to maintain a consistent synthetic battlespace in JSIMS which is operating simultaneously at multiple levels of classification. The description of the architecture given below must necessarily be limited by space considerations. The interested reader is invited to review the most recent JSIMS SSDD, which is maintained on the world wide web at www.jsims.com or www.jsims.mil. This is the definitive JSIMS system architecture and design document.Security Driving RequirementsSecurity is critical to the success of JSIMS and security considerations appear several times in the JSIMS SSS. The key, driving considerations are described below, setting the context for the security design discussions to follow. For further information on the detailed requirements, the interested reader should consult the JSIMS SSS, available on the world wide web at www.jsims.com or www.jsims.mil.Performance-Based ModelingA number of JSIMS requirements are related to the need to have a simulation which realistically portrays the capabilities of U.S. systems with relatively high fidelity. This suggests that realistic performance algorithms and data must be used in the models, and this information is almost always classified at the collateral SECRET level or above. In addition, JSIMS is required to be able to use real-world information concerning unit deployment, operational plans and tables of equipment to initialize a scenario. This information is often classified TOP SECRET. At the very least, then, we should expect that a realistic JSIMS exercise will contain classified models or data.Realistic Intelligence PlayIn exercises conducted to date which are not specifically directed at intelligence operators, realistic intelligence play is seldom found. The training audience may not have access to products that they could reasonably expect to see in the real world, and the intelligence components of the simulation may not have access to simulated entity information necessary to model the capabilities of intelligence assets. JSIMS seeks to address these issues and provide the audience with realistic intelligence products and to ensure that tasking is given appropriate attention. This imposes some particularly stringent requirements on the JSIMS system since the algorithms, data, and products of national intelligence systems will usually be sensitive compartmented information (SCI), subject to a special set of security requirements.Unclassified ExercisesNot all of the potential users of the JSIMS system have the infrastructure necessary to support fully classified exercises. For these JSIMS functional capabilities, there is a need to compose an unclassified exercise, at least in part. This requires either the use of unclassified models and data (potentially at odds with the need for performance-based models) or some sort of downgrading capability that will allow the unclassified portion of the exercise to be influenced by classified processing. Such a system is referred to as on with “multiple levels of security” and must be distinguished from a “multi-level secure” or MLS system. As currently defined, JSIMS has no MLS requirement at IOC.Caveats and ReleasabilityIn addition to security categories (e.g. UNCLASSIFIED, SECRET, SCI), a JSIMS exercise may have to deal with multiple caveats or releasability considerations. This is especially true when coalition exercises are composed since a bewildering array of releasability constraints then exists involving the potentially numerous nationalities participating in the exercise. At the very least, we expect that “US-ONLY” information will be involved whenever performance-based models are used.JSIMS Hardware ArchitectureJSIMS is designed to run on multiple platforms distributed over local and wide area networks. The hardware configuration for a particular exercise is composable, just as is the exercise software. To satisfy this requirement, the JSIMS design includes the notion of generic sites and enclaves which must be specified at exercise composition time.Security EnclavesA central feature of the JSIMS hardware design is the concept of a security enclave. An enclave is a collection of JSIMS hosts which is secured at the level of single level (i.e. SECRET) and which is isolated from other JSIMS enclaves through the use of guards or air gaps. An enclave need not be a single location or site, as long as some secure wide-area technology exists which can carry information protected at the level of the enclave. Enclaves exist throughout the JSIMS life cycle, including pre-exercise and post-exercise phases. Enclaves should be regarded as “system-high” computing cells operating at the enclave classification level. An enclave potentially contains information carrying caveats as well, and there may be distinct enclaves carrying information at the same level, but with different releasability caveats.Generic JSIMS EnclaveThe diagram below ( REF _Ref407696607 \* MERGEFORMAT Figure 1-1) shows the generic JSIMS segment (the basis for a security enclave) taken from the JSIMS Hardware Requirements Specification. As shown, a single enclave might contain numerous JSIMS hosts computers, exercise controller workstations, members of the training audience with their C4I systems, and trusted guards. In general, a JSIMS exercise consists of multiple instances of this diagram, linked together by a wide area network, secured through encryption or isolation.Figure  STYLEREF 1 \n 1- SEQ Figure \* ARABIC \r 1 1 JSIMS Generic Segment ConfigurationFORTEZZA / KRYPTON TechnologyOne technology that may simplify the difficulty of dealing with releasability constraints is FORTEZZA. FORTEZZA is a hardware-based encryption and key distribution system, encoded into industry-standard PCMCIA cards which can be accessed by almost any computer system. While FORTEZZA is designed for use with sensitive but unclassified information, a sister product, KRYPTON, can be used to transport classified information. This technology can be used to protect, through encryption with distinct keys, information with various caveats which is physically transported over the same network link. A sample application of this technology is described in another conference paper, 98S-SIW-020, and this work may be transferred to JSIMS as appropriate.JSIMS Software Architecture REF _Ref407696942 \* MERGEFORMAT Figure 1-2 below shows the JSIMS software architecture. In discussing the security features of the design, we will be concentrating primarily on the infrastructure components developed by the I&D contractor. This does not mean that there are no security implications for MSOs or external system interfaces, but that most security-significant (and mature) portions of the design are located in the infrastructure.Figure  STYLEREF 1 \n 1- SEQ Figure \* ARABIC 2 JSIMS Software ArchitectureJSIMS Object ServicesThe critical component of the JSIMS software architecture is the JSIMS Object Services or JOS layer. The is responsible for maintaining exercise initialization and runtime information in the Common Data Infrastructure (CDI), reflecting state updates, as controlled by Data Distribution Management (DDM) and Interest Management (IM) through the Run Time Infrastructure (RTI), and handling Time Management for the simulation. The JOS does most of its work through the use of an Object Management Framework (OMF) which is a collection of cooperating C++ classes that provide services to the higher layers through inheritance. The JOS is “semantics-independent” which means that it maintains distributed synchronization of Federation Objects (FOs) without knowing what the content of those FOs might be. This is essential to achieving the composability of JSIMS without adding unmanageable complexity.Proper appreciation of the JOS is essential to understanding the functioning of the JSIMS architecture. Unlike a traditional library of services which is called though an API, the OMF is a true, object-oriented framework. In JSIMS, objects function properly not because they make the appropriate toolbox calls, but because the key interoperability is encoded in the base classes from which all JSIMS objects inherit. Federation ObjectsAll the observable phenomena on the synthetic battlefield—entities, buildings, bridges, weather phenomena, detonations, electromagnetic signals, etc.—are described through the use of Federation Objects or FOs. The totality of FOs in JSIMS is organized into the JSIMS Federation Object Model (JFOM). FOs inherit from the OMF and thereby gain access to key services in the JOS. FOs reside in a Distributed Object Database (DODB) which is one component of the CDI on each host platform. Events in the synthetic battlespace are handled through the update of appropriate FOs and reflected to other hosts using the information management techniques described below.Mission Space ObjectsMission space objects (MSOs) are the pieces of the JSIMS system which make it a simulation. MSOs own FOs and thus control the update of objects which constitute the synthetic battlespace. MSOs never communicate with each other directly, but interact instead through the use of FOs representing the intermediate events or activities in the battlespace. For efficiency, there are certain non-observable activities that are simulation artifacts which are handled through a conventional API between certain MSOs. An example is Line-of-Sight calculation which is done through a common services component and involves direct interaction between a platform MSO and an environment MSO. Note, however, that any observable phenomenon which would influence this activity, such as the release obscurants, would be handled through the use of FOs. JSIMS Modeling and Simulation Resource RepositoryModels and parameter data used to initialize them, results from previous exercises, scenarios currently under development, and the metadata used to support JSIMS composability are all maintained in the JSIMS Modeling and Simulation Resource Repository, or JMSRR. The JMSRR provides value to JSIMS by organizing, indexing, intelligently querying, and translating information stored in a variety of formats distributed in various libraries around the world. One key current operating assumption is that the portion of the JMSRR which contains indexing and metadata only will be strictly unclassified. If this assumption is not valid, there could be a substantial increase in cost and effort required to compose a JSIMS exercise. The process of exercise composition will be described in section  REF _Ref407524697 \n 6.3.1 Event-Driven SimulationJSIMS is fundamentally an event driven simulation which allows for optimistic time management within high speed computing clusters. This means that the only globally consistent time for the simulation is the Global Virtual Time (GVT) which is the time of the latest event which has been committed everywhere the simulation. GVT is the time used to synchronize JSIMS with real time systems, including the training audience C4I devices and displays. Since events prior to GVT are always globally committed, there is no possibility of rollback being induced on external real time systems.The event driven nature of the simulation does require a change in perspective, however. Since different threads of executions can be at different logical times, no globally consistent definition of “now” exists. This means that attributes for FOs can only be accessed when an associated simulation time is included as an argument. The mechanism which makes this work is the predictive contract—a natural extension of the DIS remote entity approximation—and is discussed in more detail in section  REF _Ref407525201 \n 3.1.1Integrated Common Object ModelThe Integrated Common Object Model is the central interoperability and composability mechanism for JSIMS. It consists of three parts, the Common Modeling Framework, the JSIMS Federation Object Model, and the Composition Metadata provided with the MSOs.Common Modeling FrameworkThe Common Modeling Framework consists of two distinct components, the Object Management Framework and the Military Modeling Framework. Together, these frameworks provide the majority of the functionality contained in the JSIMS infrastructure.Object Management FrameworkThe OMF is a collection of cooperating C++ classes which together provide the mechanisms for supporting reflection of JSIMS objects across a local or wide area network and maintaining a consistent synthetic battlespace. The OMF is largely based on a pair of GOTS packages known as TEMPO and Thema. TEMPO provides the basic mechanisms for implementing a shared-memory based parallel discrete event simulation (PDES) engine with optimistic time management. Thema adds a thin layer of classes above this which serve to insulate more domain specific classes from the details of PDES simulation. In addition to network reflection (using the RTI), the OMF provides such features as automatic rollback, incremental state saving, and support for the paradigm used in the design for controlling MSO-FO-MSO interaction.Military Modeling FrameworkThe MMF provides the basic classes which are of direct value to the JSIMS simulation developer. MMF classes inherit from the OMF and so are capable of operating in a PDES simulation automatically. The MMF classes bring the general-purpose PDES engine embodied in the OMF into the realm of military simulation by defining base behaviors for things like platforms, buildings and other structures, and battlefield events. MMF classes also act as a home for certain FOs that are expected (at a minimum) to be supported by the associated classes. For instance, platforms would be expected to have a well-defined position and velocity so the Platform class would have an associated SixState FO, inherited by every subclass of Platform.JSIMS Federation Object ModelThe JFOM is the complete collection of all FOs used in JSIMS. In HLA terms, it is not a FOM at all, but is more analogous to the SOM for JSIMS when viewed as a federate. Some confusion in terminology is inevitable in light of the fact that JSIMS reuses many important HLA concepts for its internal architecture (but note that JSIMS is not required to be internally HLA-compliant). JSIMS Federation Objects fit into two major classes, those corresponding to battlefield entities, and those describing interactions between them.Entity Public FacesThe most familiar FOs are those that constitute the public face of a battlefield entity. This type of FO will carry attributes and methods which describe the visible state and control functions of an synthetic object. Since JSIMS objects are “end-to-end” (i.e. they persist throughout the exercise life cycle), these FOs also include initialization and historical interfaces as well as runtime interfaces.Interactions as FOsObservable simulation events such as detonations or signal emissions are also captured as FOs. These have attributes and methods just as other FOs do, including initialization and historical interfaces. Using FOs for interactions allows the same distribution and security mechanisms to be used consistently for both battlefield entities and the effects they produce. It also ensures that the JFOM acts as a complete public description of the phenomena contained in the synthetic battlespace, allowing developers to operate largely independently while still maintaining interoperability.Composition MetadataThe last component of the ICOM is the collection of metadata which is used to define and constrain the allowed combination of model compositions in JSIMS. The metadata is produced in a structured Highly Abstract Language for Objects (HALO) and stored in the JMSRR. The only item of interest from a security perspective here is that we assume for now that the metadata for JSIMS is entirely unclassified. Note that this does not imply that the models themselves or their parameter data need be unclassified.Information ManagementInterest ManagementInterest management refers to the mechanisms used by an MSO to inform the infrastructure of those FOs with which it interacts. In JSIMS, interest management expressions are generated by MSOs and passed to the JOS when they are initialized. The expressions are associated with Trigger Views—essentially callback functions—which are invoked when any FO in the interest expressions changes (i.e. is created or updated). Trigger views are the mechanism that MSOs use to gain control of the thread of execution and perform modeling activities. In general, MSOs do not periodically gain control, but do so only in response to activities covered by their interest expressions. Two features of FOs which enhance the flexibility of this approach to interest management are predictive contracts and resolution thresholds.Predictive ContractsA predictive contract is an extension of the concept of a DIS remote entity approximation or dead reckoning algorithm. It is not restricted to linear prediction, nor in fact is it restricted to position or velocity attributes. In general, an FO has a predictive contract for every attribute it makes available. Each query on an attribute value must have an associated simulation time and the predictive contract is invoked to reply to these queries. Predictive contracts may have expiration times, so a query may result in a response that the request is beyond the temporal validity of the FO. When the infrastructure attempts to advance the simulation time beyond the time limit of an FO, the controlling model will be activated with a special “self-inspection” trigger view so that it can update the predictive contract for that FO.Predictive contracts are completely general. For example, a flight of aircraft which is tasked with a complete mission may have the entire mission coded into the FO. That is, a query on attribute values at any time in the future will result in a legitimate response. If nothing in the controlling model’s interest expression causes a change in behavior, the single FO creation and distribution would be the only network traffic generated throughout the life of the exercise for the associated FOs. Thus predictive contracts, when well-implemented, can greatly reduce the runtime bandwidth requirements.FO ResolutionIntelligence collectors often present special problems in simulation as they often require information about a large number of simulated entities. This can cause difficulties if the information flow required to accommodate sensors exceeds the network or processing bandwidths of the simulation hosts. One approach which addresses this issue is to provide the capability to subscribe to information updates at different levels of resolution. We have included in the JSIMS system design the ability to associate some small number of resolutions (or tolerance) thresholds with an interest expression. This allows the infrastructure to use one channel to maintain FOs to a high degree of accuracy, and another to maintain them at a lower (more coarse) degree of accuracy. Subscribers may then select the low or high bandwidth channels as they require. Distribution ManagementData distribution management (DDM) refers to the techniques used to transfer information about changes in the state of simulation objects to only those hosts which need the information (i.e. have expressed an interest). Fundamentally, there are only three approaches to DDM—information may be routed based on its source, its destination, or its content. A comprehensive review of a variety of DDM techniques can be found in [1] and will only be briefly discussed here. Content-Based DDMMany existing simulation designs base their data distribution on the content of the data being passed. For example, geographical DDM in all its many forms essentially depends on the value of a particular field (position) contained within the data update being passed around the network. Similarly, distribution based on entity class or PDU type are content based. One important characteristic of this type of DDM is that the infrastructure must be at least partially aware of the semantics of the data being passed. The goal on JSIMS is to provide an infrastructure which is semantics-independent, which makes content-based DDM ill-suited.From a security perspective, content-based DDM introduces a number of difficulties when simulating national assets. Expressions of interest regions based on geography and entity class are frequently classified, because they reveal the capabilities of the sensors. The alternative of subscribing to large regions to mask the capabilities leads to excessive bandwidth consumption which impacts the entire simulation system.  Destination-Based DDMDestination-based DDM operates in a way which is closely analogous to “physics-based modeling”. Using this approach, MSOs express interests that are detailed descriptions of what they can detect or interact with. Other models which produce information that matches these interests must publish to distribution channels which contain all the interested MSOs. There are some purely technical difficulties in establishing a multicast scheme which works this way, but the security implications are problematic for the same reasons as outlined above.Source-Based DDMSecurity implications (and some engineering efficiency concerns) have led to the proposed use of source-based DDM on JSIMS. This approach requires that MSOs register the complete set of FOs that they publish with the JOS. Each source (host or processor) receives a set of multicast addresses on which these FOs are published. The channels may be based on FO fidelity as described in section  REF _Ref407694214 \n 3.1.2, or they may be based on FO classes such platforms or signals.Interest expressions on remote hosts are collated by the infrastructure and converted into subscriptions to multicast channels. Since the channels are based on the sources of the information rather than the geography of the synthetic battlespace, there is no need to reveal the capability of intelligence sensors to gain access to the required information flows. Ownership ManagementEach FO must have an owner, but the owner may not be same for the life of the FO. Ownership management refers to the techniques used to transfer the control of an FO from one MSO to another. Ownership management provides an important component of the approach used on JSIMS to maintain a consistent synthetic battlespace across enclaves at different levels of classification. Using this mechanism, classified models can seize control of unclassified FOs and so have an effect on the unclassified battlespace without revealing the underlying classified data or algorithms. An example of how ownership management is used this way will be described in section  REF _Ref407696266 \n 6.3.2Sequence of ControlAs discussed in section  REF _Ref407697290 \n 3.1, MSOs gain control of execution through trigger views attached to interest expressions that they register with the JOS.  REF _Ref407697505 \* MERGEFORMAT Figure 3-1 shows a pair of interacting MSOs and the flow of control associated with the interaction.Figure  STYLEREF 1 \n 3- SEQ Figure \* ARABIC \r 1 1 MSO Interaction Flow The sequence of activities is as follows:The PLT Model on Host B updates one of the FOs it owns through functionality it inherits from the MMFThis causes the JOS to schedule an update view on the DODBThe update view runs and notifies the DDM of the changeThe DDM passes the FO update over the appropriate channels through the RTIThe RTI on Host A receives the updateThe IM on Host A notices the update and schedules the trigger viewThe F-16 Model is invoked by the trigger viewThe F-16 Model takes action, perhaps causing the creation of a Detonation interaction or updating its own FOsOnce an FO has been created, ownership may be transferred to another MSO. This allows for the possibility of functionality such as a Combat Server shown on Host A above, or transfer of control to an MSO running in another enclave.LabelingSince JSIMS will frequently require information to be carried at different levels of classification, or with different caveats, it is important to have a mechanism in place which respects classification labels. The primary mechanism for the interchange of data between JSIMS hosts is FOs, so most of the description below applies to their labeling approach. There may also be cases, however, in which other information such as control messages, acknowledgments, and collected data must be labeled so that it can be passed out of an enclave.In general, the approach outlined below assumes that most if a JSIMS enclave will be operated in a single “system-high” configuration. Those special information flows which can be classified by policy (such as FOs and control messages) can be generated by downgrading from these system-high sources. The downgraded information is then labeled and secured against alteration before being passed to the guards which protect the enclave.Labeling PolicyThe current JSIMS design calls for assigning a single classification to each FO in advance of an exercise and that this be done by appropriate security personnel in conjunction with the exercise developers. Allowed ranges and enumerations for FO attributes are specified and become part of the rule base to be used for downgrading FOs. This approach ensures that the downgrading rule base is static for a single exercise and done by humans rather than by software (the software is then required merely to enforce the rule base). The partitioning of FOs becomes an important design feature which supports this policy. By strictly segmenting FOs, it becomes possible to assign different classification levels to different components of the entity’s public face (i.e. unclassified position and classified signature). If FOs must exist simultaneously at different classification levels, strict partitioning requires that this is handled by creating distinct FOs which refer to the same physical property. For example, if there is a need for aircraft to have both an unclassified and a classified radar signature, there will be two different FOs, one corresponding to each classification level (and possibly carrying the same physical attributes).DowngradingBecause FOs are strictly partitioned and labeled by policy rather than content, it is possible to construct a static rulebase which can be used to downgrade and verify FOs. An FO’s classification level for a given exercise is determined uniquely by its class. Since the rulebase contains both the classification level and the allowed ranges and enumerations for all attributes, software which enforces this rulebase can be used to produce downgraded FOs that can be passed from higher enclaves to lower enclaves.It is important to note that this process sits on the boundary between MSOs and the infrastructure. That is, MSO are not explicitly required to perform downgrading operations, but the software that does must have access to the semantic content of FO attributes in order to check ranges and enumerations. This makes the security infrastructure “semantics-dependent”, but in a tightly controlled fashion.Label IntegrityThe requirements for guards which link the JSIMS enclaves are difficult to satisfy, requiring relatively high bandwidth and the ability to pass binary formatted data. One feature of the security design which significantly reduces the complexity of the guard is the generation of “trusted labels” in the downgrading process. Downgraded FOs are labeled and cryptographically sealed using a strong signature algorithm to ensure the integrity of the FO content and tracability back to the host which generated them. Ensuring that labels maintain their integrity as they pass out of the downgrade process allows the development of guards which verify label and FO integrity without having to check the content of the FOs. This greatly simplifies the guard rulebase and allows for the high bandwidth needed to support JSIMS.GuardsConnecting networks which exists at differently levels of classification is often done through guards and in the absence of a well-developed multilevel secure infrastructure, this is the approach envisioned for JSIMS. At least two classes of guards have been identified which meet different requirements and use different approaches, each well-suited for a portion of the JSIMS design. A so called “external guard” will be used to permit collateral intelligence products to be produced in a compartmented enclave and delivered to the training audience. An “internal guard” will be used to permit the high-rate flow of simulation traffic between enclaves.Intelligence ProductsConsiderable attention has been devoted to the production of guards which enable collateral intelligence products to be passed out of compartmented enclaves. Often, these products are in the form of structured text messages (perhaps in USMTF format) or properly downgraded imagery. JSIMS does not attempt to duplicate this effort. Existing technology and guards that are suited to this task will be used to provide intelligence products to the training audience through the external system interfaces. In general, these data flows will not pass through the JOS though tags representing, and potentially interfering with, the flows will be handled through the JOS so that they can be influenced by events in the synthetic battlespace. Guards such as RADIANT MERCURY are expected to be well-suited to this part of JSIMS.JOS GuardThe majority of the simulation traffic between JSIMS hosts is carried in the form of FOs (or their updates) which are in binary representation and will in general be a high-bandwidth flow. The labeling policy described above ensures that this information flow is well-defined in classification level and secured against alteration. This allows a guard to be developed which can verify the integrity of the label without requiring semantic information. This makes possible a small, easily verified rulebase for the guard which in turn permits a relatively high bandwidth. Today, no guard with the properties required by JSIMS has been produced. It is hoped that the security design will permit the implementation of the guard technology required within reasonable resources limitations.ConsistencySimulations which operate at more than one level of classification potentially have difficulty with logical consistency. Normally this occurs because some effect or event can occur in one enclave, but another. JSIMS design allows some degree of flexibility in accommodating these effects. It is possible, for instance, to have classified and unclassified FOs corresponding to the same physical event. But there are limits to the effectiveness of this technique. Derived data, for instance, cannot be accommodated in this way. In order to maintain a logically consistent simulation, the JSIMS design assumes that the FOs are organized in such a way that there is a single, consistent set of observable phenomena which constitute the synthetic battlespace. Observable PhenomenaA synthetic battlespace is an abstraction and subset of the real world. An observable phenomenon is any information which is freely available in the synthetic battlespace either in the FOs, or which is derivable from them. For example, from a collection of successive updates in the position and velocity of an aircraft, it may be possible to derive its maximum rated g-load or its specific excess power available. In general, anything that could be “seen” by an omniscient observer on the battlespace is an observable phenomenon.“Only One” BattlespaceThe JSIMS design relies on the policy of a single synthetic battlespace to enforce consistency. By definition, the observable battlespace is defined to be the set of all observable phenomena which are at the lowest level of classification in the exercise. In other words, if there is an unclassified enclave present in a JSIMS exercise, the set of all unclassified observable phenomena (which includes all unclassified FOs) constitutes the battlespace.An implication of this definition is that it is not possible to have an unclassified enclave in an exercise which has classified observable phenomena. In other words if a performance parameter such as climb rate, maximum speed, or maximum g-rate is classified at some level, the exercise must be entirely classified at this level or above. This is necessary to ensure that there is only on battlespace—that every enclave in the exercise has a consistent view of the entities and events in the simulation.Illustrative ExamplesThe following sections demonstrate how the features of the JSIMS security design can be used to compose, conduct and review an exercise with multiple levels of classification.Exercise CompositionExercise composition involves the JMSRR, which acts as an intelligent index into models and data which are distributed in libraries over a wide area network. The JMSRR operates by generating complex queries and network agents which are deployed to remote libraries to fetch the necessary models and parameter files. Because of this, it is difficult to envision a relatively simple set of rules that would permit guards to act on potentially arbitrary queries and agents and allow them to be passed out of a secure enclave. The JSIMS design assumes, therefore, that in the pre-exercise phase the classified enclaves in the JSIMS system are isolated by air gap with no guards in place.An exercise can be developed collaboratively without guards in place as long as the metadata stored in the JMSRR is unclassified. Exercise developers can access the JMSRR from JSIMS hosts located outside the secure enclaves. References to classified models and parameter data are handled through unclassified code words. At the completion of the planning activity, the JMSRR operates and resolves all possible references to information stored in unclassified libraries. The information collected is then written onto a high density medium and carried into the classified enclave (or passed in through a one-way guard). Lifecycle applications are executed on this template inside the enclave to complete the resolving of metadata references. If the exercise involve more enclaves, the process is repeated at each security level—resolving and collecting as much information as possible at each level before passing the results up to the next level. At the completion of this process, the exercise has been loaded and is ready for initialization.Classified ProcessingTo demonstrate the features of the design which relate to exercise execution, we will consider a vignette involving an F-117 an its interaction with a surface radar. The only FOs we need to consider are the SixState (position and velocity) of the F-117, the radar signature of the F-117, an interaction FO representing the emission of a radar signal and subsequent detection (or non-detection) of a target. There are two enclaves in the exercise, unclassified and collateral SECRET. We assume that the unclassified F-117 MSO inherits from a FixedWingAircraft class in the MMF which has an FO for radar signature named RCS. In the classified enclave there is a classified extension to the F-117 which maintains a classified radar signature FO named SRCS (for SECRET RCS). Note that while RCS and SRCS refer to the same physical quantity, they are entirely distinct FOs.In constructing the exercise we assume that the SixState, RCS, and Detection FOs are designated unclassified while the SRCS FO is designated SECRET. These rules are loaded into the infrastructure in the SECRET enclave, allowing MSOs there to generate the unclassified FOs. Properly labeled unclassified FOs can then be routed to the guard which can verify their integrity and pass them to the unclassified enclave.With this structure, it would be possible for both the unclassified and classified F-117 models to operate independently and consistent, each using the value of RCS that was designed to be used with that model. A difficulty arises when the aircraft interacts with the radar. Because the unclassified RCS is incorrect (since the actual RCS of the F-117 is classified), it is possible that an unclassified radar model would successfully detect an F-117 when it should not have. If the exercise designers can tolerate this lack of fidelity, nothing further needs to be done. Consistency requires that the unclassified radar models be run in the classified enclave, but nothing else needs to be done.If the designer desires greater fidelity, however, the detections must be done using the classified SRCS for the aircraft. One possibility is that all the radar models can be run in the classified enclave, generating unclassified Detection FOs with the correct result, generated using the SRCS, which are then passed through the guard to the unclassified enclave. Another possibility is to permit some MSO in the classified enclave to assume control (using ownership management) of Detection FOs involving the F-117 whenever they are created. The classified MSO could then “override” detections that would otherwise be incorrect when generated by an unclassified model using the RCS FO. Classified ReviewExercise review is conducted by coordinating independent AAR lifecycle applications operating in each enclave. Since each host in an enclave must have collected FOs corresponding to all the interests for all the MSOs in that enclave, the DODB in that enclave will have the ability to exercise those FOs through their historical interface. All that is necessary to conduct a coordinated review is to use control messages to ensure that the AAR applications respond to requests from the AAR controller. SummaryThe JSIMS design has numerous features which contribute to its ability to accommodate exercises which operate at multiple levels of classification. Key features include:Strictly partitioned federation objects (FOs) which carry verifiable, secure labels set by policy in advance of the exerciseOwnership management techniques to permit unclassified effects from classified processingHigh bandwidth guards which permit internal simulation traffic to pass between enclavesConsistency rules to ensure a single observable synthetic battlespaceA data distribution management technique which protects the capabilities of intelligence assetsReferences[1] Powell, Ed. “The Use Of Multicast and Interest Management” 15th Workshop on Standards for the Interoperability of Defense Simulations, 16-20 Sept 1996