New HLA Based Technologies and Methods for an Advanced Air to Air Combat Simulation (03E-SIW-031)Stéphane JoliboisThierry JoubertMBDA missile systems France.37 Avenue Louis BréguetBP 15078141 Vélizy-Villacoublay - France+33 134883145, +33 134884612 LIENHYPERTEXTE mailto:stephane.jolibois@mbda.fr stephane.jolibois@mbda.fr,  LIENHYPERTEXTE mailto:thierry.joubert@mbda.fr thierry.joubert@mbda.fr Hervé WentzlerThales Airborne Systems.1 Boulevard Jean Moulin78852 Elancourt Cedex - France+33 134597821LIENHYPERTEXTE "mailto:herve.wentzler@fr.thalesgroup.com"herve.wentzler@fr.thalesgroup.comGilles RuelDassault Aviation.78 quai Marcel Dassault - Cedex 30092552 St Cloud Cedex - France+33 147115141LIENHYPERTEXTE "mailto:gilles.ruel@dassault-aviation.fr"gilles.ruel@dassault-aviation.frABSTRACT: ICARE is a Beyond Visual Range (BVR) Air to Air combat simulation designed by Dassault Aviation, Thales and MBDA F to offer better answers to the French Air Force (AAF) and the French Defence Procurement Agency (DGA) operational needs and the industrial requirements.From the beginning, the main technical choices were based on an open and distributed network architecture, developed with emerging new technologies and tools associated with the development of HLA standards (RTI-NG, object model data tool, RPR-FOM, C++, UML, RAL middleware). Those choices were made to ensure better collaboration and reusing of the simulation and models, than through classical solutions relying on proprietary networking components or proprietary design framework.An other important choice was, all models to be delivered were to be « purely algorithmic code » with no hidden data in it, this method can be seen as a « fully generic model approach ». Following this method, various instantiations of generic models through use of a set of data would result in a more flexible and evolving simulation, capable, as far and as long as possible, to represent all future or partially unknown air defence systems as well as known current systems. This was apart from the introduction of new programming technologies for interfacing different models, quite a revolution in our simulation development process.The paper will provide a brief overview of various lessons learnt during the last development phases of the ICARE project and will bring up some suggestions, from the user point of view, for the future evolutions of interoperability standards.1. ICARE Federation1.1 OverviewIn 1998, the Defence Procurement Agency (DGA) of the French MoD asked for the 3 French specialists of aircrafts and core avionics, sensors and missiles systems to set up a cooperation to design a complex generic air to air combat simulation tool. It had to take into account present and future generation of Air to Air Weapon Delivery and Navigation System (WDNS) including aircraft, electronic warfare, data-link and missiles systems. The need focuses on "few vs few" Beyond Visual Range (BVR) combat. The simulation tool applies to the range of :evaluation of existing WDNS,demonstration and assessment of new concept,definition of tactics and new engagement rules.The team designed a simulation tool  in order to fulfil three main requirements :A fully piloted simulation where up to 4 aircrafts are piloted either by military pilots or flight tests engineers via a generic Man Machine Interface (MMI) (see Figure 1).A fully numeric simulation for Technical and Operational Analysis and Studies, where fighters are driven by a fully programmable automata.A piloted simulation for Operational Analysis (some computer generated fighters can be added).Figure 1. Aircraft MMIsThe term generic implies there is no data in code but the models (platforms, sensors, missiles) are fully specialized through data files that can be user configured to represent existing or future systems. One big challenge of the project was the strong validation requirements imposed by the DGA on both WDNS functionalities and performances. Once the models were connnected and specialized, the resulting behavior had to similar to the real thing in the eyes of the French Air Force pilots.1.2 HLA Distributed ArchitectureFrom the beginning, the main technical choices were based on an open and network distributed architecture, developed with emerging new technologies and tools that came up with the development of HLA standards. Global objectives and requirements were first defined for the ICARE federation and the steps of the Federation Execution and DEvelopment Process (FEDEP) were followed as much as possible.A complete model of exchanges between federates was early built based as much as possible on the Real-time Platform Reference Federation Object Model (RPR-FOM). This allowed the three companies to develop their own federate and to conduct most of the tests independantlyindependently. The overall architecture of the ICARE federation is shown in Figure 2.The federation is composed of two major types of federate gathering the models of the simulated systems:WDNS (Weapon Delivery and Navigation System) federates manages WDNS entities. The WDNS modeling includes platform, navigation, radar, Radar Warning Receiver (RWR), self protection, patrol data-link, situation awareness, Aircraft to Missile Data-Link (AMDL) and optional MMI or automata. Flexibility allows the mapping of one WDNS on one federate for the piloted mode, and the mapping of all the WDNS on one federate for the batch mode.The Missiles Server federate manages all friendly and enemy missiles of the simulation, before and after launch. The missile model includes a 5 DOF vector (no roll), an analytic seeker, a data-link receptor, the sensor fuse and the warhead.The 3 other federates are tools for controlling the federation :The HLAManager launches each federate and pilots the federationThe Sitac2D (Tactical Situation) provides the god’s eye view.The HLASpy logger is the Data Collector Tool.2. ICARE Federates2.1 Federate Common ArchitectureEach air combat system federate (missiles server, aircraft)  respects the same architecture shown in Figure 3.Figure 3. Federate ArchitectureThe federate is divided into 3 layers:- the first layer is the LibRTI, or Local RTI Component (LRC), which is part of the RTI software. It provides the federate with the RTI services specified by HLA and with the FederateAmbassador that identifies the callback functions each federate is obliged to provide;- the middle layer is the RTI Abstraction Layer (RAL) library, described in details further, which handles and hides the major laborious tasks required by the HLA/RTI (for example object updating and reflection) in order to help the developer concentrate on the functional code of the model;-  the layer on the top is the functional code of the simulated air defense system, on which the developer should spent the greatest part of his time, implementing system internal behavior and algorithms.2.2 RAL MiddlewareRAL (RTI Abstract Layer) is a middleware developed by ANPROS (French Operational Research and Simulation Naval Agency in Toulon) and Thales. The main objective of RAL is to make the system model development as much as possible independent from RTI services. HLA services proposed by RAL are the following : Federation Management, Declaration Management, Object Management,Time Management. Owership Management is being developed in the next release. Data Distribution Management is not managed. All non value-added tasks for the model are automatic or gathered in simple APIs (Application Programming Interfaces), such as: create/join/resign/destroy HLA/RTI federation and publish/subscribe objects/interactions, request next step / synchronise federates,update/remove published objects, send interactions,discover/reflect/remove subscribed objects and received interactions.In addition, RAL has some serialisation services. RAL can manage three kinds of federate :TimeStepped federate (shown Figure 4), EventDriven federate, RealTime federate (federate that does not call time management services).RAL is the main component of the simulation framework of Thales. This framework uses OMDT to create  FOM / SOM documents. It also provides a code generator (SimDE) to generate the ICARE FOM C++ classes and the federate skeletons, all of them using the RAL API.Figure 4. RAL Time Stepped Federate2.3 Full Generic ModelsWhen you want to build, with technical and realistic models, a few vs few simulation capable of modeling existing – and future - defense systems, the first big question is “which model will I use?”.Each company, among the defense community, has developed very precise reference models of all its homemade products with a sufficient level of representativity. The advantage of these models is the fact that they already exist, they are thoroughly validated against real system behavior and performances, and are maintained throughout the life of the system. On the other hand, drawbacks for connecting them in a distributed simulation are numerous. First of all, these models, designed years ago at the beginning of projects, are often based on old architecture schemes and classical languages (Fortran, C, …), far from object oriented concepts which are more adapted to interoperability. The integration in a global simulation of every new model of equipment developed by one particular team requires every time the same big effort. Furthermore, the growth potential of models is not accessible to the global simulation end users because these are generally specific "black box" softwares, with some hidden data in it, mastered only by the original development team. The building of a new model simulating the next version of an existing system, or rival or future systems is then hard to achieve.A new approach that emerges five years ago supported by French DGA, was to develop for each category of equipment a purely algorithmic model not related to any particular existing system, and with no data in it. Each real system is in fact implemented, instantiated by a set of configurable ASCII data files using a well defined format. The model must be generic enough to simulate one entire family of weapon systems (fighters, airborne radars, air-to-air missiles, …) but precise enough to show significant differences between the WDNS performances. A great effort must be done during the specification and design of such models to conciliate 3 things: algorithms and data should be detailed enough to ensure a high degree of realism and fidelity; but on the opposite, they can’t be too much detailed otherwise engineers won’t be able to feed models of future or partially unknown systems, for which reliable data (obtained by simulation, study of enemy systems, ..) are hard to obtain; finally, the software architecture must be designed to provide the model with the capacity of easy evolution to integrate new algorithms and functionalities not required initially. To warrant a strong credibility for this new philosophy of simulation from managers and potential users, the development of a generic model must be completed by a serious validation on well-known products in close relation with the teams responsible for the specific reference models.The initial cost of development to achieve all these goals may be substantial and certainly higher compared to a single specific model development. But this investment is rapidly refund if you intend to build global simulations in order to assess and compare different system performances in various configurations, which was precisely a major objective of the ICARE federation.Another difference between models where data are inside the code or separated from the code is concerning the question of industrial property and confidentiality, which is not a detail in this kind of multi-companies cooperation where the federation integration and tests must be located on one site. On one hand, full black box models seem very convenient to protect your technical data because none is visible from outside if you deliver an executable software, but the problem remains for the generated results that are classified. With generic models, the code itself is not confidential and you can easily modify the configurable data files of the system you are responsible for to transform your proprietary confidential model into a declassified model with the same functionalities but degraded performances. 2.4 Federate Development ProcessThe development process of each federate was similar among the three companies, using the most up-to-date technologies, methodologies and tools associated with mature standards (HLA, RPR-FOM, Unified Modeling Language UML). This process is detailed in Figure 5.Figure 5. Federate development processThe ICARE Federation Object Model (FOM), which describes precisely all the exchanges between federates, is compliant as much as it can be to the RPR-FOM standard, for instance in the area of physical interaction exchanges. Yet, some new functional or operational interactions - still based on RPR-FOM complex and enumerated datatypes - had to be added, mainly for enabling the aircraft to send requests to carried missiles before launch and receive answers back (e.g. for controlling the seeker watching pattern under aircraft or realizing coincidence with other sensor). The Object Model Development Tool (OMDT) is first used to generate the ICARE FOM in two different formats. The Federation Execution Details file (.fed extension) will be directly used by the FedExec of the RTI. The Object Model template Data interchange format file (.omd extension) is read by a C++ class generator tool (SimDE) to produce the FOM classes code, as well as the federate skeleton including RTI callbacks methods prototypes. The next step is the generation of the UML conceptual model and of the federate C++ code with the Rational UML Design Toolkit. A common C++ framework enables to complete the detailed code, compile it, and link it with the RTI and RAL libraries. The different federate executable software modules can then be integrated and tested into the ICARE federation.3. Federation Integration & Execution3.1 Time Management PolicyEach federate manages its own time advance. At the beginning of the project, we intend to used the time management services of HLA to synchronise time. That’s why the DMSO RTI1.3NG-v5 had been chosen. All federates were constraints and the HLAManager regulated the time. But with this approach, we have met two issues. Firstly, the federation could not fill the ICARE requirements : time execution was not real time (actually soft real time, i.e. one step of 40 ms of simulation time must be equal to 40 ms of real time, and accuracy must be 10 (s). Secondly, the update time latency was to long.After some investigation, we noticed that each federate spends much time in the TimeAdvanceGrant function (RAL "ticks" the RTI until TimeAdvanceGrant  can be performed). Also, We have noticed that the DMSO RTI has a long time latency for the update of the objects (can be more than 40 ms depending on the updates load).Then, we decided to use a real time RTI, which doesn't implement the time management services. That’s why a synchronisation mechanism (services of the federation management) was used. But three requirements had to be fulfilled :the time spent in the computation of our models must be less than 40 ms,the time latency for the object update must be less than 40 ms,the mechanism of synchronisation must have an high  accuracy. These three requirements were achieved in the ICARE federation.The Figure 6 shows how works this mechanism.Figure 6. Synchronization with Real Time Federates 1 : Synchronization Request.2 : Response of the RTI.3 : RTI request for each federate to take into account the  synchronization request.4 : Response of each federate.5 : RTI answers that the synchronization has been done.6 : HLAManager waits.7 : Each federate does its processing.3.2 VV&A and ResultsIn the last phase, a special effort had to be made to demonstrate that generic models could offer similar accuracy compared to legacy models (with all data hidden in the code). To validate the generic air-to-air missile model, a specific dynamic graphical tool was designed to compute and verify firing range domains by comparison with the embedded ones. A snapshot of this tool is shown on Figure 7.Figure 7. Firing Domains Visualization ToolAs shown on Figures 8, specific 3D visualization tools and data analyzers were developed and used to validate WDSN behaviors and performances compared to those encountered by military pilots or flight tests engineers.Figure 8. Engagement 3D views4. Lessons LearnedChoice of a promising world wide standard such as HLA, at the very beginning of the project, was made with the hope of a rapid return of investment by getting easy access to  new market software products and tools announced. But in fact, this “time to market” was underestimated, and during first phases of the project, no HLA tools or products appears as the winners on the market. So a lot of efforts had to be made to obtain satisfactory tools.The generic models approach provoked at first some reluctancy among collaborating companies and a lot of extra work for engineers that had to deliver to another company software releases for integration with data different from the final data (delivered to end customer), but which should cover all functional logics and behavior. A special effort had to be made to demonstrate the level of performance modeling accuracy with respect with fully accredited models for which data are hidden in the code. We had to provide the final customer with a full validation booklet obtained and delivered with specific graphical tools (for example for missile firing domains comparison).One lesson about HLA, learned during this project, is the difficulty to guarantee that all information arrive in the same time step with a good time latency. The Figure 9 shows a federation which can give wrong results : in this example, aircraft 1 can see aircraft 2 with the same position during two time steps. Then, the computation of detection  does not give the same result for each aircraft even if the models are the same. All federates (a set of models) must have the same information at the same time. Figure 9. Federation with a time latency too long. Even if the time management or an other mechanism of  synchronisation is efficient, if an update arrives to late, the simulation is not recurrent. It is an hard work to verify that the time latency is always inferior to the time step and verify that the time step is equal to the real time. Till now, time management services don’t seem efficient enough to be used in a real time federation (soft real time) and DMSO RTI may be not efficient enough for this kind of federation because the time latency is too high and not constant. Using RAL library and the associated simulation framework can be a good way to build federations which implement several models.    These difficulties, linked with real time requirements and the switch to new RTI and Time Management, were encountered during the federates development and even during the integration phase, inducing extra time to tune the ICARE federation. This underlines the need first to generate a precise Federation Execution Planner’s Workbook (FEPW) in order to analyse and assess the performance requirements and secondly, to develop early in the project a testing platform to validate the key choices concerning the RTI and Time Management used for the federation.5. Future WorkNext step should be to connect ICARE federation to fully detailed combat trainers to obtain comparison between current system generation and future new concepts to be studied (eg long range missile tactics, new sensors etc.).6. References[1]	DMSO: “RTI 1.3-Next Generation Programmer’s Guide ”, December 1999.[2]	SISO: “Real-time Platform Reference FOM – Version 2.0 Draft 4”, November 2000.[3]	J.Borah: “HLA Federation Development and Execution Process (FEDEP) and Supporting Tools” SIW Tutorial Session, March 2002.[4]	IST-CR-93-46: “Enumeration and Bit-encoded Values for use with IEEE Std 1278.1, Distributed Interactive Simulation – Application Protocols”, March 1994.Author BiographiesSTEPHANE JOLIBOIS has been working for three years as a senior engineer in the Advanced Concepts Directorate of MBDA missile systems. He is in charge of the development of weapon systems models for technical & operational simulations in air / land / sea context, and has leading similar works within the French MoD during three years. He also spent over two years developing embedded Flight Management Software for civil airliners with high criticity & real time constraints in huge quality level context.THIERRY JOUBERT has been working for eighteen years as a software engineering, Artificial Intelligence or battle modeling specialist  among the Advanced Concepts Directorate of MBDA missile systems. He was in charge of advanced computing methods for new R&D projects or simulation in Surface to Air, Air to Air, Aircraft Counter Measures or Pilot’s Assistance areas.  Before, he had worked ten years at the research laboratories of French Telecommunication administration as a research engineer in modeling, symbolic computing and advanced software engineering. He started in the industry as a software quality engineer for Matra group.HERVE WENTZLER has been working for three years as senior engineer in the Technical Directorate of Thales Airborne Systems. He is in charge of the development of equipment and system models for technical & operational simulation in air. He is also member of Simulation Working Group in Thales. Before, he had worked during three years as an engineer in a Strategic Business Unit of Thales Airborne Systems on simulation and information systems.    GILLES RUEL has been working for two years as a project manager in the Technical Directorate of Dassault Aviation. Before, he had worked for Technological Demonstration Program related to the simulation framework. He had worked ten years as an engineer mainly in charge of architecture and facilities for interoperable man in the loop simulation and tactical environment modeling.554433theoretical time step 215454TimeFederateHLAManagerRTIFigure 2. ICARE FederationSYSTEM CODEgeneric modellibRALMiddlewareRTIlibRTIRTI servicesAircraft 2RTI76544533accuracy 267Aircraft 1updatereflectiontime latencyupdatereflection