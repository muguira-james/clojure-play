New Features for OASES: The Query ServerRobert A. ReynoldsNorthrop Grumman Information Technology55 Walkers Brook Dr.Reading, MA 01867781-205-7579 HYPERLINK "mailto:robert.reynolds@ngc.com" robert.reynolds@ngc.comChristopher G. ScannellThe Naval Research Laboratory4555 Overlook Avenue, SWWashington, DC 20375202-767-1127HYPERLINK "mailto:christopher.scannell@nrl.navy.mil"christopher.scannell@nrl.navy.mil Keywords:OASES, HLA, query, response, environment, server, SOM, FOM, agility, interaction, point, line, line-of-sight, LOS, atmospheric, ocean, space, effect, visibility, sensor, EDCSABSTRACT:  In GFY'04 the Defense Modeling and Simulation Office (DMSO), with support from the Naval Research Laboratory and the Joint Forces Command, sponsored the development of a significant new capability for the Ocean, Atmosphere and Space Environmental Services (OASES) system. The new subsystem, referred to as the Query Server, will offer, to HLA Federation executions, atmosphere/ocean/space (AOS) data services which are complementary to those currently available from the OASES Publisher. Specifically, the Query Server will provide an Interaction-based query/response protocol that can be used by simulation entities to make point and line-of-sight (LOS) queries of the AOS environment. Clients to this new data service will not be required to develop internal support for large and potentially complex AOS data structures, such as curvilinear and/or nested rectangular grids, in order to support their environmental effects models. This paper describes the new OASES functionality with emphasis on the associated extensions to the OASES Simulation Object Model (SOM). The paper compares and contrasts the existing Object-based publication services with the new Interaction-based services, and discusses the relative advantages and weaknesses of each approach.BackgroundThe HLA-compliant OASES system, and its DIS-based predecessor TAOS, generate virtual atmosphere, ocean and space (AOS) environments by creating and updating objects that directly encapsulate AOS state information.  This state information is typically reflected by subscribed simulation applications (“clients”) as 1-, 2- and 3-dimensional grids of AOS variables.  The client applications are then responsible for developing an interface to the local reflection(s) of the AOS data such that this data can be queried to support entity behavior and locally-executed environmental effects models.Developing an interface to reflected AOS data, while straightforward in principle, can be a significant undertaking, and several programs who have considered incorporating AOS environmental effects into their simulation(s) have been deterred due to the effort involved.  One such program, supporting ionospheric effects modeling for the 1999 Joint Expeditionary Forces Experiment (JEFX) [1], contracted with Northrop Grumman to develop a query/response mechanism between their legacy client simulations and TAOS in order to avoid the higher projected costs associated with developing support for 3-D gridded data in the clients.  The product of the development was a new subsystem called the Query Server and included in the TAOS V2.0 release (January 2000).  The Query Server functioned as a traditional Unix server, employing stream (TCP/IP) sockets and accepting connection requests.  Details of the query / response protocol and the associated message formats were hidden from the client simulations through the use of an Applications Programming Interface (API).  Point and line-of-sight queries were supported by the API and the underlying query/response protocol.The TAOS Query Server used a “back-door” communication channel between clients and server, and was somewhat specific to the space regime.  This paper describes a DMSO-sponsored effort to develop an HLA-compliant Query Server, leveraging the TAOS design, that will allow client simulations to query the OASES-maintained AOS environment at run-time without requiring these clients to develop interfaces to local reflections of potentially complex AOS data structures.The query/response capability benefits the modeling and simulation community by providing an alternative method for accessing the virtual AOS environment, with  potentially lower development costs.  Additionally, the new capability has the potential to significantly reduce the network bandwidth associated with the AOS environment for exercises where the number of entities that require AOS state is relatively small and/or are moving relatively slowly; in these cases the time-averaged traffic associated with queries and responses is expected to be smaller than the traffic that would result from updating the full gridded environment.  The query/response capability also avoids the difficult problems associated with updating large environmental objects over a Connectionless RTI [2].  A side-by-side comparison of the AOS data services provided by the OASES Publisher and Query Server is provided in Table 1.CharacteristicPublisherQuery ServerAOS Data flow“Pushed” to client Federates at the update rate of the historical data“Pulled” by client Federates as neededAOS FOM elements Objects, typically largeInteractions, relatively smallAOS data coverageFull coverage of surfaces and volumes within the playboxPoint and LOSClient infrastructure requirementsSignificant; rectangular and curvilinear grids must be constructed from reflected data and made queriable by the entities simulated by the client Federate.Minimal; point values and one-dimensional arrays directly support effect modelsRPR FOM compatibilityGCC coordinates cannot be directly supported.GCC coordinates directly supportable.Network loadingLarge, infrequent network “spikes”Small, frequent data exchangeLatency of AOS state queriesSmall, limited only by efficiency of client’s implementationPotentially large, due to server bottleneck and number of client entitiesTable 1:  Comparison of Publisher and Query Server AOS Data ServicesDesign ProcessInitial DesignThe initial, NGIT-internal design phase of the effort addressed the questions posed in the NGIT presentation made at the first OASES User’s Group meeting held on the evening of April 22 during the Spring Simulation Interoperabilty Workshop (SIW).  The design decisions made, and the rationale for these decisions, are as described below.Question: Should the Query Server support queries for times in the past or future of the current Federation Ephemeris Time?Answer: No.  Queries do not include explicit date/time fields and so implicitly refer to current Federation time.Rationale:	Access to historical or future environmental data would not seem to be of interest to the class of sensor and vehicle client simulations envisioned.Question:	Should the Query Server support queries of surface and volumetric data in addition to queries of points and lines?Answer: No.  Environmental data clients requiring surface and volume data are best served using the existing object classes published by the OASES Publisher.Rationale:	A primary motivation for developing the Query Server is to support Federations that are trying to avoid the problems of transferring large environmental objects over a potentially connectionless RTI.  The bandwidth required to support responses to queries for surface and volume data, and the problem of transmitting this data reliably are significant, as is the additional development effort that would be required.Question:	Should the Query Server be developed as a new and separate OASES subsystem, or should the Publisher take on the additional responsibilities of supporting the query/response protocol?Answer:	It was decided to develop the Query Server as a new subsystem distinct from the Publisher.Rationale:	While adding query/response functions to the Publisher would actually result in reduced development effort, the readability and maintainability of the source code would be significantly impacted.Question:	What coordinate systems should the query protocol support?Answer:	Geodetic, Geocentric and/or Universal Transverse Mercator coordinates are supported, depending on the type of the query.  The specific coordinate systems supported by each query type are defined Query Server’s Simulation Object Model (SOM) which is overviewed in Section 2.2 below.Rationale:Geocentric coordinates (GCC), referred to as World Coordinates by the DIS standards and the RPR FOM, are supported for every query type.  This is to promote adoption and future use of the new OASES services by the large number of simulations believed to be based on the RPR FOM, and to save these simulations the cost of converting GCC coordinates to Geodetic coordinates (GDC).Geodetic coordinates (GDC) are supported for every query type because, it is argued, these are the natural coordinates for environmental data and because OASES databases store both rectangular and curvilinear gridded data on these coordinates.  Hence, environmental data can be accessed by the Query Server without incurring coordinate conversion costs.Universal Transverse Mercator coordinates (UTM) are supported only for those query types which might be used to retrieve environmental data for display on a UTM map projection.  UTM support is also provided for vertical profiles because these queries are specified in terms of surface coordinates.  The specific intent of the restricted support for UTM is to discourage the use of three-dimensional coordinate systems constructed from UTM “horizontal” coordinates (Northing and Easting) and a generic vertical axis.  Pre-STOW-97 ModSAF-based CGFs used such systems and it was found to be difficult to support three-dimensional AOS environments using OASES.Question:	What spatial interpolation algorithm(s) should be supported for point and line queries?Answer:	Standard bilinear or trilinear interpolation will be used for real-valued state variables such as temperature or sound speed.  For enumerated state variables such as precipitation type or sea state, the value returned by the Query Server will be based on in the southwest corner of the cell containing the query location.Rationale:	These are straightforward algorithms already supported by OASES that should be sufficient in most cases.  If required, it is straightforward to extend OASES and the SOM to include support for more specialized interpolation algorithms.Simulation Object ModelWith these decisions made, the focus of the design effort shifted to the design of the interface that the OASES Query Server presents to a client Federate interested in querying the synthetic environment. This interface is expressed by the Query Server’s SOM, which we overview in this section.Response Interaction Class HierarchyIt was found while designing the query/response SOM that it was more natural to first identify a set of useful response structures and to then, secondarily, identify structures for soliciting these responses.  The response Interaction hierarchy is shown in Figure 1.Figure 1: Response Interaction Class HierarchyThe responses available from the Query Server are conceptualized as observations, as indicated by the naming convention evident in Figure 1.  Note that these are observations not of the real-world environment, but of the virtual environment.  There are four types of observations supported by the SOM:Point Observations – a set of environmental attributes “observed” at a point location in space.  The response is a set of real or enumerated point-values.  The query must include the location to be “observed”.Line-of-Sight (LOS) Observations – a set of environmental attributes “observed” along the line of sight between an observer and a “target”.  The response is a set of (1D) arrays of real or enumerated values.  The query must include the locations of the observer and “target”, and the desired sample spacing along the LOS.Near-Surface Observations – a set of environmental attributes observed at a point which is constrained to lie on a terrain-following surface.  The response is a set of real or enumerated point values.  The query must include the location to be “observed”, but note that only the horizontal coordinates of this location are used by the Query Server.Vertical Profile Observations – a set of environmental attributes observed at a set of elevations (or depths) for a specified surface location.  The response is a set of (1D) arrays of real or enumerated values.  The query must include the mean-seal-level location to be “observed”, and hence any vertical coordinate included in the query is ignored by the server.Of course Figure 1 does not fully define the response hierarchy; the Parameters for each class of Interactions must also be specified.  As an example, Figure 2 illustrates the Parameters defined for the AtmosphereLOSObservation class.Figure 2:  Parameters for Atmospheric LOS ObservationQuery Interaction Class HierarchyThe class hierarchy for the queries to be supported by the query/response protocol is illustrated in Figure 3.  Note that – down to the third level – this hierarchy is entirely parallel to the hierarchy shown in Figure 1.  The fourth level represents the specialization of queries on the basis of the coordinate system being used to query the AOS environment by the client Federate.The Parameters defined for a query class are essentially parallel to those defined for the corresponding response class, as illustrated in Figure 4 for the ObserveAtmosphericLOSEnvironment query class.Figure 4: Parameters for Atmospheric LOS QueriesThe query structure includes boolean attributes for requesting the subset of environmental attributes whose values are actually of interest to the client Federate.  Derived classes include coordinate-system-specific attributes, in this case supporting GDC and GCC coordinates.  The environmental attribution of the query exactly matches that of the response.Figure 3: Query Interaction Class HierarchyCommunity ReviewThe Query Server design document was posted to a website available to all members of the OASES User’s Group, and a formal review was held by teleconference. The review generated useful criticism and feedback concerning a number of aspects of the design, but one comment in particular gave the developers pause.  The observation was made that, like the Object class hierarchy supported by the OASES Publisher, the Query Server’s query/response Interaction hierarchy presupposes that the client will be interested in specific, named collections of environmental state variables, and that in some cases the offered groupings were somewhat arbitrary.This comment notwithstanding, the implementation proceeded.  It was discovered that a “hard-wired” SOM, based on the query and response Interaction hierarchies proposed in the design document, would actually be more difficult to implement than would be a generalized query/response hierarchy that recognized the inherent dependence of the query hierarchy on any given, prescribed response hierarchy.  Motivated by the desire to claim SOM-agility for the Query Server, an implementation was sought which accepted the definition of the response Interaction hierarchy as a run-time input, with the query hierarchy derived from this input.A “MetaSOM” for the Query ServerAnalysis reveals that the Query Server’s SOM can be derived from a higher-level specification based only on the details of the response hierarchy.  This is possible because the query hierarchy can be derived from the response hierarchy if the response hierarchy is augmented to include:Whether a given class in the response hierarchy is concrete or abstract (i.e., whether or not it can be directly queried)The response’s “geometry type”, as described above in Section 2.2.1.  The four defined values for “geometry type” are:Point-in-VolumePoint-on-SurfaceLine-of-SightVertical ProfileThe coordinate systems that a client is allowed to use for issuing queries of the state variables supported by the response class.The implementation currently being pursued for the Query Server is based on a “metaSOM” that includes the attributes described above.  The syntax used to describe this metaSOM is a straightforward extension of that used by the RTI-1.3-NG family of RTI products to describe a SOM via a .fed file.  An example of a portion of the Query Server’s metaSOM is given below, with the added attributes indicated in bold text:(class EnvironmentObservation best_effort receive Hyperspace   (type abstract)   (parameter RequestingEntity)   (class AtmosphereObservation best_effort receive Hyperspace      (type abstract)      (class AtmospherePointObservation best_effort receive HyperSpace         (type concrete)         (parameter EAC_Air_Temperature)         (parameter EAC_Relative_Humidity)         (parameter EAC_Atm_Pressure)         (parameter EAC_Wind_Speed_U_Component)         (parameter EAC_Wind_Speed_V_Component)         (parameter EAC_Precipitation_Rate)         (parameter EAC_Precipitation_Type)         (parameter EAC_Turbulence_Intensity)         (parameter EAC_Freezing_Height)         (parameter EAC_Cloud_Ceiling_Altitude)         (parameter EAC_Aircraft_Icing_Type)         (parameter EAC_Aircraft_Icing_Intensity)         (parameter Rain_Drop_Mixing_Ratio)         (parameter Snow_Flake_Mixing_Ratio)         (parameter Ice_Crystal_Mixing_Ratio)         (parameter EAC_Cloud_Water_Mixing_Ratio)         (parameter EAC_Visibility_Distance)         (parameter EAC_Obscurant_Type)         (parameter EAC_Aerosol_Particle_Concentration)         (geometry point-in-volume)         (coordsystem GDC)         (coordsystem GCC)      )      (class AtmosphereVerticalProfileObservation best_effort receive HyperSpace         (type concrete)         (parameter EAC_Air_Temperature)         (parameter EAC_Relative_Humidity)         (parameter EAC_Atm_Pressure)         (parameter EAC_Wind_Speed_U_Component)         (parameter EAC_Wind_Speed_V_Component)         (parameter Resolution)         (geometry profile)         (coordsystem GDC)         (coordsystem UTM)         (coordsystem GCC)      )      (class AtmosphereLOSObservation best_effort receive HyperSpace         (type concrete)         (parameter Extinction_Coefficient_Visible)         (parameter Extinction_Coefficient_Near_IR)         (parameter Extinction_Coefficient_Mid_IR)         (parameter Extinction_Coefficient_Far_IR)         (parameter EAC_Optical_Turbulence_Intensity)         (parameter EAC_Obscurant_Type)         (parameter EAC_Aerosol_Particle_Concentration)         (parameter EAC_Relative_Humidity)         (parameter EAC_Air_Temperature)         (parameter EAC_Atm_Pressure)         (parameter EAC_Precipitation_Rate)         (parameter EAC_Precipitation_Type)         (parameter Rain_Drop_Mixing_Ratio)         (parameter Snow_Flake_Mixing_Ratio)         (parameter Ice_Crystal_Mixing_Ratio)         (parameter EAC_Cloud_Water_Mixing_Ratio)         (parameter EAC_Cloud_Liquid_Water_Content)         (parameter EAC_Cloud_Drop_Mean_Diameter)         (parameter Total_Extinction_Visible)         (parameter Total_Extinction_Near_IR)         (parameter Total_Extinction_Mid_IR)         (parameter Total_Extinction_Far_IR)         (parameter Resolution)         (geometry line-of-sight)         (coordsystem GDC)         (coordsystem GCC)      )      (class AtmosphereNearSurfaceObservation best_effort receive HyperSpace         (type concrete)         (parameter EAC_Air_Temperature)         (parameter EAC_Relative_Humidity)         (parameter EAC_Atm_Pressure)         (parameter EAC_Fog_Cover)         (parameter EAC_Fog_Thickness)         (parameter EAC_Wind_Speed_U_Component)         (parameter EAC_Wind_Speed_V_Component)         (parameter EAC_Precipitation_Rate)         (parameter EAC_Precipitation_Type)         (parameter EAC_Blowing_Sand)         (parameter EAC_Blowing_Snow)         (geometry point-on-surface)         (coordsystem GDC)         (coordsystem UTM)         (coordsystem GCC)      )   )The software being developed will be able to automatically generate the run-time data file (.fed) that is required by the RTI-1.3-NG family of RTI products.In summary, the implementation being pursued will allow the user to define his own Query Server SOM, using a (to be documented) extension of RTI-NG syntax for the response portion of the SOM.  The full SOM, to include the derived query classes, will be automatically generated.  The end result is that the Query Server will be, to a very significant extent, “FOM-agile”.ConclusionsThis paper has described a DMSO-sponsored effort to develop a HLA-compliant Federate capable of responding to queries of the SNE.  This Federate will be capable of adapting to a SOM, which will specify the queries and responses to be supported,  that is read at run-time.  The run-time SOM specification will be based on an extension of the .fed file syntax supported by the RTI-NG family of RTI products.ReferencesReynolds, R.A., Shohara, N.M., TAOS in Space, Proceedings of the Spring 1999 Simulation Interoperability Workshop, 99S-SIW-101, March 1999, Orlando FL.Reynolds, R.A., Scannell, C.G., Supporting the Transfer of Large Environmental Data Objects Over a Connectionless RTI, Proceedings of the Fall 2003 Simulation Interoperability Workshop, 03F-SIW-088, September 2003, Orlando FL.Author BiographyROBERT A. REYNOLDS is a Principal Engineer at Northrop Grumman Information Technology, Defense Enterprise Solutions, and has been the system architect and lead developer for the OASES system and its predecessor TAOS.  His primary professional interests are in the areas of software/simulation engineering, object-oriented modeling, visualization, distributed simulation and synthetic environments.  He has a BS in Physics from the Massachusetts Institute of Technology and an MS in Nuclear Engineering from Carnegie-Mellon University.CHRISTOPHER G. SCANNELL is an Electronics Engineer with the Naval Research Laboratory.  He has worked in the Acoustics Division and the Information Technology Division researching distributed simulation applications, virtual reality applications and parallel processing paradigms.  He has a BS in Physics from Georgetown University, a BSEE from the Catholic University of America and an MS in Electrical Engineering from Johns Hopkins University. Because the virtual environment is generally constructed by OASES from gridded numerical weather forecast products, and not from real-world observational data, there is the potential for some confusion here. The design allows the client to request that the Query Server choose an appropriate sample spacing for LOS queries.PAGE  PAGE  1PAGE  PAGE  7