Joint MEASURETM: Distributed Simulation Issues In a Mission EffectivenessAnalytic SimulatorSteven B. HallBernard P. Zeigler Hessam S. Sarjoughian AI and Simulation Group Department of Electrical and Computer EngineeringUniversity of Arizona,Tucson, ArizonaSteve_hall@lmco.com{zeigler,hessam}@ece.arizona.edu Keywords:Mission Effectiveness Simulation, DEVS formalism, HLA, Interoperablility, Site-proprietary impediments, Data Distribution ManagementABSTRACT: Joint MEASURETM  (Mission Effectiveness Analysis Simulator for Utility, Research and Evaluation.) demonstrates the effective application of HLA-compliant simulation outside the traditional realm of training to analytic studies of mission effectiveness of systems within larger systems of systems configurations.   A superset of the DEVS/HLA distributed simulation environment, it exploits the benefits of DEVS (Discrete Event System Specification), a sound formal modeling and simulation framework based on generic dynamic systems concepts.  Other enabling components of Joint MEASURETM  (i.e., Geographical Information System, Data Modeling and Analysis Toolkit, and Graphical User Interface) support run-time visualization and analysis. In this paper, we will review the design and development of DEVS/HLA before proceeding to review the integration of Joint MEASURETM as a DEVS/HLA superlayer.  We discuss an important infrastructure feature, spatial encounter prediction and emission propagation, which provides an essential performance enhancement to HLA Data Distribution Management.  We will show how Joint MEASURETM effectively exploits both the DEVS modeling and HLA simulation frameworks to tackle interoperability, reuse and site-proprietary impediments that arise in coupling distributed heterogeneous component models to achieve new modeling objectives. IntroductionThe Lockheed Martin Corporation has developed a modeling and simulation environment that effectively exploits both the DEVS modeling and HLA simulation frameworks to support distributed simulation in a corporate context.  Intended to assist in evaluating a proposed defense system’s mission effectiveness, the simulation environment is a superset of DEVS/HLA, an HLA-compliant modeling and simulation environment.  Before proceeding to describe the analytic simulator, it will help to first review the underlying DEVS/HLA environment.Review of DEVS/HLADEVS is a mathematical formalism for expressing discrete event models which supports discrete event approximation of continuous systems and has an object-oriented substrate supporting model implementation and repository reuse.   Advantages of the DEVS methodology for model development include well-defined separation of concerns supporting distinct modeling and simulation layers that can be independently verified and reused in later combinations with minimal re-verification.  The resulting divide-and-conquer approach can greatly simplify and accelerate model development leading to greater credibility at reduced effort.  DEVS  has a  well defined concept of system  modularity and component coupling to form composite models.  It enjoys the property of closure under coupling which justifies treating coupled models as components and enables hierarchical model composition constructs.DEVS/HLA ADDIN ENRfu [2] is an HLA-compliant modeling and simulation environment that supports high-level federation development and execution using the DEVS methodology.  Modularity, in which component models are coupled together through input/output ports, allows messages to be sent from one federate to another using the underlying HLA interaction messages.   In addition, DEVS/HLA supports attribute updating and quantization-based message filtering  ADDIN ENRfu [3].  For this, the modeler declares HLA objects and attributes desired for reflecting states of DEVS federates. By attaching quantizer objects supplied by DEVS/HLA to such attributes, the appropriate publish/subscribe mechanisms are automatically set-up. EMBED PowerPoint.Slide.8  Figure  SEQ Figure \* ARABIC 1 DEVS/HLA Distributed Simulation EnvironmentThe resulting environment for high-level federation development and simulation is depicted in Figure 2.   Models developed in a DEVS/C++ or DEVSJAVA (C++ and Java based DEVS implementations, respectively) can be directly simulated in the DEVS/HLA environment over any TCP/IP, ATM, or other network of hosts executing an HLA C++ RTI.  Based on model-supplied information, DEVS/HLA takes care of the declarations and initializations needed to create federations, joining and resigning of federates, communication among federates and time management.  EMBED PowerPoint.Slide.8  Figure  SEQ Figure \* ARABIC 2DEVS/HLA Layered Architecture and its support of supersets such as Joint MEASUREJoint MEASUREJoint MEASURETM  (Mission Effectiveness Analysis Simulator for Utility, Research and Evaluation.) was developed atop DEVS/HLA by Lockheed Martin, Sunnyvale.  Simulation-based acquisition requires that early in the development of a new defense system there be an assessment of its expected mission effectiveness.   The benefit aspect of this cost /benefit analysis examines how well the proposed system would contribute to the nation’s overall ability to counter an enemy threat.  This contribution is a result of the system’s ability to gather and share information, survive and/or service hostile targets.  Unfortunately, making this assessment can be difficult.  Subtle design decisions can result in significant impacts on effectiveness.  Similarly, modest alterations in the way the system is used can have a marked impact on effectiveness as can relatively minor modifications of the scenario that the system is immersed within and is reacting to.Joint MEASURETM (JM) is intended to assist in evaluating a proposed defense system’s mission effectiveness in the context of a specified set of possible design variations, operational utilization patterns and engagement scenarios.  Examples of such defense system proposals will be given later in the paper.Joint MEASURETM contains a library of sensor, weapon, and command/control communication platform models that can be composed to model military systems of systems operating in physically realistic environments. It is intended to support Monte-Carlo and/or optimization simulation runs involving large numbers of runs with different random number seeds and parameter settings.  JM contains Event Distribution and Predictive Encounter Controllers to efficiently manage interactions among mobile, communicating platforms.  It is contains a visualization interface to display moving platforms the are spatially referenced within a Geographical Information System (GIS). It also contains a Data Modeling and Analysis Toolkit to support statistical analysis of simulation output.  In JM, experiments can be specified interactively, to include attributes and behaviors of system components. Such scenarios can be stored, retrieved and concatenated to form new composites. JM has been in development for five years and includes approximately 200K lines of internally developed C++ code in additional to its substantial utilization of available libraries. DEVS-compliance of Joint MEASURETMLockheed Martin made an early decision to comply with the DEVS formalism because of its promise for code maintainability, performance and formal precision. We discuss these individually:  Speed: It is easy to generate a requirement to simulate a multi-hour analysis scenario thousands of times.  For example, if we assess 3 alternatives to each of 3 platforms design parameters (e.g., speed, signature and vulnerability) and 3 alternatives to 3 utilization patterns (e.g. distance from enemy, friendly deployment configuration and friendly reactivity) and 3 alternatives to 3 scenario characteristics (geographical location, enemy deployment configuration and enemy reactivity) and repeat each of these configurations 20 times (due to the probabilistic nature of the simulation) then we will need to run nearly 400,000 simulations of this multi-hour scenario.  If we can run our simulator 1000 faster than real time it will still take a month to finish the analysis. The developed architecture makes it possible to step through time when necessary and selectively jump over intervals when useful on a selective (Platform by Platform) basis.  Repeatability:  Since it is based on DEVS, a logical model formalism with a well-defined state concept, Joint MEASURETM has the ability to exactly replicate simulation runs given the same initial state (which could include pseudo-random number seeds).  Moreover, the architecture, when mapped into DEVS/HLA, can improve performance without risk of losing repeatability or inducing discrepancies since the temporal ordering of events is guaranteed by the Parallel DEVS protocol used in DEVS/HLA when running over a distributed network.Maintainability and Reusability: The modular aspect of DEVS models enforces a software engineering practice that simplifies code reuse and simplifies the construction of new federations from existing components.Portability at a high level.   The first DEVS simulation environment used was DevSim++  ADDIN ENRfu [4], as a single-processor implementation of the DEVS formalism. The high-level of abstraction provided by the DEVS formalism subsequently facilitated porting the system to DEVS/C++ and later to DEVS/HLA.Component ModelsBased on DEVS concepts, Joint MEASURE defines four basic kinds of coupled models: Generators and Transducers, (forming the Experimental Frame module) and Space Model and. Platforms.This decomposition is designed to exploit the fact that often nothing interesting is happening during some interval of a simulated scenario.  By exploiting this fact we can produce significant performance gains beyond that achieved by the use of a discrete event simulator. Each of these classes of models is described briefly below.  The Space Model is then discussed in somewhat more detail.  GeneratorThe Generators (one of the components of the Experimental Frame) are relative simple models in Joint MEASURE.  Only one Generator can be instantiated in a given simulation.  The Generator is responsible for instantiating platform models and interfacing with external simulations or models outside the scope of Joint MEASURETM.PlatformsPlatforms represent the systems that are to be evaluated.  Platforms have: a location in the world; they have spatial extent; they can be collided with and they are potentially detectable.  Platforms may also: actively or passively sense the world around them; move their location; generate emissions of various sorts; launch sub-platforms such as lasers; participate in physical transfer operations and fail for a variety of reasons.  Multiple Platforms can be instantiated in a given simulation.  The standard Platform model is a coupled model containing three singly instantiated (coupled) models: the Hull model, the Global Status model and the Subsystems model. The Hull coupled model models the structure of the platform. It knows about the relative locations of the subsystems onboard the platform and routes the transfer of material and data to them and between them with the appropriate temporal delays.  It also models the impact of collisions and detonations on the viability of the platform itself and on the conduits that connect the various subsystems.The Global Status coupled model generates and maintains a model of the aggregated appearance (response to other platforms’ emissions, e.g., IR signature) and capability of the platform for the consumption of the world beyond the platform.  That is, what does this platform look like and sound like at the current time and what are its current capabilities (e.g., could it detect a radar burst from another platform).   The Space Model, discussed below, is the primary consumer of this data.The Subsystem coupled model models the various subsystems onboard the Platform.  The standard Subsystem model is composed of the following six (coupled) models: a Sensor-Transceivers model; a Weapon-Launchers model; a C3I model; a Stores model; a Mechanical model and the Subsystem Router Model.The Sensor-Transceivers component includes all the sensors and active emitters on board the platform.  The Weapon-Launchers component includes all the weapon systems on board the platform.  The C3I model models the decision processes on board the Platform.  The Stores model models the renewable and consumable resources of the platform.  The Mechanical model models the propulsion, maneuvering and effector capabilities of the Platform. Finally the Subsystem Router Model both facilitates the modeling of how the various sub-systems exchange data and stores and improves the reusebility of the sub-system models by the creation of standard interfaces. TransducerThe Transducer model (the other component of the Experimental Frame) is responsible for: gathering data, performing simple analyses, generating dynamically updating data displays and creating and updating analysis databases for later detailed statistical and mathematical examination.  The runtime data display sets are graphically updated in 3D at the end of every N simulated runs.  This capability has proven to be especially useful for early detection of scenarios that have been specified incorrectly or have not been specified so as to produce ‘interesting’ results, e.g., when none of the Platforms ever detects a Platform with an opposing affiliation.The databases are generated in a generic format that is readable by multiple tools such as PROPHET, a statistical visualization module developed for life science research which has useful tools for examining characteristics like ‘survivability’ on top a robust set of standard statistical and modeling tools. EMBED PowerPoint.Slide.8  Figure  SEQ Figure \* ARABIC 3  Joint MEASURETM ArchitectureSpace Modeling InfrastructureJM includes an intelligent model of the ‘space’ enclosing the platforms.   This Space Model performs two important functions.  First, it infers when interesting encounters will occur between pairs of moving Platforms and provides such spatial encounter prediction services to the Platforms resulting in significant simulation performance improvement.  Second, it determines the propagation losses and delays of various emissions and how much noise the environment will add to a signal.  It then propagates the emissions of a Platform to other ‘within range’ Platforms capable of receiving them.  These two functions are localized in components of the Space Model as illustrated in Figure 3.  Additionally, to maintain knowledge of Platform whereabouts the Space Model includes a Logger component. Spatial Encounter PredictionThe Space Model predicts interesting spatial relationship events and informs the various Platforms so that they are not unnecessarily attempting to interact.  In order to make these predictions the ‘trajectory’ of a platform must be known by the Space Model.  The Spatial Encounter Prediction (SEP) component currently knows about the following kinds of trajectories: Rhumb line (constant heading) with constant elevation changes; Great Circle (shortest distance) with constant or ballistic elevation changes and orbital trajectories (without atmospheric drag).  The Platform is responsible for updating the Logger anytime the Platform’s trajectory parameters change.The SEP can produce a number of spatial encounter predictions with what it knows about any two Platform trajectories.  These predictions currently include: the time at which they will be at their closest point of approach (potentially a collision) and the first and last time they will be: ‘over the horizon’; within a given distance; within a given azimuth angle or within a given elevation angle. It can also make optimistic estimates of the probability of detection and inform a sensor when that probability is exceeded.   The Space Model also predicts at what point in time, if at all, a Platform will ‘run aground’.  Platforms subscribe to encounters of interest and are informed of them at the appropriate point in time.When Platforms exploit this information effectively, significant simulation efficiencies are achieved as a consequence of jumping over dead time intervals (when no Platforms are interacting) and by limiting which Platforms are time stepping to those that are potentially interacting. Emission PropagationThe Emissions Propagator component of the Space Model propagates emissions with their appropriate propagation losses, delays and associated background noises.  Platforms are limited to two forms of interaction: physical transfers (e.g., supplies or fuel) and emissions.  Emissions cover: pressure waves from explosions; acoustic noise (self-generated and reflected), and electromagnetic emissions (self-generated and reflected).   Emissions can carry semantic content or they may not.   EMBED PowerPoint.Slide.8  Figure  SEQ Figure \* ARABIC 4  Space Modeling Layer in JM ArchitecturePropagation loss (i.e., how much of the source signal strength remains when the signal arrives at the destination’s location) is a function of both the distance traveled and the nature of the environment. Both factors (distance and environment) similarly influence propagation delay (i.e., how long it takes for the signal to transit from the source to the destination). And finally noise (in which the signal is embedded) is a function not only of the environment but also of the other Platforms in the region.  These delays (especially in the acoustic realm) and losses can be significant.  Furthermore, the environmental influences themselves can be dynamic as wind, rain and fire change the nature of the medium that is being transited through.  For these reasons the Space Model includes as a component, a model of the environment (integrated with a GIS system).  Emissions received by the Space Model are passed on (when transmission is not blocked by terrain), at the appropriate point in time (with the signal strength diminished and embedded in noise), to all Platforms that have functioning receivers (of the right sort) that conservatively might detect the signal.Generic Space Management ServicesThe functionality afforded by the Space Model has proven to be essential in meeting the speed and accuracy demanded by systems-of-systems mission effectiveness studies. Recognition of the generic and reusable nature of the encounter prediction and emission propagation services has led to a redesign in which the Space Model will be split apart from the Platform models and migrated to become an infrastructure layer atop DEVS/HLA.  This infrastructure provides capabilities that go well beyond those of the current HLA Data Distribution Management services based on routing space concepts.  For example, whether infrared radar emissions reach a target (dependent on signal propagation, noise, and terrain characteristics) is not easily captured by a simple intersection of publish and subscribe regions of the detector and target, respectively. We are currently investigating how, and whether it is feasible, to integrate the Space Model infrastructure with the routing space services of HLA. Integration with the quantization-based message filtering supported by DEVS/HLA has been accomplished.Joint MEASURETM  Applications and Distributed Simulation Issues Joint MEASURETM has been used to perform analysis on advanced surface ships, underwater vehicles and various sensor systems -- underwater, terrestrial, airborne and space-based. Current and planned applications we will discussed together with the distributed simulation issues they raise.SBL (Space-Based Laser) – This is a study of alternative high-energy laser constellation architectures that is distinguished by the enormous volume of analysis it requires.  Since the study is in the initial stages, there are a large number of alternatives to examine (For example, how many space-based lasers, what orbits to use, what orbiting frequencies, whether to use relay mirrors, etc. In addition there are combinations of space-based and ground-based sensors which significantly multiply the alternatives that need to be considered. Finally, there may be several alternative missions, besides the main one of detecting ballistic missiles, such as space control, ground-based surveillance, etc.) This large number of architecture-level alternatives, when multiplied by the number of experiments required to investigate each to an acceptable level of confidence, yields an enormous number of simulation runs. Such a workload demands the speed and repeatability afforded by Joint MEASURETM through its Spatial Modeling features and DEVS-based high-performance parallel/distributed simulation executing over HLA.JCTN (Joint Composite Tracking Network) – The objective is to analyze the utility of measurement-based fusion of sensor data obtained in real-time from a variety of sources, including satellite-borne IR, reconnaissance aircraft, and Thadd. The questions address fundamental feasibility issues, such as: can composing such multiple sources be done fast enough and with sufficient accuracy and quality to be useful for a missile interception? Developing credible answers requires access to remote Lockheed Martin models and authenticated data, such as from the Aegis, SBIRS, and Thadd . Distributed simulation enables federating such models within Joint MEASURE. SBIRS Low – Optimal design of an IR satellite constellation is the goal. This project will necessitate distributed collaborative development and will eventually require system simulations with hardware in the loop and support for real-time execution.  Because of the possibility of unpredictably jumping over intervals of time, hardware and man-in-the-loop simulation are not currently possible with Joint MEASURETM.  However, the emergence of commercial real time RTIs together with the ability to execute DEVS models in real time ADDIN ENRfu [5-7] provide a development path for real time execution of JM models. Further the integration of live, virtual, and constructive simulation will require extending DEVS/HLA to support refining performance based simulation models so that they can exhibit the behaviors required for real-time control. Eventually, this would enable Joint MEASURE to support all life cycle, especially design and test, phases of Simulation-based Acquisition.DD21/Deepwater – This major Navy and Coast Guard ship design program requires analysis of system-of-system options. It demands complex scenario modeling and will eventually require including persons in-the-loop.  Originally, the Medusa simulator was developed by GES to study the Aegis warship’s ability to detect and intercept missile threats. However, the model considered only a single missile attack on a motionless ship.  Subsequently, the need arose to embed the ship’s sensor in a more realistic environment of multiple missiles, ship’s motion, and air and sea emmision propagation effects.  The shortest route to achieving this embedding was to couple Medusa with the non-HLA compliant predecessor to Joint MEASURE.  However, reluctance to share source code (even though GES was now incorporated within Lockheed Martin) made this coupling difficult to achieve in a completely satisfactory manner.  EMBED PowerPoint.Slide.8  Figure  SEQ Figure \* ARABIC 5  DEVS /HLA Supporting Integration of Heterogeneous Distributed ComponentsThe reincarnation of JM as an HLA compliant environment enables its interoperability with model components spread around the Lockheed corporation and beyond.  In particular, the DEVS Bus concept provides a basis for wrapping non-DEVS models within DEVS components enabling DEVS/HLA to support integrating legacy or other simulation software. In application to DD21 development, JM will be coupled to an OPNET model of an inter-satellite communication network as well as to a warship model that extends the Medusa legacy simulation code. Figure 5 illustrates our approach to such integration of heterogeneous model components ( where each is represented by a DEVS federate in DEVS/HLA. In such federations, owners of components can retain complete control of their models since they remain at their own sites. Further, provided that the appropriately specified SOM, FOM and DEVS interfaces enable proper coupling of components, the latter can be inter-operated at the object code level without requiring source code integration. This obviates thorny issue of  ‘proprietary’ concerns of participating Lockheed groups.ConclusionJoint MeasureTM exploits the advantages of DEVS and HLA to support the high-performance and accuracy demands of analytic mission effectiveness studies for complex systems.  Its distributed simulation capability provides an end run around proprietary issues of concern to participating federates in a commercial environment.  It is being extended to address migration of simulation models to real time operation and other life cycle support functions needed for Simulation-Based Design.  One key to meeting speed performance requirements is the computation efficiency afforded by spatial encounter prediction and its ability to reduce communication events among mobile, interacting platforms without impacting simulation fidelity.  A spatial modeling infrastructure is being designed with the goal of enabling components with the appropriate interfaces to interoperate and enjoy the advanced space management services. However, the ability to efficiently interoperate with arbitrary HLA federates is not guaranteed since HLA routing space mechanisms are not sufficiently powerful to provide the needed data management services.References ADDIN ENBbu 1.	Zeigler, B.P., et al., The DEVS Environment for High-Performance Modeling and Simulation. IEEE C S & E, 1997. 4(3): p. 61-71.2.	Zeigler, B.P., et al. Implementation of the DEVS Formalism over the HLA/RTI: Problems and Solutions. in SIW. 1999. Orlando, FL.3.	Zeigler, B.P., et al. Bandwidth Utilization/Fidelity Tradeoffs in Predictive Filtering. in SIW. 1999. Orlando, FL.4.	Hong, G.P. and T.G. Kim,  A Framework for Verifying Discrete Event Models  Using A Dual Specification Approach. Trans. Soc.Comp.  Sim., 1996.5.	Zeigler, B.P., et al. Distributed/Real Time Simulation:  Integrating Legacy and Modern Codes. in Int'l Conf. Env. Sys., Soc. Aut. Engr. 1998. Danvers, MA.6.	Seong, M.C. and T.G. Kim. Real-time DEVS Simulation: Concurrent, Time-selective Execution of   Combined RT-DEVS Model and Interactive EnvironmentReal-time DEVS Simulation: Concurrent, Time-selective Execution of   Combined RT-DEVS Model and Interactive Environment. in SCSC. 1998. Reno, Nevada.7.	Hong, J.S. and T.G. Kim, Real-time Discrete Event System Specification Formalism for Seamless Real-time Software Development. Discrete Event Dynamic Systems: Theory and Applications,, 1997. 7: p. 355-375.STEVEN B. HALL is a senior technical manager at Lockheed Martin Missiles and Space Corp., Sunnyvale, CA. BERNARD P. ZEIGLER is Professor or Electrical and Computer Engineering at the University of Arizona, Tucson. He has written several foundational books on modeling and simulation theory and methodology. He is currently leading a DARPA sponsored project on DEVS framework for HLA and predictive contracts. He is a Fellow of the IEEE.HESSAM S. SARJOUGHIAN is Assistant Research Professor of Electrical and Computer Engineering at the University of Arizona. Currently, he is leading the design and development of collaborative modeling tool to support distributed simulation. This work was supported in part by Advance Simulation Technology Thrust (ASTT) DARPA Contract N61339-97-K-0007. A coupled model in DEVS is a model that encapsulates other models.