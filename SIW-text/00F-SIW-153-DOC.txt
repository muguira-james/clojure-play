Collaborative Development using MATLAB®/Simulink and OSim Simulation ModuleJean-Pierre Bélanger, Christopher Strang, Michel Nadeau & Lily LamOriginalSim Inc.5524 St. Patrick, suite 302Montréal, Québec, Canada H4E 1A8www.originalsim.comemail: jpbelanger@originalsim.com HYPERLINK mailto:cstrang@originalsim.com cstrang@originalsim.commnadeau@originalsim.comllam@originalsim.comKeywords:MATLAB®,Simulink, OSim Simulation Module,COTS toolsABSTRACT: The MATLAB® and Simulink® products from Mathworks have proven to be a tremendous asset to analysts and modelers for simulating the physical and behavioral aspects of objects used commonly in simulation.  OriginalSim’s products, OSim Simulation Module® (OSim S/M) has demonstrated that an object oriented framework can be of tremendous value when developing HLA compliant simulations and OSim e-Engineering Chains® is a collaborative environment, structured on the concepts of SBA, that integrates the modeler/analyst environment with simulation and system engineering.  This paper will outline the integration of these COTS tools in support of the FEDEP process to provide a path to bring existing MATLAB® and Simulink® assets into the HLA world and provide a synergistic Collaborative Environment that will address new developments using these tools.  The solution will demonstrate its scalability to propagate throughout the Software Engineering process.   This solution is currently under development with the involvement of all parties concerned to realize its fruitful completion.  Mathworks and OriginalSim have installed their respective products and provide expertise in that domain, while NAIC of the USAF has a wealth of legacy MATLAB® models and Simulink® developments and Boeing is providing the System integration and development expertise to the overall project.  This paper outlines a development activity that integrates all components of a simulation environment that will see end users, system integrators and software vendors collaborate to deliver HLA compliant simulations using the collaborative concepts of SBA..1.	IntroductionSimulation and Modeling has always been viewed as a science and an art, as it brings together many varied disciplines of expertise and experience. It is in this diverse skill set and experience that is the greatest of challenges for the System Integrator and the system engineers responsible for the ultimate total system performance.  Each of these many disciplines have a unique perspective on the simulation and each has specialized software, both COTS, GOTS and proprietary tools that facilitate the execution of their individual tasks in the design and development process.   The challenges facing the Modeling and Simulation industry is to integrate these tools, within an infrastructure that facilitates the unique and specialized contribution of each discipline and still provides a standardized process that is repeatable, predictable and efficient.  The FEDEP model is a process that fulfils the requirements outlined above, but does not address the integration of these software tools.  This paper discusses one such integration that will benefit a select group of modeling and simulation professionals that utilize COTS tools and wish to reap the benefits of integrating this new capability into their development process.MATLAB® from Mathworks is the language of technical computing preferred by engineers and analysts. Its robustness and capability has made it one of the most popular tools in the M&S industry.   Simulink®, also from Mathworks combines an intuitive graphical environment with powerful numerical analysis capability to enable interactive modeling, simulating, and analyzing model based and system-level designs of dynamic systems. Simulink enables you to build graphical block diagrams, simulate dynamic systems, evaluate system performance, and refine your designs. The MATLAB®/Simulink® combination offers immediate access to an extensive range of analysis and design tools.  OSim Simulation Module®, from OriginalSim is a framework for building Object Oriented Simulation components with the option of generating executable code, compliant to HLA standards.  The use of these tools in an infrastructure of collaboration to facilitate a repeatable process would be of tremendous benefit to the modeling and simulation community.  It would provide some standardization as to how legacy models and new models based on MATLAB® and Simulink® could be made available and interoperable while adhering to the HLA standard.  This potential reuse and accessibility has been a desired capability for many years.2.	RationaleThe need from the user community arose with NAIC of the USAF where MATLAB® and Simulink were used by engineers and analysts to model physical behavior and performance of weapon platforms. However these MATLAB® and Simulink® users have little knowledge of the simulation requirements and potential downstream use of their models.  This was the responsibility of Simulation specialists.  Their responsibility was to deliver these representative models as HLA compliant components using OSim Simulation Module®.  Their expertise was in real time operability and interoperability of the models for use at the NAIC and the USAF, and not in the use of MATLAB® or Simulink® or in the behavioral aspects of the weapons platform.  The need to deliver these HLA compliant components would require a collaborative effort of both the MATLAB®/Simulink® users and the OSim Simulation Module® users.  To support this need, a tool integration effort has been initiated in concert between Mathworks and OriginalSim, with Boeing acting as the System Integrator. The development environment discussed in this paper involves the use of MATLAB® and Simulink® by the analysts and modelers and the use of OSim Simulation Module® by the simulation developers and OSim e-Engineering Chains® as a centralized repository for collaboration during the design and development stages of the FEDEP process.  Boeing was the system integrator and provided first line support to the users at NAIC.  Building on past experience in simulation reuse based on Simulink® [1] we wanted to make use of the lessons learned from this effort and to address issues that arise from its findings. It has been shown that by using the code generation capability of Real-Time Workshop, an add-on to Simulink®, a model represented as block diagrams could be converted to C code with a significant gain in speed over execution in its native mode. By developing an HLA wrapper for the code-generated model, it could be turned into an HLA compliant component and execute at an acceptable speed for soft real-time distributed simulation. However, several issues need to be addressed.It appeared that a unique wrapper must be developed for each simulation according to the underlying simulation requirement and time management strategy. There is also an inherent inefficiency in using ordinary automated configuration management tools, which ended up tracking changes that are irrelevant to the utility of the model. Changes due to cosmetic adjustments to screen coordinates ended up obscuring the more significant algorithmic changes. In addition, there is the issue of cross-domain collaboration between the group of modeling analysts and the simulation specialists, neither of them being expert in object-oriented programming practices which makes component based reuse effective. The challenge would be to provide them with a Collaborative Environment reminiscent of the strategy set forth by the recent SBA Architecture [2],[3] and the subsequent developments [4].ObjectiveThe main objectives are related to scalability, HLA compliance, reuse, performance, OSim S/M® integration, and cost.3.1 Scalability and HLA ComplianceSimulink® models have been typically developed and executed in closed experiments where limited number of players are involved and the exact objectives of the experiment are known in advance. With HLA, there are new requirements to enable the use of these models in large-scale distributed HLA compliant simulations.The objective is to transform these Simulink® models into HLA-compliant, soft real time models the easiest way possible.  Since Simulink® users typically have very limited programming skills and are not interested by low-level tasks like making their models HLA-compliant. The most desirable solution would take one (ultimately many) Simulink® model and automatically convert it into a federate that the user may modify or extend easily.The proposed solution will have to demonstrate the following capabilities: Inside the context of a RPR-FOM based federation, an aircraft will fly using a 6-DOF Simulink® dynamic model. This model may contain MATLAB® functions that will probably require some conversions to Simulink® S-Blocks. The simulation will be viewed using a MaK Technology’s Stealth Viewer®.3.2 Reuse and PerformanceReuse is one of the underlying objectives of HLA. In order to reuse the Simulink® model federates, it should also be possible to modify the original Simulink® models and regenerate code for them while preserving additions,  performed by the user, to the federate. A parallel objective is to ease reuse by implementing a web based model repository offering meaningful configuration management and search capabilities.For execution performance reasons, Simulink® models need to be C code generated and compiled using Real Time Workshop® (RTW), another product from Mathworks. Therefore, the integration must be performed at the level of RTW generated C code.3.3 Cost savingsOf course, no runtime or license fees should be required after output from RTW and for executing the federates.3.4 OSim S/M® provides a solution.OSim S/M is an integrated environment for building distributed simulations. OSim S/M® is targeted at domain experts that have limited C++ programming experience. Among other things, it generates code for user interfaces and distributed communication. It has the power to take a simulation and easily turn it into an HLA-compliant federate. Since OSim S/M® performs these tasks almost automatically, it is natural to use it as an HLA-compliant wrapper for Simulink® models. Interfacing Simulink® models to OSim S/M would therefore indirectly provide HLA-compliance. The goal of this wrapper is to define HLA-compliant C++ simulation classes bridging Simulink® and OSim S/M®. The simulation classes define a mapping of the Simulink® model’s output and input requirement to that of the federate according to the SOM. For instance, Simulink® model outputs could be assigned to class attributes that perform attribute updates on the RTI. Simulink® model inputs could be connected to attributes that receive value updates reflected from the RTI. Interaction could be converted to data usable by Simulink® models.  Other utility classes could perform the functions to initialize/step/terminate the Simulink® model.4. 	The Work PlanWe have divided the task into the following sub-goals:As a starting point, we made the decision to use an F14 Simulink® Model. The first sub-goal is to use RTW to generate code for the F14 Simulink® model and analyze it to see how to parameterize its execution, how to export data, how to import data from outside world and how to integrate with an external simulation engine.As a proof of concept, we manually modify the RTW generated code to interface it with OSim S/M®. The goal is to verify the previous sub-goal and to make sure that we can make the desired interaction with Simulink® models (initialize, send data, receive data, etc). Add HLA compliance; our federate must be able to receive interactions or data from the federation and send data out.Analyze what kind of automation is required to automatically perform the steps manually achieved during previous phases and generalize them as much as possible.Implement automations at the OSim S/M® level (import or code generation) and provide GUI if required.Test with other Simulink® diagrams. Refine integration.Implement a web-based repository using OSim for e-Engineering®.4.1 The proof of concept.To achieve steps 1 and 2, we’ve built the following proof of concept: With minimal work, we’ve generated code for the F14 Simulink® model using RTW. This code consists in C source files and header files. One of these source files contains the main() function and performs initialization, loops to step through model execution and performs cleanup. Another file contains the F14 model’s generated C code with a function to be called by the main loop at each major integration step. Various data structures and global variables describe the simulation’s state. Other Simulink® utility object files are also produced from RTW for use at link time.We manually extracted code from the main() function to build 3 code segments to be incorporated into our OSim S/M® class library: Initialize, Step through model and Terminate. An OSim S/M® class library is a collection of simulation classes that a user can define using the OSim S/M builder. We have defined a class library that interfaces with C code generated from RTW. Inside our OSim S/M® class library, we have defined two classes: a F14 simulation class and a SimulinkManager class. The SimulinkManager class has a constructor that invokes the model’s Initialize code. It also has a destructor that invokes the terminate code. A schedulable function invokes the Simulink® model’s step function at a rate dependent from the integration step. The F14 is an RTI-aware class with a schedulable function that applies a value to one of the model’s input. Another schedulable function copies model outputs to exported and published RTI attributes. OSim S/M® code generators automatically generate HLA-compliance and the resulting executable is linked with RTW-generated C files.The simulation execution is paced to soft real-time by the OSim S/M execution engine.4.2 RTW code generation and current limitationsSince we are targeting the same platform for execution and development, we have picked RTW’s Generic Real Time (GRT) code generation for higher flexibility. Also, GRT supports continuous state/time models as opposed to Embedded Real Time (ERT).  Also, GRT’s generated code permits S-functions written in C (including those derived from MATLAB® code). Using GRT as opposed to using Simulink® “natively” implies the following limitations: MATLAB® Functions and S-Functions that calls into MATLAB® are not supported. It is required to convert MATLAB® Function (written in M-code) to a Simulink® S-Function. The generated S-Function can be now accessed through the S-Function block. Here are the restrictions: The MATLAB® function must only have 1 input argument and 1 output argument. The generated S-Function can be used only within Simulink®. If the M-Code MATLAB® function implements a continuous-time system, then that function should output the derivative only.Solution to restriction 1 is trivial since a simple MATLAB® wrapper routine that adheres to the Simulink® calling syntax can be constructed. This wrapper can call the original MATLAB® function.In response to restriction 2, MATLAB® compiler-generated S-Functions are only intended to be used within the Simulink® environment. However, it should be possible to use the generated S-Function source-code within a RTW project. This would be achieved by following the steps below: Create a template makefile that includes the additional source code generated by the compiler (e.g. when the compiler is invoked on aircraft_derivs.m the following files are generated: a) aircraft_derivs.c b) aircraft_derivs_simulink.c c) aircraft_derivs.h In the link-stage specification, include a directive to link the object code to the C/C++ Math Libraries for your platform. In response to restriction 3: this is not a major limitation. If continuous-time models need to be solved, then the MATLAB® function should output the state derivative of each time-step. E.g. if the equations of motion are:x_dot = f(x,u,t)y=g(x,u,t)Where x is the state-derivative, x_dot = dx/dt, t=time,u= system input, y=system output,Then the output of the MATLAB® function should be x_dot. Integration of x_dot to form x should come from additional Simulink® blocks. 4.3 Manual steps to turn a Simulink® model into a federate.Given that we want to build an HLA-compliant wrapper to the Simulink®’s RTW generated code in a way that is not too intrusive to avoid compromising maintenance, a programmer must typically follow these steps:RTW must be invoked to generate code for Generic Real Time (GRT) target. The user must get rid of the generated code’s main() function and replace it with 3 exported functions for initializing model execution, stepping model execution and terminating model execution.The user must program the HLA wrapper separately in C++, programming a few thousands of lines of code bridging the RTI attributes with the models and blocks’ inputs and outputs.If the federate must conform to a specific FOM (RPR FOM, for instance), he must add these concepts, including RTI-awareness into his wrapper.The user must create a new main() function and invoke the model’s initialize function before joining a federation execution, periodically invokes the function to step into model execution after the RTI is ticked and invoke the model’s terminate function before exiting.The user must build a make file to link everything together and cross his fingers that everything will work the first time!Not to forget that on exceptional cases, Simulink® models depending on MATLAB® functions will require a few transformations:MATLAB® functions must be turned into S-Functions accessible from S-Function Blocks.Code must be generated for the S-Functions.Makefile must be edited to link with generated code.There is no doubt that these repetitive tasks are out of the scope of analysts and domain experts who are typical users of Simulink®. Because of the intrinsic repetitive nature of these tasks, several automations are possible.4.4 Targets for automation.Ideally, the user would like to automatically turn a Simulink® model into a federate. In general, this task consists of specifying which reflected attribute value should be assigned to an input and which output should be assigned to an updated attribute.Regarding HLA compliance, almost everything can be automated, as proven by automatic HLA C++ code generation, already implemented into OSim S/M®.For an OSim S/M® user, the main difficulty consists in mapping input/outputs to simulation classes data members. With some minimal human intervention, an HLA compliant Simulink® wrapper tool could be built to generate an HLA-compliant OSim S/M® class library. This application would in fact do limited parsing of RTW generated files and extract information about input/outputs and ask the user how things should be mapped. The output would be an HLA-compliant class library that already contains C++ code mapping data members to models and blocks’ inputs and outputs. The user would be asked to pick a set of inputs and outputs and tell how they should be mapped. The resulting class library could be extended by the user to perform extra tasks like attribute ownership management, interaction handling or any pre or post processing of information.4.5 Proposed use case.The following is an example use-case of how a Simulink® user would use OSim S/M® to build a Simulink®-based federate.User builds Simulink® Diagram.User may have to convert invocations to MATLAB® functions into S-Functions.User may have to invoke RTW to generate code for S-Functions.User invokes RTW to generate GRT code for Simulink® model.User saves diagram and exit.User starts OSim S/M’s Simulink® Model Import Tool (SMIT).SMIT asks user for location of RTW generated files.SMIT asks user which HLA-compliant class name will be associated with the model.SMIT asks user which model inputs the user wants to control.SMIT asks user which data member name and type should be associated with the controlled input.SMIT asks user about the Simulink® model parameter values to set inside OSim S/M’s instance space file.SMIT asks user if he wants to map other individual blocks.SMIT generates an OSim S/M® class library containing a FederateManager class, a SimulinkManager class and a RTI-aware class that contains all the necessary functions to map input/outputs to RTI-aware exported data members.User starts OSim S/M® and opens the generated class library.User waits for compilation.User creates an instance space containing one instance of FederateManager, SimulinkManager and the RTI-aware class.User starts the rti executive.User starts the OSim S/M® execution engine.An instance of the RTI-aware class is registered on the RTI.Model outputs are exported from the federate through updated attributes.Model inputs are received from reflected attributes.User optionally modifies the class library to perform extra higher-level tasks or refine input/output mapping.5. 	Progress to dateWe have currently realized the first 3 steps of our work plan. Our current experience has successfully demonstrated the feasibility of almost automatically converting a Simulink® model into a federate using OSim S/M®.As this paper is being written, the SMIT conversion tool is currently under development and will be presented at the 2000 FALL SIW.The next steps will require commercialization of the SMIT tool and ongoing testing with other Simulink® diagrams to refine our integration.Following this work, the next phase will focus on facilitating team collaboration and reuse through an integration with OSim e-Engineering Chain® in order to overcome the difficulty of performing meaningful configuration management and version control and to provide an e-Enterprise level web-based repository of models with search capability.6. 	ConclusionThe integration of these COTS tools hold great promise in many ways as the Modeling and Simulation community evolve to HLA compliance and additional reuse of existing models and ongoing developments.  Perhaps the greatest contribution will be in providing a well-documented and repeatable process to bring legacy models into the HLA environment.  There are additional COTS tools that address important elements of the development process such as requirements, V&V, test and evaluation that will need to be addressed before the full magnitude of efficiencies can be realized.  A technology such as OSim e-Engineering Chains® will play a pivotal role in providing the collaborative environment and searchable repositories needed to fulfill the vision of automated development processes across disciplines, organizations and technologies. 7.	References[1]A. Robins, D. Philbrick, P. Bowen, R. Klabunde: “Commercial Visual Programming Environments: One Step Closer to Real Simulation Reuse” AAIA Modeling and Simulation Technology Conference 1998[2] R. Frost, D. Thomen: “Simulation Based Acquisition, The Road Map” March 1999.[3] R. Lutz, J. Keane:”An Architecture for Simulation Based Acquisition”, March 1999[4] J.E. Coolahan, J. Keane, C.H. Sinex: “SBA Collaborative Environment Concepts for Mission and Product Areas” March, 2000.JEAN-PIERRE BÉLANGER holds a B. Comp. Sc. from Laval University in Ste-Foy, Canada.  Mr. Bélanger has previous experience as programmer and system architect. His expertise includes computer graphics, electrical network simulation, multi-platform development and Object Oriented Analysis and Design. He is currently OSim S/M Product Development Manager at OriginalSim Inc. in Montréal, Canada.CHRISTOPHER STRANG holds a B.A.SC. and  M.A.Sc from the University of Waterloo in Waterloo, Canada.  Mr. Strang has previous experience with manufacturing simulation, cockpit design and development of operational Air Traffic Control and C4ISR systems.  He is currently, Vice President of Business Development at OriginalSim Inc. in Montreal, CanadaMICHEL NADEAU holds a B. Electrical Engineering from Ecole Polytechique in Montréal, Canada. Mr. Nadeau has previous experience as analyst and programmer. His expertise includes more than 12 years in GIS/AM/FM development and implementation. He is currently a Senior Application Engineer at OriginalSim Inc. in Montréal, Canada.LILY LAM holds a M. Comp. Sc. from McGill University in Montréal, Canada. Ms. Lam has previous experience in speech recognition expert system, and the development of computer-aided environments for flight procedure design and airspace simulation. She is an accredited Project Management Professional. She is currently Vice President of Research & Development at OriginalSim Inc. in Montreal, Canada