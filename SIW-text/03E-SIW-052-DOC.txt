Generic Models in Advanced Simulations (03E-SIW-052)Martin RudolvssonAndreas BengtssonEricsson Microwave Systems ABBergfotsgatan 2SE-431 84 M√∂lndal, Sweden HYPERLINK mailto:Martin.rudolvsson@emw.ericsson.se martin.rudolvsson@emw.ericsson.se, andreas.bengtsson@emw.ericsson.seKeywords:Generic model, Radar, C4I, SBAABSTRACT: How do you define the structure of a simulator model taken into account all future development aspects? Is it possible to simulate the behavior of several target systems, using few generic models in order to make an adaptable system? The solution is usually a trade-off between flexibility and accuracy. The ‚Äúoptimal solution‚Äù is probably unobtainable, but the early adopters of RAMOS (Radar Model for Simulators) and EOPS (ERIEYE Operator Simulator) have shown their appreciation for the designs. Both architectures are designed for the diversity of user demands and ideas, within a defined scope. For example, RAMOS has been used as several HLA federates in a NCW (Net Centric Warfare) environment as well as fighter radar in an air combat simulator.The generic, parameter controlled radar model RAMOS was primarily developed for fighter radar applications. The model is designed as a generic radar model using parameter files to control performance and characteristics of any radar system.  This design makes it possible and easy to simulate not only fighter radar but also AEW-systems, ground surveillance radar and anti aircraft radar. RAMOS does not have any hard connections to any platforms, which makes it ideal as a platform/environment independent model. EOPS, a C4I (Command, Control, Communications, Computers and Intelligence) model, is an ideal model partner for operative SBA (Simulation Based Acquisition) evaluations. Studies have been carried out merging EOPS and RAMOS to make a very capable simulator node to cover the whole arena from fighter pilot tactical evaluation to operative decision support functions. Both EOPS and RAMOS have open architectures and object orientated designs allowing quick and cost effective cycles in the SBA proposal, evaluation and trial process.1. IntroductionSimulations are widely used today in many areas. In the military field, simulations can be run to decide the configuration of the defense for a certain area or to decide how to develop the defense to get maximum protection with current or future forces. Another widely used area is training simulations, where combatants can practice and improve fighting skill in a warlike situation. As computer performance increase, computer aided simulations become more realistic and an important tool for operator training, system design and system demonstrations.For a simulation to be an effective tool, it is very important to decide the scope of the simulation. Why is a certain simulation performed? What questions are to be tried? What kind of result is expected? Many simulators until today have been built from specialized models. Is this mainly because the result was to be as accurate as possible? Would it be possible to perform the same simulations in a simulator built from generic models, and still reach a result that is accurate enough? In this paper, we discuss the advantages and disadvantages of building simulators out of generic models, compared to building the same simulators from highly specialized models. We describe two different types of simulation scenarios, where the radar sensors are in focus, and different simulator designs capable of performing the simulations. Simulators based on generic models are compared to simulators based on specialized models.Furthermore, we briefly describe two radar-related applications (radar model RAMOS and C4I model EOPS) and how they can be combined to provide a generic simulator node that is highly reusable and flexible.2. Generic vs. Specialized ModelsThe paper discusses the use of generic or specialized models in simulators, and emphasizes the discussion to the radar sensor area. The discussion is however applicable to any field. In what type of simulations is it suitable to use generic models? How should these generic models be designed to offer a usable, and reusable, simulator node?Two different simulation scenarios are described, and how simulators can be designed to perform the simulation tasks requested.2.1 Example scenariosThere are many different areas of interest that can be studied using simulators. It can be everything from large, complex simulations (e.g. simulating a NCW network) to smaller simulations focused on a single aspect (e.g. the impact of sensor modifications). 2.1.1 NCW-simulation scenarioThis is a fictitious SBA simulation reflecting the year 2015, performed to evaluate and set requirements for future sensors, their behavior and interaction. The purpose of this simulation is to find weaknesses in today‚Äôs sensors and their use, to see how sensors and tactics can be improved to meet the demands in 2015. This scenario uses many different sensors and the goal is to detect an enemy attack with cruise missiles. Questions that this simulation could give answers to are:Will today‚Äôs sensors be sufficient for the task? What modifications are required to meet the demands? Identification of sensor requirements for different stages of the scenario.How can tactics be improved to meet the demands? What kind of sensors, and how many, are required?What type of communication and interaction is required?The simulation includes a variety of different radar sensors, each with its performance and limitations.AEW (Airborne Early  Warning) surveillance radarAerostat-based surveillance radarSurface-based surveillance radarFighter aircraft radar UCAV-based (Unmanned Combat Airborne Vehicle) radarEach sensor is communicating through a network, using network services to provide sensor data. C4I-nodes are used to command and control the sensors (e.g. position guidance, sensor activation/deactivation etc.).2.1.2 Air combat simulation scenarioThe scenario described is used for pilot tactics training simulation. The purpose of this simulation is to practice pilots in air combat tactics and to evaluate their performance. All participants act simultaneously in the same scenario. Two defending aircraft, with the backup of an AEW system is to investigate a border intrusion by a force of hostile combat aircraft.2.2 Conventional simulator designThe conventional solution to perform both simulations is probably to build two dedicated simulators, since the requirements are so different. Also, specialized models are used, either because specialized models exist that can be adapted to the current simulator or because of the initial demand for accuracy.‚ÄúScenario 1‚Äù consist of the sensor models required to simulate the NCW-scenario in addition to the basic simulator.EMBED Visio.Drawing.6‚ÄúScenario 1‚Äù requires five specialized sensor models and one C4I-model.EMBED Visio.Drawing.6‚ÄúScenario 2‚Äù consist of the models required to simulating the air combat scenario in addition to the basic simulator.EMBED Visio.Drawing.6‚ÄúScenario 2‚Äù requires an accurate fighter aircraft radar model, a hostile combat aircraft radar model and a C4I-model.EMBED Visio.Drawing.6Altogether, the two simulations require seven different radar models. This is probably a functioning way to solve the simulation problem.Would it be possible to perform the same simulations using generic models instead? In what aspects would the generic solution differ, technically and economically?2.3 Using generic models2.3.1 Generic model designWhen designing a generic model, there are a number of extra issues to consider, as compared to the case when designing a specialized model. First of all, the designer must decide the scope of the model: What type of simulations should the model support? What parts need to be generic? Should the entire model be generic or just some parts of it?Due to its capability to handle a situation in more than one way, a generic model is generally more expensive to develop. Furthermore, this capability can result in larger source code that has a more complex structure. The designer must constantly consider the balance of a generic versus a more specialized solution, and still be sure to reach the desired level of generics. Since it is a generic model, it can be more difficult to predict future demands on upgrades. These issues make it even more important that the architecture of the model is carefully designed.A generic model should have a design that separates the mathematical model from the behavior control. This enables the user to change the characteristics when using the generic model without making any changes to the actual model, much like choosing performance of a racecar in a computer game. The same generic model can be used with a different performance setup for acceleration, brakes, steering control etc. If the controllable parameters are wisely chosen, the result is a very flexible system that can be used to emulate the behavior of a multitude of target systems. This design also enables the possibility to make changes to the model behavior quick and easy, without the need for recompilation. The user, not the designer, can fine-tune the system to achieve the required performance.2.3.2 A simulator built from generic modelsA simulator based on generic models have got both advantages and disadvantages compared to one based on specialized models.Using one generic model to simulate more than one target system keeps the number of different models down. To have as few models as possible gives many advantages. In the following part, we assume that only one generic model is used instead of many specialized to simulate more than one target system.One generic model reduces maintenance time and cost. Upgrades made to the generic model, is simultaneously available to all target systems that use the generic model. This makes it easier to maintain and upgrade the simulator.One generic model makes it easier to learn to handle the system. For instance, if only one radar model is used to simulate a variety of radar systems, only the limitations of that model have to be known.By using only one generic model, simulation balance is accomplished. This means that all instances of the generic model have the same model limitations. This is especially important if the simulation is made to compare different systems. For instance in SBA (Simulation Based Acquisition) simulations where a simulation might be run to compare the current target system to a future one with certain upgrades. If the models used are out of balance it can be difficult to know if differences are due to model limitations or target system limitations. Only the data representation used by the generic model is available in the simulator. This automatically solves the problem of different data representation for different models.A simulator based on a generic model instead of a number of specialized models is in some aspects a more demanding task to use properly.It is important that the simulator user is aware of the fact that the model used is generic, and that the model limitations are known. Since it is a generic model, it is likely that some features are not 100% accurate to the targeted system. For instance, a skilled radar operator will discover any difference from the real system and point this out as a discrepancy. Also, for the simulation to be as realistic as possible, it is important that the operator acts as normal, avoiding taking advantage of any simulator limitations.Furthermore, it is important to use the generic model in the right context, hence avoiding using the model in simulations where it is inappropriate. The fact that the user has got access to a generic model does not make it a suitable model in all simulations.When simulating future target systems, generic models are suitable. Through generic models, it is possible to adapt the behavior of the target system to the requested behavior, without knowing the final target system design in detail.Altogether, a simulator built from generic models, handled wisely, offers a very flexible, reusable, cost effective and easy-to-maintain system.3. Generic Model ExamplesIn order to achieve a truly generic model, it is crucial to make sure that no behavior what so ever is hard coded (and therefore not generic). This is difficult to implement, if you want to achieve a generic model that also is capable to perform accurate modeling of a variety of target systems. There are too many possibilities to take into account, which might result in a complex and messy design. Therefore it is important to decide in what type of simulations the model should be used (in this paper referred to as the simulation ‚Äúscope‚Äù).3.1 The generic radar model RAMOSAt EMW (Ericsson Microwave Systems AB), the generic radar model RAMOS (Radar Model for Simulators) is developed. RAMOS is primarily designed to emulate the behavior of fighter aircraft radar. It is however possible to emulate the behavior of any type of radar, used to detect (and track) objects in the radar surroundings, through RAMOS generic design. RAMOS is a software library that can be included into any software unit, making RAMOS simulator protocol syntax independent. The actual simulator interface is handled by the software that include RAMOS (the ‚ÄúShell‚Äù that encapsulate the model).The RAMOS design is based on three basic rules:The mathematical model is primarily designed to emulate the behavior of fighter aircraft radar.The model does not reflect the behavior of any radar 100% correct, the generic design is more important.The behavior of the simulated radar should be controlled from outside the mathematical model, configurable at program execution start.RAMOS consist of two separate parts: the actual mathematical software model and a set of parameter files.The mathematical model is a generic model that is mainly built from three sub models:The Antenna modelThe Detector modelThe Tracker modelTogether, the three models simulate the radar behavior in a specified environment, taking jamming and clutter into account.All parameters that are controllable from outside the mathematical model are defined in the Parameter object. The behavior of the specific simulated radar is described in the parameter files (simple ASCII text files). The parameter files are loaded at startup to configure the Parameter object. This way of separating the model from the behavior control has resulted in a highly flexible and easy-to-use system.RAMOS architecture makes it possible toSimulate a variety of radar types using only one radar model.Change the radar behavior without recompilation. It is possible to decide what features are available to the operator.Tune the radar performance between simulations, simply by changing a parameter value in the parameter files.Use different operating systems by recompiling the source code, due to the fact that RAMOS has no external connections. RAMOS has been executed using UNIX on SUN workstation, IRIX on Silicon Graphics workstation and LINUX on PC.3.1.1 RAMOS early adoptersRAMOS has been in use since early 1999, when the model was installed at the Swedish Defense Research Agency simulation facility (FLSC) in Bromma, Sweden. At FLSC, RAMOS is used to emulate various fighter aircraft radar, including domestic and foreign systems of today as well as future systems. FLSC is among other things used for SBA simulations regarding future radar performance and its tactical usefulness.RAMOS is also chosen as the radar model in the following fighter aircraft simulators. PM-SIM at SAAB in Link√∂ping, Sweden, simulates JAS39 Gripen presentation and maneuvering system, and the WVR-simulator at the Swedish Defense Administration simulates JA37 Viggen to practice pilots in air combat modes.In 2001, RAMOS was used in a Swedish Defense Administration SBA simulation project, called Pathfinder, as a generic HLA sensor model. A number of RAMOS was simultaneously used in the simulation, each to emulate the behavior of either the JAS39 Gripen (multi role combat aircraft) radar, the ERIEYE (airborne surveillance) radar, the Giraffe (surface-based surveillance) radar or one of two more ground based surveillance radar systems.RAMOS is used in several simulators with different requirements, as well as different simulation interoperability protocols, to simulate various radar types. This is accomplished with only one, well-known, radar model. The only thing need to differ is the set of parameter files to configure the radar model. This makes RAMOS a very flexible and useful generic radar model. Through its generic design, RAMOS is very suitable in SBA simulations.3.2 C4I-model EOPSEOPS (ERIEYE Operator Simulator) was originally developed as a training application for ERIEYE operators, intended for use in classroom education and for personal skill training. In order to give the operators a realistic training environment, EOPS is designed to look and feel as much like the real operator console as possible. Since the customer often decides the look and feel of the operator console, EOPS has to be easy to modify in order to meet the customer demands. This is solved in EOPS by dividing the different functions into classes that the GUI (Graphical User Interface) then can use to solve specific tasks.EOPS is provided with ideal scenarios (i.e. scenarios that contain all air activity at any given time), stored in files, in order to provide the users with training scenarios. The data from the file is filtered and displayed to the operator, depending on how the operator acts. Thus, no actual radar model is included in EOPS.3.2.1 EOPS early adoptersEOPS has been used in several courses and have been adapted to two different operator consoles. It has also been used for personal skill training for employees at EMW. Furthermore EOPS has been used as a demonstrator on several exhibitions to give visitors the opportunity to try the operator console of an ERIEYE.3.2.2 EOPS modifications for RAMOSIn order to use EOPS with RAMOS, and to make this combo run in a network, certain modifications must be made to EOPS. Due to the design used in EOPS, these modifications are quite few and limited to certain classes. This means most of EOPS original code is reusable in this new application. The Scenario File I/O class is replaced with a Network I/O class to make it possible to interact with the network. Also, RAMOS functionality is added to the application to provide the application with a generic radar model. If no demands are set on the appearance of the C4I, a simpler generic GUI could be used for all tasks, but if the appearance is important a parameter file could alter the GUI to meet the demands.These simple modifications enable EOPS to act as several different nodes in a network, e.g. C4I, stand-alone radar model or a radar node with command, control and display function MMI.4. Our Suggestion to the Simulator DesignWe are looking for a simulator, based on generic models, capable of simulating the sensor part in the NCW-simulation as well as the air combat simulation. The conventional generic simulator design would probably use a generic C4I-node and a generic radar model node separately. In our case, the C4I-node would be EOPS and the radar model node would contain RAMOS. Since RAMOS is a software library and not an executable software unit, the radar model node would be a RAMOS engine using RAMOS library functions to simulate radar behavior.   EMBED Visio.Drawing.6  The two nodes are separate executable software units, each with its custom-made interfacing shell.But since we strongly have proposed a simulator built from as few generic models as possible, we want to take the solution another step towards a decreased number of separate software units in the simulator. We suggest replacing each generic C4I-model node and each generic radar model node with a ‚Äúsuper node‚Äù. In this type of node, EOPS acts as the RAMOS Engine, capable of using RAMOS library functions to also simulate radar behavior if desired.  EMBED Visio.Drawing.6  One drawback of this solution is that the software unit will be more complex in its structure than two separate software units. Furthermore, it will also handle two separate things that are not necessarily related to each other.But, the ‚Äúsuper node‚Äù design provides the simulator with a very capable simulator node. It can be set to use either the generic C4I model or the generic radar model, or both simultaneously.  Therefore, it can be used asA generic radar node, operating in the NCW-simulation (described in chapter 2.1.1), publishing radar data and subscribing radar controls. Through the generic MMI, an operator can easily interact with the simulation. A generic MMI should be sufficient since the simulation main goal is tactics development and sensor control decision support etc., not operator training.A generic C4I-node, operating in the NCW-simulation, subscribing network sensor data. In this case, the radar model is not in use.A generic fighter aircraft radar, operating in the simulation, subscribing radar controls and publishing radar data. In this case, the C4I model is not in use. Since the simulation is an operator training simulation, the generic MMI provided by the ‚Äúsuper node‚Äù probably is insufficient for the fighter aircraft radar operator. Therefore, external network nodes should handle the operator MMI, simulating the aircraft cockpit.Hence, by using the ‚Äúsuper node‚Äù design, we are able to simulate all radar systems in the NCW-scenario (the AEW surveillance radar, the surface-based surveillance radar, the fighter aircraft radar, the UCAV-radar and the aerostat-based surveillance radar) at an acceptable level, using only one type of software unit. That very same software is also used to simulate the more demanding fighter aircraft radar systems used in the air combat scenario (described in chapter 2.1.2). We also use that software to simulate the available C4I-systems, further decreasing the number of software components used in the simulator.EMBED Visio.Drawing.6Since we use the same interface protocol, we can perform both simulations using the same simulator. This makes the simulator very flexible and reusable.Furthermore, by using the ‚Äúsuper node‚Äù design, we achieve some additional effects that make the software unit suitable in distributed simulations. By combining a generic C4I model (equipped with MMI-functionality) and a generic radar model, each radar node is automatically equipped with a graphical logging system. We can easily display the data published and subscribed by the node locally, thereby getting control of the simulation contribution from each node, even if it is not interesting for the overall simulation.We would only need to implement one shell, which means that the interface handler is exactly the same in all nodes handled by the ‚Äúsuper node‚Äù. This decreases the risk of interfacing problems.During development and testing, the node can easily be run without the need for a RTI (Runtime Infrastructure) and a fully developed simulator interface description.5. ConclusionsMany simulators until today have been built from specialized models. Would it be possible to perform the same simulations in a simulator built from generic models, and still reach a result that is accurate enough?The short answer is Yes and No!In simulations where the simulation output is analyzed by equipment that require accurate behavior (e.g. authentic radar signal processing units), generic models are not likely to be suitable. Due to the generic design, it may be impossible to emulate the behavior of specific equipment 100% correct in all aspects.In many simulations, the simulation output is not handled by equipment demanding 100% accuracy in behavior and performance. The focus is to emulate the behavior of a target system at an acceptable level. The ‚Äúacceptable level‚Äù may vary widely depending on the simulation purpose. In this type of simulations, the generic radar model RAMOS have proven to be very suitable.Studies have been carried out to merge RAMOS with the C4I-model EOPS to make a very capable simulator node, covering the whole arena from fighter pilot tactical evaluation to operative decision support functions. The resulting software unit would be a highly flexible node, suitable for a variety of simulations.Using generic models, it is essential to be aware of the model limitations to avoid reaching incorrect simulation conclusions. Taking this into account, generic models in a simulator enables the simulator to be very flexible, reusable, cost effective and easy to maintain, upgrade, handle and understand. Author BiographiesMARTIN RUDOLVSSON is a Radar Software Designer at Airborne Radar Division, Ericsson Microwave Systems AB, Sweden. He has a Bachelor of Science degree in Electrical Engineering at Chalmers University of Technology, Gothenburg.ANDREAS BENGTSSON is a Software Engineer working with Support Systems Development at Sensors and Information Networks Division, Ericsson Microwave Systems AB, Sweden.= UsesParameterTrackerDetectorAntennaRadarParameter files