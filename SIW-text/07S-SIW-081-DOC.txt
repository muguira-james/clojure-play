Injecting High-Fidelity Environmental Effects into Distributed TestingRyan NormanU.S. Army Redstone Technical Test CenterHuntsville, AlabamaCSTE-DTC-RT-F-FL, Bldg. 7884Redstone Arsenal, AL 35898-8052256.313.6106 HYPERLINK "mailto:ryan.t.norman@us.army.mil" ryan.t.norman@us.army.milBill BarberU.S. Army Redstone Technical Test CenterHuntsville, AlabamaCSTE-DTC-RT-M-DYRedstone Arsenal, AL 35898-8052256.876.0149 HYPERLINK "mailto:Bill.Barber@rttc.army.mil" Bill.Barber@rttc.army.milDaniel BellU.S. Army Redstone Technical Test CenterHuntsville, AlabamaCSTE-DTC-RT-M-DYRedstone Arsenal, AL 35898-8052256.876.8418 HYPERLINK "mailto:Daniel.Bell@rttc.army.mil" Daniel.Bell@rttc.army.milMike GreeneTrideum Corporation4946 Research DriveHuntsville, AL 35805-5906256.704.6113 HYPERLINK "mailto:mgreene@trideum.com" mgreene@trideum.comKarl A. KingTrideum Corporation4946 Research DriveHuntsville, AL 35805-5906256.704.6142 HYPERLINK "mailto:kking@trideum.com" kking@trideum.comABSTRACT: In the current paradigm of distributed testing, there lacks a capability to stimulate Unit Under Tests (UUTs) with high-fidelity environmental effects.  The Redstone Technical Test Center (RTTC) Dynamic Test branch excels at capturing and modeling environmental effects to accurately test Target Acquisition Systems (TAS) performance.   As a leader in environmental effects testing, the RTTC Dynamic Branch is developing a distributed test capability to bring the effects of the dynamic environment into the joint distributed test arena.  The RTTC Dynamic Branch is executing a multi-year effort that progressively provides enhanced high-resolution environmental effects to TAS UUTs via data injection and, ultimately, projection.  This paper describes a successful demonstration of a “cradle to grave” real-time event that distributed this high-fidelity environmental data through the Test and Training Enabling Architecture (TENA) into a TAS emulation that depicted the environmental effects. This successful event demonstrated the capability to provide high fidelity environmental effects to models and simulations to make distributed testing and training more realistic.1.0 IntroductionA major shortcoming noted with current distributed test technology is the lack of realistic sensor disturbances generated by maneuvers across the simulated terrain. Thus the decisions made by operators during these exercises are not adequately influenced by the vibration of the platform that would naturally be dependent on the path and speed chosen by the operator. While there are agencies such as the Redstone Technical Test Center (RTTC) Dynamic Branch that excel in capturing and modeling environmental effects, these agencies are typically focused on acquiring environmental effects data for tasks such as developing laboratory profiles or physical simulations for life cycle or structures analysis.    The key is to find a way to find a mechanism to incorporate the expertise of these agencies and utilize their high fidelity environmental effects data into actual distributed test events.  Inclusion of the sensor disturbances in the distributed exercise would force the operator to adjust maneuvers as needed to achieve mission objectives. The result is to add validity to the outcome and to provide a more realistic training and evaluation tool. The technical obstacle to achieving this capability is the ability to apply this disturbance in a real-time or near-real-time manner. The large computation time required for structural response analysis prevents real-time computation of this disturbance.  As a leader in environmental effects testing, the RTTC Dynamic Branch is developing a capability to distribute realistic environmental effects to the models and simulation utilized in distributed testing and training events. This paper will examine efforts underway at RTTC to address this shortcoming by using the Test and Training Enabling Architecture (TENA) and thus increase the effectiveness of distributed testing and training.In order to better understand the need and benefits of environmental effects in distributed testing and training events, it is first important to understand the mission of RTTC Dynamic Branch and the capabilities of TENA.2.0 RTTC Dynamic BranchThe Dynamic Test Branch of the Redstone Technical Test Center is a state-of-the-art facility whose mission is to provide testing and technical support to ensure hardware will survive and successfully perform in their expected dynamic environments. To accomplish this mission, the Dynamic Test Branch uses a multi-faceted approach that includes Field Data Acquisition to characterize the dynamic environment, Modeling and Simulation to predict structural response, and Laboratory Shock and Vibration Testing to expose hardware to the dynamic environments. The cornerstone of this approach is the measured field data which must accurately represent the dynamic environment in the field in order to conduct a realistic laboratory test. Great care is taken to acquire field data and apply valid statistical computations in order to ensure that the test conducted is representative of the expected field conditions. This approach has been used effectively to add realism to the dynamic evaluation of military hardware and it is expected that the same approach can be used to add realism to distributed test and training exercises. As one of the primary services that the Dynamic Branch provides, Road/Mobility Testing and specifically field-induced data acquisition for laboratory profile development and physical simulation was of most interest to this effort.  This data acquisition tasks involves instrumenting test vehicles with various transducers (e.g., strain gages, accelerometers, etc.) and traversing various road surfaces anticipated during deployment. The resulting dynamic data is analyzed and laboratory profiles or physical simulations developed to duplicate the induced environment in the laboratory on dynamic test equipment such as vibration exciters or shock machines. Verification of computer models and analytical simulations may also be performed with the resulting data.  This mobility testing is done to determine the characterization of vehicle dynamics over a variety of road conditions.  Testing is conducted on paved, gravel, and cross country road courses along with various road surfaces and terrains located at the primary Road Test Facility located at Test Area 7, Redstone Arsenal, Alabama.  The surfaces and terrains are patterned after the most popular surfaces at the Munson Road Course, Aberdeen Proving Grounds, Maryland and include the following:2”, 6”, and Radial washboardBelgian Block (cobblestone)Embedded Rock3-inch spaced bumpsVariable bumps potholes, and rampsCross country (various severities)Gravel road (improved & unimproved)Figure 2.1 below is an example of a vehicle being tested at the RTTC Road Test Facility.Figure 2.1 – HMMWV with TOW missile and night site on Belgian Block (cobblestone) surface3.0 Test and Training Enabling Architecture (TENA)To facilitate the move into the Distributed Test arena, TENA was selected as the architecture for this effort. TENA is the principle product of TENA Software Development Activity (SDA), co-sponsored by the Central Testing and Evaluation Investment Program (CTEIP) and the Joint National Training Capability (JNTC). The goals of the TENA SDA are to enable interoperability between testing and training ranges, facilities and applications and to foster reuse of range assets and future range system developments.  As seen in Figure 3.1, the TENA Middleware is the central product of TENA.  The TENA Middleware enables rapid and reliable development of applications for distributed events like the ones developed to this effort.  Figure 3-1 The TENA Overview DiagramTENA is an object-oriented data transport architecture.  TENA sanctions real-time, distributed testing and simulation through the use of a Logical Range Execution (LRE), which is a collection of all the objects available for receipt via subscription in a particular distributed test and/or training environment.  Communication between entities in the test execution environment using TENA is accomplished with servant objects and proxy references to these servant objects.  In terms of the publisher-subscriber paradigm, Servant objects are publishers and proxy objects are subscribers.  Together, servant objects and their corresponding proxy references form Stateful Distributed Objects (SDOs), the building blocks contained within every Logical Range Execution.  SDOs contain both data attributes and control methods.  TENA relies on SDOs within a LRE to publish test data in an object-oriented format and deliver that test data to any number of interested subscribers real-time.  With an SDO, the data attributes are updated across the network via an SDO’s publication state.  A publishing, or servant, object represents the source of data and reports any changes made to the publication state to all applications that are connected to the servant object via a subscription, which is otherwise known as a proxy reference.  These updates occur atomically, meaning an object’s attributes are updated as one single entity to preserve the state of the published object.  Furthermore, a proxy is only notified about servants it has told TENA it is currently interested in; that is, a proxy only receives objects of types that it has “subscribed” to.  An SDO, however, facilitates more than just publishing and subscribing.  TENA also allows for both Remote Method Invocation and One-Way Methods, which permit a subscriber to remotely command its publisher to perform certain methods.  Methods defined within an SDO’s design are set up by TENA for either remote invocation or to perform as a one-way method.  To remotely invoke a method, TENA relies on SDO subscriber proxy references that use its middleware to connect with the publishing servant.  One-way methods work exactly like remote invocation, with the exception that they do not have return values from the servant back to the proxy upon completion of the method  Applications can be defined to handle TENA servants and TENA proxy references simultaneously.  That is, TENA allows for a publisher application to also be a subscriber application and for an application to be attached to multiple publishers or subscribers within the Logical Range Execution.  In short, TENA is a complete real-time data transportation solution for test execution data.TENA is driven directly by requirements from the user community.  These requirements are collected and discussed in an open forum known as the Architecture Management Team (AMT).  Anyone using TENA can define any number of SDOs in the formulation of Object Models to formulate the LRE.  However, one of the key roles of the AMT is the formulation and standardization of community standard Object Models.  These standard Object Models enable the community to achieve interoperability while maximizing reuse of testing applications.  Examples of current standardized Object Models include TSPI and Platform.The success of this effort hinges on the ability to provide environmental effects data to all participants in a distributed event.  This done by developing a Logical Range Object Model (LROM) which is the Data Exchange Agreement which specifies the data that would be published and subscribed to by test participants.  For the effort, the LROM utilizes the TENA standard Object Models and extends them when needed to provide Environmental Effect specific data.  This reuse of the community standard Object Models will enable participants on the distributed test layer, which were all geographically disparate from each other, to formulate a complete depiction of the test environment and interoperate during the event.4.0 RTTC Dynamic Branch Architecture EffortThe RTTC Dynamic Branch is executing a multi-year effort that progressively provides enhanced high-resolution environmental effects to Units Under Test (UUTs) such as a Target Acquisition System (TAS) via data injection and, ultimately, projection in a distributed environment such as those utilized in Distributed testing and Training events.  Currently in the third year of this effort, the effort builds upon the previous year’s efforts to and will culminate in a capability to distribution of high fidelity environmental effects for distributed test events.  The goals of the first three years of this effort were:FY05 - Demonstrate the uses of environmental effects data in a distributed application of a real-time TAS emulator.FY06 - Demonstrate the use of an environmental effects server to distribute environmental effects data in a distributed environment.  FY07 - Demonstrate the uses of an environmental effects server in a distributed test event.  The rest of this section will describe the activities performed in the first two years of this effort including the application that were used to demonstrate the progress towards a distributed capability for distributing environmental effects data.  The first year of this effort, FY05, saw a successful demonstration of a “cradle to grave” event that distributed environmental data from an ILH database, through the Test and Training Enabling Architecture (TENA) and into a TAS emulation that the depicted the environmental effects.  In FY06, the effort focused on using the TENA Middleware to serve this environment data.  In the final year of this effort, the desire is to build upon the capabilities, address the scalability issues and support a real Distributed Test Event.4.1 FY05 DY Architecture EffortIn the first year of this effort, FY05, the goal was to provide enhanced high-resolution environment effects to TAS UUTs via data injection.  While this was focus of the development effort for the year, much of the effort dealt with moving the Dynamic Branch from the typical environmental testing into a distributed testing methodology.  This new methodology included the introduction of new concepts such as object-oriented design for developing the Object Models, the TENA architecture and infrastructure used to distribute data for a distributed event, developing applications within that TENA Middleware framework, using distributed tools such as data repositories for storing and retrieving distributed test data, as well as being able to use high fidelity data capture in instrumented tests to support real-time applications.The main efforts for FY05 included:Data Standardization and Object Model developmentIntegration Level Hierarchy (ILH) database IntegrationDevelopment of a TAS EmulationDevelopment of TENA platform applications to support the demonstration.For the Data Standardization and OM development, the XML templates were developed for the types of environmental data that was being produced by the Dynamic Branch.  Specific templates were developed to support instrumentation data and for UUT test data. These separate templates were then refined into one standard template that was used to support the development of the TENA OM and the structure of the ILH database used in support of the event.In FY05, an initial ILH Connectivity Capability was developed to map new and legacy Dynamic Branch Data into ILH.  Not only did this enable the referencing of all desired environmental effects data, it provided an Integration Application for web-based viewing, uploading and downloading of test data.  Again, this was a move to provide easier integration to existing capabilities used to support distributed events within RTTC.  A screen shot of the ILH Integration Application can be seen in Figure 4.1.1  SHAPE  \* MERGEFORMAT Figure 4.1.1 ILH Integration ApplicationOne of the main applications used to demonstrate the uses of environmental effects data was a basic IR TAS Emulator.  This application worked together with the TENA Subscriber applications to demonstrate the effects of the environment on the TAS display as it traversed the terrain.  In support of the demonstration two views were implemented, one “seeker view” for the TAS and another “God’s Eye view” for event monitoring.  Also standard TAS-type controls for Zoom, Pan and Tilt were implemented to allow the user to interact with the synthetic environment.  Figure 4.1.2 is a screen shot of the TAS Emulator as it was being used in the FY0 Demonstration. SHAPE  \* MERGEFORMAT Figure 4.1.2 FY05 TAS EmulatorThe first year of this effort, FY05, saw a successful demonstration of a “cradle to grave” event that distributed environmental data from an ILH database, through the Test and Training Enabling Architecture (TENA) and into a TAS emulation that the depicted the environmental effects.  This demonstration also represented a shift in the testing philosophy of the Dynamic Branch and laid the ground work for the FY06 efforts which focused more on using TENA to distribute the environmental effects.4.2 FY06 DY Architecture EffortBased on the successful demonstration of the TAS Emulator in FY05, FY06 goal was to continue to evolve the Baseline “cradle to grave” capability to participate in a FY07 distributed test event.  To take the next step in moving towards supporting a distributed event was to demonstrate that the environmental effects could be distributed though a distributed architecture like TENA in a server type configuration.  While the efforts to move the Dynamic Branch towards standard Data Management Processes and Tools used in at RTTC to support distributed test event, the focus of the effort was on the Environment Effects Server and enhancing the baseline applications to support the free play type seen in distributed test environments.  Figure 4.2.1 FY06 CapabilityFigure 4.2.1 depicts the capability demonstrated in FY06.  The applications added during the FY06 effort include an Environmental Effects Server, a Free Play Platform Publisher, and the 3D World Remote Viewer.  Along with these new applications the FY05 TAS emulator was separated into a TAS Emulator and a Scene Generator to allow for external source feed to the TAS. Each of these application will be will be described separately below.Environment Effects Server:  This application was designed to be a TENA Service to the other applications in that if responded to requests from other TENA applications for notional environmental effects data.  This data was in the form of disturbance data or jitter to a platforms position.“Free Play” Vehicle Entity Generator:  This application was used to publish the vehicle entity used to traverse through the simulated environment.  The TAS Emulator used this vehicle’s position as if it were mounted on the vehicle and the “disturbance” to jitter the TAS Scene. TAS Emulator: This application was used as the primary visualization tool to view the "disturbance" introduced into the simulation by the Effects Generator. Using the common 3D terrain of the MOUT site at Redstone Arsenal, this tool emulates a generic target acquisition system and shows the gunner's view and how it is perturbed (bounced) when the simulated environmental effects are introduced. A future use planned for this application would be to determine if the "bounce" is too much to allow the gunner to "lock on" to a desired target.Written in C++, the TAS emulator uses OpenSceneGraph as the 3D graphics API for visualization. It talks to the joystick/Effects Generator application via TENA where it subscribes to perturbed position and orientation of the joystick driven vehicle on the terrain. Using TENA again, it publishes its position and thus makes a request to the Scene Generator for the current view to present to the user. Using ACE (Adaptive Communication Environment), the TAS emulator receives back a snapshot of the current view that is then presented to the user as the gunner's view. This separation of the view requestor (TAS Emulator) and view publisher (Scene Generator) was employed so that in the future real or other simulated Scene Generators can be used in a mostly "plug and play" environment.The TAS emulator employs a graphical interface allowing the user to modify the view's azimuth and elevation. These changes will be viewed in addition to the incoming vehicle position and orientation coming from the joystick application, simulating a target acquisition system mounted on top of a vehicle and having its own independent pan and tilt capabilities. Also shown are track gates that the user can manipulate to "box" a desired target in the field of view. Figure 4.21 shows the TAS emulator GUI and Figure 4.2.2 shows the 3D view provided by the TAS emulator.Figure 4.2.2  TAS Emulator Graphic User InterfaceFigure 4.2.3  TAS Emulator 3D ViewScene Generator: This application provides the "view" out of the gunner's sight as presented in the TAS emulator. It uses a "pseudo IR" version of the common 3D terrain of the MOUT site at Redstone Arsenal. Written in C++, it also uses OpenSceneGraph to produce the 3D view. While not absolutely necessary to actually show the view, a presentation window is provided just as a sanity check for its correct operation. Using TENA, this application subscribes to the perturbed gunner's site as defined by the combination of the "jittered" vehicle position provided by the joystick app plus the offset azimuth and elevation as selected from the GUI in the TAS emulator. This desired "look at" location on the terrain is then rendered into a frame buffer in OpenSceneGraph. Using ACE multicast, this rendered frame (actually sequence of frames) is sent back to the TAS emulator for display to the user. Because of bandwidth limitations, this rendered frame is first transformed into a jpeg image, thus greatly reducing its size via the use of the OpenSource CxImage library. Figure 4.23 show the raw rendered image that is generated prior to its return to the TAS emulator.Figure 4.2.4  Scene Generator Rendered Image3D World Remote Viewer: An ancillary application developed to aid in viewing the terrain/vehicle from an "outside" view, allowing for better terrain orientation/placement. This app provides two views to the user, one riding a few meters behind the joystick driven vehicle and another "God's eye" view above the terrain, allowing for zooming in and out and panning across the terrain to show a sort of commander view.This app is written in C++ and also uses the OpenSceneGraph API and the common 3D terrain of the MOUT site at Redstone Arsenal. Using combinations of keystrokes and mouse movements, zooming, panning, and tilting of the terrain can be employed in order to frame any section of the terrain at any altitude for overseeing the simulation. Figure 4.2.4 shows a shot from the 3D World Remote Viewer.Figure 4.2.5  3D World Remote Viewer5.0 ConclusionIn the traditional laboratory test approach, the field dynamic environment associated with a particular piece of hardware on a vehicle platform is characterized by acquiring acceleration data from the vehicle while operated at various speeds across a set of terrain that represent expected field usage. Vehicle simulations may also be employed to generate this set of data using validated vehicle and terrain models. The data set can be applied to the test article as either real-time motion replication or time-compressed laboratory vibration specifications. Similarly, this data set contains the information required to enhance the realism of distributed tests through the application of these position disturbances to individual platforms and sensors involved in distributed tests based on the position and speed within the realm of the distributed exercise. With the FY06 Baseline Capability RTTC provided a successful demonstration of a “cradle to grave” real-time event that distributed this high-fidelity environmental data through the Test and Training Enabling Architecture (TENA) into a TAS emulation that depicted the environmental effects. This successful event demonstrated the capability to provide high fidelity environmental effects to models and simulations to make distributed testing and training more realistic.Author BiographiesWILLIAM BARBER is currently serving as Experimental Developer for the U.S. Army Redstone Technical Test Center's (RTTC) under the Dynamic Test Branch. As such, Mr. Barber serves as a dynamic test, modeling and simulation, and advanced technology subject matter expert and technical agent for RTTC. Mr. Barber holds a Bachelor of Science degree in Mechanical Engineering from Auburn University and a Master of Science degree in Mechanical Engineering from the University of Alabama in Huntsville (UAH).MIKE GREENE is currently serving as a 3D Graphics Programmer and Visualization Specialist for Trideum Corporation in Huntsville, AL. Mr. Greene has over 25 years’ experience 3D modeling, design, and visualization for both the U.S. Government and private industry. Mr. Greene holds a Bachelor of Science degree in Mathematics and a Master of Science degree in Computer Science from the University of Alabama in Huntsville.DANIEL D. BELL is currently serving as Developmental Test Engineer for the U.S. Army Redstone Technical Test Center (RTTC) under the Dynamic Test Branch. As such, Mr Bell serves as a dynamic test, modeling and simulation, and robotics subject matter expert and technical agent for RTTC as well as an RTTC representative to the Army Test & Evalutation Command (ATEC) Modeling & Simulation/Stimulation Domain Team. Mr Bell holds a Bachelor of Science degree in Mechanical Engineering and a Master of Mechanical Engineering degree from Auburn University.Karl A. King is currently serving as a  Senior Systems Engineer for Trideum Corporation in Huntsville, AL. Along with his primary duties, Mr. King supports the TENA SDA as a member of the TENA User Support Team. Mr. King holds a Bachelor of Electrical Engineering degree from the Auburn University.  RYAN NORMAN is currently serving as Software Architect for the U.S. Army Redstone Technical Test Center's (RTTC) under the Information Management Branch.  Along with his primary duties, Mr. Norman contributes to for the TENA Architecture Management Team (AMT) as RTTC Representative and is a frequent contributor to SIW conferences.  Mr. Norman holds a Bachelor of Science degree in Computer Science from the Georgia Institute of Technology.