Context Guided Ground Attack Mission Planner (CGGAMP)S. David Kwak, Ph.D.Lockheed Martin37 North Avenue, Burlington, MA, 01803(781) 505-9545 (Voice), (781) 505-9501 (Fax)skwak@lads.is.lmco.comKeywords:ATO, COREBA, XML, Blue Flags, Intelligent Agents, Expert Systems, C4I, AI, ITABSTRACT: Each of numbered AFs annually attends Blue Flag exercise, which trains AOC (Air Operational Center) staffs.  During the exercises, AOC staffs (trainees) generate ATO (Air Tasking Order) using TBMCS (Theater Battle Management Core System).  The generated ATO, then, translated to mission order stacks before being executed by AWSIM (Air Warfare Simulation).    Currently, professional war controllers manually perform the translations, and the typical number of missions in one ATO typically approaches 1500.  Thus, the manual translation process consumes significant amounts of war controllers' time and efforts.  The goal of the CGGAMP project is to improve the current situation by reducing the manpower and providing a better (more accurate) order stacks.  This paper reports the on-going CGGAMP project.  Currently, CGGAMP uses XML (extensible markup language), the latest Information Technology (IT), Artificial Intelligence (AI) technology, and Lockheed Martine’s (LM’s) Cognition Oriented Emergent Technology (COREBA).  IntroductionC4I (Command, Control, Communication, Computer and Intelligence) to simulation (SIM) interface is a high pay off item for DOD.   First, it can reduce manpower requirement. Second, it can revitalize existing C4I equipment by adding new capabilities through simulation capabilities.  Although there are clear payoffs, there are not many C4I to SIM linkages partially because of big gaps between C4I and SIM communities.  The CGGAMP (Context Guided Ground Attack Mission Planner) project takes the challenge by bridging the two worlds with XML (extensible Markup Language) [1,2,3], the latest Information Technology (IT), Artificial Intelligence (AI) technology, and LM’s Cognition Oriented Emergent Behavior Architecture (COREBA)[4,5].  Figure  SEQ Figure \* ARABIC 1: CGGAMP tool allows for a paradigm shift from manually intensive mission editing to supervised automation.Each of numbered AFs annually attends Blue Flag exercise, which trains AOC (Air Operational Center) staffs.  During the exercises, AOC staffs (trainees) generate ATO (Air Tasking Order) using TBMCS (Theater Battle Management Core System).  The generated ATOs are currently translated to AWSIM (Air Warfare Simulation) executable mission stacks by the ATI (AWSIM TBMCS Interface).  However, because of the limitation of ATI, the raw output order stacks from ATI go through another manual process before being executed by AWSIM as shown in  REF _Ref486859668 \h  \* MERGEFORMAT Figure 1.  Specifically, in this step, professional war controllers compare the raw order stacks against the mission descriptions in the original ATOs, and correct any ATI errors.  More importantly, during this process, they add mission details to the raw order stacks because mission details are not specified in the ATOs.   The typical number of missions per ATO approaches 1500, and the manual translation process consumes significant amounts of war controllers' time and efforts.  Additionally, this manual process easily introduces inconsistencies and human errors, and these human factors demand labor-intensive corrections and re-planning of missions during the execution of the Blue Flag exercise.   Therefore, the goal of the CGGAMP tool project is to develop an intelligent ground mission planning tool, which can reduce man power requirement while escalate the training effectiveness by reducing possibilities of human errors and improving consistencies. Figure  SEQ Figure \* ARABIC 2: CGGAMP Tool is composed of Route and Weapon Tool, and generates order stacks.The CGGAMP tool will not be constructed as a fully automated tool, but a tool that can be constantly supervised by a human operator.  Thus, the operator can monitor the planning process and, if needed, he or she can real intervene the operation of CGGAMP tool in real time without waiting for completion of mission planning process.  This unique feature, differing from ordinary automations, allows war controllers for overriding outputs from the tool if needed, and injecting any idiosyncratic natures of missions to meet specific training objectives of a given Blue Flag exercise.  Therefore, selectively customizable automations will be achieved by CGGAMP tool during planning of ground attack missions.   REF _Ref486859668 \h  \* MERGEFORMAT Figure 1 summarizes benefits of CGGAMP tool.The tool will be constructed with the Cognition Oriented Emergent Behavior Architecture (COREBA) and Intelligent XML (iXML) Agent.  COREBA, developed by LMIS’s Advanced Simulation Center (ASC), is a cutting edge technology for producing rational, adaptive, learning behaviors.  COREBA is adept at solving dynamic and non-linear problems by using emergent behaviors that are bounded by guidelines.  COREBA will be mainly responsible to provide dynamic user interventions.  iXML Agent, which is also a product of ASC, provides a traditional expert system capability and XML (eXtensible Markup Language) processing capability to facilitate information exchange and processing for both inside and outside of the CGGAMP.  Therefore, COREBA and iXML agent together allow for producing a novel, realistic ground attack mission planning capability.CGGAMP Tool Building ApproachThe CGGAMP tool project includes development of a CGGAMP tool, and demonstration of the CGGAMP tool by integrating it in the Blue Flag exercise process.  To maximize productivity, an existing DARPA JFACC Force Selection Evaluation Agent (EA) [6] will be used, which, in turn, uses COREBA technology.  Therefore, the CGGAMP Tool will inherit all of the desirable features of COREBA: drag and drop, any time user intervention, policy driven and adaptive to context.   These features are found to be highly effective to promote maximization of the strength of the human and computer in the context of the EA.  EA demonstrated a synergistic collaboration between the two while relieving a human from a time-consuming and tedious task: filling details, and transcending him a guidance provider.  Therefore, the CGGAMP tool will provide a natural collaborative workspace and push up a human operator to a policy (or guidance) provider acting as a high level supervisor rather than a worker who works on details.  The above capability will be further enhanced by iXML agent, which adds capabilities of intelligent information processing and exchange.  First, iXML agent, because usage of XML technology,  provides a clear advantage over many other solutions that requires invention of proprietary information representation and exchange protocol.  That is, rather than developing a CGGAMP specific information exchange solution, iXML agent embraces the XML technology which is widely accepted as information exchange standard in the commercial world.  This approach immediately benefits CGGAMP by making the vast amount of commercially available XML processing technologies, such as XML tools [7,8], parsers [7,8], translators [7,8], web interfaces [9,10], database interactions [11], etc.  Some of them are often freely available.  Specifically, applicability of XML technologies to CGGAMP is very high because of the fundamental similarity between USMTF (US Message Text Format), which is the ATO specification language, and XML.  Second, iXML agent adds the traditional Artificial Intelligence (AI)’s symbolic computing capability to CGGAMP.  Some of CGGAMP’s problems fit right in this intelligent aspect of iXML agent.  For example, searching databases for available aircrafts and ammunitions, or finding a best weapon configuration load for a given mission are natural tasks for symbolic computation capability of iXML agent.   REF _Ref486862125 \h  \* MERGEFORMAT Figure 2 shows the internals of CGGAMP and the relationships with the external world.  CGGAMP tool is internally composed of two major sub-tools: Route tool and Weapon tool.  The Route tool is responsible for finding a path to a ground target while avoiding known enemy threats such as enemy SAM (Surface to Air Missile) sites.  Generally, ATO (Air Tasking Order) only carries DMPI (Designated Mean Point of Impact) information of a given target without specifying a detailed path to the target.  On the other hand, the Weapon Tool selects a proper weapon load for a given mission.  ATO specifies a type of aircraft(s) by annotating with either SCL (Standard Load Configuration) or best, which means a simple delegation to a Wing commander for his best judgment.Figure  SEQ Figure \* ARABIC 3: The actual screen snapshot of Evaluation Agent while it is evaluating given inputs -- a certain force mix, force disposition, political and military objectives.  It generates measures of merit for the given input set.Finally, the CGGAMP tool, when completed, will operate in three distinct modes.  The first allows the controller to input high level military objectives and some basic guidance for Blue Flag exercises.  In the second mode, the CGGAMP tool automatically develops detailed ground attack missions described in ATO while trying to meet the objectives and follow the guidance.  This operation can be monitored and, if needed, can be intervened any time.  Specifically, the CGGAMP tool will optimize attack route while avoiding enemy SAM sites, and provides best ordinance for the attack missions.  In the third mode, the CGGAMP will give an optional mode, if included, it will allow for rehearsing a selected mission (or missions) without loading into AWSIM.  This mode provides a capability of early detection of feasibility for ground attack missions of ATO too.     Therefore, as shown in  REF _Ref486862125 \h  \* MERGEFORMAT Figure 2, the CGGAMP tool internally uses XML as an inter-component communication language among Route Tool, Weapon Tool, GUI, Route Selection Knowledge Base (RSKB), Weapon Selection Knowledge Base (WSKB).  As discussed before, this approach significantly facilitates adopting many high quality existing XML based tools for CGGAMP while reducing development efforts and time.  If the CGGAMP tool wants to communicate with external data sources, it uses the XML interface, which is responsible to translate from the internal XML representation to the proper external representation and vice versa.   Specifically, the XML interface is responsible for translation between XML and other data formats: USMTF, Order Stack Format, and SQL.The Route ToolDAPRA JFACC Evaluation Agent (EA) tool [6] shown in  REF _Ref486864106 \h  \* MERGEFORMAT Figure 3 provides a baseline capability for constructing the Route tool.  The EA tool was originally designed for assisting force selection problem for JFACC using its policy driven and highly adaptive fly out capability.  This capability will be directly carried over to the Route tool.   Dynamic user intervention capability of the EA tool will also be preserved for the Route tool.  GUI, which is similar to  REF _Ref486864106 \h  \* MERGEFORMAT Figure 3, provides a natural means to interact with the above capabilities for human users.  Therefore, human operator’s constant supervision and intervention will be always possible with the Route tool.  All of these characteristics are essentially supported by COREBA technology [4,5].   The characteristics of the Route tool are summarized as following: Highly adaptivePolicy Driven.Dynamic user intervention Continuous context based user guidance and feedbackThe Weapon ToolThe Weapon Tool will be constructed with intelligent XML (iXML) agent.  The Weapon tool will produce a proper solution regardless ATO specifies weapons load or not.  If not, it will creates a proper weapon load for a given mission.  If ATO specifies SCL (Standard Configuration Load), then it simply reads off from a SCL table and uses the SCL table entry.  However, before committing the table entry, the Weapon tool performs a sanity check with Air Base Weapon DB for availability against the recommended SCL entry.  If not, it either alerts to users or automatically finds a proper weapon load instead using the rule set stored in the Weapons Selection KB (WSKB).  The Weapon tool also provides an option to enable or disable the alerting feature.  If disabled, it will continue without calling for human interventions while simply maintaining a log for later human reviews.  Because of importance of XML technology for the CGGAMP project and its newness in this domain, this section briefly describes the XML technology by contrasting with the existing HTML technology.  Then iXML agent description follows.XML(eXtensible Markup Language)Figure  SEQ Figure \* ARABIC 4: HTML for presentation vs. XML for content representationInternet is about to go through another significant transformation since introduction of HTML technology because of the introduction of significantly pervasive XML technology.  Its core specification is initially proved in Feb’ 98 by W3C.  XML is in essence a markup language like HTML, but its implication is significantly different from HTML because XML clearly separates presentation and content of information.  That is, XML is able to describe meaning of the data while HTML is not.  Thus, XML coded information is much more useful than HTML coded information.  HTML document, lacking this semantic representation power, is not much different from a plain English text.  It requires a quite effort for a machine to parse the meaning.  This aspect is nothing wrong because HTML is designed to share a formatted document on Internet among humans who can read and understand contents. The current Web contents mainly constructed with HTML make difficult for an intelligent search and discovery.   For example, how many times we get plainly wrong answers from Web search engines?   Although the current generation Web search engines have been greatly improved over its initial versions by taking advantage of AI technology and frequencies of repetitive usages of URLs and etc, non-sense search results are inevitable unless the browsers have a real ability to understand natural languages in the context of searching.  Therefore, HTML does not facilitate data sharing and integration through the Web because of the above reason.  Information coded with HTML is essentially equivalent with nicely formatted plan English text.   REF _Ref486940863 \h  \* MERGEFORMAT Figure 4 contrasts HTML and XML for the same information.  Both documents contain various markups (or tags) between “<” and “>”.  While the HTML concern formatting of the document (i.e., presentation), using centering and italicizing tags, XML describes the meanings of the data.  Another difference is that while the whole tag sets of HTML are defined and controlled by W3C, the tags of XML are definable by users.  The XML tags in  REF _Ref486940863 \h  \* MERGEFORMAT Figure 4 are defined to describe a car sale ad. As shown in the figure, each data item is enclosed by two tags with a same name except additional “/”.  For example, “red” is surrounded by a “<color>“and “</color>” tag pair.  If XML is required to show on a browser screen, then XML’s screen formatting information is separately described in XSL (eXtensible Style sheet Language), which is a member of XML technology family [1,2,3,7].  Perhaps the most significant impact on Internet brought by XML is becoming an enabling technology for distributed information transactions (i.e., distributed business transactions), such as B2B (Business to Business) transactions between computers with little or no direct human interventions.  Without XML, automated transaction over Internet must be a daunting task.  For examples, when two companies try to make business transaction through the Web, it is most likely that the ways of representing, storing, and processing business transaction data of the two companies are not compatible.  Even so, XML facilitates inter company transactions without newly adopting a common data representation format because XML can be a neutral to both companies, by being able to represent meanings (or essence) of business data with the self describing tags without concerning detailed data format.  That is, the sender will only send the meanings of data without concerning the actual data format that the recipient uses.  Transformation to the recipient’s data format is responsibility of the recipient.  The XML advantage is obvious because common meanings of business transactions are exchanged.  Thus, XML eliminates a danger of adopting a common data format which easily lead to modification of their own internal data representations for storage and processing.  Consequently, XML liberates from a strict requirement of common format at data level.   XML’s characteristics are summarized as following:XML facilitates communications between two parties by constructing a common language with clear syntax and semantics.HTML turned the Internet into a huge collection of raw data – XML turns the Internet into a huge structured data repository. XML is both human and machine-readable.Many high quality free tools exist to support XML. XML is Internet centric. XML technology actually means a family of XML technologies.XML saves time and money lowering operating costs.Figure  SEQ Figure \* ARABIC 5: iXML Agent is composed of Expert System, COMM and two translators: XML to KB and KB to XML.Intelligent  XML (iXML) AgentiXML agent is an intelligent agent that can speak and understand XML.  Its initial application was LM’s Global Enterprise Alarm and Response System (GEARS), which is a network intrusion detection and response system.  iXML agent in GEARS, as shown in  REF _Ref486868718 \h  \* MERGEFORMAT Figure 6, listens to the signals from the multiple network and operating system sensors, which are coded in XML, and reacts by generating either automatic responses or recommendations for information security human operators in XML.  iXML agent is specifically designed to be a generic intelligent agent, which can be plugged in any XML enabled systems such as CGGAMP or any Web environment as long as the participants (i.e., computer programs or XML-enabled browsers) can speak XML as a standard language.Figure  SEQ Figure \* ARABIC 6: iXML agent monitors multiple sensors and responds to network intrusions.The internal detail of the iXML agent is shown in  REF _Ref486869745 \h  \* MERGEFORMAT Figure 5.  iXML agent is composed of  followings:Expert System (ES): Currently, it uses JESS (Java Expert System Shell), which is Java implementation of NASA CLIPS shell [12].XML to KB (Knowledge base) translator (XML-KB): It translates XML to internal KB format.  Apache XML parsers are used.KB to XML translator (KB-XML):  it does opposite of the above.COMM module (COMM): it allows for arbitrary number of connections to iXML agent, and a symbolic name is attached to the each connection.  The symbolic name mapping to the connections, i.e., socket connections, is configured by COMM parameter file.iXML agent’s internal operation is as following: iXML agent listens to the sender and converts XML data from the sender to its internal knowledge base (KB) representations.  Then, Expert System internal to XML operates on the received information.  The operation is specifically performed in the context of iXML agent, which reflects the accumulation of the past history of the agent.  This aspect will be responsible for implementing the critical context guided aspect of the CGGAMP tool in conjunction with COREBA.  iXML agent, before transmitting the computed result, transforms it to the recipient’s XML vocabulary and speaks them back to the recipient.  Therefore, iXML agent essentially mimics what humans would do when responding to external XML input.  iXML Agent’s behaviors are currently specified with production rules.   In order to expand the behavior space, there is no need to write extra computer code writing and compilation is not necessary.   Therefore, iXML agent enables XML based automated information processing and makes migrations to the XML quicker and cheaper.  Summary The CGGAMP tool project is to integrate COREBA and iXML agent technology with the AWSIM Theater Battle Management Core Systems Interface (ATI) process and demonstrate this capability at the C2TIG (Command and Control Training Innovation Group) facility at Hurlburt Field, Florida.  Currently, the ground attack mission planning is a manually intensive process, because it requires the evaluation of the realism of ground-attack mission flight paths generated by AWSIM.   If the evaluation determines the flight path is not realisti, the controllers must manually change it.  COREBA is adept at solving dynamic and non-linear problems by using emergent behaviors that are bounded by guidelines.  This characteristic allows COREBA in conjunction with iXML agent to produce novel, realistic ground attack missions.  The application of COREBA and iXML agent technologies to this ground attack mission planning will improve further understanding about how intelligent agents and XML technology might be utilized in future for automation or partial automation of the ATO development and translation process, and how to perform functional allocations and collaborations between two agents and dynamic task migration from one agent to the other.  Finally, the expected outcome of the project is the demonstration of a prototype that shows the reduced manpower requirement to translate ATO information provided by the CGGAMP tool implementation.AcknowledgementThe CGGAMP project is a USAF C2TIG and C2B lab project and funded by NTA.References [1]	W3C,  Extensible Markup Language (XML),  On-line documentation, http://www.w3.org/XML.[2]	Anderson, R., at el,  Professional XML, Wrox Press Ltd, Chicago, Illinois, 2000.[3]	XML Bible. IDG Books Worldwide: Foster City, CA, 1999 [4] 	Kwak, S. D., " COREBA (Cognition Oriented Emergent Behavior Architecture)", Proc. of 7th conf. on Computer Generated Forces and Behavioral Representation, Institute for Simulation and Training, Institute for Simulation and Training, Orlando FL, May 12-14, 1998.[5] 	Kwak, S. D., “A Multiple Paradigm Behavior Architecture: COREBA (Cognition Oriented Emergent Behavior Architecture)”, Proc. of 1998 Fall Simulation Inter-operability Workshop, SISO, Orlando, FL, Sept. 14-18, 1998. [6] 	Kwak, S.D., "Application of Nonlinear Dynamic Behavior Paradigm to the JFACC Force Selection Problem," Proceedings of the 8th Conference on Computer Generated Forces and Behavioral Representation, IST, University of Central Florida, Orlando, FL, May, 11-13, 1999. [7]	Apache XML project, On-line documentation,  HYPERLINK "http://xml.apache.org/" http://xml.apache.org/[8]	IBM, XML Zone, On-line documentation,  HYPERLINK "http://www.ibm.com/developer/xml/" http://www.ibm.com/developer/xml/. [9]	Apache, The Jakarta Project, On-line documentation,  HYPERLINK "http://jakarta.apache.org/" http://jakarta.apache.org/.[10]	SUN, JavaServer Pages (JSP),  On-line documentation,  HYPERLINK "http://www.java.sun.com/products/jsp/index.html" http://www.java.sun.com/products/jsp/index.html[11] 	Oracle, Oracle 8i, On-line documentation,  HYPERLINK "http://www.oracle.com/" http://www.oracle.com/[12] 	Friedman-Hill, E., JESS, the Java Expert System Shell, On-line documentation,  HYPERLINK "http://herzberg1.ca.sandia.gov/jess/" http://herzberg1.ca.sandia.gov/jess/S. David Kwak has conducted research and development of behavior representation and software system architecture for DoD M&S (ModSAF) and DoD robot projects (DARPA-OSU-Adaptive Suspension Vehicle, NPS-Autonomous Underwater Vehicle) for the last 19 years.   He received PhD from Ohio Sate University in 1986.  Before joining Lockheed Martin in 1993, he was a professor at Naval Postgraduate School.  He is currently leading research and development efforts for advanced behavior representation and simulation architectures at Lockheed Martin.   His recent research/development areas include Intelligent Agent (IA) and Information Technology (IT) for DOD domain applications. 