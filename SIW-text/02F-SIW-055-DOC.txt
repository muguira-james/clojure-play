HLA Implementation of a Multi-Language Legacy Missile SimulationKenneth W. ZellersGary A. BarnesRaytheon Missile SystemsP. O. Box 11337Tucson, Arizona USA 85734-1337520.794.3561kenneth_w_zellers@raytheon.comgary_a_barnes@raytheon.comKeywords:HLA, missile simulation, FOM, RTI, testbedABSTRACT: Legacy missile simulations, developed and refined over long periods of time using non-object oriented structures and programming languages, represent an important technology investment for a company. Constraints of the modern development environment do not support a wholesale re-programming effort to bring the legacy simulation to a more modern level. Recently, the HLA based Raytheon Mission Analysis System Testbed (RMAST) required the implementation of a high fidelity, 6DOF missile simulation in order to support corporate initiatives and studies. A multi-language, non-object oriented legacy missile simulation was chosen for this implementation. The incorporation of the legacy missile simulation required that an HLA compliant wrapper had to be developed, with minimal impact on the structure of the legacy model. This proved to be a challenge since the model consisted of computer program components written in the Ada, FORTRAN and C programming languages. This paper discusses the migration issues associated with the implementation of a legacy non-object oriented simulation into an HLA compliant interface. Systems Engineering Testbed EnvironmentThe Raytheon Mission Analysis Testbed (RMAST) is a simulation management and control system operated by the Systems Engineering Center of Raytheon Missile Systems located in Tucson , Arizona. Processes within the RMAST perform data collection and distribution between geographically widespread locations supporting several corporate missile development programs. The architecture of the Testbed conforms to the United States DOD Defense Modeling and Simulation Office (DMSO) High Level Architecture (HLA) rules. The HLA specification is implemented via the Run Time Infrastructure (RTI), the backbone for the data distribution functions. The RMAST provides the missile development communities internal and external to Raytheon the capability to connect separate hardware in the loop (HWIL), computer in the loop (CIL), analytical digital simulations and other missile system components into a complete functional representation of the total missile system. The RMAST has the capability to process live, real-time radar data of the threat as well as pre-recorded data. From a missile system development point of view, the RMAST provides :1) an integrated system test capability that reduces near term flight test risk and costs by allowing the insertion of new technology early in the development process; 2) An enabling capability to reduce long term weapon system development costs and schedule; 3) a visualization capability of system performance and situational awareness.The Driving RequirementThe number of representations of the missile portion of the system were restricted to the availability of the HWIL and CIL facilities. This constrained the RMAST from being able to perform operations research studies during the time that those facilities were not available and/or when studies required the number of missile representations to be in addition to those facilities. The implementation of the all digital missile simulation into the HLA architecture solves this problem and makes a representation of the missile available to numerous development and operations research analysis projects.    EMBED Visio.Drawing.6  Figure  SEQ Figure \* ARABIC 1: Raytheon Mission Analysis Testbed FederationLegacy Simulation - Development Environment and Pre-HLA ArchitectureDevelopment EnvironmentThe legacy simulation is the product of many years of development at Raytheon. The simulation is composed of modules that are written in the Ada, FORTRAN and C programming languages. The hardware platform and operating system consists of a SUN UltraSparc III running Solaris 8. The Ada portion of the code is compiled using Rational APEX Ada version 4.0.0b. The FORTRAN and C portions of the code are compiled with the SUN Forte 6 Update 2 High Performance Computing development environment. Source code management is performed via CVS. Pre-HLA ArchitectureThe simulation is used as a standalone analysis tool at Raytheon. When operating in this state, the three source code modules (Ada, FORTRAN, and C) are compiled and linked into one executable. Referring to Figure 2, it is shown that the Ada code is the “Main” program within which the FORTRAN simulation loop is called as a subroutine. In the course of execution, the FORTRAN in turn must call Ada and C routines. A number of tabulated data files are required to initialize and execute the simulation. The products of the simulation consist of a number of tabulated output data files.  Figure 2 also reveals that the missile simulation fits the definition of a legacy, monolithic executable; definitely not compliant to HLA rules.  EMBED Visio.Drawing.6  Figure  SEQ Figure \* ARABIC 2:  Legacy Missile Simulation ArchitectureRMAST Federation and Simulation HLA Architecture  RMAST FederationThe RMAST Federation as configured in the context of this project is composed of the Weapons Control System Federate (WCSFed), the Target Federate (TGTFed), the Visualization Federate (VISFed) and the Federated 6 Degree of Freedom missile simulation (FED6DOF) Federate. Figure 1 represents the Federation as currently defined. The RMAST Federate Object Model (FOM) is based on the Real-time Platform Reference FOM (RPR-FOM) version 1.0. Table 1 shows the top entities of the RMAST FOM. The Simulation Object Model (SOM) for the FED6DOF is derived from (and is a subset of) the RMAST FOM. Table 2 shows the objects and interactions used by the FED6DOF.  Class1Class2Class3BaseEntityPhysicalEntityMunitionWarheadEntityTable 1: RMAST Federation Object Model	ObjectsInterceptorInterceptorStateGraphics	InteractionsInitMessageFireControlLaunchFireControlGuidanceInterceptorStateTable 2: RMAST Federation Objects and InteractionsRMAST Federation Concept of ExecutionThe RMAST Federation requires a number of processes related to the RTI and the other Federates to be initialized prior to the start of the Federated 6 DOF. This initialization and startup is accomplished by a series of UNIX scripts. The RTI process is started first followed by the Visualization Federate. Next, the Weapon Control System Federate (WCSFed) and the Target Federate are started. Currently operator interaction is required to initiate the launch of the target in the TGTFed. The WCS functions in the WCSFed determines the timing for transmission of the three interactions: InitMessage, FireControlLaunch and FireControlGuidance. Based on the trajectory of the target, the WCSFed produces a firing solution which is published as an InitMessage interaction. At the optimal time, as determined by the firing solution, a FireControlLaunch Interaction is published. Once an interceptor is airborne, the WCSFed publishes FireControlGuidance Interactions which are subscribed to by the FED6DOF. In the real world, a RADAR system would be tracking the position of the interceptor, but in the RMAST Federation the missile position is determined by the simulation which is published as an Interceptor Object and an InterceptorState Interaction. Publication of the InterceptorStateGraphics object provides data to the VISFed for display of the missile flight. Key Conversion IssuesThe conversion of the legacy missile simulation required the resolution of several key issues. An understanding of the simulation interfaces required a reverse-engineering process and the conflicts between C++ and Ada needed mitigation. Time services and synchronization issues were also resolved in this project. Simulation Interface IdentificationThe missile simulation consists of various modules representing the missile guidance and autopilot, fin/nozzle deflection feedback loops, integration routines, kinematics and environment routines for the various stages of flight. Since the legacy simulation represented a command guided interceptor, those interfaces of interest were resolved to the following:The weapons control system data interface including the pre-launch initialization data, the launch interrupt and fire control data.The interceptor state data provides the fire control simulation (WCSFed) the data to perform the closed loop guidance function and provides the Visualization (VISFed) function the data for graphical representation of the flight. Timing SynchronizationThe missile simulation was designed to function in a stand-alone environment. Due to this legacy design artifact, the simulation executes at the CPU (processor) rate (i.e., the faster the CPU, the faster the simulation would execute). Therefore the simulation needed additional logic in the HLA wrapper to allow it to function with the federation time synchronization (an RTI tick ()). Time synchronization is achieved by enabling time management immediately after receiving the InitMessage interaction, then setting the base time (or Zero time) to the HLA wall-clock. The frame time is then adjusted at a periodic rate to match the real-time HLA wall-clock by waiting until the current wall-clock time is equal to or greater then zero time plus frame time. If the frame time, when entering the synchronization routine, has exceeded the expected real-time then the routine will return without any adjustments being made.C++ Wrapper To accomplish communication with the RTI from the stand-alone legacy missile simulation, a communication wrapper had to be created. The C++ wrapper is a set of routines that harnesses the TAPIR HLA interface for communication to the RTI. From the wrapper the model will create a TAPIR kernel object, and an Object Manager, with these objects created the wrapper routines can:join to a federation,resign from a federation, publish interactions and objects,subscribe to interactions and objects,listen to events from the RTI, process events (send) to the RTI. With these basic communication routines available the wrapper can now send and receive messages with the RTI. TAPIRThe Testbed Applications Programming Interface for the RTI (TAPIR) [1] is a locally developed interface between the RTI and the application. The TAPIR insures separation between the internals of the application and the federation. Figure 3 shows a component view of TAPIR. TAPIR also promotes the separation of internal application logic from external protocols that a federation may employ. Table 3 shows those TAPIR kernal and object service functions that were used for the HLA missile simulation. Table 3: TAPIR Functions levelfunctionsKernel MakeKernel()Join()Resign()CommitLocalTime()EnableTimeManagement()Object ManagerSubscribeInteraction()PublishInteraction()PublishClass()CreateObject()AddListener()ProcessEvents()SendInteraction()UpdateObject()Missile Simulation HLA ArchitectureFigure 4 shows that missile simulation architecture after implementation into the HLA architecture. The simulation still requires initialization data and produces tabulated data files as output. The primary C++ module in the HLA Wrapper Module is 6dof_main.cc. This module represents the C++ “main” program and the primary subroutine entry point for the Ada “Main”. Figure 4:  Missile Simulation HLA ArchitectureFed6Dof Concept of ExecutionThe state transition for the FED6DOF is shown in Figure 5. Once the executable is started, the initialization files are read. Once initialized, the process joins the Federation thus advancing to the Federate Initialized/Joined state. The  FED6DOF federate then waits for the receipt of the InitMessage Interaction. Again, the Federate waits for the FireControlLaunch Interaction. Once received, the simulation proceeds to execute code that checks for updates to the FireControlGuidance Interactions, performs the Time Synchronization function, and updates the Interceptor and InterceptorStateGraphics Objects and publishes the InterceptorState Interaction. This loop is maintained until an End of Simulation state is achieved. ExperiencesWithin the missile simulation there are inherent assumptions that are made in regards to data types, which are not only platform specific but also language specific. One issue that needed to be addressed in the FORTRAN legacy code were values of both Integer*8 and Logical*8 being passed as parameters in functions or indices in arrays on the Solaris platform. These values were corrupted when passed as arguments. A similar issue also involved the passing of arguments in FORTRAN as Real*8 to the wrapper where the associated values from the FOM are integers, longs, or floats. The resolution to these issues was to convert those values to the data type of the parameter of the calling routine.Continuing DevelopmentThe HLA compliant missile simulation now may be used in a variety of other testbeds that require a high fidelity representation of the interceptor object. By utilizing the TAPIR interface the C++ HLA wrapper may be applied to other legacy missile simulations within Raytheon. As part of the continuing efforts to automate the federation execution , the HLA compliant missile simulation will conform to the rules of the Exercise Management System (EMS)[2]. EMBED Visio.Drawing.6  Figure 5- FED6DOF StatesReferencesNutaro, James: "TAPIR-Testbed API for the RTI", Un-Published internal technical memorandum, Draft April 3, 2002Moul, Phil: "Exercise Management System for Testbed Federation Control", 01E-SIW-045, Proceedings of the EURO SIW, June 25, 2001Author BiographyKenneth W. Zellers is a Principal Systems Engineer at the Operations Research and System Performance Department of Raytheon Missile Systems in Tucson, Arizona where he is involved in HLA support of legacy simulations and federation of federations connectivity projects. He has a bachelor's of science degree in mathematics from the University of Nevada, Las Vegas. He has more than 30 years of software development and engineering management experience in technologies ranging from real-time embedded simulations to distributed, network-centric simulation applications.Gary A. Barnes is a Senior Systems Engineer at the Operations Research and System Performance Department of Raytheon Missile Systems in Tucson, Arizona where he is involved in HLA support of legacy simulations and federation of federation connectivity projects. He has a bachelor's of science degree in computer science from California State Polytechnic University, Pomona. He has more than 10 years of software development and systems administration experience in technologies ranging from Operating Systems, Network Socket applications, and cross-platform systems integration.Figure  SEQ Figure \* ARABIC 3: TAPIR Components EMBED Visio.Drawing.6   EMBED Visio.Drawing.6  