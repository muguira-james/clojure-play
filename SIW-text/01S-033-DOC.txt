An XML interface to the Rosetta realtime Track ServerPhilip YanniMike LewisANZUS Inc.9745 Business Park AveSan Diego, CA 92131(858)-547-912870571.2714@compuserve.comPaper No. 01S-SIW-033Keywords:C4I DATALINK JDN JCTN VMF CEC LINK-16 JTIDS MIDS SINCGARS IDM LINK-11 FORWARDING EW TI SQL XML CORRELATION COM DCOM CORBA MISSION REHEARSAL SIAP SQL XMLABSTRACT:The Rosetta realtime track server engine has been used to correlate tracks from a wide variety of C4I systems.  Military C4I datalinks incorporated into Rosetta include Cooperative Engagement Capability (CEC), Link-16 (JTIDS/MIDS), Link-11, Army Tactical Internet, EPLRS, IDM, GBDL, USMTF, five versions of VMF, and several simulation systems.  Once managed by the real time track server, the ANZUS Forwarding Rules Object Gateway uses object oriented technology to allow forwarding among all datalinks in the Rosetta system simultaneously.  Although this has been a real breakthrough in C4I processing, the enabling technology in Rosetta is that all these military systems are now available via standard commercial protocols and interfaces.  The interface to Rosetta is SQL over Ethernet using Sockets.  This capability highlights the objective of Rosetta: make military C4I datastreams available in realtime using powerful commercial tools.This objective leads us to support XML.  As with any commercially driven system XML is often dragged in different directions by various organizations leading to holes in the technology. As Churchill might have said, XML is like democracy, it's the worst interface to data available, except for all the other ones.  ANZUS is currently working on a methodology that will allow using XML to retrieve realtime tracks and command from all the above datalinks using XML.  The current interface to Rosetta is the SQL programming language.  The client applications create a "Select" statement that includes the basic information required to place a track on a geographic display.  The Select includes Latitude, Longitude, Altitude, Course, and Speed along with some other basic data required to generate a symbol for display.  The XML version will use a DTD to define the terms in the Select statement and use an XML server to enable web style access to all the datastreams.  The XML clients will also be able to perform a "get detail" which return all the information available on a specific track including engagement, air control status, weapon status, etc.  This data will be formatted using XML elements, complex types, and attributes.  Since this interface allows access to all the tracks/commands in the Rosetta engine, simulation data will also be available via the interface. TOC \o "1-3" \t "Header,1" An XML interface to the Rosetta realtime Track Server	 PAGEREF _Toc503320880 \h 11.0 Introduction	 PAGEREF _Toc503320881 \h 32.0 Rosetta Architecture	 PAGEREF _Toc503320882 \h 33.0 XML functions	 PAGEREF _Toc503320883 \h 54.0 Existing uses of XML in Rosetta	 PAGEREF _Toc503320884 \h 65.0 Expanded use of XML in Rosetta	 PAGEREF _Toc503320885 \h 66.0 Conclusion	 PAGEREF _Toc503320886 \h 77.0 References	 PAGEREF _Toc503320887 \h 7Author Biography	 PAGEREF _Toc503320888 \h 7 1.0 IntroductionXML is designed to democratize access to data throughout the WWW.  Rosetta was developed to democratize access to realtime tracks/commands throughout the C4I world. Integrating these two technologies widely expands the availability of realtime data throughout the theatre.  XML integrates disparate databases into a common well defined format, as depicted in Figure 1 Rosetta integrates disparate datalinks into a common format and navigational reference frame.  Currently the interface to Rosetta is the industry standard  Structured Query Language (SQL).  SQL was developed by IBM in the ‘80s and is slowly being replaced by several XML technologies.  TomYager of Infoworld writes, “...XML is here for the long haul, partly because it’s a proven, widely adopted technology and partly because its inherent flexibility has led to scores of new technologies and extensions that support and rely on parent XML.”[1]Figure 1. Rosetta Technology in the Balkans Theatre.The objectives of the Rosetta High Speed Information Processor are quite similar to those of XML.  Rosetta uses a single, delimited text interface to a wide variety of realtime datastreams.  In a similar manner, XML is used to interface web clients (HTML) to a wide variety of servers.  Servers can be anything from SQL Database servers to Geographic Map Servers, but the common interface is XML.Although the basics of XML are quite simple, the specification is growing rapidly to include protocol definitions, schema, and  a Query Language.  This paper will discuss the growth of XML and how it relates to the Rosetta architecture.  A basic understanding of the Rosetta architecture is required before attempting to relate the ANZUS system to XML.2.0 Rosetta ArchitectureThe Rosetta system is based on an object oriented high speed information processor, the Realtime SQL Engine (RQL).  It is uniquely suited to managing tracks and commands across datalinks with varying throughput and disparate data types. It can manage current battlefield data and can rapidly adjust to new sensors and datalink systems.  It has been used to manage mutiple sources of navigation data at rates up to 100Hz, and has demonstrated the capability of managing tracks and commands from a variety of datalinks simultaneously.  Rosetta allows users to define a series of information exchange requirements (IER) or forwarding rules that can be implemented based on virtually any series of events.In addition to the capability to translate data based on adaptive forwarding rules, Rosetta processes navigation data and acts as a host for a variety of platforms.  The host function is a separate abstraction layer and includes transmit and receive rules for Link-16, Link-11, VMF, EPLRS, etc.  Utilizing the Rosetta engine and the FROG, strike platforms can pull the data elements required for their weapon systems while working within a bandwidth limitation. A laptop computer can act as the host or “server” for all the datalinks.  Clients to the host can be a cockpit display or palmtop computer. Figure 2. Rosetta Architecture.The system (See Figure 2) includes a text parsing engine, the realtime SQL engine, and the Forwarding Rules Object Gateway.  The text parsing engine creates the schema for the realtime server.  In an XML system this is called the Document Type Definition  (DTD).  The parsing engine eliminates the need to write C code to implement datalink messages.  For instance, all of the Link-16, Link-11, JVMF, GPS, and sensor messages are stored in text files that have been parsed from MIL-STD Documentation [2].  Very similar to the proposed XML schema, units tracking is performed by the Rosetta text parsing engine. This enables automatic  translation  of units among datalinks.The Realtime SQL (RQL) Engine retains in memory tracks, commands, navigation data, and other information from the hardware attached to the Rosetta server.  Rosetta is a realtime system and is always attached directly to the datalink communications hardware, navigation systems, and sensors it is managing.  Hardware interfaces include 1553, X.25, RS-422, RS-232, and Ethernet.  To understand the speed of Rosetta, navigation updates are pulled every 10ms and datalink tracks/commands are often updated every 100ms.   Often multiple navigation sources and multiple datalinks are controlled simultaneously. The RQL Engine enables using commercial standard SQL calls to access realtime data.Rosetta utilizes Realtime SQL or RQL as the interface to the track server. RQL is a “delimited text” interface via “sockets”.  This interface allows any Unix or Windows based system simple, efficient access to the realtime datastreams of the RQL Server.  The standard query for all the tracks in the system is depicted in Figure 3.Figure 3. An RQL Query for “all tracks”A query as depicted in Figure 3 is called a “stored procedure” in SQL, the “track.latitude, longitude, altitude...” line returns the position of each track in the system indexed by track number.  If the source datalink does not use WGS-84, the tracks are transformed by Rosetta into the correct reference frame.  Note that this particular query calls both the 1553 interface (TadilJ data) and a Tactical Internet Socket (JVMF data).  This call will simultaneously retrieve data from both radios attached to the server.  The most recent data on each indexed object/track is made available in response to the query.  The WWW Consortium (W3C) is currently developing its query language and  it will be discussed in the following sections.Figure 4 below illustrates an SQL representation of an Information Exchange Requirement (IER). The rules are defined in the industry standard Structured Query Language (SQL) and implemented by the Forwarding Rules Object Gateway (FROG).  The objective is to take the IERs  out of the hands of C programmers and place them in the hands of the warfighter.Figure 4. An IER in SQL Syntax.As with XML, the language is human-readable and easily debugged.  New rules can be implemented without re-compiling.  Another advantage of Rosetta is that IERs can be event driven.  For instance, if an aircraft declares a Mayday, the rule that sends the nearest friendly airport would engage.  IERs are implemented based on a “where” clause.  The where clause can specify a mission phase, combination of aircraft, or geographic area in which to implement a specific forwarding rule.  For example a fighter aircraft with older host computers are often limited to displaying less than ten targets uplinked from a datalink.  A FROG rule could be used to initially limit the uplink and display to the six closest hostiles.  When the target is within range, the FROG rule could shift to transmitting up to the aircraft the six closest friendlies.  The FROG makes RQL calls via the industry standard COM /DCOM interface to retrieve and write the information.  The FROG performs thousands of track/command translations per second. 3.0 XML functionsWith the exception of HTML, the rate at which XML is being accepted in the commercial world is unsurpassed. Even arch rivals Microsoft and Oracle are both working on the XML standards body.  XML is a collection of standards that include protocols, data descriptions languages, stylesheets, and the query language.  Each new function added to XML has added to the confusion of what XML is and what it isn’t.  Although there are twenty to thirty XML related specifications, only the handful relevant to the Rosetta model of realtime information exchange will be discussed.One of the objectives of XML is to allow developers to define data structures and make them available to clients without a priori knowledge [3].  This is similar to the Rosetta function of translating the idiosyncrasies of multiple datalinks into one RQL stream.  In XML this function is achieved via several standards working together.  Early versions of XML used Document Type Definitions (DTD) to define the valid syntax of XML documents.  This has been replaced by “XML Schema” [4].   One of the drawbacks of DTDs is that they are in SGML format, and not valid XML documents.  The XML  Schema format has another significant advantage, the ability to data-type [5].  This allows defining fields as float, integer, etc.  This function would enable a Rosetta client to recognize ZZ777 as a Link-16 track number, and 0 or 1 as a Boolean and not an integer.The Document Object Model (DOM) and the update DOM Level 2 are the first attempts an interface between programming languages and XML data.  The drawback is that it assumes the entire XML data set is in memory [6].    The Simple API for XML (SAX) was developed by members of the XML-DEV working group and eliminates the “in RAM” model of DOM and replaces it with an “event stream”.  The SAX architecture is very close to the model used by Rosetta where the clients define what data they would like to see and the server sends the stream via Sockets.  As SAX is expanded to handle more complex interface issues it may at some point be incorporated into Rosetta as an addition to the Sockets interface.The other critical XML standard is XML Query language. This started out with a requirements document in January 2000 and has become the XML Query Algebra [7].  This replaces the awkward XPATH standard for searching an XML document.  It is based on SQL and serves many of the same functions.  As with any query language the objective is to optimize searches through the data.  The XML Query Language will be tightly coupled with XML Schema.Other key XML standards include XML Namespace, Extensible Style Language (XSL), and XSL for Transformation (XSLT).  The Namespace specification ensures that element names are uniquely recognizable, for instance the tag “<Title>” can be the name of a book or a salutation depending on the context.XSL is a stylesheet language in some ways similar to HTML’s cascading style sheet (CSS).  It enables stylizing the display of XML data without changing the actual data.  In the Rosetta architecture this function is performed using Rich Text Format (RTF) and “detail” files.  For instance, a snippet of TADILJ.DTL is illustrated in Figure 5 below, it defines how a Link-16 surface track or “J3.3” message will be displayed on the screen.  The detail file defines the font, size, color, order, and arrangement on the screen, but does not modify the track data. Several views of the data are available including a very brief summary display.  These can all be controlled by the developer. Rosetta passed the specific data required for a specific view when a “get detail” is requested.Figure 5. Stylesheet implemented in RTFXSLT is a language that transforms one XML document into another.  It was designed to enable creating web pages that change based on the pre-defined filtering criteria.  XSLT is built into the latest Microsoft and SUN XML parsers.  In the long term, XSLT may become the programming language of the web.  At this stage in its development it does not allow the type of transformation performed by the FROG using RQL, but in the future it may be the translation language of choice for realtime systems.4.0 Existing uses of XML in RosettaAlthough only the core XML technology has been approved as a standard, Microsoft, IBM, Oracle, and SUN have been supporting the newer functions of XML for several years.  ANZUS has expanded the Rosetta architecture to support several of these functions within the architecture of a Rosetta client.  The ANZUS Flight Management System (FMS) program uses XML files in several context including, initialization, scheduling, and operator display.  Figure 6 below is a code sample from the FMS XML initialization file.Figure 6. FMS Initialization using XMLThis file calls the scheduler and clears the operator display.  The Microsoft XML parser MSXML3.dll is used to interpret the files.  The second code excerpt, Figure 7, illustrates the scheduler in XML format.Figure 7. XML Schedule FileThis file is used to control realtime scheduling to flight management hardware and navigation sources.  The Rosetta RQL Engine is used to poll each hardware device on the aircraft’s 1553 bus based on this file. Note the file has several ANZUS “RQL” calls as well as the XML “event” calls.  The scheduling for one of the devices is in the code snippet.  The MFCDU hardware sub-address “1” is called at two Hertz in receive mode and at priority 15.  Speeds of up to 100Hz have been demonstrated using the Rosetta engine and the XML scheduler.Figure 8 is an example of XML being used for operator display and control.Figure 8. XML used for DisplayThe control and display of the Flight Management System is defined by XML in the Rosetta systems. The figure above shows specific functions being mapped to specific menu keys on the FMS hardware.  This capability adds significant flexibility to the FMS. During the design stages several layouts can be tested by pilots. Using the flight simulator and lab bench, menu structures can be modified without recompiling any of the Rosetta software.  This not only reduces development time, but it significantly reduces the cost of system upgrades.5.0 Expanded use of XML in RosettaCurrently many of the XML features are available in Rosetta in one form or another.  Many of these do not require client interaction and thus are not significant to the developers of clients for the Rosetta system.  Since realtime is paramount to the success of Rosetta many XML features cannot be incorporated at this time.  When the XML query specification is approved it could be used to replace the current SQL based query language.  SQL was chosen because it is the industry standard, it is cross-platform, there are many SQL development tools, and there is a large body of SQL programmers available.It is always very difficult to replace an existing technology such as SQL. The new technology truly has to be a magnitude better before programmers give up their tools and move on.  XML query does have several features that speed its acceptance.  Its is being developed as a Query Algebra, which should significantly enhance optimization of queries from multiple users.  Currently optimization of queries is performed inside the RQL engine.  The XML Query language will be tightly integrated with the XML Schema specification and this may also be a significant advantage.  It is much easier to syntax check each query when they are tied directly to the schema.  This is achieved in Rosetta by ensuring that each SQL query is constructed with fieldnames from the appropriate Interface control document.6.0 ConclusionAs with all successful commercial standards, the volume of XML development tools will make the standard impossible to ignore. The objective of Rosetta has always been to make realtime data available to a much broader audience than is currently supported.  Current realtime systems are limited by proprietary Application Programming Interfaces that are platform unique or so complex they cannot be easily replicated.  Rosetta transforms these complex proprietary interfaces into SQL over sockets. Probably the two most well published interfaces in the commercial market. To continue the success of Rosetta implies adding interfaces as required to meet the demands of a growing client base.  Although the current clients are not using XML, the next generation certainly will be.  In a staged software development effort XML features will be added to the system.  Initial efforts will focus on compatibility with XML clients and the XML Query Language. Later efforts will require tighter integration with XML software development tools and schema formats.7.0 References[1] Yager T. (2000): New Standards orbit XML. Infoworld Friday June 30.[2] Yanni, P.: "A VMF / Link-16 / Simulation Gateway;      Addressing the complexity of datalink   interoperability.", Spring  1999 Simulation Interoperability Workshop[3] Bray T., et. al. (2000): HYPERLINK "REC-xml"Extensible Markup Language (XML) 1.0 (Second Edition).  HYPERLINK http://www.w3.org www.w3.org. October 2000.[4] David C. F. (2000): HYPERLINK "xmlschema-0/"XML Schema Part 0: Primer.  HYPERLINK http://WWW.w3.org WWW.w3.org. October 2000. [4] Thompson  H. S. et. al.(2000): HYPERLINK "xmlschema-1/"XML Schema Part 1: Structures.  HYPERLINK http://www.w3.org www.w3.org. October 2000[5] Biron P. V., Malhotra A. (2000): HYPERLINK "xmlschema-2/"XML Schema Part 2: Datatypes .  HYPERLINK http://www.w3.org www.w3.org. October 2000. [6] WWW Consortium (2000). Document Object Model FAQ.  HYPERLINK http://www.w3.org www.w3.org, March 14, 2000. [7] Fankhauser P. et al. (2000): XML Query Algebra.  HYPERLINK http://www.w3.org www.w3.org. December 2000. Author BiographyPHILIP YANNI holds a BSE from the University of Pennsylvania.  He has 18 years of experience in commercial and military avionics and simulation.  He has been Principal Investigator for HLA/DIS programs.  In his role as a communications engineer, he specializes in developing hardware to bring Internet protocols onboard commercial and military aircraft. He is chief engineer for Rosetta technology and the project manager for the JTIDS Moving Map Tactical Information Display System (JMMTIDS).  He is currently the Program Manager for the JCTN-JDN Rosetta Gateway.  JMMTIDS won the Microsoft Software Development of the year award at Comdex 1998 and Rosetta is the 1999 winner.Mike Lewis holds a BS in computer science from Rensselaer Polytechnic Institute. He is a senior software engineer for Rosetta technology and is currently the chief programmer for the E-2C flight management system (FMS) replacement.  The E-2C FMS is a realtime avionics system based on Rosetta and XML.