Low Cost Hardware for Large Scale Entity-Level SimulationWilliam E. HelfinstineDaniel CoffinMark TorpeyWayne CivinskasLockheed Martin Information SystemsAdvanced Simulation Center37 North AvenueBurlington, MA  01803 HYPERLINK mailto:bhelf@lads.is.lmco.com bhelf@lads.is.lmco.com, HYPERLINK mailto:dcoffin@lads.is.lmco.com dcoffin@lads.is.lmco.com, HYPERLINK mailto:mtorpey@lads.is.lmco.com mtorpey@lads.is.lmco.com, HYPERLINK mailto:wcivinsk@lads.is.lmco.com wcivinsk@lads.is.lmco.comAbstract: In order to support entity level simulations on the scale of the STOW project, it is necessary to use a large amount of hardware.  This presents a financial burden that is untenable to many uses of such technology.  The STOW program addressed this challenge through the use of low-cost commodity hardware and freely available operating system software.  High-end PC hardware is comparable in performance to mid-range workstations, but is far cheaper, due to economies of scale.  The major obstacle to the use of such hardware was the need to run the UNIX-based ModSAF derivatives and RTI that STOW uses to simulate its entities.  The Linux operating system provided an efficient and stable system that outperforms both commercial workstation hardware and other PC-based UNIX operating systems for distributed simulation.  This paper describes the decisions behind the use of this hardware and operating system, and discusses the resulting benefits and problems.The goals of STOWThe STOW system is designed to support Joint Task Force level training.  It provides high-resolution, physics-based modeling of the battlefield environment, which includes both the forces taking part as well as the natural world in which the exercise takes place.  It presents the training audience with tactical displays using the same C4I systems used by commanders in the real world.  It also supports a distributed training audience, where the commanders being trained will interact with the system in their own locations.  For more detail about the requirements of STOW and the methods used to meet them, see [1], [2], and [3].These requirements imply several things about the simulations to be used.  In order to model a Joint Task Force with the resolution needed, the STOW system must support thousands of simulated objects at the platform level.  Additionally, in order to interact with real-world C4I systems, the system must run in real time.  Furthermore, in order to perform the highly detailed modeling of the synthetic environment, much more data than ever before needs to be distributed to and processed by the simulations. What is the problem?Based on these factors, the STOW project decided to base its simulation on ModSAF (Modular Semi-Automated Forces), which provided a distributed training system in real-time at the platform level for the Army.  ModSAF was extended with modeling of forces from the other branches of the military, as well as enhanced modeling of the natural environment that the action takes place in.This choice of ModSAF had several limitations as well.  First, ModSAF used the DIS (Distributed Interactive Simulation) protocol to tie many simulators into a simulation.  The DIS protocol works very well for smaller simulations, but has scalability problems when it is used for simulations with more than several hundred entities [4].  Secondly, ModSAF ran on relatively costly UNIX workstation hardware.  A large number of workstations would be necessary to provide enough simulation power to drive a scenario at the Joint Task Force scale, and the cost of this hardware would severely limit the possible uses of the STOW system.  In addition, the more individual computers needed to run the system, the more effort is required to keep the system as a whole running.  If the number of machines got too high, the logistics of running the system would overwhelm the benefits of the simulation.What was the solution?In order to solve the scalability problems of DIS, a new software architecture was needed.  This was provided by a specially developed piece of software that implemented a subset of the DMSO (Defense Modeling and Simulation Office) HLA (High-Level Architecture) RTI (Run Time Infrastructure) [5].  This version of the RTI provided was very efficient at Data Distribution Management using multicast IP technology.  This DDM capability significantly reduced the number of remote entities being processed on any particular simulator, allowing a much greater number of entities to be present on the simulation network. In order to keep the number of systems to a reasonable minimum while still keeping the budget in mind, the STOW program surveyed a number of possible platforms to run the simulation on.  The default choice would be low-end Silicon Graphics workstations, since SGI was the primary development and training platform for ModSAF.  A second option was the Sun UltraSparc line of machines, which provided a good price/performance ratio for CPU-intensive simulations such as ModSAF.  Various workstations from DEC, HP, and IBM were also considered, as well.  Finally, we noted that the high end of PC hardware was comparable in performance to the workstations we had been considering, and that ModSAF could run on a PC that ran a version of UNIX.  See Figure 1 for a comparison of some costs and ModSAF performance results on assorted hardware.After realizing that PC systems had a much better price/performance ratio as well as better raw performance than many of the development workstations STOW had been using, we decided that we would use PCs.  At this point, we began investigating methods of running ModSAF on PC hardware.  In the past two years, several groups have ported ModSAF to run on PC hardware, using several techniques, which have met with varying degrees of success.  At this point, ModSAF had been run under the Linux [6] and FreeBSD [7] free UNIX clone systems, Solaris x86 UNIX, and Windows NT using a UNIX-porting package. However, since STOW is very concerned with performance and development of new capabilities, a port to Windows NT was not considered, as the port would require a great deal of developer effort for little visible payback. We then surveyed the alternatives available for running UNIX on PC hardware.  After several performance tests and experiments with the various systems, we discovered that Linux had a significant performance advantage over both FreeBSD and Solaris both in ModSAF simulation and in network packet handling (see Figure 2).  Furthermore, Lockheed Martin had been doing ModSAF development for over a year under Linux, and had found it to be a very stable environment.  Therefore, based on the performance data we had collected, as well as the experience we had at development on Linux machines, we decided that Linux on Pentium Pro machines met our requirements the best.Approx.PriceEarly 1997SPECint95(see note1)SPECfp95(see note1)ModSAF 2.1, DIS, no DVW(see note2)STOW ArmySF, DIS, no DVW(see note2)STOW ArmySF, RTI, with DVW(see note2)SGI Indigo2R4400 250MHz$20,0004.825.4280 entities48 entities28 entitiesSun Ultra 1170 MHz$15,0006.269.06124 entities52 entities32 entitiesLinux Pentium Pro 200MHz  $50008.206.21176 entities92 entities52 entitiesNote 1:	SPECint95 and SPECfp95 are standard system level benchmarks produced by the Standard Performance Evaluation Corporation.  See  HYPERLINK http://www.specbench.org http://www.specbench.orgNote 2:	The ModSAF benchmark is a worst-case scenario involving only M1 tanks which never take damage driving straight at each other.  It does not demonstrate the actual simulation capabilities in realistic usage, but it does provide a basis for comparison.  The two ArmySF columns reflect an environment similar to that of the ModSAF 2.1 value (on the left), and an environment similar to that used in the STOW97 ACTD (on the right).Figure 1: Some performance values for several possible simulation platformsModSAF 2.1 Benchmark (see note 2 in Figure 1)Pentium Pro 200Mhz Linux 2.0.27176 entitiesPentium Pro 200MHz Solaris x86 2.5.1136 entitiesPentium Pro 200MHz FreeBSD 2.1.7128 entitiesFigure 2: Performance figures from several PC-based UNIX systemsAdvantages of Using Linux PCs in STOWThe use of Linux on PC hardware as the primary system for STOW’s simulation machines provided significant advantages to the project.  The cost savings allowed us to provide more than 350 machines as ModSAF simulators.  The faster hardware gave us additional advantages, providing enough horsepower to not only run the entire exercise, but to keep running reasonably during periods of peak load.  In addition, the faster hardware allowed us to simulate more realistically in some cases.  In particular, due to a limitation of the ModSAF command and control system, a task-organized unit had to be simulated on a single machine.  The faster PC hardware therefore allowed us to simulate larger units, particularly Marine Corps Individual Combatant companies.The faster hardware helped us in development, as well.  The full-system compile time was reduced from over 3 hours to roughly 1 hour, and compile-link-test cycles were sped up as well.  This made PC Linux boxes much faster to develop code on than any machine we had previously.Furthermore, the fact that we could realistically purchase a lot of hardware made it much easier to support the large number of developers and organizations involved in building the STOW system.  The development of the system took place at more than 50 sites and each site needed multiple machines in order to properly test the system. PC hardware also benefited from being the fastest-moving segment of the computer hardware market.  In fact, between the first purchase of PCs for STOW and the final purchase, the top-of-the-line processor available went from the 200MHz Pentium Pro to the 266MHz Pentium II, with no price change.  We were therefore able to take advantage of an even faster platform without major new expenditures.The choice of Linux as the operating system also provided us with several advantages.  Since the system ships with source code, it was possible to investigate and fix problems ourselves.  We were therefore not forced to rely on vendors who could not reproduce our operational environment for fixes to the system.  The STOW SEID did make three fixes to the operating system in particular to support our purposes:There was a bug in the ethernet driver that did not show up until we started doing testing under the RTI, and which caused an eventual system lockup. The original implementation of the code that routes incoming multicast packets to applications used an inefficient linear search through multicast groups.  This was replaced by a better scheme.   The IGMP (Internet Group Management Protocol) implementation did not handle single-group membership queries, which made the routers incorrectly drop packets.Another advantage of using Linux was that the software cost became negligible.  There was no extra licensing costs for compilers, and no issues of needing a license server machine in order to recompile.  This becomes a major advantage when machines are switched from network to network constantly, as we did.One trait of the Linux operating system was double-edged.  Due to several speed enhancements in the system libraries, bugs involving the malloc and free calls tended to crash immediately, rather than at some later, unrelated point.  This allowed this common class of bug to be debugged somewhat more easily.  On the other hand, it meant that any problems that slipped through testing were more likely to cause a crash during the exercise itself.Drawbacks of Using Linux PCs in STOWThere were some drawbacks to using PC hardware and the Linux operating system for STOW, as well.  ModSAF, for most of its lifespan, was developed and run on SGI and Sun hardware.  These machines use the same native representation of numbers as IP networking protocols--so-called “big-endian.”  PC hardware uses the opposite ordering of values.  This means that any time data needs to be sent or received on a network, that data needs to be “flipped around” in order to interoperate properly with other machines.  Since for a long time ModSAF only ran on big-endian machines, there were many more bugs to work out in the ModSAF networking infrastructure on PCs than there were on SGIs and Suns.Linux did have some traits that detracted from its suitability for use in systems like STOW.  In particular, it was not as easy to install and configure as many other systems.  In addition, it required more care in selection of hardware to run Linux than it did to run Windows.  Since new hardware regularly ships with drivers for Windows only, Linux support for cutting-edge hardware is often several months behind and can have bugs that take time to work out.  There are also many different vendors of Linux software, and each version provides slightly different configurations and levels of support.   There were several commercial software packages for commercial UNIX systems that were not available for Linux.  This did cause problems in certain circumstances, where a commercial package was needed for a particular program.  For instance, two of the STOW exercise management tools utilized commercial database products that were not available on Linux, so they were run on Sun hardware instead.The compiler tools available on Linux were also not quite up to the quality available on some commercial systems.  This fact is changing quickly, but at the time STOW was being integrated, the Gnu C++ compiler, which is the standard compiler under Linux, had many problems in its exception support, which is required to link with the RTI. ConclusionsThe choice of PC hardware and the Linux operating system allowed the successful completion of the STOW Advanced Concept Technology Demonstration.  It provided a stable, reliable, fast, and inexpensive simulation platform, and provides a path into the fastest-moving segment of the computing market for future simulations.  Based on the STOW experience, Linux on PC hardware should definitely be considered for future simulations.  It provides very fast networking and allows the use of existing UNIX-based software wherever it is needed.  Its stability and usability were comparable to the best commercial UNIX workstations and its price/performance was far better.CreditsA large number of people made running STOW on Linux PCs possible.  Here is a partial list of people involved in the effort; apologies to those we have missed:Norm Saunders and Daryl Mair of Digital Equipment Corporation ported ModSAF to run under Digital Unix on the Alpha, and wrote the little-endian support in the terrain and networking code.Bill Helfinstine of Lockheed Martin ported ModSAF to the PC running Linux (and FreeBSD), and did lots of bugfixing on the various little-endian pieces.Tim Moore and Steve Adelson of Lockheed Martin ported the Dynamic Terrain and Objects infrastructure to run on little-endian machines.Ben King and Kurt Louis of MITRE ported the Command Forces infrastructure to run on little-endian machinesDave Macanucco, Bindu Patel, Wendy Richardson, and Bill Helfinstine ported the ModSAF command and control protocol to run on little-endian machines.Various people at Lockheed Martin and SAIC provided bug fixes and stability testing by using Linux as a day-to-day development platform.Paul Metzger of Reality By Design, Inc. ported the STOW RTI to run on Linux.Brent Lander and Dan Massey of SAIC tested, configured, specified, tuned, and procured the actual PC hardware used in STOW.Ross Massey and Dan Massey of SAIC and Brian Adamson of NRL made the Linux kernel fixes described in section 5.  Terry Murphy of 3Com provided technical information needed for the driver fix.And, not least, a large number of volunteers from all over the Internet put together the Linux operating system.  This volunteer effort produced an extremely stable, fast system, which is well suited for our purposes.References[1]	P. Feldmann and P. Muller, “DARPA STOW Synthetic Forces,” 19th I/ITSEC, 1997, pp. 461-471.[2]	G. E. Lukes, “DARPA STOW Synthetic Environments,” 19th I/ITSEC, 1997, pp. 450-460.[3]	S. Fine, J. Aronson, K. Boner, R. D’Urso, B. Lander, M. Testagrossa, and A. Whitlock, “STOW Exercise Support Tools,” 19th I/ITSEC, 1997, pp. 472-485.[4]	J.E. Smith, L.C. Schuette, K.L. Russo, and D. Crepeau, “Rational Characterization of the Performance of Distributed Synthetic Forces,” 14th DIS Workshop, 1996, pp.665-673.[5]	S.J. Rak, M. Salisbury, R.S. MacDonald, S. Hill, and D.J. Van Hook, “HLA/RTI Data Distribution Management in the Synthetic Theater of War,” 1997 Fall Simulation Interoperability Workshop.[6]	M.K. Johnson, “Linux Information Sheet,” v4.13, 24 October 1997, Linux Documentation Project,  HYPERLINK http://sunsite.unc.edu/LDP/HOWTO/INFO-SHEET.html http://sunsite.unc.edu/LDP/HOWTO/INFO-SHEET.html[7]	P. da Silva, et al., “FreeBSD Handbook,” October 1997, for release 2.2.5, FreeBSD Documentation Project,  HYPERLINK http://www.freebsd.org/handbook/handbook.html http://www.freebsd.org/handbook/handbook.html