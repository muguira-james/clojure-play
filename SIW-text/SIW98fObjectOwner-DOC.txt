The Problem of Object Ownership Transferin HLA-Compliant Logistics Simulations  Zhian Li Charles M. Macal Michael R. NevinsDecision and Information Sciences DivisionArtificial Intelligence SectionDIS/900Argonne National LaboratoryArgonne, IL 60439630-252-3388, 630-252-3767, 630-252-6901liz@smtplink.dis.anl.gov, macal@dis.anl.gov, nevins@dis.anl.gov Keywords:Object Ownership, Object Ownership Transfer, Logistics ModelingABSTRACT: The task of military logistics models and simulations is to model the transportation of military personnel and equipment from their origins to deployment destinations.  In military transportation simulations, military personnel and equipment are all treated as objects and are moved via various transportation assets.  When models are integrated, there exists a need for allowing the objects to traverse between different models.  In the High Level Architecture (HLA) environment, the reflection of the object traversal between models is the ownership transfer of HLA objects between HLA federates in a federation.  This issue, however, is not directly addressed in the HLA architecture, and there is no direct Run-Time Infrastructure (RTI) service available to facilitate object ownership transfer between federates.  Only the attribute ownership divestiture service is provided. The object ownership transfer is potentially applicable to many HLA-compliant application simulations, not only to logistics models. At the 1998 Spring Simulation Interoperability Workshop (SIW), several papers addressed this issue in different applications, and various approaches were suggested.  Each approach has its advantages and disadvantages. This paper discusses the HLA object ownership transfer problem with respect to the necessity of object ownership transfer, methodologies that can be used to effect object ownership transfer, and lessons learned. I.  IntroductionThe task of military logistics is to transport military personnel and equipment from their origins to deployment destinations.  The objective of military logistics models is to simulate military logistics operations so that knowledge about the characteristics of the logistics operations can be extracted from scenario simulations.  In military transportation simulations, military personnel and equipment are all treated as objects and are moved via various transportation assets.  In a joint simulation that involves logistics model(s), objects are transported from logistics models to other models that require personnel and equipment.  The depiction of object movement in object-oriented model integration is the traversal of the objects between models.   In this process, the models that receive the objects must be able to create instances for the object class when the objects arrive.  The models that initially own the objects must also be able to delete the instances of the objects that have left the models.  In the High Level Architecture (HLA) environment, the reflection of the object traversal between models is the ownership transfer of HLA objects between HLA federates in a federation.  This issue, however, is not directly addressed in the HLA architecture.  There is no direct Run-Time Infrastructure (RTI) service available to facilitate object ownership transfer between federates.  Only the attribute ownership divestiture service is provided.  The federate developer must develop methods for solving this problem. Object ownership transfer is potentially applicable to many HLA-compliant simulations, not only to logistics models.  Several papers, dealing with different applications, have directly or indirectly addressed this issue in the 1998 Spring Simulation Interoperability Workshop (SIW), organized by the Simulation Interoperability Standard Organization (SISO) [1], [2], [3].   Different approaches have been used.  This paper attempts to examine the object ownership transfer problem in logistics simulations and to explore the advantages and disadvantages of different approaches.II.  Object Ownership Transfer Problem in HLA Simulations In the HLA environment, data and interaction transmissions are accomplished through the RTI in the form of HLA objects and interactions.  HLA objects are instances of object classes that are defined in the Federation Execution Data (FED) file.  Once objects are created and registered to the RTI, they can be used by a federate to provide data to other federates in a federation.  The attributes are aspects that define an object class.  The interaction classes and interaction parameters of a federate are used to define the cause and reaction relationship between federates.In the HLA environment, in order for one federate to provide data to another federate(s) in a federation, this federate must first publish the HLA object classes.  Having published the object classes, the federate can then create instances for the HLA object classes and register those instances to the RTI.  The RTI is then ready to accept data from this federate; the federate can deliver data by updating the instances it has registered to the RTI.  For a federate to receive data, it must first subscribe to the HLA object classes the provider publishes.  Methods must also be implemented to allow the federate to capture the data when the RTI informs the federate through the FederateAmbassador that an update to an object has come.   It is up to the federate to decide what to do with the data that it receives; the RTI has no influence on the federate in this regard.The mechanism for interaction delivery is similar to that for data transmission.  In order for a federate to send an interaction to other federate(s) in a federation, the federate has to publish the HLA interaction class, defined in the FED file, to the RTI.  For a federate to receive this interaction, the receiver must subscribe to this interaction from the RTI.  The initiator federate sends the interaction, together with the interaction parameters, to the RTI through the RTIAmbassador.  The RTI then delivers the interaction to the recipient through the FederateAmbassador of the recipient federate.  The receiving federate must capture the interaction from its own FederateAmbassador.  It is up to the federate to decide what actions to take. Logistics models simulate the processes of personnel and equipment transportation. For example, the seaport simulation model PORTSIM [4] simulates the military equipment transportation process in a seaport.   In the seaport military operations, cargo items are unloaded from various transportation vehicles and then loaded onto ships in an embarkation process.   In a debarkation process, cargo items are unloaded from ships and then loaded onto land transportation vehicles.  The ownership of the cargo items changes as the cargo items are moved.   In PORTSIM, all cargo items are treated as objects and are loaded/unloaded with different port assets.  Cargo objects traverse from one model into another when they are moved.   If PORTSIM is to be integrated with other logistics model(s) to perform a comprehensive mobility analysis in the HLA environment, the cargo object must be allowed to move from one model to another.   It is important to point out that there can only exist one object for each cargo item in the federation.  Only the ownership of an object changes as the objects traverse between models.  The HLA object ownership transfer problem must be solved.   III.  Methods for Object Ownership TransferThe HLA object ownership transfer is applicable not only to logistics problems but also applicable to many other simulations.  Several methods have been developed in different applications for solving the HLA object ownership transfer problem.  Li et al. [1] successfully converted the object ownership transfer problem into an interaction problem for the object ownership transfer problem in developing the HLA-compliant seaport simulation model PORTSIM.  Roberts et al. [2] used the RTI attribute divestiture service to handle the ball ownership  transfer in a puck ball game.   Valentino et al. [3] suggested that an autonomous intelligent software agent technology can be used to simulate the migration of mobile objects in the HLA environment.   Each of these methods has its advantages and disadvantages.    III.1.  Converting the object ownership transfer problem into an interaction problemLi et al. have successfully solved the object ownership transfer problem (in developing the port simulation federate PORTSIM) by converting the problem into an interaction problem.  PORTSIM simulates the detailed military operations in a seaport.  In the PORTSIM federate, the ownership of cargo objects must be transferred between models because cargo items are unloaded and loaded during the debarkation and embarkation processes.  To achieve this goal, first an extra interaction class, send_cargo_object, is created.   The initiator of the interaction is the federate that intends to give up ownership of a cargo object.  The receiver is the federate that has to take over the ownership of the incoming cargo object.  The parameters of the send_cargo_object interaction class are (1) number of the cargo items that need to be moved and (2) the cargo name, cargo type, the cargo dimension attribute values, and the RTI object ID of the receiving federate. When a cargo object leaves a federate, the federate initiates a send_cargo_object interaction to the receiving federate.  The receiver then creates local copies of the cargo object with the name and attribute values provided through the interaction parameters.  The receiving federate publishes and updates the objects and their attributes to the RTI.  At this time, there are two duplicate copies for each cargo object.   The federate that has given up the ownership of the cargo object must now delete the local object it holds and the copy it published to the RTI.   The ownership of the cargo object is thus transferred from one federate to another. For the non-federate object, the cargo object, ownership transfer is hence effectively converted to an interaction problem.  In fact, this approach depicts exactly the actual cargo loading and unloading processes in a port.  A cargo item comes to the port with its initial carrier, the owner federate of the cargo object.   The port unloads it from the carrier.  The port now owns the cargo item.  After some operations, the cargo item is then loaded, possibly with new attribute values, to a new carrier and moved to a new destination (i.e., a new federate).  There is no such object in the port any more.  The port federate releases the ownership of the cargo object. The loading/unloading operation is complete.  Although the cargo item has to be loaded by some port assets (crane, material handling equipment), collectively, the port can still be considered as the one that obtains and releases the ownership of a cargo object and so the owner can be the PORTSIM federate.  The steps and RTI services used in implementing this method are summarized as follows:1. Create interaction parameter pair;2. Assign the cargo object ID and attribute values to the interaction parameters;3. Send the send_cargo_object interaction to the receiving federate using the RTI service:RTIAmbassador::sendInteraction(…); 4. RTI calls the federate ambassador method:    FederateAmbassador::receiveInteraction(…)toCreate a local copy of the cargo object with given attributes;Publish the cargo object, using                 RTIambassador::PublishObjectClass(…);5. Call RTIambassador::deleteObject(…);6. Call Federate::deleteObject(…);7. Call FederateAmbassador::removeObj(…).   It is important to point out that the FED_RELIABLE message transportation mechanism must be used in implementing this technique.   This is to guarantee that the receiving federate will get this interaction and then create and publish the newly received cargo object.   Otherwise, the interaction message may be lost, and so would the cargo object. A concern that may be raised is the timing of the removal of the cargo object from the RTI.   Because the sending and receiving federates may be running on different machines across a computer network, there can be some time delay in getting the interaction message from the initiator to the receiver.  Thus, the sender federate may have removed the cargo object from the RTI before the receiving federate receives the interaction.  The RTI may temporarily lose track of the cargo object.  This problem is not as serious as it appears to be, because the attribute values of a cargo object should not be available to other federates during the simulation of loading and unloading processes.   For non-real-time applications of PORTSIM, therefore, it is not critical whether the RTI temporarily loses track of a cargo object or not during an ownership transition period.   This can, however, be a problem for real-time applications, in which every movement of an object has to be traced.  Solutions to this problem will be considered in future work as this need develops.The advantage of converting object ownership transfer to an interaction problem is that it clearly reflects the actual transportation process for cargo objects.  A cargo object is created when a federate receives a cargo item transported from another port.  There is no duplication of any cargo object in the entire federation.  This method can be used in any simulations that involve the migration of objects between federates.  There are two disadvantages in this technique.  The first disadvantage is that an extra interaction class has to be created to facilitate the transfer of objects.  The other disadvantage is that the reliable message/interaction transportation service has to be used for the send_cargo interaction.   Objects can be lost from the federation if the best_effort message transportation service is used, because best_effort service does not guarantee the delivery of the interaction.  However, using the reliable message transportation mechanism increases the network latency [5].  This is especially important if a large number of objects need to be transported.  III.2.  Using existing HLA object attribute ownership divestiture services     The second method is to directly use the object attribute ownership divestiture and acquisition services that are provided by the RTI [2].   In this method, identical copies of the objects must be created at both ends, the provider and all potential receiver(s).  When an object is to be transported from its owner to a receiver, the AttributeOwnershipDivestitureNotification service is called by the federate that intends to give up the ownership of all attributes of an object.  The RTI then informs all federates that the owner of specific attributes of an object desires to release the ownership of the attributes.  The receiving federate can then assume the ownership of the attributes of the object.  This is done incrementally, one attribute at a time.  When all attributes of an object are transferred from the original owner of the object to the receiving federate, the ownership of the object is in effect transferred.  In addition, the privilegeToDelete attribute must also be transferred along with the object attributes, to allow the deletion of the object from the receiver federate.  The advantage of this method is that it is straightforward.  All services that are needed are defined in the standard RTI functions.  There are also some disadvantages associated with this method.   First, two or more copies of an object have to be created at both the original federate and the receiving federate(s). Where there are many receiving federates in the federation, creating identical copies of the same object in all receiving federates not only increases the overhead of the federation but also makes the federation very difficult to manage.   It is especially true when many different objects need to migrate from federate to federate.   In addition, it is also conceptually incorrect that a federate must create an image of an object even before the object arrives.The second disadvantage of this method is that several RTI service calls must be made in order for a federate to complete the transfer of the ownership of an attribute. If the object has many attributes, a significant amount of effort has to be made in order to achieve the goal.  This will certainly make the system very complicated, even if all services are provided by the standard RTI.Finally, this method provides no mechanism for the sender federate to direct to which federate the object should be delivered.  When there are many potential receiver federates in the federation, there must be some mechanism to control which federate should have priority in picking the ownership of the attribute.  It cannot be determined in a voluntary and first-come first- serve basis as it currently is in the HLA specifications.  III.3.  Using mobile agents to transfer HLA objectsThe third method of simulating the object migration is to use autonomous software agents.   This method was proposed by Valentino et al. [3] at the SIW 1998 Spring Workshop.  In this paper, the software agents are described as precompiled byte code in plain text and can be sent across the network.  At one of the possible end nodes, the byte codes are interpreted and executed.  The software agents can (a) be downloaded by the explicit effort of a user or user’s application program; (b) be “pushed” from the server to one or more user nodes of a distributed simulation; or (c) autonomously migrate from one node to another in accordance with the results of the agents’ execution on the current node.  This method offers a very promising way of handling generic object migration problems.  However, this approach requires extra effort in developing the intelligent software agent. The method for implementing the intelligent software agent is still under development, so few details are provided in the paper published by Valentino et al. [3].  It is hoped that such information will be available in the not too distant future.IV.  Conclusions The HLA object ownership transfer issue is a practical problem in HLA federations in which object(s) migrate between federate(s).  The HLA specification does not directly address this issue.  There is, therefore, no RTI service available for handling the object ownership transfer problem.  Only object attribute ownership divestiture services are provided.   Three different methods have been developed, each of which has advantages and disadvantages.   The first one solves the object ownership transfer problem by converting it into an interaction problem and then solves the interaction problem with the available RTI interaction handling services.  The advantage of this method is that  it offers a clear depiction of the object traversal process.   The disadvantage is that an extra interaction class has to be created.   The second method uses the existing object attribute ownership divestiture service to effect the object ownership transfer.  When the ownership of all attributes, together with the privilegeToDelete authority, for an object are all transferred from one federate to another, the ownership of the object is in effect transferred.   The advantage of this method is that it is straightforward.  The federate developer can simply use the available RTI services.  The disadvantage is that several steps are needed in order to complete the ownership transfer for a single attribute of an object. The third method uses the intelligent software agent technique.   In this method, precompiled byte code is sent from the federate that intends to give up ownership of an object to the receiver federate(s).    The receiver federate executes the precompiled byte code upon reception of the code.  Object(s) are created when the byte code is executed in the federate that receives the intelligent software agent.   This method is a new technique and sounds promising.   Further studies are needed because this technique itself is under development.V.  ReferencesZ. Li, C. M. Macal, and M. R. Nevins, “Ownership Transfer for Non-Federate Object and Time Management in Developing an HLA Compliant Logistics Model,”  Proceedings of  the 1998 Spring Simulation Interoperability Workshop, Orlando, FL, March, 1998D.  J. Roberts, A. T. Richardson, P. M. Sharkey, and T. Lake, “Optimizing Exchange of Attribute Ownership in the DMSO RTI,”  Proceedings of  the 1998 Spring Simulation Interoperability Workshop, Orlando, FL, March, 1998G. J. Valentino, T. Kniola, S. Khalil, and K. L. Morse,  “An Agent Toolkit to Support Distributed Simulations,” Proceedings of  the 1998 Spring Simulation Interoperability Workshop, Orlando, FL, March, 1998M. R. Nevins, C. M. Macal, J. Joines, “A Discrete Event Simulation Model for Seaport Operation,” Simulation Journal, Society for Computer Simulation, Vol. 70:4, pp. 213-223, April, 1998.Defense Modeling and Simulation Office (DMSO), “High Level Architecture Run-Time Infrastructure Programmer’s Guide Version 1.3,” May 15, 1997.VI. Acknowledgment Work supported under a military interdepartmental purchase request from the U.S. Department of Defense, Military Traffic Management Command Transportation Engineering Agency, through U.S. Department of Energy contract W-31-109-Eng-38.Author BiographiesZhian Li is a research software engineer at Argonne National Laboratory. He has been working on a broad spectrum of research areas.  His main research interests are computer simulation and modeling, operations research, and geographic information systems. He received his Ph.D. from The Pennsylvania State University, M.S. from the Institute of Atomic Energy, and B.S. from TsingHua University in nuclear engineering. He is currently working on  the development of HLA federates for the logistics models developed at Argonne National Laboratory.Charles M. Macal directs the Artificial Intelligence Section and leads the Logistics Modeling and Simulation Program at Argonne National Laboratory. His research interests include simulation modeling and architectures and agent-based modeling.  He has a Ph.D. in operations research from Northwestern University and degrees from Purdue University.  He is a registered professional engineer in the state of Illinois and a member of INFORMS, the American Association for Artificial Intelligence, the Society for Computer Simulation, and Tau Beta Pi.Michael R. Nevins is a software engineer in the Decision and Information Sciences Division of Argonne National Laboratory. He received an M.S. in Computer Science from DePaul University and a B.S. degree in Computer Science from Elmhurst College.  He is the developer of the PORTSIM model. His research interests include simulation modeling and object-oriented software design and development.  He is a member of Phi Kappa Phi, Pi Mu Epsilon, and the Society for Computer Simulation.