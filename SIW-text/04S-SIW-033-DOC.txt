Distributed Simulation Synchronization Replay Tool (DSSRT) David L. FisherJames L. BryanTerry S. McDermottNorthrop Grumman Information Technology12000 Research Pkwy Suite 236Orlando, FL 3282407-243-2010, 407-243-2009, 407-243-2026david.fisher@ngc.com, james.bryan@ngc.com,  HYPERLINK "mailto:terrence.mcdermott@ngc.com" terrence.mcdermott@ngc.comKeywords:brief, debrief, after action review, replay  ABSTRACT:  With distributed military simulation training exercises comes the need to perform distributed briefings and debriefings among the participants.  Particularly during the debriefing, the replay of logged training mission data is normally required.  Due to concerns for bandwidth availability and utilization, security issues, use of different data protocols (e.g.  DIS and HLA) and protocol versions, and the potential that no one site normally receives all the data relevant to every participating site’s needs, the replay of a single event log file over the wide area network (WAN) to each site’s local area network (LAN) is not always a feasible way to provide the needed playback capability.  An alternative approach is for each site to record and replay their own simulation training mission logs.  However, for a distributed debriefing to be effective, the replay at all sites must be synchronized for a simultaneous play back.  Also, centralized control over the replay is desired in order to reduce replay coordination procedural issues during the debriefing.  In addition to the likelihood of using different protocols, the recorded log file data will in general be unique for that site.  Other issues such as lack of system clock synchronization between the logging computers and the starting of the loggers at different times (e.g., as a result of different join times) further complicate the issue.  This paper discusses potential architectural methods to implement a time synchronization system for the replay of distributed and dissimilar simulation event log files and the basic concepts for the operation of such a system.IntroductionAs has been demonstrated in the recent military operations in Southeast Asia, it takes more than just having the combat systems and personnel to operate them in order to fight an effective campaign.  The personnel must be well trained in how to operate their combat systems, and as importantly, how to employ them in concert with the other personnel and forces on the battlefield.  Live training with actual combat systems can be both costly and dangerous.  The most cost effective and least dangerous alternative to provide realistic training to military combat personnel is though the use of combat systems simulators.  There are many different combat simulation systems distributed throughout the U.S. and the world, and most of these are designed for the training of small, specialized groups.  The use of simulators for combat training becomes even more effective when distributed simulation training exercises are conducted by linking the simulators for combat systems that will fight together in the field using wide area networks and using distributed simulation protocols.  With distributed simulated training exercises comes the need to perform distributed briefings and debriefings among the simulation exercise participants to coordinate their operations before the event, and to review the exercise after the event to re-emphasize training points, provide constructive and corrective feedback and to determine lessons learned.  The debriefing process is often considered to be where most of the actual training takes place.  A coordinated and coherent distributed debriefing usually includes a replay of the simulation training event, or at least portions of it, using logs recorded during the exercise to collect the important aspects of the exercise.  These aspects can include, for example, entity state and position data, voice and data communications, and entity interaction events.  For a distributed debriefing to be fully effective, the replay at all sites must be synchronized for a simultaneous play back to ensure that all parties are reviewing the same part of the exercise.  There are different methods that can be used to coordinate the replay of simulation training event log files.  However, limitations and complications in the implementation methods can reduce the effectiveness of the replay to support the debriefing.  For example, a simple procedure would be to log all the data at one site, then replay the logged data back over the WAN to support the debriefing.  Though this method provides for a synchronized log file replay at each site, it has several major disadvantages.  First is the use of network bandwidth.  Replaying a log file of the entire event back over the WAN uses the same amount of bandwidth as the original event, thereby adding substantially to communication costs in support of the event.  To support distributed briefings and debriefings, multipoint video teleconferences (VTCs) are often utilized.  The combination of the replay of the entire event simultaneously with the VTC may exceed the bandwidth available to support the event, and certainly materially increases total cost.  Using this WAN broadcast approach also implies added cost to support one training event distributed simulation while simultaneously debriefing/replaying for another. This fact weighs against the more efficient utilization of simulation resources that results from the ability to simultaneously support multiple training functions.  Additionally, if the simulation protocol utilized to support the distributed simulation is the High Level Architecture (HLA), to record a single log file of the event would require one site to subscribe to all of the data from each site.  This defeats the efficiencies of HLA that are designed to reduce bandwidth utilization by allowing sites to publish and subscribe to only the data that needs to go out onto the WAN.  Yet other issues arise when gateways are used to allow different data protocols to be utilized at different simulation sites, such as when one site utilizes the Distributed Interactive Simulation (DIS) protocols and another utilizes HLA; or even when different data protocol versions are introduced into the equation. Many sites also have local data such as simulator configuration, instrument display data and “private” interactions to support local control functions that would not normally go over the network.  Nevertheless, this information may be internally required in order to provide an effective debriefing to those site’s participants.  Purposely placing this on the network only for central logging purposes again wastes bandwidth and increases the complexity of the interoperation of the involved sites.  In the future, as exercises involving multiple levels of security and multi-level security become feasible, this will again impact the ability of any site to record all the data relevant to another site’s playback requirements..  Though the resolution of this issue for regular training operations is still under development, once the ability to conduct distributed simulations under multiple levels of security becomes common, the centralized method of log file record and replay will not be able to be utilized.  There are other complications to consider than those presented, however these are the most significant.  A logical alternative to the centralized logging and playback just described is one that only requires each of the participating simulation sites individually to log their own data files locally and provides for synchronizing their playback from a centralized control point.  This approach resolves the issues just mentioned surrounding bandwidth utilization, simulation protocol, security and local data requirements.  However, it complicates the synchronization of the log file replay to support a distributed debriefing.  To provide an implementation of this logical alternative, the question then becomes, “How do you get a number of geographically separated, unique log files, likely using a number of different protocols and file formats, to replay at the same relative simulation time, and to start, stop, and move at greater or less than real time, all while maintaining synchronization?”  IssuesHistorically, the coordination for the replay of this type of logging scheme is through the manual stopping, starting, advancing or reversing of log files, coordinated over a phone or VTC.  This method is cumbersome and does not lend itself to a cohesive debriefing as the replays may be off by minutes at each site.  An automated method of coordinating and synchronizing the replay of these log files would facilitate the ability for each site to record and replay their own log files.  It also allows a centralized control of the distributed replay, which is important in allowing the debriefing lead to control the flow of the distributed debriefing.  However, there are a number of issues that must be addressed when replaying unique, locally logged simulation data for a distributed debriefing.First, since logged data is time stamped and sequential, the first requirement for distributed synchronized replay is that the system clocks on the computers producing the time stamps on the different log files must be synchronized, or there must be some mechanism in place to account for the possibility that time stamps among the different sites are generated using clocks that are not synchronized.  There are a number of potential solutions including enforcing the requirement that all the sites have their system clock synchronized to a standard, global time source such as GPS.A second issue is the likelihood that the participating sites will begin and end logging at slightly different times even though they are all starting the training event at approximately the same time.  However, a more complex problem arises for longer training scenarios where sites may enter and leave the training mission at various times due to their assignment for that simulation execution.  This situation may arise simply because of the difference in the typical training mission duration.  For example, in an air war scenario, an AWACS trainer may participate in a simulation training mission for eight hours straight, while an F15 training site may only need too participate for only a 2-hour period sometime within that 8-hour window.  Under this scenario, the start and stop times of the log files may be separated by hours, not minutes.  These circumstances require participating sites to know when their logging started relative to when the first logged data occurred for the entire simulation.  This will enable the sites to commence their replay when their entry into the simulation occurred relative to the “start” of the overall training event.In implementing an automated replay coordination tool, another issue is of course, the management and delegation of control and privileges to those participating in the distributed debriefing.  As the debriefing progresses, the participants who need to provide input and effect control of the replay may change as the training event evolves through time.  Continuing the air war example started above, the training event mission commander may begin the debriefing and the mission replay.  The control of the replay might then be passed to the AWACS senior controller to allow him or her to provide the controller perspective for an engagement setup.  The control may then be passed to the F-15 flight lead for their input and perspective, then back to the event mission commander.A fourth issue is how to incorporate all the required functionality into the various data logging and replay systems at the different participating sites, each of which was likely developed or procured by a different contractor or vendor, each of which has different and often incompatible functions and controls.  In particular, this applies those legacy debriefing systems that are already deployed and incorporated into existing simulation sites.  For these systems, a determination of the most cost effective and expedient solution is necessary.  Potential solutions include replacement with a new system that will allow data log replay synchronization or the modification of the present systems to allow replay synchronization.A final issue is to ensure that all the relevant brief/debrief systems supporting a distributed synchronized log file replay have some minimum set of control commands that allows it to participate in a distributed brief/debrief.  These should include the obvious normal DVD type controls such as start, stop, go to time, forward/reverse, speeds faster and slower than real time and pause.  In addition, other controls more specific to simulation debriefing should be included in the control set such as mark (during the recording of the log file, marking a particular event to enable a return to that point during playback), go to mark, map centering, and ability to place a visual marker and/or text on the viewer.Implementation – Modification of Present SystemsIn order to address all of the issues described above while providing for the synchronization of disparate and dissimilar log files, a common method of coordinating the log file replay needs to be developed.  Since a large number of different and modified data logging and replay systems must be able to communicate and exchange control data, the most logical method to facilitate this requires the definition of a well-defined synchronization protocol.  This well-defined protocol must define the various control commands, time synchronization criteria, and site time placement mechanisms that the logging / replay tools would be required to implement.  This definition should include the mechanism or mechanisms to address the previously described issues.This synchronization protocol would preclude interested parties from having to completely replace their existing logging and replay systems, yet enable them to incorporate the ability to synchronize distributed debriefing into their current systems.  The implementation of a control protocol would probably require modifications to existing systems, but could be incorporated in the design of new logging and log file replay systems.  If such a protocol were adopted, it could significantly contribute to efficient use of resources during all distributed debriefings, which, over time, could accumulate in huge cost savings to the government.An alternative and supplementary method would be to develop an software API wrapper to incorporate synchronization into a debriefing system in a less intrusive way, and require less modification to existing systems.  This method would reduce or eliminate the need for logging and file replay systems to incorporate the details of the control protocol and time synchronization methods into their software.  The log file replay systems’ software would be modified to incorporate the API calls, thus enabling that debriefing system to participate in a distributed debriefing that includes the synchronized replay of different event log filesfiles.Figure 1.1: Architecture for a Synchronization API Wrapper.Figure 1: Architecture for a Synchronization API Wrapper.We recommend that SISO formalize a group to define and standardize the synchronization protocol.Author BiographiesDR.  DAVID L.  FISHER is a software developer for Northrop Grumman Information Technology in Orlando, FL.  Since receiving his doctorate in Physics from the University of Texas at Austin in 1995, he has worked in the areas of theoretical plasma physics, laser-plasma interactions, laser wakefield acceleration, the detection of explosive materials, millimeter wave sensor technologies and applications, and in the development of an Internet business.  He is presently developing several software tools.  David has 20 professional publications and 2 patents (1 pending).DR.  TERRY S.MCDERMOTT is Senior Scientist for the Simulation Technology Department of Northrop Grumman Information Technology.  He has over 20 years of experience in systems engineering and simulation including system and software definition and development, system performance simulation, software design, realtime and constructive simulation, protocol development, standards development, and project management.  Currently, Terry is contributing to development of systems for visualizing tactical situations, training exercise planning and coordination, and distributed test environments.  Terry received his doctorate in mathematics from the University of Southern California specializing in Functional Analysis.JAMES L.  BRYAN is a Systems Engineer for Northrop Grumman Information Technology in Orlando, FL.  He is the lead for Federation Integration and Test, and is responsible for standards development, systems analysis, and test/user tool development for the USAF Distributed Mission Training (DMT) program.  He has 8 years of experience in distributed simulation integration and test and simulator system development and design.  While on active duty with the USAF as a combat search and rescue helicopter pilot, he was the Test Director for the OSD sponsored JCSAR JTE’s Virtual Simulation program.  Jim has four professional publications and one patent pending.  Page  PAGE 4 of  NUMPAGES 4 EMBED Word.Picture.8  