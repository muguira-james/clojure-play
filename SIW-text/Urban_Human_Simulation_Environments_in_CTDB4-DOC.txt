Urban Human Simulation Environments in CTDBMary Ann Pigora, Benito Graniela, Dr. Douglas ReeceScience Applications International Corporation12479 Research ParkwayOrlando, FL 32826-3248407-207-2772, 407-207-3666, 407-207-2787 HYPERLINK mailto:pigoram@saic.com pigoram@saic.com,  HYPERLINK mailto:granielab@saic.com granielab@saic.com,  HYPERLINK mailto:reeced@saic.com reeced@saic.comKeywords:Terrain, MOUT, CTDB, MESABSTRACT:  This paper reports on SAIC’s efforts to develop urban terrain databases for high fidelity simulation at the individual human level.  As simulation hardware increases rapidly in capability, simulation applications are moving into complex domains and requiring high fidelity.  Simulation users increasingly need individual-level exercises set in urban terrain—a perfect example of high complexity and fidelity requirements.  Urban environments, as seen by people on foot, have many objects such as mailboxes, streetlights, and furniture.  The effective topology of the terrain is enormously complex, as it includes rooms inside buildings, multiple elevations, and even locations underneath the terrain skin.  SAIC has developed several urban databases as part of the Dismounted Infantry Semi Automated Forces (DISAF) and Virtual Emergency Response Training System (VERTS) projects.  Our emphasis in these projects has been representing the urban environment in the Compact Terrain Database (CTDB) format for computer generated forces (CGF).  In DISAF we explored the Multi-Elevation Structures (MESs) in CTDB by creating a database with an urban area containing high rise buildings, a sewer, and a bridge.  In VERTS we created a CTDB of a portion of Philadelphia.  As part of this work we developed a process for creating urban CTDBs from visual SEDRIS transmittal sources.  We also upgraded DISAF to more efficiently display large numbers of MESs and to correctly process MES attribute queries.  The DISAF and VERTS applications brought to light several limitations of CTDB and MES as formats for representing urban terrain.  These limitations include low feature density and the inability to represent a wide variety of feature types.  Similarly, we found that the DISAF software itself makes assumptions about the terrain—for example, that there are no holes in the terrain skin, that the terrain is never vertical, and that MESs do not overlap—that limit a modeler’s ability to use CTDB to represent urban terrain.  Finally, our experience suggests several directions for future improvements in urban terrain representation and processing for both CGF and live simulation systems. Figure  SEQ Figure \* ARABIC 1. Office/Industrial area from DCE visual database.IntroductionUntil recently, terrain databases for military simulations (mostly simulating tanks or aircraft) have been relatively sparse.  Databases for tank warfare are characterized by large empty expanses of terrain, often with aggregated features such as tree lines or canopies and geotypical cultural features.  Databases for flight simulators often have only low resolution, texture mapped features (i.e., pictures of features painted onto the terrain).  Beginning in 1997, the Dismounted Warrior Network (DWN) project developed a small database of the McKenna urban warfare training site in Ft. Benning, Georgia which included building interiors.  This site has only about 17 buildings in it, and only one of these has an interior in the Computer Generated Forces (CGF) version of the database.  Generating this CGF database was a complicated, tedious, error prone process.As simulation hardware increases rapidly in capability, simulation applications are moving into complex domains and requiring high fidelity.  Simulation users increasingly need individual-level exercises set in urban terrain—a perfect example of these high complexity and fidelity requirements.  Urban environments, as seen by people on foot, have many objects such as mailboxes, streetlights, telephone poles, fire hydrants, bus stops, and furniture.  Furthermore, the accuracy of the shape and location of these objects must be high compared to tank or aircraft terrain databases to ensure a fair fight between dismounted combatants.  The effective topology of the terrain is enormously complex, as it includes rooms inside buildings, multiple elevations, and even locations underneath the terrain skin.  Since urban areas contain man-made machines, many objects in the environment move and change.  For example, traffic lights, doors, escalators, and elevators change or move in important ways.  Lighting characteristics become more important as illumination in some places comes primarily from objects in the database, and visibility depends on transparency and reflectivity characteristics of the man made-materials.For the past few years, SAIC has been involved with the development of urban terrain databases for simulations, in particular for CGF systems.   The CGF system being developed is Dismounted Infantry Semi-Automated Forces (DISAF), an extension of the OneSAF Test Bed (OTB), build A. The work reported here concerns the Compact Terrain Data Base (CTDB), version 7, format used by DISAF and OTB, and the Multi-Elevation Structure (MES) representation within CTDB.  The next section describes new urban databases that have been created for the DISAF Capabilities Enhancement (DCE) and Virtual Emergency Response System (VERTS) projects.  The following section describes the database generation process and reviews problems that had to be overcome.  Section  REF _Ref503323475 \r  \* MERGEFORMAT 4 discusses limitations in both CTDB and in the DISAF terrain processing algorithms that prevent all of the desirable features of an urban database from being represented.  Section  REF _Ref503323491 \r  \* MERGEFORMAT 5 concludes by proposing new features to consider in developing a new terrain database format for future urban applications.Urban DatabasesIn the past year, SAIC has participated in two projects requiring urban terrain environments for human simulation.   Although both projects are aimed at simulating a modern city environment, they have concentrated in different but complementary areas of research: small urban areas with detailed building interiors, and large cities with building exteriors only. DCEAs part of the DISAF Capabilities Enhancement project, sponsored by the U.S. Army Simulation Training and Instrumentation Command (STRICOM), SAIC developed both visual (OpenFlight) and CGF (CTDB MES) models of a six city-block office/industrial environment which was placed on the existing McKenna terrain database ( REF _Ref503321870  \* MERGEFORMAT Figure 1).  This area, which is geotypical rather than geospecific, utilizes existing MES models as well as new high-rise office building models. Thirty furniture models were created for populating the MES interiors ( REF _Ref503758477 \h Figure 2). Little outdoor detail (such as sidewalks or directional signs) was included, as the aim of adding these buildings was to exercise DISAF behaviors inside buildings. Figure  SEQ Figure \* ARABIC 2.  High-rise office interior in DCE databaseMaking the site geotypical made the modeling process more efficient, allowing existing models to be reused and allowing the high-rise office buildings to reuse duplicate floors.  The high-rises had five unique floor plans including the first and second floors with a two story atrium, two tenant floors set up for single or multiple occupancy, and a roof with stairwell access.  The tenant floors were duplicated to make high-rises with 5, 10, and 20 stories.  The 20-story building had a total of 748 enclosures and the entire six block area had over 1500 enclosures, making it 30 times the interior complexity of the previous McKenna database.  The existing sewer system at the McKenna site was also modeled to allow testing of underground MES operations ( REF _Ref503768934 \h Figure 3).  The sewer itself was composed of 21 sewer pipe junctions with connecting pipe, and eight of those junctions served as entry/exit points by connecting to manholes.  In addition, there was one walk-in entry where the pipe drained out to the terrain skin surface.  The pipes themselves were 12-sided tubes to approximate round pipes.  Having no horizontal surfaces required a re-examination of what constitutes “floor” as opposed to “walls” for the PVD display.Figure  SEQ Figure \* ARABIC 3.  Sewers in DCE DatabaseFigure  SEQ Figure \* ARABIC 4.  PVD display of DCE Database Office/Industrial AreaThe thirty-fold increase in the number of MES enclosures in the new CTDB slowed the DISAF plan view display (PVD) refresh period to several seconds. To address the refresh problem, DISAF was enhanced to extract 2D blueprint representations of each enclosure at load time and display those directly ( REF _Ref503778723 \h Figure 4).  The PVD display code was further enhanced with options for displaying single floors and outlines of MESs. To identify which MES rooms should be displayed on a given level of the building, a level file (.le) was created for each database, listing the MESs in the database and the MES enclosures grouped by floor (level).  VERTSOn the VERTS project, SAIC worked with the Institute for Defense Analysis (IDA) to create relatively small (1km x 2 km) geospecific CGF databases containing hundreds of buildings and features. The initial database generation effort focused on Philadelphia’s City Center area ( REF _Ref503758732 \h Figure 5).  The database includes features such as roads, trees, light poles, traffic lights, fire hydrants, newspaper boxes, bus stops, and geospecific monuments.  SAIC generated MES .rdr files (see Section  REF _Ref503326429 \r  \* MERGEFORMAT 3.2) from landmark visual building models for use in the CTDB. EMBED MSPhotoEd.3  Figure  SEQ Figure \* ARABIC 5. Philadelphia Visual Database (IDA).Database GenerationVisual models were either provided or created in OpenFlight format using MultiGen Creator.  Where possible, we found it was best to create visual and CGF databases from the same source or in a chained conversion, rather than as parallel but separate processes.   Although the terrain database generation process used for the development of the DCE databases was acceptable, it was far from optimal. The task at hand required modifications to an exiting pair of databases: the OpenFlight visual database and the corresponding CTDB.  The two databases have been used and modified at SAIC and other facilities, and the terrain skin correlation was as much as half a meter off in some places.  The best solution would have been to modify one database, SAF or visual and regenerate the other from it to ensure correlation.  Due to the unavailability of certain terrain database tools, we instead had to fold modifications done to the visual back into the existing CTDB.  The modification process used for DCE is depicted in  REF _Ref503761598 \h Figure 6. EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 6.  DCE Database Generation ProcessThe database generation process for VERTS started at IDA with the generation if the digital cities. TerraSim’s TerraTools were used to generate both the OpenFlight visual model and a STF. The conversion process used in VERTS is depicted in  REF _Ref503762410 \h Figure 7. EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 7.  VERTS Database Conversion ProcessTerrain Skin GenerationThe terrain skin for the DCE database was already available in both OpenFlight and CTDB format.  However, it had to be modified to accommodate manholes into sewers. The DISAF terrain recompile tool, which is designed to make modifications to a CTDB, was modified to take a data file containing new geometry to replace an existing terrain polygon. DISAF is designed to patch any holes found when a CTDB is loaded at run time, so it was not possible to create a true hole in the terrain skin. Instead, “wells” were added to the terrain skin under each sewer entrance (see  REF _Ref503326589 \h Figure 8).  DISAF entities are able to climb down through a manhole into these wells.  DISAF does not check for collisions between ground entities and the terrain skin, so the entities can move through the sides of the well and into the sewer tunnels. The opening of the well in the CTDB database corresponds to a hole cut in a terrain polygon in the visual database.For VERTS, IDA assembled and deconflicted source data to provide a SEDRIS transmittal containing building model instances and point features, as well as an OpenFlight visual database [1].  The CTDB terrain skin had to be created from a SEDRIS transmittal using TASC’s sedris2ctdb converter software.  The converter generates a CTDB by mapping SEDRIS objects into CTDB features [2].  Getting the SEDRIS transmittal correct and in a form useable by the sedris2ctdb converter was a learning process and required many iterations between IDA, TASC and SAIC.  Some of the problems encountered included incorrect attribution of point features (tree height, radius, and density; length, width and height of volume features; road width), concave volume model footprints, complex volume model footprints, and the intrinsically high complexity of a terrain skin that incorporates curbs, medians, and manholes.  Problems arising from limitations of the CTDB format will be discussed in Section  REF _Ref503323475 \r  \* MERGEFORMAT 4.Figure  SEQ Figure \* ARABIC 8. Sewer wells in terrain.  Green lines show CTDB terrain skin polygon edges, and black lines show the polygons of a sewer system.  The terrain skin has a well at the manhole entrance.Building GenerationBuildings were added to both the DISAF and VERTS CTDBs by first creating a MES reader (data) file and then compiling the MES data into the CTDB using DISAF’s terrain recompiler tool.  A MES reader file is a text file that lists enclosures (rooms) and apertures (doors and windows) as groups of polygons and outlines; it also includes attributes for apertures such as thickness, visibility and mobility through the aperture [3].  Building this text file by hand for structures of even minimal complexity is virtually impossible. However, previous DISAF and OTB projects had developed a prototype software tool that could take OpenFlight visual data and create a reader file from them.  This tool depends on having an OpenFlight file with a particular structure; the tool utilizes OpenFlight group and object names to identify MES enclosures and apertures and takes aperture topology information from group comment fields. Creating a large OpenFlight model that conforms completely to the structure required by the converter tool is a tall order.  Errors cannot be detected easily by a developer; the CTDB version of the building can only be checked by exhaustive testing with DISAF entities.  To help guarantee a better reader file, extensive error checking was added to the converter, including:Checking the enclosure for cracks or missing polygonsMaking sure the polygons are oriented correctlyMaking sure all aperture connections are validMaking sure all enclosures have an aperture leading to themChecking for valid materialsChecking for correct number of aperture attributesChecking for correct number of vertices in polygons (the recompile tool handles only 3 or 4 vertices per polygon)Warnings for invalid aperture visibility/mobility combinationsWarnings for polygons that are not aligned with the X, Y or Z plane (most rooms have 90 degree corners and are aligned with the axes)Custom MultiGen Creator plugins were also written to aid in building the MES-attributed model.  Minor changes to the MES-attributed model, such as removing aperture polygons to leave an open doorway, are required to make a visual model suitable for a man-in-the-loop simulator.  These were also accomplished via a custom plugin.  This meant that the visual model and MES .rdr file came from the same source data, guaranteeing a high degree of correlation.This more automated pipeline for creating a MES .rdr file and visual model from one OpenFlight model is an order of magnitude faster than previous methods described in [4], but it still imposes a rigid structure on the OpenFlight model, creating extra work for the modeler.  Future enhancements to the converter could include inferring enclosures, apertures, and aperture connectivity, and calculating aperture thickness from the geometry.  There will always be special cases were the inference will break down (such as stairwells, which make very poorly structured enclosures), so provision must still be made for the modeler to specify complex cases by hand.Problems Encountered with Representation of Urban EnvironmentsThe following is a discussion of key limitations found in CTDB and DISAF for modeling urban terrain.  There are two types of limitations: format limitations and application limitations.   Format limitations prevent the representation of source data whereas application limitations prevent meaningful interpretation or use of the data represented in the database.  Whereas format limitations cannot be overcome without a new format—thus preventing old versions of OTB from using the new databases—application limitations can generally be corrected by enhancing the application.  We list the application limitations below because they are examples of problems that violate long-standing assumptions in DISAF about the nature of the terrain database.CTDB v7 Format LimitationsVertices per patchThe CTDB format divides the database into patches; each patch is limited in the number of vertices it can contain. The limit meant that the database was chopped into very small patches (25m per side, as compared to 500m per side in the original McKenna database), and since features such as volumes cannot cross patch boundaries, they were clipped to the small extents as well.  The feature complexity skyrocketed. Vertical terrain skinCTDB cannot handle vertical terrain skin polygons like those needed in curbs or retention walls.  When the CTDB back end processing code encounters vertical polygons it deletes them because from a 2D perspective they are unnecessary.  The solution was to slope terrain triangles slightly so that they were no longer considered vertical by the compiler.  However, this highlighted a further problem with the processing of vertices.  When vertex locations are read and converted to the internal format used by CTDB, fractions smaller than patch_size/215 are lost (i.e., separations of less than 1.5 cm on a standard 500m patch).  Therefore, the horizontal separation between vertices should be greater than patch_size/215 meters (see  REF _Ref503762519 \h Figure 9).  Vertical (Z) values are stored in different units, and so do not have this restriction.Figure  SEQ Figure \* ARABIC 9. Horizontal separation for curb geometry.Volume OutlinesThe CTDB format allows only 4 bits for the number of vertices that a feature can have.  Features include micro terrain, volumes, linears, canopies and laid linears.  Volumes, for example, which are represented by a polygon describing the outline of the roof, are limited to 15 vertices.  The compiler must break down features with a larger number of vertices into separate features.  The Philadelphia database building footprint examples in  REF _Ref503762538 \h Figure 10 must be subdivided for two reasons: (1) they contain more than 15 vertices each, and (2) they are concave (see Section 4.2.3).Figure  SEQ Figure \* ARABIC 10. Complex, concave volume outlines.Volumes with Vertical CurvesThe fact that volumes are simple roof outlines causes another problem.  There are many objects whose outline is complex and important to line of sight calculations, but there is no way to accurately represent them.  A light pole with a protruding arm ( REF _Ref503762615 \h Figure 11 a), for example, can either be represented as a long rectangle, meaning that a CGF cannot see under the arm (b), or as a pole, meaning that the arm is invisible (c).  More complex constructive solid geometry volumes or simple bounding box volumes that could be stacked on top of each other (d) would be more useful. Currently, this can be accomplished by using a MES structure, but MESs require extra overhead in the form of enclosures and apertures.  Figure  SEQ Figure \* ARABIC 11. Complex volume representation alternatives. (a), actual object; (b) CTDB volume representation that completely bounds the object; (c) more accurate CTDB volume that ignores horizontal piece; and (d) possible MES representation of objectLimited volume typesAttributions on volumes would help distinguish between different objects of urban clutter.  Feature representations in CTDB are either volumes (consisting of a roof outline), laid linears (consisting of an ordered list of vertices and a width), abstract features (consisting of a type code and a linear or areal vertex set), or aggregates (groupings of individual features).  Trees are a specific laid linear feature type, and CTDB defines a tree struct with needed fields such as tree truck radius and tree foliage density.  Newspaper stands, fire hydrants, light poles, and street signs are all represented as volumes.  Extending the tree feature type idea, new volume feature types could be created for each of these, for example, a street sign struct with a string field for street name could be coded.  As more richness is added to the databases, however, ever more feature structures would be required.  Adding an arbitrary number of attribution tags to the volume would allow the CGF to discern what type of feature it is as well as giving it access to any other feature information it might use (fire hydrant water flow for emergency response (firefighter) simulation, street sign text for navigation, etc.).  This is the approach being taken by SEDRIS.Similarly, generic linears have only a width attribution.  Street direction (flow) and number of lanes could not be represented or saved in CTDB.  This is merely the tip of the traffic iceberg; to encode traffic control information, the CTDB would have to store every street sign and symbol painted on the pavement.  Currently, ModSAF does not simulate traffic control, and it can’t as long as the control measures cannot be encoded in the terrain database.Limited Aperture AttributesVisibility through building windows is not always bi-directional. Some office buildings have tinted or filmed windows that allow visibility from the inside but block outside visibility during the day.  For example, consider a CGF entity at noontime standing on the street in front of a building with tinted glass windows. The CGF will not be able to see inside the building but other entities (CGF and non-CGF) inside the building could see the entity on the street.  It is not possible to represent this phenomenon in the MES format, creating an interoperability problem between the visual and CGF representations.  This could be fixed by splitting the MES aperture visibility parameter into two values, similar to thickness and step to enclosure, or, on a more general scale, by implementing lighting models.  A lighting model would provide a more thorough solution, as it would allow the aperture visibility to be reversed at night. MES Format ExtensionsAs discussed in section 2.1, it is helpful for display and route planning to know what elevation level a MES enclosure is on.  For DISAF, this was accomplished by creating an auxiliary level file for a terrain database.  Producing this file by hand and apart from the database invited correlation and version errors. While most enclosure levels could be inferred, there are special cases (such as stairwells or multi-story atriums) which would be difficult to process.  Adding the level information to the MES format would be a more integrated solution. Current DISAF movement and planning assumes that enclosures are not disjoint regions, i.e. you can not get from one point to another without having to go through another enclosure. The roof and the terrain skin are disjoint regions; therefore it was necessary to make the roof a different enclosure than the terrain skin.  Apertures were placed around and above the roof, and the roof became an enclosure.  This could be seen as either a bad assumption on the part of DISAF movement and planning, or as a place where adding some attribution to the MES would give DISAF a “major hint” about the topology.  Dividing the MES into apertures and enclosures is, essentially, just a “major hint” as well; planning algorithms could infer enclosure and connection information from the raw geometry.  So there is a fine line between what is the responsibility of the algorithms, and what is a reasonable addition to the MES format.CGF Lessons LearnedThe issues discussed in this section have to do with the terrain processing algorithms in DISAF.Reasoning with small patchesAs discussed in the previous section, high terrain density resulted in a small CTDB patch size.  CTDB slices volumes and roads along patch boundaries, resulting in many small volumes and road segments.  With a patch size of 25 meters, one building in the Philadelphia database was chopped into over 50 separate volumes. This put an unreasonable load on the SAF route planning.  Also, there is a limit on the number of road segments that can be used per route, limiting the route planning to the length of a few city blocks at a time. Although the CTDB format itself does not impose a minimum size on patches, it is possible that certain SAF behaviors and threat assessment algorithms assume a relatively large patch size.MovementBesides the problems in getting a SAF through the terrain skin and into the sewer MES discussed in section 2.1, it was also found that the SAF terrain elevation lookup ignores all but the top MES when two MESs are stacked on each other.  Therefore, it was not possible to run the sewer pipes under other buildings.  This would also preclude having a building balcony jut out over another building.Although entities could fall into the vertical sewer openings, they were not able to climb back out.  A ladder-climbing behavior was added, to make entry and exit more graceful.Concave Building VolumesDISAF expects volume footprints to be convex, in order to simplify algorithms such as determining whether a point is inside the polygon.  It is up to the database creator to subdivide concave volume footprints into convex pieces.   This could also be described as a limitation of the CTDB compiler back end code, which could be enhanced to do the subdividing automatically.  Creating a minimal convex set from a concave polygon is a challenging, but solvable, problem[5].Binary Aperture VisibilityThe floating-point aperture visibility provided by the MES is not used by DISAF.  DISAF currently treats visibility as a boolean, supporting only completely opaque or transparent apertures.  This makes it impossible to model tinted or filmed glass.Desired Urban Terrain Database EnhancementsHaving outlined some of the limitations found while working with urban CTDB databases, it is time to offer ideas for the future representation of CGF environments. These suggestions are based on perceived future needs for both the DCE and VERTS projects.  They geared more toward major revisions to existing formats, or alternatively as design criteria for a new format.Terrain Database FormatSAF environments of the future should allow for higher vertex and triangle density.  Levels of Detail (LODs) may be used to reduce the geometry complexity for a particular system, but hardcoded limits should be avoided.  Dynamic Objects Movable objects should be bundled with the environment.  Current CTDB implementation requires furniture and other moveable features to be separately developed entities that are added at runtime, making it difficult to keep location-specific entities with the correct database.  For example, it is currently impossible to associate a Philadelphia Center City police car with the Philadelphia database, as opposed to the New York database.  Location independent models, such as a generic car, could be kept in separate bundles.Future database formats should allow functions and behaviors to be associated with geometry. Simple open-and-close, and up-and-down movement will be needed for doors and elevators. Movement along other geometry (i.e. rails) will be useful for trains and cars. Buttons can be associated with movable objects to trigger reactions (e.g. turning on lights) or behaviors.  The game industry has environments which associate functions to geometry elements which allow the modeler to specify how doors open, buttons that trigger actions as well as how elevators and trains move.  This is part of a bigger issue encompassing how such behaviors will be represented on the network and how each simulation models the behavior, but before these points can be addressed, a way of encoding the behaviors in the environment to make them available to the applications must be found.Multiple Feature RepresentationsFuture formats should allow for multiple feature representations: simple bounding boxes, roof outlines with elevation, complete feature geometry, and abstract feature data. These different but correlated representations would allow for use of optimized algorithms when necessary. An alternative could be to provide the highest degree of detail and let the SAF represent the degree of abstraction that it needs. However this generation process will most likely create correlation and interoperability problems that can be avoided by providing the unambiguous representations.More Flexible AttributionFuture SAF databases should be able to have attributes on geometry, textures and features.  Texture attributes can be used to extract contrast information which might be necessary to determine the effect of camouflage on detection.  Time of the day should also be taken into account, which will require additional materials and attributes on the environment, lighting models, and even standard perception behaviors attached to features.Dynamic TerrainFuture SAF environments should incorporate mechanisms for dynamic structure in the initial design, making dynamic terrain implementations easier to achieve.  Many dynamic terrain mechanisms used today are ad hoc, often coded hastily for a demo and made de facto standard in the absence of any other solution.  An example is seen in the wall breaching mechanisms used by DISAF and various Stealth viewers; holes breached in walls are calculated independently by each system instead of having a standard algorithm or a server that creates and distributes new geometry.  As a result, holes are not correlated between systems.Some dynamic terrain implementations may benefit from foresight in the terrain database format.  As an example, if different visual models are used for different levels of destruction, it may be necessary to have a set of corresponding volume roof outlines in the CGF database.Terrain Database CreationEasier, more convenient methods of creating terrain databases and MESs will bring the costs of building a single database down.  This will lead to richer sets of available databases for simulations to use.  Building Interior Modeling for SAFSAIC is working on enhancements to the MES creation pipeline that will take some of the burden off the modeler.  The current implementation of the OpenFlight to MES converter requires a somewhat rigorous structure of the OpenFlight models. Future implementations should leave as much as possible of the building interior geometry partition and representation details to a compiler. The more general building representations are the faster building interiors will be developed. A useful extension of the MES format, for example, would be to incorporate external referencing of MES fragments. This would allow for single enclosure and aperture reuse, aggregations of enclosures and apertures such as a floor of a building, and complete MES references. Some aspects of a MES-attributed OpenFlight model make it more complex than a visual model.  Floors must be chopped into pieces that fit exactly under an enclosure, making at least one floor polygon for each enclosure in a building.  In a visual model, generally a floor can be represented with one polygon per building story.  The easy solution would be to swap out the more complex chopped geometry for one unified polygon when converting a MES model to a visual model.  Alternatively, future model to SAF database conversion tools could use enclosure walls as a cookie cutter to cut out the appropriate floor and ceiling sections.  Note that this is not a problem with the MES .rdr format, merely in how that format is reached from a MES-attributed model.Master Databases with Runtime Parcel ExtractorsFinally, the best correlation is achieved if the visual and SAF data is kept together (geometry and features) until the runtime databases are needed.  Our experiences indicate that an integrated environment representation in SEDRIS should be used for the generation of visual and SAF runtime formats.  SEDRIS has the capability of storing very high fidelity environments and is flexible enough to allow needed attributions.  The best correlation and interoperability will be achieved if similar and correlated geometry representations are kept together as long as possible.  Subsets or “parcels” of data, bounded by coordinates or consisting of only needed features, can be extracted from the rich master database, giving lightweight, correlated runtime databases that contain only what is needed for a given task or simulator.  In  REF _Ref503762715 \h Figure 12, two different runtime format parcels are extracted from the same master database.Figure  SEQ Figure \* ARABIC 12. Parcel Extraction from Master Database.How to Proceed?  We have seen that the current CTDB format has many limitations when used to represent a dense urban environment.  While simulation application limitations were also discussed, it is an unavoidable truth that the simulation is dependent on the terrain format.  Many new and needed individual level behaviors cannot be implemented without first having support from the terrain format.  If a terrain format supported traffic controls, for example, applications would undoubtedly be quick to take advantage of them for basic traffic simulation.  If the terrain format supported lighting attributions, such as light location, color, and intensity, applications would be able to implement simple lighting models, thus adding substantially to the feeling of immersion in a Stealth or the realism of a CGF application.The final question is, of course, how can these goals for a more capable terrain representation be achieved?  Should an existing runtime format such as CTDB be extended?  Or is it time to gather lessons learned into a new design?  Should existing systems such as ModSAF, WARSIM, and CCTT be retrofitted to a new runtime database format?  Or should we forge ahead with OneSAF and not look back?  Like the SIMNET database pioneers who assessed the environment needs for tank simulators, we now have new challenges to master in capturing the fidelity necessary for the next generation of human simulators.  AcknowledgementThe DCE portion of this work was done as part of contract N61339-99-C-0007, funded by the Simulation, Training and Instrumentation Command (STRICOM).  The VERTS portion of this work was done as part of the ADST-II program, contract N61339-96-D-0002, also funded by STRICOM.  We would like to thank Paul Dumanoir of STRICOM for his interest and support.References[1] Robert L. Clover, (2000) “VERTS Synthetic Urban Environment Development Process – End to End”, Proceedings of I/ITSEC 2000.[2] Victor J. Skowronski and Thomas Stanzione, (1999) “Converting SEDRIS Data to the CTDB Format”, Proceedings of the Fall 2000 Simulation Interoperability Workshop[3] Thomas Stanzione and Dr. Alan Evans, (1996) “Multiple Elevation Structures in the Improved Computer Generated Forces Terrain Database”, Proceedings of the 6th Computer Generated Forces and Behavioral Representation Conference, University of Central Florida.[4] SAIC (1998). “DISAF MOUT Enhancements”, CDRL AB02 of Delivery Order #55.  Lockheed Martin Information Systems Company, Orlando, FL. [5] Mark Keil and Jack Snoeyink, (1998) “On the time bound for convex decomposition of simple polygons”, Proceedings of the 10th Canadian Conference on Computational GeometryAuthor BiographiesMARY ANN PIGORA received her BS from the University of Central Florida and her MS from the Georgia Institute of Technology, both in Computer Science.  She has ten years of experience in 3D graphics and animation including work on a virtual reality based modeling system (PolyShop) at the Institute for Simulation and Training, and at Walt Disney Feature Animation as the CGI Model Development Supervisor for the movie Mulan. Currently, she is working at SAIC on the new SEDRIS tools effort and on creating CGF and visual databases for human simulation.BENITO GRANIELA is a software engineer at SAIC, where he works on visual and computer generated forces representation for urban synthetic environments. Prior to SAIC he did research at the Institute for Simulation and Training in interoperability of visual distributed environments and as a result developed a deep understanding of the basic elements of networked distributed simulation. Mr. Graniela earned a B.S.E in Electrical Engineering from the University of Puerto Rico in 1995 and a M.S.E in Computer Engineering from the University of Central Florida in 1992.DR. DOUGLAS REECE is a Senior Scientist at SAIC in Orlando. He has been developing physical and behavioral models for individual combatant CGFs for the past six years. He is currently the software architect for DISAF projects; previously, he was the principal investigator for Computer Controlled Hostiles for the Marine Corps’ Team Target Engagement Simulator. He received his Ph.D. in Computer Science from Carnegie Mellon University in 1992