Critical Elements for Distributed Product Description DataPeter L. EirichJohns Hopkins University Applied Physics Laboratory11100 Johns Hopkins RoadLaurel, MD 20723-6099240-228-7264 HYPERLINK "mailto:Peter.Eirich@jhuapl.edu" Peter.Eirich@jhuapl.eduKeywords:collaborative environment, Distributed Product Description, modeling and simulation, DPD, M&SABSTRACT:  The capability to employ a distributed collaborative environment for systems design, for modeling and simulation (M&S) analyses, and for test and evaluation (T&E) purposes is becoming increasingly common among military acquisition programs.  For example, the Joint Strike Fighter (JSF) program, the U.S. Army Future Combat Systems (FCS) program, and the U.S. Navy DD (X) program are all working to create such an environment.  A Distributed Product Description (DPD) is the central architectural element in such collaborative environments.  A DPD will maintain the configuration-controlled system design information for alternative platform designs and will provide this information as needed for M&S analyses.An analysis performed for the FCS program identified some of the important data content elements within a DPD, organized these into a high level structure for organizing DPD data, and then prepared a notional DPD structure with additional levels of detail.  In retrospect, some of these data elements stand out as being of central importance to the effective functioning of a DPD to support collaborative systems engineering.  These include structures for the traceability of requirements to system components, structures for the recursive decomposition of systems, and structures for the representation of system properties, among others.  This paper presents a list of the seven DPD content elements and structures that are believed to be most critical for the effective contribution of a DPD in support of collaborative systems engineering, and explains the significance of the role played by each.The paper concludes with the assertion that if some of these seven elements are missing from a DPD, the common vision for the use of collaborative environments in support of simulation based acquisition will be very difficult to achieve.  This point is illustrated by showing the notional application of these DPD elements to support one aspect of that vision ‚Äì the use of a collaborative design environment to provide improved support to Testing and Evaluation.1. Introduction to Collaborative System Design Environments and Distributed Product Descriptions1.1 Collaborative Design EnvironmentsPlans to use a distributed collaborative engineering design environment for systems design, for modeling and simulation (M&S) analyses, for manufacturing and life cycle support analyses, and for test and evaluation (T&E) purposes, are becoming increasingly common among military acquisition programs.  The decision to create such an environment by no less than three significant, leading-edge acquisition programs, the Joint Strike Fighter (JSF) program, the U.S. Army Future Combat Systems (FCS) program, and the U.S. Navy DD (X) Future Surface Combatant program, attests to the potential significance seen for this approach to supporting DoD acquisition programs.  These environments are recognized as being integral to program M&S strategies.  For example, the importance to the FCS program of its Advanced Collaborative Environment (ACE) was indicated by the Honorable Claude M. Bolton, Jr., Assistant Secretary of the Army for Acquisition, Logistics, and Technology, at a recent Modeling and Simulation Workshop by the International Test and Evaluation Association (ITEA) [1].The collaborative environment was one of the key constructs defined in the report of the Joint SBA Task Force [2].  In that report, a collaborative environment was defined, in the context of Simulation Based Acquisition (SBA) as ‚Äúan enduring collection of subject matter experts (SMEs) supported by interoperable tools and data bases, authoritative information resources, and product/process models that are focused on a common domain or set of problems.‚ÄùA number of reports, papers, and requests for proposal have addressed the role of collaborative environments, in conjunction with M&S, as part of an acquisition strategy.  Figure 1 (on the next page) shows a top-level view of the elements comprising the FCS ACE.  These elements are summarized in [3], and described in greater detail in [5], [6], [7], and [8].  Reference [3] describes how the structure and resources contained within the FCS ACE will facilitate both analysis processes and T&E processes.  The FCS ACE top level design is an extension of the earlier conceptual design of the JSF collaborative environment, as described in [9] and [10].  While not yet fully defined, the Smart Product Model / Integrated Digital Environment (SPM/IDE) being developed by the DD(X) program will probably be somewhat similar in concept.This paper does not address the overall collaborative environment and its applications, which are addressed in the above references, but instead focuses on the element shown just below the center of Figure 1, the Distributed Product Description (DPD).1.2 Distributed Product DescriptionsThe DPD is another of the key constructs defined in the report of the Joint SBA Task Force [2].  The DPD was defined as ‚Äúa distributed collection of digital product-centric information that is interconnected via web technology into what appears (to the user) to be a single, logically unified product representation.‚Äù  A Distributed Product Description is the central architectural element in a collaborative environment.  A DPD will maintain the configuration-controlled system design information for alternative platform designs, and will provide this information as needed for M&S analyses.  The DPD is intended to be the repository for all authoritative information concerning a system that may be needed as an input by either the modeling and simulation tools or the design/engineering/manufacturing tools within a collaborative environment.As illustrated in Figure 2, the DPD is an information repository that also serves as the means of data exchange among tools within a collaborative environment.  Data Interchange Formats (DIFs) may be used to move data between a tool and the DPD when a direct method of tool access to the DPD is not used.Figure 2.  Relationships among DPDs, DIFs and tools (adapted from the SBA Road Map) [2]The roles and applications for DPDs are addressed in the context of collaborative environments in References [2] through [10].  Topics covered include data creation and access by tools, models, and simulations, and DPD use to support design analyses, M&S studies, life cycle support analyses, and T&E.  Because these aspects of DPDs already have been well covered in the literature, this paper will bypass that discussion as well as further collaborative environment discussion, and will instead focus one level deeper  on the data contents within a DPD, and how these data may be organized to support collaborative environment uses.  To set the stage for section 4 to address these DPD data content considerations, section 2 provides some background on DPD data structures and the issues that drive their design, and section 3 describes how DPD data structures will be represented graphically in this paper, using a highly simplified notation.2. Background for DPD Data Structures2.1 DPD Data Structure Design ‚ÄúDrivers‚ÄùReference [5] described the uses and major elements of a collaborative environment, and identified, based on these, some of the ‚Äúdrivers‚Äù for the data structures and contents of a DPD.  It indicated the need for a DPD to be able to support all levels of modeling, from campaign modeling (at the highest level of aggregation) to system and subsystem modeling (at the engineering level), as illustrated in Figure 3.  It also identified principles for organizing DPD data, including the need to support both a physical view of a system and an alternative performance view of the system, as depicted in Figure 4.  Reference [5] further described the need to represent multiple levels of ‚Äúgranularity‚Äù for analysis purposes within some governing analysis framework, such as the one presented in [11].  That framework incorporates four inter-dependent levels of analysis, as illustrated in Figure 5.  An approach for conducting this type of analysis process within a collaborative environment is further detailed in [3].  As illustrated for the FCS ACE in Figure 6 (on the next page), a DPD in a collaborative environment must be designed to support the full program life cycle.Figure 3.  M&S HierarchyFigure 4.  System Decomposition Structures SHAPE  \* MERGEFORMAT Figure 5.  Weapon Systems Effectiveness FrameworkReference [5] proposed a top-level structure for DPD data, organized around twelve core concepts.  Subsequently, an analysis effort performed for the FCS program [12] developed a notional DPD data structure by incorporating additional data elements organized around these core concepts.  (NOTE:  this notional data structure was developed for conceptual and early planning purposes only; the actual FCS DPD data structure development by the FCS Lead System Integrator is an independent effort that may result in a very different data structure.)2.2 Alternative DPD Data Structure ApproachesThat old proverbial saying ‚ÄúThere is nothing new under the sun.‚Äù applies quite well to the development of DPD data structures.  The famous statement by Sir Isaac Newton ‚ÄúIf I have seen further it is by standing on ye shoulders of Giants." also applies.  As is typical of many aspects of computer science and computer applications, current project work on DPD designs builds on earlier work, which in turn builds on still earlier work, etc.There are actually a number of interrelated data structure design efforts, both recent and ongoing, that are either directly applicable to, or somewhat related to, DPD structure designs.  For example, the author‚Äôs work in the preparation of Reference [12] took as its starting point the work of an ongoing standards development project [13] in which the author participates.  This effort, in turn, drew from a number of sources in the technical literature, such as Reference [14].In addition to the DPD design efforts currently underway within the FCS, JSF, and DD (X) programs, other applicable efforts include:the Leading Edge Architecture for Prototyping Systems (LEAPS) project at the NSWC Carderock Division [15]the ISO 10303 family of international product data standards, informally known as the STandard for the Exchange of Product Model Data (STEP)the DoD Multiview Program, working to develop standard EIA-927, Common Data Schema for Complex Systems [16]development of the proposed standard ‚ÄúSuperstructure‚Äù for UML 2.0 [17]An interesting (and reassuring) aspect of these different efforts is the extent to which different data structures or elements regularly recur, and are often developed independently, within different combinations of these project efforts.  For example, the concept of a ‚Äúport‚Äù, a design element long established in electronics engineering usage as an entry point or exit point for electrical signals, and now commonly used in defining computer networks, began to appear in discussions within the general product modeling community in the early 1990s.  By 1994 it had appeared in the software engineering literature [14] in the form of a message protocol declaration for software component interfaces, and by 1995 had been incorporated as a generalized systems concept in a standards development project [13].  Later, the ‚Äúport‚Äù concept was given central positioning in the author‚Äôs notional DPD data structure prepared for the FCS program [5] [12].  The use of ‚Äúports‚Äù as a routine element of system design will (probably) become solidly established in the future when UML 2.0, which will incorporate ‚Äúports‚Äù [17], achieves standardization and becomes available for use within UML object modeling tools.2.3 Understanding DPD Data StructuresThe observation that a number of other modeling elements and structures commonly appear among multiple different DPD data definition efforts led to the main idea behind this paper:  namely, that focusing on only the most basic DPD elements, and ignoring most of the others, would provide a good means for explaining the essentials of internal data organization within a DPD.  Understanding any one of the project data structures referenced can be both difficult and time consuming.  Even smaller DPD models, when diagrammed using fine print, can still require tens of square feet of paper.  The documentation of the STEP family of standards, alone, requires thousands of pages of text now, and will likely involve tens of thousands of pages of documentation by the time the family is fully developed.  Because of this complexity, serious discussions of DPD data structure issues rarely appear in conference papers of this type.  To avoid such difficulties due to complexity, this paper will instead take a very different, selective approach for presenting the essential elements of DPD data.By analogy, consider a map of the U.S. highway system created by taping together all the different individual state highway maps.  You could use this for planning a coast-to-coast road trip, but it would be most unwieldy due to its size, and you would need to trace through a lot of detail to identify your main coast-to-coast highways.  A better approach would be to use an interstate highway map of the U.S., one that shows only the major cities and the major highways that interconnect them.  The more detailed state highway maps can be referenced only when needed for planning side trips from the main route.Data structures are usually reviewed in graphical form, and usually in the form of a ‚Äúlogical model‚Äù that concentrates only on the data contents and the data interrelationships, while avoiding implementation details.  The data to be implemented in a database or other software application are derived from the attributes associated with each major element in the logical model. As indicated, these complete model diagrams can be both large and complex.  In this paper, the major elements typical of a DPD structure will be extracted to form the data modeling equivalent of the interstate highway map of the U.S.  Even that reduced form will tend to be too complex for a conference paper of this type.  Instead, in order to profile the most important DPD data in this paper, the DPD data model structures and elements selected for discussion will be those analogous to the most significant U.S. cities, along with the most interesting highways connecting them.It would be instructive to compare and contrast the different DPD-related data models referenced above in order to discover, empirically, which elements appear most often, and how consistently they are represented.  Due to the complexity of these models, as already indicated, that is beyond the scope of what can be accomplished in this paper.  Instead, the selection of DPD data elements to highlight will be based upon the author‚Äôs overall understanding of DPDs, combined with some limited exposure to the contents of a number of the models cited above.  Section 4 presents the ‚Äúhigh points‚Äù of an overall DPD structure from the author‚Äôs point of view.3. Representing Data StructuresIllustrating the DPD data structures in section 4 will require an easily understood graphical notation.  There are quite a variety of graphical notations for data structure models in use today.  For example, one of the most common notations in use within DoD programs is the Unified Modeling Language (UML).  A number of different data modeling notations will allow very specific statements to be made about both data elements and the ‚Äúreal-world‚Äù elements to which the data apply.  For instance, one could state (using most such notations) that if an object of type X is present in some area, then an object of type Y also must be present there.  This might be a statement concerning a requirement for having escorts within a secure facility, for example, or it might be a statement that applies to something else entirely.  Many other types of complex statements of interrelationships can be made using most of the common data modeling notations.For the purposes of this paper, however, such powerful notations amount to ‚Äúoverkill‚Äù ‚Äì they can make it difficult to see the forest for the trees.  Instead, for the purpose of having some easy to understand diagrams in section 4, the simplest possible data structure modeling notation will be used, as defined below.  (NOTE:  for the remainder of this paper, only simple figures will be used, and these will be located right within the text where they are needed, so the individual modeling illustrations that follow will no longer be numbered as figures.)In this simple notation, a box represents something of interest.  Typically, this indicates some category, or kind, of things of interest. SHAPE  \* MERGEFORMAT A line between two boxes means that there is some governing relationship present between the items or concepts represented by those boxes.  The name on the line describes the nature of that relationship.  The arrow on the line indicates which way to ‚Äúread‚Äù or interpret that relationship.  For example, a logical model diagram showing: SHAPE  \* MERGEFORMAT is making a statement that one kind of item of interest is heavier than another kind of item of interest.  Refinements such as whether this relationship is always true, only sometimes true, etc. will be left for more advanced notations.  It will not be necessary to graphically distinguish such situations for the purposes of this paper.  Any such refinements or restrictions that are important will be noted in the accompanying text.Finally, the attributes normally shown either within, or nearby, or linked to a box (or some graphical equivalent, depending on the notation being used), which determine the data fields to be implemented, also will not be included in the illustrations in section 4.  For the ‚Äúmacro‚Äù viewpoint adopted in this paper, that treatment is at too low a level of detail.  For the discussions in section 4, the existence of an appropriate set of attributes for each box should be assumed.This very basic notation is all that will be used.4. Critical Elements in DPD Data StructuresEach subsection below within section 4 presents one of the seven fundamental DPD data structures identified by the author, including both the important data elements contained and the key interrelationships among them.To establish a ‚Äúcontext‚Äù in order to make this discussion more meaningful, assume that you, the reader, have just been shown one of those 50 sq. ft. data model diagrams, containing a number of small boxes and a lot of fine print, which has been proposed for implementation within your program.  What elements would you look for, and then ask to have the developer explain in more detail, in order to decide if the proposed model was going to be suitable for your needs?Each of the seven subsections below describes the potential significance of one kind of data structure that may be present, and suggests the possible significance if it is not found to be present.  Because different models may take a slightly different modeling approach to the same data structure, some latitude must be allowed when searching a logical model to locate the data structures illustrated here.4.1 System DecompositionThe following recursive structure: SHAPE  \* MERGEFORMAT is read as ‚Äúsystem contains system‚Äù, and indicates that a system represented in the DPD can, in principle, be successively broken down into smaller systems (its subsystems), which also can be represented within the DPD, and can in turn be broken down into still smaller systems, and so on.  (Sometimes, depending on the modeling notation and the modeler‚Äôs style, pairs of boxes and relationships may be used to depict this.)  This decomposition can be continued all the way down to an individual component within a system.This structure permits a modular systems analysis and engineering design approach to be supported by a DPD.  If some structure like this is not present, then it may mean that the DPD is only intended to represent a ‚Äúflat‚Äù, single-level design, and is not fully supportive of partitioning a design effort according to engineering specialties or organizational divisions.4.2 System Inputs and OutputsThe fundamental characteristic that defines a system is that it produces some form of output(s), and requires some form of input(s) in order to do so.  Accordingly, within a DPD used for military systems analysis, one would expect to find some structure like: SHAPE  \* MERGEFORMAT which is read as ‚Äúa system receives input(s) and produces output(s).‚Äù  Because the inputs and outputs of a system can be viewed as being of the same nature, they can be represented as a single box having two relationships to system.  This approach was used in References [5] and [12], for example, where the term ‚Äúinteraction‚Äù was used to encompass both the inputs and outputs of a system.If a structure something like this one is not present in a DPD logical model, this suggests that the primary intended purpose for the DPD is something other than representing the operation of a system.  Perhaps the DPD is primarily addressing manufacturing aspects or some other design consideration.  Because system inputs and outputs are commonly tested, it will be difficult to link the DPD contents to T&E planning and analysis without an explicit representation of system inputs and outputs within a DPD.4.3 System BoundaryAlong with the transformation of inputs into outputs, another essential aspect of a system, in traditional systems analysis, is that a system must have an identifiable boundary.  Computer-Aided Design (CAD) representations of mechanical parts or military platforms will necessarily define a spatial boundary, and such an explicit system boundary representation may be needed for a number of different kinds of analyses, such as infrared signature analysis.  It is often translated into inputs for finite element analyses.  (This requires complex forms of representation not readily illustrated with a simple data structure diagram, so one is not presented here.)If there is no CAD-style representation contained within the DPD, this indicates that the DPDs purpose is supporting some form of analysis other than mechanical form, fit, and function.4.4 System PortsThere are many kinds of systems analyses that can be accomplished with only limited information about the system boundary.  For some types of systems, such as computer networks, the boundary may be spread very thinly over numerous physical devices across a wide geographical area.  Certain portions of that boundary ‚Äì the various network connection points  are far more interesting than others in terms of understanding and analyzing system performance.  For many types of analyses, it will usually be sufficient to represent only those portions of the system boundary where inputs and outputs of interest may be found.  For this purpose, as indicated above in section 2.2, the concept of a port, long familiar to electronics engineers, is increasingly beginning to appear in product models used for DPDs and in modeling methodologies such as UML 2.0 [17].  This may appear within a logical model as follows: SHAPE  \* MERGEFORMAT If a structure like this is absent in a DPD it means that there is no easy, explicit way to document the interconnections between systems in a way that is traceable back to the system design, because systems are connected at their ports to interchange inputs and outputs.  Simply recording in a DPD that system X is connected to system Y may document a useful fact, but does not provide the same degree of traceability as indicating which inputs and outputs are exchanged between systems, and at what system boundary points those exchanges occur, which becomes possible with the incorporation of ports into a DPD data structure.4.5 System AssembliesFrom a manufacturing perspective, a system is an assembly of interconnected parts, or components.  Certain combinations of components within the system can act together to create subsystems, which will exhibit their own identifiable behavior, as addressed within section 4.1.  When a system is successively decomposed until each lowest level system can be mapped directly against an identifiable manufactured unit that can satisfy the requirements of that low level system, then a manufacturing assembly structure can be defined.  One manufactured unit is connected to another at some defined port.  For example, at a mechanical coupling ‚Äúport,‚Äù the input or output may be a mechanical force with certain characteristics.  To define an assembly, it is necessary for a DPD structure to record which ports on one system (component) connect to which ports on another.  It is also necessary to allow for part substitutions, whereby parts from different manufacturers having the same form, fit, and function may be used interchangeably.  These capabilities may be handled within a DPD if it incorporates a data structure like the following: SHAPE  \* MERGEFORMAT The lack of a structure like this indicates that the DPD may be intended for system behavior representation, but may not be suitable for manufacturing analysis purposes.4.6 System PropertiesSeveral of the recent DPD modeling efforts have utilized a ‚Äúcatch all‚Äù element called property to record facts about items of interest in a DPD system design representation.  Because a military system is the general item of interest for this paper, the resulting structure would be: SHAPE  \* MERGEFORMAT The ‚Äúcomputer science‚Äù aspects of how a property may be represented quantitatively in terms of numerical values and units of measure, or in terms of enumerations which may reflect either ranges or sets of such values, or as text descriptions if qualitative, etc., are also important.  Structures for these aspects should also be evident in the DPD logical model, and will be found connected directly to ‚Äúproperty‚Äù.  Only one of the simplest forms of property representation is illustrated above, and even then is technically not quite correct.  However, it should give an idea of the kind of structure to look out for.If properties are defined without being associated with a unit of measure, then system design representations may be prone to the types of errors that led to the loss of one of the Mars missions several years ago.  If something like a property representation is not explicitly visible, it probably means that the features inherent in the modeling methodology are being used to reflect system characteristics (e.g., the object attributes used within the UML modeling technique).  This can work within a DPD design, but works best for mature designs where the list of attributes is well understood and stable.  Otherwise, the need to make frequent revisions to the DPD data structure, as new attributes are recognized, could become impractical.4.7 System RequirementsA DPD should provide a basic capability to trace requirements to elements of a system design.  Ideally a DPD will offer not only a textual representation of a requirement, but a means to also specify it quantitatively as a property, leading to structures such as: SHAPE  \* MERGEFORMAT and SHAPE  \* MERGEFORMAT 5. Application of Critical Elements of DPD Data5.1 Understanding DPD Data Structures for System RepresentationA DPD logical model can be viewed in terms of certain critical nodes within a data structure that are interconnected by the data modeler‚Äôs equivalent of contractual boilerplate.  Once the critical nodes within a DPD data structure have been determined, based on the usage requirements for the DPD data, a number of interconnections will ‚Äúfall out‚Äù as a matter of course, just by applying the established rules of the data modeling discipline.  Finding the locations in the overall DPD structure where these seven critical structures occur provides a starting point for understanding the capabilities of the DPD, and in particular for recognizing some of the types of functionality that it will not support.  Additional insights may be gained by tracing the connecting links between the major data elements covered in section 4.  The connecting paths may not be direct, as usually illustrated in section 4, but rather may involve a number of links between intermediate data elements.  Paths that are too long and involved may indicate that it will prove difficult to both manage and use the patterns of relationships that have been highlighted in the seven critical data structures presented in this paper.Any of these seven structures, if missing, can lead to significant limitations in DPD capabilities, as explained in section 4.  The lack of any one of them could compromise achieving the common vision for the use of collaborative environments in support of simulation based acquisition.5.2 A Data Usage Illustration Based on T&EJust as a DPD within a collaborative environment provides resources for systems analysis, it also can provide an environment and resources to support T&E.  The capabilities provided for M&S analysis, in particular, can provide significant advantages for the T&E community.  Modern systems testing will often necessitate significant use of M&S, which in turn can benefit from the use of a DPD.  The M&S tools used for T&E are often similar to M&S tools used for analysis or for design and engineering applications, and they will be components of the M&S tools layer of a collaborative environment, as illustrated in Figure¬†1.  Reference [3] describes some of the specific advantages for T&E that can result from utilizing DPD capabilities.  Descriptive data used to support T&E include mission decompositions and system functional decompositions, and Measures of Effectiveness (MOEs) and Measures of Performance (MOPs), all organized according to a governing analysis framework.  With the assistance of the DPD information, the best mix of live tests, simulations, or combinations should be easier to determine.  Reference [13] states that to accomplish this:‚Äú ‚Ä¶ the DPD must be able to record and document the measurable attributes of a system under test that are significant for the T&E community.‚Äù‚ÄúIn order to support T&E, a DPD must have an explicit and ‚Äúvisible‚Äù means to represent those elements in a coherent manner.  In other words, the data elements representing those system characteristics should be sufficiently complete for T&E applications, should be organized and structured within the DPD in a meaningful way to facilitate Verification and Validation, and should be readily accessible for straightforward retrieval.‚ÄùReference [13] also adds that:‚ÄúThe cross-referencing capability of the DPD should substantially simplify the tasks of selecting and prioritizing tests, designing test plans, and verifying that the planned tests provide sufficient coverage of the key requirements to be evaluated.  In addition, cross-referencing of test results to information within the DPD could include assessments of the coverage of testing vs. mission decompositions involving the platform or system under test ‚Ä¶ vs. identified system capabilities ‚Ä¶‚Äù These capabilities to support T&E cannot be accomplished without using the seven critical elements of DPD data presented in section 4, especially the quantification of requirements and properties, and the traceability of these to identifiable subsystems within an overall system design.  The identified ports and associated inputs and outputs provide a basis for selecting test points.  Finally, structures similar to those for quantifying requirements and properties can serve to capture and document test results in a consistent manner.6. SummaryThis paper established a context for the application of Distributed Product Descriptions within automated collaborative environments as a means to support DoD acquisition programs.  Within that context, it summarized the factors influencing the design of DPD data structures and described the typical approaches used for depicting those structures.  Finally, it identified seven critical data element structures that may be found within DPDs, explained how recognizing these structures could assist in understanding the capabilities and limitations of DPD data structure designs, and illustrated how one DPD application ‚Äì support for T&E ‚Äì would require the use of those seven major elements of data.  These seven structures are of central importance for supporting the common vision for the future implementation of DPDs, and for realizing their potential benefits.AcronymsACEAdvanced Collaborative Environment CADComputer-Aided DesignDIFData Interchange FormatDPDDistributed Product Description JSFJoint Strike FighterFCSFuture Combat Systems ITEAInternational Test and Evaluation AssociationJHU/APLThe Johns Hopkins University Applied Physics Laboratory LSILead System Integrator M&Smodeling and simulation MOEMeasure of Effectiveness MOPMeasure of Performance SBASimulation Based Acquisition SMEsubject matter expert STEPSTandard for the Exchange of Product Model DataT&Etest and evaluation UMLUnified Modeling LanguageVV&AVerification, Validation, and Accreditation References[1]	Keynote Address by the Honorable Claude M. Bolton, Jr., Assistant Secretary of the Army for Acquisition, Logistics, and Technology, at the International Test and Evaluation Association Modeling and Simulation Workshop, Las Cruces, MN, December 10, 2002.[2]	A Roadmap for Simulation Based Acquisition ‚Äì Report of the Joint Simulation Based Acquisition Task Force, Acquisition Council Draft for Coordination, December 4, 1998.[3]	P. L. Eirich, J. E. Coolahan, and E. M. Purdy, ‚ÄúAn FCS M&S Construct and Its Support of Testing‚Äù, in Proceedings of the Eighth International Test and Evaluation Association (ITEA) Modeling and Simulation Workshop, Las Cruces, NM, December 11, 2002.[4]	MG D. F. Schenk, Program Manager, Future Combat Systems, ‚ÄúFuture Combat Systems: Army Transformation in an Advanced Collaborative Environment,‚Äù September 4, 2002.[5]	P. L. Eirich, J. E. Coolahan, and E. M. Purdy, ‚ÄúA Collaborative Environment Architecture for Future Combat Systems (FCS) Modeling and Simulation,‚Äù paper 02S-SIW-026, in Proc., 2002 Spring Simulation Interoperability Workshop, March 10-15, 2002, Orlando, FL.[6]	J. E. Coolahan, P. L. Eirich, A. G. Ihde, M. D. McPherson, S. M. Orloff, JHU/APL Report JWR-01-030, Future Combat Systems (FCS) Modeling and Simulation (M&S) Collaborative Environment Design Definition Final Report, November 9, 2001.[7]	Defense Advanced Research Projects Agency (DARPA) Solicitation No. PS 02-07, ‚ÄúDARPA / Army Future Combat Systems Program Solicitation,‚Äù November 2001.[8]	Simulation Support Plan, Future Combat Systems, Future Combat Systems Program Office, Draft, November 2001.  (An updated version of this plan has been prepared, but is not cited here because it has not yet been widely distributed.)[9]	J. E. Coolahan, F. T. Case, and R. J. Hartnett, Jr., ‚ÄúThe Joint Strike Fighter (JSF) Strike Warfare Collaborative Environment (SWCE),‚Äù 2000 Fall Simulation Interoperability Workshop, September 17-22, 2000, Orlando, FL.[10]	J. W. Hollenbach and R. J. Hartnett, Jr., ‚ÄúThe Joint Strike Fighter (JSF) Distributed Product Description (DPD),‚Äù 2000 Fall Simulation Interoperability Workshop, September 17-22, 2000, Orlando, FL.[11]	P.H. Deitz, J. Sheehan, B. Harris, and A.B. H. Wong, ‚ÄúA General Framework Methodology for Analyzing Weapon Systems Effectiveness‚Äù, in Proc., Second Biennial National forum on Weapon Systems Effectiveness, March 27-29, 2001, Laurel, MD.[12]	P. L. Eirich, B. E. Miller, J. E. Coolahan, JHU/APL Report JWR-02-018, Future Combat Systems (FCS) Modeling and Simulation (M&S) Task: Distributed Product Description (DPD) Prototype Initial Logical Data Model, Final Report, June 27, 2002.	(NOTE:  this notional data structure was developed for conceptual and early planning purposes only; the actual FCS DPD data structure development by the FCS Lead System Integrator is an independent effort that may result in a very different data structure.)[13]	work in progress for IEEE project P1175.4, preparing a draft ‚ÄúStandard for CASE Tool Interconnections‚ÄîReference Model for Specifying System Behavior‚Äù[14]	Bran Selic, Garth Gullekson, Paul T. Ward, Real-Time Object-Oriented Modeling, John Wiley & Sons, NY, 1994[15]	R.T. Van Eseltine, R. Ames, Leading Edge Architecture for Prototyping Systems (LEAPS): LEAPS Users Guide, Version 2.6, NSWCCD-26-TR-2001/xx, Carderock Division, Naval Surface Warfare Center, Bethesda, MD, February 2001[16]	EIA-927, Common Data Schema for Complex Systems, Government Electronics and Information Technology Association (GEIA), a sector of the Electronic Industries Alliance (EIA), Arlington, VA (this activity is still at an early stage of development)[17]	2nd revised submission to Object Management Group (OMG) RFP ad/00-09-02: Unified Modeling Language: Superstructure, version 2.0, OMG document ad/2003-01-02, U2 Partners, January 6, 2003Author BiographyPETER L. EIRICH is a member of the Senior Professional Staff at The Johns Hopkins University Applied Physics Laboratory (JHU/APL), where he works on projects involving Simulation Based Acquisition environments and on procedures for the Verification, Validation, and Accreditation of models and simulations.  He received BS and MS degrees in Electrical Engineering from MIT in 1970, an Engineer‚Äôs Degree in Electrical Engineering from MIT in 1974, and an MS from MIT‚Äôs Sloan School of Management in 1974.  Previously, he has been active in the development of both US and international standards, with leadership roles in advisory groups, working groups, and technical committees.  A list of acronyms may be found immediately before the ‚ÄúReferences‚Äù section at the end of the paper.  from Reference [3], as adapted from Reference [4] from Reference [3], as adapted from Reference [4]  in a letter to Robert Hooke, 5 Feb. 1676 See  HYPERLINK "http://www.nist.gov/sc4/www/stepdocs.htm" http://www.nist.gov/sc4/www/stepdocs.htm or  HYPERLINK "http://www.mel.nist.gov/sc5/soap/" http://www.mel.nist.gov/sc5/soap/ for additional information.  STEP is developed by ISO Technical Committee 184 (TC 184), Industrial automation systems and integration, Subcommittee 4 (TC 184/SC 4), Industrial Data, with web site addresses  HYPERLINK "http://www.iso.ch/iso/en/stdsdevelopment/tc/tclist/TechnicalCommitteeDetailPage.TechnicalCommitteeDetail?COMMID=4275" http://www.iso.ch/iso/en/stdsdevelopment/tc/tclist/TechnicalCommitteeDetailPage.TechnicalCommitteeDetail?COMMID=4275 and  HYPERLINK "http://www.iso.ch/iso/en/stdsdevelopment/tc/tclist/TechnicalCommitteeDetailPage.TechnicalCommitteeDetail?COMMID=4299" http://www.iso.ch/iso/en/stdsdevelopment/tc/tclist/TechnicalCommitteeDetailPage.TechnicalCommitteeDetail?COMMID=4299, respectively, on the ISO web site,  HYPERLINK "http://www.iso.ch/" http://www.iso.ch/.  To guide the implementation of a logical model, for instance in the form of a database controlled by a database management system, an implementation-specific data model (using different modeling conventions and notations) is often derived from the logical model.  More complete structures for these are not shown here because of their subtle complexities, would require a lengthy explanation, including a discussion of data types, which would be outside the scope of this paper.  For example, see the applicable discussion and diagrams in Reference [13]. Note that while systems analysis often is based on a representation of ‚Äústates‚Äù, and while it is reasonable to find states provided in a DPD as a convenient analysis construct, a state may be considered as a dynamic property, and will not be addressed separately.  Originally intended as a ‚Äútop ten‚Äù list, the first seven structures selected seemed sufficiently more important than the next three to warrant limiting the discussion in the paper to only these.  website  HYPERLINK "http://www.geia.org/" http://www.geia.org/   website  HYPERLINK "http://www.geia.org/" http://www.omg.org/  web link  HYPERLINK "http://cgi.omg.org/cgi-bin/doc?ad/03-01-02" http://cgi.omg.org/cgi-bin/doc?ad/03-01-02   web link  HYPERLINK "http://www.u2-partners.org" www.u2-partners.org EMBED PowerPoint.Slide.8Figure 1.  Top-level view of the FCS collaborative environment structure1. Interaction Conditions4. Military Effectiveness3. Functional Capabilities2. Component Conditions  Military Operations ContextO3,4O2,3O1,2Figure 6.  ACE Support Throughout the Program Life CycleEMBED PowerPoint.Slide.8ProgramManagementDevelopmental &Operational T&EManufacturing& ProductionDetailed DesignPrototypingCost-Performance TradesRequirementsDefinitionLife Cycle SustainmentTrainingSomething of interestOne thing of interestAnother thing of interestis heavier thanSystemcontainsOutputInputSystemproducesreceivesOutputInputSystemproducesreceivesPortoffersexitsentersPartSystemimplemented byPortofferscontainsconnects toNumerical ValueSystemPropertydefined bycharacterized byUnit of Measurereflectsapplies toOutputInputSystemproducesreceivesRequirementappliestoapplies toapplies toNumerical ValueRequirementPropertydefined byspecified asUnit of Measurereflectsapplies to