A Distributed Communications Framework:Integrating Distributed Communications Models Into a High-Level Architecture EnvironmentSherie M. Johnson, Greg Wolff, Deanna EvansRaytheon CompanyNWCS – Network Communications Systems1801 Hughes DriveFullerton, CA 92834714-446-3594 HYPERLINK "mailto:smjohnson@raytheon.com" smjohnson@raytheon.com,  HYPERLINK "mailto:gwolff@raytheon.com" gwolff@raytheon.com,  HYPERLINK "mailto:dkevans@raytheon.com" dkevans@raytheon.com Keywords:Communications, Framework, Distributed Models, HLAABSTRACT: With the introduction of the Department of Defense’s (DoD) High Level Architecture (HLA) simulation standard, distributed simulation environments and capabilities are exploding throughout the simulation community.  Specifically, with respect to defense oriented businesses, distributed simulations are often used for operational scenario assessment as well as for engineering assessment.  To date, the distributed HLA environment has proven effective in this manner, except with respect to modeling communication architectures and networking protocols.  Communications tend to be closely related to the components or systems that are being serviced, making it difficult to model the communications effects in a distributed environment.  This article provides an overview of the issues present in the customary implementation of communications in an HLA environment and proposes a next generation modeling and simulation framework.1. IntroductionWith the introduction of the Department of Defense’s (DoD) High Level Architecture (HLA) [1] simulation standard, distributed simulation environments and capabilities are exploding throughout the simulation community.  Specifically, with respect to defense oriented businesses, distributed simulations are often used for operational scenario assessment as well as for engineering assessment.  Operational scenarios have effectively been modeled by bringing together multiple system simulations (each modeling particular aspects of a system) such that, when combined, the entire operational scenario can be addressed or assessed.  In addition, component simulations can be added to provide a more detailed engineering assessment capability.  To date, the distributed HLA environment has proven effective in this manner, except with respect to modeling communication architectures and networking protocols.  Communications tends to be closely related to the components or systems that are being serviced, making it difficult to model the communications effects in a distributed environment.  Unfortunately, the current approach is to either embed the communications being modeled as a facet of the system simulation, which is not easily reusable, or to not model communications at all. Neither of these options is the ideal solution for the distributed simulation environment.  Some aspects of communications for the distributed simulation environment have been examined and in fact, attempts have been made to address some of these issues.  An example of this is the fact that many Federate Object Model  (FOM) designers have defined objects specifically for communications purposes.  However, modeling the objects associated with communications is quite different from modeling the actual effects that communications have on the system components.  The latter has proven to be a challenge in the distributed simulation community.  The question then becomes:  “How can we effectively, efficiently, and proficiently simulate communication effects in a distributed simulation environment?”  Many attempts have been made to address the issues of how to apply communications effects in the distributed simulation environment.  The traditional approach is to implement communication architectures and networking protocols as a single “communications federate”.  This approach fits well into the distributed simulation architecture, but has many shortcomings in terms of simulating real-world communications in strategic and tactical military scenarios.  The Raytheon Communications and Networking Modeling and Simulation Center of Excellence has developed a next generation framework that distributes communication architecture and networking protocol models in an HLA simulation environment in an efficient and effective manner.  This next generation framework is called the Distributed Communications Effects Module (DCEM).2. The Traditional ApproachThe traditional approach to modeling communication architectures and networking protocols in an HLA environment is to implement them as a single communications federate, as show in Figure 2.1. SHAPE  \* MERGEFORMAT Figure 2.1   The Traditional Approach to Modeling Communications in an HLA Environment.There are advantages and disadvantages to incorporating communications effects in this manner.  By modeling communications as a single federate, the model conforms to the HLA standard and is easier to implement.  Unfortunately, this design can impose a high traffic overhead on the environment with communications message traffic having to pass through the Run-Time Infrastructure (RTI) multiple times because the communications server must process all messages before other federates may accept them.  In addition, because every single transmitted message must be processed within the communications server, this server becomes a bottleneck to the distributed system.  This in turn reduces the probability that the HLA environment will be able to run at real-time or faster than real-time which is often the desire.3. The Distributed ApproachThe distributed approach calls for the simulated communications to have both local and distributed components and for the components to work together to provide a proficient and flexible communications effects capability across the entire distributed simulation, Figure 3.1. SHAPE  \* MERGEFORMAT Figure 3.1.   The Distributed Approach to Modeling Communications in an HLA Environment.By modeling communications in a distributed manner, the message traffic associated with communications events is reduced on the RTI, communications related processing is distributed across the federation, and a mixture of low to high fidelity models can be integrated into the HLA federation more readily.Another advantage to the distributed approach is that the DCEM can provide communications effects to “message traffic” that may not be exposed to the HLA backbone.  A perfect example of this is a “federate server”.  The term “federate server” is used to define a federate that models many entities within itself. Typically, any “communications” between entities within a federate would not be exposed to the HLA backbone.  The DCEM provides an API to the federate such that internal communications can still be “effected” in the same manner that HLA traffic can be “effected”.  The Traditional HLA approach described above does not address this problem.  Finally, the most powerful aspect of the DCEM is that it enables a net-centric communications architecture to be efficiently modeled in the distributed environment.  The communication models within the DCEM framework can be “interconnected” to provide networked or gateway’d communications systems and subsequently result in a combined “netted” communication effects.  4. The Distributed Communications Effects ModuleThe DCEM is a framework for providing communication effects in a distributed simulation environment.   The DCEM consists of two distinct entities, the Communications Effects Server (CES) and Communications Effects Protocols (CEPs), as shown in Figure 4.1. SHAPE  \* MERGEFORMAT Figure 4.1.   The Distributed Communications Effects Module (DCEM).Each CEP in a DCEM is responsible for modeling the communications system and/or networking protocol for a designated Embedded System Object within the federate.  As shown in Figure 4.2, the CEPs can range in fidelity from low fidelity stochastic models to high-fidelity models running either as embedded code or in a discrete event simulator.  Other options include behavior based CEPs where high fidelity engineering communications models (non-realtime) are executed off-line and the results or displayed behaviors are translated into a CEP for real-time simulation exercises, or an embedded code CEP where code used in target hardware could be ported into the simulated environment. To connect DCEM with a discrete event simulator, the framework has an external simulator interface.  For those instances where communications may not be necessary or desired, a Null CEP is provided to selectively shutoff nodes from communications effects.  SHAPE  \* MERGEFORMAT Figure 4.2.   Example Communications Effects Protocol (CEP) Implementation.The CES functionality is an integrated part of the DCEM framework that supports obtaining and maintaining information for communications effects that require knowledge of whole or part of the system.  The CES provides information to local CEPs, such as position information for line-of-sight calculations, which is beyond the CEP’s local knowledge base.  It is also responsible for collecting data from local CEPs to be integrated into a global communications view that can be distributed to other CESs via either the HLA publish and subscribe mechanism or a non-HLA path.  The global communications picture maintained by each CES can be used for CEPs that respond to network congestion levels or CEPs that are modeling architectures that are time-slot based or ad-hoc in nature.  In addition to supporting local CEPs, the CES can be a centralized gathering point for network performance statistics and can be responsible for the dynamic control of network resources. 4.1. Implementation RequirementsThe team encountered many implementation challenges when trying to interface a federate with the DCEM.  This is because, as we’ve previously stated, communications is closely related to the components or systems that are being serviced and many components or systems have never been modeled to the level where communications were considered.  The most prevalent issue that we encountered was that in order for the DCEM to be able to impose communications effects, the federates must now actually model (or represent) communications traffic (i.e., message traffic).The Systems Interoperability Standards Organization (SISO) has drafted standards to address this issue.  An example of such is the SISO-STD-002-V2.8 DRAFT (19 April 2004) Link16 Simulation Standard [2].  This standard specifies a Base Object Model (BOM) for representing Link16 messages and network effects in a HLA environment.  The above referenced BOM is valuable in allowing actual bit-level representations of Link16 messages to be transported across the HLA backbone.  It also, under high fidelity implementations, can provide Link16 network effects including simulated net entry, synchronization, and machine receipts.  A Link16 simulation that is based on the above referenced BOM could be implemented within a DCEM CEP and as such would provide exemplary Link16 representation.  The advantage of implementing the above referenced standard within the DCEM is that the DCEM framework would offer the added features of intra-federate comm. support as well as the ability to network the Link16 network with other datalinks for a “netted” communications architecture representation.  To this end, the DCEM implementers propose a new BOM that standardizes attributes necessary for applying communications effects in a distributed simulation environment while leveraging from the SISO’s drafted standards for datalink message formats.The Communications Effects BOM defines a base class Communications interaction for the purpose of carrying the attributes that are fundamentally necessary for all communications effects models.  This base class would have subclasses that define the datalink message formats (i.e., datalink specific information) such as classes identified in the above referenced SISO Link16 BOM.  This allows the SISO defined message formats (where available) to be encapsulated within the Communications BOM.  An example of this Communications BOM class hierarchy is shown in Figure 4.1.1.Figure 4.1.1   Communications Interaction class hierarchy.The author’s have determined that four attributes are fundamental to any communications effects model (i.e., CEP).  That is, regardless of the type of protocols, data-links, or networking aspects being modeled, four fundamental attributes are almost always applicable.   In support of this, the Communications baseclass contains:OriginatingEntityReceivingEntityEffectLengthEffect.  The OriginatingEntity and ReceivingEntity attributes are used to specify the unique source and destination (when applicable) of the message.  That is, which entity within the simulation is sending the message, and which entity(ies) are the designated recipient(s).  Although these two attributes can many times be derived from message itself, the inclusion of them in the baseclass simplifies the DCEM processing that is fundamental to nearly every message requiring communication effects processing.  (Note: These two attributes are used in the link closure algorithms for message completion effects processing.)   The next two attributes, EffectLength and Effect would be used by the DCEM/CEPs to carry communications effects across the HLA backbone when necessary (i.e., in support of receive-end based processing of the communications effects).  These attributes are not needed by the federate, but instead would be used internally by the DCEM/CEPs.  Table 4.1.1 provides a detailed description of the proposed Communications Effects BOM Communications Interaction base class.Table 4.1.1   Proposed Communications Interaction Base Class Description.For backward compatibility issues with commercial gateways (i.e., DIS-HLA Gateways), the DCEM supports the ability to encapsulate the Communications class and subclasses within any of the Real-Time Platform Reference Federation Object Model (RPR-FOM) [3] RadioSignal interactions that support the SignalData attribute.  In addition to the new interface specification for the DCEM (i.e., the Communications BOM), there are a few other requirements necessary to support distributed communication effects within the DCEM framework.   As such, the DCEM imposes the following requirements on the federates that have objects requiring communications effects:A federate shall publish any Base Entity Object subclass for all entities requiring communications support.A federate shall publish an Embedded System Object subclass for each radio system associated with a particular BaseEntity object.There must exist a unique mapping between the an attribute within the BaseEntity object (or subclasses) and the OriginatingEntity and ReceivingEntity attributes of the Communications interaction. Finally, the DCEM supports a well-defined API for providing communications effects to federates in a distributed simulation environment.  The DCEM is designed such that the internal jewels of the framework (i.e., the CEPs that represent the communications systems, and the CES that provides global information) are not dependent on the underlying distributed simulation environment.  In fact, the federate could have implemented a direct HLA interface, be using some middleware product for HLA interface simplification, or not be HLA at all.  The internals of DCEM do not change and the ability to support many communications protocols at various levels of fidelity does not change.  The DCEM can be accessed directly via the API, or via supplied DCEM wrappers in which the underlying distributed simulation environment specifics are implemented.   Figure 4.1.2 provides an illustration of the DCEM API and the DCEM Wrapper concept for DCEM federate integration.Figure 4.1.2   DCEM API5. ConclusionThe Raytheon Communications and Networking Modeling and Simulation Center of Excellence has developed a next generation framework that distributes communication effects in an HLA simulation environment in an efficient and effective manner. In addition, this framework provides some powerful new communications capabilities to federates that to date have not been provided through traditional approaches.   This framework has been successfully implemented and demonstrated in two different simulator configurations.  With continued work and refinement of the requirements and communications models, it is our desire to make this framework an industry standard way for modeling communications architectures and networking protocols in a distributed HLA environment.6. AcknowledgementsThe authors would like to thank J. Bryan Lail, Philip Moul, Michael Kamrowski, Stephen Lance, Michael Walker, and Tom Stayonoff of Raytheon for pushing us to think beyond our comfort in the traditional and into the unknown, and sometimes unpleasant, world of distributed communications.references [1] High-Level Architecture (HLA) Run-Time Infrastructure (RTI) 1.3 Next Generation (NG) Programmers Guide Version 3, April 2000. [2] Draft Link Simulation Standard, SISO-STD-002-V2.8 DRAFT (19 April 2004) [3] Real-Time Platform Reference Federation Object Model (RPR-FOM), SISO-STD-001.1-1999.Author BiographiesSHERIE JOHNSON is a Sr. Principal Systems Engineer at Raytheon Company, Network Centric Systems Operations, Fullerton, CA.  She has over 15 years of experience in military communications and networking systems including technical architecture design and embedded communications software design and development, specializing in datalink and networking protocol development for LOS and SATCOM RF systems.DEANNA EVANS is a Senior Systems Engineer with the Raytheon Communications and Networking Modeling and Simulation Center of Excellence in Fullerton, CA.  She has over 8 years experience in Software Engineering and Modeling and Simulation, including requirements analysis, virtual prototyping, 3-D visualizations, verification and validation, model development, test and evaluation, and distributed simulation.GREG WOLFF is a Software Engineer with the Raytheon Communications and Networking Modeling and Simulation Center of Excellence in Fullerton, CA.  He has over 1 year of experience in Modeling and Simulation, including virtual prototyping, 3-D visualizations, and distributed simulation. Except where the ReceivingEntity attribute is set to a magic number to identify broadcast or multicast recipients.High fidelity model.radio code Embedded C-representation.stochastic Low fidelity DCEM()SendFrame()CommunicationsCommunicationsSIM YSIM XHLAMany Times Not ModeledCommunications ServerSIM YSIM XHLAEventLoopRun()FCSEPLRS16-LinkCEP {Abstract}omni antenna.directional and protocols with hoc -running adOPNET model C-FCSEPLRS16-LinkCEP {Abstract}omni antenna.directional and protocols with hoc -running adOPNET model High fidelity model.radio code Embedded representation.stochastic Low fidelity 