De-mystifying the Conformance Notebook in Step 2 of the HLA Federate Compliance Test Process Michael B. WoldtMiguel SalazarAB Technologies, Inc.1901 North Beauregard Street, Suite 400Alexandria, VA 22102   USA703-575-1088 HYPERLINK mailto:mwoldt@msosa.dmso.mil mwoldt@msosa.dmso.mil, msalazar@msosa.dmso.mil Laura L. BurkhartMargaret M. Horst J. Andrew OldGeorgia Tech Research InstituteGeorgia Institute of TechnologyAtlanta, GA  30332-0832   USA404-894-1736, 404-894-3578, 404-894-7256laura.burkhart@gtri.gatech.edu, margaret.horst@gtri.gatech.edu, andrew.old@gtri.gatech.eduKeywords:HLA Federate Compliance Testing, Compliance Testing, Interface Testing, Conformance Statement, Conformance Testing, SOM, HLA Certification, CS Dependency, Scenario Files ABSTRACT: The High Level Architecture (HLA) Federate Compliance Testing System was developed using a simple four-step process. The second step in the testing process involves performing tests on the Simulation Object Model (SOM) and Conformance Statement (CS) of the Federate Under Test (FUT). After conducting over 50 compliance tests, the HLA Certification Agents (CA) have determined that most problems and errors occur in this stage of testing.  This paper will first provide a brief review of Step 2 and the common problems encountered. It will then provide a close look at each test conducted in Step 2 and provide some good practices to follow that will help federate developers avoid problems during testing.     1.	Federate Compliance TestingThe HLA Federate Compliance Testing process has been established as the means to insure DoD simulations are, in fact, HLA-compliant in accordance with DoD policy [1].  Concern for federate compliance testing and certification has been part of the High Level Architecture development from the earliest days.  HLA compliance criteria are set forth in a Compliance Checklist [2] developed and maintained along with the specification documents that define HLA (the HLA Object Model Template Specification [3], the HLA Interface Specification [4], and the HLA Rules [5]).  The Compliance Checklist is a procedure-oriented list that combines elements from the three HLA specification documents to describe compliance requirements in a testable way. 2.	The Four-Step Test ProcessFigure 2.1 shows the four step process for HLA Federate Compliance Testing, which is available through a web-based interface (http://hlatest.msosa.dmso.mil) that includes a reference library of documents, on-line help, e-mail, and the list of federates officially certified as HLA compliant.Step 1: Application for testingIn Step 1, the developers of a federate request information on the test process from the official Certification Agent (CA) by completing the HLA test application on line.  The CA checks the official compliance database to determine the federate’s priority for Compliance Testing and, if approved, will respond with a user ID and password for conducting the test.  Figure 2.1  The HLA Federate Compliance Test ProcessIt is important to note that the test process is initiated by the federate developer, not the CA, and it is the responsibility of the federate developer to ensure that the federate under test (FUT) represents a stable, mature release of code.  Ideally, the test process should be initiated late in beta testing, so that the actual tests are performed on the release version of the code.2.2	Step 2:  The Conformance Notebook and TestsIn Step 2 of the test process, the federate developer submits the Conformance Notebook, which includes the Simulation Object Model (SOM), the simulation Conformance Statement (CS), and optional Scenario Data.  The CA checks the SOM for conformance to the OMT (“SOM Conformance Test”) and, if successful, checks the SOM against the CS for consistency (“Conformance Cross-Check”). Test results are then returned to the federate developer.  Experience has shown that most of the problems and difficulties associated with compliance testing occur at this step, usually due to confusion on the part of the federate developer over what data to provide or misconceptions about the actual tests.  The remainder of this paper focuses on the Conformance Notebook and the tests of Step 2, after briefly summarizing the rest of the test process for completeness.Once the FUT successfully passes the SOM Conformance Test and Conformance Cross-Check, the CA also returns a Test Sequence to the federate developer for Interface (IF) Testing.  The Test Sequence is based on the Scenario Data submitted with the Conformance Notebook, if available.  If the federate developer chooses not to submit Scenario Data with the Conformance Notebook, the CA will arbitrarily create a Test Sequence based on the SOM and CS.  The CA proposes a date and time for IF Testing based on other testing commitments in a schedule maintained by the CA.2.3	Step 3:  Preparing for the Interface TestIn Step 3 of the test process, the federate developer reviews the Test Sequence generated by the CA and submits Test Environment Data to the CA.  The required Test Environment Data is described at http://hlatest.dmso.msosa.mil/step3.  The federate developer and the CA confirm a test date and time.  The FUT must use Runtime Infrastructure (RTI) version 1.3 release 4 or higher and must be prepared to conduct the Test Sequence multiple times.2.4	Step 4:  The IF Test and Certification ProcessIn Step 4 of the test process, the IF Test is executed by the federate developer and the Certification Agent.  The IF Test has two parts: the Nominal Test, which ensures that the FUT can invoke and respond to all services for which it is capable, per its CS; and the Representative SOM (RepSOM) Test, which ensures that the FUT is capable of invoking and responding to services using a sample of data contained in its SOM.Experience has shown that problems with the IF test usually fall into three categories: connectivity problems (problems with the network, firewalls, or possible misconfiguration of the RTI); checksum errors (all federates must use essentially the same .rid file), and actual test discrepancies (usually when the federate fails to demonstrate something from its test sequence).  The CA logs service data from the test, analyzes the data, generates results, and returns a Certification Summary Report (CSR) to the federate developer.  Following a telephone “after action review” to provide feedback to the test process, the official certificate of HLA compliance is issued for the specific version of the federate code tested.3.	A Closer Look at the Conformance NotebookThe Conformance Notebook submitted in Step 2 contains information describing the federate for compliance testing.  It consists of three items: the Simulation Object Model (SOM), the Conformance Statement (CS), and optional Scenario Data.  Each is discussed in detail below.3.1	Simulation Object Model (SOM)The first item in the Compliance Checklist for federates states that the federate shall have a simulation object model documented in accordance with the Object Model Template.  Therefore, the first item to be submitted in the Conformance Notebook is the federate’s SOM to meet this requirement for HLA compliance.The SOM should be submitted electronically in the Object Model Template (OMT) Data Interchange Format (DIF).  The simplest way to create a SOM in the proper DIF file is to use the freeware Object Model Development Tool (OMDT) available from the Software Distribution Center on the DMSO web site.  Other commercial object model editors are also available; see the Tools Bulletin Board section of the DMSO web site for examples.Figure 3.1 is an example of the SOM for the Food Fight federate included with the DMSO RTI release, provided to illustrate some of the things that should be checked in a SOM before it is submitted.The first line must contain the OMT-DIF version number for the file, which should correspond to the HLA Specification version number being tested against.  Currently, HLA compliance is tested against version 1.3 of the specification only, but testing should be available against IEEE 1516 shortly after its approval as a standard.  The MOM (Management Object Model) version, about 15 lines down, should also be v1.3 at the present time.  These version numbers are set in the OMDT from the File - Metadata menu.In line 4, the Object Model Type must be SOM (as opposed to FOM or “Other”), and this is also set in the OMDT from the File - Metadata menu.  The other information in the first 15 lines comes from the Object Model Identification Table in the SOM.(DIF HLA-OMT v1.3 (TYPE Single))(ObjectModel (Name "FoodFight")    (VersionNumber "1.0")    (Type SOM)    (Purpose "HLA demo federate modeling a classic cafeteria food fight")    (ApplicationDomain "Demo")    (SponsorOrgName "DMSO")    (POCHonorificName "The")    (POCFirstName "HLA")    (POCLastName "HelpDesk")    (POCOrgName "DMSO")    (POCPhone "703-998-0660")    (POCEmail "hla@msis.dmso.mil")    (ModificationDate 12/07/1998)    (MOMVersion "1.3")  (RoutingSpace (Name "FoodFightRadioSpace")    (Dimension (Name "Channel")    (DimensionType "any")    (DimensionMinimum "0.0")    (DimensionMaximum "0.0")    (IntervalType Closed)    (RangeSetUnits "N/A")    (NormalizationFunction "linear")      )  )  (Class (ID 1)    (Name "Student")    (PSCapabilities PS)    (Description "One of the school cafeteria customers; a participant in the food fight")    (Attribute (Name "LunchMoney")      (DataType "double")      (Cardinality "1")      (Accuracy "perfect")      (AccuracyCondition "always")      (UpdateType Conditional)      (TransferAccept TA)      (UpdateReflect UR)      (Description "Amount of money the student has remaining to spend on food (ammunition)")    )    (Attribute (Name "AmmoAmount")      (DataType "unsigned long")      (Cardinality "1")      (Accuracy "perfect")      (AccuracyCondition "always")      (UpdateType Conditional)      (TransferAccept TA)      (UpdateReflect UR)      (Description "Amount of food (ammunition) the student has remaining")    )    (Attribute (Name "Cleanliness")      (DataType "double")      (Cardinality "1")      (Accuracy "perfect")      (AccuracyCondition "always")      (UpdateType Conditional)      (TransferAccept TA)      (UpdateReflect UR)      (Description "Measure of student\'s appearance; reduced by getting hit by thrown food (Splat.EnsuingMess) ")    )  )  (Interaction (ID 1)    (Name "Splat")      (ISRType IR)      (Description "Results of thrown food hitting a target")      (Parameter (Name "EnsuingMess")        (DataType "double")        (Cardinality "1")        (Accuracy "perfect")        (AccuracyCondition "always")        (Description "Measure of the effect of thrown food")    )    (Parameter (Name "Target")      (DataType "any")      (Cardinality "1")      (Accuracy "perfect")      (AccuracyCondition "always")      (Description "The student at whom food was aimed")    )  )  (Interaction (ID 2)    (Name "Communication")    (ISRType IR)    (Description "Means of coordinating among food fight team members")    (RoutingSpace "FoodFightRadioSpace")    (Parameter (Name "Message")      (DataType "any")      (Cardinality "1")      (Accuracy "perfect")      (AccuracyCondition "always")      (Description "Radio call from one student to another")    )  ))Figure 3.1  Food Fight Simulation Object Model in OMT DIFThe remaining data in the OMT-DIF file comes from the other SOM tables.  Using the OMDT, the file should be Saved As . . . *.omt for the proper OMT-DIF.3.2	Conformance StatementThe Conformance Statement is the second part of the Conformance Notebook.  It can be filled out on-line from Step 2 on the Testing web site or uploaded as an ASCII text file as illustrated in Figure 3.2.  As a text file, the CS is simply a file with every RTI interface service call on a separate line with the word YES (or Yes or yes) if the federate supports the service or NO (or No or no) if it the federate does not support the service.The order in which the services are listed does not matter, but every service for the given version of the HLA Interface Specification (currently v1.3) must be included and support specifically asserted (YES) or denied (NO).3.3	Scenario DataThe third part of the Conformance Notebook, the optional Scenario Data, is included as a convenience to the federate developer.  Federate compliance testing is not exhaustive for all SOM items.  While the FUT must demonstrate every IF service of which it is capable (per its CS), it does not have to demonstrate every service for every item in its SOM.  A reasonable subset of SOM items (objects, interactions, attributes and parameters) is chosen to demonstrate the IF services.The CA is prepared to generate a random set of items from the FUT’s SOM for the IF test, based on guidelines on what constitutes a reasonable subset.  Those guidelines say that the CA will choose no more than three examples of every different type of item in the SOM (e.g., updateable attributes, reflectable attributes, etc.)  But early experience with testing revealed that randomly selected sets of SOM items could sometimes result in scenarios that were awkward or difficult to execute for the IF test, and federate developers asked if they could provide sample scenario data instead.  The federate’s sample scenario data is checked against the guideline of three examples of each type of SOM item, and the scenario is either used as provided or augmented as necessary to meet the criteria for the SOM subset.The scenario is submitted in an OMT-DIF file containing all the SOM items included in the scenario.  Most scenario files submitted come from the federate developers’ internal application testing efforts.  The easiest way to create the scenario OMT-DIF file is to open the SOM in the OMDT, delete those items not used in the scenario, and then Save As . . . scenario*.omt.4.	Step 2 TestsHLA federate compliance is demonstrated through a series of conformance tests that evaluate how well the federate conforms to various parts of the HLA specification in meeting Compliance Checklist items.  Most of these conformance tests are done in Step 2 of the test process, as described below.4.1	SOM Parseability and Conformance TestsA common mistake that is made is to upload the federate’s .omd file rather than the .omt file.  Most federate developers commonly work with the .omd file, as recommended by the OMDT, but it is a simple step to Save As. . . *.omt and upload the OMT-DIF file.The first test on the uploaded file is for parseability, to see if the file is in the correct OMT-DIF.  If the file was generated by the OMDT (and uploaded smoothly, without errors), there will rarely be problems with parseability.  If the file was generated by hand, it is strongly recommended that the federate developer at least open the file in the OMDT to verify parseability before upload.If the OMT-DIF file can be parsed, the next test is the SOM conformance test, which checks the SOM for completeness and consistency.  The CA uses the Consistency Checker in the OMDT, so the federate developer can conduct the exact same test before upload.  In the OMDT, select the “Tools” menu and then “Consistency Checker”.  Turn on every option in the Consistency Checker Settings window and then click on “Check Now”.  Fix any errors found by the Consistency Checker before submitting the SOM for HLA Federate Compliance Testing.The Consistency Checker looks for things like unique names for objects and attributes in the same class, Updateable/Reflectable options on attributes, Initiate/Sense/React options on interactions, etc.  CreateFederationExecution YESDestroyFederationExecution YESJoinFederationExecution YESResignFederationExecution YES RegisterFederationSynchronizationPoint NOConfirmSynchronizationPointRegistration NOAnnounceSynchronizationPoint NOSynchronizationPointAchieved NOFederationSynchronized NORequestFederationSave NOInitiateFederateSave NOFederateSaveBegun NOFederateSaveComplete NOFederationSaved NORequestFederationRestore NOConfirmFederationRestorationRequest NOFederationRestoreBegun NOInitiateFederateRestore NOFederateRestoreComplete NOFederationRestored NOPublishObjectClass YESUnpublishObjectClass YESPublishInteractionClass YESUnpublishInteractionClass YESSubscribeObjectClassAttributes YESUnsubscribeObjectClass YESSubscribeInteractionClass YESUnsubscribeInteractionClass YESStartRegistrationForObjectClass YESStopRegistrationForObjectClass YESTurnInteractionsOn YESTurnInteractionsOff YESRegisterObjectInstance YESDiscoverObjectInstance YES UpdateAttributeValues YESReflectAttributeValues YES SendInteraction YESReceiveInteraction YESDeleteObjectInstance YES RemoveObjectInstance NO LocalDeleteObjectInstance NOChangeAttributeTransportationType NOChangeInteractionTransportationType NOAttributesInScope YESAttributesOutOfScope YESRequestAttributeValueUpdate YESProvideAttributeValueUpdate YESTurnUpdatesOnForObjectInstance YESTurnUpdatesOffForObjectInstance YESUnconditionalAttributeOwnershipDivestiture NONegotiatedAttributeOwnershipDivestiture YESRequestAttributeOwnershipAssumption YESAttributeOwnershipDivestitureNotification YESAttributeOwnershipAcquisitionNotification YESAttributeOwnershipAcquisition YESAttributeOwnershipAcquisitionIfAvailable YESAttributeOwnershipUnavailable YESRequestAttributeOwnershipRelease YESAttributeOwnershipReleaseResponse YESCancelNegotiatedAttributeOwnershipDivestiture YESCancelAttributeOwnershipAcquisition YESConfirmAttributeOwnershipAcquisitionCancellation YESQueryAttributeOwnership YESInformAttributeOwnership YESIsAttributeOwnedByFederate YESEnableTimeRegulation YES TimeRegulationEnabled YESDisableTimeRegulation NOEnableTimeConstrained YES TimeConstrainedEnabled YES DisableTimeConstrained NOTimeAdvanceRequest YES TimeAdvanceRequestAvailable YES NextEventRequest NO NextEventRequestAvailable NO FlushQueueRequest NO TimeAdvanceGrant YESEnableAsynchronousDelivery YESDisableAsynchronousDelivery YES QueryLBTS NOQueryFederateTime NOQueryMinimumNextEventTime NOModifyLookahead NOQueryLookahead NORetract NORequestRetraction NOChangeAttributeOrderType NOChangeInteractionOrderType NOCreateRegion YESModifyRegion YESDeleteRegion YESRegisterObjectInstanceWithRegion NOAssociateRegionForUpdates NOUnassociateRegionForUpdates NOSubscribeObjectClassAttributesWithRegion NOUnsubscribeObjectClassWithRegion NOSubscribeInteractionClassWithRegion YESUnsubscribeInteractionClassWithRegion YESSendInteractionWithRegion YESRequestAttributeValueUpdateWithRegion NOChangeThresholds NOEnableClassRelevanceAdvisorySwitch NO DisableClassRelevanceAdvisorySwitch NO EnableAttributeRelevanceAdvisorySwitch NODisableAttributeRelevanceAdvisorySwitch NOEnableAttributeScopeAdvisorySwitch YESDisableAttributeScopeAdvisorySwitch YESEnableInteractionRelevanceAdvisorySwitch YESDisableInteractionRelevanceAdvisorySwitch YESFigure 3.2  Food Fight Example Conformance Statement (v1.3 Spec)4.2	CS Dependency CheckThe CS is likewise checked for completeness and consistency when it is first uploaded.  If a CS file is uploaded, it is checked to be sure that it contains a line for every IF service and that all service names are spelled correctly.  The easiest way for the federate developer to create an ASCII CS file is to download the sample CS file from the Reference Library section of the HLA Federate Compliance Testing web site to get the list of service names and simply edit the YES and NO values.The order in which the services are listed does not matter, but there are dependencies among the services that must be observed.  For example, if updateAttributeValues is checked YES in the CS, then publishObjectClass and registerObjectInstance must also be checked YES.  The federate developer can verify these service dependencies by checking the CS against the service pre-conditions and post-conditions in the IF Spec for all asserted services.When an inconsistency is found, the CA will send email to the federate test point of contact (POC) explaining the discrepancy, and the federate developer must resolve the problem and upload a new CS. 4.3	SOM/CS Cross Check TestOnce the SOM and the CS have each been determined to be internally consistent, they are checked against each other for consistency in the SOM/CS Cross Check.  Figure 4.1 shows the SOM elements and the IF services that are checked against each other, with the appropriate references to the OMT Spec and IF Spec.The check goes both ways:  if the item is present in the SOM (e.g., a Publishable Object Class), then the service(s) must be asserted in the CS (e.g., Publish Object Class and Register Object Instance).  Likewise, if the CS asserts a service (e.g., Publish Object Instance), then the SOM must contain at least one corresponding item (e.g., a Publishable Object Class).  Figure 4.1 can be used as a guide by the federate developer to check the SOM and CS for consistency before submitting them for testing.Any mismatch between the SOM items and CS service assertions is flagged and reported to the federate test POC for resolution.  A new SOM or CS or both must be uploaded after the error(s) are fixed, and the test procedures begin again at the beginning, with the SOM parseability test, SOM conformance test, and CS consistency check that must be passed before repeating the SOM/CS cross check.5.	Other Lessons LearnedIn Step 2 of the HLA Federate Compliance Test process, the federate’s SOM and CS are checked individually and against each other for consistency.  The CA’s experience with over 50 tests to date has indicated that most testing problems arise with these consistency checks.Obviously, the federate developer is not going to submit a simulation for testing until the software is running without errors, and experience has shown that if a simulation runs with the HLA RTI, it will most likely pass the IF test in Step 4 of the test process.  The most common errors observed in the IF test occur when the federate fails to demonstrate one or more expected services.  This is often due to a misunderstanding about what services were expected or an oversight in setting up the IF test run.One final consistency check that frequently causes problems with HLA Federate Compliance Testing is a mismatch between the SOM submitted in Step 2 and the test FOM submitted in Step 3 for the IF test to be conducted in Step 4.  The test FOM is submitted as the .fed file for the IF test run.  If the object model elements (object and interaction classes, attributes and parameters) in the FOM ( .fed file) do not have exactly the same names as the elements of the SOM ( .omt file), then the test sequence generated by the SOM cannot be matched exactly by the IF test run.For example, in the Food Fight federate, say the SOM had an attribute of the Student object class called Ammunition to represent the amount of food that the student has on his tray.  During the implementation of the code, the programmer called this attribute AmmoAmount instead of Ammunition.  The .fed file may have been initially generated by the SOM developer from the SOM using the OMDT and Saving as . . . *.fed, with the attribute Ammunition.  To make the simulation work with the RTI, the programmer would have to change Ammunition to AmmoAmount in the .fed file.  If the programmer and the SOM developer are not the same person (and sometimes even if they are), the change (and the reason for it) do not get reflected back to the SOM.OMT TableIF Service NameOMT ReferenceIF ReferenceObject Class     (P)Publish Object Classsec 4.2.2, page 85.2Register Object Instancesec 4.2.2, page 86.2     (S)Subscribe Object Class Attributessec 4.2.2, page 85.6Discover Object Instance†sec 4.2.2, page 86.3Object Interaction     (I)Publish Interaction Classsec 4.3.2, page 155.4Send Interactionsec 4.3.2, page 156.6     (I) DDMPublish Interaction Classsec 4.3.2, page 155.4Send Interaction with Regionsec 4.5.2, page 269.12     (S)Subscribe Interaction Classsec 4.3.2, page 155.8Receive Interaction†sec 4.3.2, page 156.7     (S) DDMSubscribe Interaction Class with Regionsec 4.5.2, page 269.10Receive Interaction†sec 4.3.2, page 156.7     (R)Receive Interaction†sec 4.3.2, page 156.7Publish Object Classsec 4.3.2, page 155.2Update Attribute Valuessec 4.3.2, page 156.4     (R) DDMReceive Interaction†sec 4.3.2, page 156.7Publish Object Classsec 4.3.2, page 155.2Associate Region for Update orRegister Object Instance with Regionsec 4.4.2, page 21 sec 4.4.2, page 219.69.5Update Attribute Valuessec 4.3.2, page 156.4Attribute/Parameter     (T) ActiveUnconditional Attribute Ownership Divestituresec 4.4.2, page 217.2Negotiated Attribute Ownership Divestituresec 4.4.2, page 217.3Attribute Ownership Divestiture Notification†sec 4.4.2, page 217.5Update Attribute Valuessec 4.4.2, page 216.4Publish Object Classsec 4.4.2, page 215.2     (T) PassiveRequest Attribute Ownership Release†sec 4.4.2, page 217.10Attribute Ownership Release Responsesec 4.4.2, page 217.11Update Attribute Valuessec 4.4.2, page 216.4Publish Object Classsec 4.4.2, page 215.2     (A) ActiveAttribute Acquisition Ownership if Availablesec 4.4.2, page 217.8Attribute Ownership Acquisitionsec 4.4.2, page 217.7Attribute Ownership Acquisition Notification†sec 4.4.2, page 217.6Update Attribute Valuessec 4.4.2, page 216.4     (A) PassiveRequest Attribute Ownership Assumption†sec 4.4.2, page 217.4Update Attribute Valuessec 4.4.2, page 216.4     (U)Update Attribute Valuessec 4.4.2, page 216.4Publish Object Classsec 4.4.2, page 215.2     (U) DDM-1Register Object Instancesec 4.4.2, page 216.2    Associate Region for Updatessec 4.4.2, page 219.6Update Attribute Valuessec 4.4.2, page 216.4     (U) DDM-2Publish Object Classsec 4.4.2, page 215.2    Register Object Instance with Regionsec 4.4.2, page 219.5Update Attribute Valuessec 4.4.2, page 216.4     (R) Reflect Attribute Values†sec 4.4.2, page 216.5Subscribe Object Class Attributessec 4.4.2, page 215.6     (R) DDM Subscribe Object Class Attributes with Regionsec 4.4.2, page 219.8Reflect Attribute Values†sec 4.4.2, page 216.5Figure 4.1  Conformance Cross-Check (v1.3, 1 July 1998)The best way to guard against this type of error is to generate a .fed file from the SOM and compare it against the .fed file to be submitted for the test FOM.  The .fed file for the test FOM should also be compared to the test sequence generated by the CA to be sure that all SOM elements in the test sequence are included in the .fed file with exactly the same names.6.	SummaryHLA Federate Compliance Testing is not intended to be an onerous or time-consuming process.  Close attention to internal consistency, particularly with regard to SOM documentation, can help to make the process run smoothly and efficiently.7.	References[1]	USD(A&T) Memorandum, “DoD High Level Architecture (HLA) for Simulations,” 10 September 1996.[2]	Defense Modeling and Simulation Office, “High Level Architecture Compliance Checklist, Version 1.3,” May 1998[3]	Defense Modeling and Simulation Office, “High Level Architecture Object Model Template, Version 1.3,” April 1998.[4]	Defense Modeling and Simulation Office, “High Level Architecture Interface Specification, Version 1.3,” April 1998.[5]	Defense Modeling and Simulation Office, “High Level Architecture Rules, Version 1.3,” April 1998.Author BiographiesMICHAEL B. WOLDT is a Certification Agent at the HLA Federate Compliance Test Lab, Alexandria, VA.  DMSO appointed him as a Certification Agent for HLA Federate Compliance Testing.MIGUEL SALAZAR is a Certification Agent at the HLA Federate Compliance Test Lab, Alexandria, VA.  DMSO appointed him as a Certification Agent for HLA Federate Compliance Testing.LAURA LUCÍA BURKHART is a Research Scientist at Georgia Tech Research Institute, Georgia Institute of Technology, Atlanta, GA.  She is a developer of the HLA Federate Test System and Test Tools.MARGARET M. HORST is a Senior Research Engineer at GTRI.  She is part of the GTRI team that developed the Federate Conformance Test system for DMSO to certify federates as HLA compliant.  She is Vice Chair of the Paper Review Panel for the Federation Development Process Forum (PROC) and is Vice-Chair of the PRP for the RD&E User Forum.J. ANDREW OLD is a Research Engineer I at GTRI.  He migrated GTRI's Federate Compliance Test System to support HLA Interface Specification version 1.3 under the Windows NT operating system.  He is currently leading the GTRI efforts to develop the Web Book for Modeling and Simulation. EMBED Word.Document.8 \s 