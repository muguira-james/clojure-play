Army Object Management StandardsDon HodgeBrad W. BradleyU.S. Army Materiel Systems Analysis Activity.392 Hopkins RoadAberdeen Proving Ground, MD  21005-5071410-278-6540, 410-278-4066dhodge@arl.mil, bbradley@arl.mil Keywords:object oriented programming, object standards, modeling and simulations. ABSTRACT:  Current DoD model development efforts have embraced the use of object oriented programming.  As a result, there has been a proliferation of competing object developments.  In 1QFY97, the Deputy Undersecretary of the Army for Operations Research (DUSA(OR)) formed an Object Management Working Group to propose an Army Object Management Policy addressing the need for Army M&S object standards.  The proposed policy developed recommended that the Army focus on a high-level object class structure independent of a specific simulation environment.  This would allow M&S developers to tailor high-level object standards to their specific applications through lower-level classes/instantiation that extend the standards to a specific M&S requirement.  The overall impact in the development of standard abstract objects will be to organize future M&S along a common object structure to support interoperability, object reuse, and community understanding of the M&S.  The Army Object Management Standards Category (OMSC) was formed in April 1997 to initiate the proposed policy.  The OMSC function is to:  develop abstract objects for Army M&S functions; identify the minimum set of object methods/public data associated with the object function; and link the object methods to standard algorithms/data sources obtained from the other AMSO standard categories.  The object management approach to object development is based on object composition.  This presentation will discuss object development philosophy, current object standards, and on-going activity1. INTRODUCTION	This report documents the development of the Army standard abstract object classes.  Many of the current Army and Joint model development efforts have embraced the use of Object Oriented Programming (OOP) for their model development efforts.  As a result, there has been a proliferation of competing object models.  In 1QFY97, the Deputy Undersecretary of the Army for Operations Research (DUSA(OR)) formed an Object Management Working Group (OMWG) to propose a policy addressing the need for standards associated with Army M&S objects.  The proposed policy developed by the OMWG recommended that the Army focus on a high-level object class structure independent of any specific simulation environment.  This would allow M&S developers to tailor the high-level object standards to their specific applications through lower-level classes/ instantiation that extend the standards to a specific M&S requirement.  The overall impact in the development of standard abstract objects will be to organize future M&S along a common object structure to support interoperability, object reuse, and community understanding of the M&S.  The proposed policy was briefed by the OMWG to the DUSA(OR) and was accepted in principle.  AMSO subsequently formed the Object Management Standards Category (OMSC) in April 1997 to initiate the proposed policy.  The OMSC mission is to:develop abstract objects for Army M&S functions, identify the minimum set of object methods/public data associated with the object function, and link the object methods to standard algorithms/data sources obtained from the other AMSO standard categories.The OMSC is comprised of M&S practitioners to include those from the following agencies: Army Materiel Systems Analysis Activity (AMSAA) -- serves as the OMSC Coordinator; Concepts Analysis Agency (CAA); National Simulation Center (NSC); TRADOC Analysis Center - Ft. Leavenworth (TRAC-FLVN);TRAC- Monterey (TRAC-MTRY), TRAC-White Sands Missile Range (TRAC-WSMR); and Simulation, Training, and Instrumentation Command (STRICOM). Recent activity has focussed on the development of an Army Platform Object standard and a Unit Object standard.  For this effort, the definition of a platform encompasses any item that can be treated as an entity.  Examples of this definition include vehicles (tanks, trucks, helicopters, etc.) and individual humans as well as anything else that can be treated as an individual item (e.g., air defense missiles or remotely emplaced sensor packages, etc.).  These types of entities are typically used in simulations where there is an interest in representing the behavior, characteristics or performance of the individual element versus representing the aggregate or composite behavior, characteristics or performance of a collection of these entities.  The definition of a Unit encompasses military organizations that represent collections of entities (e.g., people, vehicles, weapon systems, etc.).  Examples of this definition include organizations (i.e., companies, battalions, brigades, divisions, etc.) as well as functional groups (e.g., Tactical Operations Centers and Fire Control Centers).  These types of groups are typically used in simulations where the interest is in representing the sum or aggregate performance and/or behavior of the group versus representing the performance, behavior or characteristics of the individual elements that compose the group.  Simulations that typically exercise this structure are known as ‚Äúaggregate-level simulations.‚Äù2.  APPROACHDuring the initial stages of developing a policy on objects, AMSO funded the U.S. Army Training and Doctrine Command (TRADOC) Analysis Center in Monterey, California (TRAC-MTRY) to perform the ‚ÄúStandard Army Modeling and Simulation Object (SAMSO) Study.‚Äù  The study proposed an approach to object development based on object composition.  The OMSC reviewed the SAMSO general approach to object development and adopted it for use in developing Army Standard objects.  A paper describing the component approach to model development is listed in reference [1]. As a part of the SAMSO study, the TRAC-MTRY developed sample platform and unit objects.  The OMSC selected the sample platform object design for use as the initial prototype for developing a standard Army Platform Object.  To explore the capability of the Platform Object to address expected M&S platform implementations, the OMSC conducted a number of M&S test applications.  The simulations chosen for the test applications were the AMSAA Groundwars simulation and the TRAC-WSMR CASTFOREM/ COMBAT XXI simulation.  A comparison with the Warfighter Simulation 2000 (WARSIM 2000) was also conducted.  The results of these test applications were used to refine the Platform Object.  Additionally, to gain a broader perspective on the application of the draft Platform Object to other M&S domains, an overview of the revised draft Platform Object was provided to the Army M&S Management Program Working Group (AMSMP WG -- now know as the M&S Policy and Technology Working Group) and the Army M&S Standard Categories for review.  Comments were collected and reviewed to determine if any changes to the Platform Object were needed to address differing M&S requirements.  A similar process was followed for the Unit Object.  Simulations used in the review of the Unit Object were the TRAC-FLVN Army Warfare Simulation (AWARS), the CAA Advanced Regional Exploratory System (ARES), and WARSIM 2000.  Based on these reviews, an updated version of the draft Platform Object and Unit Object standard was developed and submitted to the Standards Nomination and Approval Process (SNAP) and the Army Standards Repository System (ASTARS).3.  Final Platform Object DesignFigure 3.1 shows the final design for the Platform Object.  This design is based on the OMSC review documented in reference [2] and input provided by the M&S community.  This design was nominated in the Standards Nomination and Approval Process and was approved by the DUSA (OR) as an Army standard.  It is placed in the Army Standard Repository System.Figure 3.1.  Final Platform Object Design.4.  Final Unit Object Design.  Figure 4.1 shows the final design for the Unit Object.  This design is based on the OMSC review documented in reference [3] and input provided by the M&S community.  This design was nominated in the Standards Nomination and Approval Process for review and future placement into the Army Standard Repository System pending the results of the Army M&S standard review process.Figure 4.1  Final Unit Object Design.5. References[1]	Jackson, Leroy, MAJ:  ‚ÄúA Component Approach to Object Model Standards for Simulation, http://amsaa-www.arl.mil/objects.[2]	Bradley, Brad W., Hodge, Don: Army Standard Platform Object, AMSAA Technical Report No. TR-634,  HYPERLINK http://amsaa-www.arl.mil/objects http://amsaa-www.arl.mil/objects, July 1998.[3]	Bradley, Brad W., Hodge, Don: Army Standard Unit Object, AMSAA Technical Report (draft),  HYPERLINK http://amsaa-www.arl.mil/objects http://amsaa-www.arl.mil/objects.Author BiographiesBrad W. Bradley is an Operations Research Analyst at the U.S. Army Materiel Systems Analysis Activity, (AMSAA) Aberdeen Proving Ground (APG), MD.  He is the Army Object Management Standards Category (OMSC) Coordinator.  He heads the AMSAA Advanced Simulation Team which provides physical algorithms and conducts V&V for M&S efforts such as the Close Combat Tactical Trainer, ModSAF, OneSAF, and COMBAT XXI. Don Hodge is an Operations Research Analyst at AMSAA, APG, MD.  He is a member of the Army OMSC and is work an AMIP project on object standard development.  He is also working on the Army M&S Taxonomy Development that will review key Army M&S to provide recommendations to the Army leadership on standard category structure and scope.                       UnitgetLocation()getSpeed()getMvmtDirection()getID()getSide()getPosture()getStatus()getMission()getEchelon()move()look()determineAttrition()0+  UnitUnitGeometrygetShape()getOrientation()getLocation()AttritioncauseAttrition()0+CommunicationsgetNet()setNet()sendMessage()receiveMessage()0+C2doC2()0+0+Logisticsreceive()      MaintenanceconductMaintenance()conductEvacuation()conductRecovery()            SupplygetRemainingCapacity()getTotalCapacity()getQtyOnHand()expend()transfer()0+0+SystemGroupgetQty()acceptLoses()acceptGains()0+0+PlatformPlatformInfo0+UnitComponentgetStatus()0+0+0+0+0+0+0+            SensorgetmaxRange()getOrientation()getContacts()activate ()deactivate()            WeapongetmaxRange()load()aim()fire()                        Carrierload()unload()getRemainingcapacity()getTotalcapacity()getQtyOnHand()     Crewgetquantity()Communicationsgetnet()setnet()sendMessage()receiveMessage()PlatformFramegetSize()Logisticsreceive()            PlatformgetType()getStatus()getLocation()getSide()assessDamage()PlatformComponentgetType()getStatus()0+0+MaintenanceconductMaintenance()0+                        SupplygetRemainingCapacity()getTotalCapacity()getQtyOnHand()expend()transfer()0+          Movementgetvelocity()changeVelocity()moveTo()FrameComponentgetSize()