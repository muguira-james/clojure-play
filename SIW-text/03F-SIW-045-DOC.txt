Data Management Tools to Ensure FOM, Federate, and Federation ConsistencyLaura E. FeinermanRobert MikulaThe MITRE Corporation7515 Colshire Dr.McLean, VA 22102703-883-7488, 703-883-7168 HYPERLINK mailto:feiner@mitre.org feiner@mitre.org,  HYPERLINK "mailto:rmikula@mitre.org" rmikula@mitre.org Keywords:FEDEP, Human Behavior Representation, testbed, persistent federation. ABSTRACT: MITRE developed a family of federation data management (FDM) tools to support the Joint Simulation Systems (JSIMS) federate and federation integration activities. These tools began with the development of Basic Interface Tests (BITs) which identify the FOM objects a federate publishes and the interfaces surrounding and related to those objects. The FDM tools verified the existence of the object in the FOM as well as identified objects not yet in the FOM, leading to FOM revisions. In addition, the tools identified subscribing and publishing federates as well as possible mismatches. The FDM tools were also used to populate the BITs with the publication and subscription actions expected of the each other federation member. As the FDM evolved a Basic Interface Test (BIT) Tracking Tool (BTT) was developed. The BTT records integration status for each BIT step and provides reports by BIT, by federate, or by federation enclave. The BTT provides tabular or graphical comparison of planned vs actual integration progress. The BTT can access data from the System Problem Report tracking system to enable a focused, prioritized effort on areas that will have the most impact. Data within the BTT can be analyzed to assess the status of interfaces to C4I systems, or to assess progress in meeting operational requirements. 1. IntroductionThis paper gives the reader a view into the methods and tools developed to support Step 5 of the Federation Development and Execution Process (FEDEP):  Integrate and Test the Federation as applied to the Joint Simulation System (JSIMS). Many of the challenges presented by JSIMS are not unique to JSIMS, but rather are representative of challenges faced by most large, geographically distributed integration efforts. 1.1 Joint Simulation System (JSIMS)The primary purpose of JSIMS is to support ready forces by providing realistic, joint, military training for all types of missions. JSIMS connects to both command, control, communications, computers, and intelligence (C4I) systems and field equipment while supporting Joint, Service, and other agency training, education, doctrine development and mission rehearsal activities. JSIMS partner programs represent the four Services, and several intelligence and other agencies. Some of the integration challenges presented by JSIMS include: Multiple, geographically and organizationally dispersed partners with each partner responsible for one or more federation component.Partners varying in size and stability from large organizations with solid funding to small groups with sporadic funding, and all the variations combinations in between. Each presents unique organizational and cross organizational communications challenges.HLA expertise varied across and within partner programs, from very experienced to novice.Each JSIMS partner develops one or more federate components. In addition to the Service and agency federates, there are several common components providing a common infrastructure or a common tool to the federation. Infrastructure components include the Run Time Infrastructure, the Simulation Engine, the Synthetic Natural Environment, and the security libraries. Tools and support federates include scenario preparation tools, the resource allocation tool, Technical Control, role player workstation and after action reporting tools, the Security Federation Connector, the Out Guard and others. The JSIMS System / Subsystem Design Description describes the overall system architecture to include different domain and support federates, applications, and libraries. 1.2 JSIMS Alliance Wide GroupsSeveral Alliance wide groups were instituted. MITRE, as Systems Engineer, leads several of these groups and plays prominent roles in others. The Alliance Technical Group (ATG) focuses on federation architecture issues. The JSIMS System/Sub-System Design Document (SSDD) is published routinely and records design decisions. It is a mechanism for disseminating this information across the Alliance. This group tackles many of the issues inherent to Step 3 of the FEDEP, Design the Federation. The Alliance Modeling Coordination Group (AMCG) focuses on the representation of simulation objects and cross-federate modeling concepts and agreements. The Federation Object Model is published routinely, frozen prior to integration events, with revisions captured for subsequent review and incorporation. This group focuses on issues key to Steps 3 and 4 of the FEDEP, Design and Develop the Federation. 2. Integrate & Test the JSIMS FederationThe Alliance Integration and Test Group (AITG) plans and executes the integration events (activities relating to Step 5 of the FEDEP). Information discussed by the ATG and AMCG is discussed and interpreted within each partner’s home site, and communicated to partner participants of the other groups including and the software developers. The AITG discusses the resulting interpretations and integrates the results in the JSIMS Integration Facility (JIF) and the JSIMS Intelligence Integration Facility (JIIF). At the AITG and at the integration events, the challenge is to identify and resolve any disconnects. In preparation for integration, each partner Development Agency (DA) sought to reconcile the large number of diverse requirements by identifying and implementing manageable pieces of software in a manner consistent with the ATG and AMCG decisions. Ideally this software would forms the foundation for additional software functionality implemented and integrated at subsequent events. Federation design and its software components evolved and were improved upon over time. This process and the organizational complexity presented opportunities for inconsistencies to arise. To clarify what each partner was bringing to an integration event, the AITG holds weekly meetings, discussing the event goals, content, and schedule. To add specificity to the simulation content discussions, a template was designed to identify the single federate and multi-federate simulation objects and interactions, planned to be integrated. This template described the Basic Interface Tests (or BITs) planned for an integration event and became the means to monitor and track integration progress. The BIT template was posted with instructions on a web site accessible by to all partners. This paper identifies the methods used to provide the BIT template to the partners, review the BITs as developed by the partners, and the tools developed to monitor integration progress and support test activities.2.1  Basic Interface Tests (BITs)Using the template, BITs were developed by the DA of for each domain federate. The BITs fell into three categories: Initialize, Control, and Cross Domain Activity (XDA representing cross federate functionality). The Initialize BITs identified the FOM objects that each federate would register at federation initialization. The Control BITs identified how the domain federate expected to control its simulation objects. This occurred through a partnership between the domain federate and the common component role player workstation federate. The XDA BITs described functionality to occur between two or more domain federates (land and air operations such as Air Defense Artillery, for example).Each BIT is composed of Primitives, reusable chunks of functionality (i.e., launch an aircraft), and each Primitive is composed of steps. Each step identifies the FOM element used to initiate ing a federate action, whether it be registering an object, publishing object attribute values, or publishing an interaction. The BIT template provided a format for identifying the corresponding reaction to this action by each federate.Each DA prepared one or more BITs representing the functionality that DA’s federate expected to have at the integration event.2.2  Pre-Integration BIT ToolsAlthough customized tools to facilitate the building and collection of this data were considered, certain environments prohibited that avenue. In some cases, people working on a single federate’s BITs were geographically distributed, further complicating a tool approach. The solution used to collect integration planning inputs had to be portable and allow for an iterative process, documenting what is known, while allowing for expansion and modification.To facilitate communication among the JSIMS partners, a web site was created to post relevant information. This also helped facilitate communication within organizations when people working on a single federate’s BITs were geographically distributed. However, a purely web-based solution for the development of BITs was not feasible for a number of reasons including:  interface issues associated with the complexity of the required data, security restrictions prohibiting file uploads, and performance limitations associated with such factors as the inability to guarantee client-side validation, thus requiring electronic transmission to a server to incorporate basic error checking techniques.2.2.1  BIT TemplateA template-based solution was chosen as the initial data collection mechanism. This approach allows collection of data in a consistent format, incorporating the ontology specifically defined for all BITs. In addition, predefined picklists restricting the range of acceptable values were incorporated to minimize errors. By using Microsoft Excel, steps could be added, modified, or deleted using basic spreadsheet edit commands, without requiring specialized training or customized code.The BIT template provides space for identifying a FOM element for each BIT step. Initially, values in the template were presented in a picklist format that was restricted to those values actually in the FOM. Use of the template demonstrated that this over constrained the BIT developments. As the FOM is continually evolving and because the BITs provided a structure for planning functionality expected at future integration events, this constraint on existing FOM values was relaxed.2.2.2 BIT ReviewTo promote a tight coupling of the FOM publication and subscription information, automated techniques were performed to ensure FOM validity through relational database queries. Additionally, a federate developer could be expected to know the federate’s publication and subscription information, but not necessarily the corresponding publication and subscription activity of other federates. Appendix F of the JSIMS FOM and Federation Modeling policies document contains this information. These tables were extracted from the Word document and added to an Access database.These tables in the JSIMS FOM document describe federate responsibilities in terms of publishing and subscribing to objects and interactions. By augmenting the BIT templates with this information, significant efficiencies were achieved. Updates to the publication/subscription data of the BITs could be generated and updated easily, and were tightly coupled to the release of the latest FOM. An Access database supplemented with Visual Basic for Applications code provided the data and the interface required to populate the BITs with this information.As part of the automated review of the BITs, several reports were generated:New or unexpected FOM elementsObjects expected to be initialized at the integration event given the FOM documentation, but were not identified in the corresponding federate’s Initialization BITs. Federation expectations of other federates, identifying one federate’s expectation of another federate’s participation  during the execution of a BIT.The BIT review identified differences between what was discussed at the AMCG and what was described in the BITs. At times there were disconnects within an organization, at times there were disconnects in the timing/availability of specified functionality. The purpose of the BIT review was to promote discussion within and across partner organizations, to be cognizant about the disconnects, address issues early and ensure discussions occurred about the evolving functionality expected at future events. The BIT review helped clarify FOM related integration issues within and across organizations. A federate that was subscribed to an object to exercise that the reflecting federate’s functionality needed to know at what integration event that object would be available. As BIT templates were received, reviewed, and augmented with publication/subscription information, the results were posted to the integration web site. By consolidating this information into a single database repository, special purpose reports could be generated to aid in the development of the federation.Federate Use reports were generated to show all BITs in which a single federate participates. These were based on BITs containing one or more objects or interactions published cation by a single federate. These reports were posted to the web site so that each federate DA would know not only their own integration activities, but also which other federates were looking to employ their federate’s simulation capabilities. This information was also captured in an Excel file for real-time integration use. The Excel file allows the specification of available federates for a test, and identifies the list of BITs that could be tested with those federates. 2.3  Tracking BIT IntegrationIn preparation of a tool to track BIT integration, several goals were identified including:Preserving the history of previous inputsAutomatically checking the quality of inputs and editsSupporting multiple users simultaneously without degradation of performanceProducing reports in a variety of formats, including quantitative, qualitative, and graphicalSupporting the capability to link to additional data storesMITRE developed a BIT Tracking Tool (BTT) to meet these goals. The BTT has been used to store hundreds of BITs from all Alliance partners in an Access database. The BTT user interface supports filtering the BITs by one or more specific characteristics, such as Federate, Test Lead, Priority, and others to rapidly select the BIT or BITs of interest. This information is provided on the Basic Interface Test General Information Screen shown in Figure 2.1. Figure 2.1  BTT General Information Screen The BTT is capable of operating in several different modes of operation, to allow either read only access, or in edit mode to support data corrections. It is also possible to export the contents the of a single BIT, or all BITs for a specific federate. Two formats are available for exporting BITs: , in letter (portrait) or legal (landscape). Each format is tailored to provide as much relevant information given the available space.  one of two customized templates from the BIT General Information Screen. Figure 2.1  BTT General Information Screen Upon selection of the BIT Test Results button, additional BTT user interfaces provide the opportunity to enter the status of that integration step: Pass, Fail, Defer (integration of that step’s functionality is postponed until a future integration event), or Working (indicating that some but not all of the expected functionality of that step was executed).Using these integration step status results, several different reports were created:Qualitative reports indicating if a BIT was not started, in progress, or completely passedQuantitative reports showing the completion percentage of each BITBITs currently blocked by one or more System Problem Reports (SPRs)Graphical reports showing planned vs. actual integration progress over time.Reports can be generated for a single BIT, all BITs for a single federate, or all federates in an enclave. JSIMS has two enclaves, BITs for each enclave reside in independent BTTs. A link was established between the BTT and the SPR tracking system (ClearQuest by Rational). A BTT user could enter the SPR number (if known) generated to document a problem encountered during integration. The BTT could then dynamically link to regularly produced output from the SPR system, thus providing detailed information for every blocking SPR entered in the BTT.In addition, automated techniques were used to provide robust views into planned vs. actual integration progress. BTT users could specify the federate, timeframe, or minimum percentage of BIT steps required to pass. Excel templates were used to simplify views into this data cube. Time ranges could be supplied in the first row of the template, and data specific for each date would be generated and placed back into the template. This approach maintains flexibility while limiting the keystrokes required to produce the report. A sample is shown below in Figure 2.2.By consolidating the collection of tracking data into a single repository, it is possible to maintain a history of progress throughout an Integration Event.  As multiple Integration Events are planned and executed, results may be baselined in data stores specific to each event.C4I Interface AnalysisBTT data stores were also used to assess progress on the integration of interfaces with C4I systems through C4I Adapters. A C4I adapter is a conduit for information flowing between a C4I system and the federation. Each C4I system has one DA responsible for its interface with JSIMS. The architecture of the interface is described by the JSIMS SSDD. Implementation details are solely the domain of the DAs.Figure 2.2  Planned vs Actual Integration Progress By consolidating the collection of tracking data into a single repository, it is possible to maintain a history of progress throughout an Integration Event.  As multiple Integration Events are planned and executed, results may be baselined in data stores specific to each event.C4I Interface AnalysisA C4I adapter is a conduit for information flowing between a C4I system and the federation. Each C4I system has one DA responsible for its interface with JSIMS. The architecture of the interface is described by the JSIMS SSDD. Implementation details are solely the domain of the DAs.From a BIT perspective, the adapters are treated as any other federate. They participate in federation initialization, Save and Restore, and shutdown. The adapters employ the FOM for two specific functions: management of the adapters and transportation of C4I message content. The BIT Template was augmented with additional information to track the C4I system integration. The first column identifies the specific C4I system that is either generating or receiving the C4I message. The second column identifies the type of message: abstract, organic, abstract and organic, or datalink. The third column identifies the external message name.While this information was included at the BIT step level, often multiple steps were required to be evaluated to determine if the required C4I functionality has been met.  The BTT proved to be extremely useful as a data store that could be mined for the data both within a BIT and across multiple BITs to determine if C4I Adapter functionality has been successfully exercised during an integration event.Operational Requirement ComplianceAnother use of the BTT data stores was in the assessment of Operational Requirements addressed. Integration was performed using a building block or bottom-up approach. This approach established the fundamental elements of the simulation objects, and added functionality at successive events. For example a unit (ground, air or sea) might be initialized at one event, with additional functionality being added at successive events to allow the object (unit) to move, perform single federate operational activities (launch an aircraft), and then execute multiple federate interactions (conduct close air support). As integration continued, the BTT data stores  for each event were evaluated to identify the relationship between the building blocks and the operational requirements. A key element in the construction of BITs is the use of Primitives, defined as a reusable and discrete element of operational functionality.   Primitives can be reorganized to form a sequence of functionality that address the real world steps associated with a mission or operation.  Such  sequences  are  defined  as Vignettes.Vignette execution, with its tight coupling to missions, form a basis to determine if Operational Requirements have been met.   However, the layers of required relationships (BIT to Primitive, Primitive to Vignette, Vignette to Requirement) do not lend themselves to intuitive results.  Calculating these metrics manually presents a daunting challenge since many to many relationships are the norm prevalent between these entities.To measure the progress in addressing Operational Requirements, the BTT was augmented to incorporate these relationships.   A detailed report examines the status of all Primitive Steps recorded in the BTT, and compiles results into a Primitive Summary report.  The results of the Primitive Summary report are then incorporated into Vignette Completion metrics, and similarly Vignette Completion metrics are then incorporated into metrics used to evaluate progress in meeting operational requirements.  These metrics have been used to prioritize and focus efforts during Integration Events.2.6    Supporting System TestA system test was conducted in Dec 2002. This test demonstrated working functionality to the users. To prepare for the test, the BTT was modified to select BITs for which all BIT steps had passed, and to allow DA test leads to nominate BITs for the test when the Test Leads felt that the steps critical to demonstrate the functionality had passed. In addition the BTT was modified to print a Data Recorder sheet for each BIT to be demonstrated at the ST. A sample Data Recorder sheet is, shown in Figure 2.3. Data Recorder sheets could be generated for all BITs to be demonstrated for a single federate in a single Excel workbook, with a separate tab for each BIT. This aids in portability and speed of generation. Each sheet was populated with the contents of each BIT as stored in the BTT during integration, and with the latest recorded status of each step during integration. Lastly, the BTT Interfaces were modified to capture the data from the sheet, to support the collection of multiple sheets per BIT, and generate reports based on the entered results.  EMBED PBrush  Figure 2.3.  BIT Data Recorder Sheet for System TestIn conclusion, advantages of the BTT include the following: Multiple baselines are supported and preservedThe tool is portable and can be quickly customized to meet evolving project requirements. Status histories are preserved within the tool and archived regularlyInputs are automatically timestampedData quality is maintainedReports are available in qualitative, quantitative, and graphical formatsBatch mode is available for lengthy processesAutomated linkages to additional data sources are provided EMBED PBrush  Figure 2.3.  BIT Data Recorder Sheet for System TestIn conclusion, advantages of the BTT include the following: Multiple baselines are supported and preservedThe tool is portable and can be quickly customized to meet evolving project requirements Status histories are preserved within the tool and archived regularlyInputs are automatically timestampedData quality is maintainedReports are available in qualitative, quantitative, and graphical formatsBatch mode is available for lengthy processesAutomated linkages to additional data sources are provided3.0  Summary and Conclusions:We were able to develop methodologies that used available means to promote communication within and across organizations. The use of a web site provided easy access to integration information. The use of an Excel template augmented by picklists allowed the identification of simulation functionality, represented by FOM elements, slated for an integration event. Excel coupled with Access allowed consistency checking of the BITs and the FOM, as well as allowed federate developers to be aware of the expectations of other federate DAs. The use of Excel and Access was exploited further in the development of an integration tracking tool. This tool was installed in the JSIMS integration facilities and was used by the federate developer test leads to record integration status. This status was useful for the testers as well as providing quick, up-to-the-moment integration status to partner program managers. The BTT was further extended to support the JSIMS System Test. 4.  AcronymsJSIMSJoint Simulation SystemFDMFederation Data ManagementFOMFederation Object ModelBITBasic Interface TestBTTBIT Tracking ToolDADeveloper AgentC4ICommand, Control, Communications, Computers, and Intelligence.FEDEPFederation Development and Execution ProcessAITGAlliance Integration and Test GroupAMCGAlliance Model Coordination GroupJIFJSIMS Integration FacilityJIIFJSIMS Intelligence Integration FacilityXDACross Domain ActivitySPRSystem Problem ReportAuthor BiographiesLAURA FEINERMAN is a lead Modeling and Simulation Systems Engineer in the Center for Innovative Computing and Informatics Division at the MITRE Corporation. She is currently working on Joint Simulation Systems (JSIMS) as the Alliance Integration and Test Group Lead. This group is responsible for planning and executing the integration and testing of the multiple component interfaces that make up JSIMS. She brings to the JSIMS federation experience gained through the development and execution of several federations and distributed simulation efforts including Icarus (a test bed for Human Behavior Representation (HBR) models), Pegasus and Trailblazer (supporting experimentation by the Joint Forces Command). Ms Feinerman previously was the project lead for the Icarus task, sponsored by the Defense Modeling and Simulation Office, which investigated the feasibility of using the High Level Architecture as a test bed for Human Behavior Representation (HBR) models. Ms Feinerman was instrumental in developing and executing the Joint Warfighting Program Pegasus and Trailblazer federations to support for experimentation by the Joint Forces Command. She has previously led and participated in subcommittees of the Interface Working Groups for the Joint Training Confederation. Ms. Feinerman has a B.A. in Economics and an M.S. in Applied Mathematics from the State University of New York at Stony Brook.ROBERT MIKULA Mr. Mikula is a Senior Software Systems Engineer within the Center for Innovative Computing and Informatics in Reston, VA. He currently supports the Joint Simulation Systems (JSIMS) project where the MITRE team provides the systems engineering and integration function for a consortium of service programs and their contractors. Rob has experience in web-based software development, XML, human computer interfaces, databases, and object request  broker technologies. He holds a Project Management Professional Certification and is currently pursuing doctoral studies at George Mason University.This needs a reference. Should the title be underlined, italicized? ReferenceCould we do a graphic showing the BIT template with pick lists? Needs document reference!Was this In Work?