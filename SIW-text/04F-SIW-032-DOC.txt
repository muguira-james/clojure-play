Converging Software ArchitecturesWithNext Generation Distributed TechnologiesL. Scott HolbenRobert W. JohnsonMargaret S. HeraldLockheed Martin Aeronautics86 South Cobb DriveMarietta, GA 30063770-494-0475, 770-494-0258, 770-494-9833scott.holben@lmco.com, r.w.johnson@lmco.com, margaret.s.herald@lmco.comKeywords: SIP, communications protocols, distributed M&S, VoIP, firewall, HLAABSTRACT: For the past three years, Lockheed Martin Aeronautics has investigated the integration of an event driven simulation infrastructure with the Session Initiation Protocol (SIP) Voice over Internet Protocol (VoIP) technology. Early work indicated that SIP integrates well due to several of its technical features and that additional practical considerations made it a good candidate for wide usage by the distributed modeling and simulation community. These results were documented in a paper presented at the Summer Computer Simulation Conference in Montreal, Canada, in June, 2003: “Converging Distributed Modeling & Simulation with the Session Initiation Protocol.” (If the reader is unfamiliar with the SIP protocol, he is encouraged to review these earlier results.)  This paper documents recent results of this continued development effort and how the integration of SIP into a simulation framework can alleviate cross vendor interoperability problems, enable simulation infrastructures to scale adequately to support a large number of federates, dramatically reduce single point network kills and make dynamic real-time firewall traversal possible. 1. IntroductionScalable and secure distributed modeling and simulation (M&S) supporting any application – from military concept evaluation to the simulation of engineering and manufacturing processes – depends upon the robustness of the signaling messages transmitted across a network to establish dynamic pathways for sending real-time data. Over the past few years, the paradigms governing the network communications aspect of distributed M&S were by necessity based on the assumption that bandwidth was a scarce commodity and therefore simulation endpoints had to be extremely simple to reduce overall system costs. Similarly, creating software that supported distributed simulation – software that is extensible, flexible, interoperable, manageable, scalable – was not readily achievable due to platform, operating system and code dependency constraints. Consequently, the currently accepted software development standards/strategies and communications protocol solutions embraced by the distributed M&S community have made efficient, cost effective distributed simulation collaboration efforts challenging at best and frequently impossible to achieve, except for one-time, not readily repeatable, usually heroic efforts. This is largely due to the inability of current architectural approaches to simultaneously scale while supplying network quality of service – bandwidth guarantee, effective packet delay and jitter control – while dynamically traversing firewalls. The technology trends described by Moore’s Law, Metcalfe’s Law and Gilder’s Law - faster computing, cheaper computing, vastly increased bandwidth - now make it possible to create an entirely new approach to distributed M&S, one which is not limited by the previous generation’s technologies and architectures. 2. Current Distributed M&S Network Protocols2.1 DISThe Distributed Interactive Simulation (DIS) protocol evolved from lessons learned from SIMNET and may be viewed as a set of rules and procedures used by real-time distributed simulations as defined in the IEEE 1278.1A standard. DIS was the first major attempt to standardize information exchange between simulation entities across an Internet Protocol (IP) network. Modeling and Simulation (M&S) Protocol Data Units (PDU) were successfully standardized using User Datagram Protocol (UDP) packets (reference [1]), but this approach unfortunately consumed considerable network bandwidth. DIS does not employ the client-server paradigm; therefore, DIS UDP PDU packets and entity (reference [2]) packets must be either broadcast or multicast. By design, most Wide Area Networks (WAN) networks are not broadcast-enabled in order to prevent broadcast storms and to conserve WAN bandwidth resources. Accordingly, broadcast DIS packets have tended to be more of a LAN solution. UDP multicast services can be thought as a transport level publish-and-subscribe mechanism. This mechanism is very desirable in the distributed M&S arena as a means to potentially conserve network bandwidth. However, implementing multicast routing is complicated: there are numerous protocols for accomplishing this type of routing; there are limits to the number of multicast groups in which a computer can participate, and it is quite difficult to enable multicasting to scale beyond the confines of a single large enterprise. As a result, considerable effort must be expended to create robust multicast solutions that operate across WAN environments and, sometimes, even within LAN environments.The inability for the DIS multicast publish-and-subscribe mechanism to adequately scale or to provide an infrastructure for constructive simulations is viewed by some to have set the stage for development of the High Level Architecture (HLA).  2.2 HLAThe HLA, as defined by IEEE 1516, has many of the constructive capabilities of the Aggregate Level Simulation Protocol (ALSP) plus the virtual and live capabilities of DIS. The HLA run-time infrastructure (RTI) uses an ambassador paradigm, allowing federates to either send or receive messages in real-time. HLA is certainly an improvement over DIS from a network perspective because it implements an application level publish-and-subscribe mechanism that is bandwidth frugal, unlike the DIS broadcast mechanism. HLA has customizable, network-enabled data blocks driven by object-oriented development techniques which are updated only as needed. This is a definite step up from DIS operation, in which all packet state information is updated for even a minor change in state. HLA time management also handles both real-time and discrete time simulations in either regulated or constrained modes of operation, unlike DIS. In an HLA federation, interoperability among federates is achieved by employing subscriptions to publications of object attributes and parameters through an RTI. A federate contains an RTI Ambassador and implements a Federate Ambassador.  The RTI Ambassador makes calls to RTI services; the Federate Ambassador receives notifications from the RTI. Publishers send attribute updates through the RTI Ambassador and subscribers receive notifications, either synchronous or asynchronous, through the Federate Ambassador via callbacks. Since HLA RTI publish-and-subscribe mechanisms are unique to each RTI implementation; "over the wire" interoperability is next to impossible to achieve, a distinct shortcoming. Because the HLA was not defined to be a protocol, it lacks the ability to provide true heterogeneous interconnectivity, i.e., a means to allow genetically independent code implementations (i.e., from different vendors) to interoperate over a wire. This leads to a number of operational shortcomings. As documented in the Lockheed Martin paper “Converging Distributed Modeling & Simulation with the Session Initiation Protocol,” earlier research with commercial protocols as applied to distributed M&S indicates that there is room for considerably more improvement than HLA has provided (reference [3]).  The inability of both DIS and HLA to scale while simultaneously enabling QoS and dynamic firewall traversal is due in large part to the fact that neither standard was originally designed to solve these problems since viable solutions did not exist when the standards were being defined.  A protocol created expressly for these purposes as well as a simulation infrastructure that has been architected to take full advantage of such a protocol can supply much needed capabilities to the distributed M&S community. This protocol is the Session Initiation Protocol, SIP.2.3 SIP – A New Approach to Managing Distributed M&S Resources  SIP, the Session Initiation Protocol, is a third generation open standard VoIP (Voice over IP) technology that builds upon the lessons learned from two previous generations VoIP technologies, H.323 (1st generation) and MGCP/MEGACO (2nd generation). SIP is not limited to providing voice services. It supplies the robust signaling services required by advanced voice, video, collaborative data networks and, quite possibly, the distributed M&S community.If an RTI were defined from real-time collaborative Web protocols using SIP at its core, several operational problems that plague the distributed M&S community could be mitigated:Cross vendor RTI interoperability issues are greatly reduced because Web technologies are designed and built to operate "over the wire" with products developed by different vendors.Infrastructure scalability and single point kill issues are significantly minimized since Web technologies emphasize decentralized control and extreme scalability. Dynamic firewall traversal is straightforward because SIP allows UDP packets to be associated with a session, and this session provides for authentication, authorization and accounting services, a requirement for enterprise firewall traversal.There have been a few attempts to define an RTI using Web protocols.  Probably the most thoroughly documented effort to Web-enable an RTI used the Simple Object Access Protocol (SOAP) (reference [4]) binding to BEEP (Blocks Extensible Exchange Protocol) (reference [5]) in accordance with the RFC 3288 Web standard. This effort is to be applauded, but BEEP is not as capable for this application as SIP. BEEP lacks the Telecom grade signaling sophistication and acceptance that SIP currently has, as evidenced by the following list of SIP signaling services:Simple and quick UDP signalingAbility to transport data using native UDP (unicast, multicast)Value-added intermediary services such as industrial strength proxy routing, firewall and redirect servicesSupport for numerous transport protocol mechanisms (UDP, TCP, TLS, SCTP)Support for hop-by-hop transitive trust secure protocols (TLS and SIPS)Support for end-to-end security S/MIME (secure MIME)Strong mobility services supportStrong uniform resource identifier (URI) location servicesTight integration with DNS ENUM services (translates telephone numbers to IP addresses)Call transfer capabilitiesPresence capabilitiesInternationalization These services are required by real world network applications such as military communications C4ISR networks and commercial Telecom networks.  With such strong built-in support, why should the distributed M&S community use different core communication protocols than those used by future war fighters and other real world systems, especially when the SIP protocol stack has a small computer memory footprint, thereby enabling developers in all domains to incorporate its power into their applications easily?   It takes a very short leap of faith to assume that weapon system and other product development and fielding cycles can be shortened significantly if real world protocols and distributed M&S protocols are the same. For these reasons and more, we believe that the SIP protocol, as defined by RFC 3261, is superior to BEEP as a long-term candidate for the task of Web-enabling an RTI, albeit a more challenging one initially to integrate. Like H.323 and BEEP, SIP is a peer-to-peer (P2P) technology. P2P technologies are more capable than client-server technologies because they make it possible for communicating endpoints to change roles on a transaction-by-transaction basis. This allows more robust behaviors to be expressed without the absolute necessity for intermediary servers that may sometimes cease to function reliably for a variety of reasons, ranging from operating system bugs or poorly timed/executed server upgrades to destruction by natural disaster or war. Robust, Web-enabled RTI implementations should be built from P2P technologies utilizing asynchronous messaging to optimize thread utilization. Both SIP and BEEP protocol stacks have P2P capabilities with asynchronous messaging; however, BEEP lacks the sophistication of the SIP concept of a dialog. The concept of a dialog describes the basic context for implementing session-based communication between distributed objects. A SIP dialog, e.g., “the telephone (or any communicating object’s) call state,” represents a P2P relationship between two SIP endpoints or “user agents” that persists for some time at the endpoints. The dialog facilitates the sequencing of messages between SIP user agent endpoints. It ensures the proper routing of requests and responses between endpoints by acting as an index for "route set" state information for source routing. It is by means of the SIP dialog that messages are interpreted by either stateful endpoints or stateful servers. SIP's dialog concept supports communication between two or more parties and can also control multiple channels of media between two or more communicating endpoints. All of these capabilities can be integrated into a software framework to produce an extremely rich semantic for establishing communication channels between simulation objects, as well as renegotiating and tearing down those same channels.Unlike BEEP, SIP logically separates the signaling control channel from the real-time channel it controls, the media channel.  This is extremely important to the distributed M&S community because it enforces the decoupling of data and control information, thus allowing signaling to be communicated in non real-time and data in real-time. Separating control information from raw data flow is, of course, a fundamental precept of good software engineering.  It is also an exceptionally powerful mechanism when applied to distributed M&S operation through use of a SIP-enabled RTI.SIP has exceptional signal routing capabilities due to the dialog concept and a number of additional intermediary services. Routing, redirection, firewall, accounting, session border controllers and other value-added intermediary services have been added to SIP and scaled for real-time networks with millions, potentially billions, of communicating endpoints (i.e., Telecom networks). Similar to HTTP and BEEP, SOAP functions on top of the SIP signaling channel to provide a commonly understood data exchange mechanism. SIP accomplishes this through the use of a header, similar to HTTP.  In this case, the SIP "Content-Type:" header field contains the "text/xml" MIME, indicating a specific type of data (i.e., XML). Better yet, however, for distributed M&S, SOAP should be bound to the UDP or TCP media (data) channel for real-time applications. Extra RTI SIP headers could be added to indicate the MIME type and encoding formats of media channel objects for the utmost in flexibility. Combining SIP signaling technology with a SOAP media channel is quite likely to become a revolutionary technology for business-to-business (B2B) automation because of the huge number of production-ready SIP intermediary services already available. SIP technology evolves from HTTP and SMTP. HTTP was built from patterns established through the development of SMTP technology. Like HTTP, SIP is a Request/Response messaging protocol.  Requests are issued by clients as methods.  Numerical responses are returned by a server in response to a request.  Interestingly, the SIP specification, RFC 3261, frequently refers to the HTTP specification, RFC 2616,  in providing direction on how to accomplish SIP tasks. Software developers with Web skills should therefore be able to pick up SIP development skills very quickly.Within the next five to ten years, SIP networks will almost completely replace the Telecom voice and video services rendered by legacy public switched telephone networks (PSTN) as we know them today. The pervasiveness of this technology makes a strong business case for converging SIP technology with distributed M&S RTIs. Furthermore, sharing RTI and SIP server infrastructures can provide significant cost savings over the long term. SIP P2P user agent technology will also allow the addition of robust, open standards-based, collaborative capabilities to be built on top of SIP-enabled RTIs, a fact which will be very important in supporting DoD network centric operations (NCO) efforts. This will further blur the distinction between what is constructive, virtual and live.3. A SIP-enabled Web RTIAs discussed in the previous section, a Web-enabled RTI will offer capabilities important to distributed M&S that traditional HLA RTIs can not: alleviation of cross vendor interoperability problems, inability of the simulation infrastructure to scale adequately to support a large number of federates, single point network kills and dynamic real-time firewall traversal. It will be extremely important for Web-enabled RTIs to emphasize "over the wire" interoperability to maximize the collaborative experience of end-users. It is especially important for this interoperability to be ensured for a distributed M&S publish-and-subscribe mechanism. In the short term, it will also be critical for any Web-enabled RTI to conform to the HLA Interface Specification to provide a migration path for existing HLA deployments. For the longer term, it will be essential to standardize the interfaces and mechanisms for the newer services a SIP Web-enabled RTI will provide.A SIP-enabled RTI should not follow the poor design of older RTI implementations. Certain systems (e.g., simulation endpoints or objects) not operating properly in a distributed environment should not prohibit a simulation exercise from progressing in the real world. Single point kills should not prohibit Web RTI communication from continuing. Using SIP URI addressing mechanisms between Web-enabled RTI endpoints will promote decentralized RTI capabilities. Such RTIs will therefore be much more impervious to failure.More emphasis must be placed on federate communication using Web addressing mechanisms directly: URLs, URIs and AORs (Address of Record), albeit through a Web-enabled RTI. URIs are the lifeblood of the Web because they allow resources to have network enabled addresses that facilitate the establishment of communication. Email URIs currently allow enterprise resources to be reached safely with a push mechanism. Think of SIP as a real-time email signaling mechanism for P2P applications that is intended also to control real-time media streams.  SIP resources use URIs that look like a hybrid of email and HTTP. From a networking perspective, the differences between real-time media streams and a real-time distributed object streams are negligible. For more detail about how SIP implements the URI to provide a robust means of locating entities and a method to interface to those entities, refer to “Converging Distributed Modeling & Simulation with the Session Initiation Protocol”; L. Scott Holben; Summer Computer Simulation Conference; July, 2003, reference [3].A URI hides the true identity of Web resources such as intellectual property behind firewalls yet allows those resources to be accessible, in secure fashion, from an untrusted location. This capability will allow companies to protect proprietary data while safely participating in distributed M&S government and business-to-business opportunities.  To illustrate, assume the case in which there is a need to create a federation across multiple security domains. With many existing RTIs, this is so cumbersome as to be impractical or impossible to implement.  A stressing or worst case scenario might be that each federate must cross its own internal firewall to communicate with external federates and that the external federation executive has its own firewall as well.  Using SIP, this situation can be executed straightforwardly.  The following paragraphs describe the communication sequence that would occur between one federate in this example and the federation executive using SIP URIs.  Each federate in the federation will repeat the communication process of this first federate, potentially in parallel with the first federate. The RTI federation executive is the first process to execute. When it does, it will use a SIP REGISTER method so that the SIP location database will be populated with the federation executive's current URI.  As other federates (i.e., SIP user agent clients) are instantiated, they will try first to register their contact information with the REGISTER method, then to reach the federation executive using another SIP method, INVITE.  The first federate’s SIP user agent will forward its SIP INVITE connection request to a server that handles routing, the SIP egress proxy server, which will immediately recognize the destination URI as being in a different domain (e.g., lmco.com vs. af.mil).  If the SIP egress proxy server is stateful, it will immediately return a 100 "Trying" response message back to the user agent to prevent it from timing-out and retransmitting new INVITE requests.  The egress SIP proxy server will then consult a DNS server to look up an SRV (service record) in order to reach the remote proxy that should contain information for the actual location of the federation executive. DNS SRV records perform the same function as email MX (mail exchanger) records, but SRV records are generalized for more protocols and services than email. Each SIP egress proxy has a pre-established trust relationship with each federate’s enterprise internal firewall boundaries. Two-tier firewalls may be deployed at each firewall boundary, e.g., protocol/transport level routing firewalls and session/application level firewalls. SIP Telecom session/application firewalls are often referred to as B2BUAs (Back-to-Back User Agents) or SBCs (Session Border Controllers).  The firewalls scrub outgoing SIP signaling headers and the associated SDP (Session Description Protocol) bodies contained in SIP messages to prevent internal IP addresses from being compromised.  The firewalls also scrub incoming SIP requests or incoming SIP response messages.  Firewalls perform their stateful data protection roles by using the dialog associated with a SIP session to index the session state in order to determine the legitimacy of the message trying to cross the firewall.To continue the communication sequence example, the calling federate's INVITE message moves from the egress proxy through its domain's two-tier firewall into the federation executive’s two-tier firewall.  If the federate’s INVITE headers are malformed, the federation executive's firewall reformats these headers and then relays the reconstituted INVITE request to the SIP proxy of the protected domain.  The INVITE request arrives at the executive's SIP user agent server component, which will then send a 180 "Ringing" response that works its way back across the proxies and firewalls to the calling federate SIP user agent. This response takes the same path as the INVITE request but in the opposite direction.When the federation executive user agent server has had enough time to build its dialog to establish a session (the equivalent of lifting a telephone from the hook after it rings, around 20-40 milliseconds of time), it responds back to the INVITE request with a 200 "OK" response. The 200 "OK" response will take the same signaling pathway as the 180 "Ringing" response.   The federate user agent client will then send a SIP ACK (acknowledge) message back to the federation executive's user agent server to finish the three-way handshake of the INVITE transaction.  A three-way handshake transaction is always used for an INVITE transaction because the amount of time required to establish a session can be substantial with humans in the loop.  Subsequent transactions in the same call can execute much faster because the remote endpoint has been previously located and the routing pathways can be looked up easily, given the existing dialog.The ACK pathway would normally be sent directly between the two user agents but because firewalls and SIP proxies are persistent intermediaries, the effective SIP "route set" forces the ACK across the same proxies and firewalls.  The SIP "route set" used for SIP "source routing” was lengthened because the SIP proxy servers inserted the "Record-Route" header into the SIP signaling messages. Once a full session is established across firewalls by completion of the three-way handshake between the federate user agent and the federation executive user agent, dynamically negotiated media channels, i.e., UDP and/or TCP pinholes, are opened by the firewalls to allow real-time communication to proceed for the duration of the session between the two user agents.  The details about the pinholed transport protocol types and port numbers were negotiated by the SIP Session Description Protocol (SDP) messages passed within the SIP message bodies of the three-way handshake. This is how SIP enables data streams to cross firewalls in real-time.This example should make it clear to network security experts that SIP signaling can be made to cross controlled interfaces to Type I encryption devices.  In this manner, communication between trusted endpoints is facilitated in a virtual private network (VPN) environment to create dynamic overlays that connect enclaves together. It is also technically possible to adapt SIP VoIP proxy server technology to develop session-level authentication, authorization and accounting records that meet NISPOM receipt dispatch record requirements 5-202 a-e. See reference [6].  The SIP signaling described in this example enables a well-behaved federation to execute across multiple firewalls, but what about the many cases that are not this well-behaved?  As a commercial protocol, SIP was designed to be extremely fault tolerant, primarily because its URI responses have industrial strength exception handling capabilities. When exceptions occur, these responses will aid distributed M&S efforts operating in complex network environments. Following are several examples of SIP’s exception handling strength.What would happen if the federation executive were statically provisioned in a location database, bypassing the need to issue a REGISTER method, and someone forgot to begin federation execution, the telephone equivalent of having a phone number but not having a phone connected to the network? Each federate would receive a SIP 480 "Temporarily Unavailable" response from the federation executive's egress SIP proxy server.What would happen if a federate had a non-existent URI, the telephone equivalent of dialing a number that does not exist? Each federate would receive a SIP 404 "Not Found" from a SIP proxy server servicing the domain of the URI, analogous to the HTTP 404.What would happen if the federation executive's SIP proxy had a policy set to authenticate a caller before allowing the call to complete in order to prevent SIP SPAM or to control access? Each federate would be sent a 407 "Proxy Authenticate Required" response with a randomly generated challenge (to require the federate to prove its identity). The federate would then have to resend its INVITE message with the correct hashed credentials built from a shared secret (user name, password, realm) in order for the call to be completed. SIP supports the same "zero knowledge proof" authentication mechanism that HTTP uses. What would happen if the federation executive had no more resources, the telephone equivalent of dialing a busy line? Each federate would receive a 486 "Busy Here" from the federation executive itself. What would happen if a federate were preempted by more important demands before an existing three-way handshake INVITE transaction could be completed? The federate would issue a CANCEL method and the original INVITE to the federation executive would then be terminated with a 487. What would happen if a payment were required for using the distributed M&S resource? This is the equivalent of requiring a long distance phone card number. Nothing prohibits a federate executive from calling each federate in order to create a federation execution.  The federation executive sending the INVITE messages or the user agents requiring class or value based information subscription information would receive SIP 402 "Payment Required" from the SIP proxy servers of the federates requiring payments. These are only a few scenarios that demonstrate the robustness of existing SIP exception responses and the value of the SIP proxy services already developed by the Telecom industry.  The telephone connectivity analogies may be helpful to those who operate distributed simulations but who are unfamiliar with network communication theory and trying to troubleshoot operational problems. The HLA ambassador mechanism currently supports only one channel of communication for each federate (reference [7]).  URIs and P2P SIP user agent technology enable many sessions to be associated with a given federate. Multiple sessions per federate make it possible for ownership of objects and attributes to be acquired or divested with SIP call transfer technology using the SIP REFER method (reference [8]). Multiple sessions also allow different media transportation mechanisms (UDP, UDPS, TCP and TLS) to be used simultaneously; hence, time sensitive distributed object data can be transported within a UDP-based media channel while reliability sensitive distributed object data can be transported within a TCP-based media channel.SIP URIs could also be used by federates to establish direct, static, publish-and-subscribe routing pathways for "class-based filtering" during the declaration management phase of federation execution using the RTI. Indirect, dynamic, publish-and-subscribe routing pathways could be established between federates and the federation executive to support DDM (Data Distribution Management) or “value-based filtering.”  A specialized user agent, having media channel B2BUA capabilities, to support one or more routing spaces if necessary, could implement the DDM services. Finally, we will examine how SIP can improve the inventory process for FOM and SOM resources. The HLA OMT (Object Management Template) developers tend to consolidate RTI intelligence into a centralized repository. SIP, in contrast, is a Web technology and consequently adheres to the philosophy of decentralized operation. To maximize secure operation, this is likely also to be the manner in which future C4ISR networks will function. It is commonly acknowledged that the power of a network belongs at its edge, not in the core. How does one go about placing the power at the network edge yet still allow for centralized knowledge management of the URI resources of SIP federates? The paradigm of the Web is to move statefulness from the network core to the endpoints themselves. This can be accomplished if endpoints negotiate their protocol interface capabilities, similar to the SMTP model. However, the process of moving statefulness to the network edge does not prohibit URI resources from being centralized in a repository. For example, a SIP indexing spider could populate a distributed M&S interface repository if the spider had a list of URIs pointing to warm and persistent user agent-based federates and federation executives. The querying of the user agents by the spider with the SIP OPTIONS method would allow the spider to find URLs pointing to the user agents’ FOM or SOM. Unfortunately, SIP spiders and index engines do not yet exist, so in their absence, federation pre-signaling exercises could still be performed in somewhat automated fashion. These exercises would be performed by federation participants using the SIP OPTIONS method. Pre-signaling with the OPTIONS method allows a user agent to confirm that its peer supports the same interfaces. To further expand the pre-signaling exercise capability, new Web-enabled RTI headers could be added to response messages stimulated by the SIP OPTIONS request methods.  These headers would contain HTTP URLs pointing to XML-based SOM or FOM tables (e.g., class structure table, attribute table, object interaction table, parameter table, etc). If the HTTP URLs belong to a certifier's site, then one could be assured that the federate’s SOM or FOM has passed compliance certification. The utility of a SIP spider can provide other pre-exercise assistance services which are not currently offered by DIS or HLA. There are three SIP headers that support extensions: ACCEPT, ALLOW and SUPPORTED. These text headers enable SIP elements to negotiate the use of extended services that are not part of the core SIP protocol, either explicitly with an OPTIONS method query, or more efficiently, by offering information as part of other transactions (reference [3]). Services provided through extension of the protocol would enable the SIP spider to gather cost or other quality metrics for database indexing. This in turn could allow an LP (Linear Predictor) to find a least cost group of federates for performing distributed modeling and simulation studies or analyses. The same LP process could also apply to meeting real-world objectives with real resources. The LP becomes an important tool once the number of federates performing a similar task becomes large.Presence is another service that could be very useful to distributed M&S operations. Presence is generally considered to be the ability and willingness to communicate (of a person or object) and is often coupled with instant messaging capabilities. The Telecom community has developed this service; hence, there is no need to re-invent this capability for distributed M&S application. There is a SIP presence and instant messaging standard called SIMPLE (SIP Instant Messaging and Presence Leveraging Extensions). Combining SIMPLE technology with distributed M&S will definitely create new and extremely practical capabilities. Presence could make the task of building ad hoc federations much easier by minimizing “telephone tag” overhead. It could also facilitate, relatively inexpensively, the ability to conduct classified conference calls, something currently unsupported by STEs (secure telephone equipment). Combining user agent presence with scheduling capabilities could accelerate the operational responsiveness of a “persistently available B2B network" for modeling and simulation.4. OSA: Integrating SIP into a Distributed Event-Driven Simulation FrameworkDuring the last three years, a Lockheed Martin Aeronautics Advanced Development Programs (ADP) Operations Analysis team in Marietta, Georgia, has experimented with incorporating SIP technology into a simulation framework.  This work was accomplished under the Integrated Warfare Analysis Center (IWAC) Information Technology project and is ongoing within ADP. See Reference [3].The distributed M&S seven layer architectural model documented by Douglas C. Schmidt (reference [9]) was chosen as the most suitable for use under the IWAC project.  The following is a brief description of the seven-layer model (not to be confused with the ISO seven-layer model):Hardware devices - simulations run on hardwareOperating systems and protocols - e.g., Linux, Microsoft operating systems and the IETF defined protocol standardsInfrastructure middleware - encapsulates core OS communication and concurrency services; purpose is to eliminate many of the tedious, error-inducing and non-portable aspects of developing and maintaining distributed applications via low-level network programming mechanisms such as sockets, e.g., the Java™ Virtual Machine (JVM)Distributed middleware – traditionally, the Object Management Group’s (OMG) Common Object Request Broker Architecture (CORBA™), Microsoft's Distributed Component Object Model (DCOM™) or SUN's Java™ Remote Method Invocation (RMI™)Common middleware services - time stepping, publish-and-subscribe event notification, logging, persistence, transactions, distributed concurrency control, multimedia streaming, security, fault toleranceDomain specific services – vertical engineering analysis software components which typically run standalone for 1-versus-1 analysis.  These calculation engines, e.g., aircraft flight dynamics calculations, are frequently incorporated into larger aggregated environments.  Domain specific services are of considerable value for virtual and live simulations if they run faster than real time.  However, if these “engineering” models do not run faster than real time, the results of hundreds or thousands of runs can be represented by a simplified model that can run in real time.  Domain specific services are frequently built into standalone applications for analysis purposes and to provide working examples of interfaces, demonstrating how larger simulations may import the engine’s behavioral services.Applications – simulations that may utilize the services of tens, if not hundreds or thousands, of domain specific calculation engines for many-versus-many analysis.  Entity aggregation techniques are frequently employed to speed the process of building application scenarios with, e.g., specific Orders of Battle which can also define nominal aggregate battlefield doctrine and tactics executed by simulation entities/participants during runtime.  The simulation instantiation process disaggregates the aggregated entities into individual entities, which are explicitly modeled in the simulation.  During runtime, individual entity state information is aggregated to the appropriate levels for presentation purposes.  Constructive simulation applications may execute numerous Monte Carlo runs to perform cost effective parameter sensitivity studies.  The aggregate virtual or live simulations must execute at least partially in real time because of the inclusion of human interactions.     It is at layers 2, 3, 4 and 5 that SIP technologies can be integrated into a simulation framework.  Under the IWAC project, we have experimented with integrating the Java™ Application Programming Interface (API) for Integrated Networks (JAIN™) and the Java™ Media Framework (JMF™) into layers 3, 4 and 5.Fully integrating SIP technology with a distributed simulation framework may entail extending the protocol itself.  To date, under the IWAC project, there has been no need to extend SIP itself, but minor modifications have been made to the SDP data carried within SIP message bodies to accommodate a TCP-based media channel for sharing distributed objects.  However, should the need arise, extensions to SIP will be made to Layer 2 using the JAIN-SIP stack. JAIN-SIP is a Layer 2 interface, which integrates into the Layer 3 JVM environment, providing SIP protocol stack services.  The SIP stack enables the transmission and reception of SIP messages across a network.  Layers 4 and 5 are where the most potential lies for the distributed M&S community.  Layer 4 utilizes the JVM, which provides a development and runtime environment that is machine independent.  Layer 5 supplies the interfaces providing common services required by developers in the distributed M&S community. Recent research into creating a SIP-enabled RTI indicates that SIP header extensions are likely to be required.  These extensions will be made using JAIN-SIP.Integrating SIP with distributed M&S technology has enabled new capabilities to be integrated into the Object Services Architecture (OSA).  OSA is a Lockheed Martin Aeronautics Java-based, dynamically linked, event driven, multithreaded Distributed Object Computing (DOC) framework with Monte Carlo capabilities, all of which are integrated with SIP technologies.  The developer’s interface to OSA’s DOC framework exists at Layer 5.  The OSA framework uses Java™ and SIP in order to render many of its services.  OSA will offer HLA-like capabilities such as: Federation Management, Declaration Management, Object Management, Ownership Management, Time Management and Data Distribution Management.  The difference is that the SIP implementation will be much more scalable, able to traverse firewalls dynamically, provide superior network performance (QoS) and greatly enhance the integration of real world components such as cell phones, future UHF/VHF radios and other real world systems into a distributed simulation environment.Object Management within OSA utilizes the user agent media channel. Over time, OSA will implement RTI interfaces built on top of a SIP foundation. Federation Management within OSA will be realized using URIs.  Declaration Management will be implemented using XML Web technologies and URIs. OSA will use the JAIN-SIP technology to implement Ownership Management services by employing the SIP REFER Session Mobility method to transfer ownership of object attributes. Within OSA, Time Management services will utilize the Network Time Protocol (NTP) with Java™ interfaces.  Data Distribution Management will be implemented with SIP B2BUA technology.5. ConclusionThe distributed M&S community today, limited by the services available in HLA or DIS, lacks the signaling rigor common in the telecommunications industry to enable robust scalable communication. As described in this paper, our research takes advantage of the Telecom industry’s extensive design, development and deployment experience with SIP VoIP technology and applies it to improve the art and science of distributed M&S.  (Reference [3]).Much of the effort in developing the Object Services Architecture has focused on the appropriate integration of SIP transaction processing with an event driven simulation and the determination of which simulation exercise life cycle phases are suitable for synchronous and/or asynchronous communication.  We have implemented distributed M&S scenarios using the media channel for rendering publish-and-subscribe and association services. Also, by clicking on a 3-D graphical icon in an OSA simulation, we can establish communication between the simulation participant clicking the icon and the human represented by that icon. This is because the icon has an associated SIP URI which is, in essence, a telephone number used to reach the remote party. Much of our future OSA experimentation and interoperability testing will target the development of user agent behaviors that interoperate with SIP telecom components in order to demonstrate compliance with the RFC 3261 SIP standard while maintaining relevance to the distributed M&S community.Our research and experimentation with integrating SIP technology with OSA distributed M&S technology is an ongoing effort.  This exploration has resulted in our defining a new class of SIP user agents we call the Modeling and Simulation User Agent, (MSUA).  With the use of object oriented languages such as Java™, the behaviors of these specialized user agents can be easily inherited and abstracted to hide complexities associated with robust SIP Telecom signaling.  The distributed M&S community can then easily integrate MSUA transactional behaviors into event-driven simulations for use.Converging and standardizing distributed M&S interfaces with real world telephony technology will add value by dramatically increasing the size of the useful network available to the M&S community and by further blurring the distinction between what is constructive, virtual and live.  6. References[1]  HYPERLINK "http://www.sisostds.org/dis-dd/entity/index.htm" http://www.sisostds.org/dis-dd/entity/index.htm.[2]  HYPERLINK "http://www.sisostds.org/dis-dd/entity/index.htm" http://www.sisostds.org/dis-dd/entity/index.htm. [3] “Converging Distributed Modeling & Simulation with the Session Initiation Protocol”; L. Scott Holben; Summer Computer Simulation Conference; July, 2003.[4]  HYPERLINK "http://www.w3.org/TR/soap/" http://www.w3.org/TR/soap/.[5]  HYPERLINK "http://www.ietf.org/rfc/rfc3080.txt" http://www.ietf.org/rfc/rfc3080.txt and  HYPERLINK "http://www.cisco.com/en/US/about/ac123/ac147/ac174/ac179/about_cisco_ipj_archive_article_list.html" http://www.cisco.com/en/US/about/ac123/ac147/ac174/ac179/about_cisco_ipj_archive_article_list.html.[6] NISPOM Chapter 5, http://www.dss.mil/isec/ch5-2.htm.[7] HLA Performance Measurement", Ivan Chang Kok Ping, Naval Postgraduate School Thesis, March 2000, p. 11.[8] http://www.ietf.org/rfc/rfc3515.txt.[9] D. Schmidt, V. Kachroo, Y. Krishnamurthy, F. Kuhns, "Developing Next-Generation Distributed Applications with QoS-Enabled DPE Middleware", IEEE Communications Magazine, Oct. 2000.Author BiographiesL. SCOTT HOLBEN is an Operations Research Analyst for Advanced Development Programs at Lockheed Martin Aeronautics in Marietta, GA. Scott currently manages the Integrated Warfare Analysis Center (IWAC) project which investigates innovative applications of VoIP technologies for collaboration and distributed M&S over warm persistent networks.   He is also defining network configurations and management processes that will enable secure collaboration in a distributed, multi-company environment under the Air Force Materiel Command’s Accelerated Capabilities Development and Delivery (ACD&D) program.ROBERT W. JOHNSON is an Operations Research Software Architect and Project Manager for Advanced Development Programs at Lockheed Martin Aeronautics in Marietta, GA. Bob develops M&S tools and simulation frameworks to support system of systems analysis, military operations research, collaborative tool environments, and distributed software architecture and applications development. He is the primary architect of the Object Services Architecture (OSA) simulation framework.MARGARET HERALD is an Operations Research  Systems and Software Engineer for Advanced Development Programs at Lockheed Martin Aeronautics in Marietta, GA.  Margaret is the Lockheed Martin Program Manager for the Air Force Materiel Command’s Accelerated Capabilities Development and Delivery (ACD&D) program, a cooperative venture between the USAF and major defense contractors.  ACD&D is defining and implementing enterprise-wide solutions to enable secure, persistent collaboration in a distributed environment of multiple industry members and the Air Force to support the capabilities-based acquisition of systems of systems.PAGE  