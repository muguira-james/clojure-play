Using COM to Facilitate Simulation Development and ExtensibilityCurt RuffingTeledyne Brown Engineering Company300 Sparkman Drive, MS 170Huntsville, AL 35805256-726-1602curt.ruffing@tbe.comKeywords:Component Object Model, Reusable Components, COM.ABSTRACT: The Advanced Subsystem, Element, and Systems Simulation (ASESS) provides a user configurable simulation framework consisting of reusable model components inter-operating in a building block architecture. ASESS focuses on defense system modeling including space, air, and missile defense assets at multiple degrees of fidelity. Implemented in C++, the object-oriented architecture allows rapid enhancement through the inclusion of new models. New models can be incorporated quickly, without disrupting the existing structure, allowing the model set to evolve in close conjunction with a maturing system definition. However, while C++ facilitates the development of reusable, modular source code, it is not intended to provide a way to build reusable binary components. This paper discusses using the Microsoft® Component Object Model (COM) technologies to aid simulation development. We discuss using COM to develop a simulation framework that can be upgraded and extended without recompiling the fundamental application. We also discuss how ASESS takes advantage of several off-the-shelf components including an eXtensible Markup Language (XML) parser, a charting tool, and a mapping tool. Using commercially available components reduced development time and allowed the ASESS developers to focus on the unique aspects of the simulation. ASESS serves as an example of using COM to add features and extensibility to a simulation while simultaneously reducing development time.1. IntroductionThe Advanced Sub-system, Element, and System Simulation (ASESS) was developed to be a highly configurable and dynamic simulation tool that could be used to perform analysis of both existing and future architectures. To produce an architecture that is easily modified, extended, and maintained an object-oriented design was developed and implemented in C++. Additional, it was hoped that the models developed for this framework could be easily reused in other applications. Unfortunately, software reuse in C++ is not always simple, despite the object-oriented nature of the language. One difficulty lies in the fact that most C++ libraries are intended for use as source code, rather than in compiled form. Unfortunately, it is often necessary to rely on implementation details of the source code library for reuse. Worse, it is often tempting or necessary to modify the original source code, raising a host of simulation validation issues. Also, if the library is not written in the same language you are using, additional integration effort is required. These issues, coupled with the reluctance of companies to release their products source code, makes it difficult to find a library that does exactly what you want.The simplicity of modifying and enhancing software provided by the object-oriented structure of C++ refers to compile time modifications. If a program is shipped as a monolithic binary file, regardless of how a easy it is to create and integrate new classes, the application sitting on a users machine can not be changed without recompiling and shipping a new version. A more powerful paradigm for modifying and enhancing software would provide a way to improve and add functionality to an application without requiring the developer to create and distribute a new version of the application.The software community has embraced a number of component technologies including the Microsoft Component Object Model (COM), the Common Object Request Broker Architecture (CORBA), and JavaBeans. Using these technologies, we no longer have a monolithic application, but rather a set of components that are connected at run time to achieve the functionality of the application. The High Level Architecture (HLA) can also be considered a component technology. It allows the assembly of an application (federation) from a set of components (federates) at run time. These various component technologies provide a host of other benefits such as facilitating distributed computing, versioning of software, and visual programming techniques. Although this paper focuses on COM technologies other component-based techniques could be used to achieve the same results.2. Extensible ArchitectureThe ASESS framework was designed to support re-configurability.  The design resulted from a requirement to model missile flight and to create flyout tables, while allowing the user to select from a set of simulation components during execution.  An example component of the simulation is an earth model.  Multiple earth models were developed and the user has the capability to select which model to use at run-time.  This capability allows the user to compare the results generated using the various models to determine the impact of each model selection on the estimation of the missile’s flight envelope.Early in the design phase, a decision was made to incorporate the user-selectable simulation component functionality throughout the entire simulation structure.  This created an entirely re-configurable simulation and led to the definition of the ASESS framework (Hill).A typical object-oriented framework is made up of a set of classes. A developer customizes the framework by sub-classing and composing instances of framework classes (Gamma). Ideally the classes produced for a particular framework would be encapsulated and reusable in multiple applications. Adopting a COM structure can help achieve and exceed the level of customizability and reuse obtained through traditional object oriented programming.3. Algorithm ComponentsComponents can range in complexity from an entire simulation to an individual algorithm. The different levels of component complexity require different integration approaches and possibly different component architectures. Statistical distribution models are used in the ASESS framework to obtain a random draw from a particular distribution such as Uniform, Poisson or Gaussian. Such a low level, algorithmic, component works well in the COM architecture where in-process instantiation provides minimal performance degradation compared to static linking. However, COM does not address issues such a time management or model fidelity, required for the interoperability of higher-level simulation entities. More complex components, or components with more complex interactions, are probably better suited to a component technology with a more specific focus such as an HLA framework.  The COM specification describes the standards of what COM objects should look like and how they should behave. In addition to these standards the COM library, which is part of the operating system for Win32 platforms and available as a separate package for other operating systems, provides a set of services or Application Programmer Interfaces (APIs) for finding and using components.COM components are binary executable code and can be packaged either as dynamic link libraries or as executables. Instances of COM components are objects in the object-oriented sense of having identity, state and behavior.  In the case of distribution components, suppose, at the time of the first release, we only saw the need for models to produce Uniform and Gaussian distributions. To allow for future enhancements an abstract interface for distribution models is defined. Then, the Uniform and Gaussian distribution components, which implement this interface, are created. COM defines standard ways of locating components and identifying their functionality through component categories. Individual components can be added or replaced on a system and discovered by an application without changes to the client application. Because the distribution interface was known when the application was developed, the application can use the Uniform and Gaussian distribution components when they are installed. As users require other distribution models, components implementing these new models, using the defined interface, are created and distributed without changing the primary application. Also, as the existing models are improved new component versions can be shipped to the user, again without changing the primary application. The ability to replace one component with another, implementing the same interface, opens up numerous possibilities. An existing distribution component can be replaced by a new component designed to communicate with a remotely located component. Thus, a program can be converted from a standalone application to a distributed application by changing the components it uses. The COM library assists in developing this typed of distributed components by providing communication mechanisms that facilitate developing components that interact across a network.COM is a binary standard, so any language that can cope with the binary standard can create or use COM objects. Therefore, the developers of future components can use any language. Additionally, the realm in which the components can be reused is much broader than if they existed only as C++ source. The ability to update the components available to an application after the program is in use benefits both users and developers. Users gain an application that can evolve gracefully to meet changing needs. And developers, free from the need to satisfy anticipated needs of the user community in a static release, have a mechanism for accommodating user desires as they emerge.3. COTS ComponentsThe ASESS project has achieved significant savings through is use of COTS components. ASESS uses third party components for its charting and mapping features and an XML parser component as part of its input utilities.These components were inexpensive and contain far more functionality than our development team would have been able to incorporate in a custom built solution. Further the amount of source code dedicated to integrating the components is minimal. So, if it became advantageous to use a different component for one of these features, the time required to make the change would be minimal.As an example, the charting capabilities in ASESS use the Chart FX component which cost $425 and took about two man weeks integrate.  To develop the equivalent functionality in ASESS from scratch would take an estimated three to four man months.  In addition to the time and cost savings, using COTS components freed development resources to concentrate on the simulation algorithms which constitute the genuine value of ASESS and represent the best use of our development teams expertise. 4. ConclusionNew standards such as the Simple Object Access Protocol (SOAP) will enable simulation to use components developed under different component architectures. This capability, combined with the language independence of COM, allows development teams to choose the languages and tools best suited to their problem domain. Similarly, the language or architecture in which the component was developed does not limit the domain in which it can be reused.  The component marketplace continues to grow and more components relevant to developing simulations will become available in the future. Access to these components will allow developers to create feature-rich simulations without being distracted from the unique goals for the application they are developing. Users of simulation developed based on component technologies can use new components to customize the simulation in ways the original developers may not have been able to anticipate.5. ReferencesHill C.: “HLA Implementation to Support Multiple FOMs" Simulation Interoperability Workshop, March 14-19, 1999.Gamma, E., Helm, R., Johnson, R., and Vlissides, J.: Design Patterns and Elements of Reusable Object Oriented Software, Addison Wesley Publishing Company, 1995.Author BiographiesCURT RUFFING is a Programmer Analyst in the Modeling, Simulation, and Engineering Analysis (MSEA) group at Teledyne Brown Engineering. He graduated from the University of Maine with a BS in Engineering Physics and currently supports simulation development activities.