Rapid Generation of Simulation Scenario ContextDavid MacannucoDeborah WilberChris YoungLockheed Martin Simulation Training and SupportAdvanced Simulation Center164 Middlesex TurnpikeBurlington, MA 10890 HYPERLINK "mailto:David.j.macannuco@lmco.com" david.j.macannuco@lmco.com HYPERLINK "mailto:Deborah.wilbert@lmco.com" Deborah.wilbert@lmco.com HYPERLINK "mailto:Christopher.a.young@lmco.com" Christopher.a.young@lmco.comKeywords: Scenario Generation, MSDL, OntologiesAbstract:  The time consuming and difficult process of developing military simulation scenarios limits the usefulness of simulation for mission rehearsal, course of action analysis, and other operational applications.  There are two useful fronts to attack this problem; standardization of C2 and simulation system data exchange and improved simulation technology.  The SISO Coalition Battle Management Language Study Group and the Military Scenario Definition Language Study Group are two important efforts on the standardization front.   While our efforts have not ignored data standardization, we have focused on improving our simulation technology, by developing techniques to automatically generate scenario context data based on the terrain and situational considerations.  Scenario context is akin to extras in a movie, where it adds a realistic aspect of civilian life to the background of the scenario.  While it may not be the main focus of the overall scenario and the specific actions or timing of the context is not critical to the actions of the main actors, the scenario context must act in a reasonable fashion at both the individual and aggregate level.  In this paper, we describe our work in leveraging our scenario context simulation technology, CultureSim, to automatically generate context-specific scenarios, while ensuring that the underlying technology is applicable to other simulation systems.IntroductionThe use of military simulation is seen as critical for the development and operation of future military systems.  However, the use of simulation is severely limited by a dearth of readily available scenarios and the inability to create new scenarios quickly. Unfortunately, the generation of scenarios for military simulations continues to be a difficult and expensive proposition. Without the means to quickly generate scenarios, the potential utility of simulations is compromised,  particularly in operational domains where rapid response is critical.   Several factors contribute to the current problem.  Scenario development is expensive. Current techniques for scenario generation are extremely labor intensive, often requiring manual adjustments to data from numerous sources to support increasingly complex simulations.  Standard scenario representations do not exist.  The lack of scenario standardization means that scenarios must be developed separately for each application in the overall simulation system. This also precludes the construction of a repository of reusable scenarios, requiring instead the redevelopment of the same scenario for different simulation systems.   Simulations are not perfectly reliable.  It is likely that a new scenario of any complexity will exercise the simulation in a unique way that has never been tested.  Therefore one must test and revise a scenario to ensure that the simulation operates properly and that the specific requirements of the scenario are met.Scenarios are specific.  In our experience, scenarios must be tailored to achieve a particular training or experiment objective.  For example, in order to train air traffic controllers to handle situations where aircraft are dangerously close, the scenario must place the aircraft accordingly.  Standards ActivitiesSISO supports activities that are addressing the lack of scenario standardization.  The SISO Military Scenario Definition Language (MSDL) Study Group is working towards standardizing a representation for scenarios [3].  Different simulation software packages use different representations and optimizations, so developing a common format that could be used internally by all simulations will not be possible. There is, however, a significant overlap of many key concepts in all military combat simulations.  The best first step towards allowing simulations to correctly interpret the data of a standardized external representation is to standardize the meaning of the underlying concepts in an  ontology. Some of the information needed by military simulations has already been identified in the context of operational data models, such as the Joint Common Database (JCDB) and the C2IEDM[4]. Additional information relevant only to simulations (such as the representation of future events or simulation configuration data) needs to be identified. If MSDL can capture all this information in an extensible framework that  providesthat provides the ability to add simulation-specific data, it will become a powerful standard. Ideally, MSDL would provide this information in a standard ontological language, such as OWL, to empower applications which incorporate intelligent agents or other semantics-based technologies. UnfortunatelyHowever, such a standard is not on the near horizon, particularly in areas outside the core of military operations.While one goal of standardization is to enable the creation of a repository of baseline scenarios, another is to allow the rapid initialization of scenarios for ongoing operations. Ideally, simulations could simply import the current military state using actual C2 data items, such as air tasking orders (ATOs).  Certainly, specific examples of this capability exist for various simulations, such as JSAF’s ability to import ATOs.  The SISO Coalition Battle Management Language Study Group is performing important work to establish standards that will enable wider adoption of this capability.  [references5]  Whether the primary entities of a scenario are defined in a repository or imported from actual operations, they need to be augmented with scenario context – secondary entities which provide a realistic backdrop for the primary entities, particularly in urban settings. Indeed, these “extras” often form the bulk of entities in an exercise. Thus, it is particularly important that these secondary entities be initialized in an efficient manner.CultureSim ([formerly called ClutterSim,)  see ref][1] is a simulation which provides this sort of scenario context. With the need for rapid scenario development in mind, the scenario input requirements were designed to be significantly less complicated than for primary entities. However, a good deal of investment can still be required to initialize realistic scenario context, involving knowledge of both population data and local culture.Our goal was to optimize the initialization of scenario context, both now and in the future. To that end, we captured the existing CultureSim scenario initialization data requirements in an OWL ontology, with a view towards supporting any standard representation of scenario context which may be developed in the future. If such a standard is developed, predefined scenario context could be stored in a repository, either as part of larger scenarios incorporating primary entity definitions, or as a key component in a composable approach. Predefined scenario context could be incorporated as part of the tailoring process or used to augment scenarios which are initialized by importing operational contexts. To address the immediate requirement for rapid scenario generation, we focused our efforts on improving our simulation technology to automate the process of scenario generation. The result is the automated scenario context generation capability described in the remainder of this paper.  Simulation Scenario Context and CultureSimWe refer to scenario context as those entities in the scenario that are not the primary focus of the desired training, experiment or other simulation goal.  Scenario context entities could be civilian, NGO, asymmetric or military actors.  While these entities are not the focus of the simulation exvercise, their presence is required to provide realism in the scenario.  For example, in order to train urban patrol tactics it is important that the urban environment be populated with civilians.   Most of the civilian entities would be expected to be going about their daily activities.  Terrorist entities may be lurking, hiding not only in the terrain but also in the mix of civilians.  In this scenario the civilian population is considered to be context, while the terrorists are not, although with a different simulation focus, the presence of latent terrorists could be considered context. Typically, the specific actions of the scenario context entities are not important.  However it is extremely important that the scenario context entities behave properly as both individuals and in the aggregate.   The CultureSim simulator is a scenario context generator.  Specifically, it generates an urban civilian scenario context [1ref].   CultureSim scenarios are constructed using building blocks called templates. Each template allows the user to define:A weighted mix of entity typesA set of generic building categoriesA set of areas of controlAn optional list of “ commuter profiles”The list of supported entity types includes vehicles of all domains (air, land, sea) and also specialized types such as pedestrian and bicycle. Building categories allow users to group specific buildings (identified by location) and/or buildings identified by different functional codes into generic categories, such as “home” or “workplace”. The areas of control may be simple (a radius around a city) or very complexly shaped (the outline of a business district) and are associated with a number of entities to be simulated and their entity class.The classes of entities define basic behavior. Most are straightforward. For example, “static” vehicles simply parallel park on the street at random locations in the specified area and remain in that location; “mobile” entities select a route between two random locations in the specified area and repeatedly travel along it. For a more complete discussion of different entity classes and their associated behavior, see [1DS, DW]. One entity class called “commuter” allows the user to specify a complex behavioral profile. Commuter profiles are composed of a set of rules that control the behavior of entities according to a schedule. Predefined profiles exist for a wide variety of urban denizens; for example there are profiles defined for delivery trucks, taxi cabs, and typical commuters. Users may also develop customized profiles, if desired. Profiles are a key component of the scenario context generation capability and are described in more detail in a later section.Any number of templates may be combined to create a CultureSim scenario. Once the scenario is defined, CultureSim will automatically create the desired entities, assign them specific locations and routes, and simulate their behaviors.  Using this technique the user is able to specify a scenario context for an urban environment that is both scalable and realistic.  CultureSim is a key component in the Joint Urban Operations experiments successfully being conducted by JFCOM.An Automated Scenario Generation PrototypeWe chose to implement a prototype forAn automated scenario generation prototype based on the simulation context architecture of CultureSim, using the tools and building blocks already available has  been developed to explore the applicability of automation of scenario context scenarios.  CultureSim’s commuter profiles provide the flexibility to define detailed behaviors for an arbitrary number of entities of various types. However, CultureSim does not (and should not) provide any guidance for how many entities should be created of which type and which behaviors are appropriate. This higher level functionality is the domain of scenario context generation. The goal isIn the past this information was created by the scenario developer.  The goal of the prototype is to provide a representative population that commutes about the urban area based on realistic schedules given the demographics of the area and the political, seasonal and environmental factors affecting the simulationsituation. Our scenario context generator uses a rules-based engine to create these representative populations using CultureSim’s commuter profiles.The Scenario ComponentsFour key components are used to fully define the demographics of a context-based simulation scenario.  These include the building types available in the terrain, commuter profiles, vehicle type distributions, and rules to dictate how to generate and distribute the population.  The following sections describe each of these components.Building TypesBuildings can be categorized by their primary function, such as a school, an office building, a shopping center, factory, police station or most any function.  A feature of the Compact Terrain Database format 8.7 is that it provides over 150 building function codes to describe the use of buildings within an urban area.   Buildings are given attribution during the terrain database generation process.The scenario context generator uses the building function codes to identify and characterize the distribution of building functions within the scenario region.  Statistics that can be computed from a CTDB include the number of buildings and the total area of the buildings for each type.  Table 1 shows the statistics computed for the Jakarta, Indonesiaa major urban area.Table 1: City of JakartaBuilding Type  StatisticsBuilding Function CodeDescriptionCountArea1 Fabrication3211565822953.72 Government24287175623623.35 Government Admin536628884011.86 Hospital1097240980801.17 House of Worship525125376596.99 Museum543917564398.312 Police Station186757.115 School787226065024.416 House760650732374199.017 Multi Unit Dwelling108651263140366.621 Garage657929838867.524 Warehouse42729102474461.627 Depot Terminal1958.028 Administration1575555138550.929 Aircraft Maint20476130.830 Hangar337948162.935 Post Office31446842.237 Fire Station184023.142 Institution1323341945678.043 Communication9121647583.345 Industrial202105593.146 Transportation2103737.247 Commercial/Recreational116919245556760.051 Market871879524.553 Bank398219481321.654 Service/Fueling Station17308819689.957 Restaurant44284100303515.460 University/College1008332263879.661 Courthouse11143297163.483 Power Generation4391957.084 Filtration Plant5127401.687 Auditorium893143589.388 Opera House891952643.395 Hotel660969843322.796 Diplomatic937436914.998 Shed16281587235.5101 Municipal Hall520217328388.8103 Outbuilding87109.6114 Non-Christian Worship14222994519.9116 Factory4208292998248.5118 Community Centre8861407645.0122 Shopping Centre2245994881287.0127 Theater717626522399.1128 Library11244168663.4129 Airport Terminal1820474835.9133 Commercial33660197197050.8153 Hut10291131550.7990 Parking2320408215.9Total13448062572734154The resulting distribution of building functions can then be used as a basis for making assumptions about the representative population of the area. A limitation of using this approach is that the outcome depends upon the reliability of the source data.  Encoding building function codes into the CTDB format is a relatively new feature, with only two databases currently supporting well-defined urban areas.  The accuracy of the CTDB database, in turn, relies on the availability of good data from city planners or surveys.  Where data is missing, a distribution of geo-typical buildings is automatically generated and placed in the terrain.  If the auto-generated buildings are not representative of reality, then the regional statistics will be flawed and will yield an unrealistic population.  As this technology matures and more reliable data is made available to build realistic virtual cities, automated scenario generation will more accurately reflect the actual population.Commuter ProfilesCommuter profiles describe the daily and weekly activity schedules for specific segments of the population, characterized by role or profession.  Each schedule is defined by relating activity periods to building categories where the activities take place.  For instance, a generic worker’s profile might look like Figure 2.  His schedule mainly consists of traveling between his home and workplace with occasional trips to eateries, shops and entertainment establishments.  Building categories may group one or more building functional types, so the category of “Entertainment”, for example, may include theaters, opera houses, auditoriums, stadiums, museums and so on. Figure 2: CultureSim Example Profile SHAPE  \* MERGEFORMAT Figure 2: CultureSim Example ProfileWhen CultureSim runs a scenario, each individual commuter is simulated with his or her own unique schedule.  In order to ensure that there is some variation between individuals, the schedule can allow for some random variation in timing, location or activity.  Figure 3 shows how uncertainty can be introduced to a profile to vary the activities between individual commuters.Figure 3: Variations in a Profile Schedule SHAPE  \* MERGEFORMAT Vehicle Type DistributionAs stated earlier, the goal of automated scenario context generation is to produce realistic representative populations for urban environments. To maintain realism at the individual level, selected vehicle types should be consistent with the driver’s role or profession. The physical representation of a commuter entity in the simulated world may be unique for certain professions and more general for others.  For example, fire fighters would most likely be found driving fire engines and other emergency vehicles, so fire fighter profiles should only be linked with those types of vehicles and no others.  Generic workers, on the other hand, would be found driving a mixture of vehicles or walking, but not driving fire engines. Therefore, generic worker profiles should only be linked  tolinked to automobiles, light trucks, motorcycles, bicycles and pedestrians.The manual creation of scenario templates in CultureSim is a trial-and-error process that allows complete flexibility in pairings of professions and vehicles. Without any restrictions, it can be laborious for the user to find a realistic mix of vehicle types for a representative population. Further, the template format allows multiple vehicle types and multiple profiles to be specified simultaneously, but when the scenario is run the vehicle types are distributed randomly across the various profiles. This creates pairings of profiles and vehicles that violate common sense.  To solve this problem, the automated scenario generation format uses a separate template for each profile so that pairings of vehicles and profiles adhere to a consistent set of linkage rules. However, the scenario context generator does allow different sets of linkage rules to be used under different conditions, as described in the Scenario Types section of this paper. This provides all the flexibility needed to model different representative populations, such as more bicycles in Chinese cities or less traffic but more snow plows during snowstorms.Population Distribution RulesPopulation distribution rules use the statistics computed about building functional types to determine appropriate population segments (each using a separate profile) and associated vehicle types. These rules are created by the user, but as with profiles, a set of commonplace rules will be provided with the system.A population distribution rule group contains  rulescontains rules for  desired (profession, vehicle type) linkages associated with building functional types and generation thresholds. Each rule determines how many of each type of vehicle using that profile should be generated given the number and/or size of buildings of a particular type. The supported types of generation thresholds are currently limited to a set of three possibilities, although more may be added later.   These include:Per buildingPer AreaPer Area with a minimum number per building.In the very simple example shown in Table 2, each school building found in our selected scenario region will generate 5.5 bus drivers driving school buses and 50 soccer moms driving minivans.  For police stations, the total area occupied by police stations in the scenario region is used to compute the number of police officers.  In this case, every 1000 square feet will generate a police officer driving a police cruiser and for every eight cruisers, there will be a paddy wagon (with a minimum of one paddy wagon per station).  Generic workers will be generated according to their rules for both factories and commercial buildings.Note that population distribution rules are used interactively as part of the automated context scenario generation process. Entities are not generated directly into an exercise. This layered approach affords much more flexibility and the resulting figures can be considered recommendations rather than inviolable results. While the rules provide “best recommendation” values for population segments, each aspect of the scenario can be modified by the user before saving or simulating the results. This interactive generation process is described more fully in a later section Table 2: Simple Population Distribution Rules ExampleBuilding FunctionProfileVehicle TypeDistribution RuleSchoolBus DriverSchool Bus5.5 per buildingSoccer MomMinivan50 per buildingPolice StationPolice OfficerPolice Car1 per 1000 sq.ft.Police Van1 per 8000 sq.ft.(minimum 1 per building)FactoryGeneric WorkerSmall Car1 per 1000 sq. ft.Pickup Truck1 per 500 sq. ft.CommercialGeneric WorkerSmall Car1 per 100 sq. ft.Medium Car1 per 100 sq. ft.Scenario TypesRule sets contain one or more groups of distribution rules and profile sets contain one or more groups of profiles.  The rule sets reference a profile by name only, , thus providing a powerful plug-in capability. The same population distribution for a region will behave differently if the same rule set is associated with different profiles. Conversely, the population distribution of a region can vary while each segment retains the same behavior if a given profile set is associated with different rule sets. This capability of associating different profile sets with different rule sets can be used to model a variety of scenario types.  Scenario types mix and match different populations and  behaviors to incorporate, for example, the effects of varying season, political climate, region, or culture..In Table 3, we find 4 different sample scenario types.  Each of these has a different set of profiles or rules from the others showing how we can combine these for different effects.Table 3: Sample Scenario TypesScenario TypeProfile SetRule SetNormal DayNormal Day ProfilesNormal Day RulesMartial LawMartial Law ProfilesMartial Law RulesNormal Day (SE Asia)Normal Day ProfilesNormal Day SEAsia RulesChristmas Shopping SeasonXmas ProfilesNormal Day RulesIn a Normal Day scenario, typical workweek behaviors and vehicle distributions are reflected.In a Martial Law scenario, behaviors might be drastically affected, curtailing nighttime activities for the general population. In addition, the police, and possibly military, presence is larger.  In this case, both the rule set and profile set would be different from that of the Normal Day scenario.A Normal Day in a non-western culture like Southeast Asia, people’s activities might be more or less the same as in the West, but the mix of vehicles to pedestrians or the types of vehicles found vary considerably, requiring different distribution rules.In the West, during Christmas Shopping Season, people and vehicles occur in the same distribution as any other time of the year.  However, their activities center much more around shopping during their free time than any other time of the year and therefore, the profiles should reflect that.Table 3: Sample Scenario TypesScenario TypeProfile SetRule SetNormal DayNormal Day ProfilesNormal Day RulesMartial LawMartial Law ProfilesMartial Law RulesNormal Day (SE Asia)Normal Day ProfilesNormal Day SEAsia RulesChristmas Shopping SeasonXmas ProfilesNormal Day Rules SHAPE  \* MERGEFORMAT Figure 4: Generating Component Scenario TemplatesGenerating a ScenarioA CultureSim scenario is comprised of one or more component templates representing the population in a common region.  In scenarios created by the scenario context generation process, each template contains a unique profile with a total population and a distribution of associated vehicles.  The procedure for creating the scenario requires the following steps:  Define the region boundaries.Select a scenario type to define the rule set and profile set.Compute the region’s building statistics.Create each template:Compute by computing	 the populations and vehicle mixes for each profile based on the rule set and the region statistics.Figure 4 shows how the process is applied in a typical fashion.  First the user selects a scenario region, in this case the entire city of Jakarta. . Then he selects a scenario type, in this case the Normal Day from Table 3.  Then, the scenario context generator computes building statistics for the selected region (Jakarta) and applies the selected rule set for any building types found in both the region and the rule set. This process generates the templates, each of which corresponds to a unique profile, and the associated vehicle types and counts. Saved together, these templates constitute a ClutterSim CultureSim scenario for generating scenario context.Figure 4: Generating Component Scenario Templates SHAPE  \* MERGEFORMAT At this point in the process, the user has the same editing capabilities as any CultureSim user. The resulting set of templates can be tailored to suit any specific scenario requirements.  Vehicles and templates may be added, changed or deleted; the population may be adjusted in parts or as a whole.  If the user adjusts the entire population count, CultureSim automatically adjusts the count of each component to maintain the previous ratio (such as  the 8:1 police car to paddy wagon ratio given in an earlier example).  The advantage of using the scenario generation process over developing CultureSim scenarios from scratch is that the user is provided with an initialized set of templates. These templates represent the best recommendation available for creating a representative population for the selected area. The user does not even need know the population of the area of interest or the appropriate behavioral profiles unless his scenario requirements call for detailed tailoring. He is saved the initial startup cost of creating a set of working templates and, if the recommendations (which should improve over time) turn out to be acceptable, the user is saved the even more time-consuming process of iteratively executing the ClutterCultureSim scenario, judging the results, and tweaking the templates until an acceptable scenario context is developed...An Ontology for Urban Scenario ContextConclusionThis work has demonstrated that it is possible to automatically generate a simulation context scenario using a minimal amount of user input and terrain data.  Creating the required rules sets is not a trivial task, so this technology is most applicable in cases where many scenarios are generated for a given rule set.  One such application would be simulation based course of action analysis.  Though not described in this paper, we have also created an ontological representation of the scenario data that the system can generate and consume.  This ontology can serve as a basis for the development of standards based scenario representation for simulation scenario context data [6].There are no perfect solutions to the problem of rapidly generating simulation scenarios.  Due to the specific nature of scenarios total automation is unlikely in the general case, although as demonstrated herein it is possible for specific domains. A serious commitment to standards based scenario formats and C2 to simulation interoperability combined with innovative concepts will reduce the cost associated with simulation scenario development and enable simulations to fulfill there promise in operational and other environments.We have developed an ontology to represent [Deborah]As a proof of principal, we developed two tools : one that generates an XSD (XML schema definition) file to define a canonical XML representation for an ontology represented in OWL and another tool which generates the corresponding XML representation from a scenario defined using OWL’s capability to instance individuals.References[1] Speicher, D. and Wilbert, D., “Simulating Urban Traffic in Support of the Joint Urban Operations Experiment,” Interservice/Industry Training, Simulation, & Education Conference, 2004. [2] Prager, S. et al. , “Malls, Sprawl and Clutter: Realistic Terrain for Simulation of JUO,” Interservice/Industry Training, Simulation, & Education Conference, 2004. [3] Franceschini, Franceschini, Burch, Sherrett, Abbott, "Specifying Scenarios Using the Military Scenario Description Language" Simulation Interoperability Standards Organizations (SISO), Simulation Interoperability Workshop. Paper 04F-SIW-068 (Fall 2004).[4] Tolk, A., "Moving towards a Lingua Franca for M&S and C3I - Developments concerning the C2IEDM" Simulation Interoperability Standards Organizations (SISO), European Simulation Interoperability Workshop. Paper 04E-SIW-016 (Summer 2004)[5] Tolk, Hieb, Galvin, Khimeche, "Coalition Battle Management Language" Simulation Interoperability Standards Organizations (SISO), Simulation Interoperability Workshop. Paper 04F-SIW-103 (Fall 2004).I can’t figure out how to move this after the table figure. HomeDinnerShoppingWorkLunchWorkHomeSundayHomeChurchHomeSaturdayHomeDinnerMoviesLunchShoppingHomeFridayHomeEntertainmentDinnerWorkLunchWorkHomeThursdayHomeDinnerShoppingWorkLunchWorkHomeWednesdayHomeDinnerShoppingWorkLunchWorkHomeTuesdayHomeDinnerShoppingWorkLunchWorkHomeMondayGeneric WorkerVariation of PlaceI always go Home to the same house and my neighbor lives in a different house than me.I always go to the same Workplace when I go to WorkI don’t always visit the same Restaurant when I go to DinnerVariation of ActivityI always go to Work Monday through Friday (e.g., 100% chance)I occasionally go to the Movies on a Saturday afternoon (e.g., 25% chance)Variation of Start or End TimeI am always punctual (e.g., 0 minute error)Sometimes I hit the snooze bar in the morning before I get ready for Work (e.g., ±15 minute error)Variation of ParkingI always find on-street parking (e.g., 100% chance)I try to find a space in a parking lot (e.g., 50% chance)=XRegion StatisticsBuilding FunctionCountArea (sq. ft.)Police Station1 86757.1School787226065024.4Factory4208292998248.5Commercial33660197197050.8Scenario TemplatesTemplateVehicle TypeVehiclesTotal PopulationBus DriverSchool Bus4329643296Soccer MomMinivan393600393600Police OfficerPolice Car8798Police Van11Generic WorkerSmall Car20649694222936Medium Car1971971Pickup Truck185996Total4659930RulesBuilding FunctionProfileVehicle TypeDistribution RuleSchoolBus DriverSchool Bus5.5 per buildingSoccer MomMinivan50 per buildingPolice StationPolice OfficerPolice Car1 per 1000 sq.ft.Police Van1 per 8000 sq.ft.(minimum 1 per building)FactoryGeneric WorkerSmall Car1 per 1000 sq. ft.Pickup Truck1 per 500 sq. ft.CommercialGeneric WorkerSmall Car1 per 100 sq. ft.Medium Car1 per 100 sq. ft.Region StatisticsBuilding FunctionCountArea (sq. ft.)Police Station1 86757.1School787226065024.4Factory4208292998248.5Commercial33660197197050.8=RulesBuilding FunctionProfileVehicle TypeDistribution RuleSchoolBus DriverSchool Bus5.5 per buildingSoccer MomMinivan50 per buildingPolice StationPolice OfficerPolice Car1 per 1000 sq.ft.Police Van1 per 8000 sq.ft.(minimum 1 per building)FactoryGeneric WorkerSmall Car1 per 1000 sq. ft.Pickup Truck1 per 500 sq. ft.CommercialGeneric WorkerSmall Car1 per 100 sq. ft.Medium Car1 per 100 sq. ft.XScenario TemplatesTemplateVehicle TypeVehiclesTotal PopulationBus DriverSchool Bus4329643296Soccer MomMinivan393600393600Police OfficerPolice Car8798Police Van11Generic WorkerSmall Car20649694222936Medium Car1971971Pickup Truck185996Total4659930