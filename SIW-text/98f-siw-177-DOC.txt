On-Demand Data Analysis and Integration of Simulations through         The Design of Network Topologies.Mario EspinosaCarlos GarciaJulie ThomasonCOLSA Corporation6726 Odyssey DriveHuntsville, Alabama 35806(256) 922-1512arctic@colsa.comKeywords:Network, Analysis, Routing, TopologiesABSTRACT: The Active Network Designer (ActiveNet) was developed to provide on-demand network data management, data analysis, routing, intra-packet and packet filtering.  ActiveNet uses Windows NT as the operating system and builds upon it with custom developed software to handle the routing and processing of data.  The software provides users a friendly GUI to configure network topologies by using drag and drop “objects” as data managers or operators, and “arrows” as routes.  Users are able to design data paths and how data is processed along those paths in real-time configuration.   This network metaphor provides the ability to visualize complex data transformations.  The Active Network Designer includes a standard set of predefined objets for hardware abstraction and simulation processes.  The user can integrate custom data operators into the network design to provide unique functionality.1. IntroductionThe Active Network Designer (ActiveNet) was developed by COLSA Corporation of Huntsville, Alabama, as a multipurpose digital communications software.  ActiveNet was developed in support of the Strategic Missile Defense Battle Lab (SMDBL) training initiative.  SMDBL recognized the need to efficiently integrate data between disparate simulations.  Since its initial introduction the demand for the ActiveNet and its increased functions and capabilities has grown in the commercial and government markets. In the following sections, we will outline the capabilities and utilization of the ActiveNet.2. Object-Oriented DesignActiveNet uses Windows NT as the operating system and builds upon it with custom developed software to handle routing and processing of data.  The software provides users a friendly GUI to configure network topologies by using drag and drop “objects” as data managers or operators, and “arrows” as routes.  Users are able to design real-time configurations of data paths and determine how data is processed along those paths. Using a network metaphor for the configuration of the ActiveNet provides the ability to visualize complex data transformations.The ActiveNet software includes a standard set of predefined objects both for hardware abstraction and processes.  Data manager objects are typically abstractions to physical hardware devices that are capable of receiving and/or sending data. Data manager objects include data sources such as Transmission Control Protocol/Internet Protocol (TCP/IP), User Defined Protocol (UDP) for point to point and broadcast connections, TCP/IP stream connections, serial ports, random packet generators, and files.  Data operators provide an abstraction for data processing units such as data filters, translators, graphs, and accumulators.  Data routes are designated using the line tool.  Drawing the source and destination of the line specifies the direction of the data path.  Data managers, which are representations of physical hardware, are the data inputs and outputs of the diagram.  Once the data enters the diagram it begins to be processed by data operators.  Data operators can be generic in nature such as a data rate packet filter or data specific such as 20:1 DIS compression for static or slow moving tracks.3. Configuration of Basic Network Topologies In a project of this nature, visualization plays a very important role.  Therefore, we developed the ActiveNet in a way that the user can obtain a complete understanding of where the data is originating, what type it is, and where it should be routed.  The ActiveNet has a series of  "smart" filters and objects that when placed in the proper arrangement will automatically provide those answers to the user.  Those objects are shown in a number of pallets that are present on the main program window.  As objects are placed in the diagram they may be linked with each other.  The links are directional, and represent the flow of data between objects.  In figure 3.0, the UDP Socket data is being directed towards the Accumulator Filter.  These objects are active from the moment they are placed in the diagram.  Linking objects with each other will create an instant data flow path between them.  Figure 3.0 Example of a basic network design.Wide area networks, such as the Internet, do not allow for broadcast data to be sent across the network.  In order to send simulation data over these networks, the data is converted from broadcast data into point to point or directed data.  At the remote location, doing the inverse diagram can rebroadcast the data.Figure 3.1 is an example of UDP broadcast to Point-to-Point conversion.  The address 255.255.255.255 represents a broadcast address to everyone.  Broadcast can be grouped by selecting a smaller broadcast range such as 199.172.89.255.  UDP data is connectionless, so data can be sent to an un-established site.  Whenever the site creates its diagram, connection is instantly attained. Figure 3.1 UDP broadcast to Point-to-Point conversion.While sending simulation data to other sites over wide area networks, at times it is necessary to filter the data in order to reduce the data rate using a controlled method.  Other times, users may choose to filter data to remote sites so they are not able to “see” certain entities.  The DIS filters work with the data in little endian mode.  (Network data is set at big endian.)  For that reason, the data is first converted into little endian before it is passed to the filters.  The DIS Converter Object performs this conversion.  After all processing is completed the DIS data must be converted back to big endian by utilizing the DIS Converter Object again.   Figure 3.2 is an example of UDP broadcast to Point-to-Point conversion with a DIS filter.  Note that the DIS filter works with the data in little endian mode.  The DIS converter object should be used to convert the data to the proper mode.  The DIS converter object is bi-directional meaning data can be converted from either direction as it passes through the filter.Figure 3.2 UDP broadcast to Point-to-Point conversion with a DIS filter. An object’s output data can be divided an unlimited number of times.  Every time the object is linked, a copy of the data is sent to the receiving object.  For example, data can be stored as output of a filter.  This provides a file with filtered data.  In the figure 3.3, data is filtered by the DIS filter and then sent to a file as little endian data.  Additionally, the data is converted to text and the output is viewed in a text monitor object.Figure 3.3 Data storage Graphing the data is as easy as dropping a graph object and sending the appropriate data.  Figure 3.4 illustrates the use of the graphing objects to visualize the filtered data.Figure 3.4 Graphical Data Analysis.4. Complex Network TopologiesDuring the 1997 AUSA trade show in El Paso, TX, SMDBL demonstrated a large force-on-force simulation.  The goal was to generate 6000 entities using the High Performance Super Computer resources at the Advance Research Center (ARC) in Huntsville, Alabama.  The scenario was built in southwest Asia using ModSAF, EADSIM, and EADTB.Multi-processor SGI Origin was used to execute ModSAF and provide more than 5000 entities.  EADSIM and EADTB provided an additional 1000 air defense entities.  The total network load exceeded 100 Mbps of simulation data, thus rendering the network unusable. The network was then divided into three subnetworks. The ActiveNet was used to merge the data into a single simulation stream that also provided the required crossover feedback between the ModSAF simulations.  Simulation data generated at the ARC was streamed to the AUSA showroom through the IDREN network.  Using filters and compression objects, data from the simulation was tunneled and able to be sent through the data stream to AUSA and back.As the integration of the simulation models was initiated, problems were identified.  First, the TSIU and the RTOS were unable to handle the large data load. The ActiveNet was used to separate the data into two data streams. One was routed to the TSIU and the other to the RTOS. Filters and storage objects were used for data management and further analysis. This scenario is illustrated in figure 4.0. The data originates at Huntsville and it’s transmitted through the IDREN using point to point UDP socket.  The data is then subdivided into three data streams. The first data stream contains all of the simulation data sent across the network.  The other two data streams are filtered for the TSIU and the RTOS systems.The high-speed stream provides data for EADSIM plain view display (PVD) and to a 3-D battlefield visualization application (stealth) developed by CG2.  In addition to providing single entity visualization, this stealth was modified to view the data in aggregate form.  Depending on the zoom factor, entities were visually transformed into their corresponding symbols, from platoon level up to division level.  The TSIU stream is filtered to provide only pertinent information.  Initially a DIS data filter controls the data so that only fire, detonation, and signal PDUs are permitted to continue along the data path.  An additional DIS data filter was added to reduce the entity count into a more manageable number.  This filter provides a single entity representation per company.  Data is then sent to a storage object.   The data logged can be used for post mission data validation or after action review. Figure 4.0 AUSA 1997The RTOS stream is filtered according to PDU types and their range from the Patriot unit.  The DIS range filter regulates the data so that only entities from within a radius of 100Km from the RTOS Patriot unit are allowed to continue along the data path.  The data then reaches the RTOS and is recorded by the data logger for future evaluation. The data from the RTOS and TSIU is merged into the original data stream and sent to the local EADSIM and the ARC.5. Future DirectionsFuture improvement to the software includes the capability to integrate the ActiveNet into an operating system service.  This capability allows the ActiveNet to startup automatically and to execute in the background without user intervention.Simple Network Management Protocol (SNMP), an industry standard for exchange of network status information, is a natural addition for ActiveNet.  SNMP capability allows the exchange of status information between ActiveNet diagrams and network configuration software.Video and audio capturing and streaming capabilities are currently under development.  Future versions of the ActiveNet software will have a complete audio and video pallet designed for this type of media management.  6. References[1] D. Comer: Internetworking with TCP/IP, Prentice Hall, Englewood Cliffs, New Jersey 1995.[2] Fundamentals of DIS: DIS Standard Version 2.0, Fourth Draft, 1996.