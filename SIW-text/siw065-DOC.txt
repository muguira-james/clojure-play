A Demonstration of C2I System-to-Simulation Interoperability:  The NSS/GCCS-M FederationRobert LutzJohns Hopkins University Applied Physics LaboratoryLaurel, MDPhone: (240) 228-7599Email: robert.lutz@jhuapl.eduMarnie SalisburyThe MITRE CorporationMcLean, VAPhone: (703) 883-7064 Email: marnie@mitre.orgGarrett BidwellMetron, Inc.Simulation Sciences DivisionSolana Beach, CAPhone: (619) 792-8904Email: bidwell@ca.metsci.comKEYWORDSHLA, Federation, FEDEP, C2I, DII COEAbstract:  The DoD High Level Architecture (HLA) has been designed to facilitate interoperability between simulations and reuse of simulation components. The HLA was also designed to facilitate interoperability between simulations and live entities, where appropriate interface software can be used to incorporate live C2I systems into HLA federations.  This paper reports on an experiment to demonstrate the feasibility and utility of federating an analysis simulation with a Defense Information Infrastructure Common Operating Environment (DII COE) based C2I system for the purpose of operator training. More specifically, this paper will describe the developmental activities that were necessary to interface the Naval Simulation System (NSS) with the Global Command and Control - Maritime (GCCS-M) system.  In this HLA federation, NSS generated dynamic track data that was exported to and displayed on the GCCS-M system. Based on this information, the GCCS-M operator injected actions/orders back into NSS, which would then respond appropriately to these orders. An ASW scenario was constructed to provide a context for stimulating these types of system interactions. In addition to a discussion of the development process, this paper will also identify output products produced throughout this effort, and report on lessons learned for consideration by future "hybrid" federations.INTRODUCTIONAchieving interoperability between combat simulations and command, control, and intelligence (C2I) systems is a shared goal in many corners of the DoD simulation and C2I communities.  The purpose may be to support operator training, command and staff training, test and evaluation of C2I systems and networks, or analysis of tactics, techniques and procedures.  Regardless of the purpose, the projects follow the same basic course of action: a combat simulation is identified, the required data flows between the C2I system and the combat simulation are analyzed (often in terms of message formats), simulation data is mapped to message formats, an inter-process communication technique is selected and then a software engineering team designs and implements the necessary software on the simulation side.  This course of action is repeated from project to project. On rare occasions, elements of one solution are reused in the next project.The technology and processes of the High Level Architecture (HLA) offer a way to increase the likelihood of reuse of the solutions from one project to the next.  The development of interface definitions for C2I systems that articulate the data required by and produced by the C2I system will reduce the amount of work done in identifying and mapping data flows between C2I systems and combat simulations.  Further, the development of software interfaces between C2I systems and the Runtime Infrastructure (RTI) software will eliminate the need to identify, design, implement, and test an inter-process communication technique each time.  The HLA does not guarantee plug-and-play interoperability among components, but it allows project teams to concentrate more of its limited time and resources in the areas of applying the combined system for testing, training, or analysis rather than on wiring the individual systems together.This paper describes one of a set of projects underway that use the HLA as the foundation for linking combat simulations to C2I systems.THE NSS/GCCS-M FEDERATIONThe FederatesThe federation consists of two federates, described in more detail here.GCCS-M.  Global Command and Control System-Maritime (GCCS-M) is the highest level Naval command and control system.  It provides information management and display capabilities and real-time interfaces to a variety of existing communications and computer systems in the Navy and Joint inventory.  GCCS-M is currently operational on most surface combatants and in numerous command centers and Tactical Support Centers throughout the U.S. Navy.  The most prominent component of the GCCS-M is the Common Operational Picture (COP), an application that provides a display of the current locations (and select other data) for air and surface tracks (including ground units) updated in near-real time or periodically. GCCS-M configurations may also contain other tactical decision support applications and information management applications.  These applications are not currently part of this federation project.The GCCS-M is part of the overall family of C2I systems built in the framework of the Joint Technical Architecture (JTA) and the Defense Information Infrastructure Common Operating Environment (DII COE).  From the hardware layer up, the GCCS-M is built upon and relies upon elements of the DII COE.  Some elements of the DII COE have been used to good advantage in this federation; specifically the Track Database Manager (TDBM) and the TDBM Application Programmer’s Interface (API).NSS.  The Naval Simulation System (NSS) is an object-oriented Monte Carlo simulation system designed and implemented to portray Naval and Joint operations and to support fleet exercises and experiments and C4ISR analyses.  It is capable of simulating selected space, air, naval, and land forces engaged in single or multiple contingency operations at varying levels of user selectable resolution.  NSS includes models of critical C4ISR processes and activities such as collection and exploitation, dissemination, tactical or targeting picture generation, decision-making and asset allocation.  Thus, NSS can be used to evaluate the influence of key aspects of C4ISR on combat outcomes.NSS has been used both as a tactical decision aid, providing an automated ability to hypothesize and evaluate sets of alternate courses of action (COAs) and as a training “stimulator”, providing the ability to inject simulated platform, system, or commander level entities into real world C4ISR systems.  It is the latter set of capabilities that are being exploited in this federation project.To make its capabilities more widely available to the operational user in the field, the NSS is slated to become fully compliant with the DII COE.  The NSS will undergo DII COE compliance testing and packaging (a process known as segmentation) during FY00.  Upon successful completion of DII COE segmentation, the NSS will be bundled with other mission applications or Navy common elements and provided with all GCCS-M deliveries.Project PlanThis federation project was divided into three main phases.  At the time of this paper, the federation team has completed Phase I and is part way through Phase II.  The remainder of this paper will focus on the development process and outcomes of Phase I, with a brief discussion of the plans for Phase II.Phase I:	Achieve Basic Technical Interoperability Using HLAPhase II:	Extend the Scope and Complexity of Data Exchanges Between GCCS-M and NSSPhase III:	Examine and Experiment With Other GCCS-M Mission ApplicationsPhase I: Achieve Basic Technical Interoperability Using HLATwo main goals were identified for Phase I.  First, achieve a working federation execution comprising GCCS-M and NSS with data flowing between the two federates.  Second, concentrate on the delivery of state data for simulated entities from NSS to GCCS-M where it is displayed correctly on the GCCS-M COP display. Phase II: Extend the Scope and Complexity of Data Exchanges Between GCCS-M and NSSThe goal for Phase II is to build upon the capabilities of Phase I and add the ability for a GCCS-M operator to create and send orders to NSS that then result in appropriate behavior by the simulated entities and feedback to GCCS-M.  The orders selected are as follows:Position-of-Intended Movement order, which is used to direct a ship to follow a route or achieve a set of waypoints at specific times.Screen Kilo and Whiskey Grid formation commands, which direct a group of ships into specific positions with respect to each other.Phase III: Examine and Experiment With Other GCCS-M Mission ApplicationsThe goal of Phase III is to extend Phase II capabilities as necessary to demonstrate a more complete, fully functional training environment for GCCS-M system users.  That is, to examine a broader set of GCCS-M segments and mission applications that can potentially benefit from stimulation by a combat simulation and incorporate such capabilities in a controlled demonstration. Phase III activities will begin in mid-August, and will continue through the end of the calendar year.FEDERATION DEVELOPMENTThe HLA Federation Development and Execution Process (FEDEP) Model provided the framework for development of the NSS/GCCS-M federation.  The HLA FEDEP is a generic systems engineering methodology for the development of distributed systems.  The intent of the HLA FEDEP is to guide federation developers through the series of activities necessary to design and build HLA federations1.At the most abstract level, the HLA FEDEP is defined according to a set of five major steps or phases.  An illustration of the five-step HLA FEDEP is provided in Figure 1.  These steps do not need to be performed in a strictly sequential manner, as iterative spiral development approaches have been shown to be quite effective in many different types of applications.  A short description of the five-step process is provided below:Step 1:	The federation sponsor and federation development team define and agree on a fundamental set of federation objectives, and document what needs to be achieved to accomplish those objectives.Step 2:	A representation of the real world domain that applies to the problem space is developed.Step 3: 	Participating federates are identified, a Federation Object Model (FOM) is developed, federate agreements on consistent databases/algorithms are established, and modifications to federates are implemented (as required).Step 4:	All required linkages and interconnectivity between federates are established, and testing is performed to ensure interoperability requirements are being met.Step 5:	The federation is executed, data is collected, outputs are analyzed, and results are documented. Figure 1. HLA Five-Step Development ProcessPhase I ExperiencesThe following sections describe the Phase I NSS/GCCS-M federation development activities in terms of the five-step process.  Note that the final step is not discussed here, since the execution of the training environment (in support of capability demonstrations) is a Phase II activity.Define Federation Objectives: In this first step, a full-day kickoff meeting was held as a means of initiating the federation development.  At this meeting, the federation development team discussed their perceived roles and responsibilities in the federation, and collaborated on a fundamental set of high-level federation objectives.  It was also at this time that the initial project plan was constructed, along with a more detailed plan for Phase I development activities.  Finally, a series of teleconferences were scheduled so as to maintain coordinated development across all federation participants.  Develop Federation Conceptual Model: In this step, the federation development team streamlined the process of scenario and conceptual model development by reusing a scenario that had been developed for a previous application.  In this scenario, a BLUE carrier battlegroup is attempting to transit the Tsushima Straits during wartime.  An ORANGE submarine force is defending the straits, and attempting to inflict attrition on the BLUE forces.  Several ASW assets are operating in the area in support of the BLUE force, including fixed wing aircraft (S-3B, P-3C), rotary wing aircraft (SH-60B/F), and direct support SSNs. Although the primary BLUE objective is safe transit, attrition of the ORANGE submarine force is considered a secondary objective.  An illustration of the scenario is shown in Figure 2.  Although this scenario was originally constructed for an analysis application, the federation development team felt that it could also provide a viable basis for training of C2I system operators.  That is, the dynamic track information produced via execution of this scenario within NSS could be used to stimulate the normal tasks of the GCCS-M workstation operator.  Note that since the operations represented within this scenario were based upon recognized, authoritative tactics and doctrine guides within the Navy, that the development of a federation conceptual model was not necessary for this application (i.e., the federation conceptual model was implicit in the scenario description).  Based on this scenario description, the federation development team identified the types of objects and interactions that would be required for this application, as well as the types of behaviors these objects would need to exhibit.  These requirements were not captured in a separate document, as the scenario description itself provided sufficient detail.Figure 2. GCCS-M User Training ScenarioDesign and Develop Federation: In this step, several related developmental activities were necessary.  First, a Federation Object Model (FOM) was constructed to support the Phase I objectives.  Here, the GCCS-M Simulation Object Model (SOM) was used as the foundation for FOM development, driving the data requirements that NSS needed to support.Next, the hardware and software that would be required to support federation integration activities at NRL was identified.  This included the host computers, operating systems, and federation development tools (including the RTI) that would be used, along with the NSS simulation software and C++ development environment.  All required procurement orders were then prepared and submitted.  Finally, the equipment and supporting software was installed and tested at the NRL integration facility.Next, the HLA interfaces of each federate were modified to support the requirements of the federation. The NSS has been HLA-compliant since 1997.  Thus, many software design and implementation tasks that normally occur in federation development projects were not needed for this project.  Section 4 provides more detail about the interface design for NSS and GCCS-M.The last activity in this step was to develop a federation integration and test plan.  The purpose of this plan was to explicitly identify the sequence of tasks required to verify that all Phase I objectives have been met.  The plan did not explicitly define how each task was to be performed, but did provide a useful checklist during integration and test activities.  Integrate and Test Federation: In this step, the federation development team met for a scheduled week of integration and test activities at the NRL integration facility.  The main objectives were to verify that the federation execution could be created, each of the federates could join the execution, that the information exchange defined by the Phase I FOM was being supported correctly, and that all track data updates initiated from NSS were being properly displayed at the GCCS-M workstation.  Although a week had been allocated for these activities, this step was successfully completed in only 2.5 days.  This was primarily due to the fact that the HLA interfaces of both federates had been tested and exercised in federations before, and needed only minor modifications to support the Phase I objectives.  The general experience level of the federation development team also contributed to the speed and ease by which the Phase I objectives were met. Finally, the last major activity of this phase was to conduct detailed planning for Phase II of this project, and identify necessary planning activities for Phase III.  The next section of this paper will describe these plans, and detail the current status of this project.Phase IIWhile Phase I activities focused on simply establishing the federation and verifying that appropriate track information could be exchanged and displayed properly, the primary goal of Phase II is to provide a more realistic demonstration of NSS/GCCS-M interoperability (via the HLA) in support of C2I system operator training.  This goal requires that the following activities be performed:Implement the capability to issue commands/orders from GCCS-M (as HLA interactions defined in the FOM for this federation). The two types of orders identified for Phase II are the Position of Intended Movement (PIM) commands, and formation commands such as Screen Kilo and Whiskey Grid.Implement the capability for NSS to react appropriately to the receipt of these two types of orders from GCCS-M.Develop the “storyline” for the federation demonstration.  This includes identifying the appropriate phases in the scenario where the GCCS-M operator can (and should) make decisions and issue orders.The test and integration experiences of Phase I also pointed to a need for a new capability in NSS, the ability to shift between running at a 1:1 ratio of simulation speed to wall clock time and running at a ratio of n:1 (i.e., faster than real time).  NSS can support either ratio, but currently it does not have a mechanism to allow an operator to switch easily from 1:1 to 4:1, for example.  As part of Phase II, the NSS team will implement a “variable speed” capability in NSS, so that the scenario can execute as fast as possible during those phases of the scenario when no GCCS-M operator intervention is appropriate, and can operate in real time during scenario phases in which operator intervention may be appropriate.  Some progress on Phase II activities was made during Phase I.  For instance, GCCS-M has successfully demonstrated that it can issue PIM Track interactions, and NSS has demonstrated that it can receive and react to such interactions.  The current Phase II development plan contains an allocation of responsibility for remaining tasks to individual federation members, with Phase II integration activities scheduled for the week of 2-6 August. Another activity that will be ongoing throughout Phase II is to perform detailed planning for Phase III.  As mentioned earlier in the paper, the primary goal is to examine a broader set of GCCS-M segments and mission applications that can potentially benefit from stimulation by a combat simulation.  Other ideas that were identified during Phase I testing include the ability to display the perceptions of multiple commanders on multiple GCCS-M workstations (using the HLA Data Distribution Management services), and the ability to use NSS in a Course-Of-Action (COA) assessment mode to evaluate plans created on the GCCS-M workstation.FEDERATE INTERFACE DESIGNGCCS-MBecause GCCS-M is built upon a DII COE foundation, the GCCS-M federate team was able to reuse software developed for the Global Command and Control System (GCCS), another DII COE-compliant C2I system intended for use at the Joint and Theater levels by commanders and staffs of all Services.  A software process called the GCCSAmb (short for GCCSAmbassador) was implemented to interface the GCCS Common Operational Picture (COP) application with the RTI as part of a FY98 federation project.  This process was used as the starting point for the GCCS-M interface software to the RTI.  The GCCSAmb calls the necessary RTI services to join the federation, announce publications and subscriptions, receive object attribute updates, and send interactions.  When a set of object attribute update values is received, the GCCSAmb matches the incoming data against the set of known track objects that it is maintaining and calls some of the functions provided by the TDBM API to put updated values into the track database.  From there, normal functions of the COP take over, receiving notification that values in the track database have been updated and updating the COP display.  Figure 3 shows the relationship of the GCCSAmb software process to the other key software components used in the implementation.Figure 3. GCCS-M Software SchematicNSSMetron, the NSS development team, has written a layer of code that conceptually resides between the simulation and the RTI, which is called the HLA Integration Framework (or simply, the framework).  It consists of a C++ main function and an assortment of software tools that facilitate the HLA-related tasks that the simulation must perform.  The primary goal of the framework is to insulate the simulation from RTI-specific code. It has three key features that support this goal:Contains a set of attribute classes, which behave just like built-in types, except that whenever their value is changed, they generate an update attribute message.  This relieves the simulation from having to create an AttributeHandleValuePairSet and invoke the updateAttributeValues method every time it modifies a published attribute.  The attribute classes use operator overloading to hide the RTI-related attribute update code from the simulation.  As a result, the simulation need only replace the declarations of basic types with those of the special attribute classes.Maintains the RTI-specific identifiers for object classes, interaction classes, object attributes, instances of objects, interaction parameters, etc., which are necessary in order to invoke many of the RTI methods.Handles data formatting issues.  It allows the use of either ASCII character data or binary data, and it contains byte-ordering code for binary data in order to deal with endian differences among federates.  It also performs rudimentary error checking of binary buffers.Since it provides a C++ main function, the framework has the thread of control and invokes the simulation.  Thus, the simulation can be run in stand-alone or in HLA mode.  The framework handles the RTI services used by the NSS federate:federation management – creating and destroying the federation execution, joining and resigning from the federation execution, instantiating the RTI and federate ambassadors,declaration management – publishing and/or subscribing to object attributes and interactions,object management – object instantiation and/or deletion, attribute update/reflection,time management – coordinating the simulation’s event processing with global federation time, thus ensuring that the simulation does not run too far ahead or fall too far behind.A main design goal for NSS was to capture explicitly the flow of C2 and intelligence information.  In order to accomplish this, NSS explicitly models commanders at three different levels – platform, mission, and group – as well as the information processing behaviors associated with each of these commanders.  In essence, NSS has a model to represent C4ISR systems like GCCS-M.  The design of NSS allows the integration of NSS with GCCS-M to be fairly straightforward.  The portion of the simulated NSS commander object that deals with data fusion needed to be set up to output the commander's simulated perception to GCCS-M.  Similarly, commands from GCCS-M such as PIM tracks, Four-Whiskey, and Screen Kilo orders can be transmitted into the appropriate commanders within NSS.Much of the effort of integrating NSS with GCCS-M focused on data translation.  In addition to writing C++ classes for each of the objects and interactions in the FOM, the NSS team wrote a GCCS_Translator class that served to translate NSS tracks into the Track.Platform objects that were specified in the FOM.  This class also performed parsing of incoming interactions – the PIM_Track and the Screen Kilo and Four-Whiskey formations – and translated them into NSS orders.  For the correct outgoing (to GCCS-M) data values and an interpretation of the incoming ones, the team referred to the OTH-Gold Specification.With very little additional coding, the framework was used to implement a test federate that emulated the HLA-specific behavior (e.g. joining/resigning, publishing/ subscribing, attribute update/reflection) of GCCS-M.  This allowed the NSS team to test the NSS federate in an actual federation execution well in advance of the on-site integration date.SUMMARYThe results of this project thus far indicate that the HLA provides an excellent foundation for developing reusable solutions to the many C2I-to-simulation interoperability projects that are underway in the DoD.  The increasing availability of HLA-compliant simulations and HLA-compliant C2I systems will reduce the time and costs associated with basic technical interoperability.  This will allow future project teams to focus on the more advanced aspects of the problem, such as expanding the data flow between C2I systems and simulations to provide feedback and stimulus to more complex information management applications on the C2I systems.  Also, the capabilities of combat simulations can be expanded to include more capable automated intelligent agents that can respond to and react to orders from human participants using C2I systems.ACKNOWLEDGEMENTSThe authors wish to recognize and thank the following members of the federation development team for the willing contribution of their energy, talents, and experience to the project: Jeff Jones, and Dr. Bill Stevens (NSS, Metron); Chip Bulgin and Jennie Womble (GCCS-M, ITT), and Dr. Gene Layman (GCCS-M, NRL).  We appreciate Paul Reeves’ efforts to provide access to knowledgeable sources in the GCCS-M Program Office at SPAWAR-SSC, San Diego, CA.  We also thank CAPT Joe Celano and Mr. Jeff Wallace for their cooperation on the use of NSS and their enthusiasm and support for the project.REFERENCES[1]   Defense Modeling and Simulation Office (DMSO), “HLA Federation Development and Execution Process (FEDEP) Model, Version 1.3”, December 1998.Author BiographyROBERT LUTZ is a principal scientist at the Johns Hopkins University Applied Physics Laboratory.  He has over 18 years of experience in simulation design and development. He is currently leading or participating in several HLA-related projects, including development of the HLA FEDEP.  He is a member of the HLA technical support team, is the lead editor for IEEE Standard P1516.2 (Object Model Template), and serves as the chair of the SISO Federation Development Process Forum.  Mr. Lutz holds a Master of Science Degree in Operations Research from the State University of New York at Stony Brook.MARNIE SALISBURY is a Principal Engineer at The MITRE Corporation.  She has seven years of experience in battlefield simulation and interoperability, including 15 months as Technical Director for the DARPA STOW program.  She currently leads the HLA cadre outreach team.GARRETT BIDWELL is a Software Analyst for Metron Inc.  For the past three years he has worked on DARPA- and DoD-related software projects in the areas of military logistics, scheduling, optimization, and simulation.  He is the lead developer for HLA interoperability in NSS.RTI 1.3 librariesRTI APITDBM APIGCCSAmbDII COE KernelTCP/IPsocketRTI-based FOM data exchanges over LAN or WANsocketGCCS-M WorkstationCOP(application)TDBMTDBMlibs   