The OneSAF Objective System: Block A DevelopmentRobert L. Wittman Jr.MITRE CORPORATION3045 Technology Parkway, Orlando, FL 32826321-235-7601 HYPERLINK mailto:rwittman@mitre.org rwittman@mitre.orgCynthia T. HarrisonU.S Army Simulation, Training and Instrumentation Command (STRICOM)3045 Technology Parkway, Orlando, FL 32826407-384-3845charrison@ideorlando.orgKaren WilliamsU.S Army Simulation, Training and Instrumentation Command (STRICOM)3045 Technology Parkway, Orlando, FL 32826407-384-3937kwilliams@ideorlando.orgKeywords: OneSAF, Computer Generated Forces (CGF), Semi Automated Forces (SAF), ProductLine Development, Product Line Architecture ABSTRACT:  The OneSAF Objective System (OOS) is the next generation Army simulation system being developed to provide an integral simulation service to the U.S. Army’s Advanced Concepts and Requirements (ACR), Training, Exercises, and Military Operations (TEMO), and Research, Development, and Acquisition (RDA) domains.  With requirements ranging from providing closed-form analytical support to command level human in the loop training, OOS will be an HLA/DIS compliant entity level simulation.  It will allow the simulation of individual battlefield components like soldiers, tanks, helicopters through aggregate units to the Brigade level operating in either a completely automated mode or under the control of a role player.  Simulation entities, units and behaviors will be composable both before and during the exercise to allow ordinary task organizations to be defined, ordinary equipment sensor combinations to be developed, and new combinations of equipment and sensor groupings as well as equipment and behavior groupings to be simulated before making the large investment in either a hardware prototype or one involving a human operator in a dangerous situation.  To meet these requirements STRICOM is using an evolutionary based block development approach.  Block A intends to provide the overall system architecture along with supporting simulation infrastructure and toolset software that will be extended during Blocks B-D with military domain models.  The objective of this block approach is to provide a useful training and analysis simulation tool at the completion of Block B and then to enhance the functionality based on user feedback and original Operation Requirements Document requirements through Block D.  This paper describes the current OOS progress with respect to architecture and toolset development to achieve a successful Block A delivery at the end of Fiscal Year 2002.IntroductionThe One Semi-Automated Forces (OneSAF) Objective System is the United States (U.S.) Army’s next generation, composable, entity based simulation system.  It is being developed to provide an integral simulation service to the Advanced Concepts and Requirements (ACR), Training, Exercises, and Military Operations (TEMO), and Research, Development, and Acquisition (RDA) domains.  With requirements ranging from closed-form analytical support to command level human in the loop training, OneSAF will be a High Level Architecture (HLA)/Distributed Interaction Simulation (DIS) compliant entity level simulation providing a common solution for a broad range of user requirements.  In order to realize this vision an innovative product line management and development approach has been selected.  The primary purpose of this paper is to describe OneSAF’s Block A product line architecture progress.BackgroundThe OneSAF concept originated in January 1996 following an extensive study that came to the conclusion that the Army was caught in a wasteful spending cycle, making identical or similar enhancements to legacy simulations across three different user domains. Furthermore, it was determined that none of the existing legacy simulations were capable of being extended to provide comprehensive support of emerging Army functional requirements and technical standards.  Realizing this, the Army decided the best approach for overcoming the problems associated with the multitude of aging simulations was to create a single general-purpose entity level simulation.  This solution relies on using lessons learned from successful simulation projects like the Modular Semi-Automated Forces (ModSAF) simulation, and the Close Combat Tactical Trainer (CCTT) SAF. [8]In May of 1997 the Deputy Commanding General (DCG), Training and Doctrine Command (TRADOC) approved the Mission Needs Statement (MNS) for OneSAF which stated [7]:“The need for OneSAF capabilities is not a response to a specific warfighting threat against the force; the need is driven by the guidance to reduce duplication of M&S investments, foster interoperability and reuse across M&S domains, and meet the M&S requirements of the future force.”Shortly thereafter, a Cross-Domain Integrated Concept Team was established to design a simulation acquisition strategy, begin harmonizing user requirements, and perform early architecture analysis.  This effort has evolved over the past 5 years and is now culminating in the completion of the Block A activity.  Block A has focused on development of the OneSAF product line architecture and initial implementations of the various composable products and components.In the spring of 2001, the OneSAF Architecture and Integration contract was awarded to SAIC.  The responsibilities associated with the A&I contract include the integration of Government identified reusable products, implementation of key product line components and data necessary to fully exercise the product line architecture.  A fundamental goal of the Block A activity is to support significant model development activity in the following Blocks B-D. The development activities currently underway include the following:The Environmental Data Modeling (EDM) task which provides a data model of all OneSAF relevant environmental features and their attributes.The Environmental Runtime Component (ERC) task which leverages the Warfighters’ Simulation (WARSIM) synthetic environment runtime database format and services as a reuse starting point for development of the OneSAF runtime environment.The Knowledge Acquisition/Knowledge Engineering (KA/KE) task which provides the early definition of battlespace information, based on authoritative sources, to support battlespace model development in future blocks.The KA/KE Tools task which leverages the Functional Description of the Mission Space (FDMS) tool developed under the Defense Modeling and Simulation Office’s sponsorship to store and manage KA/KE products.The Military Scenario Development Environment task (MSDE) which leverages work performed for the Close Combat Tactical Trainer (CCTT) program in the development of a simulation independent scenario development tool.The After Action Review (AAR) task which leverages an existing COTS product as the starting point for the OneSAF AAR product.The After Action Review Interface (AARI) task which provides a public interface to the SAF to promote the use of existing and externally developed AAR systems.Additionally, new tasks are being awarded to start the development of Block B functionality in the areas of AAR, scenario development, C4I connectivity, and modeling.Army Community InvolvementThe Army continues with its monumental task to coordinate the various user domains, the combat developer, and the acquisition community in order to create a single operational and technical vision for OneSAF.  This section describes the Army organizations involved in the OneSAF program: the ACR, TEMO, and RDA Domains, TRADOC, and STRICOM The ACR domain is under the direction of the TRADOC Analysis Center (TRAC).  This community is primarily interested in the analytical application of modeling and simulation.  Their intended uses of OneSAF include the following:To explore new and advanced concepts with respect to equipment, organizations, doctrine, and operational environments,To develop and evaluate tactics and Operational Plans for organizations at Brigade and below,To create data that can be used as input to other closed form analytic simulations,  andTo provide training associated with a specific location prior to real-world deployments. [8]The TEMO domain is led by TRADOC’s National Simulation Center (NSC) located in Ft. Leavenworth, KS.  Their focus for OneSAF includesUnit training where OneSAF will be used as a simulation driver for round out forces,Unit commander and staff training at battalion and below in a training exercise, workshop, or seminar environment,Unit Division commander refresher training, andAs a mechanism to link live, virtual, and constructive Synthetic Theater Of War like environments. [8]The U.S. Army Materiel Systems Analysis Activity (AMSAA) leads the RDA domain with the primary purpose of Simulation Based Acquisition (SBA).  They operate out of the Aberdeen Proving Grounds in Maryland and expect to use OneSAF in support of the following:Weapon systems development and product improvement using appropriate military settings and context,Technical development, test, and evaluation support for Army modernization objectives, andCommunications design experiments. [8]The TRADOC Program Office, OneSAF (TPO OneSAF) is the Combat Developer for OneSAF and is responsible for the development of the OneSAF Operational Requirements Document (ORD) [8].  The TPO OneSAF has made significant contributions in defining specific cross-domain requirements with support from the RDA, ACR, and TEMO user communities.STRICOM serves as the Materiel Developer for OneSAF.  The Commander of STRICOM was delegated as the Milestone Decision Authority (MDA) for OneSAF by the Army Materiel Command in May of 2000 concurrent with the official standup within STRICOM of the Product Manager OneSAF (PM OneSAF) office.  STRICOM/PM OneSAF has been and continues to be the focal point for all OneSAF concept exploration efforts and development contracts.  STRICOM is using the existing STRICOM Omnibus Contract (STOC) as the vehicle to access the simulation and software development expertise to create OneSAF. PM OneSAF also provides the coordination function to ensure the User Domains remain involved in the contracting and simulation development process.OneSAF Block A DevelopmentBackgroundThe OneSAF Objective System (OOS) acquisition strategy is based on a Product Line Architecture (PLA) allowing user oriented system compositions of independently developed components and products.  In order to mitigate risk and move away from the “big bang” theory of simulation development the OOS delivery schedule has been broken up into chunks of meaningful functionality delivered every 12-24 months.  The Block development activities are based upon commercial software development best practices which support rapid development and continuous integration of evolving product line artifacts that result in Block releases with incremental capabilities.  In general, Block A is focused on proving the product line architecture.  This development centers on delivering a working infrastructure and variety of user oriented products that can be enriched to support the full breadth of the OneSAF domain requirements during the Blocks B – D and Pre-Planned Product Improvements (P3I) phase.  ObjectiveThere are two overall objectives to the Block A development activity.  First, the complete Product Line Architecture Specification (PLAS) made up of a written specification detailing the interfaces, architectural rules and constraints, and functionality of the OneSAF products and components.  The PLAS must be supported by a working implementation showing integration of the early products and infrastructure in accordance with the PLAS.  Thus demonstrating a viable architecture and integration processes to support eventual Block D success.  The second objective is to position the program to begin significant efforts during Block B to develop unit, equipment, and behavioral models of the battlespace in support of operational requirements.ScheduleThe Block development and fielding strategy focuses on providing early militarily useful capabilities to the users to meet interim requirements and to solicit critical feedback.  Block A is the first of these deliverables and is scheduled to complete at the of Fiscal year (FY) 2002.  Block A is focused on proving out the product line architecture and will have very limited operational usefulness.  Thus Block A will be delivered only to key sites that will support architecture and tool assessment and provide feedback on the initial capabilities. The following Blocks will be delivered on an approximately yearly basis beginning with Block B in late 2003 and continuing through Block D (Final Operational Capability (FOC)) in 2005 with potential P3I development occurring in later years. OneSAF Product Line Architecture Development BackgroundClemens and Northrop in their recent book titled, “Software Product Lines: Practice and Patterns” credit 1995 as the year in which they started their product line development exploration.  It all began with a Software Engineering Institute (SEI) study to categorize software architectural patterns and their relationship to software quality factors.  As part of this research an architectural characteristic was identified that enabled different software products to be developed using software components intended to support a range of products. The software product line concept was born out of a need to develop new software products faster and cheaper by identifying, developing, and using common software and developmental artifacts. The optimization of these architectural characteristics is the focus of software product line development. The intended result of properly applying this quality is reduced time to market and lower overall multi-product development costs.  Clemens and Northrop site many examples of product line efficiencies in other industries including manufacturing, food service, and community planning.As defined by Clemens and Northrop, "A software product line is a set of software intensive systems sharing a common managed set of features that satisfy the specific needs of a particular market segment or mission and that are developed from a common set of core assets in a prescribed way." [3, p. 5]The interpretation of this definition is that software product line development is not simply a new process to code, a new software language, or a new set of design patterns.  Rather it’s a complete system engineering based approach to manage and contain complexity and chaos across all phases of the software engineering lifecycle. A product line of naval command and control systems developed by Swedish defense contractor Celsiustech in 1985 is given as the earliest example of a successful software product line by Clemens and Northrop.  In an effort to meet the demands (cost, schedule, and performance) of two separate contracts for naval command and control systems the organization implemented a product line concept.  Their focus was to create a base of common software components to support the variability between the two systems allowing a core set of software components to be used to construct both systems.  In a more recent software oriented systems engineering effort the United States Defense Information Infrastructure Common Operating Environment (DII/COE) developed by the Defense Information System Agency (DISA) also fits well within the product line concept. The DII/COE defines a core set of services that can be employed to support a variety of mission area applications.  Specific core assets are segmented to support specific mission area applications.  The end goal is to have the mission area applications use services provided at lower layers and not have to re-implement them. [5]The OneSAF notion of a Product Line Architecture is consistent with the definition of software architecture offered by Bass in 1998 and referenced in Clemens and Northrop.  Bass defines software architecture as"The software architecture of a program or computing system is the structure or structures of a system which comprise software components the externally visible properties of the components and the relationships among them. By externally visible properties we are referring to those assumptions other components can make of the component such as its provided services, performance characteristics, fault handling, shared resource usage and so on."The OneSAF product line uses these architectural concepts to guide and constrain the development of OneSAF compliant software assets.Product Line Architecture Dependencies: People, Process, and TechnologyThe product line philosophy has been undoubtedly referred to by some as the next software “silver bullet” that Frederick Brooks Jr. warns against in his “Essays on Software Engineering”.[2]  It’s arguable whether the SEI findings could be construed along such lines, however, if one looks at the details you quickly see that there is tremendous effort necessary to realize the benefits of product line development.  Work is necessary in all facets of software development considering people, processes, and technology factors.PeopleAll individuals involved in system development: system and software architects, developers, requirement analysts, and managers have to actively understand and be involved in the identification, development, and use of common assets to support multiple product development.  Some of the biggest challenges are related to software development cultures and the “not invented here” syndrome.  Software entropy, a force defined by Stytz and Banks (2001) that causes implementations to deviate for prescribed architectures, is a powerful force and it takes energy, understanding, and discipline to avoid unnecessary duplication and remain consistent with the goals of product line development.[9]  Barry Boehm in the forward to Clemens and Northrop gives a classic quote from his initial experience with reuse attributed to a member of his software development team, “That stuff’s not reuse.  If you want really reusable components let me rebuild them for you.”ProcessesProduct line development processes must be in place to encourage development, accessibility to, and use of core assets. Clemens and Northrop define core assets not just as code but include such things as domain models, requirements, documentation, schedules, budgets, test plans, process descriptions, etc. Processes must be optimized for product composition using core assets.  The urge to build from scratch must be discouraged.  This notion of core assets describing any valuable planning or developmental artifact is consistent with OneSAF ideology.  Although this paper focuses on the OneSAF product line architecture other analysis, design, and development artifacts are considered equally as important to the success of OneSAF.  The OneSAF product line architectural development process employs a number of tactics to ensure a viable product line architecture.The first of these tactics is employing a balanced software engineering development process.  OneSAF is working to strike a balance between an agile, or code first philosophy, and a top-down requirements, planning, and documentation based approach to architectural development.[1]  OneSAF architectural design activity is mirrored by a sentiment offered by Highsmith and Cockburn (2001) to assure OneSAF documented architectural components are viable and mature.  Agile development proponents Highsmith and Cockburn state,“Working code tells the developers and sponsors what they really have…as opposed to the promises of what they might get…working code can be shipped, modified, or scrapped, because it is real.”[6]In support of this, OneSAF is using an evolutionary, iterative and incremental approach to architecture development.  The process is based on using implementation feedback, based on initial architectural design, to formalize and verify the architectural interfaces to meet software and user client requirements.  The OneSAF Architecture and Integration (A&I) contractor’s internalization of this evolutionary approach is evident in the Architecture Specification levels.[4]  Five levels of progressive architectural component maturity are defined.  These levels assist in the efficient management of architectural and software development.  Furthermore, they are used to show valid progress toward the end goal of a robust feasible product line architecture supportive of distributed multi-organizational development.   Level 0 identifies an ambiguous OneSAF system requirement that needs additional system level analysis to identify the specific OneSAF architectural components that are affected or need to be generated by the requirement.  Level 1 identifies requirements that have been allocated to a specific OneSAF Architectural component and have a written explanation of the services, interface, and parameters necessary to access those services.  Level 2 identifies a component with a defined software Application Programmers Interface (API),  Data Interchange Format (DIF), or Graphical User Interface (GUI) to the architecturally defined services. The services themselves are stubbed out but allow for clients of the services to compile code, review data interchange specifications, and review GUIs for completeness.Level 3 identifies a component with a defined API, DIF, or GUI and a partial implementation of the services behind the interface. Level 4 identifies a component with a defined API, DIF, or GUI and a complete implementation of the services behind the interface.TechnologySoftware engineering tools selected for use should recognize and augment the processes and people they are intended to support.  People and process must not be overly constrained or have to work around the selected tools.  Tools should accept and act on data in well-defined ways and along well-defined boundaries so that as new tools are discovered they can be incorporated into the process.  The technology underpinnings selected and implemented by the A&I include:Web-based architecture development environment.  All OneSAF developmental assets are accessible through web-based mechanisms.  These assets are configuration managed using the Concurrent Versioning System (CVS) and include the architecture definition (static and dynamic), current defects and issues, schedules, as well as software development, and integration and test process definitions.Data-centric approach to information management. All formal data within OneSAF is defined, stored, and accessible through specific XML based Data Interchange Formats.  Formalized OneSAF processes have been defined to take advantage of Commercial Off the Shelf (COTS) XML-based technology. This technology is being leveraged to support automated and managed compliance checking, storage, and retrieval of OneSAF information across all phases of the OneSAF simulation lifecycle.Continuous and managed integration using automated baseline testing and feedback tools.  Tools such as Buildboy, Ant, Junit, Winrunner, and Optimizit are used to ensure newly developed code is integrated and tested.  If baseline breakage occurs automated processes provide notification that the baseline has been broken.  Then an earlier baseline can be reinstalled or a fix can be made and reintegrated.This section provided an overview of the basics to OneSAF Product Line Architecture development.  Section 5 provides a closer look at the evolution of the architecture over the past 9 months.9 Months of Architecture DevelopmentThe OneSAF Product Line Architecture Framework (PLAF) Version 13, shown in Figure 1, has evolved as was intended, over the past 9 months. The PLAF’s evolution has focused on improving its organization and its support for the OneSAF exercise lifecycle.  After the A&I contract award in May of 2001, SAIC began a comprehensive analysis of the OneSAF PLAF.  This occurred in parallel with system requirements engineering and laying in the foundation to being product line software asset development.  This section describes the OneSAF architecture development over the past 9 months in the context of the PLAF.Mission Area Applications (OneSAF System Configurations)Prior to contract award the Mission Area Applications (OneSAF System Configurations) architecture layer held three blocks showing the system configurations to support the TEMO, ACR, and RDA domains.  The system configurations show the ability of the OneSAF products to be composed into specific OneSAF System Composition to support the OneSAF user domain implementations.  The A&I analyzed the Operational Concept Document and derived at least six independent System Configurations necessary to support the wide range of user needs.  A brief description of each of the example configuration is provided below.Leader & Staff Training System Configuration:  This system configuration is optimized for Brigade, Battalion, and below Commander and Staff operational and schoolhouse training.  It’s intended to functionally replace the JANUS and Brigade/Battalion Simulation (BBS) in support of training. Leader & Staff MOUT Training System Configuration: This configuration is optimized for Brigade, Battalion, and below Commander and Staff Military Operations Urban Terrain (MOUT) schoolhouse and operational training.  It’s intended to functionally replace the Joint Conflict and Tactical Simulation (JCATS) MOUT training capability.Figure 1. The OneSAF Product Line Architecture FrameworkLeader & Staff Mission Rehearsal System Configuration: This configuration is optimized to support a Brigade, Battalion, and below operational Mission Rehearsal System. Standalone Analytic Simulation System Configuration: This configuration is optimized for simulation based analysis within the ACR and RDA domains.  Analysis needs include doctrine and tactics, coarse of action analysis, and weaponry performance analysis.  Stimulator for Virtual Simulations System Configuration: This configuration is optimized for interoperability with virtual simulations like the Close Combat Tactical Trainer (CCTT).Test and Evaluation Support System Configuration: This configuration is optimized to support test and evaluation of real-world systems.  Stress testing information flows into real-world Command, Control, Communications, Computers and Intelligence (C4I) systems is an example of a testing application of OneSAF.Other System Configurations:  This configuration is identified to explicitly state the requirement for user level system configuration compositions.  It is known that the OneSAF system will have a variety of end users.  Therefore, the System Composition Product will allow a sophisticated technical user the tools to construct a new OneSAF System Composition for a particular user need that has yet to be defined. OneSAF Product Layer/OneSAF Component LayerThe OneSAF Product Layer has gone through several revisions in order to enhance the cohesiveness of components within this layer as well as to increase Product support to the OneSAF exercise lifecycle.  The OneSAF evolution of the OneSAF Component Layer will be addressed in this section as the components are responsible for providing the functionality encapsulated by the Products.  The System Composer Product: This product was separated from the Model/Composer Product to better support the System and Product Composition Phase of the Exercise Lifecycle.  It contains the Simulation Composer Component.  The system composer is largely based on JavaBeans technology in order to compose Components into Products and Products into System Configurations.Knowledge Engineering/Knowledge Acquisition Environment: This product and its associated component, the KA/KE Tools Component, provide the tools to store, organize, and review the knowledge acquisition and knowledge engineering products.  The Knowledge Acquisition team is developing Knowledge Acquisition Documents (KAD) templates that will be filled with descriptions of real-world entities, processes, and behaviors providing the basis for model representations within OneSAF.Event Planner Product: This product and its associated Components: the Military Scenario Development the Environment, Environment Database Generation Environment (EDGE), and the Data Harvesting and Translation Utilities evolved to support simulation event planning and military scenario development tools.  The EDGE Component, envisioned to generate OneSAF compliant SEDRIS Transmittal Formatted (STF) environmental data-sets was moved from the Simulation Generator Tool to more cleanly support the OneSAF system lifecycle.  The Data harvesting and Translation Tools Component is envisioned to allow existing scenarios and environmental data-sets to be imported into OneSAF was also moved from the Maintenance Product to better support the OneSAF system lifecycle.Model Composer Product: This product and its supporting components: Entity Composer, Unit Composer, Behavior Composer, and Environment Composer are used to construct simulation entities, units, and behaviors from existing primitive and composites.  This product was unchanged during this period.Simulation Generator: This product and its components: the Simulation Scenario Development Environment and Data Collection Specification Tool create a OneSAF simulation definition that defines the OneSAF unit, entity, and environment models that will be employed within the simulation.  The Data Collection Specification Tool defines the data to be collected during the exercise.Tech Manager: This product contains the Simulation Configuration Tool, the Federation Development Tool, the Performance Modeling Tool, the Network Loader Tool, and the Benchmark Tool.  The product was modified to include the Benchmark tool to support the technical configuration and performance estimation aspects of the tech manager.   The executable builder tool, originally part of this product, was moved into the OneSAF Component Support Layer to support both the Tech Manager and System Composer Products.Simulation Core: This product and supporting components: Unit Models, Entity Models, Behavior Models, Physical Models, and Environment Models provide the representations that form the basis for the OneSAF simulation.  The simulation services originally part of this product were incorporated into the OneSAF Component Support Layer.Simulation Controller: This product and its components: Management and Control, Federation Management Tool, and the System Asset Management Component.  The Annotator tool and Data Collector Tool were moved to the Analysis and Review Product to reflect a cohesive product set rather than to focus on when these products were active during the simulation lifecycle.  The System Asset Manager Component was moved into this product from the Maintenance Environment Product to reflect its association with Simulation Control.C4I Adapter: This product and its components: Monitor and Control Services, Translation Services, and Connect Services have not been modified.Analysis and Review: The product was renamed from AAR to Analysis and Review to accurately describe the products functionality.  The Data Collector, Annotator Tool, and Verification and Validation Tool Components were added to this Product to focus their support for Analysis and Review.Repository Manager: This product and components: the Data Management Tool and the Information Security Tool were added to support user oriented management of the repository data.  This new product highlights the architecture’s overall data-centric approach to manage and control OneSAF data.Maintenance Environment: This product and its components: Software Engineering Environment, Configuration Management tool, Defect tool, Independent Verification and Validation tool, System Accounting Tool, Software Installation Tool, and System Distribution Utilities support maintenance and technical user oriented access to the system.  The Defect tool was added to emphasize system and software engineering processes across the OneSAF lifecycle.OneSAF Component Support LayerThis layer identifies the first set of supporting software services.  As system analysis and design have continued the Component Support Layer has expanded, as intended, beyond the initial four services identified in the following list:Mapping, Charting, Geodesy, and Imagery Services: This component provides access to environmental services for computer generated forces (unit, equipment, and behavior model components) environmental reasoning.  These services include but are not limited to line of sight and height above terrain.  This component also provides access to two and three-dimensional synthetic environment visualization data for use by higher level components like the Military Scenario Development Environment, Management and Control, and After Action Review Components.  Block A will provide a limited subset of the environmental services in order to execute an end-to-end scenario verifying the architectural interfaces.System Repository Services: This component provides access to the Repository Component Layer in terms of read, write, and browse access to all higher level components.  All repository information sets are defined using XML-based Data Interchange Formats.  The XML-based policies and format definitions have evolved in an integrated product team environment and are available on the OneSAF website.  Block A will provide a full set of services to access OneSAF compliant repository information.Graphical User Interface Services: These services provide the common widgets and GUI style policies to produce OneSAF compliant windows and displays and will be used by components and products to display relevant information.  Components that are being reused may utilize other common services like the system repository services to access OneSAF data but may be allowed based on cost/benefit trades to utilize their native GUI services.  Block A will provide a partial set of GUI services that comply with the OneSAF Style Guide. Simulation Services: The common simulation services include various probability distribution and random number generation algorithms as well as simulation time and event, distributed object, and checkpoint/restart management.  Block A will provide simulation services supporting single and multi node simulation.  Checkpoint/restart capabilities will be partially supported at the completion of Block A.Composition Services: These services use JavaBeans technology to provide the ability to compose components into Products and Products into System Configurations.  This technology largely is based on components providing descriptive meta-data that will be used to allow automated composition of OneSAF components and supporting services.  Block A will provide a partial implementation of the Composition Services.Executable Builder Tool: This service allows executable configurations to be generated according to the system and simulation parameters. Block A will provide a partial implementation of the Builder services. Online Help: These provide the common online help services that will be available to the OneSAF components for management, access, and display of help information.  Block A will provide a partial implementation of the Online Help services.Runtime Database: This is the persistent simulation runtime database used to support distributed multi-node simulation. Block A will provide a partial implementation of the Runtime Database services.Modeling Services: These services provide access to the simulation services and provide common software oriented behavioral modeling, unit modeling, and equipment modeling structural services. Block A will provide a partial implementation of the Modeling Services.OneSAF Repository Component LayerThis new layer was created to highlight the importance of managing OneSAF data throughout the System lifecycle.  Secondly, it highlights the separation of data from code and the benefits this brings.  Finally, it highlights the openness of the data allowing greater, although managed, access to the data, so that components and products can be added to the OneSAF product line without needing internal knowledge of existing components and products.  All information within the repositories must abide by the policies and guidelines established for OneSAF.  The partitioning of data into these sets was done to support system understanding and to support product variability.  For Block A, each of the repositories will be partially populated, and in all cases, the data will be largely prototypical test data.System Composition Repository: This repository holds the system compositions that have been created for OneSAF.KA/KE Repository: This repository holds the artifacts from the KA/KE processes. Military Scenario Repository: This repository holds the existing military scenarios.Environment Repository: This repository holds all environmentally related data including SEDRIS STF files and runtime formatted information for terrain reasoning and display.  Parametric & Initialization Repository: This repository holds all of the information regarding model and simulation initialization parametric data.  The simulation specific definitions created by the Simulation Generator Product will be held here as well.   Simulation Output Repository: This repository holds data captured as specified by the Data Collection Specification Tool Component during simulation execution.Software Repository: This repository holds all of the software artifacts created during the development of OneSAF.Common Services LayerThe Common Services offer support to the Component support layer services.  These services isolate specific hardware and operating system platform dependencies from their clients.  In addition, the OneSAF computational architecture leverages Java Virtual Machine (JVM) technology to support platform independence.  The majority of new software assets developed as part of the OneSAF product line rely on the JVM to isolate platform dependencies.  Although, the JVM goes a long way to isolate platform dependencies, it is not a complete solution.  Therefore, OneSAF is developing policies to protect higher level components from JVM specific thread implementations and other JVM implementation specific differences.  For Block A these services support the Windows NT and Linux operating systems.  For Block B this platform set will be expanded to include a Sun Solaris platform.Monitor Services: The monitor services give access to computer and network loading information.  This information will be used by upper levels components to display system status and will eventually be used to set alarms and control processor and network loading as well as migrate computation load from one platform to another. The services will be largely complete at the conclusion of Block A.Time Service: Time service provides access to platform clock services and to the Network Time Protocol (NTP) service.  Upper level components will use this to access local platform time and to synchronize time related information across platforms. The services will be complete at the conclusion of Block A.Name Directory Services: This set of services allows OneSAF components to register, request, and access services. Name services will support both non-distributed and distributed modes of operations.  The services will be partially complete at the conclusion of Block A.Messaging Services: The messaging services provides platform independent access to network protocols.  In addition, it allows control and management of all distributed messaging interactions through an abstracted interface to the platform layer network protocols.  For Block A, the Transmission Control Protocol (TCP) and User Datagram Protocol (UDP) stack interfaces will be supported.Storage Services: The storage services provide platform independent access to persistent file (disk) access as well as non-persistent memory access.  Utilization information (reads, writes, memory access) will also be collected and available to higher level components. The services will be partially complete at the conclusion of Block A.Interchange Services: This set of services allows appropriate syntactic exchange of information between higher components.  Among other specific services, it will provide isolation of the byte ordering representation issues between PC based implementations and Sun hardware.  All higher level assets that support network communication and sharing of information will utilize these services to ensure proper syntactic information exchange. The services will be partially complete at the conclusion of Block A.Middleware Services: This set of services allows access to other middleware implementations such as the RunTime Infrastructure (RTI), World Wide Web Servers, Common Object Request Broker (CORBA) Object Request Broker implementations, and database connectivity protocols.  An ORD mandated P3I requirement to interface to live ranges will also be supported here.  For Block A, an RTI-NG Version 1.3v4 connectivity effort will be piloted to set the stage for Block B HLA compliance.  HLA compliance for Block B is required by the OneSAF Operation Requirements Document (ORD) to support interoperability with WARSIM.  Platform LayerThe platform layer provides the hardware and operating systems (OS) that OneSAF will operate on.  The OneSAF program is not developing or deploying any hardware and is depending on users to provide their own hardware and operating system platforms.  For these reasons, OneSAF is developing to commonly and widely used hardware and operating system combinations.  For Block A, these are PC based systems running either Windows NT based (expected to include Windows 2000) systems or Linux.  As required by the ORD OneSAF will also execute on WARSIM provided hardware (scheduled for Block B).  The WARSIM hardware suite includes PC based systems for their Graphical User Interface and Sun/Solaris (hardware/OS) platforms for their aggregate force representations.OneSAF TestingOneSAF will execute a commercially modeled continuous development, test, and integration spiral. There will be various types of testing events for each Block to include: Development tests, Verification tests, Block Release tests and User Assessments.  Moreover, these tests will be used to ensure that all the Key Performance Parameters (KPP) in the OneSAF ORD are satisfied.  OneSAF developmental testing will be comprised of software and integration testing.  These tests fall into the following categories: Class/Unit, Component/SW Integration, Informal Product-System Integration, Formal Product-System Integration, and regression.  The OneSAF philosophy for Verification and Validation (V&V) is to have the V&V activities supplement the developmental test and evaluation process whenever possible.  Throughout the development phases for each block, there will be user assessments conducted.  The Block Release Test (BRT) is the formal test event performed at the end of each Block.  It is the final test the system goes through before it is released to the users and the last opportunity to ensure the system meets the requirements outlined in the PLRS and the expectations of the user community.  Block Release Testing includes both Developmental Testing and User “Operational like testing”.  Integration tests will evaluate whether OneSAF meets requirements (what to simulate and simulation characteristics).  Given the functionality in Blocks B, C, and D, appropriate End State Scenarios (ESS) will be selected and executed by designated user sites/labs.OneSAF Test Working Group (TWG)  The management of the OneSAF Test program to include the associated test organizations and working groups is provided in Figure 2. The Test Working Group (TWG) facilitates test planning and communication between OneSAF organizations.  The Government OneSAF Program Manager serves as the TWG chair with representation from each of the M&S domains, TPO OneSAF, Program Management, A&I Contractor, and developer Task Orders.  The TWG is responsible for assessing demonstration and testing results and reporting those findings to the OneSAF IPT.  An important role that the TWG serves is the evaluation and promotion of the User Evaluation Baseline (UEB). The UEB is then used to conduct the user assessments during each Block development and capture user feedback.  EMBED Word.Picture.8  Figure 2: OneSAF Test Organizations and Working GroupsBlock Acceptance CriteriaThe OneSAF program has seven Key Performance Parameters (KPPs).  These KPPs are 1) System Capability, 2) Automated Units and Behaviors, 3) Composability, 4) Interoperability, 5) Exercise/Study Support, 6) Extensibility and 7) Battlefield Phenomenology.  For each block, a set of Block Assessment Criteria (BAC) will be used to support test and evaluation events. Each criterion will have a threshold and objective. The BAC thresholds will serve as the T&E criteria.  Criteria are not provided as default pass/fail measures, but represent estimates of performance for which a breach would require careful senior level management reassessment of cost effectiveness and program options during the milestone decision review. The BAC were derived by decomposing the KPPs into per block capabilities. As OneSAF development progresses, the BACs will include capabilities culminating in Block D that are equivalent to the OneSAF KPPs.  Moreover, the BACs identify the legacy simulation functionality and the associated capabilities expected per block. The BACs were also used in defining and developing the Product Line Requirements Specification (PLRS) to insure that the PLRS encompassed the KPP requirements.The STRICOM Program Manager, with support from the A&I, leads the developmental test efforts to verify the PLRS requirements per Block.  TPO OneSAF leads the user testing efforts which concentrate on verifying both the Block Acceptance Criteria (BAC) for Blocks A-D and the KPPs.Block A TestingAs stated earlier, the Block A delivery includes the complete PLAS made up of a written specification detailing the interfaces, architectural rules and constraints, and a limited working implementation and integration of the early products and infrastructure in accordance with the PLAS that demonstrates and proves out the architecture.  This architecture and integration process evaluation helps to ensure eventual Block D success. The Block A PLRS includes requirements for each PLAF Product/Component that will be tested.The Block A delivery provides both limited behavior capability and physical model functionality such as move, acquire, and shoot.  Therefore, the Block A BRT will execute and evaluate a limited End State Scenario (ESS) that incorporates these limited capabilities and functionality that support Block A objectives.  The primary user evaluation mechanism for Block A will be the BRT, however, there will be some limited user assessments through the UEB releases.The later Block delivery capabilities will support more robust ESSs and TPO selected Use Cases that have been appropriately scoped by the threshold and objective functionality and capabilities for each block. In addition to the Block Release Tests, there will be a culminating user test using scoped ESS and selected use cases.  At the conclusion of Block D, a culminating T&E event will occur.  This event will include participation from the Army Test and Evaluation Command (ATEC) and the OneSAF government test team to include designated users. SummaryIn summary, the OneSAF product line architecture is progressing toward the Block A objective of providing a sound architecture to meet future Block functional requirements.  To do this the OneSAF team is using an approach focused and supportive of its people, processes, and technologies.  References[1]	Boehm, Barry. (2002) “Get Ready for Agile Methods, With Caution”, Computer, January 2002 Volume 35, pp 64-70.[2]	Brooks, Frederick. (1995) “The Mythical Man-Month: Essays On Software Engineering”. Addison Wesley Longman, Inc.[3]	Clemens, Paul; Northrop Linda: (2002) “Software Product Lines Practices and Patterns”, Addison Wesley.[4]	Courtemanche, Anthony. (2001) OneSAF PLAS Levels, July 17, 2001[5]	Defense Information System Agency (DISA). DII COE Overview,  DII COE Technical Exchange: May 15 2001. http://diicoe.disa.mil/coe/brief/ walker_051501.ppt[6]	Highsmith, Jim; Cockburn, Alistair: (2001) “Agile Software Development: The Business of Innovation”, Editor Barry Boehm, IEEE Computer September 2001, New Jersey[7]	OneSAF Mission Needs Statement (MNS), approved May 1997.[8]	OneSAF Operational Requirements Document (ORD) Version 1.1, 21 May 2001.[9]	Stytz, M., R., Banks, S.B. (2001) “The DMT Integrated Threat Environment System Architecture and Design”, ACM Transactions on Modeling and Computer Simulation, Vol. 11, No. 1, January 2001, Pages 106-133.[10]	Wittman, Robert; Harrison, Cynthia. (2001)  “OneSAF: A Product Line Approach to Simulation Development”, 01E-SIW-061, 2001.Author BiographiesROBERT L. WITTMAN JR. currently works for the MITRE Corporation supporting the OneSAF program.  He has been part of the U.S. DoD M&S community since 1990. He holds a B.S. in Computer Science from Washington State University, a M.S. in Software Eng. from the University of West Florida, and is working toward a Ph.D in Industrial Eng. at the University of Central Florida (UCF). CYNTHIA T. HARRISON currently works for the U.S. Army STRICOM as the Project Director for the OneSAF Program.  Since 1985, she has had a wide variety of experience in the Live, Constructive, and Virtual simulation domains for the Army and Navy.  Ms. Harrison holds Bachelor and Master of Science degrees in Computer Science from UCF.KAREN E. WILLIAMS currently works for the U.S. Army STRICOM as the Chief Engineer for the OneSAF Program.  Working as part of the U.S. DoD M&S community since 1985, she has held a variety of positions within DoD, industry and academia supporting distributed simulation development.  Ms. Williams holds a B.S. in Physics from Jacksonville University and an M.S. in Industrial Engineering from UCF.