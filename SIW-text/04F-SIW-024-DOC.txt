The Application of Base Object Models (BOMs) for Supporting Aggregation and Load-BalancingPaul GustavsonTram ChaseSimVentions, Inc.11903 Bowman Drive, Suite 102, Fredericksburg, VA 22408-7307 HYPERLINK "mailto:pgustavson@simventions.com" pgustavson@simventions.com		Mike HaddadUS Army PEOSTRI12350 Research ParkwayOrlando, FL 32826(407) 384-5338    HYPERLINK "mailto:mike.haddad@peostri.army.mil" mike.haddad@peostri.army.milKeywords:Aggregation, Composability, Base Object Models (BOMs)ABSTRACT: Base Object Models are specifically identified in the Federation Development and Execution Process (FEDEP) as a potential facilitator for providing reusable object model components to be used for the rapid construction and modification of simulations and simulation spaces. Specifically, it is the coupling of individual BOMs that is necessary for defining and representing the interface assembly for a simulation or simulation space. Essentially this coupling of BOMs, known as a Mega-BOM, is intended to define a higher order pattern. This higher order pattern may represent the overall activities required and represented by a federate or federation HLA specific solution.  Alternatively, it may represent an aggregation of entities that are individually represented by other BOMs. The application of BOMs can be used for supporting two types of aggregation: Pattern Aggregation and Instance Aggregation. Pattern Aggregations reflect the coupling of interface groupings that can be identified prior to an exercise. For example, a Mega-BOM of an automobile can be formulated reflecting the sum of its parts, which might include Interface (IF) BOMs such as an Engine, Wheels, Car Body, Braking System and Suspension. Instance Aggregations reflect the coupling of multiple entities into a single inclusive group, which can be accomplished during a federation execution. Essentially, a Mega-BOM would be used to represent a composite interface of a common group of federate objects. For example, a Mega-BOM representing a company might be established to represent an isolated group of troops and their associated vehicles and equipment such as a tank. The benefit of aggregation is that it can reduce the amount of data distributed over the exercise network. This paper explores the application of BOMs and Mega-BOMs for supporting these two types of aggregation. We also examine the benefits of applying aggregation in regards to Load Balancing. IntroductionAn increasing need within the joint warfare community is the capability to perform large-scale simulation exercises for realistically ascertaining combat scenarios and warfighter capabilities in support of mission planning and training.  These large-scale simulation exercises may require an entity load that is in excess of thousands.    The degree of resolution targeted for the models representing these entities coupled with the quantity of entities required to represent the combat environment and the need for real-time performance can put an undue strain on the systems that are at play. Typically what’s required for a large-scale simulation of this magnitude is an exorbitant amount of computational hardware, network bandwidth, and exercise management. Techniques such as scaling and filtering can be applied to boost abilities; however such exercise management practices are still limited to the available resources a system can allocate for each of the behavior models that are required at any one time during an exercise execution. The concept of aggregation, which is a technique for combining multiple entities into a single inclusive group, is considered a practical approach for managing large scale simulation exercises and improving overall system performance.  Unfortunately models used to represent entities and interactions are not typically built with aggregation in mind. Aggregation capable models are needed, which would allow differing levels of detail and resolution to be dialed up or down for any one model.A promising technology that supports combined model sets, which can represent aggregations,  and encourages the use of multi-resolution models are Base Object Models (BOMs).  Within the HLA community, BOMs have been specifically identified as a potential facilitator for providing reusable object model components to be used for the rapid construction and modification of simulations and simulation spaces. [1] Specifically, it is the coupling of individual Interface (IF) BOMs that can be used for defining and representing the interface assembly for a simulation or simulation space.  Essentially this coupling of IF BOMs, known as a Mega-BOM, is intended to define a higher order pattern.   This higher order pattern may represent the overall activities required and represented by a federate or federation, alternatively, it may represent an aggregation of entities that are individually represented by other BOMs.    SHAPE  \* MERGEFORMAT While BOMs provide an enabler for supporting aggregation and the application of multi-resolution models, aggregation is not an easy concept to implement and universally apply by federates within a federation. The key is to establish a common framework and approaches that can be automated, which could determine when and how to aggregate and deaggregate.  The specific triggers or criteria that dictate when to aggregate (or deaggregate a set of models) would include the following:Proximity to a specific obstacle, entity or feature in the synthetic battlespace;A change in the level of interest or significance regarding the specific domain a model supports; orAn increase (or decrease) in the physical entity load by the system and/or over the entire federation.  Under the sponsorship of the U.S. Army’s RDECOM, the design for a common aggregation mechanism for reacting to these triggers was researched during a Phase I, Small Business Innovative Research (SBIR) effort.  Essentially, an aggregation framework capable of managing load balancing without negatively affecting performance or skewing execution analysis and assessment is being sought.  A goal of the aggregation framework is to offer a cost-effective mechanism for aggregating (and deaggregating) models before or during the execution of a large-scale simulation.  This type of aggregation framework would be used to help reduce independent high resolution models to more efficient, lower resolution models that can then be grouped together to create combined model sets. This framework must allow models representing various levels of resolution and depth of aggregation to be able to interact with one another.BackgroundSimVentions began work on the A03-206 "BOM Aggregation Framework (BAF)" Phase I SBIR on December 11, 2003.   Based on the potential that BOMs provide, SimVentions proposed to apply IF BOMs for supporting aggregation, with the design of a BOM Aggregation Framework that facilitates the necessary coupling and decoupling of IF BOMs, and exchange of available multi-resolution Encapsulated (ECAP) BOMs.  A collection of BOMs is represented as a Mega-BOM, which provides in essence a combined interface ideal for supporting composite models, which can be used to aggregate a group of similar models.  Examples might include a company, an air squadron, or an amphibious fleet.   BAF ApproachesUltimately the benefit in producing and utilizing a BOM Aggregation Framework (BAF) is that it provides four potential capabilities:The framework facilitates interoperability among models of differing resolution.At the run-time level, the framework enables dynamic loading and unloading useful for managing entity count and system resources.By maintaining a common interface that can be represented or coupled into Mega-BOMs, the framework preserves the key behaviors that are to be reflected no matter what the depth of aggregation.Adaptability among diverse models (represented by various Mega-BOMs) can also be achieved through the use of real-time XML transformations provided by the framework.Most simulation environments focused on interoperability are restrictive in their ability to support models representing various levels of resolution.  A BOM Aggregation Framework, however, provides an enabling capability to support multi-resolution, aggregation, and run-time swapping, and establishes the foundation for supporting adaptability.To be most effective, it was identified that the BOM Aggregation Framework should ultimately be represented as a set of web-services available both at design-time among model developers and at run-time with the constructive simulations that are at play over a network.  The application of web-services provide the logical automation mechanism for supporting BOM to Mega-BOM aggregation (and deaggregation), load balancing, behavior preservation, and delivery of model-to-model transformations for supporting adaptability. Furthermore, providing the BOM Aggregation Framework as a web service capability allows a myriad of federates developed for different platforms and languages to access and utilize the service independent of the computing platform or language the BOM Aggregation Framework is hosted or written under.BAF Technical ObjectivesThe research objectives identified for the Phase I SBIR effort, are highlighted below and explored in further detail in the sections that follow:Research techniques for load-balancing of the simulation across platforms.Research aggregation and deaggregation techniques for scalability.Determine methods for preserving simulation validity while working with models of varying levels of aggregation.Determine applicable web service technologies for enabling automation.Investigate the application of BOMs for supporting aggregation and deaggregation.Design a BOM-based aggregation framework that would provide a web-service capable mechanism for load balancing, aggregation and deaggregation, and interoperability among multi-resolution models. This BOM Aggregation Framework designed during the Phase I effort provides an initial foundation for a common mechanism in enabling aggregation support for large scale simulations.   This foundation is based on an emerging Simulation Interoperability Standards Organization (SISO) standard for Base Object Models (BOMs).TerminologyOne of the early revelations during the Phase I effort for this project, was the wide-breadth range of definitions for some of the keywords and concepts.  The definitions identified in Table 1 were identified and referenced during the research effort to ensure common understanding.Table 1 – Key TerminologyTermDefinitionAbstractionAn idea that concentrates on the essential properties of a common pattern of interplay rather than on concrete realizations or actual cases.AggregationThe coupling of multiple entities/models into a single inclusive group.Behavior ComponentsModel the needed behavior required of a conceptual entity to support patterns (Federate level).BOMA reusable package of information representing or supporting a pattern of interplayComponentA constituent part; an ingredient. “…designed in such a way to easily operate with other components…” – webopediaComposability“The capability to select and assemble components in various combinations into complete, validated simulation environments to satisfy specific user requirements across a variety of application domains, levels of resolution, and time scales.” [3]Constructive EnvironmentThe constructive environment consists of units and staffs using maps, role players, and computers to conduct training.  Computer simulations are used to drive command post exercises to train command and staff functions of units through the corps level.  A division Battle Command Training Program Warfighter Exercise or battalion command post exercise is an example of a constructive training environment event. [7]ECAP BOMCaptures behavior of conceptual entity participating in one or more patternsFidelityThe accuracy of the representation when compared to the real world.IF BOMA reusable representation of a pattern of interplay characterized by one or more events.Load BalancingDelegation of work responsibility among a federation to prevent overtaxing an individual federate and/or network and to ensure proper execution.Live EnvironmentA live training environment is comprised of soldiers, crews, and units physically conducting training with their organic equipment, while exposed to the full effects of weather, terrain, and limited visibility.  This environment includes the use of training aids and devices to enhance live training.  Examples of live training include a company conducting a field training exercise in the local training area, or a battalion task force fighting the Opposing Force in a force-on-force battle at one of the maneuver combat training centers. [7]Mega-BOMA composition of BOMs used to represent a higher order pattern.Pattern ComponentsRepresenting the relationship of activities among conceptual entities (FOM level). Pattern of InterplayReflects a set of activities related to one or more conceptual entities used for accomplishing a common objective, capability, or purpose.PrecisionThe accuracy of attributes and parameters in the model during input, processing, and output. A measure of how meticulously or rigorously computational process are described or performed by a model or simulation.ResolutionSeparation or reduction of something into it’s constituents parts; granularity;The degree of detail used to represent aspects of the real word or a specified standard or a referent by a model or simulation;Virtual EnvironmentConstitutes individual soldiers, crews, and units, using hands-on training to operate simulators that replicate all, or part, of their actual combat systems.  An example of a virtual trainer is the Close Combat Tactical Trainer.  It is a family of simulators that allow soldiers, crews, and units to safely practice individual, crew, and combined arms training tasks without expending fuel and ammunition, and without subjecting themselves to the danger associated with live weapons firing.  Other examples include engagement skills trainers, and unit conduct of fire trainers.  Virtual simulators provide realistic tools to train METL-based tasks. [7]Simulation SpaceAny part of a simulation environment, which may be represented by one or more conceptual entitles modeled and reflected by a federate, federation, or as an aggregated force within a federation execution.Load Balancing TechniquesDuring the Phase I effort, time was spent on researching appropriate techniques for load-balancing of the simulation across platforms.  Various architectures were studied including the Objective OneSAF environment, which is a constructive simulation used in the joint community for modeling and reflecting multiple entities.  Aggregation was found to have the greatest potential benefit in reducing the amount of message traffic distributed over the exercise network.  The key is in separating what’s being represented to how internally it may be modeled by each federate.  Load Balancing should first apply ways to distribute data over a network using a message format that can be used to pool multiple data content that has a common relationship into fewer messages.   In some ways it is analogous to how WinZip (and other compression utilities) can couple files together into a single file that is smaller than the sum of its parts.  The second level of load balancing can be wielded upon the federates themselves, through proper utilization of behavioral models that offer various levels of resolution, and yet are matched to the fidelity need defined by the interface.    While high level resolution models can be seen as a means for ensuring realism, an overuse of such models can impact network performance.  Thus load balancing should occur in two ways:From within each federate, properly managing the use of models to not over tax the system the federate operates on and ultimately the  network environment for the federation, load balancing must occur corporately where the messages being shared reflect only what needs to be shared.  This is the work being researched by a separate SBIR (A03-207 Multi-Resolution Terrain Models Representation) in regards to the use of Multi-resolution Models (MRMs), which is described in paper 04-SIW-052.Where it makes sense, information to be distributed should also be combined into aggregates. Like the WinZip model described earlier, a composite reflecting information about multiple entities can be made ultimately smaller than the sum of its individual entities. Reducing the size or quantity of information by employing aggregation undoubtedly can have a profound impact on improving network performance.  The issue to be explored is if aggregation should also occur within each federate where the modeling is being performed.  This might require the resolution of behavior models (i.e. ECAP BOMs) used by each federate to be scaled based on the dialed level of aggregation.  Aggregation / Deaggregation TechniquesCareful examination of approaches that have been applied in regards to supporting aggregation and deaggregation were investigated during the Phase I effort.  Some of the approaches examined dated back to early 90’s Distributed Interactive Simulation (DIS) activities. What is interesting is that many of the same issues back then are still a concern today.  What is evident is that neither DIS nor HLA in its current state, truly provided an intrinsic way to support aggregation; that is aggregation was not a capability or a design consideration.  Approaches for aggregation were considered after DIS and HLA had been established (from the outside).  It is suggested that if aggregation was a greater value of interest during the development of either one of these interoperability standards, perhaps many of the issues that have persisted regarding aggregation and deaggregation would have become extinct.  Fortunately BOMs provide an opportunity, based on their support for composability, to address and resolve these aggregation issues from the inside.  One of the more relevant pieces of information described from the papers researched for this activity is highlighted in Table 2.   This table describes a unit representing multiple in three potential states as it relates to aggregation and disaggregation. [2]Table 2 –States of Aggregation and DeaggregationModelDescriptionBOM Approachaggregate unit“owned and simulated by the aggregate-level simulation; it is not represented in the form of individual entities at all.” Individual entities are no longer represented independently, but rather as a complete coupled model using an IF BOM.fully deaggregated unit“owned and simulated by the entity level simulation; it is represented in the form of individual entities corresponding to the [platforms] within that unit. The aggregate-level simulation can issue orders to it and receive back updates as to the elements of the unit’s status with which the aggregate-level simulation is concerned.”Entities within a unit are independently represented as an IF BOM and updated as needed across the federation among all federates.pseudo-deaggregated unit“owned and simulated by the aggregate-level simulation, but represented perceptually in the form of individual entities by the entity-level simulation. If there is a crewed simulation involved, then this perceptual representation has obvious and direct benefit; even if there is not, it allows for fully disaggregated units (i.e., units that are currently simulated at the entity level) within the same battlespace to detect and react appropriately to the pseudo-disaggregated unit.” Entire unit is represented as a single IF BOM, but information is ordered within IF BOM allowing for each entity to be singled out.  Creates potential for IF BOM to be transformed to a Mega-BOM representing smaller individual IF BOMs.It’s important to note that the concept of pseudo-deaggregated unit model is “similar to aggregation”.    Thus, the key is knowing how BOMs can be applied to support these different unit models.  Two useful ways of applying interface BOMs for supporting aggregation, and deaggregation include pattern aggregation and instance aggregations.  Table 3 below highlights these two types of aggregations.Table 3 – Types of BOM AggregationsAggregation TypePattern AggregationsInstance AggregationsClassificationInterface GroupingsEntity GroupingsPattern Technique AppliedComposite PatternFlyweight PatternLevel of AbstractionNon-exercise specific (Class based)Exercise Specific (Object driven)ExamplesCar (Engine / Wheels / Suspension / Frame)Ship(Weapon System / Radar / CIC)Equipment Pack(Ammo / Weapon / Grenade / Water / First Aid Kid)First Aid Kit(Gauze / Wrap / Ointment / Knife / Aspirin / Blood Clot (kitty litter))Battalion (Collection of Individual Soldiers)Air SquadronBattle groupWeather (Storm Cells / Wind / Temperature / Atmospheric Pressure/ Bathymetry)Close Air Support(Forward Air Controller / Aircraft / Target / Target Locater / Designator)Pattern AggregationPattern Aggregations reflect the coupling of interface groupings that can be identified prior to an exercise.   For instance, a composite of an automobile (identified as a Mega-BOM) can be formulated reflecting the sum of its parts.   These parts might include IF BOMs such as an Engine, Wheels, Car Body, Braking System and Suspension.  Using “design pattern” constructs, we identify this as a Composite Pattern.The Composite pattern is used to form a collection of objects.  In the case of BOMs, the Mega-BOM is used to represent a composite of IF BOMs.  This composite is used to formulate the model representation for a federation (akin to a FOM), a federate (akin to a SOM), or an aggregation of elements or HLA object classes. Instance AggregationInstance Aggregations reflect the coupling of multiple entities into a single inclusive group, which can be accomplished during a federation execution.  Essentially, a flyweight, which is supported by a dynamically defined Mega-BOM, would be used to represent a composite interface of a common group of federate objects.  For instance, a Mega-BOM representing a company might be established to represent an isolated group of troops and their associated vehicles and equipment such as a tank.  Using “design pattern” constructs, we identify this as a Flyweight Pattern.The Flyweight pattern is intended to help manage large numbers of class instances (i.e. entities) within our system.  By identifying the common attributes of the classes representing the objects (or entities) within a system, a common class can be defined and, where there are any differences in attributes among the various classes, these can be maintained as extrinsic data passed in as arguments (using mechanisms such as HLA Interactions).   Preserving Simulation ValidityIssuesWhile aggregation and deaggregation appear to be a powerful mechanism for facilitating exercise management and load balancing, this approach can not be applied without potentially having an impact on simulation validity.  For instance, if an aggregation is created that couples individual troops in their equipment into a single battalion, what is considered non-essential attributes for the aggregation may undergo significant amount of atrophy to the point, where a partial or full deaggregation, with easy lift of the entity out of the aggregate, may be impossible due to too much attribution loss.  This can cause an entity that once was an element of the aggregation, to have to be reborn by the necessary federate.  The consequence is that the entity in its aggregated state, ultimately failed to be a valid model in the simulation.ApproachThe key is to find techniques to preserve simulation validity for aggregated entities.  The usage of multi-resolution models (MRMs) is something that should be considered for improving the performance of a federate, and the entire federation.  “The ability to connect to aggregate-level simulations to work with multi-resolution modeling has proven in the past to allow simulations to work with a far higher number of entities”.[2]  So aggregation should work with MRMs to support large scale simulation, but should be done without negatively affecting the validity of the simulation.  To this subject, Davis states that, “validation of aggregation/disaggregation relationships should focus on the treatment of strategy, command-control, constraints, time scales, and uncertainties. It should not pivot around whether the aggregate model has been fully calibrated against a detailed model…” [4]These areas of strategy, constraints, and time, should be factor elements in the implementation of an aggregation framework to ensure preserving simulation validity.  Based on the research conducted for Phase I, the BOM has shown to provide a clear opportunity to better ensure simulation validity.  For instance, BOMs allow for a clean separation between the interface (and coupling of interfaces) and the actual models used to support the behavior identified in an interface. Theoretically, using BOMs for representing composites and flyweights, aggregation can occur creating necessary groupings without the need to scale the behavior models of those entities that have been assimilated into an aggregate.  At the federate level, those behavior models can continue to be applied intrinsically -- despite the level or type of aggregation being employed.  Only the message information being shared among federates within a federation has been altered; where an aggregate message reflects information regarding multiple entities (or sub-entities if it is a pattern aggregation).Applicable Web Service Technologies for the BOM-Based Aggregation FrameworkCurrent advances in technology have introduced a new level of reuse through web services.  The Phase I effort has explored applicable web service technologies for enabling automation in regards to the design of a BOM Aggregation Framework (BAF) and the creation of a BAF implementation identified as the BOM Aggregation Support Server (BASS), which would operate as an adjunct in a federation execution environment.  Specific research included the investigation of applicable web service technologies for enabling automation including Simple Object Access Protocol (SOAP), Web Service Description Language (WSDL), XML-based standards, .NET Remoting and others.  Based on research, we began design of a BAF implementation, titled the BOM Aggregation Support Server (BASS), which is being prototyped using C# for .NET.  BAF and the BASS implementation will define a web-service capable automation mechanism for load balancing, aggregation and deaggregation, and support interoperability among multi-resolution models (MRMs) within a distributed simulation environment. Investigating the application of BOMs for Supporting Aggregation / DeaggregationBOMs have been identified as an enabling technology for supporting aggregation and deaggregation.  A BOM can be thought of as a reusable package of information representing a pattern of simulation interplay.   This pattern reflects a set of activities used to accomplish a common objective, capability or purpose.  By capturing patterns and defining components that model the needed capabilities to support these patterns, it is possible to provide the “building block” capability needed within the M&S community.The diagram illustrated in Figure 1 depicts four basic areas of the simulation problem space.  From the bottom up, we have the communication layer which includes the runtime infrastructure (RTI) or other communication mechanism used for the distribution of data messages among federates at play.  Next, we have the Interface layer, which is typically represented by a High Level Architecture (HLA) Federation Object Model (FOM) for identifying what type of data will be conveyed through the communication layer.  It is at the Interface layer that the IF BOMs and Mega-BOMs can be used to represent the capabilities of the Federation Object Model (FOM) in a component based manner.   SHAPE  \* MERGEFORMAT Figure 1 – BOM Overlay onto HLA ArchitectureAt the top, we have the Federation Layer, which includes the collection of federates supporting the Interface Layer (the FOM). Right below the Federation Layer, we have the Encapsulation Layer, which reflects the behavioral code necessary for a federate to carry out and model the identified conceptual entities of the federation as typically depicted in the FOM using Object Model Template (OMT) constructs.  At this layer, encapsulated (ECAP) BOMs can be used to provide the necessary behavior for one or more federates.  At the right, in the figure below, we have a repository that can be used to identify and select appropriate object models, including IF BOMs and ECAP BOMs, for fulfilling the goals and objectives of a federation.These two architectural layers described for BOMs can be applied to support composability. The compositions themselves, however, are reflected through the Mega-BOM, which identifies the overarching interface.  With each of these layers we have attempted to convey the affect that the BOM standard has on the M&S HLA architecture.  The following paragraphs provide greater detail on the effects of the Interface Layer, which can be used to support aggregation.The Interface layer is supported by IF BOMs and the Mega-BOM.  An IF BOM is a reusable representation of a pattern of interplay characterized by one or more events.[5]  The elements used to construct an IF BOM or Mega-BOM are illustrated in the Figure 2.  In addition, the relationship of BOMs and Events to the activities for each pattern step is also illustrated in Figure 2. Figure 2 - IF BOM / Mega-BOM Elements w/ Event and BOM Relationship to Pattern StepAs illustrated in the Figure 3, the coupling of IF BOMs can be used to form a Mega-BOM, which serves as a higher order pattern used to represent a logical collection or assembly of IF BOMs.   A Mega-BOM is essentially an interface assembly much like an HLA Simulation Object Model (SOM) or a FOM.  It can be used to represent a federate, or federation or even an aggregation of entities within the simulation space, typically identified as an entity group.Figure 3 - IF BOM / Mega-BOM Elements w/ Event and BOM Relationship to Pattern StepWith IF BOMs in mind for creating aggregate compositions, two types of aggregation were identified during the Phase I effort that could be supported:  Pattern Aggregation and Instance Aggregation.Prototype – BOM Aggregation FrameworkDuring the Phase I effort, SimVentions began the design and development of a prototype BOM Aggregation Framework (BAF).  This section describes the prototype developed and demonstrated for the Phase I effort.The key for the BAF is that it must support aggregation.  This is accomplished through the coupling and decoupling of IF BOMs in representing aggregations.  Essentially, through the use of common interfaces both Mega-BOMs and atomic IF BOMs representations of those Mega-BOMs can co-exist.   This helps preserve the key behaviors that are to be reflected no matter what the depth of aggregation, and can be useful for all types of models (aka federates).  Furthermore, this approach facilitates interoperability among models of differing resolution, where it allows for the exchange of available multi-resolution Encapsulated (ECAP) BOMs.   An additional capability is that the BAF is intended to provide for dynamic loading and unloading of aggregates, which is useful for managing entity count and system resources during run-time.  As a future capability, BAF establishes the foundation for supporting adaptability among diverse models.  This is achieved through the use of real-time XML transformations provided by the framework.The BAF prototype developed for the Phase I effort was developed using C# and built as a .Net web-service application intent on providing aggregating and deaggregating coupled models (i.e. entities).  The set of web-services are intended to be available both at design-time among model developers and at run-time with the constructive simulations distributed over a network.  See Figure 4. Figure 4 - Principal Web Service Methods for the BAFThe application of web-services provide the logical automation mechanism for supporting BOM to Mega-BOM aggregation (and deaggregation), load balancing, behavior preservation, and delivery of model-to-model transformations for supporting adaptability.   Furthermore the web service capability allows a myriad of federates developed for different platforms and languages to access and utilize the service independent of the computing platform or language the BAF is hosted or written under.Figure 5 illustrates how the BAF was used with other federates to support both pattern and instance aggregation.Figure 5 – Phase I Prototype Demo Execution ViewFindings and ResultsIt’s been stated that “in a good aggregate, one would try to reflect the essence of the relevant detailed information” [6].  The findings of the Phase I effort have shown that the application of BOMs provides a solid approach to reflect the essence of the detailed information that is relevant, while preserving the simulation modeling validity at the federate level.  This is accomplished through the use of IF BOMs and the coupling of IF BOMs as Mega-BOMs.  At the MRM level, ECAP BOMs can be applied and scaled to the resolution needed to support these aggregations represented using IF BOMs.Furthermore, it was determined that the application of IF BOMs can be used for supporting two useful types of aggregation: Pattern Aggregation and Instance Aggregation as described previously in Table 3.Interoperability support for differing interfaces associated to models can also be achievable though the cross-mapping of BOMs that can produce reusable transformations; thereby providing dynamic adaptability support.SummaryThe effort highlighted in this paper has resulted in a clear understanding of the ideas and concepts necessary for supporting aggregation and deaggregation across a federation.  BOMs can be used to ensure as much independence on the intrinsic capabilities of the federates and their applied behavioral models as possible.  This is accomplished by focusing primarily on the interface and exchange of information carried out among simulations rather than the intrinsic behavior carried out internally within each federate.  If aggregation can reduce the load of the network by grouping sets of information together via pattern aggregation and/or instance aggregation then the family of systems (the federation) can operate at a higher level of overall resolution.  Looking to the future, further work based on this Phase I effort and development of the BOM Aggregation Framework (BAF) architecture can result in the proliferation of web-service based applications and capabilities useful for enabling load balancing, preserving simulation validity, and making both pattern and instance aggregation more easily possible.  References[1] IEEE 1516.3, IEEE Recommended Practice for High Level Architecture (HLA) Federation Development and Execution Process (FEDEP), March 2003.[2] Franceschini, Gerber, Schriker, Adkins, “Use of the Eagle/OneSAF Testbed to Support Large Scale Exercises”, 11TH-CGF-070[3] M. D. Petty and E. W. Weisel, “A Composability Lexicon”, Proceedings of the Spring 2003 Simulation Interoperability Workshop, Orlando FL, March 30-April 4 2003, 03S-SIW-023.[4] Paul Davis, “Aggregation, Disaggregation, and the 3:1 Rule in Ground Combat”, RAND, MR-638-AF/A/OSD, 1995[5] SISO, BOM Template Specification – Volume I – Interface BOM, Version 0.8 (draft), February 2004[6] Paul K. Davis, James H. Bigelow: “Experiments in Multiresolution Modeling (MRM)", RAND, pp 8-16-548, 1998.[7] TRADOC Pam 350-37, LVC environment definitions.[8] Gamma, Helm, Johnson, Vlissides, Design Patterns – Elements of Reusable Object-Oriented Software, Addison Wesley, 1995.Author BiographiesPAUL GUSTAVSON is a co-founder and Chief Technology Officer of SimVentions, Inc. (http://www.simventions.com) and is focused on the development and integration of technology for creating innovative and engaging experiences and solutions. Paul is a graduate of Old Dominion University, with a B.S. in Computer Engineering (1989), and has supported a wide variety of modeling and simulation, system engineering, web technology and mobile computing efforts within the DoD and software development communities. He is a principal author of “C++ Builder 6 Developer’s Guide”; and contributor to other books and articles; and, has presented at numerous conferences. He is also a long-time advocate and pioneer of the Base Object Model (BOM) concept for enabling simulation composability, interoperability and reuse. Paul lives in Virginia with his wife and two boys.MIKE HADDAD is a computer engineer at PEOSTRI and is focused on the development and integration of Modeling and Simulation programs in the Live, Virtual, and Constructive domains. Mike is a graduate of New Jersey Institute of Technology, with a B.S. in Electrical Engineering (1991) and a graduate of Monmouth University, with an M.S. in Software  Engineering (1993). Mike lives in Orlando, FL with his wife and two kids.TRAM CHASE is a software engineer at SimVentions, Inc. (http://www.simventions.com) and is focused on the development and integration of technology for creating innovative and engaging experiences and solutions. Tram is a graduate of Virginia Tech, with a B.S. in Mathematics (1994), and has supported a wide variety of modeling and simulation and system engineering efforts within the DoD. Tram lives in Virginia with his wife.2004 Fall Simulation Interoperability Workshop