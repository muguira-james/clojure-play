C4I Mission Application Software Development Kit (MASDK) Gene Layman, Ph.D.Naval Research LaboratoryWashington, DC HYPERLINK "mailto:layman@nrl.navy.mil" layman@nrl.navy.mil(202) 767-6873Jim WeatherlyNavy Modeling and Simulation OfficeWashington, DCjames.weatherly@navy.mil(703) 696-6831Daniel RobinsonSFA, Naval Research LaboratoryWashington, DC HYPERLINK "mailto:drobinson@nrl.navy.mil" drobinson@nrl.navy.mil202-767-5728 Composability describes a process to rapidly configure, assess and employ a software application by assembling it from a collection of reusable elements. The Navy Modeling and Simulation Office (NMSO) and the Space and Naval Warfare (SPAWAR) Systems Command have recently released the C4I Mission Application Software Development Kit (MASDK) that was developed at the Naval Research Laboratory. C4I Developers may use the MASDK composability concept and sharable software components to efficiently develop scenario based tactical mission applications such as planning, course-of action (COA) analysis and training applications. The MASDK reduces design complexity by providing common, sharable software components and an architecture framework to easily develop and integrate applications into C4I systems. The use of sharable software components for common functions greatly reduces the developers’ workload. The components are of proven quality and reliability having been used in several released C4I applications. The MASDK is written in Java and comes with full documentation.  The MASDK is free to developers. This paper describes features of the MASDK and steps through the process for developing new C4I applications. The MASDK is compliant with the Department of Defense’s Common Operating Environment (COE) used by many C4I systems including the service variants of the Global Command and Control System (GCCS). Ongoing developments for the next release include technologies for distributed and web enabled applications and will transition into the C4I Global Information Grid (GIG) Enterprise Services (GES). Introduction Scenario based C4I mission applications, such as planning, training and course-of-action (COA) analysis, generally have a number of common requirements. This commonality provides a potential for effective software reuse that the Mission Application Software Development Kit (MASDK) [1], [2], [3] has exploited.The MASDK provides a robust set of sharable software components a developer can easily adapt and use in scenario based mission applications. It operates within the standard Global Command and Control System (GCCS) development environment. The MASDK can be used to develop applications that run within any C4I system that is compliant with the DOD Common Operating Environment (COE). [4]The MASDK was developed by Naval Research Laboratory in Washington D.C within the C4I Embedded Simulation Infrastructure (ESI) program and sponsored by the Navy Modeling and Simulation Office (NMSO).A number of applications have been developed using the MASDK sharable software components and composability techniques. The C4I Team Training System (CTTS) [5], [6], [7] is an application contained in the Global Command and Control System – Maritime (GCCS-M) 4.x upgrade that recently passed Operational Evaluation. The Weapons of Mass Destruction Defense (WMDD) application [8] was developed for GCCS. The Range Fusion System (RFS) integrates data from multiple ranges and links this data to C4I systems. It has recently become operational. Several other training, planning, analysis and exercise support applications are nearing completion or underway.Mission Application Software Development KitThe MASDK is several things. It is an architecture framework, a development environment, a set of sharable C4I software components and a composability tool used to organize them into an application. It also contains tools and procedures that insure that the developed products are in compliance with COE and C4I segmentation requirements. Finally it contains a full set of documentation.The MASDK software components are written in Java and are in compliance with C4I and COE standards. The MASDK runs in conjunction with the COE development environment. It contains composability and segmentation tools for developing operational C4I applications for release in COE compliant systems such as the joint Global Command and Control System and service variants.A key feature of the MASDK is the ease in which new applications can be developed without requiring the developer to become an expert in COE as was the case in the past.The MASDK is available free from the Naval Research Laboratory (NRL) or the Navy Space and Electronic Warfare (SPAWAR) Systems Command.Host Application The MASDK Host Application [8], [9], [10], shown in Figure 1, is the starting point for the design of new applications. The Host Application is an application shell which contains many of the basic services common to all C4I applications and serves as a host to simulations, reusable software components and new software components developed for the application. It implements a software architecture framework that is fully integrated with the COE. The Host Application comes with a default capability to create and run scenarios. Many overhead functions are included in the Host Application like means to insert simulated scenarios and data into the C4I data bases, managing simulation displays, controlling variable time bases actions (such as replay and time projection) and linking new applications to the COE services and other applications. These and many other powerful capabilities, described in this paper, are made available in minutes to anyone already using the COE development environment. Simply install the MASDK, pull up the Host Application and begin adding the desired functions within the MASDK.  You are on the way to developing a new application using the MASDK composability process.Figure 1MASDK Host Application with Default Plug-insPractical Composability Composability is the capacity to rapidly configure, assess and employ a software application by assembling it from a collection of reusable elements. Potential benefits are performance, reliability and cost. Applications can be much easier to develop and more reliable if they use proven components. Experience demonstrates that a large majority (e.g., > 85%) of the software of some scenario-based mission applications can be provided by the COE and the MASDK. [5], [6], [8]A “practical” composability process is one that can be employed to actually produce an application and that the application produced is useful rather than a academic exercise. The composability process will be described by first describing a composability tool, followed by discussions of some of the sharable software components and the architecture in which they reside. Composability Tool - AppBuilderThe MASDK provides a composability tool called AppBuilder and is shown in Figure 2. AppBuilder is used to configure the collection of sharable software components that are required for a specific application. It is also used to stub out additional software components that will need to be developed. It is relatively easy to match components with requirements, select from those available that meet a portion of the requirements and stub out other components for further development.Figure 2MASD Composability Tool (AppBuilder)Since the MASDK was developed in a large part to support scenario and simulation based applications, AppBuilder has check boxes to include several scenario generation components by default. See the box labeled Basics in Figure 2 containing the selections: Select Mission Editor, Select Playback Controls and Allow Editing During Playback. The Mission Editor will be discussed in following sections. Playback allows the user to replay a planning or training scenario through the system. The third feature allows the scenario to be modified during runtime.A new configuration or application is laid out with AppBuilder by: typing in a new name and prefix; selecting the core features and options; selecting the required Plug-ins, and finally; stubbing out the remaining software functions not met by the available components. New requirements are generally satisfied by new Plug-ins or simulations. The documentation describes how new Plug-ins can be developed and provides examples that a new developer can work through to gain familiarity with the concept.As new components become available or the developer creates new ones that can be used in multiple applications, they are simply added to the library and are available through the tool. Components that are under development can also be added as well as stubs for new components and Plug-ins. The documentation describes how this is done.Once the initial selection is completed the user clicks the Create Configuration button (or Create Segment when the application design is complete). The software is prepared and is linked to the development tools (e.g., COE Development Environment, MASDK and a Java development tool such as JBuilder). The Composability tool also performs several software functions during this process that are extremely important and complex but may not be apparent to the casual user. It creates an initialization file to run the new application in the COE. It creates a COE segment skeleton by crafting the segment directory tree, and copying the necessary files to start building a new segment based on the selected MASDK components. It  also provides software functions to connect the application to the COE services and data bases.Example ApplicationSuppose a new application is to be used for planning defense suppression operations during air strikes. Referring back to AppBuilder in Figure 2, the name Air Strike Defense Suppression was entered in the Name space. The developer then selected the “Mission Editor”, “Playback Controls” and “Editing During Playback” defaults from the Basics selections. These selections will create the Scenario, Track and Simulation tabs in the application. The figure shows that the “ATO Parser”, “Timeline” and “Mobile Sensor” Plug-ins were selected. Assume that the developer had stubbed out three Plug-ins named “Task Schedule”, “Air Refuel Plan” and “Targeting Intel” using the MASDK instructions to develop a Plug-in. These have no functionality at this time but will appear in the application as tabs.Figure 3Air Strike Defense Suppression ApplicationClicking the “Create Configuration” button will cause AppBuilder to compose the Air Strike Defense Suppression Application as shown in Figure 3. Six of the Plug-ins will be fully functional. Three additional Plug-ins are stubbed and ready for development and coding. These new Plug-ins will interact with the rest of the application trough well defined and documented Java classes and objects. Building Your Own Plug-inA perfect composability process would provide all the components that were necessary for an application. This will rarely be the case. Generally one or more Plug-ins or a simulation will need to be developed. A distinction between a Plug-in and a simulation is being made. In this context a Plug-in is a software component that can be developed to perform a specific set of related functions. Several have been mentioned. Others will be described later. It could contain a small simulation or may not. A simulation is defined as a substantial amount of software, preferably configured as a server, which may be embedded within the application or interfaced through clients within the application. The MASDK documentation describes how to build and configure a Plug-in or an embedded simulation. Software for a simple Plug-in is provided as an example. A step by step description for building a  Plug-in using JBuilder is also provided. The developer simply follows the steps and creates and names as many Plug-in stubs as required for the application.Once the Plug-in stubs are generated and put into the proper directory they appear in the Plug-in column in AppBuilder and may be selected.  A Plug-in appears as tabs in the application GUI along with the existing Plug-ins. They are placed in the order in which they are selected.Architecture A Host Application interacts primarily with the COE Tactical Management System (TMS), the Application Framework (AFW), Joint Mapping and Visualization (JMV) and the Universal Communications Processor (UCP). These COE services manage the C4I system's tactical data consisting of tracks, parametric data and events, provide display functions and perform communications tasks between ships and dispersed naval installations. Information about these COE services may be obtained through the respective Software Development Kits: TMS SDK, AFW SDK, JMV SDK and the UCP SDK. A Host Application architecture that has been successfully used in several simulation based applications is shown in Figure 4. A Mission Application that uses the MASDK Host Application and MAS sharable software services will adapt this architecture.The MASDK, including the Host Application, is integrated into the C4I development and runtime environments. This figure illustrates that the Host Application is layered over, and interfaces extensively with, the COE. Software components are grouped into functional areas in this diagram. Several components perform mission editing or scenario generation. Others are organized into runtime components, output and archive/replay groups.INCLUDEPICTURE "../../../../Local%20Settings/MASDK_PGRM/Dec2004%20MASDK/MASDK/data/Help/PRGM/doc/plugin_example.png" \* MERGEFORMAT Figure 4Host Application Architecture Sharable software components are shown in blue. Application specific (i.e., unique) software is shown in yellow including new Plug-ins. This is a common configuration for planning, training and COA analysis. It consists of sharable software components to generate and manage a planning or training scenario (Mission Editor), components to run the scenario and manage variable time bases (Runtime), and components to insert the data into the C4I system for display (Simulation COP) and analysis using other applications. Other simulation based applications will be variations of this general architecture. An embedded simulation server is shown in the center of Figure 5 along with three embedded clients: Setup, Runtime and Output Clients. The three clients represent a notional design for clarity. In reality a single client could perform all three functions. An embedded client can serve multiple purposes. For example, the Setup Client acts as a client to both the embedded simulation and to the Virtual Track Manager. The client may also perform any format conversions required and can have a user interface.A major distinction between the figures is that a simulation configured as a server requires a client to interface to other components in the application whereas Plug-ins are designed to interface directly.INCLUDEPICTURE "../../../../Local%20Settings/MASDK_PGRM/Dec2004%20MASDK/MASDK/data/Help/PRGM/doc/embedded_sim_example.png" \* MERGEFORMAT Figure 5Host Application Architecture (Embedded Simulation Example)Some applications use a combination of embedded simulations and Plug-ins. The remaining sections contain more detail about the sharable software components within the MASDK.Core Components The Host Application comes bundled with several software packages. They include core components common to all applications, several types of Plug-ins and special purpose components.  The core components are a set of basic tools, classes and applications that make up the foundation of the MASDK. These core components consist of the following:Host Application AppBuilder (Composability Tool) Virtual Track Manager Scenario, Track, Waypoint and Event Objects/ MethodsEvent Manager Virtual Track Manager (VTM) - The VTM is a collection of classes and  HYPERLINK "file:///C:\\Documents%20and%20Settings\\layman\\My%20Documents\\1\\MASDK_PGRM\\Dec2004%20MASDK\\MASDK\\data\\Help\\PRGM\\doc\\apis.htm" APIs which store, and manipulate scenario-based simulation information. The main classes are Scenario, Track, and Waypoint. Many of these objects implement an interface which allows developers to attach persistent, arbitrary data to these objects (there are some restrictions on data types). Developers are provided with methods to modify and create scenarios, as well as using the Mission Editor.The VTM automates many functions, such as computing bearings between waypoints and arrival times. When a scenario waypoint is moved, the arrival time and bearing to the next waypoint are adjusted automatically. There are methods to shift track locations and times, waypoint locations, speeds, adding and removing tracks, etc.Scenario, Track and Waypoint Objects – Scenario and Track classes are structured as a list with meta-data. For example, a Scenario object would include a list of tracks, and meta-data indicating the start and stop time of the scenario, the scenario name, a description of the scenario, etc. A Track object would include a list of waypoints and meta-data including the track type, name, threat level, scope, state, etc. Waypoints contain position, time/date information as well as other fields. Timed Events - Timed Events are used to force action at certain times during the application runtime, and are passed to the Plug-ins for handling. For example, a Plug-in dealing with chemical weapons may insert an event into the scenario, indicating that a chemical release has taken place at a certain time and location. At the appropriate time during the scenario playback, an event would be generated, containing that information.Event Manager - The Event Manager provides a simulation or Plug-in information about the types of events that occur. A Plug-in may register to receive an event type. For example, a new track being created would fire off a NewTrackEvent and notify all Plug-ins that had registered for this type. The Event Manager provides the means to coordinate the effects of incidents and in-scenario events which occur during the simulation or runtime.Plug-insA Plug-in is a sharable application component that can be loaded at runtime and interact with the scenario data and simulation. A Plug-in can be readily inserted into an application and is fully compatible with COE services and other Plug-ins. Most Plug-ins have an accompanying Graphical User's Interface (GUI). The GUI of the Plug-in will generally appear as a tab on the Host Application GUI. The following list contains the current set of core components and Plug-ins packaged with the MASDK:Mission EditorCommon Operational Picture (COP) Capture Archiver Plan PreviewDynamic RunAir Tasking Order (ATO) Parser Author Mobile Sensor  Predator Downlink Trainer Timeline Display  Mission EditorThe Mission Editor is used for force lay down of entities and routes and to simulate movement along those routes. It allows the user to create and edit the time based scenarios and store them. The Mission Editor graphical interface occupies two tabs in the Host Application. They are the Scenario tab and the Track tab shown in Figures 7 and 8.INCLUDEPICTURE "../../../../Local%20Settings/MASDK_PGRM/Dec2004%20MASDK/MASDK/data/Help/PRGM/doc/scenario_tab.PNG" \* MERGEFORMAT Figure 6 - Mission Editor (Scenario Tab)The Scenario tab allows a user to rapidly create simulated forces and position them on a map. It displays general information such as scenario name, start and end times and the geographical location where the scenario occurs. The user can delete tracks from this tab. The Track tab works in conjunction with the Scenario tab. For the example below, the user has selected the "track1" platform in the Scenario tab. Clicking on the Track Tab will bring this GUI to the front and display the waypoint times and locations as shown in Figure 7 below. The user will alternate between the Scenario Tab and the Track Tab and use the appropriate functions of each to build or modify the scenario.INCLUDEPICTURE "../../../../Local%20Settings/MASDK_PGRM/Dec2004%20MASDK/MASDK/data/Help/PRGM/doc/track_tab.PNG" \* MERGEFORMAT Figure 7 - Mission Editor (Track Tab)The dynamic parameters (speed, climb rate, etc.) can be readily changed at any waypoint and the parameters of later waypoints (time, altitude, etc.) get recalculated automatically. Once a scenario is completed, it can be saved as eXtensible Markup Language (XML) or Over-The-Horizon Targeting Gold (OTG) formatted files. Stored scenarios can be retrieved and run or modified.  COP CaptureCOP Capture is a feature used to extract the real-time C4I Common Operational Picture (COP) and provide it to an application as a starting point for a scenario to be built, or to initiate a course of action analysis or plan development. INCLUDEPICTURE "../../../../Local%20Settings/MASDK_PGRM/Dec2004%20MASDK/MASDK/data/Help/PRGM/doc/copcapture.png" \* MERGEFORMAT Figure 8 - COP CaptureSeveral filters are available to limit track types, time period and geographical areas. COP Capture allows users to take a snapshot of track currently in the COP and automatically insert them into the VTM. Tracks can be filtered on multiple parameters as well as a geographic filter.The COP Capture Plug-in has the GUI shown in Figure 8. The same COP Capture functions can also be accessed by APIs if an application needs to obtain the data without requiring operator actions.ArchiverThe Archiver is similar to COP Capture. The purpose of the Archiver Plug-in is to collect real world or simulated C4I data over a period of time and store it in a file that can be used for post-operations analysis, simulation initiation, training, etc. Several options are available to filter the specific data and to define the format that the data will be stored.Plan Preview The purpose of the Plan or Scenario Preview capability is to run and preview a scenario stored in the VTM while it is being developed without feeding it into the TMS. It is used within the Mission Editor and can display all waypoints and tracks in the scenario in the form of PIM tracks. With plan preview, users can see locations of tracks at any given time during a scenario, modify tracks on the chart, and play the scenario out at various speeds. The scenario may be automatically time stepped or the viewer may choose to view a specific time in the scenario by adjusting a time slider bar. Since the scenario is not inserted into the TMS, the C4I system functions cannot operate on the scenario during preview. Dynamic Run The Dynamic Run function processes the VTM scenario during the application runtime. A major difference between this Plug-in and Scenario/Plan Preview is that the scenario data is processed and inserted into the C4I system by one of several means. Another difference is that the scenario may be advanced, paused or stopped but it cannot be moved backward in time like the Plan Preview mode. Several options are available that effect how the dynamic scenario is provided. The output can be inserted into the GCCS TMS or provided to a simulation to process, depending on the application requirements. For example the stored scenario could be the "ground truth" input which gets converted to a "perceived picture" by a simulation.The Dynamic Run function provides time management capabilities allowing a scenario to be run in the C4I system in non-real time. Simulated data is inserted into the common operational picture (COP) and map display so that it protects the real world C4I data but allows all COE and GCCS software segments to operate on the simulated data in the same manner as if it were real. The air tracks, surface tracks and underwater tracks can be separately set for update rates. Or each unique track can be set for a particular update rate.  Several other Plug-ins will be described briefly.Air Tasking Order (ATO) Parser – The ATO Parser is a foundation of an application for planning air strikes.Author – The Author Plug-in works in conjunction with several other scenario manipulation and playback Plug-ins. It provides an application a capability to add audio and video annotations to a scenario replay.  Mobile Sensor - This Plug-in provides a line-of-sight analysis capability. Timeline Display – The Timeline Display provides another method to display time relationships coordinated with the geographic display of the same information.ConclusionThe Mission Application Software Development Kit has been successfully used in several applications. It is being made available to C4I developers and may be obtained from the Naval Research Laboratory by contacting Gene Layman at (202) 767-6873 or  HYPERLINK "mailto:layman@nrl.navy.mil" layman@nrl.navy.mil.Anyone developing COE compliant C4I applications, prototypes or experimental systems, or is interested in doing such, may benefit from a copy of the MASDK.References[1] Layman, G., Weatherly, J.: “New Navy Solutions: Integrating Simulations into C4I” Paper 04E-SIW-060, European Simulation Interoperability Workshop, June 28 – July 1, 2004; Edinburgh, Scotland.[2] Layman, G., Daly, J., Robinson, D, Weatherly, J.: “Integrating Simulations into DII COE Compliant C4I Systems” Paper 02F-SIW-048 Simulation Interoperability Workshop, Fall 2002; Orlando, Florida.[3] Layman, G., Daly, J.: “C4I Tactical Applications Utilizing Embedded Simulations” Command and Control Research and Technology Symposium (CCRTS), June 11-13, 2002; Naval Post Graduate School, Monterey, CA[4] Reference for the COE architecture on the DISA web site as of Feb. 7, 2005:  HYPERLINK "https://coe.mont.disa.mil/login/login.asp" https://coe.mont.disa.mil/login/login.asp [5] Layman, G., McGroder, D., Harrington, W.: “Advanced C4I Training for the Global Command and Control System - Maritime (GCCS-M)” Paper 04S-SIW-149 Simulation Interoperability Workshop, Spring 2004; Alexandria, Virginia[6] McGroder, D., Layman, G.: “The C4I Team Training System” Paper 03F-SIW-069, Simulation Interoperability Workshop, Fall 2003; Orlando, FL.[7] Daly, J., Layman, G.: “C4I Simulation Based Embedded Team Training” Command and Control Research and Technology Symposium (CCRTS), June 11-13, 2002; Naval Post Graduate School, Monterey, CA. [8]	Layman, G., Weatherly, J.: “Weapons of Mass Destruction Defense – A C4I Host Application” Paper 03S-SIW-090, Simulation Interoperability Workshop, Spring 2003; Orlando, FL. [9] Layman, G., Daly, J., Weatherly, J.: “C4I Host Applications” Paper 03F-SIW-053, Simulation Interoperability Workshop, Fall 2003; Orlando, FL.[10] Layman, G., Daly, J., Robinson, D, Weatherly, J.: “Integrating Simulations into DII COE Compliant C4I Systems” Paper 02F-SIW-048, Simulation Interoperability Workshop, Fall 2002; Orlando, FL. 		       Authors BiographiesDr. GENE LAYMAN is a Research Engineer at the Naval Research Laboratory and directs a Command and Control Development Team that has been active in GCCS and GCCS-Maritime developments since their conceptions. Earlier he managed the Radar Branch and the Guidance Branch at the Naval Surface Weapons Center. Before that, Dr. Layman was a Program Manager in the Missile and Ordinance Division at Texas Instruments, Inc. and a Circuit Designer at The Boeing Company on the Minuteman Program. He has led or participated in the design of over two-dozen military systems with more than half becoming fully operational.DANIEL ROBINSON is an Engineer/Computer Scientist with SFA at the Naval Research Laboratory. He is the Project Leader responsible for the software development for the Mission Application Software Development Kit and other projects. Prior to joining the NRL team, he was employed by General Dynamics working on the design, programming and deployment of robotics.JIM WEATHERLY currently performs as the Assistant Director of the Navy Modeling and Simulation Office (NMSO) at OPNAV N708MT and ONR 342.  He has performed as a Research Fellow for the Potomac Institute for Policy Studies; Director for the Department of Navy Modeling and Simulation Technical Support Group (DONMS-TSG), and Deputy Director, NAVMSMO, for the Chief of Naval Operations, OPNAV. He has also performed as Head of the Engineering Support and Integrated Assessment Environment Division, Supervisory Electronics Engineer within the Warfare Systems Architecture and Engineering Directorate (WSA&E), and Head of the Test Facilities Section within the WSA&E Directorate.