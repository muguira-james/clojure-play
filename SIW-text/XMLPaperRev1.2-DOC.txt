XML to facilitate Interoperability between RepositoriesGary D. GaringoInnotiv Incorporated8799 Balboa AvenueSan Diego, CA 92123619-268-1102 x206garingo@webeng.comJames S. AuginsInnotiv Incorporated8799 Balboa AvenueSan Diego, CA 92123619-268-1102 x203augins@webeng.comKeywords:Interoperability, Repository, XML, MSRR, DIF, RDF, BIDMABSTRACT:  The MSRR Project Office in support of defining Interoperability Standards for DoD Repositories will demonstrate a repository resource data interchange format using XML (Extensible Markup Language).  XML, a standard under the W3C for web metadata, will be used to model and transfer repository resource objects from two resource repository web-sites, the DMSO MSRR and the Navy MSMO NMSIS.  Interchange of the metadata supports seamless searching and browsing of repository content.  An external search interface requires intimate knowledge of the underlying database representation of the information.  The architecture developed in the experiments will facilitate interoperability for repositories deployed on the internet and SIPRNET using the flexibility of XML to define customized markup tags for standardization of document formats.  In the XML layer, RDF (Resource Description Framework) will be examined as the common syntax for repository object definitions.  RDF will present an abstraction of the underlying database schemas of different resource object types, which will be combined and parsed through an underlying XML Translator.  The Translator will utilize CSS (cascading style sheets) allowing developers to tailor the presentation of the resource.  The extensibility of data representation and data presentation will be an integral step in developing interoperability standards for DOD repositories.BackgroundA standardized format and mechanism for exchanging data is a basic requirement for interoperability among repository systems.  This paper describes the use of XML as a standard for metadata exchange to support the Modeling and Simulation Resource Repository family of systems.  A MSRR mechanism and interface standard to facilitate resource exchange from a database or web site is a major goal of this research.  Important design evaluation metrics are low life cycle support cost and low cost of accommodating repository metadata changes.  An experiment between the Defense Modeling and Simulations Office MSRR and the Navy Modeling and Simulations Catalog was conducted to test the applicability of XML to support disparate data models.  Along with data exchange, various representations of resource schemas were examined to foster standardization of a common tag set for the M&S objects. Extended Markup Language (XML), see reference [1], is a flexible document encoding format for metadata properties of web based resources.  XML, a standard maintained by the WWW Consortium (W3C), is a format for extending the HTML tag set.  Support of customized tags introduces the need for tag standardization for interoperable systems. XML does not introduce another set of tags beyond the HTML core but rather allows the system integrator to construct tag sets for peer to peer exchange.  These tags are embedded with data in a hierarchical tree structure. The XML format consists of a tree of parent and child objects.  The parent and child relationship enforces a one-to-many cardinality relationship.  Each parent or child object can have any number of properties that are delimited by ending tags or end-of-lines.  The collection of this tree within a transmitted web message is an XML document.  Inclusion of a Document Type Definition (DTD) file along with the XML document can be used to validate the XML data being transmitted.  Since XML does not define the actual tag set, validation of the XML may be needed to verify the completeness of a document.  It is expected browsers will employ XML parsers. The W3C DOM (Document Object Model) is a standardized object model for retrieving the HTML and XML document structure. Accessing the DOM will support parsing of the XML. Microsoft and Netscape, vendors who dominate the browser market, have plans to make future versions of their browser DOM compliant.The simplicity and versatility of XML have already prompted community acceptance in a wide range of applications.  The XML tags can seem incomprehensible to someone reading the HTML source but this encoding mechanism will allow for greater data and metadata resolution.  Technical groups and consortiums have begun proposing XML tag sets to support application domains like finance, manufacturing, library science, chemical, and even business software (for example, Microsoft Office 2000 will use XML as its internal data exchange format).  Consequently, tag sets for document library systems have been proposed to the W3C.  A W3C Request for Proposal has resulted in the Resource Description Framework, see reference [2], for use in distributed metadata registries.  This infrastructure supports reuse, encoding, and exchange of metadata and uses XML as a common syntax.  RDF promotes conventions for defining vocabularies through standard mechanisms for representing semantics. RDF considers anything that has a URI (Uniform Resource Information; a URL is a type of URI) to be a Resource.  The MSRR Resource is a RDF Resource in the M&S domain.  Any Resource that has a name and can be used as a property is known as a PropertyType.  A Property consists of a Resource, PropertyType, and value.  Lastly, all properties can be expressed in a straightforward method.  An example of a Resource is the document with the URL of http://www.w.com/an.html.  This Resource has PropertyTypes of Author and Title.  A Property is the combination of Resource, PropertyType, and a value: “The Author of http://www.w.com/an.html is Joe Smith”.  The RDF could look like:<RDF:Description href=”http://www.w.com/an.html”><Author>Joe Smith</Author><Title>An HTML Page</Title></RDF:Description>For the initial experiment, use of RDF was postponed due to the inability of current XML engines to parse properties embedded within a tag definition rather than outside the tag.  As the RDF standard is implemented within commercial products, its application will be attractive.Another web standard being evaluated is Cascading Style Sheets.  Style sheets describe how documents are presented on web clients. Two W3C Recommendations (CSS1 and CSS2) are widely implemented although not consistently.  CSS can be used to style HTML documents.   Extensible Style Language (XSL), see reference [3], is a language to transform XML documents and an XML vocabulary for specifying formatting semantics. XSL forces organization on XML to transform the data into a well-formed tree.  For example, XSL can be used to transform XML data into HTML/CSS documents on the Web server.  This way, the two languages, XML and CSS complement each other and can be used together.  For presentation, XSL and CSS can be used to render XML documents. Z39.50 (ANSI/NISO standard) was also examined as an alternative to XML for the search format.  Z39.50 addresses information interchange but at a protocol level for messaging between Z39.50 servers and Z39.50 clients.  The protocol specifies the definition of protocol control information, rules for exchanging data, and conformance requirements for the implementation.  Use of the protocol as the standard for an internal MSRR data format is inappropriate but its use in a translator would support repositories that implement the protocol.  Alternatively, the protocol itself can be implemented in XML.RepositoriesThe Modeling and Simulation Resource Repository is a DoD information system which supports discovery, registration, cataloging, and access of various types of resource objects pertinent to the Modeling and Simulation community.  The MSRR is sponsored and operated by the Defense Modeling and Simulations Office and participant organizations.  The MSRR system deploys a centralized metadata repository with URLs to underlying resource objects.  This DMSO MSRR metadata repository, referred to as a Registry, contains information needed to support a federated system of DoD repositories of Modeling and Simulation resources.   Repositories in the MSRR family besides the DMSO central node are known as peer nodes.Some peer nodes are the various repositories representing the M&S Offices of the services, U. S. Navy, U. S. Air Force, and U. S. Army.  External interfaces to the peer nodes are currently facilitated through a search engine.  The search engine extracts data from the web site or database. A database is commonly used to store metadata information on the various resources for application browsing or searching of pertinent information.  In contrast, web site searches are currently limited to document type resources rather than database tables. Accessibility to databases and web sites implemented through a single mechanism is planned.   Interoperability among MSRR systems relies upon proper data exchange for each underlying search mechanism.  Current access to search engines must utilize an HTTP based interface to be applicable on the web. Without disturbing the structure of the central repository engine, a translator that maps the nodes resource data model to an agreed upon standardized set of minimal metadata is required. 3.  Experiment An experiment was conducted between the MSRR Central repository and an external repository, the Navy M&S Catalog.  The goal of the experiment was to utilize XML as the data transform mechanism in exchange of information describing resources.  The scope of the experiment was limited to searching for a string within the subset of registry resource metadata.  The Navy M&S Catalog is a Microsoft Access based catalog utilizing Allaire Cold Fusion scripts for its web interface.  The MSRR Registry data set was formatted into an XML tree.  The parent node represents a set of retrieved resources with each leaf in the tree representing a particular resource.The scenario for the experiment was a distributed search.  A search specified through a common form was distributed to various peer nodes and the central node. The search was processed by the repository’s particular search mechanism.  For the Navy, the Cold Fusion interface; for the DMSO MSRR, the Java Database Connectivity interface; and for others, the Infoseek search engine were invoked..  The result sets were then transformed into XML.  All XML data were combined and processed with user preferences such as sorting.  The XML was then mapped to HTML tables using a style sheet then presented to the browser with colorful formats to distinguish resources from the same sources.  Choosing an XML parser was the first task.  XML engines from three vendors were examined, Microsoft, Sun, and IBM.  The XML engine would need to interface with Sun Java Development Kit 1.1.7 and Sun Servlet Development Kit 2.0.  The IBM XML engine offered the most feature rich class and integrated with the JDK easily.   Utilizing the IBM XML Parser, data was extracted from the XML stream and parsed with the XML results from the MSRR Catalog to present a seamless integrated search.  EMBED Word.Picture.8Figure 3.1To implement the scenario, three java components were developed, figure 3.1: repository translator, component servlet, and presentation formatter. The repository translator was developed as an interface to the Cold Fusion Server scripts which handle queries to the Navy M&S Catalog.   Generalizing this repository translator is planned for following experiments.  The component servlet operates similar to client-server applications except under the framework of web based communications with the server being an HTTP server and the client being a web browser.  The servlet extends the functionality of a web server through HTTP request and response messages. The translator maps the exchanged result set into a XML tree, which is then transmitted to the presentation formatter.  The component server can manage several translators through multi-threading thereby allowing simultaneous searching of different repositories. The translator is enforcing the business logic and data transformation logic.  The presentation formatter processed the cascading style sheet into HTML equivalents. The XML structure was divided into two parts: a header and body.  The parent node implemented information on the search result set based on the underlying search mechanism to the Navy M&S Catalog, a relational database.  Parameters, like sort preference, were communicated to the translator.  This header type data could easily support appropriate attributes for different repository interfaces.  Utilizing this mechanism, translators inherit extensibility and dynamic configuration.In our header, a resource list may contain several resources but the tags presented below are used to support retrieval of sets of resources.  The NMSC search engine allows retrieval of resources in sets to improve performance.  If the user is only viewing 10 results at a time, the initial wait time is reduced.  Taking advantage of the multi-threading architecture improves performance.  <resource_list><resource_count> .. </resource_count><first_index>.. </first_index><last_index>.. </last_index><number_remaining>.. </number_remaining>The body resource tags (illustrated below) support the basic registry information.  The translator needs prior knowledge of this format to properly map the elements to HTML constructs.  Tables were used to present the resources in row delimited displays.  Translators could also be created to map the XML elements to Java graphical objects, AWT (Abstract Window Toolkit) or JFC (Java Foundation Classes) constructs.  Abstracting these element maps to files is needed for flexibility in integration with various data models. Adding another resource attribute requires modification of the translator code.  If an element-map file were supported, this change would just effect the mapped file.   A future experiment is planned to demonstrate this architecture.<resource><resource_title>.. </resource_title><resource_url>.. </resource_url><resource_acronym>.. </resource_acronym><resource_sponser_org>.. </resource_sponser_org><resource_date_modified>.. </resource_date_modified><resource_type>.. </resource_type ><resource_description>.. </resource_description></resource>	<resource>.</resource></resource_list>The XML implementation has applicability as a Data Interchange Format.  Results of this experiment could lead to an MSRR DIF.  The MSRR DIF should address the basic common set of metadata needed for resource exchange and the extended set of metadata for node customization.  The element-map file is also a component of the DIF.  The MSRR DIF, in this context, is defined as the specification of the format for which a repository’s resources information is exchanged with a MSRR translator.In the translator, CSS was demonstrated to distinguish results from different repositories in the integrated search result set.  The style sheet for the experiment demonstrated control of presentation down to the data value.  An HTML table enforces presentation control on a cell or row basis, thereby delivering repetitive tags if color and font are used to differentiate cell values.  Utilization of the style sheet allows a central location to maintain this styling.  Adhering to HTML 3.2 tags keeps the CSS uniform across the Microsoft and Netscape browsers.  The CSS utilized for the experiment follows.<Style type="text/css">TABLE    { border-style: hidden } Body     { color                 :        black;           background      :        white;           border-style      :       none           Text-Decoration :     none }TD.leftCol  { width: 80% }TD.rightCol { width: 20% ; text-align : right }TD.rightColSmall { width: 20% ; font-size: x-small ; text-align : right }TD.fullCol  { width: 100% }  P.AF { color : gold }  P.Navy { color : darkblue }  P.DMSO { color : #cc3300 }  P.Army { color : darkgreen }   A:link, A:active                     {                     text-decoration :       underline;                     color                 :       blue;                     background      :       transparent;                     }           A:visited {                     color                 :       #6699FF;                     background      :       transparent;                     text-decoration :       underline;                     }</Style>The <P> tag was sub-classed into three different objects depending on the actual data value of a resource sponsor organization.  For distinction, colors for a particular sponsor were used.  By attaching style sheets to these structured documents, developers can configuration manage the presentation format without sacrificing device-independence or adding new HTML tags. The translator was responsible for mapping the resource tags to various HTML constructs.  Future application of XSL should prove less tedious in code.  A simple loading of the XSL style sheet and passing off to the XSL engine is the likely scenario.  XSL would automatically perform the HTML/CSS transformation but XSL engines were not available during this initial experiment.   The experiment demonstrated the ease of integrating XML into the framework of an MSRR distributed search capability. The standardization of XML has been widely accepted and will be widely used in web clients as XML engines, XSL, RDF, and DOM become commonplace.  Initial experiment results imply that the MSRR system would benefit in interoperability by adopting XML as its data exchange mechanism. XML does not limit the capability of a specialized exchange format but offers scalability, independence, and extensibility.4.  Beyond the ExperimentThe MSRR Registry contains a minimal set of metadata elements needed to convey ownership, description, and location.  In comparison, a Tri-Service data model (standardized schema for NMSC, AFMSRR, and AMSRR) extends the minimal Registry set with metadata labels needed for configuration, engineering, and organizational management of their resources.  The Tri-Service element set also is M&S specific describing properties like HLA Compliance and Verification, Validation, and Accreditation data.  This extra information is equivalent to catalog information.  Catalog information under the MSRR concept of operation, are the metadata elements peculiar to various resource types beyond those identified in the Registry.  Two underlying requirements can be identified: a basic, minimal, metadata element set which can be used by all MSRR repositories and the flexibility to extend this basic set.  The BIDM (Basic Interoperability Data Model standard, see reference[4]) for reuse libraries was examined as a starting point.  The BIDM defines the minimal set of information about assets that reuse libraries should be able to exchange to support interoperability.  The Asset concept conveniently maps to the resources in the MSRR vocabulary.  The BIDM is also an object-oriented data model that support use in relational based or object based data models.  Adoption of the BIDM would require minor modification for MSRR use particularly in support of a Submitter object. The BIDM for M&S Resources could map into RDF as follows. An M&S extension to the BIDM should be proposed to support tag sets beyond the core MSRR registry metadata. <RDF:RDF><RDF:Description Resource:href=”RESOURCE_URL”>  <Resource:BIDM>    <BIDM:Abstract>    <BIDM:Cost>    <BIDM:DateOfInformation>   <BIDM:Domain>   <BIDM:Keyword>   <BIDM:Language>      <BIDM:Restrictions>      <BIDM:SecurityClassification>   <BIDM:TargetEnvironment>         <BIDM:UniqueID>      <BIDM:Version>      <BIDM:VersionDate> </Resource:BIDM></RDF:Description></RDF:RDF>The RDF proposal should change as RDF undergoes review by communities beyond the library sciences but the formatting in XML is evident.  The sub-classing of tags derived from RDF has the ability to support relationships beyond parent-child XML relationships.  Integrating the BIDM in the MSRR registry would allow the reuse library community to be interoperable with the MSRR.  As source code and algorithms become populated as MSRR resources, software reuse in the Modeling and Simulations community could be facilitated. References[1]   T. Bray, J. Paoli, C. M. Sperberg-McQueen, editors: “Extensible Markup Language (XML) 1.0”, W3C Recommendation, February 1998.[2]   O. Lassila, R. Swick, editors: “Resource Description Framework (RDF) Model and Syntax Specification”, W3C Working Draft, October 1998[3]   J. Clark and S. Deach, editors:  “Extensible Stylesheet Language Version 1.0”, World Wide Web Consortium Working Draft, December 1998.[4]   IEEE Standards Board : “IEEE P1420.2, Standard for Information Technology: Software Reuse: Data Model for Reuse Library Interoperability: Basic Interoperability Data Model (BIDM)”,  December 1994Author BiographyGARY GARINGO is a Senior Software Engineer at Innotiv Incorporated, San Diego, CA.  At Innotiv, he integrates Internet software to facilitate information access and retrieval.  Gary is a System Engineer for the MSRR Technical Support Team.  He obtained his B. S. in Electrical Engineer at California State Polytechnic University, Pomona and his M. S. in Software Engineering at the Naval Postgraduate School.JAMES AUGINS is a Senior Engineer and President at Innotiv Incorporated, San Diego, CA.  He has been active in DMSO Repository and Data Engineering projects and working groups.  He obtained his B. S. and M. S. in Electrical Engineering at Syracuse University.