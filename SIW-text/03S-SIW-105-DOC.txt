A CORBA Framework for Adapting C4I Hardware to Reconfigurable Simulators Vince GolubicRaytheon NCS (VSL), Plano, TX 75023-2310Demron Ignace, Dale AnglinRaytheon NCS (C3S/JBM), Fort Wayne, IN 46808-4106Randy BraschRaytheon NCS (C2IS), Orlando, FL 32826-2716golubic@raytheon.com, Demron_Ignace@raytheon.com,  HYPERLINK "mailto:Dale_E_Anglin@raytheon.com" Dale_E_Anglin@raytheon.com, Randolph_R_Brasch@raytheon.comKeywords:OMG, C4I, CORBA Object Adapters, AFATDS, Reconfigurable, Interoperability, Simulation Common Operating Picture (SIM COP)ABSTRACT: This paper describes an experimental effort to define a CORBA framework applied to ACRT Reconfigurable Simulators which allows the AFATDS (Advanced Field Artillery Tactical Data System), a fielded Joint tactical Fire Support planning and execution system, to exchange tactical data with ACRT.  Two ORBs were used including Java JDK ORB and the ACE+TAO ORB.  There were two goals in applying CORBA, one being to interface to an actual tactical C4I system leveraging available COTS/GOTS CORBA software, and the other to exploit CORBA and use its features to replace traditional message passing mechanisms between networked systems within the simulator itself. This paper describes the designed solution, which includes the best of both worlds - flexibility achieved in adapting new systems. Deriving simulation entities from real-world unit data resulted in a rich set of C4I situation data being available to simulation systems.1. Introduction The following paper details the approach taken to achieve a high level of interoperability between an operational command and control (C2) system and the simulation environment of a PC based reconfigurable simulator. This experiment enjoined multiple Raytheon development groups and products to address the needs of both the C2 community and the military training community. The military C2 community is evolving from a world of voice radios, maps, and acetate overlays to one in which vast amounts of information and decision making resources are available to Commanders and their staffs.   The Global Information Grid and the Joint Virtual Battlespace are built on wide area networks, information systems, broad computation power, and extensive displays. This new world offers the potential for advancing the capabilities of C2 systems by leveraging the potential of the digital environment. One of the ways to take advantage of this potential is to link the C2 system with simulation systems, which expands opportunities for use of simulation systems to support three (and four) dimensional visualization, mission planning, course of action analysis, and mission rehearsal in an operational environment. Simulations support training of commanders and their staffs to enhance their skills for making decisions and controlling operations. However, command and staff training systems typically have unique user interfaces that require specific training and additional expertise to use. To change that, the military is actively pursuing efforts to interface C2 systems directly with the simulations making the simulations more usable for the soldiers being trained.To date there has been a focus on using either standard simulation protocols or C2 protocols to achieve some level of interoperability between simulations and C2 systems. These types of interfaces are limited to exchanging only externally visible data. Our CORBA based approach provides an initial attempt to exchange internal system data using commercially available middleware. This approach results in a richer set of information exchanged between systems and provides increased levels of interoperability than is currently available.The following describes the design approach for an experiment with a CORBA connected architecture which adapts a C4I AFATDS proxy client called  LiveLink®-3, to a reconfigurable simulator. C4I/Simulation Experiment GoalsThere were several goals in the October 2002 C4I/CORBA experiment, the first being to demonstrate a simulation common operating picture (SIM COP) between the AFATDS and a PC based reconfigurable simulator using a CORBA connected framework.  Perhaps the AFATDS system and the simulator, composed of a heterogeneous set of components, could provide a means to assist tactical decision makers such as the S2/S3 officers (coordination & operations officers) in a Fire support role. METT-T (Mission, Enemy, Terrain, Troops available & Time) and COA analysis are also important warfighter considerations.  Further, a C4I/simulation bridge using CORBA might provide tools to assist the user with visualization and analysis1,8.  Hopefully, these goals would also intersect with Simulation/Stimulation T&E community efforts to improve combat systems testing.A primary goal of the October 2002 demonstration experiment was to serve as a means to “close the loop” with a simulator and DII-COE compliant AFATDS, continuing with follow-on experimental efforts in FY03/04.  Perhaps focused  experiments using a CORBA framework would derive some reuse within the community and also demonstrate new opportunities for synergy between C4I and the simulation benefiting the warfighter.  There are a variety of applicable standardization initiatives within the simulation community (such as DIS, HLA, XML). Along with CORBA they may also be an approach worth considering within these experiments in bridging a variety of common components6. 1.2  DII-COE  & OSF GoalsThe second goal was DII-COE compliance where possible.   DII-COE3,4,5 is also providing a measure of standardization on which to build C4I systems and it appears to be providing a platform to move towards increased C4I interoperability with DII-COE7 simulation initiatives. The wider notion of Heterogeneous Synergy5 and the standardization of domain components that share a common reference model for information exchange is an important concept for evolving standards. In this same spirit, we hoped to demonstrate an example of a heterogeneous environment by mixing a Java Based ORB, ACE+TAO ORB and a heterogeneous mixture of GOTS/COTS software modules typical of a fielded PC based reconfigurable simulators in use today11.The third goal was to further experimentation with open source Linux. Several approaches have been successful over the years in adapting C4I systems and simulators, however a CORBA based Linux approach appeared as an attractive means to experiment with leveraging GOTS/COTS Linux API goals that intersected the wider community goals of the OMG.  The Open Software Foundation (OSF) has a strong following of Linux developers. This third motivating factor also fit nicely within this experiment, since the reconfigurable simulator was now hosted and fielded on PC-Linux based systems10,13.  Prior development efforts had defined a set of ACE+TAO based CORBA classes, called the Tiger Sim Object Adapter (SimOA), that were of use within the simulator for CORBA Event Channel based message passing between CPU hosts (Windows and Unix OS variants)8. With the wide following of Linux OS and OSF development, it seemed like another opportunity for synergy by applying the same CORBA Object Adapter classes in a Linux based approach. For the October 2002 experiment, the CORBA based SimOA could be used throughout the simulator and on the external C4I interface to the AFATDS by adding a new POA (Portable Object Adaptor) to accommodate the Java based ORB and AFATDS Proxy.Finally, but not least of all, was an additional motivation and goal: the ability of community C4I / simulation efforts to gain some benefit from the experimental design approach and our lessons learned in adapting a live fielded C4I system with a simulator using a low cost CORBA framework.2. Experimental Design Approach2.1 Weighing the Benefits of CORBAThe OMG is providing a variety of standards that serve as a means to accomplish goals of increased interoperability and the CORBA specification is one. CORBA includes an Object Request Broker (ORB) architecture with a variety of standards for implementation. The Portable Object Adapter (POA), Event Services (supplier/consumer & event channel), DSI (Dynamic Skeleton Interface) and IDL specifications are features that in some respects mirror goals within the HLA2.  With the increasing need to provide a real-time environment for next generation Tiger modules and an Object Oriented (OO) framework, the TAO real-time ORB was examined. TAO features appeared attractive not only in adapting C4I equipment (with a DII-COE CORBA as a component) to the simulator, but also in adapting our legacy simulator modules to a CORBA architecture (In actuality, TAO was used as a way to adapt the internal simulator architecture first). The added benefit of TAO would be the ability to support and enforce real-time & quality of service (QoS) characteristcs needed for the new modules and interfaces. It was envisioned that some new CORBA based system modules developed would require this real-time performance feature and TAO would be a low cost means to add this capability with its adaptive networking framework to a new PC based system.The CORBA IDL and the Dynamic Skeleton Interface (DSI) also appeared attractive from the standpoint of being able to build Object Adapters for the C4I implementation, in this case the October 2002 AFATDS interoperability experiment. Since the Tiger SimOA was capable of using an Event Channel (EC) based approach, it seemed like a natural way then to add the external Object adapter for AFATDS to the CORBA_netcomm system module by extending Tiger SimOA with a new POA obtaining a measure of code reuse.  In this way we would build upon an OO framework, bridge messaging between legacy Tiger modules quickly, allow for CORBA “adapted” modules, and also provide for interoperability with a tactical C4I system. More details of this approach are explained in 2.2, the recent AFATDS experiment is explained in 3.2.2 Tiger SimOA Development OverviewTiger reconfigurable simulators have historically relied on both a pipes or UDP broadcast mechanism to pass system messages within the Tiger ACRT simulator constellation. The UDP approach uses a mixture of UDP/IP and shared memory amongst a heterogeneous set of system modules on several CPU hosts. The Simulation Executive (Sim Exec), Host manager and Netcomm execute, manage and monitor the runtime execution of these modules across many CPU hosts (see Figure 1).  The Host manager monitors the run time execution of spawned modules and alerts the user if a module encounters a problem. The CORBA framework we chose replaced Netcomm with a CORBA Event Channel message passing mechanism that still allowed legacy Tiger modules to pass data to/from shared memory on each host CPU via a set of calls on the Tiger API.  Rather than adapt the Tiger API, it appeared that TAO and an Object Adapter would be a better approach.Early work on ACE+TAO started within Raytheon (1999) with a concurrent push towards an object oriented module based design (C++ & HLA) and towards a Linux OS based run-time & development environment (from the familiar IRIX OS environment). There was a large amount of legacy Tiger code to consider in such a porting effort. It also appeared that both CORBA and Linux might provide a needed solution for a new Tiger ACRT infrastructure based on Linux. The Linux ACRT variants have recently been fielded10, but the CORBA solution would require porting lots of the legacy Tiger code from C to an OO environment, or it seemed.Work started within the Raytheon Virtual Simulation Lab (VSL) to redesign the message passing mechanism within Tiger so it would provide a more component/object based infrastructure9. A CORBA based Simulation Object Adapter (Tiger SimOA) was devised for Tiger that provided a measure of data encapsulation. VSL engineers were also looking into new OO based Tiger approaches and exploring feature improvements of ACE+TAO related to new CORBA based studies that intersected with SimOA12.  Figure 1.  Historical Tiger ACRT generic re-configurable simulator architecture using UDP based messaging.Work started within the Raytheon Virtual Simulation Lab (VSL) to redesign the message passing mechanism within Tiger so it would provide a more component/object based infrastructure9. A CORBA based Simulation Object Adapter (Tiger SimOA) was devised for Tiger that provided a measure of data encapsulation. VSL engineers were also looking into new OO based Tiger approaches and exploring feature improvements of ACE+TAO related to new CORBA based studies that intersected with SimOA12.  SimOA currently contains a TAO based Event Channel (EC) class, POA client/servant manager class, an Event Timer class, a Message Implementation class and a Sim Adapter class that leveraged the reconfigurability of the ACRT baseline and Tiger API.  SimOA would allow legacy Tiger modules “suitably adapted” to use the new SimOA Real-time EC features within ACE+TAO as Middleware.  SimOA would also allow new objects developed to be tied to the distributed object environment of CORBA as needed.Again, directly adapting all the legacy modules would take some time and resources given the number of header files and the strict CORBA IDL compiler. Some approaches would save porting time; others would provide for better execution and improved latency but would require more code re-factoring.  However, interest in a CORBA framework as a message passing mechanism continued as the Linux OS gained popularity and a new Tiger Linux variant was developed. Along with the wide availability of the ACE+TAO CORBA 2.X tools in various OS flavors including Linux, in the spring of 2000, another follow-on effort was underway to apply the SimOA in a new way that would adapt legacy Tiger Netcomm to SimOA (see Figure 2) with the goal in mind of also reducing the amount of legacy code to port. Since Netcomm was the primary means of passing data and message traffic within the simulator constellation of hosts, why not adapt this module first, and migrate others to SimOA later?Figure 2. CORBA based Tiger ACRT reconfigurable simulator architecture with SimOA Adapter applied to the Netcomm communications module. Adapted modules could also use an alternate Event Channel for a direct means of message passing if needed.Along with the wide availability of the ACE+TAO CORBA 2.X tools in various OS flavors including Linux, in the spring of 2000, another follow-on effort was underway to apply the SimOA in a new way that would adapt legacy Tiger Netcomm to SimOA (see Figure 2) with the goal in mind of also reducing the amount of legacy code to port. Since Netcomm was the primary means of passing data and message traffic within the simulator constellation of hosts, why not adapt this module first, and migrate others to SimOA later?This new approach would allow existing “legacy” modules to pass EC based messages using the CORBA “any” approach without changes to legacy Tiger modules and still allow for new OO modules to be developed to use the full capabilities of CORBA via a separate event channel as in Figure 2. In this way Tiger could leverage CORBA/ACE+TAO and derive benefits from the open source and OMG communities. This would still provide legacy modules derived from a variety of government and industry sources with the ability to utilize the SimOA CORBA framework of Tiger if desired.  One of the goals being to move legacy modules to CORBA as time and resources allowed. With the variety of fielded components from various sources and programs CORBA would serve not only as a new potential framework, but also serve as a bridge between past and future development efforts while the framework matured and various GOTS/COTS components standardized over time.2.3 Adapting the Run-time Environment to CORBAThe CORBA Portable Object Adapter (POA) spec supports a wide range of features that are attractive to a reconfigurable simulator environment. Since the Tiger simulator can be described as a loose federation of distributed modules on various hosts, the transient nature of the module environment indicated transient CORBA policies could be the norm rather than using persistent approaches (i.e.  Running a Naming Service at all times on the system).  Client and servant POAs would use transient policies. The various Tiger modules were typically involved in sensor simulation, 3D graphics, map displays, terrain databases, user input panels, motion models, weapons modules & haptic controls.  The dynamics of the Tiger’s “operational modes” and the “federation of modules” gave validity to abstaining from the use of “persistent services” (example: removing the requirement to operate the Naming Service).The ObjectID, i.e. the demultiplexing key used to associate clients with CORBA objects and the IOR file also appeared to be a natural fit to the legacy architecture of the simulator, which used a common file server within the simulator system of multiple CPU hosts. Each host “boots” executable binaries of system modules at startup from the common file server on a closed class C network.  Legacy modules such as the Sim Exec, DevCon (debugger console), host_manager (monitor) would not need to be adapted.  In fact, the only module really needing “adaptation” would be CORBA_netcomm.   If a module developer wished to write a CORBA compliant module “from the ground up” he/she would still be free to do so under this new architecture and define an event channel for communication.After experimenting with a CORBA Naming Service the use of the IOR (Interoperable Object Reference) file was determined to better fit the Tiger architecture with its shared NFS server. A common IOR file repository is shared for each external POA implemented (example: client and servant child POA approach for the AFATDS) In a similar way, the internal CoS Event Channel is shared (used to pass messages within the simulator).  This is a rather direct approach to “adapting” not only external POAs, but internal adapters for new modules and messaging. High reliability is achieved and there is no need to mind a Naming Service. IOR files could be placed in a common location on the file server available to all PC hosts along with persistent simulator data. The default system environment file would specify the ACE+TAO & Java ORB environment variables and the IOR file locations for each POA implemented. We applied this standard approach to all Tiger simulators. (Note: The SimOA classes where re-factored to support this approach with a fallback being the Naming Service).At simulator startup, the CORBA_netcomm and its objects are “activated” in two modes, a master and slave mode via the vehicle simulation configuration (veh.config) file. The master netcomm object running on the system server then instantiates the EC and any servant or client POAs. The slaves, running on all other hosts (1 to N) wait for the master to finish ORB initialization and incarnation of the root POA servant and any external client & servant child POAs (i.e. for AFATDS) via multiple shared IOR files. The reverse process is followed for CORBA_netcomm object deactivation and POA client/servant etherealization and destruction.The new SimOA CORBA framework has been tested on several vehicle configurations of a standard ACRT Tiger simulator and adapted to the standard Tiger code base. Currently most Tiger modules using CORBA_netcomm can support frame rates from 10-20Hz with no apparent system degradation. Further work will hopefully better quantify system latencies and continue the migration efforts to CORBA and QoS related studies.3. C4I /AFATDS Adaptor Experiment3.1 AFATDS, EMT, and SISTIM Overview   AFATDS is a system of mobile, dispersed, multi-functional nodes, providing automated planning and execution capabilities to fire support Operational Facilities including Fire Support Elements, Fire Support Coordination Centers, Maneuver force, Field Artillery Command Posts, and Fire Direction Centers.  It allows commanders and staff to monitor fire support operations and issue guidance and directives from widely dispersed battlefield locations.  As a DII COE certified system, the AFATDS is key to the Army’s Battlefield Computer Systems.  In its multi-service, automated C2 fire support system role, AFATDS provides the capabilities to process, analyze, and exchange combat information horizontally and vertically, with other ABCS systems, and selected C2 and technical systems. The AFATDS interoperates with existing tactical systems in order to serve as an integral element in the overall command and control structure.  These systems consist of those directly engaged in execution of the fire support mission, as well as other control systems which form the ABCS and USMC C4ISR systems.  The AFATDS is capable of managing Field Artillery cannons and rocket/missiles, Air Fire Support, Naval Surface Fire Support, mortar, and, Army/Marine aviation attack systems at echelons above Corps down to platoon level.  In additional to tactical file control employing a variety of weapon systems, it also incorporates the technical fire control (ballistic calculations) to support cannon artillery employment.    The Effects Management Tool (EMT) is a Java based application, which can run on platforms ranging from laptop PCs up to large servers.  It provides a Client capability whichcapability, which extends AFATDS access with the capability to select elements of AFATDS information to create a real-time display of the battlespace for synchronization of maneuver and the effects of fires.  The EMT provides near-real time fire support and situation understanding information and capabilities to the Commander and staffs.  This includes the display of active and inactive targets, map registered depiction of fire support coordination measures, range fans, friendly and enemy (blue/red) vectors for active fire missions, and display of unit symbols at the correct location on the map.  The User has the ability to ‘drill down’ and interrogate displayed objects for detailed data.  Additionally, there is an ability to initiate a Fire Mission (CFF) from the EMT to the AFATDS for processing.  Other warfighter capabilities include counterfire, functions to streamline the planning, coordination and attack of critical, time sensitive targets, target lists/reports, collaboration tools, view plans/guidances, selectable views/overlays/filters, and ASR/ASL/ITO tools, which results in low/no training requirements.  The EMT also supports record and playback which presents graphical playback of tactical events.  It is useful for shift change briefings and after action reviews.SISTIM (SImulation/STIMulation) is a Raytheon system used to simulate tactical units (OPFACs) and to stimulate the networked fire support systems.  SISTIM provides a broad range of testing for fire support systems (e.g. AFATDS) as well as providing training support for Commanders and staffs.  It creates the necessary stimulus to drive the fire support decision process.  This provides a controllable, repeatable training environment for the fire support staff and allows the subordinate elements to conduct appropriate and more effective training prior to collective level training.  Additionally, it can be used to support various stress tests and other operationally realistic scenario employments.SISTIM represents units in two broad categories known as smart nodes and responder nodes.  It represents sensors and fire units as smart nodes.  Sensors include platoon forward observer, company fire support officer, Firefinder radars, OH-58D aerial observer, JSTARS Ground Station Module, etc.  Fire unit nodes can represent a cannon firing platoon, a mortar platoon, an MLRS unit communicating through a Division Artillery, etc.  When linked to a live C2 fire support system, these nodes are capable of executing the entire fire mission sequence.  Responders are the other type of node.  These units fill out the missing elements on the battlefield.  Messages sent to them are acknowledged and they can be the source of planned or real time created messages.3.2 Experiment Overview The CORBA ORB chosen for the simulator portion of the C4I adaptor experiment was based on ACE+TAO (as explained in 2.2) and the CORBA ORB for the AFATDS LiveLink-3 proxy was based on the JavaTM JDK ORB, primarily because it was already in use within the AFATDS as part of the DII-COE GOTS/COTS API toolset. As Figure 3 illustrates, a new servant POA was added to the SimOA class framework of the reconfigurable simulator.  This served as a means to exchange marshaled data and events between the AFATDS and the simulator.A CORBA IDL package was developed that encapsulated an Entity State DIS PDU object for aggregate and individual AFATDS entities.  An interface was also included in the IDL that contained the necessary attributes to invoke a Call for Fire via a FirePDU from the simulator back to the AFATDS.  The interface defined in the IDL also provided the means of transporting the DIS PDU objects for aggregate and individual AFATDS entities.Follow-on experiments will expand these BLOCK-I definitions to include “package format” data types common to C4I systems and “close the loop” with increasing functionality.Applying the Java IDL compiler on the proxy side and the TAO IDL compiler on the simulator side created IDL stub classes that served as a base class for development with the AFATDS Proxy and SimOA, respectively. On the simulator side, a new POA servant class was derived from this IDL base class which became a new addition to Tiger SimOA.  Figure 3.  Experimental CORBA framework for adapting the AFATDS to a re-configurable simulator architecture used in the October 2002 experiment.This new POA could have been developed as a new Tiger module, but a measure of code re-use was needed for the timeframe involved, so the decision was made to apply it to CORBA_netcomm so that all modules within Tiger could immediately share the AFATDS data.3.3 Applying the AFATDS EMT (Client)The Raytheon developed client, EMT (Effects Management Tools), was an excellent match for this interoperability effort.  The EMT already uses a CORBA interface to communicate with the AFATDS.  The design patterns (e.g., the adapter pattern is used for the interface) are extensively used throughout the EMT.  The main effort on the proxy side was to reapply the adapter pattern to encapsulate the interface defined by the IDL and provide additional management for the purpose of facilitating the interface between the EMT and the ACRT.  CORBA enabled the proxy to pass data to the ACRT with no understanding of the ACRT’s implementation of the interface.  By allowing CORBA to manage all socket communications, the proxy implementation gives the appearance of a direct method invocation.  CORBA truly does provide an interface without any strings attached.3.4 Using SISTIM as a Stimulation ElementSISTIM,SISTIM was used to stimulate AFATDS with operationally realistic data to provide a simulated tactical theater.  A sequence of events was fed to AFATDS through a tactical message format known as package 11.  The data passed through the tactical messaging was based upon an initial database created on the AFATDS.  The data was then passed from AFATDS to the LiveLink proxy and from the proxy to ACRT via CORBA for both transport mechanisms.  The whole story displayed as the operational picture at the ACRT and the AFATDS during the demonstration, was orchestrated by SISTIM’s TOEL capability.3.5 October Demonstration ResultsThe mission data items sent by SISTIM were correlated quite well with the visual model representation seen in the Tiger ACRT. It is important to note that like a pure simulation environment, similar issues regarding agreed upon enumerated values for vehicles and how they are represented in the Tiger 3D environment were encountered.  By using a common sense standards based approach the values sent via Live-Link were tweaked to match those data items expected by the simulator.  We also encountered data items regarding the numerical index of vehicles and systems simulated by SISTIM and the internal indices used by data items in the simulator. It was determined that a better method of tracking vehicle indices added by SISTIM would be required. In a closed loop situation with the Tiger sending target data items back to AFATDS it is crucial to keep these indices synchronized. A variety of mechanisms are being explored to do this across the heterogeneous components involved.Mixing a live tactical C2 system with a simulation can leverage knowledge gained from both domains. It is also important not to propagate data representation issues between system domains, but rather design in a better approach when instances occur that highlight that a new approach is required.More focus is also needed to better define the desired closed loop messaging between AFATDS and Tiger systems. A community wide approach will be needed in this regard to better define the SIM COP roles with the pertinent message types desired and the visual methods of representing events and logistics items without cluttering the 3D environment There are a variety of approaches in the analysis community that may help in this regard.4. SummaryIn summary, in defining our experimental goals, the above considerations of Simulation, OMG/CORBA, Open Source Linux and C4I/DII-COE communities were the primary motivations in trying to bridge the AFATDS tactical fire support system with a PC based simulator on a CORBA framework.  However, adapting CORBA is not a “one size” fits all approach and requires careful study of the systems involved for adaptation. Consideration must also be given to migrating header files to conform to the strict nature of the IDL compiler. The experience we gained in moving a legacy simulation system to a CORBA framework has illuminated a variety of approaches and best practices that are ideal in writing and integrating new system modules based on a pure OO approach.  We found CORBA to be quite flexible in adapting COTS/GOTS system modules to a heterogeneous simulation framework typical of fielded systems. It is hoped that the details of the design approach taken and the results obtained may provide some benefit to others interested in adapting C4I and embedded systems via CORBA to their simulation goals.In studying the “synergies” among the complex systems involved in this small experiment, we do feel that further progress will be made as standards are refined and are implemented within a variety real hardware, culminating in better tools for the warfighter assisted by simulation.Acknowledgements: The authors would like to thank Tom Shields, Randy Boys, Gordon Martin and Jim King (Raytheon NCS Plano, TX) for management, guidance and funding of Tiger CORBA integration efforts. Thanks also to Trey Grubbs and John Mellby for developing and championing SimOA and to Joe Osborne and George Koharchik for developing CORBA_Netcomm. Without their continued help and patience none of this work would have been remotely possible. We would also like to thank the community of developers of ACE+TAO.  Thanks also go to Tim Jahren, Dave Behringer, and Randy Brasch (Orlando, Raytheon C4I) and Dale Anglin (Ft. Wayne, NCS/JBM) for recent funding and providing C3 equipment and helping with the AFATDS integration/testing with the Tiger reconfigurable. We would also like to thank Steven Sheasby for assistance with the CORBA IDL compiler and advice on code re-factoring issues during the October demonstration.5. References[1] US Army Research Institute:“Commanders Battle Staff Handbook”, US Army Combined Arms Command, Ft. Leavenworth, KS, Ft Benning Field Unit, US Army Research Institute for the Behavioral & Social Sciences, pp 1-54, June 1994.[2] DMSO: High Level Architecture (HLA) IEEE Standard 1516, “https://www.dmso.mil/public/transition/hla/techspecs”, Defense Modeling Simulation Organization, 2001.[3] 	Defense Information Infrastructure Common Operating Environment:  “Home Page” : http://www.diicoe.disa.mil/coe/[4]	Layman,G., Daly, J., Daly, J. & Weatherly, J.: “C4I Embedded Simulations”, Paper 01S-SIW044, Simulation Interoperability Workshop, Spring 2001; Orlando, Florida.[5] 	Tolk, A.:  “Heterogeneous Synergy-A Vision for the Next Generation of Warfighter IT Systems”.2000 Fall Simulation Interoperability Workshop, September 2000; Orlando, Florida[6] 	Tolk, A.: “Avoiding another Green Elephant-A Proposal for the Next Generation HLA based on the Model Driven Architecture”, 2002 Fall Simulation Interoperability Workshop, September 2002; Orlando, Florida[7]  Heib, M.R., Sprinkle, R.: “Simulation   Infrastructure for the DII COE Architecture: The Army Vision”. 2000 Simulation Interoperability Workshop,, September 2000; Orlando, Florida[8] 	Layman, G., Daly J., Furness, Z., Womble, J.: “C4I-Simulation Interoperability Using the DII-COE and HLA”, 2001 Fall Simulation Interoperability Workshop,,September 2001; Orlando, Florida[9] 	Grubbs, T.: “Next Generation Reconfigurable Simulators and Real Time-ORB”, Raytheon Internal Briefing, November , 1999.[10] Koharchik, G., Roberts, B.: “Porting from IRIX to Linux”, “Coding for portability to Linux:  examples from the ACRT land vehicle port”, Linux Journal, February, 2001.[11] Boys, R., Darlington, D. : “Shades of Grey in       Interoperability “, 1998 Fall Simulation        Interoperability Workshop,,September 1998;       Orlando, Florida. [12] Mellby, J.R.. : “Transitioning to an Object-        Oriented Reconfigurable Simulation         Architecture”, 1998 Spring Simulation        Interoperability Workshop,,March 1998;       Orlando, Florida.[13]	Raytheon Company-VSL: “ACRT Tiger Reconfigurable Simulator User’s Guide” Linux Version 2.02 (pdf format), Raytheon Company NCS, Plano TX 75023, April 2002.Author BiographiesVINCE F. GOLUBIC is a Software Developer with Raytheon, Network Centric Systems, Plano TX in a Development & Testing support role to the Tiger re-configurable simulator product line.  His interests include embedded control systems integration with live systems (optics, telemetry, radar and sensors), CORBA and distributed simulation. He has been a lifetime member of the IEEE. He is also a member of the American Physical Society. He holds a M.S. in Electrical Engineering (DSP & Control Systems), a B.S in Engineering Physics and a B.S in Nuclear Engineering from the University of Arizona, Tucson, Arizona.DEMRON IGNACE is a Software Developer with Raytheon, Network Centric Systems, Fort Wayne, IN in a Research and Development role.  His interests include Client/Server architecture and communications. He holds a B.S. in Computer Science from Purdue University, West Lafayette Indiana.DALE ANGLIN is a Software Engineer with Raytheon, Network Centric Systems, Ft Wayne, IN.  His interests include applicability of systems analysis & design patterns, agent technologies, and live to simulation interfaces.  He holds a B.S. in Computer Science from Olivet Nazarene University and an M.S. in Computer Science from National Technological University.RANDY BRASCH is a Software Engineer with Raytheon, Network Centric Systems, Orlando, FL. His interests include interoperability of command and control systems with virtual and constructive simulations. He holds a M.S. in Mathematics from Colorado State University and a M.A. in Computer Science from the University of Texas at Austin.PAGE \# "'Page: '#''"   We probably need some explanation of Tiger and its general capabilities somewhere in section #1PAGE \# "'Page: '#''"   Don’t we need more in here about the results of our demonstration and the findings from it?  RANDY, VINCE, DEMRON?