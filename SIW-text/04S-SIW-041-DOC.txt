Federation Management in the Joint Training Confederation 2004J. Patrick Van MetreThe MITRE Corporation7515 Colshire DriveMcLean, VA 22102-7508(703) 883-2705jvanmetre@mitre.orgKeywords:Federation Management, FMT, JTC, ALSP, ADAPTORABSTRACT:  The Federation Management Tool (FMT) has been used by and adapted for many federations, including the Joint Training Confederation (JTC). It provides insight into the execution of an HLA federation by providing information on time management, object ownership, and communications. The FMT joins an HLA federation and participates as a peer of all other federates, obtaining data through the Management Object Model (MOM) and MOM extensions. However, the FMT provides only one view of the federation execution at a time; for federation managers to have multiple FMT windows open at a time, multiple FMT federates must be joined. Multiple views of the execution of the federation are a requirement in the JTC, as the current infrastructure used by the JTC -- the ALSP Infrastructure Software (AIS) -- provides this capability. Joining multiple FMT federates has several drawbacks. First, increasing the number of federates increases the complexity of the HLA federation, increasing the risk of failure. Second, the resource demands of the FMT are not insignificant; it requires processing and memory resources comparable to many other HLA federates. Third, it puts constraints on the hosts that can run the FMT, as it requires RTI libraries and the Java Runtime Environment to be installed. This paper will present a new FMT architecture that is modular, extensible, and provides the ability to attach multiple FMT clients using a single FMT federate and significantly reduced resources. One of the clients that has been developed provides the required multiple views into federation execution without any additional client-side software or significant system resources required. Other clients may be quickly developed to add new functionality, such as an audible alert tool. Other federations that use standard or extended MOM data may use this architecture to create new lightweight modules that enhance FMT functionality with reduced development time.IntroductionThe Joint Training Confederation (JTC) is a collection of military simulations that exchange object information in order to improve the representation of combat operations in simulations that support joint training exercises all over the world.   This exchange of information can occur via the Aggregate Level Simulation Protocol (ALSP) or the High Level Architecture (HLA) Run Time Infrastructure (RTI). ALSP and HLA are protocols that enable interoperability between aggregate, constructive simulations. These simulations support combat interactions between air, land, sea, and space objects (including tactical ballistic and cruise missiles). They provide a common electronic warfare environment and a high-resolution training environment for logisticians and intelligence cells.  REF _Ref474992580 \r [1]Prior to FY 2004, the infrastructure used to connect the JTC models (simulations) has been the ALSP Infrastructure Software (AIS), which as the name suggests, is based on the Aggregate Level Simulation Protocol (ALSP)  REF _Ref474983534 \r [3].  In FY 2004, the JTC is fielding the JTC Infrastructure Software (JIS), which is HLA-based.  The JIS is designed so that the JTC models that currently use an ALSP interface to the AIS will not have to change that interface; they will connect to the RTI through an ADAPTOR, which acts as, among other things, a translator between ALSP and HLA.  New models that join the JTC and already have an HLA interface implemented must only adapt their object models to interoperate with the JTC.  REF _Ref474997674 \r [4],  REF _Ref474997684 \r [5],  REF _Ref474983524 \r [6]   (See the appendix in section  REF _Ref475000094 \r 6 for a list of JTC terms, acronyms, and applications.)The formal requirements for the JIS mandate that the ALSP interfaces be preserved, but there are also informal requirements.  One such informal requirement is that the federation management process used by the model controllers be similar to that used with the AIS.  While the concepts of (con)federation management when using the AIS and the JIS are similar, the means of managing the federation must be different due to the differences in the ALSP and HLA architectures.  This paper will discuss (con)federation management in the JTC using the AIS and JIS, as well as the Federation Management Tool (FMT), which has been re-architected to meet both the formal and informal requirements of the JTC.Federation Management in the JTCAIS Confederation ManagementPrior to FY 2004, the execution of a confederation was managed using the tools provided by the AIS, the architecture of which is shown in Figure 2.1.  The Confederation Management Tool (CMT) was used by the infrastructure controllers to view the state of the confederation, including time, object, and communications states for each actor participating.  The CMT connects to every AIS component running in an ALSP confederation in order to obtain information and to send management commands to the AIS components (Figure 2.1).  The capabilities that the CMT provides to AIS technical controllers include the following:Viewing the time management states of all actorsViewing the objects owned and ghosted (reflected) by each actorCoordinating saving and restoring the confederationSoliciting a refresh of one or more object attribute valuesManually inserting ALSP messages into the channels going to and coming from an actorEach actor connects to the AIS via an ALSP connection to an ALSP Common Module (ACM).  An ACM may have a number of ALSP Control Terminals (ACTs) connected to it, each of which provides both a detailed view of the state of an ACM and a view of the execution of the confederation.  During a JTC exercise, the technical controllers for each actor will use an ACT connected to their ACM in order to view the behavior of their actor as well as the behavior of other actors in the confederation.  The ACT provides much of the same information that the CMT provides, but without the overall confederation control that comes with the CMT.  It is an informal requirement for the JIS to provide the same view into the state of the confederation that an ACT provides to each model controller.JIS Federation ManagementThe JTC Infrastructure Software (JIS), which is HLA-based, was designed to replace the AIS with as little impact to actors as possible.  As stated previously, the JIS maintains an ALSP interface to JTC actors so that the actors need change no code in order to use the JIS.  It does so by providing to each actor an application called an ADAPTOR (ALSP Data And Protocol Transfer Over RTI).  The ADAPTOR, which is an HLA federate, essentially translates ALSP messages received from an actor into the appropriate RTI ambassador calls, and will also translate HLA callbacks into ALSP messages to send back to the actor.  The ADAPTOR also provides some functionality that is used by the JTC and provided by ALSP, but is not provided by HLA.  As new models with existing HLA interfaces join the JTC, the use of an ADAPTOR with those models will not be necessary.  REF _Ref474983528 \r [3],  REF _Ref474997674 \r [4],  REF _Ref474997684 \r [5]The Federation Management Tool (FMT) was initially developed at MITRE and used in the Joint Training Confederation  REF _Ref474983524 \r [6],  REF _Ref474994141 \r [7].  It was subsequently enhanced both by MÄK Technologies for release by DMSO  REF _Ref474994255 \r [8],  REF _Ref474997519 \r [9] and by MITRE. It has been used in other federations as well, including Pegasus and JCATS/JTLS.  The FMT provides the same basic capabilities that the CMT provides, but with a graphical user interface (the AIS has a VT100-based interface).In order to streamline the design of the JIS, the FMT obtains all of its information from the RTI, rather than through “backdoor” control channels to the other JIS components, as in the AIS.  Since models with HLA interfaces may in fact join a JTC federation execution without the use of an ADAPTOR, there will not always be JIS components into which control channels may be opened.  The basic federation management information is obtained by the FMT through the standard HLA MOM objects and interactions for all federates, and through extended-MOM interactions between JTC-aware federates (such as the ADAPTORs) and the FMT.Challenges in AIS-to-JIS MigrationFor the JTC to use this FMT in order to meet its formal and informal federation management requirements, it would be necessary to join an FMT federate for each model controller wishing to view the current state of the federation.  This would essentially double the number of federates joined (if each model also has an FMT joined), increasing federation complexity.  It would also force the models wishing to use the FMT to obtain the latest version, as well as the RTI libraries in use at an event.  Some models use hardware that is not supported by the RTI used by the JTC, or hardware that does not run the latest versions of Java, so those models would be required to obtain new hardware as well.HLA-compliant federates that may use the JTC FOM can join a JTC federation execution without the use of an ADAPTOR.  The ADAPTOR was designed to send extended-MOM interactions to the FMT to allow it to manage the capabilities that an ADAPTOR adds to an HLA federation in order to meet formal JTC infrastructure requirements.  Thus, for a JTC-capable HLA federate to participate at a level equal to those connecting through an ADAPTOR, the federate must implement the JTC MOM extensions.  The required interactions are described in the JTC Direct-Connect Technical Specification available to potential JTC models on the JTC Web site.  REF _Ref474992580 \r [1]Since not all JTC models will use an ADAPTOR when joining a federation execution, extending the ADAPTOR to provide the same management view to model controllers as the ACT is not an option.  Doing so would increase the complexity of an ADAPTOR beyond that which is desired for its purpose.FMT ArchitectureDesign OverviewIn order to overcome the limitations of the prior FMT, it has been rearchitected in such a way that it will join a federation as a single federate, and then distribute data to FMT data clients as needed.  The FMT now maintains a database, the contents of which are guided by an extensible data model, of data obtained from the RTI.  Modules that receive interactions and object updates from the RTI populate this database, and clients may consume data provided by this database.  Clients may exist within the same process as the FMT federate, or they may exist in separate processes and connect to servers within the FMT federate that transmit database contents as necessary across a network.The FMT federate is implemented in pure Java, and runs as a single process.  When an object-related or interaction callback from the RTI comes into the FMT, it is distributed to one or more modules via the Interaction Manager and the Object Manager.  These modules then insert data elements into the database (DB).  Data clients, such as a Network Data Server, then receive data elements either when they are updated, or at specified intervals.  Generally, data is pushed from the DB to the data clients, but data clients may also pull data if required.  ExtensibilityThe FMT architecture is designed to allow new modules and data clients to be developed as needed to enhance the process of managing a particular federation.  Modules receive data from the RTI and populate the FMT database.  Clients connect to the database, either directly or remotely, to obtain information for display to a federation controller or for other purposes, such as logging.ModulesIn the FMT architecture, a module is a Java class that receives events from the RTI, extracts information from those events, and places data into the FMT database (DB).  The key events that a module processes are interactions, object discovery/removal, or attribute value updates.  A module may also process events related to synchronization points or saving and restoring the state of the federation.Modules must implement one or more interfaces provided by the FMT API, such as InteractionProcessor or ObjecctProcessor.  These interfaces are simply subsets of the HLA federate ambassador interface that must be implemented by HLA federates.  This approach simplifies the modules by reducing the number of methods that must be implemented for a module to receive HLA data to the minimum for the needs of that module.  Modules are provided a reference to a Database object, whose interface is also defined as part of the FMT module API.There are four modules in the JTC 2004 FMT: HlaModule, AlspModule, FmtModule, and ClassicModule.  The HlaModule processes the standard HLA MOM objects and interactions, and feeds federate and federation data into the database.  The AlspModule handles the JTC extended-MOM interactions that are defined in the JIS technical specification.  The FmtModule feeds the database with information about the FMT itself, such as the current state of the FMT, as well as messages and alerts that may be broadcast to clients by the database.The ClassicModule is the entire FMT that was in use by the JTC prior to FY 2004, packaged as a module in the new FMT architecture.  The prior FMT implemented the graphical user interface that relayed federation data to the federation technical controller, and accepted commands from the controller to relay to the federates in the federation.  Packaging this as a module in the new architecture allowed all existing functionality to be maintained while easily incorporating the modular architecture, greatly increasing the rapidity with which FMT functionality may be deployed.Data ClientsThe FMT internal database implements, among others, the DataProducer interface, which is included in the FMT API.  This interface provides methods for data clients to either pull information from the database or subscribe to data elements to be pushed to the client.  Data clients that implement the DataConsumer interface will have methods that a DataProducer will use to push data to those clients.Inside the FMT federate process may run one or more NetworkDataServer objects.  These will listen for socket connections from clients and provide specific data elements to them.  A NetworkDataServer object is a DataConsumer, as it consumes data from a database for distribution across a network.  NetworkDataClient objects implement the DataProducer interface, as they will provide data obtained from NetworkDataServer objects.  Data clients that connect to the FMT across a network may then use the NetworkDataClient objects as if they were a local FMT database.There are two data clients currently fielded for use in the JTC.  One is an audible alert tool, called the JIS Audible Warning System (JAWS) that vocalizes key events as they occur in the federation.  Events such as a federate joining, resigning, or failing to advance time for a specified period are announced to technical control.Another data client fielded in FY 2004 with the JTC is the Distributed Observation Tool (DOT), which replaces much of the functionality provided by the ACT in the AIS.  There is a DOT server that connects to an FMT network data server to obtain key information about federation execution.  Model controllers may then telnet to a known port provided by the DOT server to see a VT100-based portrayal of federation information.  Federate time, communications, and object information, as well as messages broadcast through the FMT by the federation controller, are displayed to all connected DOTs.Currently, the FMT database is simply implemented with Java Hastable objects.  Should the JTC, or any other federation, wish to obtain federation execution data through other database architectures, new database objects may replace the existing one, implementing only a few interfaces from the FMT API.  A traditional SQL-accessible database may be inserted, for example, to provide data to other clients or to a J2EE-compliant application server.ConclusionsSummaryThe FMT in use by the JTC prior to 2004 had all of the functionality necessary to manage a JTC federation using the JIS, but lacked the ability to easily maintain some of the informally required capabilities of the AIS.  By re-architecting the FMT, the JTC systems engineering team was able to meet the informal requirements, as well as add new capabilities that would have been difficult to add prior to the redesign.  The new FMT architecture also makes it easier to extend the FMT to accommodate new requirements, such as the addition of new models to the JTC , or to add capabilities for other federations.Future directionIn addition to distributing federation information obtained from the RTI by the FMT federate to connected clients, the FMT federate will accept commands from connected tools.  Currently, most federation management actions are taken through the ClassicModule.  However, it is the goal of the JTC system engineering team to phase out the ClassicModule and replace it with a graphical interface that provides the same functionality, but with the ability to connect multiple such interfaces.It is desirable to provide the FMT for use in other federations besides the JTC.  Other federations use the FMT as it existed prior to 2004, in one form or another; but if other federations can make use of the current modular architecture to provide more management information from their federates to technical control, it is desirable for them to do so.  Other mechanisms of release are under consideration, including open-source release, as well as the development of a module/client developer’s kit.ReferencesJTC/ALSP Web Site.  http://ms.ie.org/alsp/Annette Wilson and Richard Weatherly: "The Aggregate Level Simulation Protocol: An Evolving System," Proceedings of the 1994 Winter Simulation Conference, Orlando, Florida, December 1994.Sean P. Griffin, Ernest H. Page, C. Zachary Furness, Mary C. Fischer: “Providing Uninterrupted Training to the Joint Training Confederation (JTC) Audience During Transition to the High Level Architecture (HLA)” Simulation Interoperability Workshop, 97F-SIW-147, Fall 1997Zach Furness, Mark A. Robinson, Carol Chiang, John Logsdon, Mitchell Primas: “Lessons Learned in Applying the HLA to the Joint Training Confederation” Simulation Interoperability Workshop, 99F-SIW-038, Fall 1999.Bryan Youmans: “Determining RTI Suitability for the Joint Training Confederation” Simulation Interoperability Workshop, 02S-SIW-018, Spring 2002.Steven A. Specht: “Federation Management Tool Development for the ALSP-HLA Transition” Simulation Interoperability Workshop, 97F-SIW-023, Fall 1997.David L Prochnow, Ernest Page, Bryan Youmans: “Development of a Federation Management Tool: Implications for HLA” Simulation Interoperability Workshop, 98S-SIW-100, Spring 1998.Deborah Ann Fullford, Darren Wetzel: “A Federation Management Tool: Using the Management Object Model (MOM) to Manage, Control, and Monitor a Federation” Simulation Interoperability Workshop, 99S-SIW-196, Spring 1999.Rolf H. Nelson: “A Next-Generation Federation Management Tool: Using the Management Object Model (MOM) and FOM-specific Data to Monitor an HLA Federation” Simulation Interoperability Workshop, 00F-SIW-155, Fall 2000.AppendixTable A.1.  JTC-Specific TerminologyALSPAggregate Level Simulation Protocol.  Used by all JTC actors.AISALSP Infrastructure Software.  JTC communications backbone; performs time and object management.  One of the predecessors of HLA.  Actors connect to the AIS using ALSP.JISJTC Infrastructure Software.  HLA-based replacement for the AIS.  Actors may connect to JIS using ALSP or HLA.ActorA simulation system participating in the JTC.  Connects using ALSP.  An actor is also a model.ModelA simulation system participating in the JTC.  Connects using ALSP or HLA.FederateA simulation system participating in an HLA federation, such as the JTC using the JIS.ConfederationA collection of JTC actors connected using the AIS.  Fully distributed.FederationA collection of HLA federates connected using an RTI.  Distributed, with more centralized control of key functionality.ACMALSP Common Module.  Key component of AIS; participates in distributed time and object management.  Actor connects to ACM using ALSP.ACTALSP Control Terminal.  VT100-based interface to an ACM or ABE.  Allows actor-level control in a confederation.CMTConfederation Management Tool.  Connects to ACMs and ABEs to present a coherent view of a confederation.  Allows confederation-level control.ABEALSP Broadcast Emulator.  Simple communications relay process.FMTFederation Management Tool.  Provides federation and federate control in an HLA federation execution.ADAPTORALSP Data And Protocol Transfer Over RTI.  Primarily translates between ALSP and HLA.  Also performs AIS-provided functionality not provided by HLA.  Is an HLA federate.JAWSJIS Audible Warning SystemAuthor BiographyJ. PATRICK VAN METRE is a Senior Software Systems Engineer with The MITRE Corporation.  He has a BS in Computer Science and an MS in Computer Science and Applications from Virginia Polytechnic Institute and State University in Blacksburg, VA.  His interests include distributed systems, programming languages, and automated plagiarism detection in university programming courses.FMTInteraction ManagerObjectManagerRTIADAPTORADAPTORClassic ModuleALSP TranslatorActorActorActorFigure 2.1.  AIS Architecture.  White indicates AIS components; grey indicates model components.  Dotted lines represent control connections; solid lines represent data connections.  Confederation management components are in bold.ACTCMTACMACMACMACMABEALSP TranslatorActorActorALSP TranslatorActorALSP TranslatorActorALSP TranslatorFMT ModuleALSP TranslatorActorFigure 2.2.  JIS Architecture.  White indicates JIS components; grey indicates model components.  The RTI is provided by a third-party supplier.ALSP ModuleHLA ModuleNetwork Data ServerDBRTIFigure 2.3.  FMT federate process architecture.  All components are implemented as Java objects.  Solid lines indicate HLA callbacks.  Dashed lines indicate data producer/consumer relationships.  Dotted lines indicate distribution of data across a network.