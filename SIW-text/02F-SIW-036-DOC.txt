RICOS : an Experimental Secure Distributed Simulation NetworkNathalie Le RestDominique CanazziMINDEF/DGA/DSP/CADnathalie.lerest@cad.etca.fr, dominique.canazzi@cad.etca.frKeywords:<<< to be defined >>>ABSTRACT: RICOS(*) S (a French acronym for ‚ÄúSecure network for interconnection of distributed simulations‚Äù) is an experimental project (PEA, ‚ÄúProgramme d‚ÄôEtude Amont‚Äù), sponsored by the French MoD, aimed to demonstrate if and how HLA distributed simulation is suitable for conducting technical/operational analysis studies in secure conditions. The RICOS network will interconnect the studies centers of the DGA and of the Forces.The first step, involving two wide area network nodes, is now successfully completed. It was developed and ran in an homogeneous environment. In the second one, to end by mid 2003, two additional nodes will be added  in an heterogeneous federate environment.This paper presents the following topics:Functional and technical requirements to be met for technical/operational studies,Project organization and schedule ,Architecture for security and services,Description of the federations used as test vehicles,Results of the first phase,Solved Issues, and open problems (mainly, validity and performance issues).It concludes with lessons learned and future works.RICOS requirementsThe main object of this project is to evaluate the suitability of HLA distributed simulation for conducting technical/operational studies. We need distribution because a study may involve different technical centers. We need security because some of these studies may be classified so we need a secure environment.In addition we need reproducible results.The main areas addressed here are security, simulation correctness and performance.SecurityThe simulations running in RICOS, considered as a whole (development, scenarios, run-time messages and results) have to be protected at a medium-high level (‚ÄúConfidentiel D√©fense‚Äù).More, on each node of RICOS, there may be things (mainly models and technical data) that are private to the node and shall not be accessed from the other nodes.CorrectnessCorrectness is here a relative concept. We consider a distributed simulation made of several models spread over several federates, and a standalone simulation made of the same models bound in a single application.The distributed simulation is said to be ‚Äúcorrect‚Äù if, from the same initial data sets (scenario, terrain, technical data and random seeds), it leads to the same results than the standalone simulation.Practically, some optimizations like dead reckoning would make it impossible to meet this requirement exactly. The distributed simulation will be said ‚Äúcorrect‚Äù if it gives the same statistical results than the standalone simulation.PerformanceIn the scope of technical/operational studies, simulation is used to collect statistical results, varying the initial conditions.When distributed, this kind of analysis implies to run many times the same federation, with slightly different scenarios, technical data and/or different random seeds.The main performance requirement, in this context, is to run as fast as possible.The average simulation used in a typical technical/ operational study involves tens to one or two hundreds of entities, with 20-50 being ‚Äúactive‚Äù (initiating interactions and updates) simultaneously.Organization and scheduleTo achieve the evaluation, we proceeded by steps.In the first phase which began in February 2001, two centers (CAD & CASI) are connected. Platforms and development systems are identical for the two federates. Ad hoc federates were built from scratch. Moreover, the development was conducted by a single team, and began with a single, standalone application running all the models. So we did not have federation integration problems and cost overhead measurements have been underestimated.In the second phase which has begun in May 2002, two other centers (ANPROS & CROSAT) will be connected. An existing federate, DUCTOR, which is developed by the Navy center, will  be integrated in the federation. Operating and development systems are different so more serious integration issues may appear, and the measured cost overhead will be more accurate.The company CS SI (Communication & Systems ‚Äì System Integration) has been subcontracted for the two realization phases.Technical ArchitectureSupport network and servicesRealization phase 1 interconnects the two centers CAD and CASI, as shown below:Figure  SEQ figures \* FUSIONFORMAT 1 - Phase 1 networkEach center has its own 100 Mbps Ethernet switched LAN. LANs are interconnected via a 512 kbps Specialized Data Line (SDL). IP networking is managed by routers.Each LAN supports a simulation station (dual processor Linux PC), an office automation station (W2k PC), and a network printer. In addition, the CAD LAN supports a Linux PC dedicated to global network monitoring, HTTP, SMTP and security adapted FTP services. This PC also acts as an NTP server, in order to synchronize the clocks of the simulation PCs (for measurement purposes only, not simulation, as exposed further in the document).Realization phase 2 adds the two other centers (ANPROS and CROSAT) to the network:Figure  SEQ figures \* FUSIONFORMAT 2 - Phase 2 networkIn phase 2, CAD acts as the central node. The CAD-CASI SDL throughput is raised to 2 Mbps, the CAD-CROSAT SDL is 2 Mbps and the CAD-ANPROS SDL is 512 kbps.Security architectureEach center has its own restricted area, providing a suitable protection level to the LAN and the workstations. The SDLs are protected by military line encryptionThe protection of a node against intrusions form other nodes is achieved by:IP routing (address spaces controlled by routers),General disabling of potentially dangerous services (news, telnet, RPC, rlogin, etc.)Disabling of FTP services, except locally and on the dedicated server (logged and non anonymous access only).The Test FederationPhase 1 scenarioThe context is the invasion of an island (Corsica) by Red Forces. The Red Forces have installed Air Defense systems near some important facilities. The mission of the Blue Forces is to destroy these facilities.The Blue make three raids:A reconnaissance raid, for identifying and locating the defense systems around the facilities.A SEAD raid, striking the Red defense systems,A bombing raid aimed to destroy the facilities.The environment is limited to the Corsica altitude information from DTED level 1, for inter visibility computing purposes.Phase 1 modelsThe models involved in the simulation are the following:Figure  SEQ figures \* FUSIONFORMAT 3 ‚Äì ModelsAirforce (AF) base acts as a controller for the different Aircraft raids.Each aircraft model is able to take off, follow flight plans, perform its fight mission and land back. Reconnaissance aircraft are able to detect, identify and locate any Red entity, then report the collected information to the AF Base. SEAD aircraft are able to fire antiradar missiles on SA6 radars and Telars. Bombers are able to drop laser guided bombs (GBs) over buildings in the target facilities.Antiradar missiles (ARM) and laser guided bombs are modeled separately.SA6 systems include a command post, one or more scan radars and one or more launchers.The air defense system also includes infantrymen bearing SA16 missiles.The target area is a simple container. Target models simulate the vulnerability of the buildings.The modeled interactions are:Detection, used by the Reconnaissance aircraft,Electromagnetic emission (EM), used by SEAD aircraft and ARMs to locate and aim the ground radars,Electromagnetic reflectance, used by radars and SA6 missiles to locate and aim aircraft,Infrared emission, used by SA16 missiles to locate and aim aircraft,Vulnerability to explosion, used by missiles and bombs against their targets.Phase 1 distributionWe have split the above described simulation in two federates: the ‚Äòblue‚Äô federate, hosted by CASI, and the ‚Äòred‚Äô federate, hosted by CAD.For each model that publishes attributes, we have built a ‚Äòmirror‚Äô model, responsible for subscription, reflection and state rebuilding. Models do dead reckoning on the emitting side (deviation comparison to requested accuracy and update triggering). Mirrors do dead reckoning on the receiving side (extrapolation).The ‚Äòblue‚Äô federate is built from AF Base, Aircraft, ARM and GB models, and from defense systems and target mirrors.The ‚Äòred‚Äô federate is symmetric (defense system and target models, air attack mirrors).The interactions shown in figure 3 are kept internal to the federates, between models and mirrors. The only HLA interactions are:Warhead explosion, sent by a weapon to its mirror. On reception, the mirror triggers vulnerability checks.Detection notification, sent by a ground entity mirror to its model when it ‚Äòfeels‚Äô detected by the reconnaissance raid. On reception, the real ground entity may decide to move to another location.Phase 1 scenario volumesOn the red side: two or three facilities, with 2-4 target buildings each. Each facility is protected with 2 SA6 systems (1 command post, 1 or 2 radars and 3-4 launchers, each launcher is able to control one flying SA6 missile). Each SA6 system is short-range protected by 12 infantrymen equipped with SA16.On the blue side, the reconnaissance raid engages 2-4 aircraft for each facility location. The SEAD raid engages 2-4 aircraft for each detected EM emitter (SA6 radar or SA6 launcher). Each SEAD aircraft has 2 ARMs. Finally, the bombing raid engages 2-5 aircraft for each target building. Each bomber has 2 GBs.Phase 2 scenario and federation projectIn phase 2, the Airforce Base will be an aircraft carrier modeled in DUCTOR.CROSAT will host a red army federate with tanks.Time ManagementIn order to meet the requirement for simulation correctness, all object class attributes and all interaction classes are declared Time Stamp Ordered.All federates are both Time Constrained an Time Regulating, with zero lookahead.This allows the federation to run as fast as possible, without any external synchronization mechanism.Some Performance Results from the 1st phaseInstrumentationAs said above, we use NTP to synchronize the system clocks of the simulation stations.In addition, we have developed an interception layer in ESCADRE-HLA, above the Local RTI Component (LRC).This layer logs all the calls to and from the LRC, with all arguments, timestamp (simulated time), serial number (from Event Retraction Handle) and data. Each call record is stamped with the system date.We also have developed tools to merge the logs from different federates an perform some analysis of the merged log.It is interesting to note that this tool set provides an extended federation-wide data collection. The only supplemental requirement is a big disk space (the logging is in human readable text and very verbose).The logging system has no measurable incidence on performances.Overall resultsIt takes 2024 seconds to simulate 4h 20mn of scenario time (2 red facilities, 2 defense systems with 2 radars, 4 launchers and 12 SA16 each; 4 reconnaissance aircraft, 4 SEAD aircraft and 4 bombers). The execution is then 7.7 times faster than real time.On the local network of a node, it is 20 times faster than real time.A standalone application (non distributed) playing the same scenario is 150 times faster than real time.The line encryption has no measurable influence on the performance results.Latency resultsWe have made measurements on the most commonly used message, Update Attribute Values (UAV) and its symmetric, Reflect Attribute Values (RAV).We have used the average scenario described above. The SDL was not saturated.We found a mean latency of 11.15 ms. This latency does not show any correlation with the message size (maybe because our messages are all short, less than 300 bytes).Thanks to the SDL, we have a very deterministic network latency, 8.5 ms.The average RTI latency overhead is then 2.65 ms, which is very acceptable.The results here are better than those found when running the RTI Benchmarks. This is probably because the Benchmarks do saturate the SDL, while our scenario does not.Time Management resultsOn the 2024 seconds elapsed during a federation run, the CASI-side federate is ‚Äòactive‚Äô 278 seconds (14%) and the CAD-side federate 449 seconds (22%). They are both ‚Äòactive‚Äô 26 seconds.A federate is said ‚Äòactive‚Äô when it is not advancing time (ticking).The very poor parallelism ratio (26/2024) is coherent with the zero lookahead execution.We have studied the influence of the lookahead on the execution parallelism. Although not designed to be used with a non zero lookahead, our federates can be run with any lookahead. The simulation results are not correct, but the performance measurements still stay accurate.The chart below summarizes the results:Figure  SEQ figures \* FUSIONFORMAT 4 ‚Äì Lookahead influenceX-axis shows lookahead.Left Y-axis shows elapsed time, right Y-axis shows parallel execution time. All times are in seconds.As expected, increasing the lookahead increases parallelism and reduces overall execution time.Main Issues and SolutionsDead reckoningESCADRE-HLA has a compound (both integration and event-driven) simulation engine. Integrating emitter-side DR algorithms in an event-driven simulation needs models providing a maneuver prediction capability.The advantage of DR is to reduce then number of emitted updates. The drawback is the multiplication of events at random dates, that increases the Time Management fragmentation (ESCADRE-HLA issues an advance request for each event at a different date).It would be possible to reduce this time fragmentation by grouping DR events on round datesDevelopment processAs far as possible, we have used the FEDEP as a guidance for the development of the federation.Some adaptations were needed, because FEDEP is designed for federate reuse rather than from scratch development.Lessons Learned, Future WorksPerformance versus Correctness: the condition for causal correctness is strict Time Management. All federates must be both Time Constrained and Time Regulating, all FOM atoms (interaction, attributes) and all object removals must be Time Stamp Ordered. The performance cost is very high.Federates should be designed to allow non zero lookahead, in order to increase execution parallelism.Security: network security has no incidence on performance. Given the current state of the art, data protection between network nodes cannot be achieved by using HLA mechanisms. Some protection may be implemented at the application layer, in the ‚Äòmirror‚Äô models.FEDEP provides a very efficient documentation structure.Future: extension to training requires real-time execution, that is not incompatible with time coordinated execution, as long as the federation is able to run faster than real time. However, user interaction has to be improved in ESCADRE-HLA.Bibliography<<< TO DO >>>ESCADRE-HLA papers Centre d‚ÄôAnalyse de D√©fense. (DGA): Center of Defense Analysis. Cellule d‚ÄôAnalyse, de Simulation et d‚ÄôInnovation (EMAA): analysis, simulation and innovations department of the Air Force. Antenne pour la Recherche Op√©rationnelle et la Simulation (EMM): operational research and simulation center of the Navy. Centre de Recherche Op√©rationnelle et de Simulation de l‚ÄôArm√©e de Terre (EMAT): operations research and simulation center of the Army. INCORPORER Excel.Sheet.8   INCORPORER Word.Picture.8   INCORPORER Word.Picture.8  