1. IntroductionImagine you are trying to locate a friend in a major city, and that you have no idea where they might be.  Alone, this would be an almost impossible task.  To make this easier, say you have the ability to look anywhere within the city instantly.  The sheer number of people in the city still makes this an overwhelming task.  There are thousands upon thousands of people that you must examine, mentally compare to your friend, and then either accept or reject as a match.  Even if you had months to search, you might never find your friend because people do not remain still.  Unless you know more about your target, finding the person you are looking for would primarily be a matter of being lucky enough to look in the right place at the right time.Within the world of sensors, be they a human’s eyes and ears, a security camera, or the radar on a plane, things that produce a similar response to that of the desired target are known as clutter.  [1]  Sorting through clutter is an essential task for any sensor system.  Cities team densely with people and vehicles and are sensor-clutter-rich environments.  With the increasing importance of urban conflict in modern warfare, especially the insurgency in Iraq, there is a need within the simulation community to properly model this effect.  [2]To further complicate matters, the enemy may not wear a uniform or provide any other visible cue to distinguish them from the myriad of noncombatants in a populated city.  Simply having sensors capable of sorting through a massive quantity of targets and examining them is not enough; a deeper examination of the contact's behavior and extended observation may be needed to determine its true nature.  Therefore, in addition to providing the desired quantity of clutter, a simulation also needs to provide realistic behavior for the simulated entities to allow meaningful analysis and evaluation.  [1][2]In 1999, the US Joint Forces Command (JFCOM) Urban Resolve Experiment required this urban sensor clutter.  The focus of the simulation was detecting individual entities, so an aggregate approach was deemed unsuitable.  [3]  Initially, 10,000 vehicles were required by the scenario, but at the time only 18 vehicles could be simulated per 200 Mhz simulator.  [1]  Over time, the number of vehciles required by the Urban Resolve Experiment continued to grow and today exceeds 200,000 vehicles.To meet this requirement, work began on an application aptly named Clutter, or ClutterSim.  By paring away most of the complexities of entity simulation and limiting subscription to data over the network, ClutterSim vastly increased the number of entities that could be simulated.  [4]  As the behavior of the ClutterSim entities grew more complex and realistic, the focus of the application shifted to creating large numbers of entities that behaved in a culturally correct manner.  This led to the recent renaming of ClutterSim to CultureSim.  To avoid confusion, it will be referred to as CultureSim for the remainder of this paper. This paper describes many of the challenges encountered by CultureSim in producing realistic movement and higher-level behavior for urban traffic.2. Reducing ExpenseFor the Urban Resolve Experiment, CultureSim is typically run distributed on a supercomputing cluster such as the Maui cluster in Hawaii or the supercomputer at the Wright Patterson Air Force Base in Ohio. Even with access to the multiple computers that make up a supercomputer, CultureSim must limit the per-entity simulation expense to to increase the number of entities that can be simulated.  [2]The other applications used in the simulation are also distributed among multiple sites, including the SPAWAR System Center in San Diego, CA, and several locations in Virginia. [2]  In addition to limiting the expense to the machines executing CultureSim, the network activity produced by CultureSim must be limited to avoid exceeding the capacity of the network linking the sites or overwhelming any single machine on the network with traffic.  Because of the number of entities involved in the simulation, no machine can subscribe to the entity state  of all of the entities simulated without being choked to a crawl by the effort needed to process each state update.On the viewing GUIs, this is accomplished primarily by limiting the zoom level at which a viewer can view entities at.  By limiting the entities visible, the network can squelch unnecessary entity state data to limit the burden on both the viewing machine and the network as a whole.  This solution is somewhat density specific.  What is an acceptable cutoff for a densely populated area may be too restrictive for a lightly populated scenrio covering a large area and an overly generous cutoff may allow users to slow their machine to a crawl.  Such a cutoff is well suited for the Urban Resolve Experiment, however, as the urban focus of the initiative keeps densities relatively uniform.  At various times in its development, CultureSim has also supported an aggregate-level view.  A broader solution would be to have the viewer automatically transition from an individual-level view to an aggregate-level view depending on the zoom or the number of entities within the viewing area.CultureSim initially avoided having to subscribe to entity state by having vehicles ignore each other.  Vehicles drove around their route ignorant of other vehicles and passed through each other if their paths intersected.  Eventually, higher fidelity behavior became a requirement.  CultureSim was faced with the challenge of trying to make vehicles across all of the simulators avoid each other without subscribing to the entity state for too many other vehicles and without exceeding the computational limits of the computer performing collision checking and avoidance.2.1  Dividing the ProblemOne approach to limit the burden could be to divide the vehicles geographically.  Logically, a vehicle is unlikely to collide with another vehicle a mile away, so there is no need to consider vehicles that have no local vehicles near them.  The Urban Resolve Experiment already filters subscription by using a geographic grid-based interest management scheme called Data Distribution management (DDM) [2][3][6], so the network component would not be difficult to implement.One problem with this is that vehicles may travel over a large area during their daily route.  Even if vehicles were initially created geographically near each other on any given simulator, they would still disperse over time.  This would cause a simulator to subscribe to most or all of the area of interest, causing the volume-of-data problem mentioned earlier.  With ownership management and proper load balancing, it might be possible to work around this by passing ownership of entities from simulator to simulator as they change geographical regions to avoid exploding subscription areas.  At the time of CultureSim's creation, however, the underlying network software layer did not support ownership management.  Instead of dividing the problem geographically, CultureSim divides vehicles by road.  Collisions are only assumed to be possible between vehicles on the same road or in the same intersection.  A linear list of vehicles is kept for each road, sorted in the order of their position on the road.  Each vehicle is allowed to travel to a certain distance on the road. This distance only needs to be re-calculated for the vehicles when a vehicle enters or exits the road.  Because of this assumption of linear travel, travel permissions for all of the vehicles on the road can be checked in linear time relative to the number of vehicles on the road, instead of the N^2 it would take to have each vehicle to perform collision avoidance with each other vehicle on the road.2.2  Limiting Network TrafficIn the initial implementation, CultureSim did not subscribe to the entity state of remote vehicles.  Each instance of CultureSim kept an independent table of all of the roads and the position of vehicles on that road.  Whenever a local vehicle entered a road, the CultureSim would send a notification to all other CultureSims indicating the length of the vehicle and the road entered.  The calculations for determining vehicle road travel were deterministic, so it was assumed that each CultureSim would be able to know the exact location of each vehicle in the simulation without any additional communication.In practice, however, it was difficult to maintain a synchronized state over the network.  Latency in communication, vehicles entering a road at the same time, and the sheer magnitude of trying to keep a database with tens of thousands of lists synchronized without any error checking created problems.  The most common error was two vehicles becoming “swapped” in a simulator's road list.  To remote viewers subscribed to those entities, the vehicles would appear to be sitting on top of each other, with a gap in the line of traffic ahead of or behind them.  Furthermore, once something did become out-of-sync, the error would produce additional errors in future calculations.  Although the system was reasonably error tolerant and never completely broke down, errors generally built up in a running simulation over time.Another problem with this approach was that it is not scalable.  Every simulator needs to simulate intersection logic for every road.  Furthermore, because of this every simulator needs to hear about every vehicle road entry, so the number of updates received scaled linearly with the number of vehicles being simulated and cannot be filtered.  This limits the number of entities that can be supported to the resources of any individual machine in the simulation.  This did not become an issue because the road entry messages were very small and the road intersection logic inexpensive, but was another reason to find a better method. One final consideration is that, because the road travel logic was deterministic, dynamic behavior was difficult to implement.  Having a vehicle stop in the middle of the road due to external interference, for example, would require adding a new message type (also unfilterable) and add a new set of states and opportunities for desynchronization.  Anything dependent on knowing the exact position of vehicles within a road, such as changing lanes on highways, was also difficult because of the imprecision of the position estimates for remote vehicles.Because of these issues, CultureSim has been modified to distribute the roads between the simulators using a geographic grid-based system.  Instead of every simulating every intersection, each simulator is assigned all of the road intersections within one or more squares on the grid.  Each CultureSim subscribes to receive entity state updates for the area covered by their assigned intersections, watch for vehicles traveling within the roads they are responsible for, and send travel permission messages back to the simulators that control those vehicles locally.  This makes filtering of the network traffic possible and removes the need to synchronize road states based upon guessed locations of remote vehicles.  This filtering is currently implemented using the aforementioned DDM scheme of static regional grids.2.3 Disadvantages2.3.1 Redundant DataOne disadvantage of this method is that excess information is received with the entity state data.  The state data for a platform is significantly larger than the entry messages previously used and is updated more frequently.  Publishing only the information needed by the intersection controllers as a separate object could reduce waste, but that would add the additional burden of keeping this new object synchronized with the platform.  An ideal solution would be to allow for a subscription to a subset of an entity's state data, but network software does not currently support an efficient implementation of this capability. 2.3.2 Additional Network TrafficAnother network expense comes from travel permission updates.  Instead of running the road logic locally, vehicles receive road permission from the intersection controller, requiring additional information to be sent across the network.  Despite these additional costs, the traffic can now be filtered and is ultimately more scalable.The possibility of passing entity ownership between CultureSims to keep vehicles geographically co-located was mentioned earlier in this paper.  Although ownership management was not supported at the time of CultureSim's creation, it has since been added.  In the future, if it proves practical and affordable, ownership of vehicles may be transferred to the CultureSim that controls their current road.  Doing this would reduce the effects of latency on the simulation by requiring one fewer messages to be sent over the network every time a vehicle's travel permission changes.  Such a change would also reduce network traffic if the cost of transferring ownership of the vehicle is less than the average cost of road travel permissions sent to the vehicle while it is in the area of control of a single simulator.2.3.3  Load BalancingOne additional concern under the intersection distribution system is that of unbalanced loads.  Vehicles will not necessarily be evenly distributed across the simulated world.  Furthermore, as vehicles travel along their routes the vehicular density in any given region will shift over time.  This can produce situations where even if the initial load is well distributed and the network has enough resources collectively to simulate the vehicles, one simulator may be end up with a disproportionately high amount of traffic in its assigned area.To counter this, one CultureSim on the network takes responsibility for balancing the loads and may re-arrange intersection control assignments as the simulation runs.  If a simulator is seen with an unusually heavy load, intersections are re-assigned to the least loaded simulators in the network.  Because the size and spacing of the geographic grid used to assign intersection controllers is static, one possible risk with this scheme is the creation of a single grid square so heavily loaded that no single simulator can handle it.  Road space limits how many vehicles can be in any given area, however, so this has never proven to be an issue.  If a single overloaded square were to become an issue, one possible solution would to be to support dynamic resizing of the grid squares.2.3.4  Interacting Off RoadRoad access (entry and exit) posed synchronization difficulties similar to those of road travel.  Each simulator divides the area beside the roads into parking spots.  Initially, every CultureSim maintained a separate database of spots available for vehicles to park or be placed.  When a vehicle parked, a message was sent to indicate which parking spot was taken.Although tracking parking spots was simpler than trying to track moving vehicles, having each simulator independently maintain and synchronize a large quantity of data still produced problems.  A dropped parking message could create desynchronized states that would result in vehicles parking on top of each other.  As with the road travel permission messages, parking messages also could not be filtered due to the need of every simulator to maintain a separate, complete copy.Moving to the intersection distribution method provided an answer to this: each simulator only maintains a copy of parking information for the roads it is responsible for.  The drawback of this solution is that when creating vehicles, the creator must contact the controller of the desired creation area to discover which parking spots are available.  The necessity of waiting for a response over the network slows vehicle creation.  Because vehicle creation is generally a one-time expense at the beginning of a simulation, this wait has proven acceptable. Another consequence of the CultureSim vehicles' blindness to other entities is that they will pass through vehicles that are crossing or travelling on roads but not using our road travel method.  Preventing this first became necessary when CultureSim was used to generate urban traffic for a vehicle convoy trainer.  Since the human trainees would be practicing driving convoys on city roads, it was necessary to generate traffic that was aware of and would avoid colliding with the human-driven vehicles.To support avoidance, each simulator periodically queries the location of all non-CultureSim vehicles near roads they control.  Roads with those vehicles upon them are flagged indicating where they are blocked. When vehicle travel permissions are updated, they consider this extra information and adjust the allowed travel distances appropriately.  This check is fairly expensive relative to other CultureSim logic, requiring geometric calculations of which roads the non-CultureSim vehicles overlap and where on the road they are located.  However, because the number of non-CultureSim entities is comparably small, this proved to be an acceptable expense.Initially, all CultureSims subscribed to entity state and trusted that the low number of entities in the convoy trainer would keep the load acceptable.  When CultureSim transitioned to using distributed intersection controllers, this feature was usable by larger-scale simulations, since entity state subscriptions were then distributed between the simulators.3. Appearance & FlowDesynchronization between simulators and network scalability are not the only challenges presented by a distributed environment.  Network latency is another concern, especially if the different components of the simulation are located significantly far apart from each other as they were in the Urban Resolve Experiment.  3.1 Latency and MovementWhile quantity and high-level behavior are the primary concerns of CultureSim, there is also pressure to make the physical movement of the vehicles as high fidelity as possible, especially for human participants using a 2d or 3d battlespace viewer.  The network environment CultureSim typically works in makes this difficult.One example is overrun due to dead-reckoning.  The participants in Urban Resolve use first-order dead reckoning by default.  Under first order dead-reckoning, a vehicle is assumed to maintain a constant velocity between state updates.  Under the DIS DIS standard for first-order dead reckoning [5], updates are sent when a vehicle violates this assumption by a certain margin.  This allows for better estimation of remote vehicles' positions by the various components of the simulation, and also provides the illusion of smooth movement to viewers between position updates, making it easier to visually track the movement of entities.  When a vehicle stops or changes direction, however, a remote viewer will continue to see the vehicle move at its last velocity until the entity state update is received.  When traveling in cities, traffic is often closely packed and turning frequently.  This creates apparent collisions when a vehicle stops behind another vehicle.  At intersections it can make the vehicle appear to run through the intersection, potentially confusing human viewers about which direction the vehicle intends to travelWhen the update is received teleports back into the correct location, creating yet another visual anomaly.  This is annoying to viewers at best and at worst may make human participants following a vehicle lose track of the vehicle's location, especially if similar vehicles are in the area.In some cases these problems can  be corrected by interpolating the correct and incorrect position over time to smooth the error.  In other cases smoothing just produces different visual anomalies, such as vehicles driving backwards.The largest step in addressing problems caused by latency was the introduction of road-based dead reckoning, described in detail in [4].  In summary, road-based dead reckoning describes movement in terms of road travel instead of absolute world travel.  Latency on an update that makes a vehicle begin moving is compensated for with smoothing, making the vehicle accelerate faster.  Each update includes the road distance at which the vehicle stops, removing the need for a second update to halt the vehicle.  Because no update is needed to stop the vehicle, latency does not affect the vehicle’s stopping and no overrun can occur.  As another benefit, the lack of a “stop” update also generally reduces the number of updates that need to be sent.  Additionally, road based dead reckoning allows for behavior like vehicle acceleration and smooth turning and parking motions without requiring multiple updates as standard first order dead reckoning would require.The one significant drawback of the road dead reckoning is that it is a complex, non-standard algorithm.  As you can imagine, describing a vehicle’s motion on a road is significantly more difficult than simply defining motion in terms of absolute world coordinates.  Unlike well-defined standards such as DIS first order dead reckoning [5], few other applications support road dead reckoning and the code is too complex to easily implement in applications that do not share a code base with CultureSim.  CultureSim supports the transmission of both road dead reckoning and first-order dead reckoning to provide compatibility, but at the expense of additional computational and network expense.Another hurdle to interoperability is terrain compatability.  Because the information communicated is dependant on the road network, any simulator that recieves a road based dead reckoning update must have access to the exact terrain as the simulator that published the update.  If a simulation has multiple participants that use different terrain databases, it will be difficult or impossible for them to communicate positions to each other using road based dead reckoning.3.2  Terrain InformationEven once problems of synchronization, scalability, and latency have been addressed, more challenges remain.  Vehicles not only need to move smoothly, but also in a way that reflects real-world driving.  Furthermore, the vehicles collectively need to be able to route themselves so that traffic continues to flow rather than being bogged down in a permanent traffic jam.Terrain databases often lack the small, densely packed features that are a key quality of cities.  [7]  More importantly for CultureSim vehicles, road-specific information such as number of lanes and directionality, traffic controls (lights, signs), the location of overpasses and bridges, and parking information are lacking.  This can make getting reasonable traffic flow and behavior difficult.Manual intensification of the databases is a simple way to address some of these issues, but is often impractical if there is a large quantity of terrain or the terrain data is updated frequently.  CultureSim addresses some of the missing road information, such as overpasses and one-way roads, with a set of heuristic algorithms that guess the missing information.If an intersection consists of two large, near-parallel roads with 3+ lanes per direction and two smaller, near-perpendicular roads, CultureSim assumes that an overpass is present, as the presence of an intersection significantly degrades highway traffic.  Small, one-lane roads connecting to a multilane road at a very shallow angle are assumed to be on-ramps, and made to be one-way feeding into or off of the highway as appropriate.3.3  Intersection ControlTo govern traffic behavior at intersections, each road is assigned a control type.  Within CultureSim, a road may be restricted, unrestricted, or controlled by a traffic light.  Each control type maps to a real-world control type: restricted represents stop or yield signs, unrestricted is a road that has right-of-way through the intersection, and traffic light unsurprisingly represents a traffic light.  The control type determines when a vehicle can pass through the intersection, transitioning from one road to the next.On a restricted road, the vehicle is allowed to go only if no non-restricted vehicles are about to enter the intersection, effectively acting as a yield sign.  In the current implementation, vehicles do not need to stop if they can transition so there are no stop sign equivalents.  The restricted control type can easily be modified to support either, however, by adding a flag that requires a vehicle decelerate to a stop before being granted permission to transition.A vehicle on an unrestricted road approaching an intersection always has permission to transition unless their target road has no room for them or they would collide with a vehicle already in the intersection.  There is one exception to this rule: if a vehicle is turning across the matching unrestricted road going in the opposite direction, they must yield as if on a restricted road.  A left turn on a two-way road in a country where vehicles drive on both sides of the road is an example of such a turn; the vehicle is obstructing traffic flowing in the other direction by making the turn.Traffic lights cycle between states (green/yellow/red) over time.  As you might expect, a vehicle approaching a traffic light will behave differently depending on the state of the light.  A vehicle approaching a green light treats the intersection as unrestricted.  If the light is red, it is treated as restricted with the additional restriction that only right turns are permitted (or left turns in left-hand-lane countries).  Yellow lights are treated as green lights and primarily serve to show human viewers that the light is changing.3.4  Traffic FlowWhile assigning traffic controls to intersections is necessary to produce realistic-looking vehicle behavior, it does not necessarily produce a good traffic flow.  Poorly placed stop signs and poorly timed traffic lights can hurt traffic more than they help.  As mentioned earlier, however, getting proper traffic control information with terrain data is difficult.  Within CultureSim, road control types are set according to heuristic guesses.  When three roads segments intersect, the straightest pair (least angle between the two) is made unrestricted and the shorter a stop sign.  If exactly four roads intersect, if two are larger, multi-lane roads with a matching number of lanes, then the larger pair is assumed to be a continuous major road and is given unrestricted control, and the smaller pair is given stop signs.  Other cases are treated as traffic lights.To try to improve upon the traffic flow, traffic lights observe the density of traffics along each road segment associated with each light cycle.  If the roads begin to back up, the lights adjust themselves so that roads with heavier traffic are given longer green lights.The most significant optimization, however, is weighted pathing.  As each vehicle leaves a road, the road controller notes how long the vehicle was made to wait for other vehicles while on the road.  This information is then sent between the CultureSims and used to weight the pathing.  When planning, vehicles calculate the shortest expected travel time, using the time to travel upon the road (road length / speed limit) plus the expected wait per road.  While running, vehicles will periodically re-path their route to try to find a quicker route.  In addition, if the expected travel time for their chosen route should increase dramatically, they will also replan.  This allows the traffic to try to avoid congested areas when driving, and adjust to traffic jams should they form.To test the effect of weighted pathing on vehicle travel in CultureSim, 4000 vehicles were placed within a 4 km circle in the middle of a dense urban area.  The vehicles were set to travel between random buildings on the map, waiting several minutes after each route and then picking a new random goal.  After 30 minutes, data was collected from the CultureSim.  This process was repeated three times with weighted pathing on, and three times with weighted pathing off.WeightedRoutes CompletedAvg. Trip LengthAvg. Trip TimeTrial 161184642.53 m571.12 sTrial 261974646.45 m583.93 sTrial 361634766.70 m585.72 sDistance OnlyRoutes CompletedAvg. Trip LengthAvg. Trip TimeTrial 139813661.21 m568.41 sTrial 239683699.58 m553.61 sTrial 240483702.04 m560.40 sWeighted Average6159.334685.23 m582.47 sDistance Average3997.333687.61 m560.81 sAs Figure 3.3 shows, significantly more routes were completed when weighted pathing was enabled.  As expected, the average route length increases, because without wait-based weighting, the shortest route is always selected.  Weighting by expected travel time trades off absolute route length for a shorter trip time, which also distributes the traffic more evenly across the road network.One interesting observation from this data is that the average time per route actually increased with the wait-based planning.  One possible explanation for this is that a greater number of the vehicles that randomly selected more distant source/destination buildings completed their routes under the wait-based planning than the distance-only planning.  This would also support the longer average route length observed for wait-based planning.  On simulations that ran longer, the wait time for the wait-based planning was lower.  3.5  High Level BehaviorEven if vehicle behavior at roads and intersections is reasonable and the desired traffic density and flow is met, there are still many other considerations in generating a realistic urban populace.  The traffic flow, for example, should fluctuate over time in a reasonable manner.  In most cities there should be rush hours before and after work, and less traffic late at night and early in the morning.  The behavior of individual vehicles should also make sense.  This was especially important for the Urban Resolve Experiment, where the primary purpose of the CultureSim vehicles was to conceal the movements of insurgents that were trying to blend in with the civilian populace.  The vehicles needed to behave in a fashion that did not make them easily identifiable as the background clutter that they were.The first kind of moving vehicles CultureSim implemented were called “mobile” clutter.  The behavior of mobile CultureSim vehicles was simple; they selected two locations within their area of activity and constantly drove back and forth between these two points.As a first step, this produced an environment of constantly moving vehicles so that insurgent movements were not immediately obvious.  Any individual vehicle, however, could be fairly easily identified as a CultureSim vehicle by observing it for a few iterations of its path.  Mobile clutter was later improved to pick a new random point after each route.  This made it somewhat harder to identify, but the behavior pattern was still not realistic or believable.  Collectively mobile CultureSim vehicles could not produce normal traffic patterns.  One impact of this was that time of day did not affect the simulation at all; traffic remained the same at all hours of the day.  Buildings type similiarly had no impact on the behavior, whereas one would expect more traffic around restaurants around meal times or religious buildings before and after services.To produce better urban traffic, “commuter” CultureSim behavior was designed.  Each commuter vehicle is given a behavior profile that loosely describes a pattern of behavior.  [1]  A worker profile, for example, might go to work at a random time between 7:30-8:30, work for 8-9 hours, have a chance of shopping and/or dining afterwards, go home, and then have a chance of going to a theatre or other entertainment building before ending the night at home.  If many CultureSim entities used this profile, it would produce rush hours around 8-9 in the morning and 4-6 at night, and then have sporadic traffic at night that tapers off as the workers finish their daily routine.Over the course of the day, a CultureSim vehicle executes its schedule.  Each profile event has a building type associated with it, such as residential, restaurant, industrial, etc.  For each vehicle, CultureSim selects buildings of these types to fill the schedule.  The selected buildings may be unique, such as a worker going to the same workplace every day, or picked randomly each time the event occurs, such as a worker who does not always get lunch from the same restaurant every day.  Events can also be specific to days of the week, such as going to church on Sundays, and have a probability of happening versus not happening.  When a vehicle has reached the event location, it can remain there for a specific duration or until a specific time of day before moving to the next event on the schedule.Commuter behavior provides more detailed and realistic individual behavior that is both harder and more interesting to analyze.  As with example with the worker, it can also be used to produce more reasonable traffic patterns that fluctuate appropriately at different times of day.4. ConclusionGenerating entity level urban traffic in a significant volume is a difficult task.  CultureSim addresses the quantity and density of the vehicles to be simulated by dividing the task on a per-road basis within a distributed computing environment.  This division both limits the computational expenses such as collision avoidance and network expenses in the form of data relevant to other vehicles.  The solution implemented greatly increases the maximum possible number of entities.  Drawbacks to the approach taken include the need to load balance and limited interactivity with vehicles not following the road-travel behavior.The network environment of the Urban Resolve Experiment combined with high-performance 2d and 3d viewers has further created a user-driven need for high-fidelity vehicle movement.  This focus makes any desynchronization between CultureSims highly visible and has shaped the development of CultureSim significantly.  The initial implementation of CultureSim relied upon each instance of the application keeping a separate complete table of road state was replaced by a scheme of road division requiring additional communication between the CultureSim simulating a vehicle locally and the CultureSim in charge of the road the vehicle travels on.A second impact of this focus on low-level vehicle movement was the replacement of a standard first order dead reckoning scheme with a road based dead reckoning method.  This change improved vehicle movement fidelity greatly, but makes interoperability more difficult.Beyond matters of vehicle quantity and fidelity, the quality of the road network also needs to be addressed.  Cities feature rich, dense road networks that may be incomplete or lacking attribution in terrain databases.  Complex traffic behavior such as traffic laws and intersection control also needs to be simulated for realistic entity-level behavior.  Higher level vehicle behavior presents a final concern.  Collectively, vehicles need to be able to navigate their environment without forming permanent traffic jams.  The direction of and density of the traffic flow also are likely to change over time and may need to be modeled.  Concealing other entities requires believable and complex behavior at the individual level.  CultureSim uses intelligent pathing and replanning based upon expected travel time rather than distance to maximize traffic flow, and a profile based behavior model to provide varied traffic patterns and reasonable individual behavior.References[1]  Speicher, D. & Wilbert, D.  2004.  Simulating       Urban Traffic in Support of the Joint Urban        Operations Experiment.  Interservice/Industry        Training, Simulation & Education Conference        (I/ITSEC).[2]  Ceranowicz, A. & Torpey, M.  2004.  Adapting        to Urban Warfare.  Interservice/Industry        Training, Simulation, & Education Conference        (I/ITSEC).[3]  Ceranowicz, A., Torpey, M., Helfinstine, B.,        Hines, J. & Evans, J. 2004.  Reflections on        Building the Joint Experimental Federation.         Interservice/Industry Training, Simulation, &        Education Conference (I/ITSEC).[4]  Moyer, D. & Speicher, D.  2005.  A Road        Based Algorithm for Dead Reckoning.  2005        Spring Simulation Interoperability Workshop.       (SIW)[5]  IEEE Standards Committee.  1996.  IEEE       Standard for Distributed Interation Simulation-       Application Protocols.  The Institute of      Electrical and Electronic Engineers, Inc.       NY, NY.[6] Helfinstine, B., Wilbert, D., Torpey, M.,       Civinskas, W. 2001.  Experiences with Data       Distribution Management in Large-Scale       Federations.  2001 Fall Simulation       Interoperability Workshop.  (SIW)[7] Prager, S., Cauble, K., Bakeman, D., Haes, S.,       & Goodman, G. 2004.  Malls, Sprawl, and       Clutter: Realistic Terrain for Simulation      of JUO.  Interservice/Industry Training,       Simulation, & Education Conference (I/ITSEC).Author BiographiesDALE MOYER is a developer of the CultureSim application.  He is a Software Engineer at Lockheed Martin Simulation, Training & Support Advanced Simulation Center (LM STS-ASC) in Burlington MA.  Dale holds a BS in Computer Science from Worcester Polytechnic Institute.Obstacles to Producing Realistic Urban Traffic in a Distributed EnvironmentDale MoyerLockheed MartinSimulation, Training, & SupportAdvanced Simulation Center164 Middlesex TurnpikeBurlington, MA 01803HYPERLINK "dale.moyer@lmco.com"dale.moyer@lmco.comABSTRACT:  The increasing importance of urban combat and operations in modern warfare drives a need for effective simulation of the urban environment for training, testing, and planning purposes.  One of the defining elements of the urban environment is a dense population of people and vehicles.  This presence adds many considerations to urban operations including concealment of hostile forces among noncombatants, sensor confusion, the risk of civilian casualties, and navigational difficulties.Attempting to simulate this civilian presence at an entity level, rather than an aggregate level, poses many difficulties.  The volume and density of the entities to be simulated necessitates the minimization of computational expense and network traffic generated per vehicle.  The high amount of resources required to simulate any significant fraction of a city's population suggests a distributed approach.  Distributing this task, however, is difficult as fluctuating traffic patterns unbalance loads and the large coverage areas of modern sensors prevent many obvious simplifications and optimizations.In support of the Urban Resolve Experiment for the Joint Experimentation Directorate of the US Joint Forces Command (JFCOM J9), a simulation application named CultureSim was developed to handle the simulation of the background population of a city.  CultureSim has been under continual development since 1999.  Today, working the computational and network limitations of its simulation environment, it has successfully generated over half a million simultaneous entities to populate an urban environment.  Each entity moves independently, using road networks to follow a behavioral profile that generates realistic traffic patterns.As the simulations it participates in grow in sophistication, especially with the inclusion of modern 3D views of the battle space, there has been an increased pressure to improve the realism of the movement of these urban vehicles.  Latency from the distributed environment, the risk of desynchronization between simulators, uneven vehicle distributions, changing traffic patterns, the need to react to other participants in the simulation, and the need to produce a reasonable traffic flow from abitrary vehicle layouts all make this task difficult.  This paper details many of the problems and obstacles faced by CultureSim in producing realistic urban traffic and the solutions implemented to address these problems.Figure 2.1: CultureSim Network TrafficFigure 3.2: A vehicle overruns another vehicleFigure 3.3: The effect of weighted pathing on CultureSim trafficFigure 3.1: A vehicle overruns an intersectionFigure 4.1: CultureSim traffic EMBED Word.Picture.8  Figure 3.4: Sample CultureSim Profile