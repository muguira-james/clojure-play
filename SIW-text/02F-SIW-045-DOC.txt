Joint Virtual Battlespace (JVB)Command Control and Communication (C3) GridSteven G. WebsterXtend LLC6004 Oakdale RoadMcLean, VA  22101703-231-4500 HYPERLINK "mailto:swebster@xtendllc.com" swebster@xtendllc.comD. Scott GallantObject Sciences Corp.6359 Walker Lane; Suite 100Alexandria, VA 22310703-253-1060 HYPERLINK "mailto:scott.gallant@objectsciences.com" scott.gallant@objectsciences.comKeywords:Command, Control, Communications, Information Management, Network Centric Warfare, SimulationABSTRACT: Representation of Network Centric Warfare (NCW) imposes new challenges on C4ISR simulations. Namely, the ability to model arbitrarily connected and organized Battle Functional Areas (BFA) along with their associated distributed processing is required to understand how operational architectures impact force effectiveness. Since NCW infers greater visibility throughout the echelons, Force on Force representations must also be integrated with entity simulations. A suite of federates, the C3 Grid, has been developed to address these modeling challenges and provide the Command, Control, and Communications (C3) for the Joint Virtual Battlespace (JVB).The Grid’s software architecture and supporting technologies are discussed, including its rules engine, Java Bean framework, and associated code generator. Integration with the HLA RTI, associated rapid application development (RAD) capability, and deployment options are described. Constituent federates are defined by capability, and their exchanges to form the Grid composition by federate is given, and integration with other C4ISR simulations described.1. IntroductionThe Joint Virtual Battlespace (JVB) is a collaborative simulation environment designed to support the investigation of concepts and technologies involved in the Army’s Transformation. JVB was initiated by the Joint Precision Strike Demonstration (JPSD) Project Office, which is working in conjunction with industry and numerous DoD partners, to provide this Simulation Based Acquisition capability. The goal of the program is to provide the Army with a set of Simulation & Modeling for Acquisition, Requirements and Training (SMART) tools that will support full spectrum analysis of system designs and operational concepts while reducing risk and reducing acquisition timelines. Currently, JVB is supporting experiments and studies to assist with acquisition decisions for the Objective Force and Future Combat System.The JVB Command, Communications, and Control Grid (C3 Grid), a set of software processes, represents the maneuver, intelligence, and effects components for a given force structure. The Grid also embodies information management and associated network-centric behaviors, currently simulating distributed situational awareness and effects management. The Grid also coordinates entity level simulations such as the One SAF Test Bed (OTB), in response to a Force on Force (FoF) model, Eagle, providing a vertically integrated force representation.2. C3 Grid Software ArchitectureThe High Level Architecture (HLA) Run Time Infrastructure (RTI) was given as the means of integrating the JVB environment. Like many distributed technologies, developing RTI federates entails complexity beyond the behaviors being modeled. At a minimum, federates need to be instantiated, federations joined, publications and subscriptions identified, and object attribute ownerships defined. A data marshalling convention must also be followed, since the RTI does not provide this capability natively. Furthermore, federation time management and data distribution services may be employed to address varying fidelity among federates and scalability concerns. These features, while providing a more capable infrastructure, increase the complexity of implementing a participating simulation.Figure  SEQ Figure \* ARABIC 1: C3 Software ArchitectureAccordingly, a Java code base has been developed to encapsulate the RTI and allow federate developers to focus on their simulation specific logic rather than interoperability. The architectural components are depicted in  REF _Ref12864344 \h  \* MERGEFORMAT Figure 1, as well as the DMSO supplied Java RTI binding. Major components of this system are the code generated Java Beans, the Bean Framework, and a key application, the RTI Rule Engine. Specifics of these components are covered in subsequent sections.2.1 Java Code GenerationThe Code Generator takes the Federated Object Model (FOM) document and produces a Java archive that is subsequently referenced by the RTI Java Bean Framework. Initially, the FOM is parsed, and Java source code for the RTI Objects, RTI Interactions, and their supporting complex data types is produced via a templating engine. The Java source templates implement all framework interfaces, including XDR encoding and decoding for data marshalling. Template files for the rules environment are also generated at this time, thereby encapsulating the common application source from FOM changes. Finally, the source code is compiled, and a Java archive (jar file) is produced. Federate developers then reference this bean archive to implement their applications.2.2 Java Bean FrameworkThe Grid RTI Java Bean Framework provides an abstraction layer between the federate application logic and the RTI. A configuration file describes the Object Management, Time Management, Ownership Management, and Data Distribution Management parameters for a given federate, and the framework provides dynamic and transient Java Beans which represent the RTI’s Objects and Interactions respectively. Both RTI Objects and Interactions have the same semantics within the framework, which simplifies the development process. For RTI Objects, dynamic Beans, federate developers register Listeners to receive callbacks when Object attributes are updated. Interactions are static Beans, so members are directly accessed. New RTI Objects and Interactions are obtained via factory methods, which already implement the RTI Object and Data Distribution Management obligations, leaving only the state modification to the federate developer. When publication or reflection is desired, the federate implementer simply “commits” the RTI Object or Instance, and the framework provides encoding, adds a timestamp if necessary, and interacts with the RTI.2.3 Rule EngineThe RTI Rule Engine is predicated on Java Expert System Shell (JESS),  HYPERLINK "http://herzberg.ca.sandia.gov/jess" http://herzberg.ca.sandia.gov/jess, an expert system shell and scripting language. Jess can use Java Beans in its fact base, and it is extensible through Java based user packages and functions. The RTI Rule Engine is implemented as a set of these packages that integrate the framework’s RTI Beans with JESS. The RTI Framework provides dynamic facts, RTI Objects, and static facts, RTI Interactions, to the fact base. Rules, which operate on this state, provide federate specific logic.JESS employs the Rete algorithm, an efficient means of processing a large state space. Federates that require this advantage implement their logic as rules, and rely on JESS extensions to perform ancillary procedural logic. For example, the maneuver federates operate within a context based on situational awareness. Situational awareness, or perception, is highly dependent on one’s battle space perspective, so these federates have to maintain sizeable and dynamic operational pictures for each modeled entity. This operational environment maps well to a rules based or logical implementation, since the state space is significant for each entity.However, the rules environment is not optimal for all federate logic, namely spatial and sequence dependent logic. In these cases, the JESS environment is extended with Java packages that implement specialized logic. Continuing with the maneuver federate example, command organizations’ formation management is calculated via JESS extensions. Also, order of rule execution is not guaranteed, so ordered logic must be implemented outside the rules environment. JESS, with its tight integration with the RTI Java Framework and Java extensibility, provides a convenient means of blending logical, object oriented, and procedural implementations into a single federate.3. C3 Grid FederatesNetwork centric warfare is predicated on the notion that arbitrary players in the battlespace can collaborate to fulfill their BFA responsibilities. However emerging tactical networks still have bandwidth and connectivity limitations, so communication architectures at the physical and logical network level as well as the application layer are necessary to optimize this collaboration. Moreover, the network centric operations are evolving, so a simulation environment must be able to represent arbitrary relationships between players. Therefore, the simulation challenge becomes the creation of a single environment capable of hosting arbitrary network centric organizations and their associated connectivity and doctrine.The Grid uses a directed graph construct to represent network centric force structures. The nodes in these graphs represent battle elements, along with their associated processing. The edges between the nodes represent information flow for a given type of information. A common representation, the “C3Node,” describes both the node and its adjacent edges, and set of C3Nodes comprises an information topology.Multiple sets of topologies are associated with battle entities to implement network centric concepts.  REF _Ref13447183 \h  \* MERGEFORMAT Figure 2, a simplistic example for a small unit, shows how effects, maneuver, and intelligence (SA) topologies are superimposed to form the total force representation. A pair of Unmanned Aerial Vehicles (UAV) that are controlled by ground platforms which in turn communicate with the unit’s commander, forming the “Intel” topology. Similarly, the “Effects” topology comprises the commander and two rear fire assets, as shown in blue. All entities participate in the “Maneuver” topology, as indicated with yellow. Putting these topologies together leads to a representation of the force, for that given unit. Extending this example to the balance of the battlespace and echelon hierarchy, unbounded force organizations can be represented.Figure  SEQ Figure \* ARABIC 2: Force Representation by SuperpositionThe Grid has been decomposed into a service based architecture, where some services provide node processing while others manage information flow between nodes. Maneuver, Situational Awareness, and Effects related federates provided local node processing, and they acquire an identity as a result of topology definition. If a node has been identified as a “processor” for an information type, the appropriate Grid federate provides nodal logic and acquires the node as part of its “identity.” Other federates provide services across the board, namely the communications and information management federates. These federates have a ubiquitous “identity” since their algorithms apply to all entities. The logical superposition all federates for a given node represents the C3 behavior associated with that node.3.1 Situational AwarenessSituational Awareness (SA) functionality in the Grid is currently decomposed into two federates, the Aggregate Definition Service (ADS) and the Information Dissemination Service (IDS). Once again, SA follows the Grid’s directed graph representation and accordingly, ADS provides local node “fusion” of perception reports where IDS is responsible for moving SA information through the organization defined by SA topologies.Specifically, ADS creates and reports a perceived operational picture of variable quality that provides the context for C2 decisions implemented in the maneuver federates. The ADS only simulates the fusion process, and not being a true fusion implementation, it combines simulation perceptions and truth to establish the operational picture for a given node or organization. SA quality can also be variably degraded from perfection so that Grid users can study how the battle is affected.Simulation truth is the basis for “perfect” SA, whereas the inclusion of entity perceptions provides a means of SA degradation. Sensor reports of varied fidelity combined with current entity SA are the basis for simulation perception of all simulation entities, and friendly entities are identified or updated via their status reports. These inputs are normalized through reference to entity unique identifiers, and the OPFOR entities are defined as all entities that do not provide status. Aggregation of OPFOR is done by a comparison to aggregate unit truth, with a degradation corresponding to the desired SA quality. Degradation has been accomplished by assuming a stochastic distribution where the probability of perfect SA is parameterized and delivered as part of the exercise definition.In addition, this “fusion” capability can be logically assigned either to individual nodes, allowing each node to autonomously form a perception, or to an organizational unit ensuring that perception is common among subordinate nodes. At one extreme is the concept of one node being responsible for establishing the operational picture for the entire friendly force structure. The node conceivably could exist in sanctuary, know all sensing and status reporting elements reporting, and provide the “fused” picture to all other interested nodes. The resulting picture would be normalized among the force, and the only difference in SA between nodes would be related to the delivery of the picture. The mode where every node generates its own perception is the other extreme, even though the “fusion” logic is identical to the initial case. Differences in SA would not be attributed to delivery of a common operational picture, but rather the differences in reporting assets and the formation of individual operational pictures. Consequently, the ADS can use the same SA logic in both cases yet provide different SA outcomes depending on the topology definition.Sharing of perception is handled by the Information Dissemination Service (IDS). This federate understands SA topologies, and it is responsible for moving message through the environment, subject to an expression of “interest.” The default interest matches all SA based reports, however selective interest expressions can be formed based on message content. Consequently, command nodes that may only be interested in summarized expression of SA, such as a report on a OPFOR unit, can be passed where explicit reports of entities with that unit are not forwarded. Interest is represented as a logical test, so while interests are predefined source code, their application can be selected at runtime on a nodal basis. Therefore, IDS moves SA reports through battlespace subject to these expressions of “interest.”3.2 ManeuverThe Maneuver functionality of the Grid comprises tasking units and platforms while responding to enemy threats in the context of Objective Force Battalions. The Platoon and Company federates implement the associated force structures on behalf of the Grid. Their responsibility is to coordinate a number of Units around a battlefield based on enemy location, threat capability, and the evolving plan.Similar to other entity based Grid federates, maneuver logic is specifically applied to nodes with unit command responsibility as defined in the maneuver topology. As a result, organizational structures and relationships can be updated dynamically. Initially, the topology and associate node successors are defined as part of the scenario. The relationships are dynamically modified at run time on the basis of entity state. Given the distinction of force structure from maneuver federate logic, these federates will act appropriately whenever succession is provided via a topology update.The maneuver federates borrow from the Eagle paradigm and model three operational activities, “Move,” “Attack” and “Defend.” Eagle, which supplies the mission plan, contains multiple operational activities which are mapped to Grid activities when Eagle orders are processed. Supporting entity simulations have a unique command set, which can be mapped the maneuver federates operational activities. So although the Grid’s operational activities exist throughout all maneuver federates, they are manifested in discrete tasking corresponding to the entity simulations command set.The battle context for the maneuver federates is provided by the Grid’s SA services. The maneuver federates maintain an operational picture for each entity within their identity, therefore supplying perspective for each simulated command entity. Maneuver federates, while executing their decision logic, only act on information that has been addressed to their identity, so differences in perception across the battlespace can result in different behaviors for nominally equivalent units.Unit formations and behaviors are defined via configuration files, allowing modification between simulation runs. For example, one could change the way a particular unit is deployed spatially for Move, Attack and Defend operational activities. An operator could also modify the action taken when a report is received about an opposing force. The actions prescribed are broken down into what operational activity the receiving unit is currently in, the fidelity of the incoming report and whether the Correlation of Forces Matrix (COFM) ratio exceeds decision thresholds. As the doctrine evolves, the rules and property files can be modified accordingly.The maneuver federates model a number of different types of units and vehicles with substantially differing behaviors. This requires modularization of the behaviors in order to reuse the appropriate behavior and yet vary the action if required. For example, the units may move and execute the shaping fight identically, but the attack and defend could widely vary. Several layers of abstraction in these rules-based federates allow functionality to be developed once and utilized across many types of units.3.3 EffectsThe effects federate, Networked Fires Service (NFS) also follows the Grid’s directed graph representation, but uses a unique “Effects” topology. The decomposition of the NFS is very similar to the SA federates, with one part responsible for local node decisions, similar to ADS, and the other facet determining information flow, analogous to IDS. Additionally, NFS only handles indirect effects, relying on the entity simulation, One SAF Test Bed (OTB) for direct engagements.The effects logic starts with the entities that have the capability of supporting indirect engagements. These entities publish reports on their weapons state, specifically regarding weapon type and count. Mission readiness is also conveyed in these reports, and they are subsequently disseminated through the effects topology by NFS.Indirect fires tasking originate with the Maneuver federates. In the course of executing their operational activity, Maneuver federates will nominate deep targets for indirect fires in order to attrite their battlespace. These nominations are also carried through the effects topology by NFS, similar to the weapon state messages.NFS, in addition to driving effects messages through the battlespace, matches the target nominations with available effects resources and issues fire missions. NFS provides effects logic for all nodes that have processing responsibilities within the effects topology. In this role for an effects processing node, NFS infers the available effects resources on the basis of what messages the processing node receives. Upon receipt of a target nomination, the NFS selects a weapon system, and then matches the nomination to a firing entity with the select system and the availability to service the mission. If no match is found, the target nomination is pushed along effects topology. Otherwise, a fire mission is issued to the supporting effects entity, and the target nomination is not disseminated.3.4 CommunicationsCommunications have also implemented as a service within the C3 Grid. The Message Transceiver Service (MTS) provides the RTI presence to underlying simulations. Currently, a bi-modal representation for communications is used consisting of stochastic and detailed packet representations. Current representations are based on the Joint Tactical Radio System (JTRS), and they provide the physical and logical networking components to the C3 Grid. Given that the RTI presence (MTS), and the networking representations are distinct, the third part communications models can be switched, depending on the needs of the environment.MTS bridges two RTI Regions in order to emulate communications. A networking dimension has been defined, which has two values, “Producer” and “Consumer.” In addition, a base RTI Interaction, “Networking,” has been defined to indicate that all derivative interactions should be subject to communications delays. As the dimension names indicate, all federates besides MTS publish on RTI regions corresponding to “Producer” and subscribe to “Consumer.” MTS does the opposite, subscribing to “Publish” and publishing on “Producer.” Therefore, for each “Networking” based interaction, MTS refers to the underlying network representation to calculate the details of the communication, waits the associated delay period, and bridges the interaction to the appropriate region.Scaling a communications representation to higher echelon command environments precludes the use of detailed models throughout the battlespace. Hence a probabilistic model is employed, and it is calibrated to the corresponding detailed network models. Both fidelity models work in conjunction during run time. The detailed model is applied to selective nodes which have been defined as part of the exercise. The probabilistic implementation services the balance of the battlespace by simulating communication routes that are not sole contained within the explicit set. By selectively applying explicit and probabilistic communications models, the Grid can be support the full range of battle exercises.3.5 Other C2 ServicesThe Dynamic Organization Service (DOS) describes tactical organizations by command and functional structures. Before a scenario is run, the initial Order of Battle or command-based decomposition is defined and articulated as part of a unified scenario definition file. Similarly, the function capability that each control node provides in the C3 system is defined as part of scenario definition. These attributes of each command node are delivered at the beginning of runtime as part of the initialization interactions for platforms. DOS extracts the C3 organization information from the interactions and publishes it as a “C3Node” attribute to the Platform entity.The Dynamic Organization Service (DOS) describes tactical organizations by command and functional structures. Before a scenario is run, the initial Order of Battle or command-based decomposition is defined and articulated as part of a unified scenario definition file. Similarly, the function capability that each control node provides in the C3 system is defined as part of scenario definition. These attributes of each command node are delivered at the beginning of runtime as part of the remote_create interactions for platforms. DOS extracts the C3 organization information from the interactions and publishes it in the C3Nodes attribute of the Platform objects.For the balance of run-time, the DOS tracks the C3Nodes and the platforms that contain them. As platforms are damaged or destroyed, the C3Nodes are adjusted to promote successors and reassign reporting nodes. The revised organization structures are published as RTI Object updates to the platforms in order to make them available to the balance of the simulation environment.Being a service, rather than a consumer of data, the DOS does not provide any data that directly supports the analysis of the exercise. However, by virtue of maintaining the C3 node command and functional responsibilities for the duration of the exercise, it is trivial to determine the C3 posture for any given node at any point in the exercise.BGS federate is the owner and producer of geometry objects. Geometry objects are the representation of a given area or a segment, which may be used to simulate a field of view, area of interest, battlefield lines or any thing else that can be represented by poly-lines or polygons. Geometry objects are defined by their nodes, an attribute representing the side of interest (i.e., inside vs. outside, or left side vs. right side), a list of objects on the side of interest, and other attributes. Blue geometry objects track red and unknown entities, whereas red geometry objects track blue and unknown objects. Neutral objects track all entities. For each geometry object BGS maintains state in term of objects on the designated side of interest for that geometry object. Every time there is a change in the state of a geometry object BGS publishes the geometry object to the Run Time Infrastructure (RTI). Therefore as objects move around during an exercise the geometry objects can detect when the objects move in or out of their area and notify other federates who might be interested in this fact.BGS keeps track of the objects that are the target of the geometry objects. For this reason there is no requirement as to the order in which these objects are created. Therefore when BGS gets a request to create a geometry object, it compares the geometry object against the list of target objects in order to determine if any of these objects are on the designated side of interest for that geometry object. This allows the creation of the geometry objects at any point during the execution of an exercise plan.4. IntegrationIn order to provide staff exercises of significant scale, Eagle controls the scenario through Grid federates, which in turn task appropriate execution to OTB. Both Eagle and OTB are existing simulations so the challenge is to integrate these SAFs while providing network centric behaviors. The Grid simulates the middle-tier echelons, adding network centric behaviors as well as tasking and conveying SA feedback between these SAFs.4.1 EagleEagle is a simulation of operational-level ground combat operations. It models aggregate-level military units and explicitly represents command and control (C2) processes. Eagle’s fidelity is balanced across ground battlefield operating systems, with lower-fidelity representation of Joint operations such as air-to-ground combat. Aggregate-unit resolution is to the battalion, company, or in some cases platoon and section level.Resolution units behave according to orders from their higher headquarters and reactive behaviors representing internal decisions and actions. Headquarters units behave according to orders prepared prior to run-time by an analyst, making decisions to implement branches and sequels according to perceived intelligence information.Attrition, sensing, and movement algorithms are based on standard approved data, preprocessed to support aggregate-level application.4.2 One SAF Test Bed (OTB)One Semi-Automated-Forces (ONESAF) Testbed Baseline (OTB) provides uniform methodology and software support for creating and controlling platform entities on a simulated battlefield. Entities simulated by OTB can behave autonomously; they can move, fire, sense, communicate, and react without operator intervention (i.e., SAF). Entities can interact with each other and with entities simulated in other federates.In support of JVB, OTB provides the creation and automation of both individual entities and as a convenience, sections level aggregates. OTB also provides for the definition and implementation of new types of entity models using a data specification based approach (i.e., reader files). Tasks and behaviors can also be extended using the specification approach, enabling prototypical platforms and capabilities.4.3 C3 Grid integrationThe C3 Grid propagates relevant information between Eagle and OTB SAFs while adding network centric behaviors. From Eagle, the Grid receives Aggregate Unit Orders that command units to move, attack, or defend a given objective. The maneuver federates then perform the prescribed actions per the formation and behaviors configuration files, resulting in commands in accordance with the maneuver topology. Eventually these commands are received and acted on by OTB via Section level commands and/or entity level commands.Feedback from OTB and between maneuver federates is conveyed through the Grid’s SA services. OTB provides perspective for each modeled entity, based on state change. These perceptions are consumed by the Organic Communication Service (OCS) which translates the OTB specific interaction into the common tactical representation used in the Grid. Also OTB’s platform state, or “Situation,” is reported on a periodic basis and transformed to another common representation by OCS. .Subsequently, the IDS and ADS federates use these tactical reports to provide entity and develop aggregate level operational picture respectively. Similarly, the Grid’s maneuver federates report their operational state and perceptions in the common representations, which are also conveyed by the SA federates.Eagle receives feedback and situation from the Grid by monitoring the maneuver unit’s state and perception. Eagle is notified of the maneuver unit’s status by reading the unit’s object representation, which gives the unit’s location, systems on hand and operational activity. Information on opposing forces comes to Eagle via an aggregation of Grid specific reports. The SA portion of the Grid provides the aggregation and dissemination needed in order to inform Eagle. The reports are propagated through the appropriate topology by SA Grid federates. The highest echelon within the maneuver federate is responsible for the conversion to Eagle based perception.5. References[1]	JVB Program Office: “System Architecture Description” March 2002.[2]	JVB Program Office: “System Design Document” March 2002.[3]	Department of Defense, Defense Modeling and Simulation Office: “High Level Architecture Run-Time Infrastructure RTI 1.3-Next Generation Programmer’s Guide Version 5” Virginia 2002[4]	Ernest J. Friedman-Hill: “Jess, The Expert System Shell for the Java Platform” Sandia National Laboratories, California 2002STEVEN WEBSTER is a principal of Xtend LLC, a provider of technical services currently supporting the Army’s Joint Precision Strike Demonstration (JPSD) program. Specific to JVB, he created the software architecture for the C3 Grid, led the Federate Development organization, and implemented the Java Framework as well as a number of federates.SCOTT GALLANT is a Principal Software Engineer at Object Sciences Corporation. He is working on JVB where he is currently the Technical Lead for Integration. He has written or helped write many federates. Scott is currently responsible for the C3 Grid echelon behaviors.