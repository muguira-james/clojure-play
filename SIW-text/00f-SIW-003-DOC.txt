Using XML to Support Command and Control for an Integrated Air Defense SystemMartin R. Stytz, Ph.D.Sheila B. Banks, Ph.D.Air Force Research LaboratoryCalculated InsightWright-Patterson AFB, OHOrlando, Fl  32828(937) 255-2811 x4380(407) 353-0566mstytz@worldnet.att.net, mstytz@acm.orgsbanks@calculated-insight.comKeywords:aircrew training simulation, integrated air defense system (IADS), XML, computer generated actors, command and control simulationsAbstract: In this paper, we present a data transmission representation format that can be used to support the command and control communications requirements for the operation of an integrated air defense system (IADS).   The paper opens with a brief review of the issue we addressed and our solution.  We then review related work regarding command and control in simulation environments.  We describe the requirements for the IADS data transmission representation. The foundation for our approach to IADS command and control is the use of the Extensible Markup Language (XML).  We then present our current specification for the IADS data transmission formats.  The paper concludes with a short summary of the current status of the specification and our suggestions for future work.1.  Project OverviewA vital component of aircrew training and mission rehearsal environments is an Integrated Air Defense System (IADS) to represent the opponent air defense systems.  An IADS is a system of systems that tightly integrates all of the components of an air defense into a coherent fighting force that, in theory, maximizes the effectiveness of the air defense assets.  In a realistic IADS threat training environment, the strategies, tactics, priorities, and objectives of an opponent IADS should be portrayed and the operation of the system should emulate the real-world IADS as closely as possible at all levels, from the physical network connections to the cognitive activity of the IADS commander.  The effective operation and simulation of an IADS has its foundation in its ability to transmit information from sensors to decision-makers and to transmit orders from decision-makers to sensors and weapon systems.  Therefore, there is a need for a robust capability for transmitting data within a simulated IADS used for aircrew training.  The need arises from several factors, including the following: 1) the complexity of an IADS and its information flows, 2) the need to tightly integrate all of the components of an IADS, 3) the use of legacy systems due to high development costs, and 4) the need for computer-controlled as well as human-controlled actors in the IADS.  Furthermore, an IADS simulation requires free text as well as formatted messages.  Recipients must be able to readily distinguish between message types and between free text and formatted text and respond appropriately given the limitations of the recipient system.  Additionally, the transmitter of a message should not be aware of the limitations or requirements of the recipient systems for a transmission.  The transmitting system should only have to compose one message (as in the real world) and expect the recipients to extract the information that they need.  In this paper, we will report our current IADS data transmission format.The next subsection presents a brief review of the problem area that we addressed.  Subsection 1.2 presents a brief illustration of our solution.1.1 IssuesIn a typical IADS simulation environment in use today or likely to be available in the near future, there will, of necessity, be a mix of legacy systems and new, special purpose systems.  A few of these systems may have been specifically designed and developed for use in an IADS, but given the current availability of funding, we expect that the majority of the systems will have been adapted from other environments and uses.  As a result of the mixture of legacy and new systems and IADS-specific and imported systems, there will be a wide variety of capabilities on the part of the constituent components of a simulated IADS (whether they are computer or human controlled) for receiving, understanding, and responding to command and control messages.  Therefore, the IADS threat environment simulation would consist of a variety of simulation systems that have varying capabilities and needs regarding the format and content of command and control messages.  This heterogeneous, generally computer-generated actor-based IADS environment, could lead to the need for the transmission of multiple, customized messages to the constituent IADS components so that information is presented in a manner that each system can use.  We believe that we should avoid this problem by developing a transmission format that can satisfy the needs of every recipient.1.2 Solution OverviewThe data transmission format that we present extends the currently available capabilities of the High Level Architecture (HLA).  The HLA Federation Object Model (FOM) primarily addresses the data that must be transmitted to enable effective interactions within a simulation environment, not command and control of the actors within the environment.  While the HLA FOM can conceivably be extended to support IADS data transmission requirements, the adoption of this solution approach would result in a multitude of recipient formats and in the need for the sender to be cognizant of the needs of the recipients.  Therefore, adopting  the HLA FOM poses significant implementation challenges.  Instead we believe that the FOM be used to specify the data to be transmitted and an Extensible Markup Language (XML) based representation should be used to satisfy the transmission requirements specified in the FOM.  In our opinion, XML offers an elegant and simple solution to the IADS data transmission issue.  Another possible solution, the Command and Control Simulation Interface Language (CCSIL), was, as its name suggests, developed to provide a command and control capability for simulation environments [11].  While CCSIL is a sound solution when dealing with formatted Army messages, it does not readily support transmission of free text or IADS data transmission requirements.  Although CCSIL could be re-engineered to address these needs, we believe that XML provides a more robust capability that can readily meet the data transmission needs of an IADS.  We should note that we are not advocating the replacement of the HLA for an IADS, we are proposing that the capabilities of the HLA be augmented with a robust capability for the efficient transmission of command and control information between the constituent actors of an IADS.The selection of the foundation language for the data transmission format was crucial, and after consideration of several alternatives we chose the Extensible Markup Language. XML provides the flexibility needed to robustly define the components of the data transmission representation. XML is a meta-language that permits the user/designer to define components of the language (syntax, data types, vocabulary, and operators) needed to achieve a required capability using a Document Type Definition (DTD).  We chose XML because XML provides the flexibility needed to transmit IADS-type data.  There were several characteristics of XML that supported our decision.  First, XML’s use of tags and the minimal constraints imposed by the language gave us great confidence that we would be able to express any desired format using the language.  Second, XML is widely used and is standardized; as a result, the language supports re-use and extension of the formats we developed.  Third, because XML supports the definition of custom tag-sets and custom document structures that are completely documented within the document, an XML-based specification for a data transmission format can be automatically searched and categorized by computer programs.  Fourth, XML is designed to support the creation and use of multi-part, distributed documents and the interchange of data between applications.  Finally, the embedded link feature in XML allows us to use inheritance to revise and extend formats as well as to develop new formats.Using XML, we developed data transmission formats that can be used to transmit data to components of an IADS without regard toward the senders’ or recipients’ requirements for data representation or message format. Because our work was conducted within the context of the Air Force's Distributed Mission Training (DMT) program, our results in this paper are heavily oriented toward the needs of aircrew training using the Distributed Mission Training Integrated Threat Environment (DMTITE) [16].  To further increase the realism of the DMTITE environment, we undertook the task of embedding an IADS capability within DMTITE and in developing a transmission format to control the constituent components of the IADS.In the next section, we present background on CCSIL and XML.  Section Three contains a description of our requirements for the actor state transmission representation.  Section Four contains the definition of the IADS command and control transmission representation.  Section Five contains our conclusions and recommendations for further research.BackgroundIn this section we present a brief discussion of a previous approach to disseminating command and control information within a distributed simulation, the Command and Control Simulation Interface Language (CCSIL).  We then present the rationale for the use of XML and briefly introduce the XML language and its syntax.2.1	CCSILCCSIL [11] is an application that supports simulation of command and control interaction with a military distributed simulation environment.  CCSIL is formed from three layers, the Application layer, the Information layer, and the Baseline Infrastructure layer.  For our purposes, the key component of CCSIL is its common language communications protocol used between entities within a DIS-based DVE.  CCSIL includes a set of standard message formats and a vocabulary of terms that can be used to fill in the messages.  CCSIL can support standard messages such as mission status, flight check in, air tasking order, contact report, base incident report, and battle damage assessment report.2.2	Rationale for Using XMLIn the development of the IADS command and control transmission format, the most important decision to be made outside of the format itself was the selection of the technology to express the format.  For our purposes, XML is an ideal choice for a base language for the format.  XML is a general-purpose, meta-markup language designed to define documents containing structured information.  XML also supports the definition of customized markup components [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14].  The customized markup components, called tags, are documented within a Document Type Definition (DTD).  The DTD describes a vocabulary and syntax for use within a document to be transmitted.  In our case, the document is an individual type of IADS message.Several factors supported our decision to use XML.  First, XML is a flexible approach to formatting.  The XML capability to define and use custom tags and the minimal requirements for the language gave us great confidence that we would be able to express any format we needed within the boundaries of the language.  Second, XML is widely used and is standardized; therefore, the basic components of the language are stable and well understood.  Third, XML is precise, it has a well defined set of rules for describing a document and for ordering the contents of a document but does not impose semantics.  As a result, XML provides the basis for developing a common data format that is robust in the face of data corruption, self-describing in terms of tag meaning, and extensible to accommodate unforeseen data requirements.  Finally, XML is designed to enable the creation and use of multi-part, distributed documents and to support interchange of data between applications.2.3	Introduction to XMLAn XML-based transmission representation has three parts, the XML document, the Document Type Definition, and the XML Stylesheet.  The stylesheet only addresses appearance issues, so we will not discuss it further.  An XML-based document has a standard format and a few pre-defined tags.  An XML document consists of one or more elements, marked as shown in Figure 1.<Start>Element text to be transmitted</Start>Figure 1:  XML Document Element FormatAn element consists of two tags, an opening tag ( < > ) and a closing tag ( </ > ), with the name of the tag appearing between the < and the >.  The nesting of the tags within the XML document must correspond to the nesting specified within the DTD.  An XML document always begins with the XML language declaration in the following format, <?xml version=”1.0” standalone=”no”?>.  The declaration specifies the version of XML that was used and whether or not an external DTD is required.  This particular specification indicates that an external DTD is needed by a parser to understand the structure of the document; alternately, saying yes means that a DTD is embedded within the XML document.  The second line defines the root element of the document and the location of the DTD.  The remainder of the document contains tags defined in the DTD and the corresponding data to be transmitted.The Document Type Definition (DTD) specifies how the elements (contents) of a document must relate to each other.  Each element is defined using a <!ELEMENT> declaration in the following format: <!ELEMENT elementname rule >.  There are a number of keywords that can be used to define the rule, including the keywords ANY and #PCDATA.  The ANY keyword indicates that any character data or keyword can appear within the element.  The keyword #PCDATA indicates that only general character data can appear within the element.  To indicate that multiple elements must appear in a specific sequence, commas are used to separate the instances.  Parentheses are used to group declarations.  Within a declaration, one of three operators can be used to specify the number of occurrences of an element.  The ? operator indicates that the element must appear once or not at all.  The + operator indicates that the element must appear at least once.  The * operator indicates that the element can appear any number of times or not at all.  Within the DTD, attributes can be defined for any element.  An attribute is defined using the <!ATTLIST> declaration, which has the form <!ATTLIST target_element attribute_name attribute_type default>.  Data types include character data (CDATA) and enumerated data, as well as the keywords #REQUIRED, #IMPLIED, and #FIXED.  Using these components as a basis in conjunction with a set of topic-specific keywords, a document type can be defined.  XML has additional capabilities that we have not described here but are discussed in a variety of resources [1,2,3,4,5,6,7, 8,9,10,12,13,14]. 3.	IADS Data Transmission Format RequirementsTo guide the development of the IADS Command and Control transmission representation, we developed a set of requirements that specify the desired communications functionality.  The transmission representation had to be recipient and transmitter application/system independent, it had to be extensible, and it had to be able to accommodate the communications needs of legacy systems.  The transmission representation had to be capable of supporting all basic and expected functionality within an IADS, ranging from contact reports to individual directives to engage/disengage to group directives to engage/disengage.  The transmission format had to be able to transmit all of the data required by the IADS command center to maintain situation awareness.  The command and control transmission representation had to be network technology independent so that it can operate within a HLA, Distributed Interactive Simulation (DIS), or HLA/DIS combined environment.  The transmission representation also had to be able to continue to operate effectively and communicate with its constituent components even after entities migrate from host to host.  Finally, the transmission representation had to permit normal and emergency reporting of status and operations from individual IADS components to the IADS command center.  We present our solution to these requirements in the next section.4.	IADS Data Transmission FormatXML is a document-oriented language; therefore, the IADS command and control transmission formats are expressed as a set of independent XML documents.  Our approach to the design of the formats was to proceed from the most general information for a particular type of information to be reported to the most specific.  Figure 2 presents the transmission format used by a sensor to report one or more sensor contacts to the IADS command center or another entity.  Figure 3 contains the report format used by the IADS command center to report on its status, the network status, and incoming attack status to its constituent entities.  Figure 4 contains the report format used by the IADS command center to direct changes in radio frequency and radar frequency and to command the engagement of incoming entities by one or more of its weapon systems.  Figure 5 is the report format used by an IADS entity to report its status and operational capability to the command center.  Figure 6 is the report format used by an IADS entity to report on the results of an engagement to the command center.  Figure 7 contains the XML document format used by the IADS command center to manage the electronic warfare aspects of the IADS.  Figure 8 presents the free text message format.  Figure 9 contains the IADS command center request for status message format.  Figure 10 presents the aircraft vector format.  A selection of the XML tags needed for the report formats is presented in Figure 11.<?XML version=”1.0” encoding=”UTF-8”?><!DOCTYPE SENSOR_REPORT SYSTEM [<!ELEMENT	SENSOR_REPORT sensor_call_sign, sensor_entity_id, sensor_position, sensor_model_name, subnet_number*, number_of_entities_in_report, (detected_entity_id, domain, position, velocity)*><!ELEMENT	sensor_call_sign	(#PCDATA)><!ELEMENT	sensor_entity_id	(#PCDATA)><!ELEMENT	sensor_position	(#PCDATA)><!ELEMENT	sensor_model_name	(#PCDATA)><!ELEMENT	subnet_number	(#PCDATA)><!ELEMENT	number_of_entities_in_report	(#PCDATA)><!ELEMENT	detected_entity_id	(#PCDATA)><!ELEMENT	domain	(#PCDATA)><!ELEMENT	position	(#PCDATA)><!ELEMENT	velocity	(#PCDATA)>]>< /SENSOR_REPORT >Figure 2:  Sensor Report Format<?XML version=”1.0” encoding=”UTF-8”?><!DOCTYPE IADS_COMMAND_CENTER_REPORT SYSTEM [<!ELEMENT	IADS_COMMAND_CENTER_REPORT IADS_command_entity_entity_ID, IADS_command_entity_status, IADS_command_entity_location, IADS_network_status, number_of_subnet_reports, (sunbet_number, subnet_status)*, attack_detected, attack_size, attack_cell_size><!ELEMENT	IADS_command_entity_entity_ID	(#PCDATA)><!ELEMENT	IADS_command_entity_status	(#PCDATA)><!ELEMENT	IADS_command_entity_location	(#PCDATA)><!ELEMENT	IADS_network_status	(#PCDATA)><!ELEMENT	number_of_subnet_reports	(#PCDATA)><!ELEMENT	subnet_number	(#PCDATA)><!ELEMENT	subnet_status	(#PCDATA)><!ELEMENT	attack_detected	(#PCDATA)><!ELEMENT	attack_size	(#PCDATA)><!ELEMENT	attack_cell_size	(#PCDATA)>]>< /IADS_COMMAND_CENTER_REPORT >Figure 3:  IADS Command Center Report Format<?XML version=”1.0” encoding=”UTF-8”?><!DOCTYPE IADS_COMMAND_REPORT SYSTEM [<!ELEMENT	IADS_COMMAND_REPORT IADS_command_entity_entity_ID, (subnet_number, number_of_radio_frequency_changes, (entity_id*, new_radio_frequency)*, number_of_radar_frequency_changes, (entity_id*, new_radar_frequency, directed_sensor_data_recipients*)*, number_of_directed_engagements, (entity_id*, weapon, target_entity_id*, (free_fire, orientation)*)*)* ><!ELEMENT	IADS_command_entity_entity_ID	(#PCDATA)><!ELEMENT	subnet_number	(#PCDATA)><!ELEMENT	number_of_radio_frequency_changes	(#PCDATA)><!ELEMENT	entity_id	(#PCDATA)><!ELEMENT	new_radio_frequency	(#PCDATA)><!ELEMENT	number_of_radar_frequency_changes	(#PCDATA)><!ELEMENT	entity_id	(#PCDATA)><!ELEMENT	new_radar_frequency	(#PCDATA)><!ELEMENT	entity_id	(#PCDATA)><!ELEMENT	directed_sensor_data_recipients	(#PCDATA)><!ELEMENT	number_of_directed_engagements	(#PCDATA)><!ELEMENT	entity_id	(#PCDATA)><!ELEMENT	weapon	(#PCDATA)><!ELEMENT	target_entity_id	(#PCDATA)><!ELEMENT	free_fire	(#PCDATA)><!ELEMENT	orientation	(#PCDATA)>	]>< /IADS_COMMAND_REPORT >Figure 4:  IADS Command Format<?XML version=”1.0” encoding=”UTF-8”?><!DOCTYPE STATUS_REPORT SYSTEM [<!ELEMENT	STATUS_REPORT actor_name, subnet_number*, actor_type, category, model, nationality, alliance, domain, position, velocity, acceleration, orientation, positional_accuracy, dead_reckoning_algorithm, remaining_fuel, log_file_URL, number_of_entity_guises, actor_guise_URL, current_actor_guise, actor_coordinate_system, actor_coordinate_system_translation_method, call_sign, entity_id, subscriptions, number_of_terrain_models, terrain_model_definition_file_URL*, current_terrain_model, number_of_sensor_models, (sensor_model_name, sensor_model_URL, sensor_model_coordinate_system, sensor_model_parameters_URL)*, current_sensor_model, maximum_number_of_radio_frequencies, radio_frequency_content+, current_radio_frequency, radio_operational_status, number_of_weapon_types, (weapon, remaining_ammunition)*, skill_level, skill_level_file_URL, combat_psychology_file_URL><!ELEMENT	actor_name	(#PCDATA)><!ELEMENT	subnet_number	(#PCDATA)><!ELEMENT	actor_type	(#PCDATA)><!ELEMENT	category	(#PCDATA)><!ELEMENT	model	(#PCDATA)><!ELEMENT	nationality	(#PCDATA)><!ELEMENT	alliance	(#PCDATA)><!ELEMENT	domain	(#PCDATA)><!ELEMENT	position	(#PCDATA)><!ELEMENT	velocity	(#PCDATA)><!ELEMENT	acceleration	(#PCDATA)><!ELEMENT	orientation	(#PCDATA)><!ELEMENT	positional_accuracy	(#PCDATA)><!ELEMENT	dead_reckoning_algorithm	(#PCDATA)><!ELEMENT	remaining_fuel	(#PCDATA)><!ELEMENT	log_file_URL	(#PCDATA)><!ELEMENT	number_of_entity_guises	(#PCDATA)><!ELEMENT	actor_guise_URL	(#PCDATA)><!ATTLIST	actor_guise_URL	xlink:form	CDATA	#FIXED	“simple”	href		CDATA	#REQUIRED><!ELEMENT	current_actor_guise	(#PCDATA)><!ELEMENT	actor_coordinate_system	(#PCDATA)><!ELEMENT	actor_coordinate_system_translation_method	(#PCDATA)><!ELEMENT	call_sign	(#PCDATA)><!ELEMENT	entity_id	(#PCDATA)><!ELEMENT	subscriptions	(#PCDATA)><!ELEMENT	number_of_terrain_models	(#PCDATA)><!ELEMENT	terrain_model_URL	(#PCDATA)><!ATTLIST	terrain_model_file_URL	xlink:form	CDATA	#FIXED	“simple”	href		CDATA	#REQUIRED><!ELEMENT	current_terrain_model	(#PCDATA)><!ELEMENT	number_of_sensor_models	(#PCDATA)><!ELEMENT	sensor_model_name	(#PCDATA)><!ELEMENT	sensor_model_URL	(#PCDATA)><!ATTLIST	sensor_model_URL	xlink:form	CDATA	#FIXED	“simple”	href		CDATA	#REQUIRED><!ELEMENT	sensor_model_coordinate_system	(#PCDATA)><!ELEMENT	sensor_model_parameters_URL	(#PCDATA)><!ATTLIST	sensor_model_parameters_URL	xlink:form	CDATA	#FIXED	“simple”	href		CDATA	#REQUIRED><!ELEMENT	current_sensor_model	(#PCDATA)><!ELEMENT	maximum_number_of_radio_frequencies	(#PCDATA)><!ELEMENT	radio_frequency_content+ (name+, frequency)	>	<!ELEMENT	name	(#PCDATA)>	<!ELEMENT	frequency	(#PCDATA)><!ELEMENT	current_radio_frequency	(#PCDATA)><!ELEMENT	radio_operational_status	(#PCDATA)><!ELEMENT	number_of_weapon_types	(#PCDATA)><!ELEMENT	weapon	(#PCDATA)><!ELEMENT	remaining_ammunition	(#PCDATA)><!ELEMENT	skill_level 	(#PCDATA)><!ELEMENT	skill_level_file_URL	(#PCDATA)><!ATTLIST	skill_level_file_URL	xlink:form	CDATA	#FIXED	“simple”	href		CDATA	#REQUIRED>]>< / STATUS_REPORT >Figure 5:  Status Report Format<?XML version=”1.0” encoding=”UTF-8”?><!DOCTYPE ENGAGEMENT_REPORT SYSTEM [<!ELEMENT	ENGAGEMENT_REPORT entity_id, subnet_number*, position, sensor_model_name, number_of_engaged_entities, (target_entity_id, domain, position, velocity, simulation_time_of_engagement, weapon, remaining_ammunition, result)*><!ELEMENT	entity_id	(#PCDATA)><!ELEMENT	subnet_number	(#PCDATA)><!ELEMENT	position	(#PCDATA)><!ELEMENT	sensor_model_name	(#PCDATA)><!ELEMENT	number_of_engaged_entities	(#PCDATA)><!ELEMENT	target_entity_id	(#PCDATA)><!ELEMENT	domain	(#PCDATA)><!ELEMENT	position	(#PCDATA)><!ELEMENT	velocity	(#PCDATA)><!ELEMENT	simulation_time_of_engagement	(#PCDATA)><!ELEMENT	weapon	(#PCDATA)><!ELEMENT	remaining_ammunition	(#PCDATA)><!ELEMENT	result	(#PCDATA)>	]>< /ENGAGEMENT_REPORT >Figure 6:  Engagement Report Format<?XML version=”1.0” encoding=”UTF-8”?><!DOCTYPE IADS_EW_COMMAND_REPORT SYSTEM [<!ELEMENT	IADS_EW_COMMAND_REPORT IADS_command_entity_entity_ID, subnet_number*, number_of_EW_directives, ((entity_id, jamming_system, target_frequencies*, (local_control)*)*><!ELEMENT	IADS_command_entity_entity_ID	(#PCDATA)><!ELEMENT	subnet_number	(#PCDATA)><!ELEMENT	number_of_EW_directives	(#PCDATA)><!ELEMENT	entity_id	(#PCDATA)><!ELEMENT	jamming_system	(#PCDATA)><!ELEMENT	target_frequencies	(#PCDATA)><!ELEMENT	local_control	(#PCDATA)>	]>< /IADS_EW_COMMAND_REPORT >Figure 7:  Electronic Warfare Report Format<?XML version=”1.0” encoding=”UTF-8”?><!DOCTYPE IADS_FREE_TEXT_REPORT SYSTEM [<!ELEMENT	IADS_FREE_TEXT_REPORT (recipient_entity_id, subnet_number*, (subject, keywords, text)*)* ><!ELEMENT	recipient_entity_id	(#PCDATA)><!ELEMENT	subnet_number	(#PCDATA)><!ELEMENT	subject	(#PCDATA)><!ELEMENT	keywords	(#PCDATA)><!ELEMENT	text	(#PCDATA)>	]>< /IADS_FREE_TEXT_REPORT >Figure 8:  Free Text Format<?XML version=”1.0” encoding=”UTF-8”?><!DOCTYPE IADS_REQUEST_FOR_STATUS_REPORT SYSTEM [<!ELEMENT	IADS_REQUEST_FOR_STATUS_REPORT IADS_command_entity_entity_ID, subnet_number*, all_entities_report, requested_entities_report*><!ELEMENT	IADS_command_entity_entity_ID	(#PCDATA)><!ELEMENT	subnet_number	(#PCDATA)><!ELEMENT	all_entities_report	(#PCDATA)><!ELEMENT	requested_entities_report	(#PCDATA)>	]>< /IADS_REQUEST_FOR_STATUS_REPORT >Figure 9:  Request for Status Report Format<?XML version=”1.0” encoding=”UTF-8”?><!DOCTYPE IADS_AIRCRAFT_VECTOR_REPORT SYSTEM [<!ELEMENT	IADS_AIRCRAFT_VECTOR_REPORT IADS_command_entity_entity_ID, number_of_vectors, (aircraft_entity_id, vector, velocity, altitude, local_control, (target_entity_id, vector, velocity, altitude)*)*><!ELEMENT	IADS_command_entity_entity_ID	(#PCDATA)><!ELEMENT	number_of_vectors	(#PCDATA)><!ELEMENT	aircraft_entity_id	(#PCDATA)><!ELEMENT	vector	(#PCDATA)><!ELEMENT	velocity	(#PCDATA)><!ELEMENT	altitude	(#PCDATA)><!ELEMENT	local_control	(#PCDATA)><!ELEMENT	target_entity_id	(#PCDATA)><!ELEMENT	vector	(#PCDATA)><!ELEMENT	velocity	(#PCDATA)><!ELEMENT	altitude	(#PCDATA)>	]>< /IADS_AIRCRAFT_VECTOR_REPORT >Figure 10:  Aircraft Vector Report FormatTagMeaningdomainLand, sea, air, or spacepositionLocation of the actor in the HLA coordinate system, x,y,z order, comma delimited, in metersvelocityVelocity of the actor in the HLA coordinate system, x,y,z order, comma delimited, in meters/secondaccelerationAcceleration of the actor in the HLA coordinate system, x,y,z order, comma delimited, in meters/second/secondrecipient_entity_idID of the entity that is to receive the sensor output from an entity.subnet_numberNumeric identification of the subnet that connects the transmitting entity to the recipient entitypositional_accuracyAccuracy required before transmitting a position updatedead_reckoning_algorithmName of the dead reckoning algorithm used by the actorlog_file_URLLocation of the actor activity log file used by the actorcurrent_actor_guiseCurrent 3D graphical model used by the actoractor_coordinate_systemCoordinate system used by the actoractor_coordinate_system_translation_methodMethod used by the actor to translate coordinate system values from the HLA to its own internal coordinate system:=Assignment operator==Equivalency test>Greater than<Less than>=Greater than or equal to<=Less than or equal toNoneNo entryANYAny value is acceptablesubscriptionsHLA entity subscriptions required by the actornumber_of_terrain_modelsTotal number of terrain models required by the actordirected_sensor_data_recipientsIADS entities that are to receive the sensor output from a given sensorcurrent_terrain_modelTerrain model currently in usenumber_of_sensor_modelsTotal number of sensor models required by the actorcurrent_sensor_modelSensor model currently in usemaximum_number_of_radio_frequenciesTotal number of radio frequencies available to the actorradio_operational_statusWhether the radio is operational or notskill_levelSkill level assigned to the actorFigure 11:  Selected IADS Command and Control XML Tags/Meanings5.	Conclusions and Future WorkIn this paper we presented a set of IADS command and control transmission formats that can be used to manage the operation of an IADS within a HLA or DIS environment.  The formats permit an IADS command and control center to manage the operation of its IADS and maintain situational awareness concerning the state of the battlespace.  Our initial work on the transmission formats is complete; however, several tasks remain.  We plan to add a capability to support command and control and data transmission for additional sensor types and human observers.  Our next immediate tasks are to examine the formats and determine how or if the representation can be expanded to support integrated defense systems in other domains.  In future work, we plan to develop formats that support the dynamic alteration of tactics, mission plans, and movement plans during the execution of the simulation.  Finally, we hope that the transmission format that we present can serve as the basis for a command and control transmission format standard defined in the HLA documentation.  Therefore, we encourage comments on this format.ReferencesCopenkus, A. & Hoodbhoy, F. (1999) Applied XML:  A Toolkit for Programmers. John Wiley and Sons: New York, NY.DuCharme, B. (1998)  XML:  The Annotated Specification. Prentice Hall: New York, NY.Garingo, G. & Augins, J.S. (1999) “XML to Facilitate Interoperability Between Repositories,” The Spring Simulation Interoperability Workshop, Orlando, FL, 14-19 March, pp. 1106-1111.Harold, E.R. (1999) XML Bible.  IDG Books Worldwide: Foster City, CA.Harold, E.R. (1999) XML: Extensible Markup Language.  IDG Books Worldwide: Foster City, CA.Lacy, L.W. & Tuttle, C. (1998) “Interchanging Simulation Data Using XML,” The 1998 Fall Simulation Interoperability Workshop, Orlando, FL., 13-18 Sep., pp.1110-1119.Leventhal, M.; Lewis, D.; & Fuchs, A. (1998)  Designing XML Internet Applications.  Prentice Hall: New York, NY.McGrath, S. (1998) XML By Example:  Building E-Commerce Applications. Prentice Hall: New York, NY.Miller, G.J. & Filipelli, L.J. (1999) “An XML Representation of HLA Object Models,” The Spring Simulation Interoperability Workshop, Orlando, FL, 14-19 March, pp. 565-570.Megginson, D. (1998) Structuring XML Documents. Prentice Hall: New York, NY.Salisbury, M.R.  (1995)  “Command and Control Simulation Interface Language (CCSIL) Status Update,” Proceedings of the Twelfth Workshop on Standards for the Interoperability of Defense Simulations, Orlando, FL, 13-17 March, pp. 639-649.Simpson, J.E. Just XML.  (1998) Prentice Hall: New York, NY.St. Laurent, S.; St. Laurent, S.; & St. Laurent, S. (1999) XML:  A Primer. 2nd edition.  IDG Books Worldwide: Foster City, CA.St. Laurent, S.; St. Laurent, S.; & Biggar, R.J. (1999) Inside XML DTDs: Scientific and Technical.  McGraw Hill: New York, NY.Stytz, M.R. & Banks, S.B. (1999) “Robust Computer Generated Actor Migration,” Proceedings of the 1999 Fall Simulation Interoperability Workshop, Orlando, Florida, 15-20 September, pp. 695-703.Stytz, M.R.; Banks, S.B.; Hutson, L.J.; and Santos, E.  (1998) “An Architecture to Support Large Numbers of Computer-Generated Actors for Distributed Virtual Environments,” Presence: Teleoperators and Virtual Environment, vol. 7, no. 6, December, pp. 588-616, MIT Press.Author BiographiesMartin R. Stytz is a Chief Principal Research Scientist and Engineer in the Air Force Research Laboratory and is a retired Lieutenant Colonel in the U.S. Air Force.  He received a Bachelor of Science degree from the U.S. Air Force Academy in 1975, a Master of Arts degree from Central Missouri State University in 1979, a Master of Science degree from the University of Michigan in 1983.  Stytz received his Ph.D. in Computer Science and Engineering from the University of Michigan in 1989.  He is a member of the ACM, SIGGRAPH, SIGCHI, the IEEE, the IEEE Computer Society, AAAI, and the Society for Computer Simulation.  His research interests include virtual environments, distributed interactive simulation, modeling and simulation, user-interface design, software architecture, intelligent agents, cyberwarfare, and computer-generated forces. Sheila B. Banks is the president of Calculated Insight.  Dr. Banks received her Bachelor of Science from the University of Miami, Coral Gables, FL in 1984 and a Bachelor of Science in Electrical Engineering from North Carolina State University, Raleigh, NC in 1986.  Also from North Carolina State University, Raleigh, NC, she received a Master of Science in Electrical and Computer Engineering in 1987 and her Doctor of Philosophy in Computer Engineering (Artificial Intelligence) from Clemson University, Clemson, SC in 1995.  Her research interests include artificial intelligence, human behavior and cognitive modeling, intelligent computer generated forces, associate and collaborative systems, distributed virtual environments, intelligent human computer interaction, and man-machine interfaces.PAGE  