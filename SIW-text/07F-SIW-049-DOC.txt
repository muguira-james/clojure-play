Experiences with Ownership Transfer in Large-scale Realtime Simulation Bill HelfinstineMark TorpeyLockheed Martin Simulation, Training, and Support35 Corporate Drive, Suite 250Burlington, MA  01803781-505-9500bill.helfinstine@lmco.com mark.torpey@lmco.comAndy CeranowiczAlion Science and TechnologyAlexandria, VAaceranowicz@alionscience.comKeywords:HLA Ownership Management Scalability ABSTRACT: The Ownership Management capabilities of the High Level Architecture provide a mechanism for allowing multiple simulations to express data that relates to a single conceptual object over time.  We used a modified version of these capabilities in the USJFCOM experiment Urban Resolve 2015 to provide a mechanism for command and control collaboration and sharing. This paper discusses the experiences we had with the use of these mechanisms, and comments on a number of issues that arose with its use.1. OverviewUrban Resolve is an ongoing series of experiments being conducted by the US Joint Forces Command’s Joint Innovation and Experimentation Directorate (J9). [1]  This series of experiments is exploring the capabilities of US-led coalition forces to operate in urban environments, and providing direction in the development of tactics and capabilities to enhance their ability to confront and overcome  irregular adversaries.   Urban Resolve 2015 (UR2015) was a Human-in-the-Loop (HITL) real-time simulation, with a hypothetical Joint Task Force Command Staff participating as the experimental subjects, observing and controlling the progress of the event using real-world and simulated C4I displays. The authors are members of the J9 Experiment Engineering team and were responsible for integrating the simulation federation that supported the UR2015 experiment.This event took place between July and October 2006, and was very successful at providing the largest, most-detailed urban environment that has ever been accomplished.  The experiment demonstrated a number of new capabilities, including the ability to build a High-Level Architecture (HLA) federation that can support hundreds of thousands of individual people, vehicles, and inanimate objects populating a city-scale environment with realistic levels of vehicle traffic and situational confusion.  Further, it demonstrated that it is possible to generate such an environment with current technology, and that scaling simulations to this level is both practical and achievable.One of the major simulations used to drive the Urban Resolve experiment was the Joint Semi-Automated Forces (JSAF) simulation [2].  This simulation is organized as a collection of HLA federates, some providing simulation capability, and some providing user interfaces and operator control capabilities.  These federates communicate control information with each other using the JSAF Control Protocol [3] which is an HLA Base Object Model [4] that provides a mechanism for controlling the behavior of the simulation.A major component of this protocol is the ability to define graphical overlays that can be used to coordinate operations and define desired behavior when commanding simulated units.   These overlays are collections of lines, points, and other graphical objects that can be viewed and manipulated as a set.  Each overlay has a name and an associated permission state, which controls which operators have the capability to view or modify the graphics.  A permission tree is used to determine whether an operator has the ability to view or change an overlay. For those overlays an operator is allowed to view he has the option of turning their display on his GUI on and off.Through this capability, operators can collaborate by creating overlays that are shared among a group of users.  This ability allows multiple operators to coordinate larger operations, and provides a means to share knowledge and intelligence among themselves, while also providing a means to keep knowledge from being shown to users that don’t have the permission state to see this information.  By organizing the permission states into a hierarchy, the capability to share overlays also enables the ability for experiment controllers to have visibility into the ways that operators control the simulation.  See Figures 1.1 and 1.2 for an example of the use of graphics and overlays to do tactical planning.In addition to being used in the planning and behavior decomposition process, these graphical objects are used as inputs to JSAF's behavior models. In turn, JSAF’s behavioral models create and manipulate graphical objects, [5] allowing them to make their automated decisions visible to the operators.  These temporary objects can also be adjusted by operators to allow for more in-depth control of the simulation.These graphics are implemented as HLA objects, as are the overlay objects that group the graphics objects together.  Since each GUI is a separate HLA federate, we need a way for more than one federate to modify a particular HLA object to allow this collaboration.  This is accomplished in the HLA through the use of the Ownership Management services, which are a major feature in the HLA specification.  Figure 1.1: Overlay showing a disaster recovery planFigure 1.2: Overlay showing emergency vehicle routesTo take advantage of these services, we implemented them as part of RTI-s, since RTI-s' data distribution management capabilities are essential for our federations to operate.  While implementing these capabilities, we ran into a number of difficulties with the use of the ownership services in a large-scale system such as Urban Resolve.  We implemented several extensions to the Ownership Management services as specified, in an attempt to alleviate some of these difficulties.  In particular, the behavior of the ownership transfer services is unspecified in the presence of  federate or federation failures.  Since the existing HLA specifications do not take failure cases into account, there are a number of ways that following the letter of the specification leads to the existence of objects that cannot be transferred, even though the desired semantics imply that they should be transferable.2. Requirements of JSAF C2 for UR2015The Urban Resolve experiment had a number of requirements that drove the use of the newly implemented JSAF C2 protocol.  One requirement was to provide an urban battlefield that comprised a large civilian populace.  Another was to provide a medium-sized counterinsurgency force and a relatively small set of insurgents.  These requirements led to the design of the simulation using High Performance Computing (HPC) systems [6] in order to provide the computation power necessary to drive such a large-scale experiment.  The RTI-s [7] software was used to provide a scalable partial implementation of the HLA that operates on HPC systems.  RTI-s also provides a means for driving large-scale HLA federations on a combination of HPC hardware and typical local area network systems of commodity PC hardware.  This application also provided the opportunity for extensive tuning of the ownership management software and exploration of new techniques in ownership transfer.A requirement that was placed on the HLA RTI in general, and on the ownership transfer services in particular, was to handle the transfer of ownership of these graphics objects in a quick and reliable fashion.  Due to the large number of civilians being simulated in the urban environment, there is a large amount of other message traffic being carried by the RTI, making some traditional techniques of enhancing reliability inappropriate due to their overhead or their tendency to turn individual cases of software or hardware failures into system failures.  Due to the large number of machines and federates involved in Urban Resolve, it was inevitable that there would be failures during the event, and they would need to be dealt with by the operational staff without affecting the rest of the simulation to the maximum extent possible.3. HLA Ownership ManagementThe HLA specification provides a number of services that allow the ownership of attributes within objects to be transferred from one federate to another. [8]  There are two basic models that the HLA specification provides, which are often referred to as ownership push and ownership pull.  [9]In a push situation, the current owner of an attribute can give up ownership of that attribute, and another federate can acquire ownership, which allows it to update that attribute’s value. In a pull situation, a federate can request that it be given ownership of an attribute, and the current owner can then allow it to be taken or can disallow it if it so desires.For the purposes of JSAF graphics objects, the pull model was used, with a given federate acquiring ownership of all the attributes of a particular graphic object, and then updating it when it is necessary to do so.An experimental enhancement was also added to the implementation of RTI-s that we used for Urban Resolve.  A new mode was added that allows a federate to pull the ownership of an attribute simply by trying to update its value.  This is allowed only if all the attributes that would be acquired have a “shared” flag set.  In order to add this flag without adding new API methods or FED flags, the flag was set as part of the transport type, and the transport type of the attributes was checked to determine whether to allow automatic ownership pull.This enhancement turns out to be very useful for objects that do not have an obvious owner in the federation design.  It provides a means by which the RTI can support a less rigid concept of ownership, while still allowing the original semantics of object ownership to be supported if those map better to the problem that is being solved.  We feel that this is a very useful extension and could be helpful to other systems if it became standardized as part of the HLA specification.  The semantics that this extension provides do still have some rough edges that we have not yet resolved, particularly in describing what should happen in the case of software or hardware failures.4. Limitations Due to ScaleThe Urban Resolve experiment is a large-scale event.  Phase two simulated a large chunk of a major city, with upwards of two hundred thousand civilians walking and driving and going about their lives. [10]  It also simulated insurgents and counterinsurgency operations, using thousands of military entities. In order to accommodate all these factors, a large amount of computation was required.  We used a Beowulf cluster with 256 Intel Xeon processors. [11]  In addition, there were three high-traffic simulation sites and more than a dozen lower-traffic simulation sites, consisting of hundreds of desktop PCs and rack servers tied in over wide-area network links, using RTI-s IMP routers [12] and DIS gateways. One major upshot of running such a large system is that knowing exactly how things are running is difficult.  A primary metric that is used to determine whether the system is performing properly is to monitor the number of HLA objects that the system has created and continues to update.  [13]  This becomes much more difficult to track properly when objects are changing ownership from machine to machine.  The traditional categories of “local” and “remote” objects no longer apply to all objects, which makes it difficult to count up how many objects really exist in the system.  Since the JSAF graphics objects transfer all of their attributes together, the issue of having a single object owned by multiple federates doesn’t apply in this case.  The fact that all the attributes transfer together is a simplifying design decision.  Since often only one attribute is actually changing, as would occur when a point object is moved from one location to another, there isn’t a real requirement that the color or description change ownership as well.  However, keeping all the attributes together avoids the complexities associated with having multiple federates owning portions of a single object.5. Handling of FailuresIn a system as large as Urban Resolve, it is inevitable that portions of the system will crash.  With hundreds of computers, all running millions of lines of code, the chances of at least one computer failing are essentially 100%.  Therefore, the system must be designed to cope with the software, hardware, and networking failures that are inevitable due to the scale of the system.  The software must be capable of continuing to operate, and to try to repair broken connections and remain functional.  Human intervention is usually required as well in order to assess the validity of the simulation whenever such a failure occurs, but the major requirement is that the system be able to recover from such a failure without requiring a full restart. [14]Ownership transfer makes this problem somewhat more difficult, since it can result in objects that one federate knows about and wants to change, but the owning federate has crashed and can no longer give up its ownership.  Therefore, there need to be mechanisms in place to allow ownership to be acquired even if the current owner cannot be part of the transfer process.A similar issue is that graphics objects are intended to be shared among all the operators that have permission to see them.  If the current owner of an object crashes, any systems that are started after that point will not discover the object, since nobody is updating it.  A mechanism to detect that attributes of an object have become ownerless was added to RTI-s, which would then nominate a new owner for that object from among the federates that had previously discovered that object.This style of automatic assumption of ownership turned out to be very difficult to implement correctly.  If a machine incorrectly assumed that another machine had crashed, it might take ownership of an object from that machine.  If that machine had not crashed, but had been unable to communicate temporarily due to network faults or starvation due to overload, when it recovers, two machines would then think they own the same object, and would then need a secondary protocol that would cause one but not both machines to release ownership.  Another complicating factor was the networking topology used in Urban Resolve, which was a hub-and-spoke system using ATM virtual circuits from J9 to each other site.  This topology resulted in major problems for our fault tolerance approach if the network at J9 failed, as objects would then become duplicated at each other site involved in the federation.An additional difficulty that arose was that connectivity between the various simulation sites had various levels of data loss and connection failure.  The traditional means to overcome data loss is to use TCP to encapsulate the messages being sent over the connection, to provide a reliable data stream.  Unfortunately, one of the effects of the TCP protocol is that throughput of a connection goes down as the latency of the path goes up. [15]  Due to this effect, it was determined that to get adequate throughput using the available WAN connections between the main Suffolk, VA JFCOM J9 site and both the Maui, HI HPC site and the San Diego, CA control site, we could not use TCP.  The UDP communications that were used in place of the TCP connections do not provide reliability, and therefore we provide additional reliability mechanisms implemented at a higher level.  In cases where the networks fail for extended periods of time, none of these reliability protocols can prevent data loss from occurring.   This led to problems with the RTI messages that transfer the ownership of attributes getting lost, which resulted in multiple federates believing that they owned the same object at the same time.  To deal with this situation, one federate would have to decide to let go of the object, and the ownership would need to be resolved without causing other federates to fail due to conflicting data.If some attributes are owned by one federate and others are owned by a different federate, it makes recovery very tricky if one of the federates were to crash.  Knowing what the situation is in such a case is perhaps the most difficult thing, particularly in a large-scale system.  In Urban Resolve, the decision to require that all attributes of an object be transferred at once let this issue be avoided.  For future use, this is a subject that should be revisited.Our experimentation with fault tolerance for shared objects showed that our recovery mechanisms were too unstable to be used in an actual experiment.  As a result, the automatic assumption of another machine's objects was not used for failure recovery during the execution of the Urban Resolve experiment.  However, we did successfully use ownership management to transfer control of graphical objects between operators and between the simulated entities that consumed them.6. Future DirectionsThe Naval Warfare Development Command is using JSAF in a number of training and experimentation events.  The requirements of the Navy community include the use of RTI-NG Pro in the “connectionless” mode, which does not support any of the ownership transfer services.  It will be necessary to implement a protocol on top of the services that are supported that can mimic the effects of ownership transfer.  Since this mode of RTI-NG does not provide much more than the basic Object Management functionality and Best Effort transport, this will severely limit interoperability with other simulations, due to the large amounts of additional protocol implementation that will be required.A better mechanism to handle failure recovery is necessary to provide a way to keep shared objects from disappearing if their owning federate were to crash.  The current mechanisms are too buggy and fragile to properly handle the cases that happen quite often in large simulations.  In particular, there is no means to determine whether the owning federate for a particular object has failed.   The only mechanism we have at present is to assume that a lack of updates for an object means the sender has failed.  This lack of visibility into the system is exacerbated by the fact that a failure can range in severity from an overloaded process that fails to update its data in a timely fashion, to a process crashing, to a network failure that blocks all data from flowing.  Each of these failure cases requires a different response from the system, and differentiating them is not possible with the current set of detection mechanisms. Better means of monitoring the quantity and ownership of the various objects in the federation are needed in order to identify failure conditions and recover from them.  In particular, a higher level view is needed to monitor the system as a whole, in order to determine the extent of failures.  A number of difficulties in handling failures arise from the limited view that each federate has of the system, due to the limitations of scale.  Since the system is so large, there is no way for a centralized component to know everything about how the system is working.  A means of summarizing and monitoring the operation of the system in realtime is required in order to determine the existence and extent of failures, in order to properly recover from them.We have found the “shared” mode of ownership transfer to be very useful, and have found that it provides a way to support object semantics that the current IEEE 1516.1 specification does not.  We believe that these sorts of extensions to the HLA specification should be standardized and codified.  We have also found that making ownership transfer fault tolerant is very tricky and therefore could benefit from standardization.  The HLA Evolved effort is much too far along to deal with this subject at the current time, but for future HLA specifications, it would be a worthwhile subject to introduce into the standardization process.  Hopefully, by the time that any standardization process gets underway, many of the failure recovery issues will be better known and better solutions can be provided as part of such a standard.7. ConclusionWe have put the HLA ownership management capabilities to use in the JSAF control protocol.  Their use provides a mechanism to enable features that we couldn’t otherwise use, although we have barely scratched the surface of what these services could be used for.We ran into a number of difficulties in the use of ownership transfer.  Some of these can likely be alleviated through more rigorous exploration of the possible failure cases, and we believe that this is a worthwhile subject of further study.Finally, we continue to believe that the scalability of HLA federations will remain both a major strength of the technology, and a major area of concern and confusion.  The ability to know and believe in the status of the federation as a whole becomes very difficult to implement as the scale of the federation increases.  The addition of ownership transfer to the mix of technologies in use adds another dimension to this difficulty.  We believe that the capabilities enabled by ownership transfer are important, but we also believe that they must be balanced against the complexity that they bring. 8. AcknowledgementsThe authors would like to thank USJFCOM J9 for funding this paper and the research it describes.8. References[1] United States Joint Forces Command: “Urban Resolve”  USJFCOM web site, URL  HYPERLINK "http://www.jfcom.mil/about/experiments/uresolve.htm" http://www.jfcom.mil/about/experiments/uresolve.htm. [2] A. Ceranowicz and M. Torpey: "Adapting to Urban Warfare"  Proceedings of the 2004 Interservice/Industry Training, Simulation and Education Conference, Paper 1554.[3] B.Helfinstine, C. Young, S. Brahmbhatt, and M. LeVan: “The JSAF Control Protocol”  Proceedings of the Fall 2005 Simulation Interoperability Workshop, Paper 05F-SIW-091.[4] P. Gustavson, J. Hancock, C. Stapleton: "The Base Object Model (BOM) Primer: A Distilled Look at a Component Reuse Methodology for Simulation Interoperability", Proceedings of the Spring 2001 Simulation Interoperability Workshop, Paper 01S-SIW-086.[5] A. Ceranowicz, P. Nielson, and F. Koss: "Behavioral Representation in JSAF"  Proceedings of the 9th Conference on Computer Generated Forces and Behavioral Representation, Paper 9TH-CGF-058.[6] R. Lucas and D. Davis: "Joint Experimentation on Scalable Parallel Processors"  Proceedings of the 2003 Interservice/Industry Training, Simulation and Education Conference.[7] J. Calvin, C. Chiang, S. McGarry, S. Rak, D. Van Hook, and M. Salisbury: "Design, Implementation, and Performance of the STOW RTI Prototype (RTI-s)"  Proceedings of the Spring 1997 Simulation Interoperability Workshop, Paper 97S-019.[8]	Defense Modeling and Simulation Office (DMSO), “High Level Architecture Interface Specification” version 1.3, April 2, 1998.[9] N. Kuijpers, J. Lukkien, B. Huijbrechts, and M. Brasse: “Applying Data Distribution Management and Ownership Management Services of the HLA Interface Specification” Proceedings of the Fall 1999 Simulation Interoperability Workshop, Paper 99F-SIW-023.[10] D. Speicher and D. Wilbert: "Simulating Urban Traffic in Support of the Joint Urban Operations Experiment"  Proceedings of the 2004 Interservice/Industry Training, Simulation, and Education Conference, Paper 1888.[11] T. Sterling, D. Becker, D. Savarese, J. Dorband, U. Ranawake, and C. Packer: “Beowulf: A Parallel Workstation for Scientific Computation” Proceedings of the 24th International Conference  on Parallel Processing, 1995.[12] B. Helfinstine, M. Torpey, and G. Wagenbreth: "Experimental Interest Management Architecture for the DCEE"  Proceedings of the 2003 Interservice/Industry Training, Simulation and Education Conference, Paper 1435.[13] A. Ceranowicz, M. Torpey, B. Helfinstine, J. Evans, and J. Hines: "Reflections on Building the Joint Experimental Federation"  Proceedings of the 2002 Interservice/Industry Training, Simulation and Education Conference, Paper 322.[14] M. Torpey, D. Wilbert, B. Helfinstine, and W. Civinskas: “Experiences and Lessons Learned Using RTI-NG in a Large-Scale, Platform-Level Federation”  Proceedings of the Spring 2001 Simulation Interoperability Workshop, Paper 01S-SIW-046.[15] D. Clark, M. Lambert, and L. Zhang: “NETBLT: A High Throughput Transport Protocol”  ACM SIGCOMM Computer Communication Review, v.17 n.5, p. 353-359, Oct/Nov 1987. Author BiographiesBILL HELFINSTINE is a Senior Staff Software Engineer at the Lockheed Martin Simulation, Training, and Support Advanced Simulation Center.  He is a primary JSAF architect, the primary developer of the JSAF C2 protocol and architecture, and the architect and maintainer of the RTI-s subset RTI.  Bill received a BS in Computer Science from the Massachusetts Institute of Technology.MARK TORPEY is a federation developer for the USJFCOM J9 Experiment Engineering Department and the lead developer and integrator of JSAF (Joint Semi-Automated Forces).  He is a Senior Staff Software Engineer at Lockheed Martin Simulation, Training and Support Advanced Simulation. He received his M.S. and B.S in Computer Science at the University of Massachusetts.ANDY CERANOWICZ is the technical lead for federation and Joint Semi-Automated Forces (JSAF) development at JFCOM J9. He led the development of the Millennium Challenge 02 federation as well as the development of JSAF and its predecessors, ModSAF and SIMNET SAF. Andy is a Senior Science Advisor at Alion and holds a Ph.D. in Electrical Engineering from The Ohio State University.