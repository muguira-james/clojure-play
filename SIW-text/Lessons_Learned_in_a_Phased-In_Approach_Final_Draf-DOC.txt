Lessons Learned in a Phased-In Approach to the HLA Compliance and Migration of Legacy SimulationsM. Leigh Lunsford, Ph.D.Ray DrakeColsa Corporation6727 OdysseyHuntsville, AL  35806256-922-1512 x 1286, 256-922-1680 x 1490llunsfor@colsa.com, rdrake@colsa.com Keywords:HLA Compliance, FEDEP, Legacy Simulations, FOM Agility ABSTRACT:  The National Missile Defense (NMD) X-Band Radar Project Management Office (XBR PMO) has two simulations in its XBR Hardware-In-The-Loop (HWIL) Testbed which are part of the baseline NMD Models and Simulations.  The NMD XBR PMO tasked the simulation developers with achieving the mandatory HLA compliance for these simulations.  The developers choose to use a Phased-In Approach to HLA Compliance which advocated achieving a nominal HLA compliance in the early phases of development with optimal HLA functionality occurring in the later phases.  The first phase of the effort was completed in September 1999, with the result of the baseline simulations achieving the nominal HLA compliance in the XBR Federation (XBRFed).  The later phases to achieve optimal HLA functionality are ongoing.  This paper discusses the rationale for the Phased-In Approach, the pros and cons of such an approach, the completion of the first phase including the HLA compliance process, and the on-going efforts of the later phases.   Particular emphasis will be placed on the lessons learned from the endeavor.  It is hoped that these lessons will help other developers minimize their time to HLA compliance while maximizing their HLA capabilities.  This work was completed under the guidance and financial support of Ms. Susan Campbell of the NMD XBR PMO.1. IntroductionThe NMD XBR PMO maintains an extensive suite of modeling and simulation assets including the XBR Hardware-In-The-Loop (HWIL) Testbed.  The PMO formed an HLA Working Group and charged it with the responsibility of drafting a plan for HLA compliance in the testbed.  An HLA transition plan was completed on 3 May 1999 [1].  The plan called for a Phased-In Approach to HLA compliance with the evolution of HLA in the testbed from an initial capability available by September 30 of 1999 to an objective capability in 2000. This paper focuses on the rationale for the Phased-In Approach, the pros and cons of such an approach, the completion of the first phase including the HLA compliance process, and the on-going efforts of the later phases.   Particular emphasis will be placed on the lessons learned from the endeavor.2. Rationale for the Phased-In-Approach2.1 Background We first describe the major simulation components of the HWIL testbed and the legacy functionality of the testbed.  The HWIL testbed consists of four simulations that provide HWIL simulation, software evaluation, integration testing, and statistical analysis for the NMD XBR PMO.  Three of the simulations are radar simulations and one is a common mission provider.  The two simulations on the NMD Baseline are the TCG/HWIL and GBRSim.  We list each simulation in the testbed and its function below:2.1.1 Mission Oriented Analysis Toolset (MOAT)The Mission-Oriented Analysis Toolset is a graphical user interface (GUI) driven suite of tools that provides essential services for the simulations running in the testbed.  These services include simulation launch and coordination, providing a common scenario environment for the simulations and analyzing simulated post-mission data. 2.1.2 Target Complex Generator (TCG) Hardware-In-The-Loop (HWIL)The Target Complex Generator is a complete signal injection simulation that drives the tactical ground based radar prototype (GBR-P) signal and data processors in a real-time closed loop.   The TCG simulates the radar antenna equipment and receiver-exciter by computing the return signals from simulated tactical engagements (objects, trajectories, and environments) for injection into the tactical GBR-P signal processor (SP).  The tactical GBR-P data processor receives and processes this data from the SP.  It then issues new waveform commands to the TCG for the simulated antenna equipment and receiver-exciter, thus closing the loop.2.1.3 Sensor and Signature Simulation (SASS)The Sensor and Signature Simulation program provides capabilities for sensor, target, and trajectory modeling, and RCS generation.2.1.4 Ground-Based Radar Simulation (GBRSim)GBRSim is a high fidelity radar model element of the NMD GBR Hardware-in-the-Loop digital environment that simulates the GBR radar.  GBRSim was designed as a complete software system for modeling radar performance against potential threats.  Its flexibility provides a general-purpose tool for creating missile scenarios, performing coverage studies and analyses, and investigating algorithm tradeoffs.2.1.5 Legacy FunctionalityThe legacy functionality of the testbed centered on MOAT as the mission controller providing common scenario data to the testbed simulations for analysis purposes.  MOAT defined radar characteristics, the surrounding environment, and target information for the common mission scenario.  MOAT would execute the environment models to create the mission data and then launch the various simulations.  The simulations would retrieve mission data from the common scenario database by using an application program interface (API) provided by MOAT.  Figure 2.1 shows the legacy functionality of the HWIL testbed.Figure 2.1. Legacy Functionality of the HWIL Testbed2.2 Rationale for the Phased-In ApproachIn determining an approach to achieving HLA compliance in the testbed, the HLA Working Group had to consider several factors.  Most notably, the simulations in the testbed were non-object oriented legacy simulations.  Thus, in addition to the requirement for HLA compliance, there were the additional requirements that code changes should be minimal, if possible, and that the testbed’s current capabilities not be degraded in the process of achieving compliance.  Note that other than receiving the common mission scenario information from MOAT, there was no interoperability in the testbed. A major goal of using HLA was to create an interface by which other NMD components, such as interceptors and command and control players could interoperate with the simulations in the testbed.  Several candidate federation architectures were considered.  In the transition plan [1] these architectures were weighted against the following criteria in a trade study matrix: 1.  HLA Complaint Architecture2.  Can be completed by the September 1999 deadline.3.  Preserves the existing functionality of the testbed.4.  Utilizes HLA capabilities.5.  Low impact on existing code.6.  Flexible to accommodate various HWIL configurations.7.  Expandable to include other NMD components for full HLA capability.  The above criteria reflected the conservative stance taken by the developers towards the HLA migration process.  The results from the trade study strongly suggested using a Phased-In approach to HLA compliance and optimal functionality.  In order to preserve existing functionality, software infrastructure changes would be made in an incremental fashion. The first phase of the implementation would focus on achieving an HLA compliant architecture that had minimum impact on the existing code.  Later phases would be geared towards exploiting the full potential of HLA including external interfaces to the testbed.  Figure 2.2 below gives a graphical depiction of the Phased-In-Approach.  Phase 1 consisted of reaching a nominal HLA compliance with Phase 2 achieving optimal HLA interoperability between the radar simulations in the testbed and other NMD players. Throughout each phase of the process, the transition plan advocated using the Federation Execution and Development Process [2] with the plan detailing the Define Federation Objectives step for the initial federation developed in Phase 1, the XBRFed.  Figure 2.2. The Phased-In ApproachHLA Compliance and Legacy Migration via the Phased-In-ApproachCompletion of Phase 1 of the NMD XBR HWIL Testbed HLA Transition culminated with a demonstration in late September 1999 of two HLA federations.  The first federation, the XBRFed achieved the required HLA compliance for the TCG/HWIL and GBRSim.  The second federation added an HLA interface to the TCG/HWIL by which real-time updates of object data could be received.  We briefly describe the two federations below. 3.1 The XBRFedThe initial federation developed in Phase 1, the XBRFed, maintained the legacy functionality of the testbed.  The simulations were now passed, via the HLA Run Time Infrastructure (RTI) [3], the information they needed to use the MOAT API to read the common mission database.  In addition, the XBRFed added new functionality to MOAT by having the ability to monitor the other testbed simulations via the RTI's Management Object Model (MOM).  The simulations MOAT, TCG/HWIL, and GBRSim passed HLA compliance testing on September 10, 1999.3.2 The Dynamic Flying Object (DFO) Interface to the TCG/HWILIn addition to developing the XBRFed and achieving HLA compliance for the above simulations, work began during Phase 1 towards achieving optimal HLA functionality in the testbed.  An HLA interface to the TCG/HWIL was created so that the TCG could now receive object data in real time via the RTI.  Before the use of this interface, all data for objects was read from  "prescripted" data files.  Thus although the TCG could read and process this data in real-time, object trajectories and states were not subject to change at runtime.  The new HLA interface allowed for the injection of not only prescripted data but also dynamic data via the RTI and was hence called the Dynamic Flying Object (DFO) HLA interface to the TCG/HWIL.  Because the TCG/HWIL ran in real-time, the DFO HLA interface was a separate executable residing on a difference machine and was called the TCG RTI Proxy.  The developers also created an object-oriented interface for DFOs, the DFO RTI Proxy, which could include objects such as interceptors and/or targets. Figure 3.1 shows the basic design of the a federation containing the TCG RTI Proxy and DFOs.Figure 3.1. Federation with TCG RTI Proxy and Dynamic Flying ObjectsNote that the TCG RTI Proxy has socket connections to the TCG/HWIL. The TCG RTI Proxy receives DFO updates via the HLA RTI.  It then transmits this data to the TCG via the socket connection.   The functionality of reading a prescripted data file was kept.  In Figure 3.1, the prescripted data file is called the “Shad Threat File.”    The TCG, the TCG RTI Proxy, and the tactical radar form a Radar Federate.  Note that the DFO Federates consist of a DFO "model" and a DFO RTI Proxy.  The design of the DFO RTI Proxy is similar to that of the TCG RTI Proxy.  It is generic to the point that an Engagement File Reader or a Dynamic Interceptor Model can be used as the DFO "model".  The engagement file reader can generate a threat DFO object by reading from an engagement file in real time much like the TCG reads its prescripted data file.  An engagement file contains object information such as trajectory state vectors.  The Dynamic Interceptor Model used was a rudimentary real-time model of the NMD Weapon System (WS).  Lastly, note the flow of DFO data from the DFO model to the TCG.  The DFO data from the DFO "model" reaches the DFO Proxy by a socket connection.  The DFO Proxy then communicates the data via the HLA RTI to the TCG RTI Proxy.  The TCG Proxy then transmits the data to the TCG via the socket connection.  Figure 3.1 shows a federation that contains two DFO Federates and the Radar Federate.  This federation was demonstrated along with the XBRFed in September 1999.3.3 Legacy Simulation Issues and ResolutionsSeveral issues arose in the design and implementation of the above federations.  3.3.1 Timing IssuesContrary to our initial expectations, we found it easier to implement HLA in the real-time component of the testbed than in the non-real time components.  Before implementing the XBRFed, a Test Federation was developed in which we used the time management features of the RTI.  In this test federation, we also experimented with using a zero lookahead as described in [4].  We found the zero lookahead worked as advertised and allowed for correlation of event cause and effect.  However, when implementing the DFO HLA Interface to the TCG/HWIL we realized that because the TCG/HWIL must maintain a real time pace, the time management features of the RTI would not be particularly useful.   It was a requirement that the RTI could not pause or slow down the TCG/HWIL   Thus it was assumed in the design that the TCG and any DFO model would be responsible for maintaining their own real time pace and that the RTI time management features would not be used for time control.  The implementation of the DFO HLA interface was a relatively straightforward task because the TCG RTI Proxy was a separate executable from the TCG, no RTI time management features were used, and the TCG RTI Proxy and the TCG communicated via sockets.  However, for federating GBRSim with other NMD components, the RTI time management services will need to be used to guarantee cause and effect relationships and correct ordering of events.  This will require a much more substantial integration of RTI API function calls with the GBRSim code.  Thus we found that integration of HLA in a real-time simulation was, in this particular case, easier than in a non real-time simulation.  Time synchronization has become a critical issue as the migration to full HLA capability proceeds.  This is especially true in the real-time case where one is not using the RTI time management features and depending on each federate to keep its own real-time pace.  In the above design for the DFO HLA interface, it is important to note that time synchronization is not occurring across the RTI.  This is because we took advantage of the local network time protocol for the local area network (LAN).  However, this will need to be changed when federating the TCG/HWIL with other NMD components on different LANs.  In particular, a certain universal (to the federates in the federation) event, such as mission launch, will need to be correlated to a global time.  This global time, which we will implement via the global positioning system (GPS) time, needs to be communicated via the RTI so that all simulations can correlate their internal clocks to the global time for the universal event.  Depending on the length of the scenario, time synchronization messages to other universal events may also need to be sent. 3.3.2 Data IssuesWe believe that propagation of common threat and environmental data in a federation is and will continue to be a major issue for DoD federation developers.  Many of these data files are large and can be processed pre-runtime.  Oftentimes pre-runtime processing does not allow for simulation results to effect the environment or object data at runtime.  For example, when running with a tactical system, the exact time of  interception of a warhead may not be predictable before run-time.  A resulting nuclear detonation would cause immediate changes in environmental and object data.  Modeling these changes dynamically and propagating this information via the HLA RTI remains a challenge especially for real-time simulations.  In designing the DFOFed, a major consideration was that the data read from the common mission database was read before simulation runtime.  Many of the data files consisted of large look-up tables.  After some testing by the Federation Analysis Support Technology (FAST) Lab [5], it was determined that it was not feasible or necessary to pass large pre-run data files via the RTI.  However, object trajectory information was a natural candidate for propagation via the RTI.  This was essentially the motive for creating the DFO HLA interface to the TCG/HWIL.  3.3.3 Using the Management Object Model (MOM)In the XBRFed design, it was decided that the MOAT federate utilize the RTI MOM services to track the activity of remote federates.  The MOM services were used to control functionality within MOAT and provide RTI specific feedback of the XBRFed federation execution. Specifically, the MOAT federate would use the MOM class to determine when a particular federate had joined and resigned the federation, and subscribed and unsubscribed to interactions and object attributes. Although the MOM services worked perfectly for detecting remote federates joining and resigning the federation and subscribing and unsubscribing to interactions, we were unable to get consistent detections for object attribute subscriptions and unsubscriptions.  We used the DMSO provided Federation Verification Tool (FVT) to pinpoint the problem, but it also failed to detect many RTI calls used by the XBRFed federates. In our experience, the RTI was very sensitive to and reliant on “tick” and “sleep” calls when using the MOM service calls. We note that this is probably no longer an issue since the current release of the RTI is multithreaded and no longer requires the RTI to be manually “ticked.”  3.3.4 Graphical User Interface IssuesAs mentioned above, MOAT is a GUI driven application.  One of the challenges we faced in the XBRFed was integrating the RTI functionality with the legacy GUI code.  Classes encapsulating the desired RTI-specific functionality for MOAT were developed in the FAST Lab.  The primary MOAT developer, who was not familiar with the RTI, worked with the FAST Lab personnel to integrate this new functionality into the MOAT GUI.   During the integration phase the issue of  “RTI starvation” arose.  The RTI (1.3 v 6), implementation requires the application to “tick” (yield processor time) to the RTI frequently.  Otherwise, the RTI becomes “starved” for processor time and does not  work properly. Most Graphical User Interfaces take control of the main processing loop to ensure the graphics are updated properly while providing an event loop to allow various tasks to occur.  In order to avoid starving the RTI in the MOAT GUI, a timed event was added to the GUI.  This event triggered a callback routine to “tick” the RTI when an arbitrary time expired. Each time the event occurred, the timer was reset so that a continuous loop was formed. The loop terminated when an exit flag was toggled enabling the MOAT federate to gracefully resign from the federation.  It can be a delicate balancing act to ensure that enough time is yielded to the GUI and the RTI to function properly without wasting precious CPU cycles required by the simulation’s computational algorithms.  We are curious to see how the new multithreaded RTI will behave with the GUI.We note that the MOAT GUI integration also involved interfacing with legacy C code.  The DMSO RTI library uses C++ as the native programming language. The RTI-specific classes developed in the FAST lab were also written in C++. However, the MOAT GUI application was developed in C.  Because if was not feasible to migrate the MOAT legacy code to C++, it was necessary to write C to C++ wrapper routines for all the member routines in the RTI-specific classes that were directly used by the MOAT Federate.4. Lessons Learned in the HLA Compliance ProcessThe most obvious oversight on our part in preparing for the compliance process was that we did not consider exercising all of the RTI capabilities of a federate within a single federation execution. For a federate to achieve compliance, it must demonstrate that it can perform the RTI service calls submitted in its Conformance Statement (CS).  The RTI service calls chosen for testing must be successfully used and detected by the MOM services in the federate test tool used by the HLA certification agents. It is not unusual that some RTI function calls in a federate are triggered by events that may or may not occur in a particular federation execution.  The certification process should be taken into consideration during the initial design stages of a federate.  In particular, either a tool should be identified or a design (software or scenario) requirement stated to facilitate certification testing in a single federation execution. Overall we found the compliance testing to be relatively straightforward.  Because of the way we designed and implemented our HLA interfaces in the testbed simulations, we were able to perform HLA certification testing remotely from the FAST Lab despite the fact that the testbed runs in a classified environment.  We also found the HLA certification agents to be quite cooperative and helpful.  Lastly, we note it is better if the names of the federation object attributes and interactions do not too closely resemble the names used by the MOM class. During the testing process, we were asked to change the name of an interaction class called “Report”.  5. Beyond HLA Compliance - Legacy Migration via the Phased-In-ApproachThe NMD XBR PMO plans to migrate both the TCG/HWIL and GBRSim to full HLA capability.  The TCG/HWIL will join a real-time NMD federation that contains a space-based infrared satellite (SBIRS) simulation housed at the Joint National Test Facility at Schriver AFB in Colorado and a Battle Manager (BMC3) model.  GBRSim will federate with a non-real time BMC3 model.  Below we address some of the pros and cons of using a phased-in approach to HLA migration and compliance.  5.1 Pros and Cons of the Phased-In ApproachThe Phased-In Approach to HLA compliance and migration is essentially a conservative approach to implementing HLA.  Overall we found this approach quite appropriate and adaptable to our needs.  The developers involved in the HLA migration of the testbed had no experience with HLA prior to the assignment of the compliance task by the NMD XBR PMO.  By going through the FEDEP process with the relatively simple XBRFed, the developers were able to concentrate on learning the HLA RTI before making significant changes to the legacy simulation codes.  The developers were also able to set up the infrastructure necessary for the implementation of more sophisticated HLA federations.  A significant feature of the Phased-In approach is the ability and flexibility to leverage off previous work.  This was done in the creation of the DFO HLA interface to the TCG/HWIL.  In fact, it was during the development of the XBRFed that the developers realized the possibility of the DFO HLA interface to the TCG/HWIL.  In designing the DFO HLA Interface, the developers were able to draw from their HLA experience with the XBRFed.  In particular, basic classes were reused and in some cases modified from the XBRFed for the DFO HLA Interface. By not designing set HLA interfaces to the testbed simulations, the developers now have much more flexibility in the federation of the testbed simulations with other federates.  For instance, because we have not yet implemented an HLA interface for messaging from the radar federate to a command and control federate, we have flexibility in the design of the interface.  At the time we began this process, it was also unclear if and how other simulations with which we would want to federate would use HLA.  Now that we have some experience, we see that a side benefit of using HLA is interfacing with other simulation developers.  We believe that for certain types of data, such as tactically defined messages between NMD components, a standard HLA representation will evolve.  Currently this is not the case, which leads us to the issue of Federation Object Model (FOM) agility (see below).  Certainly achieving HLA compliance early in the process is a plus for any program with a mandated HLA compliance deadline.  However, there are some negative aspects to using the Phased-In approach.  Most notably, getting HLA compliant with a nominal HLA capability does not truly represent one’s simulation to the modeling and simulation community.  The Simulation Object Models (SOMs) developed for TCG/HWIL and GBRSim, do not represent the data the simulations can interchange in a distributed environment.  In hindsight, we believe if we had been more aggressive in seeking other NMD players for our initial federation, we could have been less conservative in our approach.  This has become more apparent as we realize that it is not extremely difficult to implement HLA into our particular legacy simulations.  Regardless, we have succeeded with our goals in a timely fashion and are excited about using HLA in the future.5.2  The FOM Agility IssueAs we proceed towards higher HLA capability, we begin to see the need and necessity for Federation Object Model (FOM) agility.  As simulation developers discover the power of using HLA for interoperability, getting the most use of previously written HLA interfaces becomes an issue.  Now that we have a DFO HLA interface to the TCG/HWIL, we would like to keep that functionality as we increase our HLA capabilities.  In order to interoperate with legacy DIS federates we want to add the capability of using the Real-Time Platform Reference Federation Object Model (RPR FOM, SISO-STD-001.1-1999) with the TCG/HWIL.  Since the TCG/HWIL is not a legacy DIS simulation, many of the classes in the RPR FOM seem somewhat awkward.  We are faced with the decision of whether to modify our existing HLA interface or to use an existing FOM agility tool [6], [7].  By taking the conservative Phased-In approach to HLA migration, we believe we have more flexibility in how to approach this new problem.  First, some of the classes we will use (such as the classes for the DFO HLA interface) are developed but others (such as the messaging between the radar and command and control) are not.  Second, we are much more knowledgeable about how to use HLA in our simulations.  With our experience in using HLA, we feel confidant that we can find a solution for how to solve the FOM agility issue for the ease of use of our legacy simulations in distributed environments for the long term. 6.  AcknowledgementsThe authors would like to acknowledge several people who have made contributions to this project during its course.Most significantly, we would like to thank Ms. Susan Campbell of the NMD XBR PMO for her financial support and enthusiasm.  We would also like to thank the Federation Analysis Support Tecchnology (FAST) Lab at the Advance Research Center (ARC) in Huntsville, Alabama.  We do not think this project would have been finished on time without their assistance.Although the total level of effort for the XBRFed and DFO projects were relatively small, many people contributed to the effort.  Among them were Bill Mink, Talmadge Robinson, Dr. Andrew Ventre, Dr. Marcus Pendergrass, Dr. Raj Manadhar, Mark Maberry, Jackie Grier and Todd Worthington of Colsa Corporation; and Kathy Smith, Kenny Shrider, Michael Martin, and Ron Aruda of XonTech Incorporated.  We would also like to thank the many folks who shared their HLA ideas and enthusiasm with us. We hope that we can return the favor to future HLA users.7.  References[1]	High Level Architecture Transition Plan for the Ground Based Radar (GBR) Hardware-In-The-Loop Testbed Simulation Facility, Version 1.0,  National Missile Defense X-Band Radar Project Management Office, Colsa Corporation Document Number COLSA-NMD-GBR-HWIL-PL-99-029,  May 1999.[2]  High Level Architecture Federation Development and Execution Process (FEDEP) Model, Version 1.3, Defense Modeling and Simulation Office, 9 December 1998.[3]  High Level Architecture Run-Time Infrastructure Programmer's Guide, 1.3 Version 5, Defense Modeling and Simulation Office, 16 December 1998.[4]  J. W. Ogren: “Eagle Time Management”, 1997 Fall Simulation Interoperability Workshop, 97F-SIW-073, September 1997.[5]	Space and Missile Defense Battle Lab (SMDBL) Federation Analysis Support Technology (FAST) Lab, Advanced Research Center (ARC), Odyssey Drive, Huntsville, AL.[6]  K. Hunt, J Graham: “OMni: A FOM and Language Independent Interface to the RTI”, Simulation Interoperability Workshop, 99S_SIW_150, March 1999.[7]  C. Martinez: “Supporting the Flexible Federate”, Simulation Interoperability Workshop, 99F_SIW_031, September 1999.Author BiographiesM. LEIGH LUNSFORD, PH.D. is a Scientist at Colsa Corporation in Huntsville, AL.  She works with the NMD XBR HWIL Program and is the Technical Lead for the HLA compliance and migration of the NMD XBR HWIL Testbed.  Recently she was named the Director of the Federation Analysis Support Technology (FAST) Lab at the Advanced Research Center (ARC) in Huntsville, AL.  She holds a Ph.D. in applied mathematics from the University of Alabama in Huntsville.RAY DRAKE is a Software Engineer for Colsa Corporation in Huntsville, AL.  He has over twelve years of experience in system administration, optimization, and programming across various UNIX environments.  He is currently the technical lead for the Federation Analysis Support Technology (FAST) Lab at the Advanced Research Center (ARC) in Huntsville, AL.