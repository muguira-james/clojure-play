A Next-Generation Federation Management Tool:Using the Management Object Model (MOM) and FOM-specific Data to Monitor an HLA FederationRolf H. Nelson MAK Technologies185 Alewife Brook ParkwayCambridge, MA 02138617-876-8085nelson@mak.comKeywords:Management Object Model, HLA Implementation, OMT. ABSTRACT: Recognizing the need to be able to monitor and control federations, the HLA developers created an object model, designed to provide insight into the operations of federations.  This object model, called the Management Object Model (MOM), provides extensive information and control capabilities for the federation, the individual federates, and the RTI.   Under a DMSO-sponsored effort, MÄK Technologies has developed a Federation Management Tool (FMT), based on MOM data, that can be used by any federation to monitor, control, and manage a federation.  The upcoming  release of the FMT features a plug-in interface and an XML reader.  With the plug-in interface, third parties can develop plug-ins for the FMT.  These plug-ins will allow the FMT to understand data that is specific to individual Federation Object Models (FOMs).  This allows the FMT, when enhanced by FOM-specific plug-ins, to display FOM-specific summary screens. Every FOM can have its own sub-classes, class attributes, or parameters that can be used for the control and monitoring of federation-specific data.  Therefore, every FOM can have its own set of the FMT plug-ins. In this paper, MÄK outlines the next-generation plug-in architecture of the upcoming release of the FMT.1. IntroductionThe Federation Object Model (FOM) allows federates to access federation data.  The Federation Management Tool (the FMT) displays federation data to the user.  The Object Model Template (OMT) determines the structure of the FOM data. [1]This paper describes the FMT 3.0, which in addition to it’s current capability to display MOM data and manage aspects of a Federation execution, will subscribe to and display FOM data with the aid of third-party Java plug-ins.  Each plug-in  may be specific to an individual FOM.  A plug-in can customize the FMT, either by creating its own  customized display panel, or by specifying how to render FOM data elements as small table cells within the FMT Object View.  A plug-in for a specific FOM should understand how to interpret and render data associated with that FOM.  To assist plug-ins in this task, the FMT can read OMT files to provide a default way of rendering FOM data.  For each FOM attribute instance, a plug-in is free to accept the FMT's suggestion how to display the data value; to modify that suggestion; or, to entirely discard that suggestion and provide its own method for displaying the data value.2. Status of the FMT As of the paper submission date (June 30, 2000) the version of the FMT described in this paper (the FMT 3.0) has not yet been released.  the FMT 3.0 uses the 1516 specification, which has not yet been finalized.  The architecture of the FMT is a work-in-progress; the exact structure of the API can be expected to change during the months to come before the release of the FMT 3.0.A previous version of the FMT, the FMT 2.0, is available for download from the DMSO web site. [2]  The architecture of this previous version has been described in a previous paper. [3] the FMT 3.0 implements all the functionality of the FMT 2.0 and extends it to allow FOM-specific displays to be created.Up-to-date information about the FMT can be obtained from the FMT web site.  [4]3. The FMT Object Model At startup, the FMT reads an OMT file and creates, in memory, a Java JTree structure.  A JTree is simply a Java tree structure that can be easily rendered on the screen.  The root of this Object Tree is the "objects" node from the OMT file.  This root node, and any other node that refers to a FOM class, will be referred to as a Class Node.  Every Class Node has, as children, one Class Node for every direct subclass.  In addition, every Class Node has an Instance Aggregation Node as a child.  This Object Aggregation Node has, as children, zero or more Object Instance Nodes.  When the FMT discovers an object, the FMT determines the Class Node associated with that object, and creates an Object Instance Node to add as a child of that node's Object Aggregation Node.According to the current (unapproved) OMT draft [1], OMT DIF files are written in XML.  If this remains true in the final OMT standard, the FMT will use an XML reader to read the DIF file into memory as a Java XML tree.  This XML tree may be made available to plug-ins using the standard Java API for XML.Care must be taken to differentiate between the Object Tree and the OMT Tree.  The Object Tree is a javax.swing.JTree that can be directly rendered on the screen.  The OMT Tree is an org.w3c.dom.Document [5] that cannot be directly rendered on the screen.  The Object Tree contains object classes, object instances, and object attributes.  The OMT Tree contains the entire OMT file, but does not contain any object instances.4. The FMT Object View The FMT Object View is a panel consisting of two panes.  The left-hand pane renders the Object Tree.  Whenever an Object Instance Node is selected on the left-hand pane, the right-hand pane displays an Attribute Table for the selected Object Instance Node.  The Attribute Table contains one row for every attribute instance.  Each row contains the attribute instance name, the owner of that attribute instance (if known), and the handles of subscribed federates.  In addition, if a FOM-specific plug-in is provided, an additional column will display the current value of the attribute instance (if known).Note that the FMT cannot discover new object instances, determine object attribute instance ownership, display the list of federates subscribers to an object attribute, or determine the value of an object attribute instance unless either a user or the plug-in has subscribed to a relevant object attribute.5. Table Cell Plug-Ins Given an attribute instance, a Table Cell Plug-in will provide the FMT with a JComponent that can be used as a table cell to render the data.  The plug-in will receive as input parameters the class name, the datatype, and an array of bytes containing the raw attribute value as received by the RTI "Reflect Attribute Values" service.To assist the development of plug-ins, the FMT can read the OMT file and provide the plug-in with a suggested JComponent to render the attribute value.  In some cases, especially for very simple data types, this suggestion may be adequate.  In other cases, the plug-in may want to alter or ignore this suggestion for a number of reasons.  The datatype may be too complex for the FMT to render correctly.  Even if the rendering is technically accurate, the plug-in may wish to customize the display.  For example, the FMT may suggest that a Boolean value be rendered as a 0 or a 1.  The plug-in may override this suggestion and render that particular value as a blue checkbox, if the author of the plug-in feels that would be more appropriate for that particular attribute value.The FMT can also provide the plug-in with a suggested Java Object that encapsulates the attribute value.  For example, if the datatype of an attribute value is boolean, the FMT may suggest a Java Boolean object.5.1 Example Suppose one of the object attributes specific to a certain FOM gives the height of that object above the ground in meters.  The author of a plug-in for that FOM would have many options for how to display that data.  One option would be to have a Table Cell Plug-in query the FMT for a suggestion Object that encapsulates the data for the current instance of the "height" attribute.  the FMT may provide a Float object containing the current data.  The plug-in could determine if the value is greater than 0.  Next the plug-in would provide the FMT with a JLabel for rendering the data; this JLabel would contain the string value of the Float object that the FMT had provided.  The plug-in might set the color of this JLabel to green if the value is greater than 0, and to red if the value is equal to or less than 0.6. Panel Plug-ins A Panel Plug-in provides the FMT with a JPanel that can display data of interest to users of that plug-in, and with a Java Action that will activate  the display of that JPanel.  Panel Plug-ins have access to the Object Tree so that they can determine the current state of raw object data.  An FMT Plug-in can be both a Panel Plug-in and a Table Cell Plug-in.6. 1 Example  Suppose once more that a FOM has a "height" attribute that the author of a plug-in for that FOM is interested in.  One possible plug-in would be a Panel Plug-in providing a sorted list of the identifiers of all the "airplane" object instances, from lowest height to highest height.  Suppose the author of the plug-in wants to flag airplanes that appear to be flying at unlikely heights.  (An airplane flying at 50,000 kilometers may indicate a buggy federate!) A plug-in may render the offending airplanes in red, and additionally may pop up an alert dialog the first time that an airplane goes outside the bounds of reasonableness.  Furthermore, the plug-in may provide components in its panel that allow the user to alter the interval of heights that are considered reasonable.This Panel Plug-in would interact with the FMT in two ways.  First, at startup, the plug-in would ask the FMT to insert its custom "height display" panel into the FMT's list of displays.  Then, periodically, the plug-in would scan the FMT's Object Tree to determine the height attributes of all airplane object instances.7. Subscription Configuration In general, if a Table Cell Plug-in is installed, the FMT will subscribe to every known attribute value.  This has the advantage that if the user wishes to see a particular attribute value, the user can view it immediately (assuming the plug-in supports the display of that data).  An alternative design would have been to subscribe to an attribute only after the user selects the Object Instance Node in the Object View.A disadvantage of the FMT's approach is that the FMT may subscribe to attributes that the user is uninterested in. Fortunately, because the RTI uses multicast, subscription to unwanted attributes will only increase bandwidth utilization if no other federate on the same local area network is also subscribed to the same attributes.  If the author of a plug-in still wishes to economize on bandwidth, that author may override the FMT's behavior so that the FMT no longer subscribes to every single attribute.8. References[1]	IEEE P1516.2, HLA OMT -- High Level Architecture Object Model Template Spec, Draft, January 2000.[2]	"HLA Software Distribution Center". <http://hla.dmso.mil/sdc>[3]	Deborah Fullford, Darren Wetzel: "A Federation Management Tool: Using the Management Object Model (MOM) to Manage, Monitor, and Control an HLA Federation" Simulation Interoperability Workshop, Spring 1999. <http://siso.sc.ist.ucf.edu/ doclib/doclib.cfm?SISO_RID_1000954>[4] "Federation Management Tool".  <http://fmt. mak.com>[5] "Java API for XML Parsing: Package org.w3c.dom". <http://java.sun.com/xml/docs/api/org/w3c/dom/package-summary.html>Author BiographyROLF NELSON is a Software Engineer at MAK Technologies in Cambridge, MA.  He has a Master’s degree from Harvard and a Bachelor's degree from Dartmouth in Computer Science. 