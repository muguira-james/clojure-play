An XML-Based Approach to Knowledge Base Migration for Computer Generated ActorsMartin R. Stytz, Ph.D.Sheila B. Banks, Ph.D.Air Force Research LaboratoryCalculated InsightWright-Patterson AFB, OHOrlando, Fl  32828(937) 255-2811 x4380(407) 353-0566mstytz@worldnet.att.net, mstytz@acm.orgsbanks@calculated-insight.comKeywords:actor migration, XML, computer generated actors, knowledge basesAbstract:  Robust computer-generated actor (CGA) migration for military distributed virtual environments (DVEs) requires transmission of all of the information and data needed to seamlessly reconstitute the CGA at the recipient host.  An important component of the transmission is the contents of the reasoning system.  In this paper we present our proposal for a standardized format for the transmission of the knowledge base component of the reasoning system.  Below, we review related work regarding actor migration, provide a brief introduction to XML, and describe our requirements for the knowledge base transmission representation.  We also present the specification for the knowledge base transmission format that we propose and provide an example of an encoding of a knowledge base into the proposed format.  The paper concludes with a short summary of the current status of the project and our suggestions for future work.1.  IntroductionThe need for complex military distributed virtual environments (DVEs) populated with realistic computer generated actors (CGAs) poses a wide variety of technical challenges for the simulation community.  Because fidelity and realistic behaviors of CGAs are of paramount importance, actor migration is viewed as one means of maintaining realism by minimizing interaction latency and providing expensive computational services on demand.  However, one of the enduring challenges remains this transfer of CGA control from computer host to computer host.  Actor migration is the ability during simulation execution to change the host computer for a CGA without a noticeable disruption to the CGA’s performance, reasoning, or other activities.  To migrate a CGA, information concerning the CGA’s state and reasoning system must be transmitted.  In prior work [15], we discussed a number of the issues associated with migration and described the three basic classes of migration.  The three classes of actor migration are differentiated by the starting and ending type of control for the actor.  The first class is where an actor moves from one host in a computer-controlled situation to another host in a computer-controlled situation (CGA-CGA).  The second case is where an actor moves from a computer-controlled situation to a human-controlled situation (CGA-HCA).  The third case is where an actor moves from a human-controlled situation to a computer-controlled situation (HCA-CGA).  Because of the volume of data to be transmitted and to help organize the data transportation process, we suggest that the data be transported in data structures called suitcases, similar to the use proposed by Bharat [1].  Four types of suitcases are required to support the three types of migration.  The four suitcases are called the actor state, reasoning system, situation awareness, and mission suitcases [15].  The reasoning system suitcase transports the knowledge base, the current state of the CGA decision mechanisms, and the history of past decisions executed by the CGA.  The reasoning system suitcase is an essential component of all three types of CGA migration.  The issue we address in this paper is the transmission of the knowledge base component of the reasoning system suitcase for a CGA for all three types of migration.To insure that the transmission format was implementation independent, we needed a format that was implementation independent.  Therefore, we defined the transmission format using the Extended Markup Language (XML).  We chose XML because it is a data format and type independent language that is expressive enough to represent diverse data, databases, and relationships.  XML provides the flexibility needed to transmit a reasoning system (syntax, data types, vocabulary, and operators) that uses various forms of decision making: including, fuzzy logic, production rules, Bayesian reasoning, frames, and other decision-making technique.  XML is a meta-language that permits the user/designer to define components of the language (syntax, data types, vocabulary, and operators) needed to achieve a required capability within a Document Type Definition (DTD).  We provide a brief introduction to XML in section two.Our objective is the definition of a meta-language that permits the representation of knowledge in a way that is reasoning system and CGA independent and that captures and transmits knowledge between a source and recipient CGA host without error.  We are not proposing the development of a general-purpose, universal knowledge representation.  In the next section, we review actor migration, discuss our rationale for selecting XML, and provide a brief introduction to XML.  Section three presents requirements for the reasoning system state transmission representation.  Section four presents a summary of the transmission representation.  Section five contains an example of the transmission representation using XML.  Section six  contains a short summary of the current status of the project and our suggestions for future work.BackgroundIn this section we present a brief discussion of CGA migration, the rationale for the use of XML, and we also discuss XML.  The discussion consists of a description of the rational for choosing XML and an introduction to its syntax.2.1	CGA MigrationBefore discussing DVE actor migration, it is instructive to examine how migration is performed in distributed agent systems, as discussed by Bharat [1].  From a distributed computational perspective, an agent is a computation in progress that can move from one network node to another network node, perform a computation at the node, and move on to another node if desired.  In the world of distributed agents, a suitcase is data that accompanies the agent from node to node.  The suitcase contains long-term memory for the agent, the tasks to perform (the mission), and parameters for the tasks.  An agent’s arrival briefing is the information that it receives from a recipient node.  The arrival briefing contains information concerning the site’s status, availability of resources, available models, local and long-haul latencies, and other system-specific information.  An agent server provides the local briefing, accepts the agent, and is responsible for executing the code for the agent.When migrating a CGA from computer to computer, information related to actor state, entity type, force ID, location, velocity, acceleration, altitude, orientation, call-sign, dead-reckoning algorithm, camouflage scheme, and formation information must be transmitted.  Other required actor state information includes current damage, aerodynamics model(s), weapons, available fuel and knowledge base.  Additionally, because the CGA must continue execution of its mission and its current operations without interruption at the recipient host, the type of reasoning performed by the CGA and the knowledge available to the CGA are required by the receiving host.  In the circumstance when transfer of control is required from a CGA to a manned system or vice-versa, data relating to terrain model resolution, data displayed in the cockpit, and evaluation of wingman/lead aircraft ability may be necessary.  For example, the position, terrain model, coordinate system, fuel, weapons load, sensor status, infrared signature, radar signature, and mission, must be communicated for all types of migration.  Depending upon the type of transfer performed, additional information concerning the state of the reasoning system, current knowledge, required skill level, required fidelity level, active knowledge bases, and latency requirements may also need to be transmitted immediately or at a later time if required.  Some types of migration require that issues related to rapid establishment of situation awareness by the recipient, anticipation of transfer, and latency and accuracy of the transfer must be addressed.  When the information for the CGA arrives at the recipient host, the recipient must organize the information and use it to initialize and execute the newly arrived CGA.  The CGA should also receive an “arrival briefing” by the recipient host.  In general, when a CGA arrives at the recipient host it is unaware of the other entities at the site, the available resources, and the supported subscriptions.  To support all of the needs of the CGA and the host, an arrival briefing should be given by the CGA to the host and by the host to the CGA. An arrival briefing consists of information concerning resources, other CGAs, host IP address, and any other information that the CGA may request.  The briefing from the CGA to the host should consist of the desired subscriptions, necessary publications, latency, location of log files and other necessary files.  The briefing from the host to the CGA should inform the CGA of the host information stream assignment, local resources and files, local CGAs, and current subscriptions.2.2	Motivation for Use of XMLIn the development of the knowledge base transmission format, the most important decision to be made outside of the format itself was the selection of the technology to be used to express the format.  For our purposes, XML is an ideal choice for a base language for the format.  XML is a general-purpose, meta-markup language for documents containing structured information.  XML also supports the definition of customized markup components [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14].  The customized markup components, called tags, are documented within a Document Type Definition (DTD).  The DTD describes a vocabulary and syntax for use within a document to be transmitted.  In our case, the document is an individual knowledge base.Several factors supported our decision to use XML.  First, XML is a flexible approach to formatting.  The XML capability to define and use custom tags and the minimal requirements for the language gave us great confidence that we would be able to express any format we needed within the boundaries of the language.  Second, XML is widely used and is standardized; therefore, the basic components of the language are stable and well understood.  Third, XML is precise, it has a well defined set of rules for describing a document and for ordering the contents of a document but without specifying semantics.  As a result, XML provides the basis for developing a common data format that is robust in the face of data corruption, self-describing in terms of tag meaning, and extensible to accommodate unforeseen data requirements.  Finally, XML is designed to enable the creation and use of multi-part, distributed documents and to support interchange of data between applications.  These two capabilities support our goal of composability for the DMTITE knowledge bases.  By using XML and by creating an appropriate tag-set and DTD, we will be able to transmit knowledge bases or any subset of a knowledge base.  An XML document can contain text, equations, software interface specifications, and databases.  Additional aspects of XML that support CGA migration are the language’s inherent support for composability (at both the document and document type level), its support for web-based access, and its support for a variety of presentation formats.  XML supports composability because it is is optimized for use on the web and it provides for embedded links between documents.The advantages offered by XML have been exploited by others to achieve data interchange and knowledge base transmission within military DVEs.  For example, XML has been used in a number of military DVEs for the transmission of information and the documentation of different types of data.  Lacy and Tuttle [7] present their proposal for using XML to support data interchange after the simulation environment has completed execution.  They argue that XML is a good choice to support data exchange because it is a neutral, self-describing approach that should yield higher data quality since XML has data validation features built into the language.  In a similar vein, Miller and Filippelli [10] argue that XML is a superior choice as the base language for the specification of HLA Federation Object Models.  Miller and Filippelli report that XML is platform independent, suitable for use on a network, is supported by a large number of commercial vendors, has many tools available to perform data validation, and is able to specify arbitrary data sets.  As an example of the use of XML in the HLA, Garingo and Augins [4] report on their project to use XML to model and transfer data between Modeling and Simulation Resource Repositories.  They report that, based upon their one experiment, XML offers scalability, platform independence, and extensibility.  Taken together, this prior work indicates that XML is a good choice for the reasoning system transmission format base language.2.3	Introduction to XMLAn XML-based transmission representation has three parts, the XML document, the Document Type Definition, and the XML Stylesheet.  The stylesheet only addresses appearance issues, so we will not discuss it further.  An XML-based document has a standard format and a few pre-defined tags.  An XML document consists of one or more elements, marked as shown in Figure 1.<Start>Element text to be transmitted</Start>Figure 1:  XML Document Element FormatAn element consists of two tags, an opening tag ( < > ) and a closing tag ( </ > ), with the name of the tag appearing between the < and the >.  The nesting of the tags within the XML document must correspond to the nesting specified within the DTD.  An XML document always begins with the XML declaration in the following format, <?xml version=”1.0” standalone=”no”?>.  The declaration specifies the version of XML that was used and whether or not an external DTD is required.  This particular specification indicates that an external DTD is needed by a parser to understand the structure of the document; alternately, saying yes means that a DTD is embedded within the XML document.  The second line contains the entry: <?DOCTYPE DMTITE:RuleBased SYSTEM “sample.dtd”>.  This entry defines the root element of the document (DMTITE:RuleBased) and the location of the DTD.  The remainder of the document contains tags defined in the DTD and the corresponding data to be transmitted.The Document Type Definition (DTD) specifies how the elements (contents) of a document must relate to each other.  Each element is defined using a <!ELEMENT> declaration in the following format: <!ELEMENT elementname rule >.  There are a number of keywords that can be used to define the rule, including the keywords ANY and #PCDATA.  The ANY keyword indicates that any character data or keyword can appear within the element.  The keyword #PCDATA indicates that only general character data can appear within the element.  To indicate that multiple elements must appear in a specific sequence, commas are used to separate the instances.  Parentheses are used to group declarations.  Within a declaration, one of three operators can be used to specify the number of occurrences of an element.  The ? operator indicates that the element must appear once or not at all.  The + operator indicates that the element must appear at least once.  The * operator indicates that the element can appear any number of times or not at all.  Within the DTD, attributes can be defined for any element.  An attribute is defined using the <!ATTLIST> declaration, which has the form <!ATTLIST target_element attribute_name attribute_type default>.  Data types include character data (CDATA) and enumerated data, as well as the keywords #REQUIRED, #IMPLIED, and #FIXED.  Using these components as a basis in conjunction with a set of topic-specific keywords, a document type can be defined.  XML has additional capabilities that we have not described here but are discussed in a variety of resources [2,3,4,5,6,7, 8,9,10,11,12,13,14]. 3.	Knowledge Base Transmission Format RequirementsTo guide us in the development of the transmission representation, we formulated a set of requirements that specify the desired functionality for the knowledge base transmission format.  The transmission representation had to be as reasoning system independent as possible; therefore, the format had to support the expression of knowledge used in production systems, fuzzy logic, frames, case-based reasoning, or any combination of these approaches to decision-making.  The transmission representation had to support composability so that re-assembly of the reasoning system could be accomplished using knowledge resources distributed across the Internet.  The transmission representation had to support specification of skill level, reasoning system, and target actor for the CGA.  The transmission representation had to be able to document the actor’s mission(s) supported by the knowledge base.  Finally, the knowledge base transmission representation had to be able to permit the definition of extensions to the transmission representation without corrupting the baseline transmission representation.  We present our current solution to these requirements in the next section.4.	Reasoning System Transmission FormatXML is a document-oriented language; therefore, the complete knowledge base for a CGA is expressed as one or more documents in XML.  Our approach to the design of the format was to procede from the most general information concerning a knowledge base to the most specific.  Therefore, at the beginning of the transmission, we require information that specifies the knowledge base being transmitted and the mission.  The format concludes with the specification of one or more components of the knowledge base.  The general format for a rule-based knowledge base transmission is presented in Figure 2.  In the figure, the ellipsis indicates that rule entries can be repeated, ie. that one document can transmit as many rules as are in the knowledge base.  At the end of the format, the external knowledge base entry permits the format to link in any of the components of the knowledge base that reside on a separate host.  These links are not a direct part of the knowledge base transmission.  An an example, the XML-based rule-based knowledge base transmission format DTD is contained in Figure 3.  The XML tags that we defined are presented in Figure 4.  These tags are used in the rule content portion of the transmission representation.<KNOWLEDGEBASE>< knowledgebase_name>< knowledgebase_ID >< mission >< mission phase >< expertise >< target_actor_type >< decision_making_system >< number_of_rules >< Rule >< rule_number >< type_of_rule >< purpose >< rule_content >…< external_knowledgebase ></KNOWLEDGEBASE>Figure 2:  Outline of the XML-Based Rule-Based Knowledge Base Transmission Format<?XML version=”1.0” encoding=”UTF-8”?><!DOCTYPE KNOWLEDGEBASE SYSTEM [<!ELEMENT KNOWLEDGEBASE (knowledgebase_name?, knowldgebase_ID+, mission+, mission_phase+, expertise+, target_actor_type+, decision_making_system+, number_of_rules, Rule+, external_knowledgebase* )><!ELEMENT	knowledgebase_name	(#PCDATA)><!ELEMENT	knowledgebase_ID	(#PCDATA)><!ELEMENT	mission 	(#PCDATA)><!ELEMENT	mission_phase	(#PCDATA)><!ELEMENT	expertise 	(#PCDATA)><!ELEMENT	target_actor_type 	(#PCDATA)><!ELEMENT	decision_making_system 	(#PCDATA)><!ELEMENT	number_of_rules 	(#PCDATA)><!ELEMENT	Rule 	(rule_number, type_of_rule+, purpose, mission_phase+, rule_content)><!ELEMENT	rule_number	(#PCDATA)><!ELEMENT	type_of_rule	((frame, frame_slot*) | rule_based | fuzzy_logic | case | neural_net | bayesian)><!ELEMENT	frame	(#PCDATA)><!ELEMENT	frame_slot	(#PCDATA)><!ELEMENT	rule_based	(#PCDATA)><!ELEMENT	fuzzy_logic	(#PCDATA)><!ELEMENT	case	(#PCDATA)><!ELEMENT	neural_net	(#PCDATA)><!ELEMENT	bayesian	(#PCDATA)><!ELEMENT	purpose	(communications  |  cooperation_and_coordination | situation_awareness | tactics | maneuver | sensors | terrain | command_and_control | migration | mission | human_behavior_model | temporal_reasoning | phenomenology )><!ELEMENT	communications		(#PCDATA)><!ELEMENT	cooperation_and_coordination	(#PCDATA)><!ELEMENT	situation_awareness	(#PCDATA)><!ELEMENT	tactics	(#PCDATA)><!ELEMENT	maneuver	(#PCDATA)><!ELEMENT	sensors	(#PCDATA)><!ELEMENT	terrain	(#PCDATA)><!ELEMENT	command_and_control	(#PCDATA)><!ELEMENT	migration	(#PCDATA)><!ELEMENT	mission	(#PCDATA)><!ELEMENT	human_behavior_model	(#PCDATA)><!ELEMENT	temporal_reasoning	(#PCDATA)><!ELEMENT	phenomenology	(#PCDATA)><!ELEMENT	mission_phase	(#PCDATA)><!ELEMENT	rule_content	(formula*, variable_text*, constant_text*, variable_int*, variable_float*, constant_int*, constant_float*, fuzzy_set_name*, fuzzy_set_parameters*, fuzzy_set_hedges*, radar_status*, radio_status*, if*, then*, else*, variable_name*, case_value*, hierarchy* )><!ELEMENT	formula	(#PCDATA)><!ELEMENT	variable_text	(#PCDATA)><!ELEMENT	constant_text	(#PCDATA)><!ELEMENT	variable_int	(#PCDATA)><!ELEMENT	variable_float	(#PCDATA)><!ELEMENT	constant_int	(#PCDATA)><!ELEMENT	constant_float	(#PCDATA)><!ELEMENT	fuzzy_set_name	(#PCDATA)><!ELEMENT	fuzzy_set_parameters	(#PCDATA)><!ELEMENT	fuzzy_set_hedges	(#PCDATA)><!ELEMENT	radar_status	(#PCDATA)><!ELEMENT	radio_status	(#PCDATA)><!ELEMENT	if	(#PCDATA)><!ELEMENT	then	(#PCDATA)><!ELEMENT	else	(#PCDATA)><!ELEMENT	variable_name	(#PCDATA)><!ELEMENT	case_value	(#PCDATA)><!ELEMENT	hierarchy	(#PCDATA)><!ELEMENT	external_knowledgebase	(#PCDATA)><!ATTLIST	external_knowledgebase	xlink:form	CDATA	#FIXED	“simple”	href	CDATA	#REQUIRED>         ]>Figure 3:  Reasoning System Transmission Representation Format Document Type Definition.TagMeaningknowledge_base_idsource_authorityLocation of factual basis or rationale for the knowledge base of for individual rules in a knowledge basenumber_of_rulesNumber of rules contained within the knowledge base/document.rule_startSpecifies the beginning of a ruleexpertiseLevel of ability intended for the actorcommenttarget_decision_engineDecision engine(s) that may use the knowledge basedecision_making_systemThe decision-making system(s) (frames, rule-based, fuzzy logic, bayesian nets, etc.) Supported by the rules in this document.  More than one decision making system can be supported by a set of rules, for example frames can be combined with almost any other techniquetarget_actor_typeThe actor(s) that may be able to use the knowledge base:=Assignment operator==Equivalency test>Greater than<Less than>=Greater than or equal to<=Less than or equal toNoneNo entryANYAny value is acceptableknowledge_base_translatorMethod used to read this particular format for the knowledge baseframeFollowing rule supports frames for reasoningframe_slotOne slot of a frame rulerule_basedFollowing rule supports rule based decision makingfuzzy_logicFollowing rule supports fuzzy logic based decision makingcaseStart case-based reasoning rulesneural_netStart neural net specificationbayesianStart bayesian specificationformulaSpecifies the beginning of a formulavariable_textSpecifies that the following string contains a text variable nameconstant_textSpecifies that the following string contains a text constant namevariable_intSpecifies that the following string contains an integer variable namevariable_floatSpecifies that the following string contains a float variable nameconstant_intSpecifies that the following string contains an integer constant nameconstant_floatSpecifies that the following string contains a float constant namefuzzy_set_nameSpecifies the name of the fuzzy setfuzzy_set_parametersSpecifies the parameters used to define the fuzzy logic rulesfuzzy_set_hedgesSpecifies that the following comma delimited list specifies the hedges used by the fuzzy logic rulesradar_statusBoolean description of the status of the actor’s onboard radar systemradio_statusBoolean description of the status of the actor’s onboard radio systemifStart of the if component of a rulethenStart of the then portion of a ruleelseStart of the else portion of a rulevariable_nameDeclaration of a variable namecase_valueDeclaration of a value used within a case rulehierarchyUsed to indicate the start of the specification of a rules or case hierarchy, hierarchies are specified breadth-firstcommunicationsUsed to specify the start of the specification of the communications systems used to develop situation awarenesscooperation_and_coordinationUsed to specify the starting point for the portion of the knowledge base used to perform cooperation or coordination  reasoning (between peers)situation_awarenessSpecifies the start of the portion of the knowledge base used for situation awareness reasoningtacticsSpecifies the start of the portion of the knowledge base used for tactics and combat reasoningmaneuverSpecifies the start of the portion of the knowledge base used for maneuver reasoningsensorsSpecifies the start of the portion of the knowledge base used for sensor control/operation reasoningterrainSpecifies the start of the portion of the knowledge base used for terrain reasoningcommand_and_controlSpecifies the start of the portion of the knowledge base used for command and control reasoning (commander to subordinate and subordinate to commander)migrationSpecifies the start of the portion of the knowledge base used for defining the conditions for forced entity migrationmissionSpecifies the start of the portion of the knowledge base used for reasoning about a CGA specific mission type.human_behavior_modelSpecifies the start of the portion of the knowledge base used for defining the human behavior modeltemporal_reasoningSpecifies the start of the portion of the knowledge base used for defining the temporal reasoning capabilityphenomenologySpecifies the start of the portion of the knowledge base used for defining the phenomenology reasoning capability, especially as it applies to weathermission_phasePhase of the mission, specified in plain textrelated_knowledgebasesStart of listing of urls to related knowledge basesFigure 4:  Reasoning System Transmission XML Tags and Their Meanings.5.	Example Use of the Transmission FormatThe example of the use of the transmission format is based upon the rule-based knowledge base format used within the Distributed Mission Training Integrated Threat Environment (DMTITE).  Rule-based inferencing in DMTITE is based on the if-then format.  The if portion of the rule represents the preconditions that must be satisfied for the rule to be executed.  The then portion of the rule represents the true postconditions, i.e., the conditions that are true after execution of the rule.  A rule in the DMTITE knowledge base format consists of zero, one, or several precondition expressions, zero or more false postcondition expressions, and zero or more true postcondition expressions.  Figure 5 presents the format of the if-then rules used in DMTITE.The DMTITE rule format (Figure 5) has several components.  The first line contains the name of the rule, the number of preconditions, the number of false postconditions, and the number of true postconditions.  The second line may contain a comment, otherwise it contains the expressions that define the preconditions.  This line is followed by the expressions that define the false postconditions (preceded by an optional comment), and finally the expressions that define the true postconditions (again preceded by an optional comment).  This pattern of rule-name, preconditions, false postconditions, and true postconditions can be repeated for each rule in the knowledge base.  For our example, we have only one rule within the knowledge base.  The example rule, shown in Figure 6, deals with the position of the landing gear for an aircraft as it makes a landing.  The rule insures that the actor is in flight, has operational landing gear and is in the process of landing before the landing gear is lowered.  Figure 7 shows the sample rule encoded in our proposed transmission format.< representation_name > < number_of_preconditions > < number_of_false_postconditions > < number_of_true_postconditions >< rule purpose >/* comment */< precondition_expression >/* comment */< false_postcondition_expression >/* comment */< true_postcondition_expression >Figure 5:  Example Rule-Based Knowledge Base Format< lower_landing-gear > < 5 > < 1 > < 4 >< Provide the knowledge necessary to allow an aircraft to lower its landing gear at the proper time >/* preconditions */< in-flight true >< landing_gear_down false >< landing_gear_operational true >< execute_landing true >< within_outer_marker true >/* false postcondition expressions */< within_outer_marker >/* true postconditions expressions */< inflight >< landing_gear_down >< landing_gear_operational >< execute_landing >Figure 6:  Example Knowledge Base Content<?xml version=”1.0” standalone=”no”?><?DOCTYPE DMTITE:RuleBased SYSTEM “sample.dtd”><knowledgebase_name>Sample</ knowledgebase_name>< knowledgebase_ID >Sample.1</ knowledgebase_ID >< mission >ANY</ mission >< mission phase >Landing</ mission phase >< expertise >None</ expertise >< target_actor_type >Aircraft< /target_actor_type ><decision_making_system>rule_based </decision_making_system >< number_of_rules >1< /number_of_rules >< Rule >< rule_number >1</rule_number >< type_of_rule >rule_based< /type_of_rule >< purpose >Provide the knowledge necessary to allow an aircraft to lower its landing gear at the proper time< /purpose >< rule_content >< lower_landing-gear > < 5 > < 1 > < 4 >/* preconditions */< in-flight true >< landing_gear_down false >< landing_gear_operational true >< execute_landing true >< within_outer_marker true >/* false postcondition expressions */< within_outer_marker >/* true postconditions expressions */< inflight >< landing_gear_down >< landing_gear_operational >< execute_landing >< /rule_content ></Rule>Figure 7:  Example Knowledge Base in the XML-Based Knowledge Base Transmission Format6.	Conclusions and Future WorkIn this paper we presented our proposal for a CGA knowledge base transmission format.  However, our work on developing the format is not complete.  Our next task is to evaluate the transmission format using a variety of knowledge base formats, reasoning systems, and CGA applications.  In addition, the specification of the reasoning system suitcase is not complete until we have addressed the issue of the transmission of the reasoning system’s decision history.  While we do not have a solution at hand to this problem, we believe that the solution will require an intelligent agent to determine the parts of the decision history to be transmitted.  Finally, we hope that the transmission format that we propose can serve as the basis for a transmission format standard defined in the HLA documentation.  Therefore, we encourage comments on this proposed format and hope that others will implement, test, and extend the format as well.  Another area to be investigated is the stylesheet(s) used to display the knowledge bases to humans.  While XML can provide a simple HTML-like display of a knowledge base’s contents, we believe that the process of understanding, verifying, and using a knowledge base can be improved by exploiting the customizable display capability that XML Stylesheets provide.  We plan to address stylesheet and display issues in future work.ReferencesBharat, K. & Cardelli, L. (1995) “Migratory Applications,” Proceedings of the ACM Symposium on User Interface Software and Technology, Pittsburgh, PA, Nov. 14-17, pp. 133-142.Copenkus, A. & Hoodbhoy, F. (1999)  Applied XML:  A Toolkit for Programmers. John Wiley and Sons: New York, NY.DuCharme, B. (1998)  XML:  The Annotated Specification. Prentice Hall: New York, NY.Garingo, G. & Augins, J.S. (1999) “XML to Facilitate Interoperability Between Repositories,” The Spring Simulation Interoperability Workshop, Orlando, FL, 14-19 March, pp. 1106-1111.Harold, E.R. (1999) XML Bible.  IDG Books Worldwide: Foster City, CA.Harold, E.R. (1999) XML: Extensible Markup Language. IDG Books Worldwide: Foster City, CA.Lacy, L.W. & Tuttle, C. (1998) “Interchanging Simulation Data Using XML,” The 1998 Fall Simulation Interoperability Workshop, Orlando, FL., 13-18 Sep., pp.1110-1119.Leventhal, M.; Lewis, D.; & Fuchs, A. (1998)  Designing XML Internet Applications.  Prentice Hall: New York, NY.McGrath, S. (1998) XML By Example:  Building E-Commerce Applications. Prentice Hall: New York, NY.Miller, G.J. & Filipelli, L.J. (1999) “An XML Representation of HLA Object Models,” The Spring Simulation Interoperability Workshop, Orlando, FL, 14-19 March, pp. 565-570.Megginson, D. (1998)  Structuring XML Documents. Prentice Hall: New York, NY.Simpson, J.E. Just XML. (1998) Prentice Hall: New York, NY.St. Laurent, S.; St. Laurent, S.; & St. Laurent, S. (1999)  XML:  A Primer. 2nd edition.  IDG Books Worldwide: Foster City, CA.St. Laurent, S.; St. Laurent, S.; & Biggar, R.J. (1999)  Inside XML DTDs: Scientific and Technical.  McGraw Hill: New York, NY.Stytz, M.R. & Banks, S.B. (1999) “Robust Computer Generated Actor Migration,” Proceedings of the 1999 Fall Simulation Interoperability Workshop, Orlando, Florida, 15-20 September, pp. 695-703.Author BiographiesMartin R. Stytz is a Chief Principal Research Scientist and Engineer in the Air Force Research Laboratory and is a retired Lieutenant Colonel in the U.S. Air Force.  He received a Bachelor of Science degree from the U.S. Air Force Academy in 1975, a Master of Arts degree from Central Missouri State University in 1979, a Master of Science degree from the University of Michigan in 1983.  Stytz received his Ph.D. in Computer Science and Engineering from the University of Michigan in 1989.  He is a member of the ACM, SIGGRAPH, SIGCHI, the IEEE, the IEEE Computer Society, AAAI, and the Society for Computer Simulation.  His research interests include virtual environments, distributed interactive simulation, modeling and simulation, user-interface design, software architecture, and computer-generated forces. Sheila B. Banks is the president of Calculated Insight.  Dr. Banks received her Bachelor of Science, Magna Cum Laude from University of Miami, Coral Gables, FL in 1984 and a Bachelor of Science in Electrical Engineering, Summa Cum Laude, from North Carolina State University, Raleigh, NC in 1986.  Also from North Carolina State University, Raleigh, NC, she received a Master of Science in Electrical and Computer Engineering in 1987 and her Doctor of Philosophy in Computer Engineering (Artificial Intelligence) from Clemson University, Clemson, SC in 1995.  Her research interests include artificial intelligence, intelligent computer generated forces, associate and collaborative systems, distributed virtual environments, intelligent human computer interaction, and man-machine interfaces.PAGE  