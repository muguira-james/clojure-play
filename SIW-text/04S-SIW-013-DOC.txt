TOWARD Computer Generated Actors As CYBERSPACE OPPOSING FORCES USED in Network Centric Warfare SIMULATIONSMartin R. Stytz, Ph.D.Sheila B. Banks, Ph.D.Calculated InsightWright-Patterson AFB, OH  45431Orlando, FL  32828 HYPERLINK "mailto:mstytz@att.net" mstytz@att.net HYPERLINK mailto:sbanks@calculated-insight.com sbanks@calculated-insight.comKeywordsComputer generated actors, evaluation, validation, Unified Modeling Language, computer generated actor performance, cyberspace opposing forces  Summary:  The US military is in the midst of a sea-change in its philosophy, approach, and technologies used for warfare.  The old days of massed formations, accurate but large weapons, and movement is being replaced by small formations (down to one person), small but extremely accurate weapons, and high speed movement all augmented by rapid, automated movement of information between and among all military components from the battlefield back to the logistics depot.  For this future vision of warfare to be achieved and be effective there are a number of issues that must be addressed and solved in the real-world and in the world of simulation.  In this paper, we will examine one of the issues that the impact of this switch in warfare paradigms will have on the world of simulation and focus on computer-generated actors (CGAs) and the new demands that will be placed upon them, especially in the area of information warfare and cyberspace opposing forces.  The solutions to the new demands for CGAs will build upon much work performed before.  These solutions must draw upon experience and results in the fields of human behavior modeling, modeling of adversarial decision making, adversary modeling, and several emerging technologies in order to correctly model the opposing information warfare forces.  Given the importance of information flow to future combat operations, we believe that CGAs used to simulate attacks upon friendly information resources will be important, therefore in this paper, we discuss the development of cyberspace opposing forces (CW OPFOR).This paper is organized as follows.  The first section contains an introduction.  The second section contains a discussion of the foundation technologies that enable the CW OPFOR.  Section Three contains a description of the methodology and approach we propose for development of the CW OPFOR.  Section Four contains a description of the knowledge base format that we propose for the CW OPFOR.  Section Five contains a summary and suggested research directions for this new type of CGA.1.	Introduction “Train the way you will fight” is the mantra for United States’ military training and this philosophy has served the warfighter well as evidenced by the many successful operations executed around the world over the last decade.  However, the US military is in the midst of a change in its philosophy, approach, and technologies used for warfare as we move toward small formations, small but extremely accurate weapons, and high speed movement all augmented by rapid, automated movement of information between and among all military components from the battlefield back to the logistics depot.  This new form of warfare, in which a great premium is placed upon timely, accurate information, is called network centric warfare (NCW).  For this future vision of warfare to be achieved and be effective there are a number of issues that must be addressed and solved in the real-world and in the world of simulation.  In the NCW battlespace of the future, the coming capabilities in networks and computing portend a time when warfighters will become very dependent upon the unprecedented level of detailed information available concerning the situation within a battlespace.  This reliance will induce foes to attempt to disrupt the information flows in an attempt to gain an advantage or to disrupt friendly operations.  The interplay between friendly efforts to maintain their information operations and enemy attempts to disrupt them will inevitably result in conflict in the cyberworld, or cyberbattlespace.  In this paper, we will examine one of the issues that the impact of this switch in warfare paradigms will have on the world of simulation and focus on computer-generated actors (CGAs).  We will concentrate on the new demands that will be placed upon CGAs in the NCW battlespace, especially in the area of information warfare and cyberbattlespace opposing forces.  Given the importance of information flow to future combat operations, we believe that CGAs used to simulate attacks upon friendly information resources will be necessary for all aspects of simulation, therefore in this paper, we will concentrate on the development of cyberspace opposing forces.Recent technological advances, including improvements in computer-generated forces, information assurance and software protection technologies indicate that a much more realistic information warfare battlespace can be provided in the simulation world, hence the need for opposing force cyber warriors. The opposing force cyber warriors will be an autonomous information warfare (IW) red team capable of conducting information warfare exploits against friendly forces and testing their information warfare readiness.  In this paper, we discuss the enabling technological advances that permit the assembly of an autonomous red team and how they can be combined to develop a semi-autonomous force (SAF) information warfare red team that can generate and conduct threat information warfare activities without human supervision.  We call this this type of SAF a Cyberspace Opposing Force (CW OPFOR).A further benefit of the CW OPFOR will be that it can provide the capability for standardized evaluation of cyberspace defenses and allow command echelons to experience and prepare for information warfare exploits in a variety of forms and allow commanders to train the way they will fight in the NCW cyberbattlespace of the future.  In this paper we will also present a methodology for the development of the CW OPFOR. Given the state of technology, we believe that a symbiosis between man and CW OPFOR is required and that there must be a corresponding dividing line between the human’s responsibilities and the cyber red team’s functionality.  This topic is the subject of further research and will be reported on as results warrant.This new combat arena, the cyberbattlespace, has many unique characteristics that call for new training technologies to prepare warfighters to manage them.  Some of these characteristics are the extreme speed with which events occur, the capability for rapid change of attack vectors and tactics, the high degree of technical expertise needed at all levels of command in order to comprehend the situation, the lack of metrics with which to measure the effectiveness of defense techniques, the difficulty humans face when developing situation awareness and mental models of the cyberbattlespace, the difficulty encountered in achieving a level of prediction for cyberbattlespace activity, and the extreme susceptibility of the combatants and civilians to intended and unintended effects of the results of operations within the cyberspace battlespace.  As a result of these characteristics, training in the cyberbattlespace is more difficult to perform than for other forms of commander training, testing of defenses is an important need, and access to real-world facilities is limited due to the potential for grievous and even irreversible harm.  To address these needs in the face of the increasing importance of the cyberbattlespace arena, we are developing a powerful and comprehensive cyberbattlespace training and testing system that is robust and adaptive to changes in their component technologies.  The key to achieving a cyberbattlespace training and testing capability is the development of high-fidelity cyberbattlespace opponents and computer-controlled (generated) actors3,15,16 that can function as a semi-autonomous (SAF) cyber red team.  The SAF cyber red team, also called the CW OPFOR, would have a number of uses including the following:  evaluation of defenses, execution of information warfare exploits against friendly forces, implementation of opposing forces attack strategies for analysis, development of new attack strategies and vectors based upon their experiences, and testing of cyberbatlespace defenses.In light of the discussion above and of the current state of computer security technologies, before a useful CW OPFOR can be fielded for defense testing or training, a broad-ranging research and development effort is needed.  Some of the research needs that we have identified to date are research targeted at advancing cyberbattle understanding, advancing human behavior modeling, advancing intent inferencing, and advancing information display, data mining, reasoning, and knowledge base expansion.  Other research needs are also apparent and will be discussed in the final section of this paper.While it is clear that US military command and control forces will benefit from realistic information warfare training in the information warfare battlespace, the question of the characteristics and capabilities of the CW OPFOR must be addressed.  To date, our analysis has identified the following requirements for the CW OPFOR.  Firstly, the CW OPFOR must be able to employ any form of reasoning and have a capability for adaptive learning in order to provide realistic and unpredictable exploits, attacks, and tests against friendly command and control systems.  Secondly, the CW OPFOR must be able to autonomously analyze the results of its actions and modify its behavior in response to the results of the analysis.  This capability will maximize its ability to provide realistic tests of friendly command and control defenses at minimum cost and at maximum speed.   However, we cannot expect the cyber red team to learn a wide variety of productive attacks on its own nor should we expect it to be able to provide specific types of exploits on demand in order to provide a specific training experience or command and control defenses test.  Therefore, a third requirement is that the CW OPFOR must be able to be readily programmed with new plans and forms of attack as well as specific actions that form part of an attack.  Fourthly, the CW OPFOR will also require human assistance and management.  All portions of an exploit must be visible to the human monitor (or team manager) and be able to be changed so that human monitors of cyber red team operations can alter the cyber red team’s activities in order to provide the creativity, deep insight, and intuition that can not currently be provided in computer-generated forces.  Fifth, to support its own inherent analytic capabilities and those of its human operators, there must be automatic logging of attacks, actions, and responses and there must be a methodology for automatic scoring/assessment of attacks and exploits.  Sixth, to insure precise and accurate communication between the CW OPFOR and its operators, as well as to insure that the operators can precisely control the CW OPFOR, an ontology is needed in order to provide a common terminology and frame of reference.  Finally, the CW OPFOR must be able to conduct multiple simultaneous, independent, coordinated attacks against friendly forces within the cyberbattlespace.  This requirement enables the use of advanced, new types of attacks that can stress friendly defenses in a manner that has not been experienced in the real world and can help prepare defenses and operators for unexpected types of exploits within the cyberbattlespace.In this paper, we discuss development of the CW OPFOR capability, the technologies that now enable the development of a CW OPFOR, and an approach to its knowledge base development.  This paper is organized as follows.  The next section contains an introduction to the foundation technologies that enable development of the CW OPFOR.  Section Three contains a description of the methodology and approach we propose for development of the CW OPFOR.  Section Four contains our proposed knowledge base format for the information needed by the CW OPFOR.  Section Five contains a summary and suggested research directions.BackgroundIn this section, we review breadth of capabilities needed by the CW OPFOR. We will also discuss the the key technologies that are emerging and that enable the development of computer generated actors (CGAs) that can function as a powerful, effective, high fidelity information warfare opposing forces.An effective CW OPFOR will require capabilities that enable it to conduct exploits against network defenses, operating system defenses, and software application defenses.  Allow us to examine why this must be so.  Traditionally, information assurance and the security of a computation and its data have been provided by the network defensive systems and in the authentication mechanisms in the host operating system 8, 11,12,13,14,17,18,19,20.  Despite intense and ongoing efforts to strengthen these two types of defensive systems they cannot assure the security of software and data on the host computer and, as a result, users placed their application software and data at risk whenever they used a computer.  Recently, the concept of information assurance has broadened from this traditional dyad of defensive systems to a triad, a triad that includes defensive technologies embedded in the application software.  The technological components of application software defense, also called software protection, are a mix of techniques whose individual and composite objective is to deny the pirate or intruder the capability to misuse, reverse engineer, tamper with, or steal application software or data.  Software protection is the last ring of defense for application software and data, with the first two defensive rings being the protection technologies residing in the network resources and the other being the protection technologies residing in the operating system.  As a result of these cyber defense developments, the CW OPFOR must be able to conduct operations against any of these defenses, singly or in combination.In addition to significant improvements in defense technologies, there has been a corresponding increase in the knowledge and understanding used by an attacker when executing an attack exploit against software or computer network 2,4,5,6,9,10.  This knowledge includes taxonomies of attack exploits, taxonomies of defensive techniques and technologies, attack vectors and avenues, and improved understanding of how to structure defenses.  Additional knowledge that has been acquired includes vulnerability categories, attack categories, network intrusion detection taxonomies, vulnerabilities that arise from architecture and design choices as well as implementation choices and strategies, development of some metrics and measures for measuring security capabilities, and development of techniques for vulnerability analysis.  Improvements in our information warfare understanding and knowledge now give us the capability to autonomously determine network systems vulnerability, to construct network defenses in depth, and to assemble defenses that are adaptive and capable of providing intrusion detection.  We also have methodologies for developing and analyzing operating system defenses and methodologies for developing and analyzing network system defenses.  There now exist a large and ever increasing library of exploits that can provide insight into attack strategies and tactics as well as insight into hacker methodologies and approaches employed to hijack computer systems, networks, and software applications. All of this knowledge is required by the CW OPFOR in order for it to successfully conduct its operations.  Clearly, the required knowledge acquisition is a massive knowledge organization effort.  Two key technologies that can aid in the knowledge organization effort are the  xtensible Markup Language XML 2,4,6,7,8,9 and the Unified Modeling Language UML 1-4.The  xtensible Markup Language (XML) is a meta-language that supports the customized definition of the components of the language (syntax, data types, vocabulary, and operators) needed to support the interchange of data for a particular application environment.  Each application-specific definition is contained within a Document Type Definition (DTD).  The DTD describes a vocabulary and syntax for the data to be transmitted.  XML provides a basis for the development of data transmission formats that are transmitter and recipient independent and that are completely self-describing and self-contained.  In our opinion, XML permits a deeper level of specification by providing data definitions and formats that are flexible, independent, and comprehensive.  In our view, XML is the key to forming the extensible, adaptable, and comprehensive knowledge bases needed by the CW OPFOR.Several factors supported our decision to use XML.  First, XML is a flexible approach to formatting.  The XML capability to define and use custom tags and the minimal requirements for the language gave us great confidence that we would be able to express any knowledge we needed within the boundaries of the language.  Second, XML is widely used and is standardized; therefore, the basic components of the language are stable and well understood.  Third, XML is precise, it has a well defined set of rules for describing a document and for ordering the contents of a document but without specifying semantics.  As a result, XML provides the basis for developing a common data format that is robust in the face of data corruption, self-describing in terms of tag meaning, and extensible to accommodate unforeseen data requirements.  Finally, XML is designed to enable the creation and use of multi-part, distributed documents and to support interchange of data and examination of data by human and machine.The advantages offered by XML have been exploited by others to develop knowledge bases for use by CGAs within military DVEs.  This work includes the use of XML for the transmission of information and the documentation of different types of data, as reported by Lacy and Tuttle XML 3, Miller and Filippelli XML 5, and Garingo and Augins XML 1.  Taken together, this prior work indicates that XML is a good choice for the knowledge base representation language.The Unified Modeling Language (UML)7 plays a key role in our approach.  UML is a standardized graphical language that can be used to develop and compose blueprints (architecture specifications) of software systems (see UML references).  The UML documents the conceptual and physical representations of a system and permits modeling and visualization of a system from five of viewpoints.  These five points of view are the design view, the use case view, the process view, the implementation view, and the deployment view.  The use case view describes the behavior of the system from the point of view of the users and entities.  The use case view is described by employing use case diagrams.  The design view is comprised of the classes, interfaces, and collaborations in a system.  The design view shows how the functional requirements of a system are met.  The design view is presented using interaction, statechart, and activity diagrams.  The process view uses the same diagrams as the design view to describe the threads and processes that comprise the system in execution.  The implementation view of a system defines the components and files that are used to assemble the federation.  The deployment view presents the system’s software and hardware topology.  The software components within a system are typically documented within component and deployment diagrams.  The use case and design views are particularly important to our methodology.Lastly, but of crucial importance, are the improvements in our abilities to construct computer-controlled systems that can faithfully emulate human performance and behaviors with an ever increasing degree of fidelity (as discussed in the series of BRIMS conferences (formerly called the Conferences on Computer-Generated Forces and Behavior Representation), as well as IEEE Intelligent Systems and AAAI Magazine.)  As the research reported in these and other human behavior journals and conferences attests, our ability to gather, categorize, and employ knowledge about a military domain and to construct computer-controlled entities that are similar to and difficult to distinguish from humans is improving.  This ever-improving human behavior and intent modeling capability provides an important technological component of the CW OPFOR.3.	CW OPFOR CGA Development MethodologyOur approach to CW OPFOR CGA development is based on two main strategies; 1) successive, iterative refinement and 2) development of capabilities in accordance with their priorities.  The software and knowledge base designs for the CW OPFOR must support these strategies.  These two strategies are complemented and supported with the use of UML use cases to identify usage of the CW OPFOR CGAs, expected CW OPFOR performance for each circumstance, sequences of uses, the required inputs for each use case, and the minimum percentage of correct responses that the CGA must achieve for each use case’s inputs.As we noted earlier, a key component in the development of the CW OPFOR is documentation of the knowledge needed.  Because of its importance to the overall success of the CW OPFOR, in the remainder of this section we will discuss the methodology employed to develop the CW OPFOR with particular emphasis placed on the steps taken to discover, capture, and represent the knowledge needed by the CW OPFOR.The overall process that we have developed for knowledge documentation is specified in Figure 1.  As is normal, the first step in the process is the identification of specific requirements for the CW OPFOR when executing a specific type of attack and capturing this information as definitions of attack cases.  The second phase contains two steps that occur in parallel and reinforce each other.  One step is the development of the ontology and XML data descriptions (DTDs) indicated by the requirements.  The other step is the development of threat cases based upon the attack case definition.  With the threat cases, ontology, and XML DTDs in-hand and in light of the attack case definition, the threat case diagrams for the CW OPFOR are developed.  The fourth step is the development of the scenarios, tests, and experiments needed to evaluate the CW OPFOR performance in the specific attack (using interaction diagrams), development of the needed CW OPFOR components (knowledge bases, human behavior models, intent inferencing models, software, class diagrams, component diagrams, etc.), and development of the minimum acceptable performance that the CW OPFOR must exhibit in the scenarios, tests, and experiments.  The fifth step is the integration of the components for the CW OPFOR.  The sixth step is the execution of the experiments defined to test the cyber red team.  The seventh step is analysis of the experiments and refinement of the ontology, DTDs, threat cases, and other components of the CW OPFOR and feedback into earlier development steps.  In the remainder of this paper, we will concentrate on the knowledge representation aspect of this methodology as the knowledge base is the key to the successful operation of the CW OPFOR.Figure 1:  Methodology Overview4.	Knowledge Base DevelopmentGiven the CW OPFOR development methodology outlined in the preceeding section, a major need for the successful development of CW OPFOR CGAs is the definition of a XML-based meta-language that permits the representation of knowledge in a way that is reasoning system and CGA independent and that captures the knowledge needed to execute an exploit in cyberspace.  Note that we are not proposing the development of a general-purpose, universal knowledge representation.  XML is a document-oriented language; therefore, the complete knowledge base needed by the CW OPFOR for a particular exploit is expressed as one or more documents in XML.  Our approach to the design of the format was to proceed from the most general information to the most specific. The general format for an example CW OPFOR knowledge base DTD is presented in Figure 2.  In the figure, the ellipsis indicates that rule entries can be repeated.  At the end of the format, the external knowledge base entry permits the format to link in any of the components of the knowledge base that reside in a separate document. An example of an XML-based rule-based knowledge base format DTD is contained in Figure 3.  Some of the XML tags that we have defined to date are presented in Figure 4.<KNOWLEDGEBASE>< attack_case_name>< attack_case_ID >< objective >< strategy >< expertise >< exploited vulnerabilities >< target_software_type >< target_operating_system_type >< target_network_type >< decision_making_system >< communications >< cooperation_and_coordination >< human_behavior_model >< number_of_rules >< Rule >< rule_number >< type_of_rule >< purpose >< rule_content >…< external_knowledgebase ></KNOWLEDGEBASE>Figure 2:  Outline of the XML-Based CW OPFOR Knowledge Base Knowledge Base DTD.<?XML version=”1.0” encoding=”UTF-8”?><!DOCTYPE KNOWLEDGEBASE SYSTEM [<!ELEMENT KNOWLEDGEBASE (attack_case_name?, attack_case_ID+, objective+, strategy+, expertise+, exploited_vulnerabilities+, target_software_type+, target_operating_system_type+, target_network_type+, decision_making_system+, communications+. cooperation_and_coordination+, human_behavior_model, number_of_rules, Rule+, external_knowledgebase* )><!ELEMENT	attack_case_name	(#PCDATA)><!ELEMENT	attack_case_ID	(#PCDATA)><!ELEMENT	objective 	(#PCDATA)><!ELEMENT	strategy	(#PCDATA)><!ELEMENT	expertise 	(#PCDATA)><!ELEMENT	exploited_vulnerabilities 	(#PCDATA)><!ELEMENT	target_software_type 	(#PCDATA)><!ELEMENT	target_operating_system_type	(#PCDATA)><!ELEMENT	target_network_type	(#PCDATA)><!ELEMENT	decision_making_system 	(#PCDATA)><!ELEMENT	communications	(#PCDATA)><!ELEMENT	cooperation_and_coordination	(#PCDATA)><!ELEMENT	human_behavior_model	(#PCDATA)><!ELEMENT	number_of_rules 	(#PCDATA)><!ELEMENT	Rule	(rule_number, type+, content)><!ELEMENT	rule_number	(#PCDATA)><!ELEMENT	type	((frame, frame_slot*) | rule_based | fuzzy_logic | case | neural_net | bayesian)><!ELEMENT	frame	(#PCDATA)><!ELEMENT	frame_slot	(#PCDATA)><!ELEMENT	rule_based	(#PCDATA)><!ELEMENT	fuzzy_logic	(#PCDATA)><!ELEMENT	case	(#PCDATA)><!ELEMENT	neural_net	(#PCDATA)><!ELEMENT	bayesian	(#PCDATA)><!ELEMENT	content	(formula*, variable_text*, constant_text*, variable_int*, variable_float*, constant_int*, constant_float*, fuzzy_set_name*, fuzzy_set_parameters*, fuzzy_set_hedges*, radar_status*, radio_status*, if*, then*, else*, variable_name*, case_value*, hierarchy* )><!ELEMENT	formula	(#PCDATA)><!ELEMENT	variable_text	(#PCDATA)><!ELEMENT	constant_text	(#PCDATA)><!ELEMENT	variable_int	(#PCDATA)><!ELEMENT	variable_float	(#PCDATA)><!ELEMENT	constant_int	(#PCDATA)><!ELEMENT	constant_float	(#PCDATA)><!ELEMENT	fuzzy_set_name	(#PCDATA)><!ELEMENT	fuzzy_set_parameters	(#PCDATA)><!ELEMENT	fuzzy_set_hedges	(#PCDATA)><!ELEMENT	radar_status	(#PCDATA)><!ELEMENT	radio_status	(#PCDATA)><!ELEMENT	if	(#PCDATA)><!ELEMENT	then	(#PCDATA)><!ELEMENT	else	(#PCDATA)><!ELEMENT	variable_name	(#PCDATA)><!ELEMENT	case_value	(#PCDATA)><!ELEMENT	hierarchy	(#PCDATA)><!ELEMENT	external_knowledgebase	(#PCDATA)><!ATTLIST	external_knowledgebase	xlink:form	CDATA	#FIXED	“simple”	href	CDATA	#REQUIRED           >         ]>Figure 3:  Sample CW OPFOR CGA Document Type Definition.TagMeaningattack_case_nameSpecification of the name of the attackattack_base_idsource_authorityLocation of factual basis or rationale for the knowledge base of for individual rules in a knowledge basenumber_of_rulesNumber of rules contained within the knowledge base/document.objectiveThe purpose of the exploit, what the exploit is intended to achieve, can be one or more of the following: misuse, reverse engineer, tamper with, or steal application software or datastrategyStrategy for executing the exploitexpertiseLevel of ability intended for the actorexploited_vulnerabilityThe target software’s vulnerabilities to be exploited (that must be present) for the exploit to succeed.commentdecision_making_systemThe decision-making system(s) (frames, rule-based, fuzzy logic, bayesian nets, etc.) Supported by the rules in this document.  More than one decision making system can be supported by a set of rules, for example frames can be combined with almost any other techniquetarget_software_typeThe software that can be attacked by the vulnerability; can be anything from a class/type of software to specific names of application programstarget_operating_system_ typeThe operating system that is assumed to be in place that hosts the targeted software against which the exploit will be executed; a description of the operating system in general terms that serves to indicate the defenses and capabilities of the operating system.  Has a value of null if the exploit can only be executed on software in one’s possession.  Has a value of ANY if the type of operating system does not matter.  Can be a hyperlink to a complete operating system description or knowledge bases describing relevant operating system attacks.target_network_typeThe network that is assumed to be in place across which the exploit will be executed; a description of the network in general terms that serves to indicate the defenses and capabilities of the network.  Has a value of null if the exploit can only be executed on software in one’s possession.  Has a value of ANY if the type of network does not matter.  Can be a hyperlink to a complete network description or knowledge bases describing relevant network attacks.:=Assignment operator==Equivalency test>Greater than<Less than>=Greater than or equal to<=Less than or equal toNoneNo entryANYAny value is acceptableknowledge_base_translatorMethod used to read this particular format for the knowledge baseframeFollowing rule supports frames for reasoningframe_slotOne slot of a frame rulerule_basedFollowing rule supports rule based decision makingfuzzy_logicFollowing rule supports fuzzy logic based decision makingcaseStart case-based reasoning rulesneural_netStart neural net specificationbayesianStart bayesian specificationformulaSpecifies the beginning of a formulavariable_textSpecifies that the following string contains a text variable nameconstant_textSpecifies that the following string contains a text constant namevariable_intSpecifies that the following string contains an integer variable namevariable_floatSpecifies that the following string contains a float variable nameconstant_intSpecifies that the following string contains an integer constant nameconstant_floatSpecifies that the following string contains a float constant namefuzzy_set_nameSpecifies the name of the fuzzy setfuzzy_set_parametersSpecifies the parameters used to define the fuzzy logic rulesfuzzy_set_hedgesSpecifies that the following comma delimited list specifies the hedges used by the fuzzy logic rulesifStart of the if component of a rulethenStart of the then portion of a ruleelseStart of the else portion of a rulevariable_nameDeclaration of a variable namecase_valueDeclaration of a value used within a case rulehierarchyUsed to indicate the start of the specification of a rules or case hierarchy, hierarchies are specified breadth-firstcommunicationsUsed to specify the start of the specification of the communications systems used to exchange information between exploit execution componentscooperation_and_coordinationUsed to specify the starting point for the portion of the knowledge base used to perform cooperation or coordination  reasoning (between peer systems/software executing the exploit)human_behavior_modelSpecifies the start of the portion of the knowledge base used for defining the human behavior modelrelated_knowledgebasesStart of listing of urls to related knowledge basesFigure 4:  Sample CW OPFOR CGA XML Tags and Their Meanings5.	Summary and conclusionsIn this paper, we have discussed how changes in the US military’s philosophy, approach, and technologies used for warfare impacts computer-generated actors (CGAs) and the new demands that will be placed upon them.  One of these newest and most important demands is in the area of information warfare and especially in the area of cyberspace opposing forces.  The solution we proposed draws upon experience and results in the fields of human behavior modeling, modeling of adversarial decision making, adversary modeling, and several emerging technologies in order to develop CGAs that can be used to simulate attacks upon friendly information resources, which we call cyberspace opposing forces (CW OPFOR).In this paper we proposed a CW OPFOR CGA for network-centric warfare as well as proposed its knowledge base format and development methodology.  However, our work on developing the format is not complete.  Our next task is to evaluate the format using a variety of knowledge base formats, reasoning systems, and applications.  Several additional major research needs are apparent.One major need is for major research question is modeling and simulation software protection metrics.  Some metrics that must be refined further are resilience (a measure of how difficult is it to defeat a technique), obscurity (a measure of how difficult it is to determine if a particular protection technique has been employed, aka stealthiness), and expected longevity (a measure of the length of time that a protection technique will afford a worthwhile degree of protection) of each protection technology, the costs and benefits of different mixtures of protection techniques, and the level of protection required for a given application and simulation environment.  Additionally, the modeling and simulation community will require means for determining and measuring the required degree of security needed by an application within different types of distributed simulations and scenarios and the technology options available to address these needs.  Another need is for the development of test suites to evaluate the CW OPFOR in a standard, scientific manner coupled with the development of data protection technology assessment standards, standard data sets, and methodologies for evaluating data protection technologies. A further need is for the development of standard attack profiles.  Finally, another research need is for securing and authenticating the knowledge bases used by the CW OPFOR; one approach that might be useful in addressing this need is by employing secure XML (XML 6) but this is only one approach that might be used and research in this area is needed before the simulation community settles upon a standard.We encourage comments on this proposed format and hope that others will implement, test, and extend the format as well.  Another area to be investigated is the stylesheet(s) used to display the knowledge bases to humans.  While XML can provide a simple HTML-like display of a knowledge base’s contents, we believe that the process of understanding, verifying, and using a knowledge base can be improved by exploiting the customizable display capability that XML Stylesheets provide.  We plan to address stylesheet and display issues in future work.ReferencesAlexander, I. (2003) “Misuse Cases: Use Cases with Hostile Intent,” IEEE Software, vol. 20, no.  1, January, pp. 58-66.Amoroso, E.G. (1994) Fundamentals of Computer Security Technology. Prentice Hall: Englewood Cliffs, NJ.Banks, S.B. and Stytz, M.R. (2003) “Progress And Prospects For The Development Of Computer Generated Actors For Military Simulation Part 2 – Reasoning System Architectures And Human Behavior Modeling,” Presence: Teleoperators and Virtual Environments, MIT Press, vol 12, no. 4, August, pp. 422-436.Bisbey, R. and D. Hollingworth (1978). Protection Analysis: Final Report. Marina del Ray, California, University of Southern California.Bishop, M. (1995). A Taxonomy of UNIX System and Network Vulnerabilities. Davis, California, University of California.Bishop, M. and Bailey, D. (1996) "A Critical Analysis of Vulnerability Taxonomies," Proceedings of NIST Invitational Workshop on Vulnerabilities, July.Booch, G.; Rumbaugh, J.; and Jacobson, I. (1999) The Unified Modeling Language User Guide, Addison Wesley, Reading, MADenning, D.E. 1999) Information Warfare and Security, Addison-Wesley: Reading, MA.Garfinkel, S. and Spafford, G. (1991) Practical Unix Security. O’Reilly & Associates: Sebastopol, CA.Gollmann, D. (1999) Computer Security.  Wiley: Mew York.Howard, M. and LeBlanc, D. (2002) Writing Secure Code.  Microsoft Press: Redmond, Washington.Jalal, F. and Williams, P. (1999) Digital Certificates:  Applied Internet Security.  Addison-Wesley: Reading, MA.National Security Council.  (1999) Trust in Cyberspace.  National Academy Press: Washington, DC.Schnier, B. (1996) Applied Cryptography, John Wiley and Sons: New York.Stytz, M.R. and Banks, S.B. (2003a) “Progress And Prospects For The Development Of Computer Generated Actors For Military Simulation Part 1 – Introduction And Background,” Presence: Teleoperators and Virtual Environments, MIT Press, vol 12, no. 3, June, pp. 311-325.Stytz, M.R. and Banks, S.B. (2003b) “Progress And Prospects For The Development Of Computer Generated Actors For Military Simulation Part 3 - The Road Ahead,” Presence: Teleoperators and Virtual Environments, MIT Press, vol 12, no. 3, August, pp. 422-436.Shrobe, H. (2002) “Computational Vulnerability Analysis for Information Survivability,” AI Magazine, vol. 23, no., 4, Winter, pp. 81-91.Stallings, W. (1999) Cryptography and Network Security: Principles and Practice.  Prentice Hall: Upper Saddle River, NJ.Summers, R. (1997) Secure Computing: Threats and Safeguards.  McGraw Hill: New York.Waltz, E. (1998) Information Warfare: Principles and Operations.  Artech House: Norwood: MA.UMLAlbir, S.S. (1998) UML in a Nutshell, O'Reilly Press, Sebastopol, CA.Booch, G. (1998) The Unified Modeling Language User Guide.  Addison Wesley, Reading, MA.Booch, G.; Rumbaugh, J.; and Jacobson, I. (1999) The Unified Modeling Language User Guide, Addison Wesley, Reading, MA.Henderson-Sellers, B. and Unhelkar, B. (2000) Open Modeling with UML, Addison-Wesly Reading, Mass.XMLGaringo, G. & Augins, J.S. (1999) “XML to Facilitate Interoperability Between Repositories,” The Spring Simulation Interoperability Workshop, Orlando, FL, 14-19 March, pp. 1106-1111.Harold, E.R. (1999) XML Bible.  IDG Books Worldwide: Foster City, CA.Lacy, L.W. & Tuttle, C. (1998) “Interchanging Simulation Data Using XML,” The 1998 Fall Simulation Interoperability Workshop, Orlando, FL., 13-18 Sep., pp.1110-1119.Megginson, D. (1998) Structuring XML Documents. Prentice Hall: New York, NY.Miller, G.J. & Filipelli, L.J. (1999) “An XML Representation of HLA Object Models,” The Spring Simulation Interoperability Workshop, Orlando, FL, 14-19 March, pp. 565-570.Simpson, J.E. Just XML. (1998) Prentice Hall: New York, NY.St. Laurent, S.; St. Laurent, S.; & St. Laurent, S. (1999)  XML:  A Primer. 2nd edition.  IDG Books Worldwide: Foster City, CA.St. Laurent, S.; St. Laurent, S.; & Biggar, R.J. (1999)  Inside XML DTDs: Scientific and Technical.  McGraw Hill: New York, NY.Eastlake, D.E. and Niles, K.  (2003) Secure XML.  Addison-Wesley: Boston.About the AuthorsMartin R. Stytz is a retired Lieutenant Colonel in the U.S. Air Force.  He received a Bachelor of Science degree from the U.S. Air Force Academy in 1975, a Master of Arts degree from Central Missouri State University in 1979, a Master of Science degree from the University of Michigan in 1983.  Stytz received his Ph.D. in Computer Science and Engineering from the University of Michigan in 1989.  He is a member of the ACM, the IEEE, the IEEE Computer Society, the IEEE Task Force for Security and Privacy, AAAI, and the Society for Computer Simulation. Sheila B. Banks is a Technical Advisor for the Air Force Research Laboratory’s Human Effectiveness Directorate and is the NATO lead for SAS-ET.V (Exploratory Team for a NATO Virtual Institute for Human Behavior Representation.)  Dr. Banks received her Bachelor of Science from the University of Miami, Coral Gables, FL in 1984 and a Bachelor of Science in Electrical Engineering from North Carolina State University, Raleigh, NC in 1986.  Also from North Carolina State University, Raleigh, NC, she received a Master of Science in Electrical and Computer Engineering in 1987 and her Doctor of Philosophy in Computer Engineering (Artificial Intelligence) from Clemson University, Clemson, SC in 1995.		PAGE  