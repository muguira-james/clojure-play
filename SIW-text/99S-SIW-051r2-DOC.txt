HLA Gateway 1999Douglas D. WoodMikel D. PettyInstitute for Simulation and Training3280 Progress DriveOrlando, FL 32826-0544d HYPERLINK mailto:Dwood@ist.ucf.edu wood@ist.ucf.edu,  HYPERLINK mailto:mpetty@ist.ucf.edu mpetty@ist.ucf.eduKeywords:High Level Architecture, Legacy interoperability, GatewayABSTRACT: HLA is a standard for constructing distributed simulations.  It facilitates interoperation between a wide variety of simulation types and promotes reusability of simulation software.  New simulations will be built with HLA interoperability in mind, but the same is not true of legacy simulations that were in existence before the HLA standard was developed.  There are, in essence, two ways to make a legacy distributed simulation HLA interoperable:  (1) modify the legacy simulation to communicate using HLA, or (2) leave the legacy simulation unmodified and use a gateway to translate its data communications to and from HLA.A prototype gateway was used to connect the BDS-D M1 crewed tank simulator into the HLA Platform Proto-Federation (PPF) experiments conducted in 1996.  Based on that experience, IST has developed a fully functional HLA Gateway in order to provide a path to HLA interoperability for legacy DIS simulations without change to those systems.  The HLA Gateway translates DIS PDUs (IEEE 1278.1 and 1278.1a) into RTI service calls using data defined in the Real-Time Platform Reference Federation Object Model (RPR FOM).  The HLA Gateway currently translates 43 DIS PDU types in 8 PDU families and uses all RTI services needed for a DIS-like RPR FOM-based federation.  Translation latency in the HLA Gateway averages 1-2 milliseconds.  The software is written in C++ and is strongly object-oriented.Since the Gateway was last reported at the SIW, an improved version has recently been released and users of the Gateway have successfully undergone HLA conformance certification testing.  This paper updates and supersedes previous papers' interim reports on the Gateway and describes the latest version.  It details the PDUs and RTI services used in that version, reviews the latest design, and summarizes the experiences of the Gateway users.  Plans for future enhancements are also described. HLA interoperability for legacy simulationsWhen considered in detail there are many approaches to make an existing simulation HLA interoperable. However, in essence two can be defined:  (1) modify the existing simulation to communicate using HLA directly, or (2) introduce an external gateway that translates between the legacy simulation and HLA.  We refer to the first approach as ‚Äúintegration‚Äù and the second as ‚Äúgateway.  In this section we briefly define these two approaches; for more detail, see [1].Interoperability via integrationFor the integration option, the existing simulation is modified so that it communicates using HLA.  That means that the simulation must send and receive object attribute updates and interactions that have been defined in a FOM using the appropriate RTI services.  It also means that the simulation must be modified to use other RTI services beyond those for communicating attribute updates and interactions, such as Federation Management to join the federation execution, Declaration Management to declare what object classes the simulation will simulate, and so on.Interoperability via gatewayEMBED Word.Picture.8 EMBED Word.Picture.6  Figure  SEQ Figure \* ARABIC 1 Gateway interoperabilityThe integration option requires changes to the existing simulation.  The alternative is to not modify the existing simulation, instead using a gateway to achieve interoperability.  The gateway approach provides an interface node between an HLA Federation and the legacy simulation network protocol (see  REF _Ref439737563 \h Figure 1).  In the general case, one or more simulations using an existing protocol, such as DIS, SIMNET, or ALSP are connected via the gateway to a HLA federation.  (This is the general gateway case; the HLA Gateway to be described later is DIS-specific.)  On the protocol side of the gateway, data packets (PDUs for DIS) are formatted, sent, and received according to the protocol.  The gateway receives the packets and translates them at two levels:  (1) the data in the packets is converted into the data formats defined in the FOM, and (2) the sequence of packets are translated into corresponding RTI service invocations.  As an example of the latter, the first DIS PDU received for a simulator triggers not only an Update Attribute Values service but might be preceded by a Join Federation service produced by the gateway on behalf of the DIS simulator.  In general terms, the gateway translates and resends traffic that is relevant to the other side, and provides necessary functions needed on one side that has no analog on the other.  The details of the translation and service functions are highly dependent on the FOM and the protocol involved.Capabilities and implementation of the HLA GatewayOverview of the HLA GatewayUnder the sponsorship of the US Army Simulation, Training and Instrumentation Command (STRICOM), the Institute for simulation and Training (IST) has implemented the gateway approach..  This approach was first investigated during the HLA Platform Proto-Federation experiments [2] [3] [4] [5] [6]. The current HLA Gateway supports translation between the DIS protocols (versions 1278.1, 2.0.4, and 2.0.3) and an HLA Federation based on the Real-time Platform Reference Federation Object Model (RPR FOM). By design, the HLA Gateway provides a path to HLA interoperability for legacy DIS systems with no change to these systems.  It provides an ‚Äúas is‚Äù solution to HLA interoperability for legacy DIS simulators.  It can also provide interim interoperability for systems while development of direct HLA integration is underway. Software architectureThe translation of data within the HLA Gateway passes through four application layers: 1) DIS Protocol layer, 2) RTI Interface layer, 3) FOM Representation  layer and 4) RTI/Federate Ambassador layer (e.g., the RTI API).  Starting with the DIS side, the data passes through the DIS protocol layer.  Basically, the DIS protocol layer determines the PDU type and based on the type invokes an appropriate RTI Interface function (e.g., update attribute values or send interaction).  The RTI Interface layer modularizes the RTI Ambassador services into controller objects, one for each I/F management group.  In addition to providing modularization, the RTI Interface layer provides a data abstraction (through C++ class derivation) by accessing the RTI Ambassador services without reference to FOM implementation details.  The FOM layer extends the RTI Interface data abstraction with the FOM specific implementation. The core facet of this data abstraction is the FOM Class Actor.The RTI Interface defines Actors implemented as C++ abstract classes that are used to represent and access object classes and interaction classes.  The FOM layer extends these abstract classes with the implementation of the FOM specific object and interaction data translation.  A FOM Actor is defined for each object and interaction class defined in the target FOM.  Each specific FOM Actor translates the appropriate DIS PDU fields into the associated attributes or parameters defined by the FOM class.  A detailed description of this design can be found in [7].  After the data has been translated, the RTI Interface object or interaction abstraction takes the resulting attributes or parameters and submits them to the RTI Ambassador.  Data coming from the RTI Federate Ambassador follows a similar procedure in reverse.  In addition to translating DIS PDUs (via the FOM layer), the RTI Interface also supports invocation of the RTI services that may or may not require use of the FOM layer (e.g., create/join federation, publish/subscribe object class, or request/provide attribute value update).RTI service supportThe HLA Gateway supports the RTI interface services that are necessary to establish a connection to the HLA federation and exchange data between the DIS network and the HLA network.  The services supported are those necessary to execute a DIS-like federation using the RTI and the RPR FOM.  Table 1 lists the services.The primary Federation Management services for creating/destroying and joining/resigning federations are used for establishing a connection to a federation.  While the Gateway running under RTI 1.0.3 did support pause/resume federation (as a reaction to the DIS SIMAN start/stop pause/resume PDUs), this functionality has not yet been carried over to the Gateway running under RTI 1.3 (using synchronization point services).  Upon joining the federation, the Gateway uses the RTI support services to establish a mapping between the RTI‚Äôs run-time descriptors (or handles for classes, attributes, and parameters) and the Gateway‚Äôs internal enumerations.  To complete the connection to the federation and prepare for data exchange, the Gateway uses the Declaration Management‚Äôs [un]publish/[un]subscribe services to declare its intention to generate and receive information.  At present, the Gateway takes no action to throttle publications, specifically shutting these interest management services off (e.g., start/stop registration and turn interactions on/off).   The Gateway uses the Object Management services register/discover object instance, update/reflect attribute values, request/provide attribute value update, send/receive interaction, and delete/remove object instance to move the simulation data from the DIS network to/from the HLA network.  Again, the Gateway does not throttle the HLA updates (e.g., turn updates on/off).  Although the RTI services for changing the transportation type have been implemented within its RTI Interface, the Gateway does not provide a mechanism for invoking these services.  The Gateway does not support Ownership Management, Time Management, or Data Distribution Management (DDM).Table  SEQ Table \* ARABIC 1 HLA Interface Service SupportHLA Interface ServicesSupportFederation Management Create Federation ExecutionYesDestroy Federation Execution YesJoin Federation Execution YesResign Federation ExecutionYesRegister Federation Synchronization Point NoConfirm Synchronization Point Registration ‚Ä†NoAnnounce Synchronization Point ‚Ä† NoSynchronization Point Achieved NoFederation Synchronized ‚Ä† NoRequest Federation SaveNoInitiate Federate Save ‚Ä†NoFederate Save Begun NoFederate Save Complete NoFederation Saved ‚Ä†NoRequest Federation Restore NoConfirm Federation Restoration Request ‚Ä† NoFederation Restore Begun ‚Ä†NoInitiate Federate Restore ‚Ä† NoFederate Restore CompleteNoFederation Restored ‚Ä† NoDeclaration Management Publish Object Class YesUnpublish Object Class YesPublish Interaction Class YesUnpublish Interaction ClassYesSubscribe Object Class Attributes YesUnsubscribe Object Class YesSubscribe Interaction ClassYesUnsubscribe Interaction Class YesStart Registration For Object Class ‚Ä† NoStop Registration For Object Class ‚Ä†NoTurn Interactions On ‚Ä†NoTurn Interactions Off ‚Ä† NoObject Management Reserve Object Instance NameNoObject Instance Name Reserved ‚Ä† NoRegister Object Instance YesDiscover Object Instance ‚Ä† YesUpdate Attribute Values YesReflect Attribute Values ‚Ä† YesSend Interaction YesReceive Interaction ‚Ä† YesDelete Object Instance YesRemove Object Instance ‚Ä† YesLocal Delete Object InstanceNoChange Attribute Transportation TypeNoChange Interaction Transportation TypeNoAttributes In Scope ‚Ä†NoAttributes Out Of Scope ‚Ä†NoRequest Attribute Value UpdateYesProvide Attribute Value Update ‚Ä†YesTurn Updates On For Object Instance ‚Ä†NoTurn Updates Off For Object Instance ‚Ä†NoOwnership ManagementNoTime ManagementNoData Distribution ManagementNoGateway, DIS and DDMIf the Gateway's protocol translation function is considered strictly, i.e., so that the Gateway does not change the semantics of the data it translates, then employing Data Distribution Management (DDM) would be a violation of the Gateway‚Äôs general principals.  The reason being that DIS is broadcast, with all data being sent to all simulations (at least the 1.X and 2.X standards), whereas DDM is used to reduce the amount of the data sent and received by simulations. DIS simulations are developed with the dual assumptions that (1) all data sent by a simulator will go to all other simulators and (2) each simulator will receive all of the data sent.  It is easy to imagine situations where using DDM to filter the data that is sent to a DIS simulation could break the DIS simulation.  For example, suppose a DIS simulation for internal reasons such as dead reckoning or memory management tracks the location of external simulation objects that are beyond the sensor range of the internal entities being simulated by that simulator.  Then, if DDM is used to filter out data when the objects are beyond sensor range, then those internal processes may be unacceptably disrupted.With that said, it is clear that it might be possible to use DDM in federations that include Gateway/DIS simulation federates, if care is taken.  Internal knowledge of the DIS simulation would be required when setting up such a federation to ensure that the effects of DDM will not interfere with the DIS simulation.  To date, DDM support has not been put into the Gateway because it is not feasible to incorporate the internal knowledge for all the DIS simulations that might use the Gateway. Gateway support of DIS PDUs translation into the RPR FOMThe HLA Gateway supports the IEEE 1278.1 standard (with the exception of SIMAN start/resume and stop/freeze) that is the target representation of the RPR-FOM.  It also supports these PDUs in previous DIS formats (2.0.3 and 2.0.4).  The Minefield and Synthetic environment (environmental process and gridded data) family of IEEE 1278.1A PDUs has also been added to the Gateway translation.  The FOM representation of these PDUs has been proposed to the RPR-FOM SDG.The Real Time Platform Reference FOM is an HLA representation of the DIS protocols that is being defined by the Simulation Interoperability Standards Organization (SISO) RPR-FOM Standards Development Group (SDG) [8] [9].  Each DIS PDU is represented by one or more RPR-FOM object or interaction classes.  The HLA Gateway translates each DIS PDU into its appropriate RPR-FOM object or interaction class.In most cases, the translating from a DIS PDU into an RPR-FOM class is a straightforward one to one mapping. These mappings are shown in the GRIM RPR document found in [9].  The Entity State, Radio Signal, and Emission PDU are the exceptions in that these PDU types may exist as one of many RPR-FOM object or interaction classes. Based on the entity type field, the Entity State PDU is mapped into one of the leaf classes derived from the BaseEntity object class.  Each DIS entity is represented as a single federation object instance.  In the reverse direction, any of the discovered and reflected objects with these object classes are translated into Entity State PDUs.  Similarly, the Radio Signal PDU is mapped into a leaf class derived from the RadioSignal interaction class based on the encoding class field and each interaction is translated one-for-one with Radio Signal PDUs.  The Emission PDU mapping requires another level of mapping.  Not only is the Emission PDU mapped into several RPR-FOM object classes, but also each Emission PDU is represented as multiple federation object instances.  The implementation of this one-to-many and many-to-one mapping required a significant modification to the HLA Gateway RTI Interface.The Gateway supports the complete RPR-FOM object and interaction class hierarchy excluding the list given below: Object Classes: AggregateEntity, EnvironmentEntity, MilitaryNonHuman, and all of the Civil classesInteraction Classes: ActionRequestToObject, ActionResponseFromObject, AttributeChangeRequest, AttributeChangeResult, CreateObjectRequest, CreateObjectResult, RemoveObjectRequest, RemoveObjectResult, StartResume, StopFreezeUsing the HLA GatewayRecommended applicability of the GatewayThe use of a Gateway approach versus an integration approach is ultimately up to the sponsor/user and the program‚Äôs requirements and or resources.  In general, the Gateway is recommended for applications that have these characteristics: (1) scenarios will have a reasonable number of entities (2) 1-2 millisecond translation latency can be tolerated (3) a fast and inexpensive route to HLA compliance certification is needed.  Several programs sponsored by STRICOM have evaluated the Gateway with generally positive results. Most evaluations suggested that the Gateway was a viable approach to achieve HLA compliance.  However, there were programs that had requirements for large exercises (greater than 1,000 entities) or critical latency (less than 1 millisecond) that cited the Gateway‚Äôs shortcoming in these areas.  Future work may look into enhancing the Gateway to satisfy these requirements.Conformance testing resultsTo date, three programs have used the Gateway to achieve HLA compliance.  The U.S. Army Aviation and Missile Command has used the Gateway to achieve HLA compliance for the Virtual Prototype Simulator (VPS) for the Bradley A2 [10].  The HLA Gateway was used with ModSAF 3.0 to provide a ‚ÄúTest Federate‚Äù for the compliance testing of the AC-130U Special Operations Forces (SOF) Navigator (Nav), Fire Control Officer (FCO) station.  This simulation is part of the AC-130U Aircrew/Maintenance Training Device and Testbed (ATD/TB) under STRICOM‚Äôs Advanced Distributed Simulation Technology II (ADST II) contract.  Finally, STRICOM‚Äôs ModSAF program has used the Gateway for compliance testing of ModSAF. Of the three, the Gateway‚Äôs use for ModSAF HLA compliance demonstrates the extent of the Gateway‚Äôs capability to handle the broad spectrum of DIS data. References[1]	Petty, M. D., and Cox, A., ‚ÄúHLA Interoperability for Existing Simulations‚Äù, Proceedings of the 1997 Summer Computer Simulation Conference, Arlington VA, July 13-17 1997, pp. 437-442. [2]	Cox, A., Wood D. D., Petty, M. D., and Juge, K. A., ‚ÄúIntegrating DIS and SIMNET Simulations into HLA with a Gateway‚Äù, Proceedings of the 15th DIS Workshop on Standards for the Interoperability of Defense Simulations, Orlando FL, September 16-20 1996, pp. 517-525.[3]	Cox, A., and Wood, D. D., ‚ÄúDesign and Implementation of the BDS-D/HLA Gateway‚Äù, Proceedings of the 18th Interservice/Industry Training Systems and Education Conference, Orlando FL, December 3-6 1996.[4]	Harkrider, S. M. and Petty, M. D.,  ‚ÄúResults of the HLA Platform Proto-Federation Experiment‚Äù, Proceedings of the 15th DIS Workshop on Standards for the Interoperability of Defense Simulations, Orlando FL, September 16-20 1996, pp. 441-450.[5]	Harkrider, S. M. and Petty, M. D., ‚ÄúHigh Level Architecture and the Platform Proto-Federation‚Äù, Proceedings of the 18th Interservice/Industry Training Systems and Education Conference, Orlando FL, December 3-6 1996.[6]	Wood, D. D., Petty, M. D., Cox, A., Hofer, R. C., and Harkrider, S. M., ‚ÄúHLA Gateway Status and Future Plans‚Äù, Proceedings of the 1997 Spring Simulation Interoperability Workshop, Orlando FL, March 3-7 1997, pp. 807-814.[7]	Wood, D. D., "An Object-Oriented RTI Interface", 1997 Fall Simulation Interoperability Workshop, Orlando FL, September 8-12, 1997[8]	Shanks, Graham C., "The PnP FOM A Reference Federation Object Model to Promote Simulation Interoperability", 1997 Spring Simulation Interoperability Workshop, March 3-7, 1997 [9]	RPR FOM SDG, Real-Time Platform Reference FOM Standards Development Group, http://www.sisostds.org/stdsdev/rpr-fom/index.htm HYPERLINK http://www.sisostds.org/stdsdev/rpr-fom/index.htm [10]	Hall, K. L.; Harless, W., Lee, G.; Roose, K., Sanders, B., ‚ÄúLessons Learned from the Submission of a Legacy DIS Simulation and a HLA  Gateway for Acceptance via the DMSO HLA Conformance Tests‚Äù,  Proceedings of the 1998 Fall Simulation Interoperability Workshop, Orlando FL, September 14-18, 1998.Author BiographiesDouglas D. Wood is a Senior Research Computer Scientist at the Institute for Simulation and Training. Mr. Wood has performed research primarily in the area of distributed simulation, including HLA experiments, electronic warfare protocols, emergency management training, and algorithms for computer generated forces.  Mr. Wood received a M.S. and a B.S. in Computer Science from the University of Central Florida.  His research interests are in simulation and distributed systems.Mikel D. Petty is an Assistant Director of the Institute for Simulation and Training.  He leads IST research in distributed simulation, including High Level Architecture and computer generated forces.  Dr. Petty has worked in distributed simulation since 1990.  He received a Ph.D. from the University of Central Florida in 1997, an M.S. from UCF in 1988, and a B.S. from the California State University Sacramento in 1980, all in Computer Science.  His research interests are in distributed simulation, computer generated forces, and applied computational geometry. EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 1 Translation Application Layers