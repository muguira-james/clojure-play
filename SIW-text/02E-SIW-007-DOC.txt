The Euclid RTP11.13 SE Development EnvironmentKeith FordThales Training & Simulation Ltd.Gatwick Road, CrawleyWest Sussex, RH10 9RLEnglandkeith.ford@thales-tts.comKeywords:Euclid RTP 11.13, Synthetic Environments, Development Environment, RepositoryABSTRACT: Euclid RTP 11.13 is a major European initiative to promote the use of Synthetic Environments (SEs). The title of the programme ‘Realising the Potential of Networked Simulations in Europe’ reflects the fact that although SEs are currently being used to support defence programmes in Europe, their full potential is not currently being realised. The aim of the project is to 'overcome the obstacles that prevent SEs being exploited in Europe by developing a process and an integrated set of prototype tools that will reduce the cost and timescale of specifying, creating and utilising SEs for collective training, mission rehearsal and simulation based acquisition'.        The paper describes the concept and design of the SE Development Environment (SEDE) that is being developed in Euclid 11.13. The purpose of the SEDE is to provide a facility that will assist the different types of SE users i.e. Problem setters, Problem Solvers, and SE Implementers, so that SEs can be delivered faster, better and cheaper. It will achieve this by providing a common shared data environment, providing facilities for managing the data generated by an SE project and making information about available SE assets and best practices readily available to SE users. The SEDE is analogous to an Integrated Development Environment (IDE) used for developing software applications. It comprises of five main components; a Process, Repository, SE Management Tool, SE Tools (both COTS and those being prototyped in Euclid 11.13) and a Knowledge Base. The data accessed by the SEDE can be from a local repository or from one that has been distributed over a Wide Area Network (WAN).IntroductionEuclid is an acronym of European Co-operation for the Long-term In Defence. It provides a funding mechanism for European industry to collaborate on common defence problems and is managed by the Western European Armaments Group’s (WEAG) Research Cell. Each Euclid Research and Technology Programme (RTP) is managed by a Management Group that comprises of representatives from each nation contributing funds to the programme. The chair is from the nation that proposes the research study.The Euclid 11.13 team is led by Thales Training & Simulation (UK) and comprises of 22 European companies from 13 Nations. The programme started in November 2000 and will run for 36 months. It is the largest European Defence Research & Technology activity undertaken by the WEAG, with a budget in excess of €17 million. The aim of the project is ‘to overcome the obstacles that prevent SEs being exploited in Europe by developing a process and an integrated set of prototype tools, which will reduce the cost and timescale of specifying, creating and utilising SEs for collective training, mission rehearsal and simulation based acquisition'.The aim will be met by achieving the following objectives:Determine and mitigate obstacles that prevent networked simulations being exploited in Europe.Provide a process and prototype tools which will reduce the life-cycle of synthetic environment production, execution and evaluation.Develop software required to set-up a European repository containing information about SE assets.An overview of the Euclid 11.13 programme is given in [1]. The purpose of this paper is to describe the progress made in the project for defining the SE Development Environment (SEDE) that will support the different types of SE users in developing and exploiting SEs. It is analogous to the concept of an Integrated Development Environment (IDE) that is widely used for developing software applications.TerminologyIn this paper, the abbreviation SE refers to ‘Synthetic Environment’ rather than ‘System Engineering’. The term ‘Synthetic Environment’ has many different meanings and there is often confusion about what is meant by an SE. Some people use the term SE to mean the instantiation of a networked simulation whereas other people take a broader view and use it to describe a framework for integrating and reusing modelling and simulation technologies to solve a range of related problems. For the purpose of Euclid 11.13, an SE is considered to be the instantiation of a heterogeneous networked simulation and the supporting framework is referred to as the SE Development Environment.The term ‘Knowledge Base’ is used in its general sense i.e. to refer to a collection of data, information and knowledge, rather than the connotation associated with the Artificial Intelligence (AI) community.Rationale for SE Development EnvironmentSEs are used in many application domains e.g. Training, Mission Rehearsal, Equipment Acquisition etc. and can range from a few simulations operating over a local area network to hundreds running across a wide area network. In spite of the diverse range of SE types, their production and operation share similar requirements.There is a need to store information about models and simulations in order to promote their re-use. For an SE used in Simulation Based Acquisition (SBA) programme, this may be as long as 30+ years. Good configuration control is required since a vast array of data and documentation has to be managed.An efficient means of sharing information and data is required since the process of developing, operating and analysing data from an SE involves an, often large, multi-disciplinary team. Also, due to the long timescales associated with using SEs for SBA, the composition of the team can greatly change throughout the programme.A means of sharing data between different organisations is required since the wide range of simulation assets and expertise required to support some SEs often has to be provided by different companies. These requirements for supporting the management and production of SEs can be supported by generic COTS Shared Data Environments (SDEs). However, they are generic tools targeted at supporting very large engineering projects and the high license fees associated with them often cannot be justified, particularly on smaller SE projects. Also, even if companies have a COTS SDE, it may be incompatible with that from another company. Therefore, in order to promote the use of SEs, there is a need to provide a low cost development environment for organising and managing collaborative SE projects. By producing a development environment dedicated to SEs, the functionality can be tailored to what is required by the SE community. This makes it simpler to use, which will help to encourage its uptake.An SE Development Environment (SEDE) is being produced as one of Euclid 11.13’s main deliverables. The SEDE will achieve the programme’s aim of reducing the cost and timescales of creating and utilising SEs by:Introducing efficient working practices in consortia by providing a common shared data environmentProviding facilities for managing the data and information generated by SE projectsHaving a repository to promote the re-use of existing SE assetsMaking information about best practices available to inexperienced SE users.The SEDE is intended to support the whole range of people who are involved over the lifecycle of an SE.  These can be grouped into:Problem setters – the individuals or group that pose the question to be answered in the SE. i.e. the customer who is responsible for defining the problem and for funding  the means to obtain the solution. Problem solvers – the individuals or group that investigates the SE solution to the problem i.e. the System Engineers that define the SE architecture. SE Implementers – the individuals or group that develop and integrate the various elements of an SE i.e. the Specialist Engineers who provide an operational and fully tested SE.The terms Problem setter, Problem solver and SE implementer are used in this paper to describe one of the roles that are described above.  Figure 1	SEDE Conceptual FrameworkExploitation issuesFor the SEDE to be accepted and exploited by the SE user community, it must not only provide some useful service, but also be compatible with existing processes and tools. To some extent, these are two conflicting requirements. This is because some of the proposed functionality for the SEDE would require 3rd party tool developers to modify their tools in order to be integrated into the SEDE. A very good business case would need to be made for a tool vendor to make such changes. This point is well illustrated by what happened with the CAFDE initiative [2].The Computer Aided Federation Development Environment (CAFDE) was sponsored by the DMSO and its objective was to support the development of HLA federations by providing a framework for integrating HLA tools from different tool vendors. The CAFDE Architecture specifies an open interface that the HLA tools must implement if they are to be integrated into the CAFDE tool suite. Although this appears to have been a worthwhile initiative to support the SE community, it did not succeed. In reality, either for commercial or political reasons, only a few tool vendors actually made their tools CAFDE compliant.LA HLA tools must comply with HHHHhkkk The main lesson to be learnt from the CAFDE initiative is that in order to promote the acceptance of the SEDE among the SE community, it should not be prescriptive with respect to the way other tools and users should interface with it. In order to maximise the benefit from the SEDE, a compromise approach has been made whereby a simple interface has been defined for tools willing to implement it. However, it can also support other tools that have not implemented the SEDE interface.Requirements for SEDEThe following high-level requirements have been specified for the SEDE:Provide functionality for sharing SE project dataProvide configuration management for SE project dataProvide on-line guidance for creating and utilising SEsBe scaleable so that it can either be run locally or distributed across many sites.Be configurable so that it can be tailored to specific SE projects and usersBe platform independent Be secureDescription of the SEDEFigure 1 shows the conceptual framework for the SE Development Environment. It comprises of five main components, which are described in the following sections:SE Process – defines the activities and tasks for creating and utilising an SE.SE Management Tool – provides capability for the management and configuration control of the SE project’s data.SE Tools – provides support for a specific activity or task defined by the SE process.Repository – provides facility for storing and sharing data and documentation for an SE project.SE Knowledge Base – provides information for informing users about available SE assets and best practices for creating and utilising SEs.SE ProcessThe development and exploitation of Synthetic Environments requires the definition of a process to:Provide support to encourage the use of SE Technology on military programmes;Provide guidance for SE developers and users to plan and perform the different activities necessary to produce the required products and results;Promote good practice for developing SEs on time and within budget;Promote reuse of products (federation, federates, components) and results;Provide a framework for a tool set to reduce the cost and time for producing and using SE.A decision was taken in Euclid 11.13 that rather than developing a new SE process from scratch, to use the Federation Development and Execution Process (FEDEP) [3] as a baseline and to enhance and extend it where it was perceived to have limitations. This is because the FEDEP has already been widely adopted by the SE community and is already supported by several COTS tools. The resulting Euclid 11.13 process is known as the Synthetic Environment Development & Exploitation Process (SEDEP) [4]. The use of the term SEDEP has been chosen to reinforce its close links with the FEDEP whilst promoting its more general use for developing SEs by dropping its association with the HLA. It should be noted that the current steps of the FEDEP exist as a sub-set of the SEDEP. It is intended that long term, the two processes will merge and that there will only be a single SE process. Fortuitously, the FEDEP is currently undergoing a major review before it becomes an IEEE Recommended Practice. This has provided an ideal opportunity to exploit the results from the SEDEP. Some of the Euclid 11.13 team have become members of the FEDEP Product Development Group and as a result, many of the enhancements proposed by the SEDEP have been incorporated into the updated version of the FEDEP. Figure 2 	SE Development and Exploitation Process (SEDEP)Two complementary representations (‘views’) are used to describe the SEDEP:Steps representation: the different activities of the process are organised in steps sequentially along the whole process. Each step covers a specific phase of the SE lifecycle. Overlays representation: the different activities of the process are thematically organised in overlays along the whole process. Each overlay covers a specific theme or aspect of the SE, which requires a specific technical environment and/or specific expertise.The SEDEP is defined by 8 steps as shown in Figure 2. Although the steps are shown as a sequential set of operations, in practice, the steps may run concurrently, with a step starting before the proceeding one has finished. There are also feedback loops where it may be necessary to revisit an earlier step as a result of actions performed in later ones.An important feature of the SEDEP is that everything generated by the process is stored in the repository, so that successive iterations of it can build on the products, data and knowledge already available.RepositoryThe repository lies at the heart of the SEDE and provides the facility for storing and sharing data about an SE project. It comprises from one to many commercial databases which, depending on its use, can be run on a single computer or be distributed over a Local or Wide Area Network. Each instantiation of the repository software is known as a repository node and can support as many databases as required. The repository software being prototyped in Euclid 11.l3 provides the functionality for linking all the databases together and for preventing unauthorised access to the data. It also provides the ability to search for data distributed across the various databases. A user will be able to specify a global search, which will search all known repository nodes, or to constrain the search to either particular databases or repository nodes. The local repository node from where the search originated will be responsible for compiling all the search responses and sending them back to the user.Repository EntriesIn Euclid 11.13 terminology, the data stored in the repository is referred to as a repository entry. Access to the repository is either by SE tools that have implemented the repository Application Programmers Interface (API), or by the SE Management Tool. A repository entry consists of: Unique identification: containing the name and version number for the repository entry.Header information: containing information such as who created it, version number, what tool was used to create the bulk data etc.Characterisation data: used by the repository search engine.Bulk data: data created by an SE tool.  EMBED Word.Picture.8  Figure 3     Structure of a Repository EntryRepository UsesTwo main uses for the repository software are envisaged in Euclid 11.13. The first involves having a network of interconnected repository nodes that is used to publicise information about the existence of SE assets. The second is to be the primary means of storing information generated by SE projects.One of the main obstacles that Euclid 11.13 has highlighted that prevent SEs being exploited, is that it is a very time consuming process identifying suitable SE assets that will satisfy the SE’s requirements (an SE asset is any simulation, data, tool that can be re-used in an SE project such as a simulator, simulation, stealth viewer, data logger etc.). The problem is particularly compounded when multi-national SEs are set-up, since even less will be known about each others assets. The proposed way of resolving this problem is for MoDs (and other organisations) to maintain a repository that contains information about their SE assets, which can be accessed by other organisations with the appropriate access rights.The second use of the repository software is as a component of the SEDE. Where there is not a requirement to share data with other organisations, the SEDE would normally reside on a secure LAN with no connections with the outside world. If other companies were involved in an SE project, the repository would be distributed across a WAN with encryption devices and firewalls to protect the data. Repository OrganisationThe following section discusses the issues of setting-up a pan European repository containing non-company confidential or non-classified data. The advantage of using the Euclid 11.13 repository, rather than organisations publicising their information on a web site, is that when a search is made, all the remote repositories that a local node knows about can be searched with one query. If the World-Wide-Web was used, a user would first have to identify which web sites publish information about SE assets and then search each one in turn.Careful consideration went into how the repository should be organised as it was realised that this would have a massive impact as to whether the vision of a pan European repository could become a reality. There are three main options for managing the repository; a centralised administrator is set-up to manage all the repository nodesseveral centralised administrators are set-up to manage particular groups of users, which  share information about the repositories they are responsible for the management of the repository is distributed around the repository nodes themselves. The advantages of the first two approaches is that there are overarching organisations that could take on this role e.g. WEU, NATO etc. However, the challenge would be for them to agree to take on the commitment, and to fund it. Because resolving these issues could take a very long time, it was thought that a more pragmatic approach was to distribute the responsibility. This has the added advantage that organisations have complete control of protecting their own IPR.To help kick-start the process, a number of companies and MoDs participating in Euclid 11.13 will be encouraged to set-up a repository node during the  programme. It is hoped that as the concept gains acceptance, more organisations will add their own repository nodes and the SE repository network will evolve in the same way as the Internet has grown. Each organisation implementing a repository node would be responsible for managing the other organisations allowed to connect to it, the people allowed to access it, the data particular users can access, and the other repository nodes it would want to connect to.When an organisation wanted to set-up a repository node, it would contact other organisations that are already operating one for permission to connect to them. Appropriate agreements would then be signed to protect each company’s IPR. Given that people working on SEs operate in a close knit community, it is thought that information about existing repository nodes would be readily available. When the SEDE is to be used in a consortium, the situation is much simpler since the companies will already know the other partners they need to connect to.Repository SecurityOne important issue that is being addressed by Euclid 11.13 is the possibility of storing classified data in the repository since SEs by their very nature will potentially contain classified information.There are three aspects of securityEnsure confidentiality of data so that only appropriate access to data is allowed from both inside and outside an organisationPreserve integrity of data by ensuring that no unauthorised changes are made to data either in storage or transmissionEnsure availability of the data when requiredUnfortunately, as data is shared more widely, the complexity of protecting it increases. When the SEDE is instantiated on a local area network, the data can be protected by adhering to the appropriate security procedures for restricting physical access to the client and server hardware. However, when the SEDE is operated over a WAN, additional protection is required to prevent the SEDE being penetrated from the outside. The problem is further compounded when the SEDE is operated over national boundaries, since it will be necessary to comply with different National Security policies.Part of the research in Euclid 11.13 is to establish the security requirements for storing classified data in the repository. When the repository is run across a secure LAN it will have to comply with the appropriate National Security Policy. If the repository is to be distributed around WEU countries, it will need to comply with the WEU security requirements as specified in [5].Fortunately, there are various technologies readily available for protecting data over the public telecommunication network. These include the secure Internet Protocol (IPSec), Virtual Private Networks (VPN), encryption devices and Public Key Infrastructure (PKI). Figure 4 Repository ArchitectureRepository ArchitectureDevelopment of the repository is the most advanced part of the SEDE, with the first version being available in June 02. A 3-tier architecture has been used for the repository comprising of a client tier, business logic tier and data tier (Figure 4). The choice of communication mechanism was largely influenced by the requirement for the repository to be platform independent and not to put any unnecessary restrictions on the tool developers. The selected option was to exchange SOAP (Simple Object Access Protocol) messages over the https protocol (Secure Hypertext Transfer Protocol) via a web server.  An advantage of this approach is it also simplifies operating the repository over the Internet or a company’s Intranet and enables an optional firewall to be inserted to provide an additional layer of security. The client tier comprises of the client tool and web-server. One of the functions of the web-server is to extract the SOAP messages from the https requests received from the client tools and other repository nodes so that they can be processed by the SOAP handler. It also processes the SOAP messages from the SOAP handler so that they can be sent using the https protocol to the client tool.The middle tier or Business Logic-tier consists of the SOAP handler, the Router, the Entry Manager, the Access controller and the Query Manager. The first processing layer is the SOAP handler, which manages the connections between the users (through the tools) and the repository node. In particular, it decodes all incoming SOAP messages and verifies the user’s credentials.The Router is responsible for determining which node(s) a request is intended for, and routing them to either the local Entry Manager or Query Manager, or forwarding them to the Router of a remote node. If a request is sent to a remote node, the router combines the results with those from the local repository node before forwarding them back to the client.The Access Controller provides the necessary authorisation for requests made to the Soap Handler, Entry Manager and Query Manager. The repository protects the data in two ways.  Firstly, it determines if the user has permission to make a call to a specific repository function. Secondly, assuming that the user has permission to call the relevant method, the data is filtered so that any information that the user is not allowed to see is not sent back to the client. The repository Entry Manager is responsible for storing, retrieving and deleting repository entries. It is also responsible for locking the data to prevent simultaneous access to it. The Query Manager is responsible for providing the functionality to search multiple data stores. One of its main functions is to merge the results of queries made to different local databases before sending them back to the router.The design allows for different types of database architectures to be used for storing the data e.g. Relational, Object Oriented, XML. One of the functions of the Datastore Manager is to translate the entry and query requests into the specific requests for a particular type of database. A separate Datastore Manager is required for each database supported by a repository node. By using industry standard protocols such as ODBC/JDBC, one type of Datastore Manager will support databases from different vendors.Repository Entries use the eXtensible Markup Language (XML) to format the data. This provides a flexible mechanism for processing the large variety of data handled by the repository. To promote parallel (multi-user) development of the SE design, the repository entries need to be small in content and so will just contain data for a particular task.SE ToolsThe purpose of the SE tools is to assist the Problem setters, Problem solvers or SE Implementers in performing their roles. COTS tools are already available for supporting many of the SEDEP activities and additional tools are being prototyped where none currently exist. A key requirement for supporting the SEDEP is the use of common data formats. In this way, the data created by one tool can be read by the tool supporting the next activity in the process. All tools will have access to the repository, which will provide the mechanism for transferring data between them. The Data Interchange Formats (DIFs) defined by the HLA are being extended to other areas supported by the SEDEP. The tools interface to the repository via a well-defined open API. The prototype Euclid 11.13 tools will support this API and can connect directly to the repository as shown in Figure 5. However, since COTS tools will not necessarily support this API, the following method of transferring the data via the file system has been devised. The SE Management Tool will be used to create a Repository Entry for the data, prompt the user for the appropriate header and characterisation information, read the data from the file system and store it in the repository. Conversely, when the COTS tool is needed to edit the data, the SE Management Tool loads it back onto the file system.The advantage of storing the COTS tool data in the repository is that it allows it to be shared with other  (possibly remote) users and configuration control of the data can be maintained.Figure 5	SE Tool Interfaces to RepositorySE Management ToolAlthough all the SE tools can be used in a stand-alone manner with the repository, the maximum benefit is when they are used in conjunction with the SE Management Tool. The SE Management Tool (SEMT) provides the functionality required to manage an SE project. It is fully configurable to enable it to meet the specific requirements of the project. The SEMT is an overarching tool that provides functionality for:Entering User IDs and passwords, for obtaining access to the SEDE.Specifying and viewing information associated with an SE project.Configuration management Providing guidance on using SE process.Launching other SE tools.When a user launches the SEMT, a dialogue box will be displayed in which the user must enter their User ID and password. One of the functions of the interface between the SEMT and other SE tools will be to transfer this information, since the tool will only be able to access data in the repository if the user has the appropriate access rights.OverlaysOverlays are a concept introduced by the FEDEP and provide a different way of describing the process. The purpose of an overlay is to enable all the tasks associated with a particular aspect (theme) of the SE development and execution that span across several process steps to be viewed together. Overlays provide an orthogonal and complementary view and provide visibility of the transformation of the ‘theme’ along the whole process. The FEDEP currently describes overlays for VV&A and security.The SEMT will provide the capability of displaying overlays specified by the SEDEP. It will also provide the capability for users to define their own overlays. This is useful for tailoring the process to support a particular group of users. As an example an overlay could be created to assist the ‘Problem setters’ since these may be military personnel with little or no Modelling & Simulation (M&S) experience. The overlay would complement the main project management plans and define in detail what tasks they have to do and give other useful information such as points-of-contact.SEMT User InterfaceFigure 6 shows a representation of what the user interface of the SEMT might look like. It comprises of the following 6 regions:Title BarThis contains the name of the currently open project or is blank if no project is open.Figure 6	Proposed User Interface for SE Management ToolMenu BarThis provides drop-down menus for selecting particular tool functionality. File menu - provides functions for opening, saving and closing SE projects.View menu – provides options for selecting what data is displayed.Overlays – enables particular a overlay to be displayed.Tools – launches selected SE tool.Help – displays help topics for using the SEMT and information about the SEDEP.Main Display AreaThe main display area is where the data is displayed. The SEMT and other SE Tools that have implemented the Euclid 11.13 Tool API can display information directly in this area.It is envisaged that the type of data displayed in this area would include the following:Repository entries – this displays all the repository entries associated with a project as a tree structure. The Project Administrator defines the structure of the tree at the start of the project. Clicking on a repository entry will launch the tool used to create the data.Metrics – when a repository entry is saved, an estimate is made of how complete it is. The metric view displays the repository entries with a figure displaying the percentage complete.Tools – this displays all the tools associated with the project. Clicking on a tool will launch the tool.SEDEP – this gives an online description of the SEDEP. For each SEDEP step the following information is provided: overview, data flow diagram, inputs, outputs, activities, best practices.Tool Bar The project tool bar is configurable and contains icons for launching tools that a user regularly uses in a project. SEDEP Step FiltersThe SEDEP step filters enable only the data associated with a specific step to be displayed, which helps to de-clutter the screen. For example, if the Step 4 filter had been selected, only data associated with Step 4 would be displayed.Status BarThe status bar displays messages to inform the user about what the tool is doing. Tools that implement the Euclid 11.13 API can write to this area of the screen directly.Knowledge baseThe knowledge base will be stored in the repository and used by the tools to help the different types of user in the creation and utilisation of an SE. To simplify management of the knowledge base, the information will be distributed among different repository entries.The type of information stored in the repository will include:Information about available SE assetsOn-line SEDEP description Templates for SEDEP documentationInformation about SE best practicesLessons learntApplication of SEs in different domains e.g. Training, Rehearsal, Acquisition.Characteristics of problems that SEs are good at solvingIn addition to the repository entries containing the above information, the SEMT will provide the capability for annotating every repository entry. It will be possible for every user to provide their own comments about the information contained in the repository entry. This can be kept private to the user or made available to others.SEDE VisionUser RolesThere are two main roles for people using the SEDE; the SEDE users and the SEDE administrator. The SEDE users are the people who create and access the information in the repository. These include the SE Problem setters, SE Problem solvers and SE implementers. The SEDE administrator is the person responsible for setting-up the SEDE, connecting with other repositories, maintaining the availability and integrity of the data in the repository and for configuring the SE Management Tool to satisfy the needs of an SE project. Figure 7  Example Repository EntriesUse of the SEDEIn the following paragraphs, the numbers in brackets refers to the numbered items in Figure 7.At the start of an SE project the SEDE administrator has to set-up the repository entries that will contain the project’s data and to configure the SEDE. The repository will initially contain information about available SE assets (1) and repository entries containing data from previous SE projects (2) that can be re-used. It should be noted that all repository entries can be referenced by more than one SE project. The SEDE administrator will use the SEMT to make a new SE project. This creates an empty repository entry for all the typical repository entries required for storing the SE project data (3). These would include repository entries for storing the project schedules, user requirements, federate design, Federation Object Model (FOM), test information etc. In addition it will create an overarching SE project repository entry (4) that contains the links to all these other repository entries. The SEDE administrator can edit the default list of repository entries so that they can be tailored to meet the particular requirements of an SE project. Initially the header information in these repository entries will contain default data about the project and the bulk data will be empty.Once the high-level requirements for an SE have been defined, the SE Problem solver will use the SEMT to perform a search of the repository for SEs that satisfy similar requirements. The use of Artificial Intelligence (AI) techniques is being used in Euclid 11.13 to support these complex searches. If a suitable baseline project (or projects) can be found, selected project repository entries (2) can be copied and linked to the new project. Some of the repository entries associated with an SE project will contain information for configuring the SEMT (5) and for specifying users profiles (6). Configuration options will include specifying the tools to be used by the SE project and for defining overlays (see section 6.4.1). The user profiles will contain information about a user’s access rights. SEDE users will also be able to configure the SEMT to support their own requirements. As an example, an SE Implementer will be able to configure his GUI to be able to launch commonly used tools e.g. OMDT, from the toolbar.An important aspect of the SEDE concept is that it is scalable. For small SE programmes, it can be run on a single computer or Local Area Network (LAN), whereas for large collaborative programmes, it can be distributed over many sites. The actual implementation will be influenced by the requirements of the SE project it is being used on. Figure 8 Typical Configuration of Repository NodeFigure 8 shows how the SEDE may be implemented in practice. Local clients access the repository node across a local area network (LAN). Each client PC will run a copy of the SE Management Tool along with any other SE tools that a particular user requires. Since the clients communicate using the secure Internet protocol (https), from a technical point of view, it is a simple matter to have remote clients connected to the repository node. If the Euclid 11.13 objective of setting-up a pan European repository comes to fruition, SEDE users will want access to this information. For an SE project handling classified information it may be necessary to maintain an air gap between the SEDE and the public repository as shown in Figure 9. In this case a local or remote client will connect to a public repository node and the data will have to be hand carried between independent public and private networks.Where a consortium is working together on an SE project, SEDEs in different organisations can be connected over secure WANs. Each site will be responsible for setting-up and maintaining its own repository node. This gives them complete control over what repository entries can be accessed by other organisations.ConclusionsThe need for an SE Development Environment (SEDE) to promote the exploitation of SEs has been identified to support team working and re-use of assets. The SEDE concept being developed in Euclid 11.13 provides the functionality required to support SE projects and will be flexible enough to support a wide range of users and uses. A fundamental decision about its inception is that it should build upon and extend the process and tools defined by the High Level Architecture (HLA). The SE Development Environment described in this paper is currently in the design phase. A prototype version of it will be available at the end of the Programme (November 2003). Because it would not be in anybody’s interest to have two competing processes, it is intended that the FEDEP and the process developed by Euclid 11.13 (SEDEP) will merge so that there will only be a single SE process. This initiative has already started with the some of the ideas being proposed by the SEDEP being incorporated into the FEDEP before it becomes an IEEE Recommended Practice.Figure 9      SEDE Interfaces Part of the success of the repository relies not just on providing somewhere to store the data, since there are many commercial databases that can do that but in characterising the data it contains. There have been many instances of databases being set-up where it is necessary to get the name of a repository entry exactly right before it will be returned by a search engine. Also, the success of implementing a pan European repository containing information about SE assets relies on validating the accuracy of the information before storing it and on having the discipline to keep the data up to date.In order to encourage the use of the SEDE, the possibility of releasing the software as shareware is being investigated so that it can be used/extended by the SE community. It is hoped that the SEDE will be accepted by organisations and will become a standard component of the SE ‘Tool Kit’ that will be further developed by the SE community after Euclid 11.13 has finished. In particular, the possibility of the Euclid 11.13 repository being adopted by NATO is being pursued. Obviously, the ultimate success of this initiative will depend on if a champion can be found to promote the concept at the end of the programme and how useful organisations find it.AcknowledgementsI would like to acknowledge the help of my colleagues at TT&SL and the Euclid consortium with the preparation of this paper.References[1]	K. J. Ford, Euclid RTP11.13 Realising the Potential of Networked Simulation in EuropeEuropean SIW, June 01, Paper 01E-SIW-011.[2]	J. Bachman, S. Goss, M. McAuliffe, CAFDE TDK: Facilitating Tool Interoperability and FEDEP Automation, Spring SIW , March 1999, Paper 99S-SIW-031.[3]	High Level Architecture Federation Development and Execution Process (FEDEP) Model, Version 1.5, December 8 1999.[4] K. J. Ford, The Euclid RTP 11.13 Synthetic Environment Development & Exploitation Process, Fall SIW, September 01, Paper 01F-SIW-124.[5]  Western European Union Security Regulations, RS100, Edition January 1996, WEU Unclassified. EMBED Word.Picture.8  