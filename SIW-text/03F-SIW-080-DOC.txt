Capturing Intent-Of-Use Meta-Data for the Conceptual Model –A Key to Component ReusePaul GustavsonSimVentions, Inc.3330 Bourbon Street, Ste 129Fredericksburg, VA 22408(540) 372-7727 HYPERLINK "mailto:pgustavson@simventions.com" pgustavson@simventions.comPhil ZimmermanChris TurrellDefense Modeling Simulation Office (DMSO)1901 N. Beauregard St., Ste 500Alexandria, VA 22311(703) 998-0660 HYPERLINK "mailto:pzimmerman@dmso.mil" pzimmerman@dmso.mil HYPERLINK "mailto:cturrell@msiac.dmso.mil" cturrell@msiac.dmso.milKeywords:  Composability, Components, BOMs, Conceptual Model, Reuse, FEDEPABSTRACT: Composability has been defined as “the capability to select and assemble components in various combinations into complete, validated simulation environments to satisfy specific user requirements across a variety of application domains, levels of resolution, and time scales.” - Mikel Petty.  The key to promoting the development and reuse of such components is capturing “what” a model is to represent and “how” a model is to behave.  This is identified as the “intent-of-use” commonly associated with the conceptual model, which “serves as a frame of reference” tied to initial user requirements. This “intent-of-use” should be derived early in the development process (FEDEP Steps 1 & 2), however it is often missed due to the lack of a common mechanism and tools.  This paper explores the meta-data elements needed to catalog intent-of-use, which can be affixed to a Base Object Model (BOM).  We further explore how intent-of-use meta-data can be matched with applicable BOMs thereby supporting the reuse of “patterns” and “components.”  The affect of this approach helps to expedite the federation development process.1. IntroductionAt some point during a federation development effort there are invariably issues and stumbling points that affect production or team communication.  Ultimately, we may only hear about (or want to talk about) the successes, but even among the more successful efforts, issues and hurdles often crop up that impede a project’s progress or impact the cohesion of a team.  1.1 Identifying the ProblemThe most common development issue is in understanding and communicating requirements to all team members throughout the development process.  Survey any development effort and you’ll likely come across this problem, although it’s often not evident or admitted by the team members until a project’s conclusion.  Yet it is prevalent in our industry and other related development industries.  For instance, in the game development industry, which is technically comparable to modeling and simulation, this problem is widespread.  Figure 1 illustrates the common management related development issues among twenty-four game development efforts – these are for titles that, despite their development troubles, were still fortunate to make it onto store shelves.  Figure 1 – Management Related Game Development IssuesWhether it’s due to a lack of understanding, lack of motivation or just unbridled enthusiasm, we find that 43% of these development projects suffered in capturing a requirements and design plan and/or carrying it forward through the development process. 1.2 Identifying a SolutionWhat is needed is a bona fide way to capture and carry forward the conceptual model metadata, which identifies both requirements and intent (or purpose) as prescribed in the Federation Development and Execution Process (FEDEP).  A conceptual model describes “what the [simulation or simulation enterprise] will represent, the assumptions limiting those representations, and other capabilities needed to satisfy the user’s requirements.”   There are three potential reasons why we have not offered or selected a mechanism for capturing and carrying forward the conceptual model:General Lack of Understanding – Developers do not understand the benefit in capturing a conceptual model, which reflects the needs and wants of the user or sponsor.  In general, the benefit of the conceptual model is not yet understood.Lack of Clarity – Despite the guidance in the FEDEP for defining and using a conceptual model, developers do not yet envision what a conceptual model should look like, therefore they do not know how it should be captured.Technology Inefficiencies – The technologies and standards that we’ve built and tried to integrate are not mature enough or adaptive enough to support carrying forward the conceptual model.These issues are interrelated; clarity can’t exist if there is no clear understanding of the benefit, and the maturation of technology is dependent upon understanding (knowing what needs to be done) and clarity (knowing what a conceptual model should carry).In this paper; we will explore each of these deficiencies, and offer a solution centered upon capturing the “intent-of-use meta-data” that is reflected by a conceptual model.   Furthermore, we’ll examine how this meta-data serves as a key to component reuse supporting a technology standard such as Base Object Models (BOMs), and how it might enable and expedite the development of composable mission space environments.2. Lack of UnderstandingIn order to understand and drive home the need for capturing and carrying forward a conceptual model, we really need to observe the development mindset.   2.1 Development MindsetWhen a development team begins a new project, the enthusiasm can often be quite high.   A natural inclination is for the development team to jump right into development after project award with very little time spent up front on analysis and design. The natural instinct is to think that the greatest amount of progress will occur once the developer begins to pound out code from the keyboard.  The consequence is “code spun on impulse.”  Schedule and financial constraints often add to this state of mind.  In addition, today’s tools, especially within the software industry, facilitate and feed a developer’s appetite, because they have evolved to visual and component rich environments, which encourage creativity.  For instance, Integrated Development Environments (IDEs) like Visual Basic, Delphi, and JBuilder all provide component rich Rapid Application Development (RAD) frameworks. While powerful, these RAD tools can spawn creativity that is often un-tethered to requirements and unregulated, which results in a product that is entirely different than what may have been initially conceived. Despite all of the technological capabilities and tools, in the heat of the battle, before the delivery is due, a development team may end up working through weekends or staying up half the night to revamp and complete a program because there was a failure to understand the requirements that were to be met.  This lack of understanding results in poor communication among team members and incompatible modules and federates.  It’s often recognized too late that if more emphasis was spent up front on analysis and design, many of the later-day coding, quality control and communication issues would have not surfaced.Developer Richard Wykoff relates this experience in the aftermath of developing DreamWork Interactive’s Trespasser. The biggest indication that Trespasser had game design problems was the fact that it never had a proper design spec….  Trespasser started and finished weak in the game design, and this affected every other part of the project.  Brian Upton, developer of Red Storm’s Rainbow Six, echoes this issue as well.“We never had a proper design document, which meant that we generated a lot of code and art that we later had to scrap. What’s worse, because we didn’t have a detailed outline of what we were trying to build, we had no way to measure our progress (or lack thereof) accurately. We only realized that we were in trouble when it became glaringly obvious. If we’d been about the design rigorous up front, we would have known that we were slipping much sooner.”Ultimately these comments reflect a common theme; time upfront was not taken in conceiving a conceptual model that captured the intended features and capabilities for these games.  Such a conceptual model would have yielded an appropriate and useful design supporting the development phase and improving communication.  2.2 Increasing the Level of AwarenessTo ensure understanding that the conceptual model needs to be captured and carried forward, a good policy and process for the software development effort is necessary.   The policy should be that requirements are captured, the project is planned and tracked, and quality assurance (QA) and configuration management (CM) are in place.  There are other elements that can be added as well, but these are the essentials.  The process to support this policy must focus on analysis and design resulting in the production of a conceptual model.   Within the simulation community, the FEDEP provides a high level framework that encourages the production of a conceptual model and that it is leveraged through the rest of development.     This is illustrated in Figure 2.  If it’s not carried forward in this manner – applied and used at the various stages of development – then how will it be known that the objectives have been met and satisfied?Figure 2 – FEDEP Steps 1 through 4Conceptual modeling can aid in the requirements definition process (FEDEP Step 1).  The concept of early prototyping, giving the customer something to look at, touch, and feel often helps them clarify in their own minds what it is they are really after. A conceptual model is that prototype. Otherwise, the developer may in fact produce exactly what they “thought the customer wanted,” when in all probability the customer only has a vague notion, carrying the attitude, "I don't know what I want, but I'll know when I see it."The conceptual model resulting from FEDEP Steps 1 and 2 forms the blueprint for the remaining development activities starting with the design phase (Step 3), and can be used to improve the baton handoffs that occur between the various engineering disciplines.  Without a development process that centers on the conceptual model, we find that many things can go wrong.   Therefore, it is important to have an understanding of why capturing the conceptual model is vital, and having a process in place like the FEDEP helps facilitate that understanding and increase the level of awareness.3. Lack of ClarityWhile processes such as the FEDEP provide the basis for direction and understanding of why a conceptual model is important, mechanisms for capturing design are still needed. This not only includes tools, but templates and techniques for documenting and illustrating design. In fact, the tools are useless unless you have a common mechanism for capturing the design in ways that can facilitate communication and provide direction in the development process. In order to offer such a mechanism, a common vision of the internals of a conceptual model must be realized and agreed upon within the community.  Otherwise, this lack of clarity of what a conceptual model should look like will continue to hamper development, and ultimately limit our technological growth in regards to interoperability, reuse, and composability.  Therefore, we must identify the essential elements desired of a conceptual model so that we can offer an adequate mechanism for capturing and carrying forward the conceptual model.3.1 Conceptual Model AttributesThe essence of a conceptual model is that it captures the “intent-of-use,” and serves as a “frame of reference” traced back to initial user requirements. We know this because the FEDEP portrays that the conceptual model should be captured early based on sponsor objectives defining what is intended and then should be applied to other stages of development for whatever specific process we may ultimately use, such as a spiral, waterfall, or RAD model.   In essence, the conceptual model is universally applicable to a myriad of specific development processes and is not just limited to federation development. With this in mind, we can begin to breakdown the essential elements of this universally applicable conceptual model by examining the various definitions and descriptions afforded to us. We start with the FEDEP, which describes that the conceptual model provides… “an implementation - independent representation that serves as a vehicle for transforming objectives into functional and behavioral capabilities.”  There are several aspects needed of a conceptual model that we can deduce from this statement; they include:A conceptual model should be independent from a specific platform operating system or language, The conceptual model is a representation “vehicle,” which means it must have structure or format, andThe conceptual model is used to map objectives into capabilities; it therefore should provide traceability.Furthermore we know from the Simulation Interoperability Standards Organization (SISO) Study Group on Simulation Conceptual Modeling (SCM), that a conceptual model should describe… “what the simulation will represent, the assumptions limiting those representations, and other capabilities needed to satisfy the stakeholder’s requirements.”     From this statement we can deduce that a conceptual model captures “what” a model is to represent based on sponsor objectives [or stakeholder requirements].Within the DoD, composability is further defined as follows:“a statement of the content and internal representations which are the user's and developer's combined concept of the model.  It includes logic and algorithms and explicitly recognizes assumptions and limitations.”  We can conclude from this statement that not only does a conceptual model capture “what” a model is to represent, but should also capture “how” a model is to behave.    An additional definition of conceptual models contained in the DoD Verification, Validation, and Accreditation (VV&A) Recommended Practice Guide, underscores this impression.  “A collection of information that describes a developer's concept about the simulation and its constituent parts.  This information includes descriptions of entities, objects, algorithms, relationships (i.e., architecture), and data as well as assumptions and limitations.”  The one thing lacking in this specific definition is a focus on the user’s concept of the model, however we do see emphasis on identifying “what” a model is to represent through the “description of entities [and] objects” and “how” a model is represented through the inclusion of “algorithms [and] relationships.”  Any assumptions or limitations must be included as well. Assumptions and limitations were also identified as essential conceptual model elements in the SISO SCM Study Group definition.The collection of these pieces provides a clearer vision of what a conceptual model should look like.  Specifically the discernable attributes of a conceptual model are as follows:An implementation independent vehicle Describes functional and behavioral capabilities Maps to objectives / stakeholder requirements Identifies entities and objectsIdentifies logic and  algorithms Identifies relationships Identifies assumptions Identifies limitationsUltimately, these are the attributes of a conceptual model used to describe what a model is and how it is represented.  With these attributes in hand, we can begin to identify and recommend a semi-formal mechanism for capturing these essential conceptual model elements. 3.2 A Semi-Formal Mechanism for Conceptual Models Rather than defining and introducing a brand new mechanism for representing a conceptual model based on the attributes we’ve identified, let us look at what is already available to the development community.  Specifically, let us examine the capabilities offered by Use Cases and Class Diagrams, which are commonly used in the Unified Modeling Language (UML).Combined, these approaches provide an independent and semi-formal mechanism for capturing “what” a model is to represent and “how” a model is to behave.  Furthermore, this combination provides a means to include assumptions and limitations, which are essential attributes of a conceptual model.3.2.1 Use CasesOne of the principal components of UML are Use Case diagrams, which are intended to visually identify goals and objectives for a software program, system (or simulation). It includes the identification of actors, which are external entities that have behavior that interacts with the software program system, and a scenario, which details the sequence of steps and events that will be executed to accomplish the stated goal.  Use Cases help minimize the risk associated with poor requirements definition and analysis. Other than acceptance of Use Cases within UML as a visual diagramming vehicle, a formal structure for defining Use Cases in the narrative was never pursued by the originator and principal advocate of the Use Case concept, Ivar Jacobson.  When asked why he had not considered introducing a formal model for use cases, Jacobson replied, "Oh, I have a formal model for use cases, all right. The only problem is that no one wants to use it."   In part, he’s correct since we recognize that developers tend to avoid formally identifying the conceptual model, but, as we’ve shown, that is often due to lack of understanding and lack of clarity.  In fact, noted object-oriented technologist and author Alistair Cockburn, recognized that “Leaving use cases completely informal introduces other difficulties… People ask: "What are these "use case" things, really?" "How do I know if I am doing them right?" "How do I know when I am done?" and "How do I link large numbers of them?"”Cockburn realized that leaving use cases completely informal introduced a number of issues and uncertainties for designers and developers, such as not knowing if they were being captured properly or when the were done.  He shares “Jacobson kept publishing books and articles about use cases, but somehow the confusion [of how to capture them] persisted.”  He adds, “I recognized, as many people did, that these descriptions of system-wide behavior naturally complement the component-oriented internal descriptions that came out of object-oriented designs. So I, as so many others, started to unravel the riddle, "what is a use case."”  Recognizing the need, Cockburn set off to define a semi-formal way to capture Use Cases.  The result of his effort was the production of a template, which we call Cockburn’s template. These templates allow team members to identify functional requirements including the scope, actors, pre and post conditions, and the scenario steps (logic) associated to accomplishing the requirement objective (see Figure 3).   INCLUDEPICTURE "http://www.simventions.com/whitepapers/uml/usecasetemplate.jpg" \* MERGEFORMATINET Figure 3 - Use Case Template ExampleWe can further expand on the Scenario Steps of the Use Case by identifying any potential Exceptions and Variations (see Figure 4).  This element maps with the Conceptual Model attributes needed to support known limitations. INCLUDEPICTURE "http://www.simventions.com/whitepapers/uml/usecasescenario.jpg" \* MERGEFORMATINET Figure 4 - Use Case Template Exceptions and Variations ExampleTable 1 provides a mapping illustrating how the various elements of a use case can be used to represent specific conceptual model attributes.    Table 1 – Conceptual Model Attribute – Use Case Element RelationshipConceptual ModelAttributesRelated Use Case ElementsFunctional and Behavioral CapabilitiesTrigger Events, Scenario StepsObjectives / Stakeholder RequirementsTitle and GoalEntities and ObjectsActorsLogic and Algorithms  Scenario StepsRelationshipsAssociatedUse CasesAssumptionsPre / Post conditionLimitationsExceptions and VariationsAs shown in this table, Use Cases provide a very clean, distinct representation for a  conceptual model.  Another element of the relationship attribute that can be satisifed is through the hierarchial grouping of Use Cases that naturally occurs.  Once all the Use Cases begin to get flushed out at the different levels, it begins to shape into a hierarchical model of the anticipated system (see Figure 5).  This helps establish the relationship aspect of the overall conceptual model. INCLUDEPICTURE "http://www.simventions.com/whitepapers/uml/blueprint.jpg" \* MERGEFORMATINET Figure 5 - Use Case Hierarchy - Juke Box Conceptual ModelThe first level of Use Case hierarchy is known as the “summary level”. This is where the “stakeholder’s requirements” can be captured and the overall general requirements are defined. They are very high level, but once that effort is complete, the “primary task” and “sub-task” level Use Cases can be identified. This is the meat of what the system, simulation or game is going to need to do to accomplish those “summary” stakeholder related Use Cases. Use Case Templates provide a solid yet simple mechanism for nailing down requirements and  providing the basis for the conceptual model.   It should be noted that we can also take this information and visually represent it in UML (as shown in Figure 6).   INCLUDEPICTURE "http://www.simventions.com/whitepapers/uml/usecasediagram.jpg" \* MERGEFORMATINET Figure 6 - Use Case Diagram for Creating a Play List for a Juke Box3.2.2 Conceptual Level ClassesAnother technique that can be applied to support the conceptual analysis effort is the use of Class diagrams. If you are a developer, you probably are no stranger to the concept of classes. Classes are an important aspect of object-oriented software. When we recognize a pattern in which there are a common group of things that have similar attributes and behaviors, we typically represent that as a class.  The development team should start out by laying out the fundamental elements that will be needed to support the objectives identified in the Use Cases.   Developing at the conceptual level helps to keep a perspective that is language and platform neutral (independent).   Also, focus should be spent only on the essential pieces needed to make a simulation, system or game work. The mindset should be to look at it from a user’s perspective (much like what was done when starting out with developing Use Cases).If we were to use UML, which is recommended at this level, we could graphically represent these conceptual level classes as shown in Figure 7.Figure 7– Conceptual Level Classes for a Soap Box Derby SimulationSince this is the conceptual level, the classes are kept abstract. The goal is to identify the types of entities and objects we anticipate for our simulation, system or game. These class diagrams sketch out the concepts identified within the Use Cases.  For some of these classes, we have also identified a few attributes we anticipate, and the potential operations.  This allows us to identify other essential conceptual model elements desribing both “what” a model is being represented to do, and “how” the model is to behave.4. Technology InefficienciesIt can be argued that because we have not previously formulated a common understanding of what a conceptual model is to be, we have limited ourselves in being able to allow the conceptual model to be carried forward within the technology that we use.The HLA OMT 1516 document, for example, leaves very little room for tacking on a conceptual model within a FOM or SOM.  The only leverage it provides is a Notes field.  The conclusion we can draw from this is that the technology, at the time it was implemented, wasn’t significantly mature enough to be able to append and carry forward the conceptual model information.   Perhaps, if we had a clearer vision as to what should have been captured and contained within a conceptual model (and understood the true benefits of applying a conceptual model), the technology would have allowed inclusion of the conceptual model.4.1 Emerging TechnologyFortunately, one simulation technology that is currently being developed with the conceptual model in mind is BOM.   To make a component-based approach, such as BOMs work, the intent-of-use, which is attributed to the conceptual model, must be captured, catologed and carried forward within the component.   Likewise, before a simulation or simulation enterprise (i.e., federation) is composed, the objectives of the desired simulation or simulation space should be identified (FEDEP Step 1) and translated into the conceptual model (FEDEP Step 2).  As we’ve discussed, this serves to help provide “a crucial traceability link between the federation objectives and the design implementation.”  The conceptual model captured during FEDEP Steps 1 and 2 can serve as a blueprint for development, testing, planning and analysis.  “In fact, the conceptual model can support development at the molecular level, assisting in shaping the basic structure or form of a composable mission space environment.  This support is accomplished in one of two ways: The conceptual model can be applied and used to identify existing components needed to support the composition of the desired simulation or simulation enterpriseIf a component does not exist, a conceptual model provides the basis for documenting the interface for a component such as a BOM.”The operational objectives identified within a BOM’s “intent-of-use” meta-data can be used to determine the potential BOMs to be built or used.  4.2 Enabling Component Reuse & DiscoveryThe intent-of-use meta-data can be matched with applicable BOMs, thereby supporting the reuse of “patterns” and “components”.  The affect of this approach helps to expedite the federation development process.Once FEDEP Step 2 is complete, “the conceptual model information that has been captured can be used as meta-data in matching potential BOMs stored within a repository, to needs expressed by the developer.  This process can be easily automated as long as a standardized, language independent format (prescribed by a schema) is used to capture the conceptual model for both the simulation and the individual BOMs.  The language must be parsable, which means it must be unambiguous.   The other necessary element is access to a repository that can provide meta-data matching.  Ideally, this meta-data matching would be automated through the use of SQL queries or better - web services.   These two elements are currently being investigated by the Defense Modeling Simulation Office (DMSO) and within SISO.”5. SummaryA common problem within the development community is that there is very little effort taken up front in laying out the goals and design for the project.  This is the essence of a conceptual model.  The conceptual model is used to capture “intent-of-use” and “serves as a frame of reference” traced back to initial user requirements.   We recognize that this “intent-of-use” should be derived early in the development process (FEDEP Steps 1 & 2).  However, as we’ve observed, this activity is often missed or disregarded.We surmised that there is likely one of three reasons why the conceptual model is not captured and used:The importance of capturing and carrying forward the conceptual model prior to development is often not realized by a development team. This lack of understanding affects the productivity and communication of the development team.  The resolution is to set policy and prescribe a process, such as the FEDEP, that emphasizes the use and application of the conceptual model throughout the development process.Despite the guidance in the FEDEP, a lack of understanding of what a conceptual model should look like and how it should be captured persists within the development community.  This lack of clarity has stifled the development of mechanisms (and tools) for capturing the conceptual model.   As a resolution, we identified the necessary attributes of a Conceptual Model and recommended the use of Use Cases tied with Class Diagrams to capture and carry forward the conceptual model.The technologies that have been built and used have been immature; lacking the vision and flexibility for applying and carrying forward the conceptual model.  These technology inefficiencies have hindered reuse, discovery and adaptability within the M&S community.   The resolution is the development of component based standards, such as Base Object Models (BOMs), which is being developed with the conceptual model in mind. We’ve shown that Use Cases provide an “extremely effective mechanism for capturing the functional requirements of a project, and they can be used to direct the development of a project.” The collection of Use Cases serves as the initial Blueprint that feeds into the design, coding, testing, and validation activities of the project. If documented and used properly, Use Cases in combinaion with Class diagrams minimize the risks associated with analysis, design, development, and deployment and provide the basis of the conceptual model.   Finally, we explored the application of the conceptual model in enabling reuse and discovery of Base Object Models (BOMs) and potentially other technologies for supporting the composable mission space environment (CMSE). The result is a more efficient and streamlined approach capable of supporting the model-driven development of simulations, systems and business enterprises.ReferencesCockburn, A. “Use Cases, Ten Years Later” STQE magazine, Mar/Apr 2002.DoD M&S Glossary,  DoD 5000.59-MGamasutra, “Post Mortem Features” www.gamasutra.com.Gustavson, P., “Fitting the UML into your Development Process” Paper # 6000, Borland Developer’s Conference, May 2002Gustavson, Root, Zimmerman, Turrell, “Conceptual to Composable: Driving Towards Rapid Development of Simulation Spaces” Paper #1427, I/ITSEC 2003.Root, McAuliffe, Oesterheld, “Development Baton Handoffs” 03F-SIW-013, Simulation Interoperability Workshop, Sep 2003.IEEE, HLA Federation Development and Execution Process (FEDEP) Model, IEEE 1516.3, 2003.Terms of Reference (TOR) for the SISO Study Group on Simulation Conceptual Modeling,  SISO, March 2003Reichenthal, Gustavson, “Manufacturing BOMs with SRML for Process-Oriented Federations” 03FSIW-109, Simulation Interoperability Workshop, Sep 2003.Upton, B., “Postmortem: Red Storm's Rainbow Six” Gamasutra, January 21, 2000.Wyckoff, R., “Postmortem: DreamWorks Interactive’s Trespasser” Gamasutra, May 14, 1999.BiosPAUL GUSTAVSON is a co-founder of SimVentions, Inc. and long-time advocate of the Base Object Model (BOM) concept and simulation composability. Paul has over 14 years of computer engineering experience supporting a wide variety of modeling and simulation, software development, and web technology efforts within the DoD and commercial communities.  He is also a principal author of “C++ Builder 6 Developer’s Guide,” a contributing author of “C++ Builder 5 Developer’s Guide,” and the technical editor for “SAMS Teach Yourself UML (2nd Edition).”  Philomena (Phil) Zimmerman has worked over 20 years in the development, testing, and management of software for the DoD.  In the last 13+ years, she has worked in the area of simulation software development, management, and application.  She is currently employed by the Naval Research Labs, in the Advanced Information Technology Department, and for the last 3 ½ years has been detailed to the Defense Modeling and Simulation Office (DMSO), most recently as the Associate Director for Composable Mission Space Environments.  Previously, at DMSO, she has served as the High Level Architecture (HLA) Program Manager, and the Associate Director for Joint Programs.  She has been involved with this community since 1992, and is currently the SISC chair, the DMSO liaison to the SISO EXCOM, and lead of the Composable Mission Spaces forum for SISO.CHRIS TURRELL is a Senior Simulation Analyst with Alion Science and Technology, Inc. of Alexandria, VA where he is the technical lead for the Defense Modeling and Simulation Office, High Level Architecture program.  His background includes service as an Army Officer, fielding and site operations management for the DARPA Simulation Networking (SIMNET) Program, support of numerous DARPA Technical Demonstrations, and Operations Officer of the Institute for Defense Analyses, Simulation Center.  He is actively involved in Defense Modeling and Simulation Office’s High Level Architecture and Composable Mission Space Environments programs and participates in related IEEE and SISO standards development activities. IEEE, HLA Federation Development and Execution Process (FEDEP) Model, IEEE 1516.3, 2003. Gustavson, “Fitting the UML into your Development Process” Paper # 6000, Borland Developer’s Conference, May 2002 Gustavson, “Fitting the UML into your Development Process” Paper # 6000, Borland Developer’s Conference, May 2002 Richard Wyckoff, “Postmortem: DreamWorks Interactive’s Trespasser” Gamasutra, May 14, 1999. Brian Upton, “Postmortem: Red Storm's Rainbow Six” Gamasutra, January 21, 2000. Root, McAuliffe, Oesterheld, “Development Baton Handoffs” 03F-SIW-013, Simulation Interoperability Workshop, Sep 2003. IEEE, HLA Federation Development and Execution Process (FEDEP) Model, IEEE 1516.3, 2003. Terms of Reference (TOR) for the SISO Study Group on Simulation Conceptual Modeling,  SISO, March 2003  DoD M&S Glossary,  DoD 5000.59-M Gustavson, “Fitting the UML into your Development Process” Paper # 6000, Borland Developer’s Conference, May 2002 A. Cockburn, “Use Cases, Ten Years Later” STQE magazine, Mar/Apr 2002. A. Cockburn, “Use Cases, Ten Years Later” STQE magazine, Mar/Apr 2002. Gustavson, “Fitting the UML into your Development Process” Paper # 6000, Borland Developer’s Conference, May 2002 Gustavson, “Fitting the UML into your Development Process” Paper # 6000, Borland Developer’s Conference, May 2002 Gustavson, Root, Zimmerman, Turrell, “Conceptual to Composable: Driving Towards Rapid Development of Simulation Spaces” Paper #1427, I/ITSEC 2003. IEEE, HLA Federation Development and Execution Process (FEDEP) Model, IEEE 1516.3, 2003. Gustavson, Root, Zimmerman, Turrell, “Conceptual to Composable: Driving Towards Rapid Development of Simulation Spaces” Paper #1427, I/ITSEC 2003. Gustavson, Root, Zimmerman, Turrell, “Conceptual to Composable: Driving Towards Rapid Development of Simulation Spaces” Paper #1427, I/ITSEC 2003. Gustavson, “Fitting the UML into your Development Process” Paper # 6000, Borland Developer’s Conference, May 2002. Reichenthal, Gustavson, “Manufacturing BOMs with SRML for Process-Oriented Federations”, 03F-SIW-109, Simulation Interoperability Workshop, Sep 2003.