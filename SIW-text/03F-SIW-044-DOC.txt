MDA and HLA:  Standards-Based Support to Development, Integration and Test of SIAP Integrated Architecture or MDA® and HLA:  Applying Standards to Development, Integration and Test of the Single Integrated Air Picture Integrated Architecture Behavior ModelDr. Judith S. DahmannPrinciple ScientistThe MITRE CorporationCaptain Jefferrey W. Wilson, USNTechnical DirectorSingle Integrated Air Picture System Engineering Task Force…..Keywords:Model Driven Architecture®, High Level ArchitectureAbstractABSTRACT: The Object Management Group’s Model Driven Architecture® (MDA®) is an approach for using models in software development. MDA is based on the concept of separating the specification of the operation behavior of a system from the details of the implementation of that behavior on underlying computing and networking equipmentway that system uses the capabilities of its computing platform. MDA provides the approach and tools to specify a system independently from the computing platform that supports it and a means to then to transform the platform independent specification or model into a platform specific implementation.  The Single Integrated Air Picture (SIAP) System Engineer is using MDA to develop a behavioral representation of the distributed tactical battle management and command and control software functionality for building and maintaining a real time, integrated integrated air picture within a distributed system.  The initial distributed computing environmentplatform for implementation of the SIAP integrated architecture behavioral model is the HLA RTI.  This will allows the behavioral model to be integrated and tested in an HLA federation representing the target operational environmenenvironment, throughoutrepeatedly during the development process, using the same scenarios and metrics used to assess the current operationals systems.  Once the behavioral model performs correctlyadequately in the simulated operational environment, it will be implemented on the computing and networking equipmentplatforms of thein operational unitssystem hosts for testing and fieldingeventual deployment in an operational environment.  This paper described the concepts and approachthe implement plans for this integrated use of industry standards to support the fielding of a SIAP capabilityIntegrated Architecture.MDA-HLA Paper Outline.1. 1. IntroductionWith the advent of net-work centric warfare, defense systems are increasingly characterized as ‘systems of systems’, ‘families of systems’ or, more correctly, as elements of  simply ‘distributed systems’ which incorporate networked computing components thatwhich operate together to providesupport military capabilityies.  Desired attributes of these distributed systems no longer relate to the performance of individual components but rather to the performance of the complex of components as a whole, and the overall worth of the distributed system is assessed in terms of its aggregate support to the war fighting mission.   Development and testing of these distributed systems brings new challenges and offers opportunities for effective leveraging of standards-based approaches.  This paper describes the approach taken by the Single Integrated Air Picture (SIAP) Systems Engineering Task Forceteam to develop and test the coordinating joint tactical battle management and command and control computer programs necessary to providesoftware core to coordinated battlespace awareness and coordinated fires.  :  short summary of SIAP/JDEP and use of MDA/HLA (JSD)2. 2. SIAP Overview 2.1 Motivation. Lessons from Operations Desert Shield and Desert Storm in 1990 and 1991 convinced Department of Defense leadership to invest in materiel and non-materiel improvements in combat identification capability. On the materiel side, these improvements included providing better cooperative and non-cooperative sensors on individual warfighting units. The Department also sought ways of exchanging this information among warfighting units – initially centered on the then predominant air defense-oriented tactical data link, Link-11, and the emerging tactical data link, Link-16. On the non-materiel side, the Department initiated the Joint Air Defense Operations/Joint Engagement Zone (JADO/JEZ) Joint Test and Evaluation (JTE) Joint Task Force (JTF). The mission of JADO/JEZ JTE JTF was to evaluate materiel and non-materiel approaches to improving combat identification capability. JADO/JEZ JTE JTF ran three large evaluation events, resulting in a number of significant and conclusive findings; among these were findings related to errors in the application layer protocols (expressed in tactical data link standards), in the implementations of these standards, and incompatibilities introduced by the concurrent use of data exchange mechanisms (tactical data links) with different semantics.The JADO/JEZ JTE JTF charter expired at the end of FY94; the established team was retained under a new name (All-Service Combat Identification Evaluation Team (ASCIET), later Joint Combat Identification Evaluation Team (JCIET)), with a charter under what was, at the time, United States Atlantic Command (USACOM). The team conducted field evaluations in 1995, 1996, 1997, 1999, 2000, and 2002. Evaluation reports continued to show capability shortfalls, related to the application layer protocols and their implementations. One of the findings that was initially surprising was that the warfighting capability of the distributed system appeared to degrade with improvements in communication system reliability (connectivity). Data that was once lost in transmission was being received, and conflicts between locally-held data and data received from other peers resulted in increased operator alerts and failures to achieve concurrency among track databases within the distributed system.In the mid-1990’s, there was an emerging consensus that a shift to “network centric warfare” would result in significant gains in warfighting effectiveness [1]. Operating as part of a network would allow individual units to gain the benefits promised by “Metcalf’s Law of the telecosm”, which claims that the value of a network scales as the square of the number of machines [2]. The mid-1990’s also saw the increase in warfighting units that incorporated Link-16, and introduction in the U. S. Navy of the Cooperative Engagement Capability.The mid-1990’s also marked a continued emphasis on ballistic missile defense and a heightened emphasis on cruise missile defense, particularly over land. The Joint Theater Air and Missile Defense Organization (JTAMDO) formed in 1997 in response to the increased cruise missile defense emphasis, and then-CINCUSACOM initiated a series of annual flag and general officer conferences specifically targeted at air and missile defense issues in 1998. In a related effort, the Director, Joint Staff J-8 and the Under Secretary of Defense (Acquisition, Technology, and Logistics) embarked on an approach to build a Joint Distributed Engineering Plant (JDEP), whose purpose would be to support developers, testers, and operators in improving joint warfighting capability. The Joint Requirements Oversight Council (JROC) decided in 1999 to pursue options aimed at improving tactical interoperability and achieving a single integrated air picture; the JROC decided, in 2000, to initiate the SIAP System Engineering Task Force, whose mission was to perform the engineering necessary to field a SIAP. Also in 2000, the JROC validated Capstone Requirements Documents for Theater Air and Missile Defense and Combat Identification. These actions moved the Department ever closer to realizing network centric warfare at the tactical level of war. 2.2 Requirement. Technically, the Single Integrated Air Picture is a state of mutual consistency within a weakly-connected, heterogeneous, distributed system. Specifically, a SIAP is achieved when the actionable databases (those databases that contain data upon which an automated or manual engagement decision can be made) are in a state of mutual consistency. In the vernacular, the SIAP “consists of common, continuous, and unambiguous tracks of airborne objects of interest in the surveillance area”, where “objectively, each object must have one, and only one, track identifier and associated characteristics.” [3]Tactical battle management and command and control in the aerospace warfare mission area is achieved by a distributed system. We can think of this distributed system as a mobile, ad hoc, peer-to-peer network, with individual peers also having a client-server relationship with fixed servers. The functionality of the distributed system is expressed by computers in each peer that exchange data and information via application layer protocols. Without loss of generality, we combine the application computer programs and the application layer protocols together conceptually, focusing on the application layer protocols.The “one and only one track” mutual consistency requirement would be stringent if it were levied on a homogeneous, connected network that was engineered, developed, fielded, maintained, and configuration managed by a single entity. The formal, JROC-validated requirement, though, expects us to meet this level of performance in a heterogeneous, weakly-connected network. Each of the peers in this network are the product of individual acquisition program managers (that is, those peers that are the product of formal acquisition programs; some peers are the product of operators trying to solve problems that they believe will not be solved in a reasonable time by the acquisition process), and with very few exceptions, the host computing environments could hardly be considered modular, open systems. Compounding the problems introduced by this part of the acquisition process was the way in which the application layer protocols were documented and configuration managed. Over the years, well-meaning individuals built a process by which the tactical data link standards were developed and maintained. This process did not take advantage of advances in formal methods of protocol specification; with few exceptions, it relied on natural language descriptions of syntax and semantics, and on trial-and-error to develop the application layer protocols. In the absence of an ability to characterize the behavior of the existing distributed system, there was no way to reason about the effectiveness and suitability of proposed changes in advance of their approval and implementation. Evaluation of distributed system performance, to the extent it was done at all, was accomplished through venues such as that provided by JADO/JEZ JTE JTF, ASCIET, and JCIET.This is the state of affairs that prompted action on the Joint Distributed Engineering Plant. If we could not organize to engineer, develop, field, maintain, and configuration manage a distributed system, we could at least test what we had to find out why it did not behave the way in which we wished it. As we discussed earlier, shortly after taking action to initiate the JDEP, the Department took action to charter the SIAP SE Task Force to get the system engineering work done.2.3 System Engineering Approach.  The SIAP System Engineering Task Force has been engaged in a two-pronged approach to improve tactical battle management and command and control capability within the aerospace warfare mission area. The first prong is top-down and architecture-based. Requirements flow from JROC-validated capstone requirements (e.g., Theater Air and Missile Defense, Combat Identification, Global Information Grid), through system Operational Requirements Documents, to lower level technical requirements. These requirements are documented in requirements trace databases and architecture repositories. System engineering work, such as characterizing end-to-end error and latency budgets, and evaluations of peak and sustained throughput, generates additional artifacts for the architecture repository. This top-down approach also generates mathematical descriptions of distributed system capability requirements that derived from the capstone requirements documents, and develops standard operational contexts (Common Reference Scenarios) to provide a level analytic playing field.The second prong is a bottom-up approach, focused on improving the elements we have today, in a block-upgrade fashion, within available resources. This approach assumed the Department would make available the resources necessary to effect the changes required to meet required performance levels. In the traditional acquisition model, each system would be uniquely engineered, developed, tested, fielded, and configuration managed. This approach also assumed that the individual systems had upgradable, digital representations (constructive models) in which changes could be made. These digital representations could then be interconnected to evaluate the efficacy of proposed changes before they were committed to production. The assumption that suitable digital representations existed proved false, and the approach to solving the interoperability problem by making individual, incremental changes to existing systems was significantly modified when it become obvious that the cost of this approach exceeded the resources the Department was willing to commit.The modified approach essentially merged the original top-down and bottom-up approaches. The system engineering work necessary to populate the integrated architecture continued, as did the engineering necessary to correct specific deficiencies targeted in the first two block upgrades. The architecture work populated the integrated architecture repository as originally planned – the change was to make this work do double duty. The product of the top-down and bottom-up approaches would be used to build a complete and correct, prescriptive model of the tactical battle management and command and control functionality for aerospace warfare. In the words of David Flater, this model makes “the transition from a standards architecture in which only interface definitions are normative to one in which the model is the primary normative artifact” [4]. This model would be used not only for improved communication with industry, but to support objective analysis of the correctness and completeness of the model itself. The diagrams in figures Figures 2.1 and 2.2, provide a contextual view of the tactical battle management and command and control (BMC2)3 functionality expressedto be provided in the behavioral model. The top drawing in Figure 2.1 shows the existing situation: common tactical BMC2 functionality is not expressed in a common way. This functionality provides an ‘edge’ device capability which coordinates the data exchanges among heterogeneous systems across multiple, distributed “peer” computing devices, augmenting the individual system functionality with the capability to coherently manage shared data. Each system expresses that common functionality in a different way, which causes the behavior of these systems to vary in a way that can only be predicted after unrealistic levels of analysis or testing. The bottom drawing in Figure 2.1 illustrates the activity of differentiating common from unique tactical BMC2 functionality, an important initial step in defining a functional baseline and functional architecture.As the figures illustrate, this functionality provides an ‘edge’ capability which coordinates the data exchanges among heterogeneous systems across multipleFigure 2.2 illustrates the relationship among elements in a single “peer”, including several of the functional interfaces necessary to build a safe and effective “peer”. SHAPE  \* MERGEFORMAT Figure 21.1:  High Level Context for the Behavioral Model(JW) SHAPE  \* MERGEFORMAT Figure 2.2:   Behavior Model Relationships to SIAP Participating SystemsDistributed platforms, augmenting the individual system functionality with the capability to coherently manage shared data.2.4  3. MDA®  MDA Strategy for the SIAP iIIntegrated AaArchitecture BbBehavior MmModelThe rationale behind adopting a Model Driven Architecture®  approach centered on achieving several key benefits. First, we needed to unambiguously describe the behavior of the distributed system. Such a description was necessary if we were to effectively communicate with industry. Our experience with paper specifications and standards, written in a natural language, showed we could not expect to achieve the required level of performance. Additionally, the way in which those paper specifications and standards are conveyed to industry, and the way in which the Government assesses compliance, left much work to be done. Describing system behavior in executable UML allowed us to capture the behavior in a human- and computer-readable form and allowed us to demonstrate the completeness and correctness of the model.Second, we needed to build a robust, objective analytic capability to determine if the distributed system could achieve the required level of performance given selected, and approved, operationally-representative scenarios. A Model Driven Architecture® approach, coupled with work already underway to develop the JDEP Technical Framework (which, in turn, leveraged the work done by JADO/JEZ JTE JTF, ASCIET, and JCIET), promised to provide such a capability. Third, the Model Driven Architecturee ® approach ensured we could build a modular, open system representation of the distributed system. This modular, open system representation allowed fine-grained innovation. Individual modules within the model could be improved while maintaining the integrity of the overall system. This opens opportunity for contribution to a much larger pool of offerors, enhancing the quality of the design “gene pool”. In effect, the SIAP development is trying to solve several key problems:  1) MIdentifymeans to maintain a common configuration across distributed systems without binding ourselves to a specific computing environment (computing equipment, operating system, “middleware” technology, and computer programming language), 2) Iprovide the means tomprove communication with industry -- paper specifications and standards are clearly not adequate, and 3) BNeededtouild a model of the functionality that we could use to reason about completeness and correctness prior to committing to costly deployment.(Subsections needed here, JW choice)) SHAPE  \* MERGEFORMAT Figure 3:  Platform Independence of MDA® The MDA®  approach provided the desired characteristics..  It leveraged the architecture work previously done, including work done incident to under Block 1 system engineering and represented it in a way that prescribesclearly demonstrates the needed capability in ways that textual description cannot. By applingapplying UML as a commonly understood representation method it provided both transparency to the underlying model logic and as an open industry standard, it was accessible to a variety of developers.  Finally, as is shown in Figure 2.3, MDA®  provides the ability to separate the business rulesmodel from the diverse implementation environments for operational application, a key to addressing the configuration issue. SHAPE  \* MERGEFORMAT Figure 2. 3  Platform Independence of MDA® 3. 4. Need for SIAP Testing 3.1 Model correctness and completeness. As we discussed earlier, we must demonstrate that the behavior model is complete and correct. It must be complete in the sense that all relevant behavior is modeled: no additional detail is required. It must be correct in the sense that the distributed system meets the operational requirement, given an approved operational context in which to perform the evaluation. Related to this need is the requirement for rigorous verification and validation, which is performed by the SIAP SE Task Force. Our plan is to have independent verification and validation performed by the Joint Interoperability Test Command.3.2 Application layer protocol evaluation. One of the key benefits of the behavior model is the ability to objectively evaluate the operational impact of changes to the application layer protocols. Results of these evaluations will be used to select changes that have the greatest operational benefit, and to assess potential alternatives.3.3 Conformance testing. Rigorous conformance testing is required at several key points in the development, integration, test, and fielding process. The behavior model is tested for conformance before it is released to individual Program Managers. This conformance test provides a baseline, and assurance that the model, as shipped, expresses correct behavior. Conformance testing is also performed at the location where integration is performed, at a point in time before the integrated product is accepted by the Government. This conformance test provides the Program Manager with assurance that the integration process has not adversely affected the behavior of the system. The final conformance test is conducted incident to operational test and evaluation, where the most complete assessment of operational effectiveness and suitability is made. A robust process will ensure the results of these three conformance tests are consistent.(JW)(Transition to JDEP)4. 5. JDEPJoint Distributed Engineering Plant Environment 4.1 Overview. The Joint Distributed Engineering Plant (JDEP) is a funded initiative created to support systems engineering of distributed systems. JDEP provides users with the ability to identify and access existing mission computer equipment (hardware) and computer programs (software) (computer programs) in the loop (HW/SWIL) and simulation capabilities across the DOD and industry, and technical support to federate these into distributed system environments for use in development, integration, testing, and assessments.  These simulation and HW/SW federations provide the environment to address the challenges of engineering complex distributed systems early in the life cycle, and to assess performance and interoperability in controlled environments long before deployment and to examine the impact of design and development options before making costly implementation decisions.JDEP inherited its name from the Navy Distributed Engineering Plant (DEP), which was an early and powerful motivator for JDEP.  Based on an assessment of the evolving needs of the DoD to support systems of systems (JDEP Strategy Final Report), [15], it was determined that what the Department needed was a capability to do joint, distributed engineering, not a fixed facility or ‘plant’ for this purpose, hence the name is somewhat misleading.  Further, the early conception of JDEP was based on linked hardware-in-the-loop (HWIL) facilities, where the ‘mission computers’ of multiple systems could be linked via landlines to test their ability to exchange messages and identify any ‘interoperability’ problems prior to deployment.  This task of interoperability testing was the first stage in the envisioned JDEP support.  Second, JDEP was viewed as extending to support investigation of interoperability fixes and alternative systems concepts.  To accomplish the second function, digital systems representations (simulations) are needed as core JDEP components with the flexibility to adjust them based on the results of investigations.  They reflect the systems ideas early in the life cycle (even in concept formulation) to allow for assessment of options before build decisions are made.  The use of JDEP to support the mission of the SIAP SE reflects the concept of creating a DOD capability for joint systems engineering, a capability to address future systems architectures as well as to identify problems with current systems and fixes to those problems. 4.2  JDEP Technical Framework. To achieve the JDEP goal of enabling users to address system-of-systems (SoS) issues throughout the life cycle, a technical framework was needed to support cost-effective reuse of available components in configurations that met individual users needs. Currently, there are multiple technical approaches to linking HWIL and simulation environments in use.  JDEP is based on the premise that different HWIL and simulation environments can be readily intermixed, along with representation of salient features of the operational environment, to create federations that meet different user needs.  To make this a cost-effective reality, a technical approach to bridging the current approaches into a common framework for JDEP federations was needed.Consequently, JDEP has created a common technical framework as basis for JDEP federation developments and investments.  Upgraded systems and new systems interfaces will be implemented using the technical framework, and to the extent possible, JDEP events will be based on federations using the technical framework.  This allows for the reuse of capabilities from one event to another and enhances the Department’s ability to address SoS issues more cost effectively.  To ensure general acceptance and broad utility, the JDEP technical framework is based on open industry standards and standards-based commercial software and tools. More details about the history, background and objectives of the framework can be found in [Dahmann and Clarke, 200226].The JDEP technical framework defines the components which may comprise a JDEP federation, interfaces (specifications) for the way the components work together, and guidance on how to configure and apply the components to a users needs. It is the general ‘blueprint’ for assembly of the ’piece parts’ to address a particular issue.  This framework has been designed to consider the broader purposes of JDEP, applying existing standards and tools wherever possible.  Based on results of the 1999 JDEP Strategy study, experience in the first year JDEP proof of principle event, and a review of ongoing activities across the department and in industry, a draft framework was developed in FY02 and applied in a series of federations in FY03 (Dahmann and Clarke, 2003).  [37].  It is shown in the Ffigure 4.1, below.Figure 4.1 : JDEP Technical FrameworkWorking upward, the layers in the framework are described along with the current approach to supporting the services in JDEP.Communications:  JDEP federations will employ industry standard communications services, which will be defined for each application. These services will support local and wide area data transport. The types of federations that JDEP will support are varied in the amount of data that needs exchanged, the exchange constraints, and how potential JDEP sites are already equipped with communications network capabilities.  As a result, JDEP will address the specific needs and resources available to each federation in defining communication support.Information and Data Management: JDEP information and data management will be based on IEEE Std 1516 - 2000 (HLA) runtime interface services via a compliant runtime infrastructure.  The Test and Training Range Enabling Architecture (TENA) middleware will be used to support exchange of data with range systems, which as it matures and is deployed across the DoD will ease the cost and complexity of adding range-based systems to JDEP federations.Datea Exchange Specifications: JDEP exchange will be based on the IEEE Std 1516 - 2000 (HLA) Object Model Template specification for defining the conditions, syntax and semantics of data exchanges.  JDEP maintains a reference federation object models (FOMs) which is used to derive the FOMs for particular federations, easing the cost and time in for each new federation.Application Interface: Interfaces between applications and the RTI will be built for flexibility, including what has been termed ‘FOM agility.’  This is the ability to adapt the interface to reconfigure the FOM for a particular federation, selecting a subset of information and adjusting the class hierarchy to address the needs of the particular federation.  This will allow federates to support multiple federations with different mixes of federates without software changes.  In addition, also for generality and flexibility, remote setup will be supported through the interface. Applications: The lower layers will support applications or federates of two types.  First, federation utilities operate through the same interface as other federates (simulations, HWIL).  In JDEP commercial utilities will be employed to the extent possible.  Second, are the representations of systems, environment, and communications etc. which form the environment and event contents. (JSD)5.  6. JDEP use inSupport to SIAP HWIL Testing 5.1 Test oObjectives and Ooverall Ttest deDesign.  Beginning in 2002, a series of tests addressing two specific SIAP experiments are being supported by JDEP.  These experiments are described in more detail in [Talbot and Rock, 200348] and in the test plans for each of the tests [SIAP SE, 2002…5.].  A series of tests are being conducted, beginning with tests in which individual systems (in hardware-in-the-loop (HWIL) environments) are immersedexercised in a controlled, simulated environment, followed by tests of combinations of systems in HWIL.  These tests address the effects of time synchronization and data registration biases on the ability of the systems to produce a high quality SIAP measured using standard SIAP attributes [REF69][10].  The scenarios used in the tests are drawn from a set of common reference scenarios (CRSs) [REF711].  Both the SIAP attributes and CRS are part of the common analysis approach adopted by the SIAP SE team [REF812]The objectives for these tests areeEvaluate the sensitivity of systems performance to time synchronization biasesEvaluate the sensitivity of systems performance to data registration biasesThese objectives will be accomplished by inserting a representation of the systems capable of implementing time synchronization and data registration biases into a representative scenario and measuring the effects of the biases on the ability to build and maintain a SIAP.  A series of scenario runs, based on the SIAP CRS NEA-1, will be conducted.  Each test will begin by creating a baseline by running the scenario with the systems configured without any biases in data registration or time.  Biases will then be systematically introduced in successive runs.  SIAP attributes will be computed for each run.  The effects of the biases on the attributes will be analyzed based on comparisons among the results.5.2 Federation dDescription.  Each test is being conducted using a federation supported by the High Level Architecture. Figure 5.1 depicts the design of the federation. SHAPE  \* MERGEFORMAT Figure 5.1 	SIAP HWIL Time Synchronization and Data Registration Test Federation DesignThe systems under test are represented by a HWIL laboratory with the fielded version of the mission computer program on operational hardware stimulated by a simulation of the onboard sensor for each system under test. The representation of the sensors and the inertial navigation systems has been updated with the capability to insert translation and rotation biases to support the test.  A scenario server provides the test scenario to the federation through updates on friendly and enemy platform characteristics.  The scenario is a 30-minute vignette from the SIAP Common Reference Scenario (CRS) selected to meet the needs of this test. An IFF response server provides IFF information to E-2C and a utility player provides blue force PPLI data and remote tracks.  For the HWIL tests, J series message traffic is handled via SPAWAR gateway terminal emulators (GTEs) and the rest of the data is exchange via the HLA RTI.  The federates include:Mission Computer and On-Board Sensor federate simulates radar, IFF interrogator, and mission computer.  This in implemented through incorporation of existing HWIL representations of the systems (e.g. E-2C.  Patriot) for different tests.CRS Scenario Driver provides all platform position updates as a function of time. Baseline is JNIC Threat Missile Simulation System V3.0 (TMSS) tool updated to support the CRS and the test federation object model, using the CRS database (NEA III 2003, V. 2) supplied by CRS team, publish all platform position updates on RTIIFF Response Server provides necessary IFF responses for blue aircraft to federation. Simple federate that subscribes to position updates and aircraft ID, publishes responses when receives interrogation or at regular update intervals as directed by mission computer federate.  Responses are provided by mission computer federate in lookup table form.Utility Player (Contextual System Representation (Utility Player))  simulates remote tracks and PPLI messages from Link 16 participants in the scenario.  This is implemented in the MLST3 equipped with a DIS/HLA gateway.  This federate provides perfect Blue force PPLI and perfect (TQ=15, ID=unknown-evaluated) remote tracks to the Link 16 network.Support federates are also included to support federation control, runtime viewing and data collection.  Details on the federates and federation, including the data exchange among the federates as specified in the federation object model (FOM) and the federation agreements can be found in the test plans for the specific tests and their supporting appendices.(JSD)6. 8. Testing of the SIAP Integrated Architecture BBehavior MModel(JSD)6.1  Reuse and eExtension of HWIL tTest eEnvironment  As is discussed above, the SIAP Integrated Architecture Bbehavioral Mmodel requires a robustn environment for development and testing.  Beginning with the environment developed for SIAP HWIL testing, JDEP is creatingdeveloping such an HLA federation environment based on reuse, evolution and extension of the components of the environment used for SIAP HWIL testing.  The first implementation of this environment is shown below in Figure 6.17.The scenario driver, the IFF Server and the utility player are all reused in this new environment, with some upgrades in capability.  Communications is integrated into the federation, replacing the use of GTEs with a separate communication channel used in the HWIL tests, to have communications exchanges handled by the RTI, and the capability to incorporate communications effects (delays, lost links etc.) into the test environment.  A federate representing the effects of navigation is added to the federation.  The sensors which were direct feeds to the HWILs have become federates with their data exchanges incorporated into the FOM and handled via the RTI.  Finally, the mission computer program, the tactical BMC2 computer program that derives from the SIAP Integrated Architecture Bbehavior Mmodel, itself becomes a federate.  The platform independence of MDA® provided a natural means for integration of the behavior model into this environment, as is illustrated in Figure 6.2.             SHAPE  \* MERGEFORMAT  SHAPE  \* MERGEFORMAT Figure 6.17:  First build of SIAP Behavioral Model Test FederationThe platform independence of MDA® provided a natural means for integration of the behavior model into this environment, as is illustrated in Figure 6.2. The Platform Independent Model (PIM) describes “peer” system behavior in a way that is independent of the computing equipment, operating system, and “middleware” (if any). We take that PIM and build a Platform Specific Model (PSM), targeted to the HLA Run Time Infrastructure and to our desired computing environment. This PSM is then compiled to an executable, which is a federate.The platform independence of MDA® provided a natural means for integration of the behavior model into this environment, as is illustrated in Figure 8. SHAPE  \* MERGEFORMAT Figure 6.28:  Use of HLA/RTI as a Platform for the Behavioral Model 6.2  9. SIAP Testing Strategy Using JDEP Environment.  This federation provides an extensible environment for incremental testing the SIAP behavioral model throughout the spiral development process and (JW/JSD)Test plans for use of this federation are now being developed.  The testing will adapt as the development progresses.  For illustration, a set of notional scenarios and tests are shown below.Scenario 1: Single Mission Computer Program (MCP), Single Sensor, Single Air Breathing Threat (ABT)Correctly receive and process a series of radar measurements from a local sensor and then correctly transmit a J3.2 message and correctly stimulate the ATDU displayScenario 2: Single MCP, Single Sensor, 2 Maneuvering/Crossing Air Breathing THreat Threat (ABTs)Correctly receive and process a series of radar measurements from a local sensor and then correctly transmit J3.2 messages and correctly stimulate the ATDU displayScenario 3: Single MCP, Single Sensor, Multiple (50+) ThreatsCorrectly receive and process a series of radar measurements from a local sensor and then correctly transmit J3.2 messages and correctly stimulate the ATDU displayScenario 4: Single MCP, Single Sensor, Single ABT, Single SIAP PeerCorrectly receive and process a series of radar measurements from a local sensor and tracks from a remote sensor (receive a J3.2) and then correctly transmit a J3.2 message and correctly stimulate the ATDU displayScenario 5:  Multiple SIAP Peers, Single ABTCorrectly receive and process a series of radar measurements from a local sensor and tracks from remote sensors (receive  J3.2s) and then correctly transmit J3.2 messages and correctly stimulate the ATDU display“Correctly Process” refers to the corr/de-corr, R2, IFF, TQ and other functionsSIAP Peer can be the Utility Player or another MCP with its own local sensor6.3  Evolution of the Test Environment.  The environment will evolve and be extended during the development process (Seildel et al, 2003) [913].  The initial build began with first order representation of the sensor and communication functionality.  Subsequent builds add fidelity and variability of the representation to add stresses and realism to the test environment, with added representation of physical and electromagnetic environment planned for follow-up builds.  These will be developed as part of the JDEP reusable suite of capability and will be available to reuse in other federations as JDEP supports integration and test of other integrated architectures and system of system developments.7.  Summary and Conclusion This paper has provided a discussion of how two industry modeling and simulation standards, MDA® and HLA, are being employed as core elements of the strategy to develop and test integrated Defense systems.  As the DOoD faces the challenges of large scale, net-centric systems, approach like this will need to be come a more routine part of the systems engineering toolset.The compatibility of these two standards as should by their use in SAIPSIAP and JDEP validates opportunities for future standards development as suggested in earlier papers [1014].  The SIAP/JDEP effort illustrates the opportunities ofform using these two standards in concert and suggest the value in incorporating HLA into the MDA® suite of evolving standards.  The first step would be the  developmentthe development of a UML profile that would allow the HLA to be treated as a platform to which one derives platform-specific models. Calytrix has taken a step in this direction; see their paper "Towards a simulation component model for the HLA"[1115].  By integrating HLA itointo the larger suite of industry standards support system development, modeling and simulation is more likely to be an essential,come a cost effective contributor to the development and test of complex systems.,8.  References[1]	David S. Alberts, John J. Garstka, Frederick P. Stein: Network Centric Warfare – Developing and Leveraging Information Superiority, 2nd Ed (Revised), CCRP Publications Series, August 1999.[2]	G. Gilder "Metcalf's Law and Legacy," Forbes ASAP, September 13, 1993.[3]	United States Joint Forces Command: Theater Air and Missile Defense (TAMD) Capstone Requirements Document (CRD), November 2000.[4]	David Flater: “Impact of Model-Driven Standards”, 35th Annual Hawaii International Conference on System Sciences, Volume 9, 2002.[5]	JDEP Strategy Final Report 2001[6]	Dahmann, Judith and Richard Clarke, “Joint Distributed Engineering Plant (JDEP) Technical Framework: Applying Industry Standards to System-of- System Federations for Interoperability”, 2002 Fall Simulation Interoperability Workshop,  HYPERLINK "http://www.sisostnds.org" www.sisostds.org,  HYPERLINK "http://www.sisostds.org/conference/download.cfm?Phase_ID=2&FileName=02F-SIW-007.doc" 02F-SIW-007, September 2002., Tech Framework SIW[7]	Dahmann, Judith and Richard Clarke, “Standards-based Framework for Systems of Systems Federations: JDEP Experience to Date”, 2003 Spring Simulation Interoperability Workshop,  HYPERLINK "http://www.sisostnds.org" www.sisostds.org,  HYPERLINK "http://www.sisostds.org/conference/View_Public_Document_Info.cfm?Document_Num=03S-SIW-047&Phase_ID=2" 03S-SIW-047, March 2003. 2003, TECH Framework LL, SIW.[8]	Talbot and Rock, “Single Integrated Air Picture E2C HWIL Federation--A JDEP Pilot, Simulation Interoperability Workshop”,  HYPERLINK "http://www.sisostds.org" www.sisostds.org, 03S-SIW-121, March 2003. 2003, SIW on E2C HWIL Test[9]	Single Integrated Air Picture System Engineering Task Force: Single Integrated Air Picture (SIAP) Attributes,  HYPERLINK "http://www.dtic.mil" www.dtic.mil, ADA397215, June 2001[10]	Single Integrated Air Picture System Engineering Task Force: Ballistic Missile Single Integrated Air Picture (SIAP) Metrics,  HYPERLINK "http://www.dtic.mil" www.dtic.mil, ADA407937, November 2002[11]	Single Integrated Air Picture System Engineering Task Force: Single Integrated Air Picture (SIAP) Common Reference Scenarios,  HYPERLINK "http://www.dtic.mil" www.dtic.mil, ADA405057, July 2002[12]	Single Integrated Air Picture System Engineering Task Force: Single Integrated Air Picture (SIAP) Integrated Assessment Plan (IAP),  HYPERLINK "http://www.dtic.mil" www.dtic.mil, ADA405128, July 2002[13]	(Seidel, David et al, “Implementation of C4ISR in the Joint Distributed Engineering Plant (JDEP),” 2003 Fall Simulation Interoperability Workshop”,  HYPERLINK "http://www.sisostds.org" www.sisostds.org,  HYPERLINK "http://www.sisostds.org/conference/View_Public_Document_Info.cfm?Document_Num=03F-SIW-026&Phase_ID=2" 03F-SIW-119, March 2003.2003) SIW on iBuild[14]	Andreas Tolk: “Avoiding another Green Elephant – A Proposal for the Next Generation HLA based on the Model Driven Architecture”, 2002 Fall Simulation Interoperability Workshop, September 2002.[15]	Parr, Shawn  and Russell Keith-Magee, “Making the case for MDA”, 2003 Fall Simulation Interoperability Workshop”,  HYPERLINK "http://www.sisostds.org" www.sisostds.org,  HYPERLINK "http://www.sisostds.org/conference/View_Public_Document_Info.cfm?Document_Num=03F-SIW-026&Phase_ID=2" 03F-SIW-026, March 2003.Calytrix SIW paperJDEP Strategy Final Report 2001Dahmann and Clarke, 2002, Tech Framework SIWDahmann and Clarke, 2003, TECH Framework LL, SIW.  Talbot and Rock, 2003, SIW on E2C HWIL TestSIAP SE, 2002…E2C and Partriot test plansSIAP Metrics reportSIAP CRS ReportSIAP Integrated Analysis Plan(Seidel et al, 2003) SIW on iBuildTolk Green Elephant paperCalytrix SIW paperG. Gilder "Metcalf's Law and Legacy," Forbes ASAP, September 13, 1993.Author BiographiesDR. JUDITH DAHMANN is a principal senior scientist at the MITRE Corporation and the Scientific Advisor to Dr. Garber, Director of Interoperability for the US Under Secretary of Defense for Acquisition, Technology and Logistics.  In this capacity, Dr. Dahmann provides technical review, assessment and recommendations on interoperability plans, issues and initiatives, including the application of emerging commercial technologies throughout the system acquisition cycle.   Dr. Dahmann is also participating in the technical development of a DOD enterprise infrastructure initiative to support creation of distributed system of system federations with simulation, hardware-in-the-loop and live systems to support integration and test throughout the life cycle. Prior to this, Dr. Dahmann was the Chief Scientist for the Defense Modeling and Simulation Office for the US Director of Defense Research and Engineering, a position she held from 1995 to April 2000.  In her role as Chief Scientist, Dr. Dahmann led the development of the High Level Architecture, a general-purpose software architecture for the development and interoperation of simulations, now an IEEE Standard (IEEE 1516).CAPTAIN JEFFERYREY W. WILSON is the Technical Director of the Single Integrated Air Picture System Engineering Task Force in Arlington, Virginia. In this capacity, CAPT Wilson leads technical and programmatic efforts to improve joint tactical warfighting capability within the aerospace warfare mission domain. In prior positions, CAPT Wilson had technical leadership responsibilities for Navy Theater Air and Missile Defense programs, including the design, development, testing, and fielding of the AEGIS Combat System in TICONDEROGA Class Guided Missile Cruisers and ARLEIGH BURKE Class Guided Missile Destroyers. CAPT Wilson is a Ph.D. Candidate at the Virginia Polytechnic Institute and State University, and is a graduate of Virginia Tech, the Naval Postgraduate School, and Oregon State University. He is a member of ACM, IEEE, and Sigma Xi.….. We use the term “connected” in the graph-theoretic sense: there is a an undirected path between every pair of peers within the network. The term “weakly connected” is used in the mobile networking sense: bandwidth is scarce, and the network is subject to partitioning by frequent planned and unplanned disconnections.UtilityPlayerRTIRTIIFFResponseServerMissionComputerOn-Board SensorLink 16ScenarioDriver(CRS)Red and Blue SystemsRealWorldMessageExchangeOff-Board Sensorand IFFFeedsCommNavigationUtilityPlayerRTIIFFResponseServerMissionComputerOn-Board SensorLink 16ScenarioDriver(CRS)Red and Blue SystemsRealWorldMessageExchangeOff-Board Sensorand IFFFeedsCommNavigation