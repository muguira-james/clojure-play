ARTEMIS: A High-Fidelity End-to-End TBMD Federation Ann F. PollackAndreas K. ChrysostomouThe Johns Hopkins University Applied Physics Laboratory11100 Johns Hopkins RoadLaurel, MD 20723240-228-5887, 240-228-5344ann.pollack@jhuapl.edu, andreas.chrysostomou@ jhuapl.eduKeywords:TBMD, NTW, distributed simulation, HLA ABSTRACT: As the Mission Technical Direction for the Navy Theater Wide (NTW)program of ballistic missile defense, the Johns Hopkins University Applied Physics Laboratory (JHU/APL) is called upon to perform overall system engineering analysis for design reviews, trade studies, and other technical forums.  To support these analyses, JHU/APL developed ARTEMIS, a distributed HLA federation built upon existing high-fidelity simulations of the NTW system components.  ARTEMIS captures the crucial closed-loop interactions between system components, providing a systems engineering tool for functions including performance assessment, design verification, and flight analysis.1. IntroductionBallistic missiles have proliferated throughout the world and pose a significant threat to the U.S. and its allies.  The Navy Theater Wide (NTW) program is designed to defeat medium-and long-range ballistic missiles, providing a flexible and autonomous defense capability that can rapidly deploy throughout the world.  The Johns Hopkins University Applied Physics Laboratory (JHU/APL), as the NTW Mission Technical Direction Agent (TDA), has an active role in design and development.  TDA responsibilities include independent evaluation of system design concepts, assessment of integrated performance of system elements, and analysis of high risk areas to validate technical feasibility.  Supporting evaluation and assessment, JHU/APL has a suite of simulations covering the ballistic missile domain and representing multiple layers of fidelity.  System level simulations examine the entire battlespace, providing a general picture of performance ranges and defining the boundaries of operation.  The APL Defended Area Model (ADAM) is an example of an NTW system level simulation.  Closer examination of particular scenarios or critical systems requires high-fidelity simulation where actual physical details and precise algorithms are represented.  APL has detailed physics-based simulations of the AN/SPY-1 radar (FirmTrack), the Standard Missile guidance (SM 6- DOF), and the Standard Missile signal processor (BLAST).  These simulations have supported numerous detailed studies for NTW and its predecessor, the Aegis LEAP (Lightweight ExoAtmospheric Projectile) Interceptor (ALI).2. MotivationOften in these studies, in addition to evaluating the  individual components, JHU/APL is called upon to provide the overall system engineering perspective.  Through its role as TDA and as a trusted agent of the government, JHU/APL has expertise across all NTW components - the threat, the ship systems, and the missile systems.  Our suite of high fidelity simulations provide detailed analysis of each system element.  Results can be fed from one simulation to the next to provide an overall system assessment.  While this level of assessment has been a very useful tool, it is not able to capture all of the dynamic interactions that occur between elements.  It can also result in prohibitively large data exchange files.  An end-to-end integrated system simulation can capture dynamic effects and perform data exchange on the fly, enabling higher fidelity, more powerful system engineering.Certain aspects of an engagement could theoretically be modeled without an integrated end-to-end simulation.  For example, it is possible to build a time-dependent iteration-dependent radar track file to provide target data to the missile.  The issue becomes the amount of required data.  These simulations use Monte Carlo analysis – executing multiple iterations where certain elements vary randomly, capturing the inherent uncertainties in the problem domain.  A radar track file representing all of the required information from 100 or more iterations becomes prohibitively large.  Modelers fall back to statistically summaries instead of the higher fidelity iteration-by-iteration variations.  An end-to-end simulation can exchange this data during the individual iterations eliminating the need for static storage and exchange of huge blocks of data.More efficient data exchange is clearly an advantage of end-to-end simulation; however, the biggest payoff in terms of fidelity comes from the ability to model the dynamic effects of the system components on each other.  A simple example is the fact that the radar tracks the missile during its flight, impacting the resources available for other radar functions.  In a more complex example, the radar continues to track the threat complex during missile flyout.  If the radar determines that a different object within that threat complex should be targeted, it can communicate that discovery to the Weapon Control System (WCS) onboard the ship which can uplink new guidance commands to the missile.  A particularly tight coupling exists between the missile guidance and the missile signal processor.  Guidance points the signal processor, which in turn selects a target then tells the guidance where to point and fly.  These are both complex systems represented by their own stand-alone simulations.  They become a much more powerful analysis tool when the loop between them is closed.  You can not only identify if the missile picked the correct target object, but whether that decision was made in time to divert and intercept the threat.  Many more examples exist of behavior that are impossible to model without an end-to-end simulation.  Through its system engineering efforts, JHU/APL recognized the value of capturing these complex interactions and began development of an end-to-end NTW system simulation.At almost the same time the NTW program identified the need for an end-to-end simulation, the Navy Area TBMD program also recognized a similar need.  The Navy TBMD strategy involves a layered defense.  The Area program provides close-in coverage, mainly of the battlegroup and immediate vicinity, with intercepts occurring as threats descend through the atmosphere.  The NTW program extends the protected area to an entire theater of operations and intercepts threats before they have a chance to re-enter the atmosphere.  These separate programs share similar goals and many of the system elements, particularly on the ship, are common.  JHU/APL decided to coordinate the Area and NTW (or Theater) efforts in the APL Area/Theater Engagement Missile Ship Simulation (ARTEMIS: Greek goddess of the hunt and protector of children whose arrows never miss).  The primary focus of this paper will be on ARTEMIS-T, the Theater version for NTW.3. ARTEMIS Development3.1 Identifying a strategyIn laying out a simulation development strategy, the first goal was to leverage off of the substantial investment in existing high fidelity simulations.  Three core components were obvious from their participation in previous analyses:  FirmTrack, SM 6-DOF, and BLAST.  FirmTrack is model of the AN/SPY-1 radar carried by all Aegis ships.  It schedules and sends dynamically selected RF waveforms then processes the simulated returns to form tracks which are associated with threat launch events and ultimately discriminated to determine targets.  The SM 6-DOF (Standard Missile 6 Degree-Of-Freedom) represents the missile guidance with high fidelity physics-based representations of the aerodynamics, control surfaces, rocket motors, and inertial guidance and navigation.  It represents a family of simulations covering the Standard Missile evolution and is the certified government standard.  Finally BLAST (Ballistic missile Localization And Selection Tool) provides a high fidelity model of missile sensing and processing.  It receives InfraRed (IR) radiant intensity measurements, processes them into tracks, associates the IR tracks with radar tracks transmitted from the ship, and determines a target object and desired aimpoint.  These three simulations were the starting point for developing end-to-end capability in ARTEMIS.Each of these simulations are powerful stand-alone analysis tools.  The development strategy recognized the need to maintain stand-alone capabilities while adding integrated end-to-end analysis.  Further, it was important that for configuration control purposes a single set of code should support both of these purposes. This suggested distributed simulation.  Distributed simulation also offered the opportunity to expand ARTEMIS beyond its initial capability, allowing for potential future versions to include the prime system contractors or other government and laboratory simulations.Given a distributed strategy with potential participation by outside organizations, High Level Architecture (HLA) was a clear choice for implementation.  Developed under the auspices of the Defense Modeling and Simulation Office (DMSO), HLA’s stated purpose is “to support reuse and interoperability across the large numbers of different types of simulations developed and maintained by the DoD.”  The Under Secretary of Defense for Acquisition and Technology (USD(A&T)) mandated use of HLA as the standard technical architecture for all DoD simulations in 1996.  In September 2000, HLA was approved as an open standard through the Institute of Electrical and Electronic Engineers (IEEE) - IEEE Standard 1516.  ARTEMIS has followed the HLA Federation Development and Execution Process (FEDEP) and implemented distributed protocols using the HLA RunTime Infrastructure (RTI).3.2 Executing the FEDEPThe FEDEP model describes a generalized model for developing HLA federations.  A federation is a HLA term signifying a unified simulation environment bringing together physically distributed simulation systems to form a new application. Each of the separate simulation functional components is termed a federate.  The FEDEP is a six stage process of defining the federation objectives (1), developing a conceptual model (2), designing (3) and developing (4) the federation, integrating and testing (5), and finally executing and producing results (6).  The ARTEMIS federation has followed this outline, although not always with a great deal of formalism.  Because the ARTEMIS team works closely together within a single organization, a common understanding could be reached with a relatively brief set of objectives and a simple conceptual model.  The primary objective is to provide a high-fidelity integrated end-to-end simulation of the NTW system as a system engineering tool for performance assessment, risk reduction, concept design, etc..  The conceptual model, a representation of the real world domain as applied to federation space, focuses the broader objectives.  ARTEMIS-T focused on initial NTW capabilities and limited the focus to engaging a relatively simple threat with a single intercepting missile.  The conceptual model will be expanded as the system continues its evolution.3.2.1 ARTEMIS federatesArmed with objectives and a conceptual model for focus, ARTEMIS-T began the design process of selecting the federates and allocating functionality between them. Federate selection is driven both by the federation conceptual model of the problem domain, and by the more pragmatic question of existing simulation capabilities.  The NTW problem domain consists principally of target complexes, ships, and missiles.  Relevant ship functionality falls into four primary areas: the navigation system, the AN/SPY-1 radar system, the Command and Decision System (C&D), and the Weapon Control System (WCS).  Missile functions can be broken down into guidance and signal processing.  A threat model and a scenario manager for controlling and recording execution finish out the ARTEMIS-T federates.  Figure 1 provides an illustration of the problem domain and the corresponing ARTEMIS federates.  The existing APL simulations described earlier form the basis for many of these federates, although both new and upgraded capabilities are required to reach the initial NTW capability goal from the conceptual model.  A brief description of the federates and their responsibilities follows.The NTW system is designed to counteract a set of ballistic missile threats.  In a sense, the threat is the primary driver of the system.  In ARTEMIS-T, the threat federate is based on the object-oriented threat environment developed to populate the BLAST simulation.  It models one or more threat complexes, including major objects (e.g. boosters and re-entry vehicles) and the associated debris from separation events and fuel venting.  The federate provides data on both position and selected signature information for every object it models.  Providing a common threat picture is a key advantage of integrated end-to-end simulation.The ship systems begin with the navigation federate, responsible for providing both true and estimated position, velocity, and attitude of the ship. The baseline for this federate is derived from the Area variant of the SM 6-DOF simulation which required a ship model to properly initialize the missile.  Ship navigation was made a federate to provide a common understanding of ship positional data to the missile, WCS, C&D, and radar federates.The radar federate is responsible for searching out, tracking, and identifying potential threats.  It is based on the FirmTrack simulation which models performance of the AN/SPY1 series of radars with high-fidelity representations of surveillance, detection, radar cross section (RCS) estimation, tracking, and discrimination (the process of determining which tracks represent targets of interest). TBMD capabilities implemented in FirmTrack include Linebacker, Navy Area, and Aegis Leap Intercept (ALI) designs with upgrades in progress representing the current NTW design.  Once the radar has discriminated a potential TBMD target track, it notifies C&D.In the ARTEMIS context, C&D is responsible for initiation and management of TBM threat engagements.  This represents a small subset of the overall Aegis command and control systems and the functions.  The required C&D functionality represents a new capability developed for ARTEMIS.  The focus for this federate is performing interceptability checks on potential targets and issuing engagement orders to the WCS.  WCS responsibilities include target track filtering, target engageability testing, missile launch scheduling, ship-to-missile uplink data formation, and missile midcourse guidance commands.  The WCS federate is derived from the ALI version of the SM 6-DOF.  Since the WCS guides the missile during early stages of flight, the SM 6-DOF contained the required functionality to command the missile.  Missile guidance is responsible for flying the missile to the target, including initialization, boost/pitchover, midcourse guidance, handover, and terminal guidance.  The missile guidance federate is being derived from the ALI SM 6-DOF and upgraded to represent the NTW system.  It receives target data initially from WCS then in the terminal stages from the onboard missile signal processor. The missile signal processor’s primary responsibility is target and aimpoint selection during the final stages of flight.  Based on the BLAST simulation, the federate generates measurements from an IR sensor, forms them into tracks, associates the tracks with radar tracks from the ship, discriminates a target object, and selects an aimpoint on that target.  This information is sent to the guidance federate which is responsible for directing the missile to the selected aimpoint.Coordinating all of the federates is a scenario manager.  The scenario manager is responsible for providing initialization information concerning the situation being modeled.  It also tracks the data exchange during execution and can provide a simple visualization.  Ultimately the data can be collected and logged by the federate for use in analysis or replay.3.2.2 Defining the FOMThe type of data being exchanged and the participating federates are captured in the Federation Object Model (FOM).  The ARTEMIS FOM defines the federates and their associated data elements and lays out a set of interactions for exchanging data.  HLA allows several types of data exchange, however, in ARTEMIS all data exchange is accomplished via interactions.  This method seems to best reflect the real world interfaces between systems.  ARTEMIS interactions to a large degree reflect actual system interface messages, although some ARTEMIS interactions such as truth data are not available in deployed systems.  Defining the interactions includes specifying each of the data elements and its type.  The FOM is useful to arrive at a common early understanding of system interfaces, however, it should not be written in stone.  As the first stage of federation design, it may need to be modified as development proceeds to reflect new understanding or evolutionary changes to the NTW system.3.2.2 Constructing a frameworkAfter developing the ARTEMIS FOM, work focused on development of a common HLA framework for connecting the federates and their underlying simulations to the RTI.  The RTI provides a set of services that are used to coordinate federate operations and data exchange during execution.  Two different development options were considered: directly invoking the required calls to RTI services or using a “middleware” program designed to simplify the connection process.  After evaluating both options the decision was made to access the RTI directly.  Because the RTI is still relatively new and continues its rapid evolution, many middleware programs have difficulty staying current.  Often middleware programs have a bit of a research, rather than retail, flavor.  While this can have advantages, it also tends to mean less user manuals and less operational guarantees.  The RTI itself is well documented and the helpdesk is quite responsive so ARTEMIS decided that an extra layer would simply cloud the waters.Construction of the federate framework began with the HelloWorld example program provided with the RTI download.  Additional examples came from the food fight program used during the free introductory HLA class taught at SAIC under DMSO auspices and from the sushi restaurant example in reference 1.  The RTI provides six management areas to handle federation execution:  federation management, declaration management, object management, ownership management, time management, and data distribution management.  The framework implements the required capabilities in these management areas for each of the ARTEMIS federates.  In particular, the framework handles the federation management activities of creating and joining a federation, synchronizing the federation, and resigning and destroying the federation.  In declaration management, the framework has been customized for each federate to specify the interactions that it will be sending and receiving.  Object management includes registering objects and sending interactions.  The initial version of ARTEMIS does not employ any ownership management, especially since information exchange is interaction based.  RTI time management plays a critical role in federation execution.  All of the ARTEMIS federates are both time regulating and constrained.  This means that everyone has to wait for everyone else so that the federates stay synchronized.  The RTI allows for both time and event driven simulations and the framework handles requesting time advances.  Data distribution management is not currently implemented in ARTEMIS.  If it is determined that more efficiency is required, these capabilities will be added.  Thus the framework handles all of the RTI management areas for the ARTEMIS federation.The effect of the framework is to minimize the RTI learning curve for the federate developers.  The hooks into the underlying simulations are isolated into three basic function types:  update, process_x_interaction, and send_y_interaction.  The update function is where the underlying simulations perform the bulk of their processing while the process and send interaction functions are where the data is exchanged with the rest of the federation.  Again, the goal is to allow the underlying simulations for each of the federates to function stand-alone or as a part of an ARTEMIS federation.  By isolating the hooks into the simulations, it was easier to wrap the existing simulations without impacting stand-alone capabilities.3.2.4 Framework testingThe federate frameworks also created a convenient method for testing the federation before all of the underlying functionality was present.  The federate frameworks included basic flow of control – so, for example, the threat federate would respond to an IR_Look interaction with an IR_Characteristics interaction, but neither of the interactions would necessarily contain “correct” data.  The individual frameworks for the federates were then executed over the unclassified internal APL network to verify proper connectivity and interaction exchange. Testing on the unclassified network has included up to eight computers across four different subnets running as many as ten different federates.  Some testing has also been successfully performed using the classified APL network where the fully-functional ARTEMIS federation will reside.Framework testing allowed ARTEMIS to identify and correct several issues before full functionality was present.  Some initial intermittent connectivity problems were traced to the need to properly configure the network hubs and switches for multicast processing.  Testing also identified some hostname-IP address mismatches on computers that were preventing proper execution.  One of the most important issues identified involved an issue of how the RTI deals with zero lookahead interactions.  Zero lookahead refers to the ability of a federate to respond to an interaction without advancing federation time.  An example of this type of interaction series is when the radar federate sends an RF_Dwell interaction and the threat federate responds with RF_Characteristics.  This type of sensor interaction was modeled as occurring instantaneously.  When using a double-based federation time occasionally an interaction was being sent and never received.  After communicating with the RTI helpdesk, the cause was traced to a small time delta automatically added by the RTI at each step.  The result was that sometimes the RTI would decide the interactions were old and discard them without throwing an error.  There are two possible solutions.  The first is to model the “speed of light” time delay by inserting a small time delta and not use zero lookahead.  This tends to complicate code because now an equality test on the time will no longer work and these small deltas must be accounted for.  The second solution is to go to integer timing with a scale factor to translate federation time into scenario time.  This would truncate the small delta added by the RTI and allow zero lookahead to function properly.  By identifying the issue early with framework testing, solutions could be identified and not slow ARTEMIS development. Another issue that could be tackled using the ARTEMIS framework was Monte Carlo operation.  High fidelity modeling needs to account for the inherent uncertainties in the TBMD problem domain – in fact most high fidelity modeling needs to represent some random elements.  This is typically achieved by running in a Monte Carlo mode where multiple iterations of a scenario are executed allowing certain elements to vary randomly and then results are averaged over the set of iterations.  The simulations underlying ARTEMIS are all Monte Carlo based.  Executing ARTEMIS in a Monte Carlo fashion requires resetting the times on the federates to zero to begin a new iteration.  The RTI requires federate time to be a monotonically increasing value.  Resetting time requires the individual federates to resign from the federation and rejoin in order to reset their times to zero.  This is a somewhat awkward method, since the federates collide attempting the resign and rejoin.  It requires a delay and a test to make sure that all federates have had a chance to re-enter the federation before execution of the next iteration can proceed.  Hopefully as more high fidelity applications use the RTI a more efficient method will be made available.  Again, identifying and solving the Monte Carlo challenges could be done before connecting the ARTEMIS framework to the underlying simulations.3.2.5 Integrating functionalityWhile the framework handles the RTI interactions, ARTEMIS functionality resides primarily in the underlying simulations.  Establishing the proper connections is critical to achieving federation goals.  Many of these connections are in place while others are still being established.  The difficulty of connecting to legacy simulations can vary significantly depending upon the program structure.  The BLAST simulation is written in object-oriented C++ and its modular structure lent itself very well to connection to the framework.  Both the threat federate and the signal processor federate connections were established in a matter of several weeks.  The FirmTrack simulation is written in a combination of C and Fortran.  It had undergone an earlier restructuring for modularity which primed it for ARTEMIS connectivity and again connection to the framework was completed in a couple of weeks.  The SM 6-DOF is written in Fortran and separating the WCS and guidance functionality required a larger effort.  These connections are still in progress.  Through connecting existing simulations into an HLA framework, years of development efforts can be integrated to achieve higher fidelity results with relatively small integration costs.In addition to establishing hooks into the HLA framework, the existing simulations were simultaneously upgrading their functionality to represent the initial NTW capability.  The high fidelity models represented the ALI system.  The initial NTW capability builds on ALI but provides substantially more functionality again more challenging threats.  The primary upgrading difficulty is that the initial design of the NTW system is ongoing.  In fact, one of the goals of ARTEMIS is to evaluate system performance of the proposed design to verify that it satisfies requirements and perhaps influence the final plans.  This requires close contact with the prime system contractors to confirm preliminary design details as soon as possible.  At this point, APL has many of the basic designs and is in the process of upgrading simulations; however, many of the details on parameter settings, discrimination training sets, and threshold values have not yet been determined.  These will be incorporated into ARTEMIS as they are firmed up.4. ARTEMIS VisionARTEMIS preliminary capability represents a first cut at the initial NTW capability and will evolve as the system evolves.  ARTEMIS can even help fill in details by investigating the effects of different parameter settings on overall system performance.  It provides a powerful high fidelity end-to-end tool for evaluating system tradeoffs and testing advanced algorithms in addition to design performance assessment.  It can also serve as a flight test predictor and post-flight analysis tool.  As threats evolve and more sophisticated countermeasures are hypothesized, ARTEMIS can evaluate how the system will perform.  By bringing all of the components together into a single integrated simulation, changes to individual components can be propagated throughout the entire system to evaluate effects not just at the component level, but on the overall performance.Initial participation in ARTEMIS was limited to internal JHU/APL federates.  As NTW Mission TDA, JHU/APL needed an independent evaluation capability.  Also since subject matter experts existed across all system components, design, development, and testing were streamlined within a single organization.  It is also recognized that inviting other organizations to participate in the ARTEMIS federation could be a valuable form of information exchange within the NTW program, enabling component developers to evaluate their designs within a high fidelity system context.  Discussions with the contractors about the ARTEMIS federation and potential collaborations are ongoing and promising.  The Area program has initiated a related effort to build an HLA federation with the Lockheed Martin Medusa radar model using some of the lessons from ARTEMIS development.  Distributed simulation has proven a powerful tool within a single organization.  It has even more potential when the federation is opened to the larger development community.In addition to inviting the greater NTW community to participate, ARTEMIS will be undergoing several planned upgrades.  The initial conceptual model for ARTEMIS was intentionally limited in scope to allow the federation to be implemented without being overwhelmed by scale.  For example, initial implementation focuses on a single incoming threat complex engaged by a single outgoing missile.  ARTEMIS will be expanded to encompass raid scenarios where multiple threat launches occur and must be engaged by multiple missiles.  In addition to discriminating the lethal objects from other elements of the threat complex, raid scenarios require missile target selection logic to determine which of the observed lethal objects is the missile’s primary target.  Again the expansion to raid scenarios will phase in capabilities.  The first threat raids will be engaged by a single NTW ship.  Eventually plans call for expanding ARTEMIS to include multiple NTW ships.  While simply adding more sets of ship federates (or sets of ship objects)  is straight forward, the algorithms for coordinated firing efforts between the ships are more complicated.  JHU/APL has an existing ship coordination simulation, the APL Coordinated Engagement Simulation (ACES), and ARTEMIS might draw on this existing capability to add multiple ship capabilities.  Thus, upgrading to a full raid scenario capability is a pre-planned ARTEMIS improvement.The capability to visualize ARTEMIS scenarios is also a priority.  Previous experience has shown that visualization can be a powerful system engineering tool in its own right.  Outputs from each of ARTEMIS’ underlying simulations have been feed to a high fidelity 3-D visualization program in the past.  Similar post-execution visualization can be performed with ARTEMIS.  However, other types of visualization could also prove useful.  For example, “instrument panel” type readouts during ARTEMIS execution visualizing the status of the currently executing iteration superimposed on cumulative Monte Carlo results could be a useful tool.  Post-processing visualization could be enhanced to allow more analytical views of system element details of either a single or multiple iterations.   Visualization will be used to facilitate the system analysis performed by ARTEMIS.Looking further toward the future, ARTEMIS would like to perform system analysis extending beyond the NTW domain.  In fact, the early coordination between the NTW program and the Area program has already provided a head start on extended capabilities because ARTEMIS has the built in capability to perform both NTW and Area functions.  This could be expanded in two different directions.  Additional ship functions could be represented such as ship self defense providing a better system model for analysis of resource utilization issues.  ARTEMIS could also be expanded to provide a more complete representation of the TBMD domain by including federates to represent other elements of the Ballistic Missile Defense Organization’s “family of systems” such as THAAD.Ultimately the use of HLA has provided a powerful system engineering tool providing a higher fidelity analysis capability based on years of previous investments in legacy simulations.  It comes with the modularity and flexibility to invite additional participants to benefit from this system perspective.  It provides a growth path to include the effects of additional systems and to model the coordination between them.  By starting with a relatively modest conceptual model, ARTEMIS has achieved a useful goal and provided a springboard for expanded capability.Author BiographiesANN POLLACK is Section Supervisor of Systems Simulation in the Theater Missile Systems Engineering Group at The Johns Hopkins University Applied Physics Laboratory.  She is the co-lead for the ARTEMIS federation development and an original developer of BLAST.  Ms Pollack holds a BES and MS in electrical engineering and an MSE in computer science from The Johns Hopkins University (JHU). ANDREAS CHRYSOSTOMOU is Group Supervisor of the Theater Missile Systems Engineering Group and a member of the Principle Professional Staff at The Johns Hopkins University Applied Physics Laboratory.  He is the co-lead for the ARTEMIS federation and heads up a departmental discrimination effort.  His background includes extensive experience in data fusion, correlation, and tracking.  He holds an MA in applied mathematics from the University of Maryland. 