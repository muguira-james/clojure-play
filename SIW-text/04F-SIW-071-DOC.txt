Janus / ProtoCommand Integration in Support of Layered Extended Area Protection and Survivability (LEAPS) STOMonte PorterMichelle HermanFred SeverinPam HornMichael DiGesuComputer Sciences Corporation4090 South Memorial ParkwayM/S 4-2-06Huntsville AL 35802 HYPERLINK "mailto:mporter@csc.com" mporter@csc.com HYPERLINK "mailto:mherman@csc.com" mherman@csc.com HYPERLINK "mailto:fseverin@csc.com" fseverin@csc.com HYPERLINK "mailto:phorn2@csc.com" phorn2@csc.com HYPERLINK "mailto:fdigesu@csc.com" fdigesu@csc.com800-477-1140Key Words: C4I, Modeling and Simulation Software, Science and Technology Experimentation, Intelligent Monitoring, Net-Centric Warfare, Networked Fires, Janus, Concept Development, VV&AAbstract: A key vulnerability of current and future systems is indirect fire.  The LEAPS STO involves technologies for preferentially engaging rockets, artillery and mortars and has completed its first study year of concept exploration.   This paper will describe the approach, simulations, and processes used by the LEAPS STO to derive the STO requirements, reduce the overall cost of simulation, and intelligently monitor the simulation process to produce results.1. Background The artillery and mortar attacks that threaten allied troops in Iraq each day are becoming an all too common occurrence. At present, the warfighter’s capability to counter these threats is insufficient. The Layered Extended Area Protection and Survivability (LEAPS) Science and Technology Objective (STO) [1] is an effort to examine technologies and warfighting concepts necessary to reduce the current and Future Force’s vulnerability to Rockets, Artillery, and Mortar (RAM) munitions.  The technical approach is to identify those technologies that are reasonably mature enough to be available in a short time frame to address the threat.   A key tactical tenet of the concept is the ability to preferentially engage only those munitions posing a threat to the protected asset or area. The challenge in any new concept and any STO is to develop and mature the concept simultaneously along both tactical and technical vectors (as shown in Figure 1).  The goal is to assess both tactical and technical reality as they relate to one another and to mature the concept along two axes simultaneously. This will help to determine where technical capability and tactical processes intersect so that a near term solution to the problem may be provided.  2.  Defining the ProblemFirst, an accurate definition of the problem needed to be defined. This would lead to the elimination of any improbable solutions as well as helping more clearly define the requirements of the system. A good deal of effort was put into threat definition, bounding the technical sensor and shooter solution envelope,  and investigating command, control, communications, computer, and intelligence (C4I) issues and architectures necessary for the concept [2].  It became clear to the team that to accurately characterize the problem set, a warfighting scenario needed to be developed so that the problem could be examined “in context”. The conceptual elements are highlighted in Figure 2. The LEAPS project office elected to use the Janus  (a force-on-force effects based simulation) [3] with Caspian Sea Scenario 2.0 [4] to “flesh out” the tactics, techniques and procedures (TTP). Janus was an ideal choice because of its long history of Future Force gaming, its scenario flexibility, and its man-in-the-loop capability for a thinking red commander.   One of the reasons for using Janus was to contextually characterize many of the problems faced by the LEAPS concept. The problems included the range at which the engagements occurred, the number of rounds per barrage, the number of barrages in the air simultaneously, and the magazine load needed per system. The goal was to involve the user in thinking through the problem. Subject Matter Experts (SMEs) were invited to sit with the users to observe the gaming. The SMEs were then able to establish tactical defenses for the LEAPS systems and continually modify the concept based on lessons learned from the exercise.   Gaming took place at Training and Doctrine Command Analysis Center (TRAC) White Sands Missile Range (WSMR) between 6 and 15 July 2004. [5]. 3. System Description and JANUS ImplementationTwo different defense capabilities were simulated. The first, C1, was a self-defense capability while the second, C2, concentrated on the area defense. In both cases the simulation approach was to assess the interception of the artillery round after calculation of its impact but before the effect was measured. C1 was represented as a system very similar to the active protection system (APS) used by the future force. This system continuously scans with onboard sensors and it detects RAM munitions that are predicted to land with-in the self-defense zone, it will automatically engage those rounds.  Figure 3: C1In Janus the C1 capability was represented by simulating four firing quadrants, each with a specified probability of successfully defeating specific RAM munitions out to a specified range.  Additional input parameters include the number of engagements on board, time lag between engagements, and system performance degradation while on the move (see Figure 3). C2 was represented as a 360 degree area protection system that intercepts and destroys RAM munitions targeted against designated assets within its area of responsibility using a preferential engagement concept (see Figure 4).   Figure 4: C2Under this concept, C2 was implemented as a stand-alone system capable of defending designated assets that are within its umbrella.  Upon being alerted by a CMCB radar of incoming RAM projected to land within its area of responsibility, C2 engaged those rounds threatening the designated protected assets. Each C2 system worked in collaboration with other C2 elements protecting the same asset.4. Janus–ProtoCommand IntegrationThree goals for the Janus-ProtoCommand integration exercise were: (1) to include a Future Force “Networked Fires” prototype in the experiment to provide effective, controlled counter-fire--an important contributor to defeating the RAM threat--without requiring large changes to the Janus GUI, (2) to prototype a LEAPS C4I screen and exercise it as part of the experiment without requiring large changes to the Janus GUI, and (3) to have real-time insight on critical parts of the LEAPS concept (this was important to be able to gauge the man-in-the-loop activity with respect to the concept).  To accomplish all three goals, the Distributed Interactive Simulation (DIS) capabilities of Janus and ProtoCommand were used.This was the first implementation of the DIS architecture using the FCS version (5.0) of Janus. In this implementation Janus was independent of the normal DIS protocol datu unit (PDU) interactions (entity-state, fire and detonate) but provided them for the purposes of external consumption by ProtoCommand.  This allowed Blue situation awareness with the ability to experimentally vary the update rate without impacting the simulation. Fire and detonate PDU’s were provided for data collection purposes.New PDU’s developed for the experiment included the Spot Report PDU, the Fire Command PDU, the Resource PDU and the Route Data PDU.The spot report PDU was tied to the Janus sensor models and reported targets to ProtoCommand based on a selectable level of detection.  In the experiment the level was set at “recognize”.  This meant that the Networked Fires Surrogate only displayed “targetable data” on the common operating picture (COP).  In the counterfire area, all radar sensings resulted in spot report PDU’s and reported not only the location of the red firer but the predicted impact point as well.The Fire Command PDU was used to command an artillery mission in Janus. One of the challenges for an artillery gamer is to keep situationally aware of the battle while “zooming in” to place accurate fires on targets.  Therefore, you can get different levels of artillery effectiveness based on skill of the gamer.  The fire command PDU eliminates the need for screen manipulation and provided a means to increase the consistency of artillery play.The Resource PDU provided an external link to ProtoCommand with the logistics status of all friendly assets in the Janus scenario.  Using this PDU allowed ProtoCommand to know when reload was complete for both Networked Fires allocations and logistics data collection.The Route Data PDU provided a means for ProtoCommand to create and/or modify routes in Janus.  Key future force systems concepts include systems that must dismount, then fly and then loiter or search in a pattern (e.g. loiter attack missiles (LAM) and unmanned aerial vehicles ( UAV).  The representations of these systems in Janus are labor intensive. Using the Route Data PDU, up to 100 puck points were transferred into Janus in a single message with instructions to include flight mode, hold fire status, movement status and radar status. This removes the gamers requirement to put these puck points in by hand.  When a change in search pattern is required, the PDU allows for the replacement of existing points or the appending of the same points.  This provides for more rigor in the employment of these otherwise hard to play systems.5.  ProtoCommand.  ProtoCommand [6,7] is a C2 functional prototype based on an intelligent real-time system.  It allows developers to prototype command processes both graphically and conceptually using objects and reason about the relationships between these objects and the environment in general, including simulated and historical data.  Users are able to maintain a continuous awareness of the current command process and “think” in real time to “make the right decision” based on the current evidence, including directly controlling the process. 5.1 “Networked Fires” SurrogateTo defeat the RAM threat, a prototype of the future force “Networked Fires” concept (NWF) was reused.  This functionality was originally prototyped in the Non-Line Of Sight-Launched System (NLOS-LS) Command, Control, and Communications (C3) STO [8] and was coordinated with the Depth and Simultaneous Attack Battle Lab (DSABL). Four key functions of the NWF prototype are dynamic allocation of ammunition, dynamic prioritization of fires, the attack guidance matrix decision logic and dynamic fires distribution.  Figure 5 is a screen shot of the attack guidance matrix.Figure 5: Attack Guidance MatrixPrior to the exercise the commander is able to allocate by phase the numbers and types of munitions by level of command.  At the same time, he sets his preferences of attack and establishes weapon target pairing rules for each target/effect type to include required target location error (TLE), number of rounds to fire and priority as a munition.  During the fight, the attack guidance rules are used to recommend a target pairing for a given target.  The mission is cleared by accepting the recommendation, over-riding the pairing based on additional evidence not in the matrix or by aborting the mission.  Range, availability and response times are checked to select the best effector for the given pairing.  If the commander wishes to change any of his settings, he does so by drag and drop and issuing a new matrix.  The network then responds to the new matrix.  Last, if the commander has a “most dangerous target” he can command its engagement, overriding the AGM.  Once the fires are cleared, ProtoCommand sends fire commands to Janus (replacing the gamer’s interaction which is labor intensive) and for LAM or precision attack missile (PAM) creates the routes and nodes to control LAM or PAM precision functionality.  This solves problems associated with playing LAM loiter technology in Janus. A screen shot of the LAM process and resulting route are shown in figures 6 and 7.Figure 6: Puck Point CalculationsThe same methodology could be used for UAV routing, BDA assignments as well as other gamer intensive pucking instructions.Figure 7: ProtoCommand programmed flight executing in JanusThe NWF prototype allowed the commander to distribute responsibility for fires dynamically throughout the game.  The battlespace was divided into zones of responsibility (ZOR).  These control measures roughly approximated phase lines and boundaries and were numbered from close to far and from left to right.  These boxes were assignable by level of command.  When assigned a given zone of responsibility, any target sensings would be passed as high priority to that command level for action.   This resulted in focused fires and very little overlapping fires.  There was an info-only request available to commanders not assigned primary responsibility but who needed info on adjacent areas.  A screen shot of the ZOR management screen is in figure 8.Figure 8: ZOR Management5.2  “LEAPS C4I Surrogate”The second goal was to prototype a LEAPS C4I screen, and exercise it as part of the experiment. One of the central issues to the LEAPS process is the role of C4I.  What must the C4I system know and do in order to execute the LEAPS mission?  One of the keys to the concept is radar management.  If the radar cue doesn’t happen, the LEAPS system does not work.ProtoCommand was able to display the location and coverage of the C1 systems, the range and coverage of the C2 systems, and the radar fans/coverage of the counter battery radars.  The user had a capability to manage the radars changing their status on and off.  Additionally he could turn the radar or give a new location to the radar.   These functions were passed to Janus using the Route Data PDU.  Because the radar functionality was so important to the system, a button was added to turn all radars on at the beginning of the game.  Using this display visibility was achieved into the process and this helped determine where mass effects could be used against a given volley.  A screen shot of the LEAPS C4I capability is shown at figure 9.    Figure 9: LEAPS C4I Screen5.3  Intelligent Exercise Management (IEM)The third goal was to have real-time insight on critical parts of the LEAPS concept (this was important to be able to gauge the man-in-the-loop activity with respect to the concept). This was a critical to the study.  IEM uses an inference engine to detect and isolate anomalies in the DIS data flow as the exercise is ongoing to support real-time data collection, anomaly detection, man-in-the-loop monitoring and variable sensitivity.During the run it was important to test and verify the scenario events to ensure that the data gathered was necessary to support the study.  Data elements such as how many rounds were being fired from each system by type, minimum and maximum time of flight, as well as range, were needed. IEM was able to characterize harder to get information such as the angle of attack for each barrage and the appropriateness of each LEAPS defense.A key variable in man-in-the-loop simulations is the effect of the human decision.  IEM was able to track positions, decisions made by blue gamers, and attack decisions made by red gamers. Key to our analysis were 1) barrages against a given defense and 2) successful defenses given magazine size and massing of  LEAPS systems. If a defense was not attacked, there would be nothing to measure.  There were two types of LEAPS defenses to examine; moving defenses and static defenses.  In order to ensure a sufficient amount of data, the scenario was super loaded with 3-4 times as many LEAPS systems as were realistically expected.  If only 3 or 4 defenses were in the scenario that the assets might not be engaged (especially in the rear area) and that not enough information on the magazine expenditures would be collected.   Since IEM were monitoring both the defenses and barrages, white cell nomination of targets to those rear area defenses that otherwise would not have had barrages against them were used. A screen shot showing the IEM monitoring is at figure 10.Figure 10:  IEM ScreenBetter run selection was achieved using IEM. Due to the large amount of potential variables and the limited time, a factorial run set was not possible.  Therefore, the intelligent monitoring capability could measure deltas in capability in early runs and eliminate some cases that were less interesting.  In more than one instance, the real-time monitoring uncovered simulation or TTP anomalies that gone unchecked would have invalidated the results.  The anomalies were able to be corrected and the cases reran.6.  Benefits of Janus-ProtoCommand IntegrationThe addition of a real-time intelligent technology to the Janus experiment helped provide a better job of “thinking” through the process.  The examinations of war fighting in a net-centric C4I context by adding Net-centric logic/control were added to the current Janus’ capability. The Janus manpower “footprint” requirements by automating tasks such as firing artillery, planning and re-tasking UAV, LAM, and PAM routes were reduced. The uses of artificial intelligent monitoring technology into experimentation and analysis of alternative (AOA) tools were demonstrated and the plethora of FCS development already accomplished in JANUS to support LEAPS experimentation was leveraged.  7.  Future WorkThe ProtoCommand team is developing an A2C2 surrogate in support of RDECOM experimentation this fall.8. References[1]   AMRDEC Briefing: “, Low-Cost Extended Area Protection and Survivability Against CM, UAV, and RAM Threats (AMR-07) Proposed Science & Technology Objective (STO)”, April 2004.[2]   AMRDEC: Ongoing investigation into LEAPS concept – final report due Sep 30 2004[3] TRAC WSMR: “Janus Users Manual , ver 7.06BJ”[4]  TRAC-WSMR: “Briefing, TRAC-WSMR Scenario Brief,  Caspian Sea ”, November 2003.[5]   AMRDEC: “LEAPS Experimentation Analysis”,  September 2004.[6]  CSC: “ProtoCommand Users Guide v1.5”, February 2004.[7] Porter, Monte; Herman, Michelle: “Process control in Disributed C4I Exercises”,  SIW Paper 03F-SIW-051, September 2003.[8] AMRDEC: “Final Report, NLOS-LS C3 Simulation”, December 2003.Authors BiographiesMonte Porter is the project lead for C4I and LEAPS capability in support of RDE Command.  He was also the primary developer of IEM at CSC’s Simulation Center of Excellence.Michelle Herman  is lead simulation engineer and designer of the DIS / ProtoCommand interface at CSC’s Simulation Center of Excellence.Pam Horn is the lead / primary developer of the Networked Fires and LEAPS C4I functionality at CSC’s Simulation Center of Excellence.Fred Severin is the scenario lead for JANUS at CSC’s Simulation Center of Excellence.Michael DiGesu  is the JANUS administrator at CSC’s Simulation Center of Excellence.PAGE  Figure 2:  LEAPS ConceptFigure 1: STO Challenge EMBED PowerPoint.Show.8  