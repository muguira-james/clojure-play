Just-In-Time Use of Knowledge Products for Simulation DevelopersFurman HaddixJack SheehanApplied Research Laboratories, University of Texas at AustinDefense Modeling and Simulation Officefurman@arlut.utexas.edu.,  HYPERLINK mailto:jsheehan@msis.dmso.mil jsheehan@msis.dmso.mil Putnam TexelP. P. Texel & Co.,ptexel@flinet.comKeywords: Knowledge Acquisition, Knowledge Engineering, Software Development, System Development, Simulation Development, Models, Modeling & SimulationAbstractSimulation developers invest considerable resources in acquiring knowledge about the real world to be simulated.  A key issue for simulation developers is sequencing the creation and delivery of knowledge products to support software development timelines.  All two often, knowledge products are delivered too late in the simulation software development process to materially influence the design.  This paper addresses this issue as follows:  (1) A well-known object-oriented system development process (Texel-Williams) is analyzed to determine the real-world knowledge required by the software developer at each step of the development process;  (2) The information content requirements identified at each software development step are mapped to real-world data available within the DMSO Conceptual Models of the Mission Space (CMMS) Library; and (3) A knowledge acquisition time-line is derived to meet to software development process.  Introduction	Simulation developers have been presented with a dichotomy in terms of their development environment. On the one hand, they have the advantages of Computer-Aided Software Engineering (CASE) tools, 4th Generation Languages, and various other productivity enhancements, and yet as simulations move toward using fewer live simulation models and more constructive simulation models, development costs and times seem are still increasing. One reason for this is the quantity of domain specific knowledge that must be obtained. This is generally far greater for simulations than for other kinds of system development, and generally far greater for constructive simulations than for live or virtual, because of the need for constructively simulating command and control, particularly in staff-level simulations. One way of shortening the project's time line without significant increases in cost is to use "just-in-time" knowledge development. This breaks down knowledge products into several groups and then identifies when in the simulation development process, each group will be used. This allows the knowledge development and simulation development timelines to be integrated based on details of knowledge product production and simulation development requirements. This approach shortens the overall simulation development process by allowing parallelism between knowledge development and simulation analysis and design.	The remainder of this paper is divided into the following parts: a summary discussion of a generic system development process, a detail discussion of the customizations necessary to support this process in modeling and simulation development, a detail discussion of how the customizations fit into the generic software development process, a detail discussion of how the customizations fit into the Federation Development and Execution Process (FEDEP) [1] and conclusions supported by this discussion.A Generic System Development Process	The following process description is due to Texel and Williams [2]. The first seventeen phases follow Texel and Williams, although the Parts groupings differ somewhat from that text. Part 1 Requirements AnalysisPhase 1 Requirements Engineering	The entire system development process begins with Requirements Engineering, which can be loosely defined as the process of establishing a set of requirements, both hardware and software, for a system development effort. The principal goals for this Phase are to identify the external interfaces for the system and identify, categorize, and prioritize the system requirements in a Requirements Trace Matrix. A Requirements Trace Matrix contains requirements, requirements summaries, and/or requirements references and references representational elements related to specific requirements. For example, an RTM might reference the Class/Method which is required to implement the requirement described or referenced in a row of the RTM.Part 2 Systems EngineeringPhase 2 Systems OOA – Static View	The goals of this phase are the transition of a software requirement to a use case, establishment of a Category List, development of Scenarios and draft GUIs (Graphic User Interfaces) for each Use Case, and development of a System Category Diagram (SCD) that represents the Categories and their associations. OOA herein refers to Object-Oriented Analysis. Use Case, as used herein, is a statement of functionality required of the system. Scenario, as used herein, is a description of the steps required for the completion of a Use Case. Category, as used herein, is a collection of logically related classes, e.g., related through inheritance, aggregation, or meaningful context.Phase 3 Systems OOA – Dynamic View	Phase 3 focuses on the dynamic view of the system, or the behavioral interactions between Categories necessary to implement a Use Case. This phase provides, at a high level of abstraction, a definition of the functional behavior of the system. A product of this Phase is the Category Interaction Diagram. Category Interaction Diagram, as used herein, is a graphical representation of the Interactions between Categories required to satisfy or implement a Use Case, created using the notation of a previously selected CASE tool. Interaction, as used herein, is a message stimulating activity by one Class on behalf of another Class. The set of potential Interactions between two Classes is normally constrained by the set of Associations between the two Classes.Phase 4 Hardware/Software Split 	This phase focuses on the allocation of Category capability to hardware, software, or both.Part 3 Software AnalysisPhase 5 Software OOA – Static View	In this phase, for each category, a Category Class Diagram, and multiple Class-Centric Class Diagrams are produced. For each class, a Class Specification is produced. This Phase results in the specification of the non-behavioral software system requirements. Category Class Diagram, as used herein, is a Class Diagram that contains all the Classes and Associations owned by a Category. Class-Centric Class Diagram, as used herein, is a Class Diagram that reflects all the Associations that a Class participates in, as well as all the Classes that participate in the Associations. A Class Specification contains a textual description of the Class and textual descriptions of all the Methods and Attributes of the Class, as well as other information that may vary from process to process. Classes, Associations, Methods, and Attributes herein reflect the usual O-O usage.Phase 6 Software OOA – Dynamic View	This phase focused on the dynamic behaviors of the system, specifically the individual internal behavior of a class, and collaborative behavior of classes that are required to satisfy requirements. This phase describes the process/products for developing/documenting the behavioral requirements, both intra-Class and inter-Class, of a software system. Products include State Transition Diagrams and Interaction Diagrams. State Transition Diagram, as used herein, is a diagram that represents the internal behavior of a Class by depicting the events that cause an instance of a Class to transition from one state to another. Interaction Diagram, as used herein, is a graphical representation of the Interactions between Classes required to satisfy or implement the functionality of a Use Case thread of control, created using the notation of a previously selected CASE tool. An Interaction Diagram is usually a refinement of a Category Interaction Diagram.Part 4 Preliminary DesignPhase 7 Software OOD – Process View	This Phase looks at Process architecture, or more specifically, which Processes are required and how these Processes are allocated to Processors. Phase 8 Software OOD – Static View	The purpose of this Phase is to migrate the static logical view produced in Phase 5 into a physical, or implementation view. This phase does not introduce any new products, but rather refines the Category Class Diagrams and Class Specifications by adding more detail.Phase 9 Software OOD – Dynamic View	The purpose of this phase is to refine the products of Phase 6 by adding more detail to the Interaction Diagrams.Part 5 Detail DesignPhase 10 Software OOD – Language Representation	In this phase, the Classes that have been discovered are transitioned to the appropriate language construct. In this phase, Methods have still not been designed or implemented. These language representations are developed and compiled to assure that visibility requirements are satisfied.Phase 11 Method Design	This phase continues the focus on compilable software architecture by identifying the algorithmic structure for the applicable Methods of a Class.Part 6 ImplementationPhase 12 Class Implementation/Class Test	Phase 12 focuses on the development of the actual code that implements the Methods, agreement on a Class test strategy, and testing of the Classes required for the current build.Part 7 TestingPhase 13 Category Test	This phase focuses on the development of a Category test strategy, and the testing of each Category that contributes to the current build.Phase 14 Software Integration and Test	This phase focuses on testing the functional capability of the software for a specific release, with the functionality represented by Use Cases.Phase 15 System Integration and Test	This phase focuses on testing the functional capability of the software for a specific release, as represented by the Use Cases for that release. This phase uses all actual software, while stubs and drivers may be used in Phase 14.Phase 16 Requirements Trace	Phase 16 introduces a vehicle for tracing, or mapping, the original requirements to the implementation entities in the O-O model. In this phase, the source code files responsible for, or participating in, the satisfaction of each requirement are identified.Part 8 Post DeliveryPhase 17 Maintenance	Phase 17 iterates through the previous sixteen phases in response to the identification of a new requirement.Phase 18 System Utilization	This Phase was added in order to show the steps in the exercise cycle of planning, testing, execution, and evaluation, which feeds new requirements to the maintenance phase.A Knowledge Development CustomizationThis knowledge development customization has been subdivided into four phases, preparation, categorization, classification, and refinement, corresponding to the parts of the Texel-Williams Process (TWP). Note that this is the part of the System Development Process in which the program-specific Conceptual Models of the Mission Space (CMMS) is created or customized. The products enumerated here either are CMMS Toolset [3] products, or are easily derivable from CMMS Toolset capabilities. The major components of the knowledge development customization are illustrated in Figure 1. Some of these concepts were originally expressed in an earlier SIW paper [4], and in the CMMS Technical Framework [5].Preparation Phase 1	The two activities in Phase 1 are prerequisites for all of the subsequent Phases.Developing a Focused Context	This is the first step in a successful knowledge development effort. In some cases, this may be accomplished as a step in the requirements engineering phase of simulation development; in other cases, it may be performed as a separate milestone; many intermediate variations are possible, as well. However, in all cases, developing a focused context is crucial to success. In all cases, the products should include comprehensive definitions of the scope, fidelity, and resolution of knowledge products, and the simulation to be developed from them. 	Here, scope is used to indicate the breadth of the simulation. Where does the playbox end? Is a theater-level engagement between two naval task forces, or is it establishing a beachhead by landing a Marine task force? The top-level forces should be identified, as well as important interactions between them. 	Resolution is used to indicate the level of decomposition for the model elements identified in scope. For an army exercise, resolution might be specified as down to the company level, meaning companies would considered to be atomic. Similarly, the air force may describe resolution in terms of units, e.g., how many aircraft constitute an atomic unit. In the navy, units of movement will generally be ships; however, shipboard behavior may still be conducted at multiple levels of resolution, e.g., are individual weapons modeled, or are attrition effects allocated in aggregate? 	Fidelity is also significant as this controls the level of description required. For example, a commander of a maneuver unit must decide which maneuver for his unit to execute. How many inputs does he consider in his decision, how are they weighted, how many possible outputs can he consider? Note that distinctions between fidelity and resolution are often clear only in the mind of the person making the distinction..	This step is a prerequisite to Gathering Data Sources and all subsequent phases.Gathering Data Sources	There are two major types of source for the information contained in the domain knowledge products. One of the source types can be classified as doctrinal in that it is represented in formal documents, and usually, has been accredited as being doctrinally correct. Information taken from these sources must be filtered by the subject matter expert so that it narrowly defines what is necessary for the simulation developer to know. The second major source type, the subject matter expert, will often be called upon to fill in  details that are not doctrinally specified. For these details, the subject matter expert must rely upon his expertise and the expertise of his colleagues. However, whenever possible, the subject matter expert should rely on authoritative data sources. It may be necessary not only to specify which data sources should be used, but also which kinds of information should be obtained preferentially from each source.	This step is a prerequisite to all subsequent phases.Categorization Phase 2This phase may be thought of as gathering high-level requirements. Its products support system-level analysis and design.Identify Major Model Elements	One of the ways of defining scope is to identify a set of principal entities and principal processes; however, in order for the simulation representation to be support system engineering, identification of additional significant entities and/or processes may be necessary. Concomitant with identification of the principal processes, the principal process groups, identifying sequencing constraints among processes, will become apparent. Similarly, significant associations between principal entities, and significant interactions between principal processes are identifiable at this time. This information is the principal resource necessary to support the system analysis static view (Phase2); however, additional assurance that all significant entities and processes have been identified are provided by the other steps of this phase.Define Major Model Elements	Although brief descriptions of the major model elements should have been provided as part of the previous step, detail descriptions of the previously identified model elements are prepared at this time. Additional model elements are identified when the components of the principal elements are identified. Additional components of the previously identified processes and process groups will be identified during this step. Key sequencing elements such as process group selections will also be identified at this time. Also, additional entities and processes will be identified during the definition of associations and interactions of the principal entities and processes.This information primarily is used to support development of the system analysis dynamic view (Phase 3)Identify All Model Elements	This step encompasses identification of all the processes, process groups, process group instances that will be needed. Although subsequent steps may lead to the identification of additional model element, most should be identified at this time. Furthermore, all entities and all their associations should be identified. Similarly, all interactions are identified in this step. Resolution guidelines appropriate to simulation should be used throughout this step. This information primarily is used to support development of the system analysis dynamic view (Phase 3).Construct Category Models	The information gathered in the previous three steps can be used to construct category models. These models are based on domain information and may differ from the category models resulting from systems engineering as described above in the description of a generic system development process. As these models are based on a subset of the requirements of the systems engineering models, they will be related to the other models; however, the relationship may not be a direct correspondence.Validate and Verify Category Models	Before being used in system development, these models should be validated and verified as appropriate. Specific issues which should be addressed as part of a validation are appropriateness of the representation with regard to the domain being simulated, appropriateness of  representation for the simulation purpose, and appropriateness of the representation for use by simulation developers.Classification Phase 3This phase may be thought of as gathering intermediate-level requirements. Its products support software analysis.Define All Model Elements	Although brief descriptions of the model elements should have been provided as part of the previous step, detail descriptions of the previously identified model elements are prepared at this time. Additional model elements are identified when the components of the model elements are identified. Additional components of the previously identified processes and process groups will be identified during this step. Key sequencing elements such as process group selections will also be identified at this time. Also, additional entities and processes will be identified during the definition of associations and interactions of the entities and processes. Where appropriate, reusable roles or generalized processes are used. This information primarily is used to support development of the software analysis dynamic view (phase 5).Allocate Processes to Entities	In this step processes should be decomposed until component process may be allocated to a single entity. An entity may be an aggregate entity as long as it satisfies the resolution requirement(s). Decompose processes further, if indicated by resolution or fidelity requirements, or if indicated by completeness requirement. Allocate the process components to entities and process groups. This step supports the System Analysis Dynamic View (Phase 3)Allocate Characteristics to Entities	Characteristics must be identified sufficient to support process execution. Characteristics are required only if they have an effect on process execution. Undefined Characteristics must be defined. This step supports the object-oriented analysis static view (phase 5)Construct Class Models	The information gathered in the previous three steps can be used to construct class models. These models are based on domain information and may differ from the class models resulting from systems engineering as described above in the description of a generic system development process. As these models are based on a subset of the requirements of the systems engineering models, they will be related to the other models; however, the relationship may not be a direct correspondence.Validate and Verify Class Models	Before being used in system development, these models should be validated and verified as appropriate. Specific issues which should be addressed as part of a validation are appropriateness of the representation with regard to the domain being simulated, appropriateness of  representation for the simulation purpose, and appropriateness of the representation for use by simulation developers.Refinement Phase 4This phase may be thought of as gathering detail-level requirements. Its products support preliminary software design.Definition of Process Group Instances	Process Group Instances may be thought of as Use Case Scenarios. Their specification includes Condition Values (night, rain operations), Measure Standards (different from day, clear operations), and Instance Data Sets (force structure, equipment performance, initial values, e.g., location, ammunition on hand). Process Group Instances are used only when Process Group Definitions need augmentation. The products of this step support Object-Oriented Analysis Dynamic View (Phase 6)Detail Specification of Status and Perception for Entities	When characteristics were allocated to entities above in the Classification Phase, generic Characteristic descriptions were applicable. However, Entity-specific Characteristic descriptions, may be needed because the semantics of a Characteristic may differ when allocated to different Entities. These descriptions may also include valid value ranges or enumerations. The products of this step support Object-Oriented Design (Phases 7-11)Detail Specification of Low-level Processes	In order that a complete specification can be provided to the simulation developers, behavior descriptions should be completed down to  the level of events, and associated state changes. This information will be used by the developers to complete detail Method descriptions, often including State Transition Diagrams. The associated Entity Characteristics should be checked to assure consistency. At conclusion of this step, all Process Controls, Conditions, and Measures should be specified. The products of this step support Object-Oriented Design (Phases 7-11)Construct Refined Models	The information gathered in the previous three steps can be used to refine the class models. These models are based on domain information and may differ from the class models resulting from systems engineering as described above in the description of a generic system development process. As these models are based on a subset of the requirements of the systems engineering models, they will be related to the other models; however, the relationship may not be a direct correspondence.Validate and Verify Refined Models	Before being used in system development, these models should be validated and verified as appropriate. Specific issues which should be addressed as part of a validation are appropriateness of the representation with regard to the domain being simulated, appropriateness of  representation for the simulation purpose, and appropriateness of the representation for use by simulation developers.Synthetic Representation Specification	This part of the process is concerned with obtaining scientific representations for algorithmic detail and other development support, which is beyond the domain expertise. Elements contained here might include items such as meteorological propagation models, attrition assessment algorithms, and rules for fatigue-induced deterioration of physiological capabilities. Its products support Detail Software Design.Identify Synthetic Representation Requirements	Most requirements for synthetic representations can be obtained from a review of the knowledge products.Identify Synthetic Representation Sources	Selection of synthetic representation sources is based on available expertise, simulation objectives (including scope, fidelity, and resolution), and specific representations required (e.g., attrition, movement, etc.)Define Synthetic Representation Specific to Simulation Requirements	This activity is concerned with customizing a synthetic representation to meet the requirements of the simulation. For example, an attrition formula might use six variables; however, only five are available within the simulation. Thus, the attrition formula must be modified and the modified formula must be validated.Verify and Validate Customized Synthetic Representations	Before being used in system development, these models should be validated and verified as appropriate. Specific issues which should be addressed as part of a validation are appropriateness of the representation with regard to the domain being simulated, appropriateness of  representation for the simulation purpose, and appropriateness of the representation for use by simulation developers.A Customized M&S Development Process	We have taken a generic system development process and customized it for use in the Modeling and Simulation arena. The principal customizations are the following:Adding detail steps for development of domain knowledge;Adding detail steps for definition of synthetic representations; andAdding a detail exercise phase to complete the simulation life cycle.	The remainder of this section is directed toward identifying the product interfaces supporting these customizations. How the additions fit into the system development process is illustrated in Figure 2..Knowledge Development Preparation Phase 1	The two principal products of this phase are a specification of scope, fidelity, and resolution, and a list of authoritative data sources. The guidance with respect to simulation scope, fidelity, and resolution should be used in all phases of the software development process. The authoritative data sources provide a back-up reference when the domain knowledge, analysis, and design documents do not provide an answer for a specific developer question.Knowledge Development Categorization Phase 2 The principal products of KDC Phase 2 are Top-Level Processes and Entities and their Descriptions, Interactions and Associations, and Lists of All Processes, Entities, and Process Groups. TWP Phase 2 (System OOA Static View) uses the Top-Level Entities and their Descriptions and Associations. TWP Phase 3 (System OOA Dynamic View) uses Top-Level Processes and Entities and their Descriptions, Interactions and Associations. TWP Phase 4 (Hardware/Software Split) uses the Top-Level Process Interactions, and Lists of All Processes, Entities, and Process Groups.Knowledge Development Classification Phase 3 The principal products of KDP Phase 3 are Definitions of All Model Elements, Process Allocations, Characteristic Allocations, and State Transitions. TWP Phase 5 (Software OOA Static View) uses Definitions of All Model Elements, Process Allocations, and Characteristic Allocations. TWP Phase 6 (Software OOA Dynamic View) uses Definitions of All Model Elements and State Transitions.Knowledge Development Refinement Phase 4 The principal products of KDC Phase 4 are Scenario Descriptions, Characteristics Specific to Entities, and Detail Process Specifications. TWP Phase 8 (Software OOD Static View) uses Characteristics Specific to Entities and Detail Process Specifications. TWP Phase 9 (Software OOD Dynamic View) uses Scenario Descriptions and Detail Process Specifications. Synthetic RepresentationThe principal product of this phase is a detail specification of a representation, such as an algorithm, function, look-up table, distribution, etc. The primary use of this product is in TWP Phase 11 (Software OOD Method Design).Conclusions	This discussion supports the following conclusions:Modeling and Simulation development differs from non-M&S development in significant ways;Differences between M&S and non-M&S development require customization of generic development processes;Recognition of complexity of interaction between customized components of simulation development and generic components can pay dividends in simulation development efficiency and effectiveness; andKnowledge Development should be supported with tools supporting capture of appropriate knowledge and appropriate reporting formats for knowledge products.References[1]  HYPERLINK http://hla.dmso.mil http://hla.dmso.mil, Federation Development Process and Tools website [2] Putnam P. Texel and Charles B. Williams, Use Cases Combined with Booch/OMT/UML: Process and Products, Prentice Hall PTR, 1997.[3] http://cmms-toolset.imcva.com, CMMS Toolset website[4] " Prescribing Fidelity and Resolution for CMMS," Furman Haddix, 1998 Spring Interoperability Workshop.[5] http://www.dmso.mil, DMSO website, including links to CMMS Technical Framework, other CMMS documentation, and other DMSO-sponsored projects.Figure 1. A Knowledge Development CustomizationFigure 2. An M&S Life Cycle Process