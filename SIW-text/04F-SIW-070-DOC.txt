JAMUS - Support of Future Airspace C2 RequirementsMonte PorterMichelle HermanJohn W HughesMehry AbidiTerri WoodLewis HarmonComputer Sciences Corporation4090 South Memorial ParkwayM/S 4-2-06Huntsville AL 35802 HYPERLINK "mailto:mporter@csc.com" mporter@csc.com HYPERLINK "mailto:mherman@csc.com" mherman@csc.com HYPERLINK "mailto:jhughes23@csc.com" jhughes23@csc.com HYPERLINK "mailto:mabibi@csc.com" mabidi@csc.com HYPERLINK "mailto:twood23@csc.com" twood23@csc.com HYPERLINK "mailto:wharmon@csc.com" wharmon@csc.com800-477-1140Key Words: C4I, Modeling and Simulation Software, Intelligent Monitoring, Airspace Management, Net-Centric Warfare, Networked Fires, VV&AAbstract:  The ability of simulators to replicate and interact with the airspace command and control functional area is extremely limited while the need is very great.  Airspace management requirements impact fires, maneuver and host of other operations on the future battlefield.  This paper will describe the approach, simulations, and processes used by CSC’s JAMUS team to establish a simulation architecture capable of examining airspace management requirements in a future force context.1. Background In all of the challenges of simulating net-centric warfare, one of the least exercised concepts is airspace control. On the future force battlefield, the already congested airspace will be made more complicated by the addition of unmanned systems, i.e. unmanned aerial vehicles (UAV), and loitering attack munitions (LAM).  Specific control mechanisms must be in place to provide for usable airspace.  Figure 1 shows a trace of LAM flight paths in an earlier simulation run and illustrates the problem.For the past several years, the System Simulation and Development Directorate (SS&DD) of the Aviation and Missile Research and Development Engineering Center (AMRDEC) has conducted engineering level experimentation in the Advanced Prototyping, Engineering, and eXperimentation (APEX) Lab.  This lab utilizes its wealth of engineering level models and simulations such as the Interactive Distributed Engineering Evaluation and Analysis System (IDEEAS) to bring army warfighters and engineering expertise together in advanced distributed experimentation. The knowledge and capability the APEX Lab bring to the process started in 1994 with the Rapid Force Projection Figure 1: LAM flight paths across an operational areaInitiative (RFPI), continuing through the 2003 Research, Development, and Engineering Command (RDECOM) First Application (1st App) Exercise [1] and still continues today. 2.  Joint Aviation, Missile, and Unmanned Systems (JAMUS) Experimental ConceptIn March of 2004, the SS&DD of the AMRDEC and other RDECOM players set out to integrate some of their war fighter simulations and aviation simulators and develop simulation infrastructure to examine Army airspace command and control (A2C2).  The purpose of the exercise was to provide a representative synthetic future battle for the integration of multiple APEX modeling and simulation laboratories to 1) validate robust functionality between the labs (as shown in Figure 2), 2) ensure interoperability between engineering level models and simulators and 3) explore interactivity between the federates.  The emphasis for development focused on interactions between aviation, missiles and unmanned systems and the development of infrastructure to examine airspace management in a joint context.  This exercise leveraged earlier investments by the Non-Line Of Sight Launch System (NLOS-LS) Command, Control, and Communications (C3) Science and Technology Objective (STO) Full System Simulation (FSS) [2], the Virtual Distributed Laboratory for Modeling and Simulation (VDLMS) STO RDECOM 1st App exercise [3], the Aviation Crew Station Working Groups and several small business innovation research (SBIR) programs. Joint players from Wright Patterson Air Force Base and other RDEC labs participated in the event.  The specifics of simulators and simulations are not part of this paper.3.  A2C2 ApproachUnique to this experiment is the interactive use of the Tactical Airspace Integration System (TAIS) [4].  TAIS is the Army’s current A2C2 system for the management and clearance of airspace. When used for training, TAIS has no interface to DIS simulations but gets it feeds from other tactical systems that have DIS/HLA drivers.  This made it logistically difficult to insert the TAIS system into RDECOM experimentation. To solve this problem the JAMUS team developed a tactical systems interface unit (TSIU) or translator to provide track updates to TAIS and to pass airspace control measure requests to and from the TAIS system. The TSIU provided the means to pass blue air track data via the Joint Communications Processor Interface (JCPI).  Using the data from the entity state protocol data unit (PDU), the TSIU provided air track data in tactical format at the appropriate update rate.  The team designed an airspace control means request (ACMR) PDU that provided airspace control measure data between the simulations. The TSIU provided the interface between the simulation federation and TAIS by translating the ACMR PDU to the United States Message Text Format ACMR message.  Once routed to the TSIU, the system translated the request into USMTF format and sent the request to TAIS.  Simulators unable to build or transmit the ACMR PDU were given the option to send the ACMR by voice.  A diagram of the data flow is shown Figure 3.Figure 3: ACMR Data Flow Diagram4.  FCS A2C2 RequirementsWhile the integration of TAIS into simulation scenario was a challenge, the team also wanted to begin development of A2C2 simulation concepts in the future force context.  As mentioned earlier, the plethora of Future Combat Systems (FCS) airspace users and the net-centric concept poses a challenge when attempting to replicate airspace control of this future force in simulation.  As shown in Figure 4, the various airspace users operate at very specific altitudes (AGL) and relative ranges.  This suggests the use of FCS “mini-coordinating altitudes” to segment the various airspace users. This mirrors the coordination altitude idea that is currently used to separate Army and Air Force components today.  A Class II and a Class I UAV could safely operate in the same area because of the separation in altitudes required for target identification.  The team’s design and plan for the JAMUS experiment was to use standard airspace control measures (ACM) wherever possible (for interoperability and reusability) and experiment with the capability of simulations to abide by ACM’s in the context of an FCS fight.  Using maneuver inputs from the TRADOC Analysis Command (TRAC) White Sands Missile Range (WSMR), Ft. Sill scenarios from the NLOS-LS C3 effort, and aviation and A2C2 concepts from the Aviation School A2C2 Concept Exploration Program (CEP), the team developed a scenario loosely correlated to the Caspian Sea 2.0 scenario [5].  The team developed an airspace control order and included routes for LAM and precision attack munitions (PAM), standard army aircraft flight routes (SAAFR) for the aviation  air assault and Air Control Points  (ACP’s) for  management and control of airspace needs as they occurred in the scenario.  To help the simulator pilots deal with the lack of detail in a large terrain database, the team made sure the ACP’s corresponded with recognizable terrain or other feature data on the virtual terrain.  A schematic of the Airspace Control Order (ACO) and ACP’s is shown in Figure 5. This scheme was the backdrop for the experiment. Working with the TAIS project office the team developed an ACO in TAIS to reflect the scenario and placed a TAIS system in the Unit of Action (UA) headquarters and one in the white cell to represent higher headquarters. Figure 5: ACO and ACP SchematicTo bound the experiment breadth it was assumed all interactions with Air Force command centers would funnel through higher headquarters TAIS.  Although no TAIS is currently found at Brigade level, the breadth of the UA area of operations and the myriad of UA airspace users suggest that airspace management  tools will be required.  Two concepts were discussed with the Aviation school as having potential to more adequately de-conflict the airspace in the UA context.  The first was to build protective zone around maneuvering helicopters and present these zones on the Networked Fires Screen for dynamic clearance of fires.  The other was to segment route legs within routes to determine which are occupied by manned aviation systems and which are vacant.  A schematic of the two concepts is shown in Figure 6.  Additionally, the use of small UAV blankets was of interest to the team because of the large number of UAVs and the varieties of altitudes.  Using small UAV blankets provided the commander with flexibility to use the same airspace at other altitudes for safe transit.  Figure 6:  A2C2 Concepts5.  ProtoCommand In order to experiment with these concepts the team chose to use ProtoCommand in both a “Networked Fires” context and as an advanced A2C2 surrogate. ProtoCommand is a command and control (C2) functional prototype based on an intelligent real-time system [6]. It allows developers to prototype command processes both graphically and conceptually using objects and reason about the relationships between these objects and the environment in general, including simulated and historical data.  Users are able to maintain a continuous awareness of the current command process and “think” in real time to “make the right decision” based on the current evidence, including directly controlling the process. 5.1  “Networked Fires” SurrogateA key player in the clearance of fires is the Networked Fires (NWF) system.  This functionality was originally prototyped in the NLOS-LS C3 STO and was coordinated with the Depth and Simultaneous Attack Battle Lab (DSABL). Four key functions of the NWF prototype are dynamic allocation of ammunition, dynamic prioritization of fires, the attack guidance matrix (AGM) decision logic and dynamic fires distribution.  Prior to the exercise the commander is able to allocate by phase the numbers and types of munitions by level of command (screen shown in Figure 7).  At the same time, he sets his preferences of attack and establishes weapon target pairing rules for each target/effect type to include required target location error (TLE), number of rounds to fire and priority as a munition.  During the fight, the attack guidance rules are used to recommend a target pairing for a given target.  The mission is normally cleared by accepting the recommendation, over-riding the pairing based on additional evidence not in the matrix, or by aborting the mission.  Range, availability and response times are checked to select the best effector for the given pairing.  If the commander wishes to change any of his settings, he does so using a drag and drop technique and issuing a new matrix.  The network then responds to the new matrix.  Last, if the commander has a “most dangerous target” he can command its engagement, overriding the AGM.  Figure 7: Screen Capture of Networked Fires SurrogateThe NWF prototype allowed the commander to distribute responsibility for fires dynamically throughout the game.  The battlespace was divided into zones of responsibility (ZOR).  These control measures roughly approximated phase lines and boundaries and were numbered from close to far and from left to right.  These boxes were assignable by level of command.  When assigned a given zone of responsibility, any target sensings would be passed as high priority to that command level for action.   This resulted in focused fires and very little overlapping fires.  There was an information-only request available to commanders not assigned primary responsibility but who needed information on adjacent areas.  In the A2C2 environment, the NWF surrogate was aware of the ACM’s which were displayed upon the operator’s screen.  The ACM’s and the protective zones allowed the operator to observe the recommended fire solution in context of the valid ACM’s and then clear the fires by exception. 5.2  A2C2 Advanced Surrogate.The A2C2 surrogate provided an automated ACM input mechanism and create an ACMR message for transmission to TAIS.  As UAV’s move from ZOR to ZOR, the A2C2 surrogate initiated a UAV blanket at the appropriate altitude for the ZOR and sent the ACMR to TAIS.  Routes, position area hazards (PAH), target area hazards (TAH), and free fire areas were displayed on the screen in Figure 8.Figure 8: Routes, PAH, TAH, and Free Fire Areas Display5.3  Intelligent Exercise Management (IEM)The team used the intelligent exercise monitoring capability of ProtoCommand to provide real-time insight on critical parts of the experiment (this is important to be able to gauge the man-in-the-loop activity with respect to the concept).  Intelligent Exercise Management (IEM) uses an inference engine to detect and isolate anomalies in the DIS data flow as the exercise is ongoing to support real-time data collection, anomaly detection, man-in-the-loop monitoring and variable sensitivity.During the run it is important to test and verify the scenario events to ensure that the data gathered is necessary to validate the A2C2 simulation infrastructure.  A key variable in man-in-the-loop simulations is the effect of human decisions.  IEM was able to track positions of aircraft, messaging between the simulation and TAIS and firing decisions by the networked fires role player.   Additionally, the IEM was able to monitor the various participants and control their impact on the experiment as a whole.  6.  Benefits of Proto-Command in JAMUS The addition of a real-time intelligent technology to the JAMUS experiment helped us to do a better job of thinking through the process.  We examined A2C2 simulation in a net-centric C4I context by adding Net-centric logic/control. The team was also able to prototype A2C2 functions not yet in TAIS.  Lastly the team was able to control the process to get a clear picture of the development road ahead for A2C2 simulation requirements.   7.  Future Work.The ProtoCommand team is developing requirements for a Networked Fires Federate for RDECOM’s Modeling Architecture for Technology and Research Experimentation (MATREX) STO in 2005.  8.  References[1] AMRDEC: “Final Report, RDE Command First Application (1stApp)”, July 2003.[2] AMRDEC: “Final Report, NLOS-LS C3 STO Simulation”,   December 2003.[3]  Weber, Ralph; Tackett, Greg; Larsen, Karin; and Roose, Kathryn: “The Many Lessons from the RDE Command 1st Application – But Did We Learn Anything?”, SIW Paper 03F-SIW-005, September 2003.[4] Kelton, James: “Tactics, Techniques, and Procedures for the Tactical Airspace Integration System (TAIS)”, January 2004.[5] TRAC-WSMR: Caspian Sea Scenario Brief”, November 2003.[6] CSC: “ProtoCommand Users Guide v1.5”, February 2004.Authors BiographiesMonte Porter is the project lead for JAMUS A2C2 planning in support of RDE Command.  He was also the primary developer of IEM at CSC’s Simulation Center of Excellence.Michelle Herman is lead simulation engineer and designer of the DIS / ProtoCommand interface and the ACMR PDU at CSC’s Simulation Center of Excellence.Terri Wood is the lead / primary developer of the Networked Fires and A2C2 functionality at CSC’s Simulation Center of Excellence.John Hughes is the TAIS Integration  lead for JAMUS at CSC’s Simulation Center of Excellence.Mehri Abidi is the lead software developer of the DIS / ProtoCommand interface at CSC’s Simulation Center of Excellence.Lewis Harmon   is the lead engineer for the TSIU interface at CSC’s Simulation Center of Excellence.PAGE  Figure 2: APEX Labs LayoutFigure 4: FCS UA Relative Altitude Requirements