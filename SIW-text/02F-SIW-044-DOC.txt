Large Area, Virtual Training Databases with CTDB-GCSKenneth B. Donovan, Ph.D., Patricia Husband, Michael Longtin, Paul Palma  Lockheed Martin Information Systems 12506 Lake Underhill Road, Orlando, Florida 32825-5002Ph: 407-306-3368, Fax: 407-306-3472 HYPERLINK mailto:ken.b.donovan@lmco.com ken.b.donovan@lmco.com,  HYPERLINK "mailto:patricia.husband@lmco.com" patricia.husband@lmco.com,  HYPERLINK "mailto:michael.longtin@lmco.com" michael.longtin@lmco.com,  HYPERLINK "mailto:paul.palma@lmco.com" paul.palma@lmco.comKeywords:Synthetic Natural Environment, Database Generation, SEDRIS, SAF, CTDB, GCSABSTRACT: Lockheed Martin Information Systems is producing over one million sq. km of synthetic environment (SE) databases for virtual flight training applications, with correlated databases in Compact Terrain Database (CTDB) format, visual and radar run-time formats.  The CTDB is produced in the Global Coordinate System (GCS) to provide the necessary correlation with WGS-84 over large areas.  Lockheed Martin has prior experience producing large area CTDB-GCS for use by JointSAF in constructive simulation exercises.  We also have produced large area databases for virtual flight trainers.  However, this is the first virtual flight trainer database that included CTDB-GCS production.  The CTDB-GCS is used pervasively within the simulation functions including semi-automated forces, electronic warfare, communication, ownship dynamics, training scenario generation and exercise control.  This paper describes the process we used to produce the large area database.  The processs, including enables database re-use from a worldwide simulator library covering over 17 million sq. km. that was built from NIMA sources.   We describe the SE database requirements and tools, the worldwide database library, the use of SEDRIS and CTDB-GCS, and the current database production progress for the flight training systems.Introduction Virtual flight training systems continue to advance in the fidelity and correlation of synthetic environments (SE). In the past, virtual trainers typically approached SE from the perspective of the simulator’s visual system imaging function, optimizing the SE for the high cost image generator subsystem.  The requirements for other simulation functions such as the tactical environment (semi-automated forces, electronic warfare), instructor control, and radar simulation were treated as a secondary consideration.  Growing rRequirements for high fidelity tactical environments, coupled with the need for correlated network operation, have challenged this heritage visual-centric paradigm. This paper describes three aspects of our solution to these SE requirements for a virtual flight training system.  First, the SE is designed from the start to support the high fidelity, dynamic tactical environment in a networked environment, as well as the visual and radar imagery needs of a participant in the vehicle simulator.  Second, the SE system design uses Compact Terrain DataBase (CTDB) to provide the SE representation for the tactical environment.  The CTDB was chosen for compatibility with the several semi-automated forces (SAF) packages, including JointSAF, ModSAF, and EXPORTCGF.  The However, the basic CTDB “flat earth” representation did does not support the required large database size of several hundred thousand square kilometers.  One of the enablers for high fidelity tactical environments over large areas was the work performedLarge area CTDB databases were pioneered by Lockheed Martin supporting the Synthetic Theater of War (STOW) in 1997 using the CTDB Global Coordinate System (GCS), as discussed in [1].  For the STOW project, we produced a gaming area of 380,000 sq. km for JointSAF,  with a correlated ModStealth using the CTDB Global Coordinate System (GCS).  For the current large area databases, we also employ CTDB-GCS to provide WGS-84 accuracy, including curved-earth curvature horizon effects.  A third issue we addressed for the SE system design is database re-use.  The databases include generation of new areas from NIMA sources, however most of the area is re-use from previously developed terrain databases. This paper addresses these issues in the context of building four several geographic databases for virtual flight trainer applications – collectively over 1 million sq. km.   Other applications may be interestedbenefit from in this process that efficiently generates large area databases in CTDB format from a worldwide SE library.SE Requirements The primary SE requirement for the application is to support a wide range of flight training tasks, such as: takeoff/landing; formation flight with other networked simulators; low-level terrain following; and tactical engagements with computer generated entities and electronic warfare.  A top-level view of a typical networked simulation system for virtual flight training is shown in Figure 2-1.  Each vehicle simulator (only one shown in figure) provides the virtual environment for one aircraft crew.  The tactical environment is provided, via the network, from other networked vehicle simulators and the tactical environment applications such as SAF entities and electronic warfare (EW).  Various support applications allow control and monitoring, such as the Instructor / Operator (IOS) and after action review (AAR).Figure 2-1.  Typical Virtual Simulation SystemFigure 2-1 also highlights that there arethe use of the SE to support several “presentations” of the SE.  For example, the tactical environment applications query the SE to govern entity movement (trafficability, collision) and to determine height above terrain (HAT) and line of sight (LOS) occlusion with other entities.  Within each vehicle simulator, the ownship also uses the SE for queries such as HAT height above terrain (HAT) and line of sight occlusion (LOS)LOS.  The SE must also support generation as well as generating images for of radar and visual images displays (infrared, night vision goggles, and unaided out-the-window).  Each of these SE presentations must be correlated, even where different run-time formats are used to support the different presentations.  For the subject implementation, three run-time database formats are used.  CTDB is used to support the tactical environment, support applications and vehicle simulator SE queries.  Correlated radar and visual run-time databases are used for each vehicle simulator radar simulation and visual simulation.  The SE must be geo-specific, generally at a 1:250,000 scale with 1:50,000 scale in areas of interest and specific detail to support mission operations.  The flight training application requires the ability to support operating areas covering dozens of geo-cells.  The largest database exceeds one half million sq. km.  One immediate implication of the large area requirement is that each run-time representation must provide correlation with WGS-84, including position, range, bearing and earth curvature.  In addition, terrain paging must be supported.  Another key SE requirement for our training applications is database re-use. The SE approach was based on database re-use from a SE library developed over several programs that covers over 17 million sq. km.  A portion of the coverage of this library is illustrated in Figure 2-2.  The SE Library is built from geo-specific source data.  The resolution of the library is generally at a 1:250,000 scale, with 1:50,000 scale in areas of interest.  The fidelity of the SE Library supports a range of training operations, from airfield operations to ground target engagement. The SE Library is attributed with feature types and materials required for SAF, radar and visual presentations.  Figure 2-3 illustrates a sample of the library coverage from Alaska. (Reference [2] for additional information regarding this library.)Figure 2-3.  Sample Area of SE Library CTDB and GCS Background CTDB is the runtime representation of the tactical environment used by several SAF systems, including JointSAF, ModSAF, and ExportSAFEXPORTCGF.  The CTDB storage representation was designed with compactness as a primary driving factor so that file sizes may be kept to a minimum.  “Libctdb” refers to the software library that provides an API for the SAF system, allowing it to extract information from CTDBs.  Runtime efficiency of the feature lookup algorithms is a major design emphasis of libctdb.CTDB Coordinate SystemsTwo coordinate systems are supported by CTDB: topocentric coordinates (TCC) and the Global Coordinate System (GCS).  The following provides a brief overview of these systems.Topocentric Coordinate SystemA TCC system is a Cartesian system whose origin is on the earth's surface.  The system can either be derived from UTM data (as SIMNET terrain databases have been; often called the flat-earth approach) or from GCC data (often called the curved-earth drop-off approach). UTM-derived TCC systems use a Transverse Mercator projection of the elevation data onto the XY plane of the Cartesian frame.  TCC systems have the run-time computational advantages that the X, Y, Z axes represent East, North, Up and the XY-plane represent an elevation of zero with respect to the reference ellipsoid.   Many standard ellipsoids may be used.  These TCC characteristics facilitate simulation programming because the numerical values of locations and vectors described in TCC systems have an easily understood and intuitive physical significance.  In contrast, the Geocentric Coordinate System (GCC) utilizes large vectors relative to the earth center and the “Up” vector varies with location.However, CTDB-TCC has several key disadvantages.  The gaming area size for CTDB-TCC is generally limited to a few geo-cells (~40,000 sq. km).  One limiting factor is that standard libctdb, such as used by ModSAF and JointSAF, has a simplistic database paging scheme so the gaming area must be relatively small to maintain efficient run-time performance.  Another limiting factor is that projection distortions effects (such as lack of earth curvature and latitudinal convergence) increase with gaming area size.  For example, ships in the CTDB-TCC world may be able to detect entities should be that are over occulted by thethe  real world horizon in the CTDB-TCC world, whereas they  would not be able to do so in the real world.  Because of these disadvantages, we determined that CTDB-TCC was is not suitable for large area flight databases.CTDB-GCS for Large Areas The global coordinate systemGCS was designed in an attempt to eliminateto address the disadvantages of projected systems while retaining the computational advantages.  For information on CTDB-GCS, refer to [3]. A brief background is provided here, including extracts from the referenced paper.  According to the GCS definition, the earth is divided into cells, as shown in Figure 3-1. Each cell covers a geocell (one degree latitude by one degree longitude), although a cell contains multiple geocells near at the poleshigher latitudes, where lines of longitude converge.      Figure 3-1.  A GCS cell on the earth's surface.  The GCS cell origin is the center of the cell. (Latitude curvature is exaggerated.)Within For each GCS cell, a local Cartesian coordinate ssystem et is defined.  Each such that the system's cell's XY plane is tangent to the WGS-84 ellipsoid at the center of its cell.  Passing Therefore, each GCS cell is equivalent to the GCC frame passed through a linear transformation derives each cell's frame (translation and rotation).  Every point on the earth can be identified by four values, three Cartesian coordinates (x,y,z) and a GCS cell id, as shown in Figure 3-2.Figure 3-2.  The GCS coordinate system for one cell. The Z coordinate comes up out of the page. Latitude curvature is exaggerated.One key advantage of the CTDB-GCS approach is that it supports large gaming areas – potentially worldwide.  As mentioned earlierdiscussed in [1], Lockheed Martin built large area CTDB-GCS has been used fordatabases large areas of over 380,000 sq. km for for use in constructive simulation for STOW.  Because each Cartesian frame covers a limited geographic extent,  GCS can be used with gaming areas of arbitrary size, including  the entire earth.  With CTDB-GCS, each geo-cell can be paged as required for run-time access.  There is no distortion associated with GCS frames, since no projection is taking place.  Thus, a straight line in GCS space maps to a straight line in the real world.  Ships can no longer  "cheat" by being able to detect entities that are over the horizon.  .    Another advantage of CTDB-GCS is that converting between GCS and GCC is computationally cheap, requiring only a few multiplications and additions.   Each cell's frame is a linear transformation of the GCC  frame.  There are a few issues with libctdb calculations in CTDB-GGCS that must be considered.  Because lines of longitude are not parallel, the Y-axis of a GCS frame does not exactly point north, but it comes very close.  The deviation is limited within a geo-cell, and has a negligible effect for most simulation applications.  Similarly, because the XY-plane of the GCS Cartesian frame is not projected onto the ellipsoid, the Z-axis is not exactly the gravitational vector.  Again, this deviation is limited within a geo-cell, and has a negligible effect for most applications.  Models that are more exacting can be implemented on top of libctdb to compute the gravity  vector given a GCS point for those few instances when it iscorrect for these approximations, if  required.  Considering the benefits of CTDB-GCS, these GCS issues are relatively minor, provided the developer keeps them in mind.  Representation of the Geoid in CTDBFor flight simulator applications, elevations are typically expressed as elevation above mean sea level (Zmsl).  Sea level does not occur at a constant vertical GCS coordinate value, nor does it exactly follow the WGS-84 ellipsoid. The actual sea level of the earth is modeled by the geoid, as shown in Figure 3-3. The WGS-84 geoid is an empirically determined surface that can differ from the WGS84 ellipsoid by as much as 100 meters.   (See http://www.nima.mil/GandG/wgs-84/egm96.html)Since the actual shape of the earth (the geoid) is irregular, it can't be adequately described by a closed-form mathematical representation.  Rather, it makes sense to represent it via data tables.  The CTDB-GCS geoid representation is based on 15-minute geoidal separation data from NIMA. Known geoid points typically differ from each other in offset from the ellipsoid by less than two meters; for a 5000-meter view range, the geoid changes by less than half a meter.Figure 3-3.   The ellipsoid, geoid, and one GCS cell coordinate plane.Since the actual shape of the earth (the geoid) is irregular, it can't be adequately described by a closed-form mathematical representation.  The CTDB-GCS geoid representation uses data tables based on 15-minute geoidal separation data from NIMA.  Within a cell, geoid points typically differ from each other in offset from the ellipsoid by less than two meters.  For a 5000-meter view range, the geoid changes by less than half a meter.  CTDB-GCS provides the capability to include the geoid grid at evenly spaced points within the cell coverage area by interpolation using the nearest known 15-minute data points.   The geoid correction was significant for our application since the elevation above mean sea level is required.CTDB Feature Representation CTDB includes both physical and abstract representations of features.  The CTDB representations are summarized below, with more detailed information available elsewhere, for example reference [4].CTDB Physical Features Physical features in CTDB are those that have a physical significance, particularly the physical features effect affect queries for intervisibility, elevation, or soil type.  Currently, the following categories of physical features are supported by CTDB:  Terrain Skin Polygonsmicroterraincraters , ditches, bermsfighting positionsbridgesrubblesnow  Volumes  (Buildings and other structures that block intervisibility)buildingsrock drops  Linear Features  (Features described by a series of line segments plus additional feature-specific information)tree linestreesconcertina wireminefield fencessingle fenceswire road blockdragons teeth  Canopiestree canopies, camouflage canopies  Laid Linear FeaturesRoads, riversAbstract Features  Abstract features are have no direct physical significance, but may be useful to the simulation.  One purpose would be for reasoning or human readable displays of non-physical information, such as political boundaries and town names.  Another purpose of abstract features is for storing abstractions of physical features that require less run-time computation to process than the corresponding physical features. For example, the tactical map of the tree forest canopyies would be time consuming if drawn from the large number of polygon fragments stored as physical features.  Instead, the map is drawn from the simpler 2D forest footprint stored as an abstract feature.   Another example of a feature that has both a physical and abstract representation is soil defrag areas.  The actual soil types of the terrain skin polygons are stored in the physical features (for microterrain polygons), the grid, and/or the TIN TIN section.  The perimeter for the aggregation of these polygons is stored as an abstract feature for quick, convenient retrieval and map drawing.  The types of abstract features supported by CTDB format are:  Point Abstract Features:  LABEL, TACTICAL_SIGNLinear Abstract Features: PIPELINE, POWERLINE, OFFROAD_SEGMENT, RAILROAD, DRAGONS_TEETH, POLITICAL_BOUNDARY, MICLICAreal Abstract Features: BOTTOM_MATERIAL, CANOPY, HYDROGEOLOGICAL, HYDRO_SURFACE, HYDRO_SUBSURFACE, SOIL_DEFRAG, STEEP_SLOPE, SNOW, URBAN_AREA, BRIDGE, BERM, CAMOUFLAGE, CRATER, DITCH, FIGHTING_POS, RUBBLE, CONTAMINANT  Physical Features vs. Abstract Features  Physical features and abstract features are each stored in their own sections of a CTDB file.  Physical features are stored on a patch-by-patch basis (typically 500 m X 500 m).  Abstract features can be arbitrarily large and are stored in a quad tree for the geo-cell. When considering how to represent a new feature in CTDB, one must decide if it should be represented as a physical feature, an abstract feature, or both.  In general, a feature should be encoded as a physical feature if it has an effect on intervisibility, or if it represents a change to soil types (like a road or a river).  Features that do not affect intervisibility or represent a soil-type change, but need to have their presence acknowledged in the database are put into the abstract features.  Both the physical and abstract features may be used for some functions.  For example, JointSAF has three major movement planners: movemap, routemap, and the road-route planner.  Routemap deals with gross-level planning and ignores small obstacles such as buildings, individual trees, and craters.  Routemap obtains all of its obstacle information from the abstract features and the linear topology.  The road-route planner is used to plan a route that stays on roads, so it obtains all of its information from the linear feature topology.  Movemap provides near-term vehicle-level navigation so it must consider all obstacles.  Movemap obtains information from the physical features (for trees, tree lines and buildings), the abstract features (for tree canopies, steep slopes, and soil defrag areas), and the linear topology (for road and river networks).  Since the CTDB can be used to support multiple movement algorithms, we provide both the abstract and physical representations of the SE.System Database Generation Approach Lockheed Martin has developed a system-level approach for the SE.  This approach is illustrated in Figure 4-1.  We build a Common SE that contains the complete SE definition as needed by all the simulation functions for our application. The Common SE is then compiled to run-time formats and distributed to the simulation. Common SE RepresentationThe Common SE provides the geometry (position, shape, height, width) and attribution to support the various simulation functions.  The principal elements of the Common SE are the terrain skin, imagery blanket, surface features, and surface models.  The Common SE represents the terrain surface as is an Integrated Triangulated Irregular Network (ITIN).  The ITIN precisely captures topographic vector features with known elevations, (such as airfield runways or ocean shorelines) as well as representing the elevation grid – typically from NIMA DTED™ Level 1 or map contours.The Common SE includes a geo-referenced imagery blanket that can be at different resolutions in different areas.  The imagery blanket is used to supplement or correct surface feature locations.   The imagery blanket it is also provided for visualization purposes by texturing the visual polygons with the imagery information. The imagery blanket can be at different resolutions in different areas. The Common SE surface features include areal, lineal and points, such as hydrography, vegetation, transportation, and built-up areas.  The surface features have attribution attributes such as includes feature type (classification), surface material, trafficability type, and visual appearance (color, textures, light parameters).  The Common SE surface models are all contained in a model library.  Library entries include both simple models (tree, building) as well as complex models (airport with runways and multiple buildings).The Common SE provides both abstract and concrete (or physical) representations.  For example, the road representation includes the abstract road centerline, the area of the roadbed, and the many road polygons that are incorporated into the terrain surface.  Similarly, the models in the Common SE model library for a building include the wall and roof polygons, as well as the roofline “footprint” and roofline height. The Common SE attribute table provides a flexible mechanism for feature attribution of the landmass and models using external attribute tables (that is, attribution stored externally from the landmass and model data).  The SE attribution table can support different environmental data models.  (See [5] for a discussion of environmental data models.)  The SE Library utilized the NIMA Feature Identification Code (FIC) and material (MAT) for the feature classification/material combination.  Current databases are processed with the Environmental Data Coding Standard (EDCS) Classification Codes and material codes. The SE attribute table accommodates both the NIMA attribution type and the EDCS attribution, allowing the heritage database to be easily upgraded with the EDCS.  This capability allows use of heritage and new databases together.  SE Database Generation Process The database generation process is an integral part of the overall system engineering process and includes An SE requirements analysis, derivation and traceability, as well as identifying the SE analysis of requirements was performed and a requirements traceability matrix established. The capabilities and limits limitations for each simulation function were identified.  The requirements traceability and function definition dependencies were used to identifydetermine the database design criteria to meet each requirement.  The database system design also includes specifying feature attribution definitions required in the Common SE to support the various simulation functions to insure the Common SE is efficiently processed for each function.An enhanced Synthetic Environment Database Generation System (SE/DBGS), called TARGET3™, produces the Common SE.   TARGET3 leverages COTS tools into a simulation framework (or “toolbox”) that addresses simulation application requirements. , as discussed in [6].  The TARGET3 toolbox provides the framework to integrate the COTS tools and interface with SEDRIS, OpenFlight™, various NIMA data products, and run-time formats.  For this application, the COTS tools include: Kodak ENVI™ for image processing; MultiGen Creator™ for 3d modeling; and Adobe Photoshop™ for object texturing.  A key factor of our process is leveraging database re-use from the an SE Library that covers over 17 million sq. km and has been field-proven in other trainers..  The entire geographic area is based on re-use from the SE Library that covers over 17 million sq. km.  Our process could regenerate these areas from source data, but wOnee have seen several advantages to re-using databases that have been field-proven in other trainers.  Theis that the life cycle production cost for database conversion is significantly lower, particularly for the areas that were enhanced areas that combined with multiple data sources and user feedback.    In addition, we are able to provide correlation with previously fielded trainers by sharing a common SE definition.  We extract the relevant geocells and models from the SE library.  The SE attribute table was is updated to include the appropriate EDCS coding, and the SE model library was updated to provide the necessary CTDB representations.  Some enhancements were alsoare made to the SE Library landmass area for the current application areas of interest; using various source data such as overhead imagery.  The Common SE is then used to compile the CTDB, radar and visual run-time formats.  The Common SE can be incrementally built, and small areas can be enhanced without re-compiling unaffected areas.  While the immediate discussion is related to virtual flight trainer applications, we have also successfully applied this Common SE approach to tactical ground trainers, as discussed in [7].  For the tactical ground trainer application, the SEDRIS was used to compile correlated databases for tactical environment application based on the Close Combat Tactical Trainer (CCTT) SAF.   This same SEDRIS has also been used to compile CTDB.SE Export and CompilationFigure 5-1 shows the export data flow to produce the CTDB, radar and visual run-time formats from the Common SE.  The radar and visual compilers operate directly on the Common SE.  For the CTDB, the Common SE is first exported into SEDRIS, and the SEDRIS is then compiled to produce the CTDB.  The SEDRIS is also available for interoperability with other simulations.  The radar and visual compilers operate directly on the Common SE.  Each of these export steps is discussed in the following paragraphs.  SEDRIS Transmittal RequirementsThe CTDB representation of the SE is developed using SEDRIS.  SEDRIS provides a flexible format that allows data interchange between producers and consumers.  SEDRIS provides a variety of ways to represent and organize data.  This flexibility can also present problems since the producer may represent information in SEDRIS in a way the consumer software is not designed to handle efficiently (or at all).  The producer may also produce SEDRIS that is “valid”, but does not contain the feature content needed by a consumer.  For example, a SEDRIS transmittal could be produced with road polygons, but no road centerline.  A compiler for a SAF that requires a road centerline for route planning would be forced to derive the centerline.We used a SEDRIS Transmittal Content Requirements Specification (TCRS) to document the structure and content details for the SEDRIS transmittal.  The TCRS provides the detail that allows consumers to effectively consume the transmittal. The TCRS aided the front end design process by: 1) ensure ensuring the SE contains all the information needed in the CTDB and 2) provide providing a requirement specification for the SEDRIS export software and CTDB compiler designs.  Additional information regarding our use of a TCRS in the context of a tactical ground trainer program is described in [7].  A brief description of the TCRS for this flight application follows.The SEDRIS transmittal is in geodetic coordinates relative to the WGS-84 with the geoid correction (lat, long, Zmsl).   The SEDRIS transmittal structure is partitioned into one or more geocells.  Within a geocell, the terrain is represented as a spatially indexed hierarchy of geometry.  Areals, lineals and points are represented as spatially indexed feature topology.  A union of features is created to contain each feature type under the spatially indexed feature topology.  Areal and lineal data is placed into the union of feature object in layer order where the first feature is closest to the terrain skin and the last feature in the list is fully visible, or “on top”.  We use the model library for all models, stored in local space rectangular coordinates.  These models are then placed and oriented using feature model instances stored in the union of features.  This allows the consumer to parse the library once to retrieve all the models that are used in the transmittal.  The model is placed into the SEDRIS Model Library as a Feature_Model. The polygons, which represent either model footprints or parts of the visual representation, are created as areal features.  The span and ramp polygons that represent a bridge are placed in the Feature_Model object as the SAF representation of the model.SEDRIS Export The SEDRIS Export software operates from the Common SE representation, which is the editable source created and maintained by the DBGS tools.  The Common SE representation includes landmass source, an OpenFlight model library and an SE attribute table.  Landmass source contains both the 2D culture features as points, lines and areals and the 3D terrain polygons. The Common SE landmass includes multiple levels of detail, however only the finest level of detail for the database is exported into SEDRIS for the CTDB.  In addition, only selected representations of the Common SE are exported to SEDRIS. For lineal features (roads, streams), only the centerline with a width is exported.  For models, much of the model polygon detail is required for the visual representation only, so it is not exported.  Most models are provided with a simple footprint, such as a building roofline.  , although oOther ther models may contain more information, such as bridge span and ramp polygons.  These are exported with appropriate attribution so the CTDB compiler has an explicit definition of spans or ramps.The SEDRIS export application processes the “feature side” of the SEDRIS transmittal first. The source data is read and the areal, lineal and points are processed in that order.  Elevation data (Zmsl) is provided for each feature location vertex based on the elevation of the Common SE terrain skin polygons.  The SEDRIS model library is constructed as the landmass data is parsed so that only those models used in the transmittal are included.The “geometry side” of the SEDRIS is processed next.  The for the terrain skin polygons are processed into the geometry side of the SEDRIS transmittal.  Feature areal data is integrated into the terrain skin as required for the CTDB where the terrain skin polygons encapsulate areal classification and attribution as well as elevation data.  The feature areals that represent forests are stored in the SEDRIS geometry as both forest floors, at the surface of the terrain skin, and as raised polygons to represent the forest canopy. The height is included in the elevation component of the location object. A SEDRIS attribute set table is used to provide a common attribution set for all feature and geometry data.  The SEDRIS attribute set table is created from the SE attribute table.  The SE attribute table also contains the unit and type for each SEDRIS Attribution Code and allows customization of SEDRIS data on a per database basis.  SEDRIS features and geometries are assigned an attribute set index that points into the attribute set table.  Some attribution that is generally unique to a feature, such as the width of a lineal (road or river), is provided with an inline property value.We incorporate several of the tools provided by the SEDRIS team to aid our development and quality check the SEDRIS data.  These tools include depthDepth, syntax Syntax checkerChecker, rules Rules checkerChecker, FOCUS, and SEE-IT.  These tools provide a significant benefit.CTDB Compilation When we began the project in 2001, we assessed the SEDRIS_2_CTDB compiler available through the SEDRIS team, as described in [4], however it did not support multi-cell GCS with geoid correction. [4]  Therefore, we elected to enhance the TARGET3 CTDB compiler to consume SEDRIS.   The TARGET3 CTDB compiler has options to produce CTDB3 and CTDB7; supports big and little endian; and supports TCC or GCS with geoid correction.The TARGET3 SEDRIS-to-CTDB compiler consists of two fundamental components: the front end and the back end.  The front end uses the SEDRIS API to traverse the source transmittal, extract the feature data, perform relevance filtering, map it to suitable CTDB features, and write the resulting data to intermediate files.  The front end permits the gaming area to be divided into multiple SEDRIS transmittals, and small portions of the gaming area can be updated via additional transmittals.  Once the intermediate files have been completed, the feature data in the intermediate files are passed to the back end that outputs the feature data into CTDB format.  The backend formatter works on a geo-cell basis, so the gaming area can be incrementally built up during database production.  Selected geo-cells can also be re-formatted from the intermediate files if there is a database update.In the interest of efficiency, the ultimate goal of compiling the SEDRIS data into CTDB format is to extract only the data that is necessary for use by the SAF.  There needs to be an easy way to configure the mapping between the SEDRIS features and their corresponding CTDB instantiations.  This is achieved by putting the mapping into text files that are read by the compiler.  The mappings can thus be changed by the user without having to rebuild the compiler.  This is desirable since there are many ways to describe features and attributes in SEDRIS transmittals. This customization capability enables the compiler to consume many types of SEDRIS transmittals with varying content specifications. Each type of transmittal can have its corresponding mapping files.  There are two mapping files:features.rdr maps SEDRIS features to their corresponding CTDB instantiationsattributes.rdr maps SEDRIS property values to their corresponding CTDB feature attributes.Feature Mapping File  Features found in the source SEDRIS transmittal are mapped based on their SEDRIS classification codes (according to the Environmental Data Coding Standard) and their SEDRIS data types.  The following data types are supported:  SE_POINT_FEATURE_TOKEN  (POINT) SE_LINEAR_FEATURE_TOKEN  (LINEAR) SE_AREAL_FEATURE_TOKEN  (AREAL) SE_UNION_OF_PRIMITIVE_GEOMETRY_TOKEN   (POLYGON)  These primitive SEDRIS types can be mapped to any of the CTDB physical or abstract feature classes.  Each entry in the feature-mapping file has the following syntax:  (<facc> <physical feature class> <abstract feature class> <soil type>)  <facc> consists of the SEDRIS classification code immediately followed by AREAL, LINEAR, POINT, or POLYGON.<physical feature class> specifies one of the following:NONEBUILDINGLINEARTREETREE_CANOPYTREE_CANOPY_EDGEMICROTERRAINML_MICROTERRAINDEFAULT_MICROTERRAIN  Any given feature in the SEDRIS transmittal file may have a physical instantiation, an abstract instantiation, or both.  <abstract feature class> specifies any of the abstract feature classes listed in Section 3.2.2.  <soil type> specifies one of the standard fifteen SIMNET soil types (i.e. SOIL_DEEP_WATER and SOIL_ROAD).  The following examples are excerpts of a feature mapping file.  The house / school building example shown below specifies that any feature in the SEDRIS transmittal of type SE_AREAL_FEATURE_TOKEN with a classification code of AI070 or AL351 will be instantiated as a building feature in CTDB.  Since CTDB doesn't distinguish between houses and school buildings, both are mapped to the same feature type. (The line numbering is provided for reference in the description that follows.)Line 1;; House(AI070 AREAL BUILDING NO_ABSTRACT SOIL_DEFAULT)  ;; School Building(AL351 AREAL BUILDING NO_ABSTRACT SOIL_DEFAULT)  The bridge span example below illustrates the case where a single feature has multiple representations in both SEDRIS and CTDB.  For instance, a bridge feature in the SEDRIS transmittal may have both a geometry component and a feature component.  The geometry component describes the bridge deck as a series of polygons that are instantiated as multi-level terrain in CTDB.  The feature component describes the outline of the bridge deck used by the SAF for map drawingLine 2; Bridge Span (areal representation PVD display)(AQ045 AREAL NONE CTDB_ABSTRACT_SOIL_DEFRAG SOIL_ROCKY)  Line 4;; Bridge Span (polygonal representation of bridge deck)(AQ045 POLYGON ML_MICROTERRAIN NO_ABSTRACT  SOIL_ROAD)  Line 5;; Runway(GB055LINEAR LINEAR NO_ABSTRACT SOIL_ROAD)Line 1 specifies that any feature in the SEDRIS transmittal of type SE_AREAL_FEATURE_TOKEN with a classification code of AI070 will be instantiated as a building feature in CTDB.  Since CTDB doesn't distinguish between houses and school buildings, both are mapped to the same feature type, as shown in Line 2.  Lines 3 and 4 illustrate the case where a single feature has multiple representations in both SEDRIS and CTDB.  For instance, a bridge feature in the SEDRIS transmittal has both a geometry component and a feature component.  The geometry component describes the bridge deck as a series of polygons that are instantiated as multi-level terrain in CTDB.  The feature component describes the outline of the bridge deck used by the SAF for map drawing.  Line 5 specifies that any features of type SE_LINEAR_FEATURE_TOKEN with a classification code of GB055 (airport runway) are mapped to linear features in CTDB.  Attribute Mapping File  Feature attributes specified as property values in the SEDRIS transmittal may also be mapped to feature attributes in CTDB with the format (<ctdb attribute> <SEDRIS tag>).  An example excerpt is given below: (height  HGT_)   (width  WID_ LEN_)  The “height” line specifies that any property values in the SEDRIS transmittal with a tag of HGT_ will describe the height attribute of its corresponding CTDB feature.  The “width” line illustrates the case where multiple SEDRIS property value tags may be mapped to a single CTDB attribute.  For example, some transmittals may use the WID_ tag to describe some widths and LEN_ to describe others.  Thus, both tags are mapped to the CTDB "width" attribute.  Visual and Radar Compilation The SE/View PC-based IG software requires a run-time format to provide the visual representations of the Common SE.  These The visual representations include the out-the-window (OTW), sensor infrared (IR) and NVG simulations.  The visual run-time uses geocentric coordinates.  Each polygon stored in the Common SE database has four fundamental attributes: feature classification, material, color, and texture. These attributes in conjunction with data tables are used during the formatting process to generate the run-time data for SE/View. For each surface (or light), separate representations are provided for the unique characteristics of the OTW, NVG and infrared images.  For OTW and NVG, each surface is assigned a color and texture to be used for the respective image type.  For the IR simulation, the color and texture is based on the thermal characteristics of the surface that changes during run-time.  Therefore, the formatted database does not provide an IR “color”, but rather encodes the feature classification and material for each surface.  This allows the run-time thermal model to accurately represent the thermal characteristics of the surface color and texture due to the varying conditions in the simulation environment, as well as the characteristics of the feature classification and material.   The SE/DRLMS radar simulation software requires a separate run-time format to provide the radar representations of the Common SE.  The radar run-time data is provided in geodetic coordinates (lat, long Zmsl) using a 3D gridded structure.  Within the Common SE each feature that is radar significant contains attribution needed for the compiler to determine the radar cross section. Some features in the Common SE may only be represented for the radar, such as a radar reflector marking a runway.  The radar feature representation is comprised of the radar cross-section, or reflectivity for the feature. These reflectivity tables have been established for various radar systems, and allow the Common SE to be re-formatted for multiple radar types.  Radar reflectivity is based upon the same feature classification and material code pair that the IR simulation uses. Production Experience The current database covers over 500,000 sq. km (50 geo-cells), including the geocell border that surrounds the movement area in order to support the radar sensor and occulting range. High resolution enhanced areas such as airfields and target ranges are included in the database. The database contains geo-specific imagery with resolutions from 1.25 meters to 10 meters per pixel.  We used an incremental production approach for the database currently in production.  Once the design criteria was established, where a representative geographic area of the database was identified to beis used for verification of the design and user feedback.  The sample area process permitted the database procedures and design to be verified prior to full-scale production.  The sample area process included extracting the Common SE from the SE Library, updating the attribution as required, and verifying the operation on each simulation (OTW, IR, radar and CTDB).  The OTW simulation was formatted first to support a visual review during a program review.  Once the OTW simulation was verified, the other simulations were formatted and verified as well.  Each simulation was verified independently using test points from the Common SE.  Landmark quality control (QC) points were recorded from the Common SE (lat, long Zmsl), and those QC points were checked in each simulation.   We then verified correlation between simulations. Correlation verification for the OTW, IR and NVG simulations includes side-by-side evaluation of for both database features and entities on the visual system. This side-by-side comparison verified the positional accuracy of features within each environment. For instance, the position of a vehicle entity was verified to be properly located in each simulation.  This side-by-side comparison verified the positional accuracy of features within each environment. Verification of color and texture for these simulations was also performed during the side-by-side evaluation.  Database correlation with the CTDB-GCS simulation involved a series of test points with known locations (latitude, longitude and elevation) and features. The vehicle simulation software positioned an entity at a given test point location in the environment, emulating a remote entity. The vehicle simulation software uses the CTDB-GCS data to determine the elevation information for the test point. The OTW visual system was used to verify the proper position and elevation of the entity. An additional part of this correlation test was to view the entity position on a JointSAF plan view display. This process was repeated throughout the gaming area. Since each database is formatted from the Common SE, the correlation between simulations is maintained. Database correlation with the CTDB-GCS simulation involved a series of test points with known locations (latitude, longitude and elevation) and features. The vehicle simulation software positioned an entity at a given test point location in the environment, emulating a remote entity. The vehicle simulation software uses the CTDB-GCS data to determine the elevation information for the test point. The OTW visual system was used to verify the proper position and elevation of the entity. An additional part of this correlation test was to view the entity position on a JointSAF plan view display. This process was repeated at test points throughout the gaming area.  The end result being verification that the CTDB-GCS database correlated with the visual simulations.The sample area verification effort produces a documented set of procedures for production of the remaining geo-cells of the database. This The first database has been formatted and is undergoing verification during database production process is currently near completion, with the first database area scheduled for release in the summer of 2002.   Additional databases are scheduled for production about every 6 months.The sample area is also provided to support trainer system integration and test.  This includes an evaluation of all simulations in the correlated run-time environment.  The verification utilized preset flight path information and entities located within the environment.  The flight path is enabled and each simulation verified for correlation throughout the flight path test.  This system testing is planned for summerto be completed during 3Q2002 of 2002.   Additional databases are scheduled for production about every 6 months.Summary and Conclusions We have discussed our experience in generating SE databases for virtual flight applications that incorporate CTDB-GCS for large areas.   We described our process for generating a Common SE that leverages SE Library re-use, as well as COTS tools to enhance the database or generate new areas.  The Common SE provides a complete definition of the environment that supports all the simulation functions, and is used as the common source to compiling all run-time formats and to produce SEDRIS.   We also described our use of a SEDRIS Transmittal Content Requirement Specification (TCRS) to explicitly define the SE content and structure.This process is being applied successfully to support our flight applications on multiple programs.  The initial database currently in construction has been verified with a sample area and the full area is undergoing verification this summer.  This is the largest CTDB we ever generated that supports fully correlated run-time visual and radar simulations.   Three additionalAdditional flight application databases are scheduled for production over the next twelve months, allowing continuing refinement of the process for flight applications.  This process can also be used to support other applications that require efficient generation of large area CTDB databases.   References[1] D. Miller, T. Miller, C. Cornish, J. Rourke, K. Cauble: “STOW Southwest Asia Terrain Data Base”.  Simulation Interoperability Workshop, March 1998. [2] K. Donovan, J. B. Howie, W. Wojcieshowski: ``A Multi-Resolution, Integrated Terrain (MRITIN) Database''. Simulation Interoperability Workshop, September 1997. [3] H. Lind, D. Gafford, D. Bakeman: ``Generation and Simulation of Synthetic Environments Using the Global Coordinate System''. Simulation Interoperability Workshop, September 1997.[4] F. Mamaghani, K. Wertman, A. Tosh, “SEDRIS to CTDB and CTDB to SEDRIS Conversions Tutorial”.  SEDRIS Technology Conference, June 2001[5] A. Janett, D. Miller, J. Nordstrom, P. Birkel: “Extending the JSIMS Terrain Common Data Model to Support Virtual Simulations”.  Simulation Interoperability Workshop, March 2000. [6] K. Donovan, M. Field, G. Gutowski: ``An Open Architecture for Synthetic Environment Database Creation''. Simulation Interoperability Workshop, September 1999. [7] K Donovan, K. Stump, J. Watkins: ``Virtual Database Production with SEDRIS''. Simulation Interoperability Workshop, September 2001.Author’s BiographiesKENNETH B. DONOVAN is a principal engineer in synthetic environments at Lockheed Martin Information Systems.  He has 20 years experience in the simulation industry, and has numerous publications and patents in the field.  Ken led the development of several SE products, including the TARGET database systems, and participated in standards development for SIF and SEDRIS. PATRICIA HUSBAND is a staff software engineer in synthetic environment databases at Lockheed Martin Information Systems.  Pat has over 20 years as a software engineer including twelve years in the simulation field.  Pat worked five years at the National Test Bed producing real-time wargaming simulations to evaluate concepts for military operations.  Pat also has several years experience in the development of software used to generate synthetic environment databases, including consuming SIF databases for CCTT/UKCATT and generating SEDRIS data for ground and flight SAF.MICHAEL J. LONGTIN is a staff software engineer at Lockheed Martin Information Systems Advanced Simulation Center.  Michael has contributed to numerous projects involving terrain reasoning, route planning, movement, Stingray, and many behaviors including ground vehicle tactics, RWA behaviors, and smoke-related behaviors.  He was also involved in the Dynamic Terrain and Objects (DTO) development, and extended ModSAF's terrain database representation to support additional DTO features.  He has contributed in the field of route planning, having developed the concealed route planner in ModSAF, and making significant enhancements to the high-level cross-country route planner as well as the road network route planner in ModSAF.PAUL PALMA is the lead project engineer in synthetic environment databases at Lockheed Martin Information Systems.  Paul has over 20 years experience in the simulation and commercial graphics field.  Paul manages SE database design teams for both ground and flight trainers.Notice:  All trademarks are property of their respective owners.© 2002 Lockheed Martin CorporationFigure 2-2.  Portion of Extensive SE Library CoverageFigure 5-1.   SE Export and CompilationFigure 4-1.   SE Flow for Virtual Training System