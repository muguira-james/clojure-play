Ontology of the C2IEDM –Further studies to enable Semantic InteroperabilityChuck Turnitsa, Dr. Andreas TolkVirginia Modeling Analysis & Simulation Center (VMASC) Old Dominion University Norfolk, VA 23529 HYPERLINK "mailto:cturnits@odu.edu" cturnits@odu.edu,  HYPERLINK "mailto:atolk@odu.edu" atolk@odu.eduKeywords:System Interoperability, Semantic Web, Ontology, Data MediationABSTRACT: We have tried to show, in several earlier SISO efforts [“Taxonomies, Ontologies, and Battle Management Languages – Recommendations for the Coalition BML Study Group” - Tolk and Blais] [“Evaluation of the C2IEDM as an Interoperability-Enabling Ontology – Turnitsa and Tolk] that the study of ontology is a key point in developing techniques that will allow for semantic interoperability between simulation systems.  The case was made for this concept in general in [Tolk and Blais], where the development of a Battle Management Language (BML) ontology was strongly recommended as a way ahead for simulation-to-C4I interoperability.  Then in [Turnitsa and Tolk], an early view was given of how ontology could be defined, when considered in light of an interoperability-enabling referential data model.  Now we will extend the work begun in [Turnitsa and Tolk], by showing the early results of mapping the ontology of the C2IEDM, and exhibiting that ontology by using OWL, the Ontology Working Language of the World Wide Web Consortium’s ontology working group.Further description of what ontology means for this community, and how this is seen within the work done with the C2IEDM, will be discussed.  Examples of the ontology description work, with examples, will be given, and future applicability ideas will be discussed.IntroductionAs both the M&S and C4ISR communities move into the much wider world of systems which are composed of distributed components and distributed data sources, it becomes clearer that methods are needed for bringing those systems together into a state of more meaningful interoperability.  In [3], a refined model of conceptual interoperability was revealed, and a number of examples were given as to how more meaningful interoperability could be achieved.  One path that was explored was that of greater understanding of the data being exchanged between systems.  For that greater understanding to occur, we believe that the data must be specified in a model describing the conceptualized structure of the data, and the implications of that structure.  Since the early 1990s, the worlds of both computer science and cognitive science have agreed that, especially where data systems are concerned, the “specification of a conceptualization” is actually a formal ontology [4].Distributed Systems, Distributed DataThe need for systems to become more distributed (and once distributed to have the means to semantically interoperate) is clearly exhibited and vocalized by two ongoing areas of concern.  The first area is of course the pursuit of the semantic web [5] as envisioned by Tim Berners-Lee.  The semantic web is a view of the future of the internet, and systems and data encompassed within it.  That future version of the internet (which is achieved by improving our current state, not by replacing it) is one where greater understanding of the data presented in documents and employed by systems will be “self-described”  (via digital tagging). The self-described data (or metadata) will be both produced and consumed in such a manner as to be more meaningful to the other systems that need to search such data, discover such sources, or interoperate with such systems.  The second area of concern is one which is of much greater immediate interest to this body (the C4ISR forum of SISO), and that is the formulation and pursuit of methods that will enable the Global Information Grid.  For Network Centric Operations (NCO) to become a reality, all information systems supporting any organizations involved in NCO must be readily accessible, and must be able to readily access the systems and data of other systems.  Again, a means (similar to the ideas of the Semantic Web) must exist for the produced data (and systems) to be described in a way that a consuming system can understand its nature and implications.In both of these areas of concern, it quickly becomes understood that a common specification for describing the data elements within a domain must exist, or else how will the systems operating within that domain be able to describe themselves, or seek out others.  That specification is a formal ontology.The Battle-Space and its Data ModelThe universe of discourse (data domain) that we are concerning ourselves with at the present is the battle-space.  We believe that battle-space is an accurate term describing all that is pertinent (including environment, entities, and activities) in and around planned or ongoing military operations.  This is a common domain for both M&S and C4ISR, as in both cases the same elements must be described and addressed.A mature and agreed-to (by over two dozen nations) data model that describes this domain (the battle-space), and most (if not all) of its concepts, is the Command and Control Information Exchange Data Model, or C2IEDM.  That the C2IEDM is a mature model is agreed to by many international experts.  The question remaining is this - is the formal ontology describing the C2IEDM broad enough to serve as the ontology of the battle-space domain for all systems involved?  That is the subject of the research revealed in this paper.Components of a Formal OntologyIn [2] we defined the components of a formal ontology, namely Concepts, Entities, Relationships, and Rules.  At that time we gave a brief introduction of what the terms meant and also how they related to each other.  We also gave a brief introduction on the idea of a fractal ontology, wherein the ontological view of a domain could be redefined at a higher or lower resolution of detail and remain validly describable within the formal ontology.  A general method for evaluating the formal ontology of a data model, and its fitness to serve as a central referential data model for a domain, was also presented, but only in gross terms.  We will now show, in more detail, what the components of a formal ontology are, and discuss the means of evaluating each of the four components.ConceptsEarlier, in [2] we defined a concept as "anything that has addressable properties".  Although this is a loose definition, it fits our usage.  Within our formal ontology, concepts exist for several purposes - giving definition and identity to other concepts (which may be compounded of several entailing concepts), giving definition and identity to entities, and finally giving definition and identity to relationships.  As these three purposes are very similar (all involve the endowment of definition and identity), they should be considered as part of a class.  We will call members of that class compounds.  Compounds are defined explicitly as any of the components within our ontology that are composed of several concepts in identity.  This includes all of our ontology, with the exception of atomic concepts, and of course the rules (which are not composed of concepts, but are instead applied against concepts and compounds of concepts).We have earlier mentioned that the various characteristics of concepts are defined as "properties".  This is true, but when examined further it is easily seen that these "properties" are actually other concepts.  To continue, without confusing the earlier term, we will call these concepts "property exhibiting concepts", or "properties" for short.It is important to see that although a concept that exhibits a property might be attached to a compound, it is not necessary that the property have the same “value” at all times.  For instance, if the concept “location” were to be correctly attributed to an entity, that concept is always linked to that entity, although the value of that concept may change, over time.  This changing aspect of a “property exhibiting concept” is called, for convenience, a property value.The Dimensions of ConceptsFor evaluating the "concepts" component of a formal ontology, it becomes helpful to think of concepts in two dimensions.  First, each concept has a horizontal applicability, which consists of all the compounds to which a particular concept can possibly belong.  This, we can call the domain of a concept.  The domain of a concept also contains all of the possible property values that it might exhibit.  Second, each concept has a vertical applicability, where the concept and a collection of other concepts together define a compound.  This we can consider the range of concepts that define a compound.  The range of concepts that a compound has also contains all of the possible property values that the concepts in that range might have in relation to the compound.A Method for Concept EvaluationFor this component (concepts) of a formal ontology to be evaluated for completeness, then both aspects have to be considered.  First, the domain of concepts must be considered.  There should be a mix of both general concepts (those with a large domain) and specific concepts (those with a small domain) for a formal ontology to be effective.  If there are too many concepts that have a very small domain, then it will be difficult to compose rules for the formation of relationships between entities (all of the rules will be based on very small concept domains, therefore be very specific in nature, and not easy to wantify or analyze).  On the other hand, if there are not enough concepts with a small domain, then it might become difficult to identify very specific entities, and composing rules becomes very easy, but very difficult to apply with precision.  As an example of this, suppose that the only concepts describing the size of vehicles were this "Motorcycle sized, or smaller" and "Larger than a motorcycle".  With this simple set of concepts describing the characteristic size, it becomes very difficult to determine rules about relating a “vehicle” with “the ability to cross a certain bridge”.  As the number of vehicles "larger than a motorcycle" is very large, and there is a great range of weights and widths of those vehicles, it can be seen that basing "bridge crossing ability" rules on this (with any sort of precision) is not possible without further subdivision of the size concept.Second, the ranges of concepts have to be considered.  We have described the range of concepts that an entity can have in two broad terms - those concepts exhibiting internal properties, and those exhibiting external properties.  These two terms can apply to all compounds, but they are of particular interest in the area of entities.  The terms deserve greater explanation, and they seem easy enough to define.  Internal properties are those properties that give the compound self-identity.  External properties are those properties that define how the entity affects, and is affected by, other entities within the ontology (via relationships).  In evaluating the ranges of concepts that exist for the compounds of a formal ontology, it is important to understand to what purpose the ontological description will be put.  If it is to support all possible communications within a universe of discourse, then the sorts of interactions between entities, defined by the possible relationships and rules governing their application, must be considered.  At that point, each range of concepts must be evaluated to ensure that it has sufficient coverage of external properties to accommodate all of the possibly required relationships between entities, also at the different levels of detail-resolution that may be required. It is apparent, now, that the evaluation of the concepts of a formal ontology is based heavily in the use that the ontology is to serve within the universe of discourse.  This is unavoidable, unless the entire domain and range of all possible concepts were to be described as part of the formal ontology.  We also see the basing of evaluation within the realm of "intended use" as being a good thing - it allows an application of detail to exist where it is needed.EntitiesThe ontology of an information system (whether for computer science, cognitive science, information management or other areas) differs somewhat from the Ontology referred to by philosophy.  In philosophy, Ontology is the theory of being [16], it is the theoretical description about all that is, and how it relates to each other, within a universe of discourse.  There is a subtle difference existing within the study of ontology for purposes of enabling an information system - a difference that is helpful to keep in mind when considering entities.  That difference is this - in an information system, ontology is the study of the representation of all that exists within the universe of discourse.Entity Class and Entity InstanceWe see therefore that entities within a formal ontology are classes, in the taxonomical [14] sense, but with a formal definition of how those classes are defined (the exhibition of concepts related to the entity).  This (the class) is one of two possible views of entities within a formal ontology.  The second possible view of an entity is the potential for enumerations within that class.  It is possible for an enumerated entity to begin to have a separate identity from that of its parent class.  This is through the introduction of non-persistent properties.  Each enumerated entity shares the same persistent properties, and these are defined by the taxonomical class, as well as all the ontological concepts that define that class.  All enumerations deriving from that class inherit those concepts.  These are the persistent properties of those enumerations.  However, the nature of an entity to exist within space and time, and an entity's nature to change state as it is related to other entities (particularly phenomena), determine that it will have some properties that are non-persistent, and these change not only from enumeration to enumeration, but also over time.The Categories of EntityWithin a formal ontology, there is room for both aspects of an entity – namely the class and the instance (or, enumeration).  The class comes from the roots that a formal ontology has in the taxonomy of its universe of discourse.  The addition of instances to such a set of classes allows the formal ontology to serve as a knowledge base.  Both of these are required, as both have separate property issues that need to be addressed by the ontological concept structure.  The same is true for all three aspects of entity - object, event, and phenomena.Objects are easy to comprehend, as they are the objects and things of the world (universe of discourse) for which the formal ontology is describing representations.  What is important to understand about objects is that they have several aspects that might not be immediately apparent.  First, entities can tangible or abstract.  By naming an entity tangible, we mean that it can be a physical object (such as a truck, or a country).  Equally valid, however, is that an entity can be an abstract thing - something that has definite properties but is not physical.  Some examples of abstract entities could include culture, organizations, or decisions.  In addition to objects, there is also the sub-category of entity, which we refer to as events.  We define an event as "an entity with a time component".  An event-entity is similar to an object-entity in that it can be tangible or abstract, but it has a period of time (which, as above with object-entities, need not be a real period of time, but could be future, past, nominal, or potential) during which it represents an entity with defined properties.  An example of a tangible event is a rainstorm (with a start time, a stop time, and a tangible object related to it - rainfall).  An example of an abstract event is a meeting (an ad hoc organization structure with a time component).The final sub-category of entity is phenomena.  Phenomena are the entities that, when related to other entities through the relationship component of a formal ontology, change the state of the entity they are related to.  This is done by affecting the properties or property-values of the affected entity.  Phenomena share the aspects of entities in that they can be real or non-real, they can be tangible or abstract, and they can exist over time, similar to an event.  Phenomena include the elements of linguistics that we think of as verbs and modifiers.  Anything that implies action or change is a phenomena-entity, and some examples are damage, movement, unloading, growth, decay and others.  They are related through relationships, and have properties (as all entities do) so that rules can be formed about their applicability for these relationships.A Method for Entity EvaluationOur method for evaluating entities must, as with concepts, be based in the intended use of the formal ontology.  From that starting basis, we can move to the various aspects required for consideration in our evaluation.First entities must have properties (more accurately, property exhibiting concepts).  The concepts defining entities, and giving them accessible properties, must be apparent and accessible.  In fact, for ontological purposes, they must be defined.  This is true not only of entity classes, but also of entity instances.  It is equally true for not only properties but also property values.  In the previous section on concepts, we defined the range of concepts of a compound to be all of the concepts that define that compound - in the case of an entity (which has two possible states of existence - as a class and as an instance), this range can exist in several different states.  All of them must be explicitly addressable and apparent for the entity component to be evaluated to be adequate.The second consideration in our evaluation is the consideration of all the possible entities (objects, events, and phenomena).  Are all of the requirements of communications within the universe of discourse satisfied by the enumerated list of all possible entity classes?  Are the definitions of the entity instances sufficient to accommodate the needs of the universe of discourse?The final consideration is the depth of definition that the ranges of concepts provide in defining the entities.  Are the entities defined to enough (and not too much) detail to afford the sorts of use they will be put to in the universe of discourse?  If we have a universe of discourse that is discussing the movement of cargo through a supply system, then it is necessary for the entity "truck" to have the concepts of capacity, reliability, speed, ease of use, etc as property exhibiting concepts within the formal ontology.  The concept of "what color is the seat inside the truck" is probably too much detail. But the lack of "how easy is the cargo bed to access" might be necessary.Entities within a Fractal OntologyA word about this final consideration is in order.  There exists the idea of a fractal ontology (or "fractology" as a colleague has suggested recently), which implies that the level of examination that the entities and relationships within the formal ontology might change in resolution, depending on the use that it is being put to.  To support this sort of idea, then the attendant concepts of entities must exist to appropriately support the highest and lowest resolution of consideration, and all levels in between that may be adopted.  At that point, we have a formal ontology that has a dynamic resolution, but if the properties and concepts existing at those different levels are compounds or components of each other as the scale of consideration shifts, then the formal ontology becomes a fractal ontology.RelationshipsRelationships within a formal ontology are the means that allow entities to modify and combine with each other.  It is important to realize that the relationship itself does not affect an entity, but that the entities that it relates provide the affects or changes.  For instance, relating the entities "truck" and "movement" (truck HAS movement) give the idea of a truck moving somewhere.  The relationship HAS does nothing for the truck, but it does allow for the semantic idea of the truck having movement (or "moving", using the correct syntactic form).Concepts of RelationshipsRelationships are comprised of concepts, just as the other compounds (entities and non-atomic concepts) are.  These concepts are a little more abstract and difficult to see than they are in the other compounds, but they are present nevertheless.  The reason they are difficult to perceive is we are not accustomed to thinking of them consciously. When we communicate, the rules of our language and semantics are definitely bounded by the concepts that comprise relationships. For an example, let us consider the binary relationship "tank has crew". There are two entities, tank (the subject of the relationship) and crew (the object of the relationship), brought together by the relationship HAS. Method for Evaluating RelationshipsOur method for evaluating relationships should be simple, and easy to define, however it (as with the other methods discussed above) must be based in the intended use of the ontological definition.The types of relationships (potential/actual, qualification/quantification, temporally based, etc) that exist must each be considered to see whether all of the combinations of entities that are required to satisfy the universe of discourse can be assembled.The syntactic requirements for the relationships are based on the properties (or concepts) of the entities being related must exist, for all the sorts of relationships that need to be supported for the universe of discourse.Finally, the relationships must be accessible enough via definition that they can be the objects of relationship-controlling rules.RulesWe believe that the application of relationships between entities must be based on rules for those relationships to create semantically correct communications.  There are several reasons for that, but the most obvious is that without rules governing what objects to fill the slots in a sentence (or other collection of entities for communication), then the system employing such sentences is open to building semantically nonsensical collections of entities.  There have to be rules - rules that state how whatever the verb implies that the subject is doing, then the object can match that original pairing both syntactically and sensibly.  Another reason for rules is sense making out of the number of choices.  This is especially true of automated systems that are attempting to make semantic sense, as they cannot hope to make sense out of the rapidly approaching infinite number of sources, even when working with a rather small and limited taxonomy.Rules within and Rules withoutRules can come from two sources, at least from the perspective of a formal ontology.  The first case is that they can be rules inherent to the ontological description, and these are the outer boundary rules that set the tone for all rules that are possible within the formal ontology.  The second possible source for rules is from the systems employing the ontology.  These must be within the inherent (or potentiality defining) rules.  This second set of rules is the actual set of rules for any instance (or application) of the formal ontology.  These are the actual rules, which must fall within the potential rules.Rules must be based on Properties As can be seen from the aspects of the description from [2], the rules that are applied are all based on the properties of the entities and relationships affected.  Without properties, there can be no application of rules, and all relationships would be equally applicable to all entities (a system of universality that results in no system at all).  There must be properties, the application of rules must be based on properties, and then the connecting of entities via relationships must be based on these rules.It is enough, based on the section above, to allow that all of the actual limitations of the rules will take place from within the formal ontology based on the changing state of properties and property-values, however it MAY be that some of the limitations on the complete set of possible rules will be made from outside business rules.  These are not for the formal ontology to define.Method for EvaluationThe method for evaluation therefore falls, in this case, not to the use cases, rather to the potential for all possible rules.  All possible rules are based on properties, which are exhibited via the range of concepts that apply to an entity or relationship (and the property-values applied to those concepts).  The set of all possible rules should therefore be evaluated as to the ranges of concepts that exist to limit said rules.  Are the ranges sufficiently limited to allow for the precise application of rules where necessary?  And are the ranges sufficiently broad to allow for a finite and understandable set of rules to be in place?  If the ranges are not sufficiently broad, then too many small rules are in place, and no system can hope to have sufficient understanding and functional cataloging of all of them.While use cases are too specific to form the basis of an evaluation concerning the inherent rules of a formal ontology, it is true that the universe of discourse that the ontology is intended to support must be considered.  If the types of communications require (generally) a great deal of precision, then the ranges of concepts can be appropriately smaller.  On the other hand, if the universe of discourse is itself quite large, and the number of entities to be considered is correspondently very large, then the rules should be broader, and the evaluation of rules should consider broad ranges of concepts in a favorable light.Evaluating the Ontology – a Cartesian methodWe believe that it is valuable to describe the means whereby we derived our method for evaluating a formal ontology.  The method was first hinted at in [2], and is now described in greater depth here.  It is an attempt at evaluating a formal ontology by (basically) dividing it up into component parts, and evaluating those parts separately.  This is known as a Cartesian method.This method is based on a long tradition of methods for examination of a system, first proposed by Renee Descartes [6].  It is a method pattern based on the rules for examining mathematical knowledge, and Descartes proposed that it would be applicable to the study of other systems as well.In brief, there are four steps to take while following the method.  These areAccept as true only what has been explicitly exhibited, or what is beyond doubtDivide every question into as many smaller parts as may be necessaryBegin with the most simple of issues, and ascend to the more complexMake frequent enumerations of the component parts, and frequent reassessments of the whole, so that the entire argument can be kept in mind.This we have attempted to do here, and we now offer a brief explanation of how the four parts have been adhered to.First, in our method for evaluation, we have asked for each step being evaluated to be explicitly defined – we assume that there can be no assumptions, or else the whole evaluation is at risk.Second, we have divided up the formal ontology into our model of it’s component parts, which can each be evaluated separately, and should be a simpler and more accessible task than evaluating the whole all together. Third, we have begun each section of defining our method with a series of expounded assumptions on our part, along with elementary descriptions and definitions of what to expect.  From there we grow into what is to be evaluated, and have included illuminating examples where possible.Fourth, we have mentioned in each section of our method how the section relates to the other sections, also to the whole, thereby keeping the entire evaluation in mind at all times.We hope that this method is acceptable, and stands as a valuable model for we have tried to accomplish here.Web Ontology Language – OWLThe W3C [7], in pursuit of the semantic web idea put forward by Tim Berners-Lee, has made the development of certain tools a priority.  These tools are those that the W3C has identified as making the semantic web an attainable reality.  The list of tools includes XML, RDF, and OWL.  The last two of these, of course, are products of the W3C.  OWL, one of the tools from W3C, is a system to explicitly reveal the formal ontology of a document or system in a manner that other systems can then make use of that ontological definition.Figure  SEQ Figure \* ARABIC 1- W3C, the organization responsible for OWLTaking background and aspects from several earlier attempts at content description tools, the W3C has finally settled on is the Web Ontology Language, shortened to OWL for simplicity.   OWL is the final product of the Web Ontology Group, and was released in February of 2004, in its final form [10].History of OWLIn the beginning, there was RDF.  RDF stands for the Resource Description Framework, and is the resulting language from an early attempt by the W3C to provide for the description of worldwide web resources (documents, portals, sites, etc).  It is a way of describing things (documents) by using URIs (universal resource identifiers), and a few simple properties and property relationships.  It was based on XML, and the resultant statements are machine-readable. Following on RDF was the concept of building RDF schema.  This is the means where an RDF structure can be extended, much as XML is extendable, to form vocabularies concerning the data being described.The next stage after RDF-schema was not only to describe the elements of a document, but also to define the concepts behind a document.    The idea to do this was DAML+OIL.  DAML is an abbreviation for Darpa Agent Markup Language [8] and was an attempt at describing the terms of an RDF description in ontological sound ways.  It was eventually combined with the Ontology Inference Layer (OIL) [9], to form DAML+OIL.  OIL was a precise method (with a defined semantics) for describing the meanings of terms, so was a perfect partner for DAML, in that it could describe the terms of a document, and then define what they meant.OWL is the revision of DAML+OIL, and it includes many improvements based on the design and implementation of DAML+OIL.Versions of OWLOWL is a language that can be used to derive a machine-readable description of a document or resource, as well as offering definitions for the terms involved in describing that resource.  In short, it provides for the description of a language, and in turn, describes the ontological basis for the terms used in the document, and in describing the document.  Its intended use is to describe systems and documents so that other systems can have a clear understanding of what is being represented, and can make discriminatory choices about what data and or systems to consume and rely on.OWL can describe the data of a document or system in terms of it’s taxonomical hierarchy, a description and/or definition of the properties of that data, as well as how it relates to other data and or data –properties within the overall document or system.OWL is available at three different levels, OWL-Lite, OWL-DL, and OWL-Full.  Each of these is subsumed in the next higher level, and each one is increasingly more expressive in its descriptions.OWL-Lite supports those users primarily needing a taxonomical hierarchy, and a few simple rules about relationships.  It allows for simple cardinality (quantitative class relationships), and is reasonably easy to follow for the purposes of describing a document or system.  If, however, that document or system is complex, then a higher order version of OWL might be required.OWL-DL is named for its reliance on description logics.  Description logic is a name for the study of the logic used to define and describe concepts – it is often considered as a cousin to predicate logic.  It is not quite as flexible as OWL-Full, yet it is much stronger, and accommodating of complex ontological view than OWL-Lite is.OWL-Full allows for the complete reliance on all of the OWL structures in describing a formal ontology.  It allows for complex cardinalities, full interchange of classes with properties for definition and description, and open syntactic freedom.  It has been predicted by the W3C group that development of tools that can make entire use of OWL-Full will be a very difficult proposition.  Structure of OWLOWL is, at its heart, a series of RDF statements, or RDF triples.  An RDF triple has three components (hence the name), and those components follow the basic form of S:P:O, or subject-predicate-object.  An example of a triple could be “tank is broken”.  Stating this in an RDF triple would look like:<rdf:RDF xmlns:mns= HYPERLINK "http://example.military.namespace/" http://example.military.namespace/>  <rdf:Description>    <mns:tank>broken</mns:tank>  </rdf:Description></rdf:RDF>The namespace is given as a URI, pointing to an HTML document that defines all of the terms used within the RDF document.The benefit that OWL brings to RDF is that it allows various terms to be defined and described.  It does this by allowing for a language describing the relationships and properties defining RDF triples.  Mechanistically it does this by having a second, outer, namespace (XMLNS) that defines the OWL tags, some of which act as meta-tags outside of the RDF descriptor tags.Application of OWL to our components based viewAccording to [15], a formal ontology contains the following components:Classes (general things) in the many domains of interestThe relationships that can exist among thingsThe properties (or attributes) those things may haveThis is similar to our definition of the components of a formal ontology as including:Concepts (which may reveal properties)Entities (which are comprised of concepts)Relationships that bring entities togetherRules which define the allowed combining of various relationships to entities As can be seen from these two lists, they are similar.  What we call entities, the OWL group calls classes.  What we call concepts, the OWL group calls properties.  The difference is rules.  However, we think that this is an oversight on part of the W3C web ontology group.The very nature of an OWL description of a formal ontology is full of various property descriptions, and class relationship descriptions, that are limited and defined by any number of restrictions.  These restrictions are the rules governing the relationships within a formal ontology described by OWL.To see this concept easier, recall that in section 2.4 above, we spoke of the rules that belong within the ontological description as rules for “the possible”, not rules for “the actual”.  The rules for “the possible” belong with the ontology, and we believe these are in place with the various restrictions placed on class structure, class combination and definition, and property definition and manipulation.  Rules for “the actual” belong within the business rules of the system making use of the ontological description.Command and Control Information Exchange Data Model - C2IEDMThe C2IEDM is an agreed-to internationally developed and maintained data model that allows for the exchange and storage of command and control information.  It is maintained, and shepherded, by the Multinational Interoperability Program [13].  Further details concerning the C2IEDM can be found within [1,2,11,12].Referential Data Model – Assisting InteroperabilityWe have tried to show in several earlier papers presented to this body how a referential data model can assist in achieving interoperability.  This, we believe, is especially true as we move further away from self contained systems, and more towards system-of-systems architectures, where various components and services will be combined in ways never conceived of by the original authors of such devices.  To ensure that the many different views of data and system assumptions can be brought into alignment with each other, we believe that a central referential data model that such systems can compare their interoperating needs against will be of vital importance.Why is the Formal Ontology needed?The universe of discourse of modeling and simulation interoperability is the same universe of discourse that needs to be considered by C2 systems – namely the battle-space.  Because of this is has been recommended that the C2IEDM be considered as a model for a referential data model that will enable interoperability not only between C2 systems, but also between modeling and simulation systems.  An obvious extension of this is that it will also serve as the model to enable interoperability between M&S and C2 systems.The task of evaluating the C2IEDM for purposes of examining how well it will support such interoperability activities is a key step in making the decision to design such an interoperability supporting system, and a key step used to support such a system’s implementation.  In order to evaluate a data model, and what it can possibly be used to convey, the concepts supported by such a data model must be evaluated.  As we have described the definition of a formal ontology as the “specification of a conceptualization”, we view the derivation of a formal ontology as the important first step in evaluating the concepts of the C2IEDM.The C2IEDM and our components based viewIn [2] we spoke to the existence of the various components of our ontological definition in terms of how they are represented within the C2IEDM.  We believe that a brief review of that description is of value here.It may be of interest to begin the description with an overview of two of our components – entities and relationships.  Recall that entities within our definition of formal ontology components include things, events, and phenomena.  As phenomena can include actions (predicates, or verbs, within the syntax of information represented via the model), then it is easy to see how entities are defined in the C2IEDM as the various entities found there (OBJECT-TYPE, OBJECT-ITEM, ACTION-TASK, ACTION-EVENT, etc).  EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 2- Subsections of the C2IEDMRelationships are found within the association function of the C2IEDM.  The C2IEDM offers a way of bringing together different entities through association, this is very similar, if not identical, to the idea of relationship as defined within our description of the components (above).Looking further down from entities, we see in our definition that they are comprised of concepts (some of which reveal properties).  Within the C2IEDM, these are defined in two ways.  The first is through entity-attributes (which are well defined within the MIP documentation), and second is through the relating together of several C2IEDM with other entities that are capable of revealing and illuminating the concepts and properties of the first entity.  Note that here I am referring to entity in the sense that the C2IEDM uses the word, not our definition. Farther up from relationships we find rules.  Rules are defined within our view of a formal ontology as the collection of strictures and limitations on which relationships can be formed with which entities.  Within the C2IEDM, we see the presence of rules (of the type, “the possible”) exhibited through the in-place limits on where associations can be drawn.  Associations cannot be drawn, ad hoc, between any C2IEDM entities, but rather they exist only between certain pairings.  This is, de facto, a set of rules governing relationships.Formal Ontology of the C2IEDM as modeled in OWLAs OWL is currently a very widely accepted tool for exhibiting formal ontology models, we have opted to use it for describing the formal ontology of the C2IEDM.  At present, we are doing this work using the Protégé tool, available from Stanford University.  The tool is modified by the inclusion of the OWL plug-in module. ScopeOur initial attempt at modeling the formal ontology of the C2IEDM has been a very lightweight attempt, based on employing OWL-Lite.  It should capture the basic concepts, entities, relationships, and rules at a very high level.  As this is a model of a formal ontology being used for evaluation (employing our method detailed in section 2 above), we need only perform enough modeling of the ontology in each area to satisfy the tenets of the evaluation method.Classes and EntitiesThe entities of our definition are seen in OWL through classes.  These are represented within the C2IEDM as classes.  The initial classes that we are going to examine are the basic descriptions of objects, events and phenomena.Objects are represented very well within the C2IEDM as OBJECT-TYPE and OBJECT-ITEM, a method of dividing the persistent class related data (OBJECT-TYPE) from the non-persistent individual instance related data (OBJECT-ITEM).Events are represented in a number of different methods, based on the usage needs.  If an event is a phenomena existing over time, then it can be represented within the C2IEDM as an ACTION-EFFECT, with a start and stop time component.  On the other hand, if an event is an object that exists over time, it can easily be represented within the C2IEDM as an OBJECT-ITEM (materiel, facility, organization, etc), that has location and is referenced to during a specific start/stop time period.Finally, phenomena are represented within the C2IEDM as ACTION-TASKS, or ACTION-EFFECTS, depending on whether it is a task being undertaken by an entity, or if it is an external phenomenon affecting an entity.Note that these are generalities, and that there are several cases where specifics have been defined within the MIP documentation due to need of special detail or consideration, or out of convenience.  For instance, it is possible for an organization to have its status (phenomena affecting related entities) signified via the ORGANIZATION-STATUS mechanism.Properties and ConceptsConcepts and properties within the C2IEDM are exhibited both by entity attributes, which are inherent to the definition of a C2IEDM entity, or through the association of affecting entities, via the key structure that the C2IEDM provides for.  This mechanism allows for a key (similar to a database table key) attribute from one entity to be related to another entity.  Many times these associated entities provide for the property revealing concepts that define a supported entity.These ideas are modeled within OWL by using the Class Properties association.  Properties within OWL can be of two varieties – those with primitives as values (string, numeric, etc), or those with other properties or other classes as values (pointing to related entities).  This is very good at revealing the concepts and properties as described within the C2IEDM.Relationships, Structure and RulesThe relationships (associations) within the C2IEDM are modeled within OWL again as properties relating one class to another class.  The cardinality limits (which are quite simple within OWL-Lite) are helpful here, as are some of the other restrictions on the property export that one class can have for another.The rules are revealed within OWL much as they are revealed within the C2IEDM – implicitly via their existence and limitations.Summary and RecommendationsFurther studies are still required to make a full application of our method to the study of the formal ontology of the C2IEDM.Having said that, from this early view we can see several aspects of the formal ontology emerging.  The support for entities is very strong within the areas of objects, but not so strong in the area of events or phenomena.  Relationships are very much limited by the sorts of associations that can be drawn, however for the universe of discourse and the use a system based on the C2IEDM may make, it might be sufficient.  Finally, the exhibition of concepts and properties within the C2IEDM seems to be of the sort described above as those exhibiting internal characteristics.  External characteristic exhibiting properties and property values may not be sufficient.  It is too early to decide on this, however.Further Studies – The Next StepMore in-depth modeling of the components of the C2IEDM is needed.  It is our belief that it will make for a more-than-sufficient start as a model for an interoperability assisting central referential data model, however it may turn out to be incomplete.One of the strengths of the C2IEDM is that its design allows for extension, and if its conceptualization does appear to be lacking (for our purposes), then the extension mechanism will be able to cover the shortcomings of the conceptualization.The goal of further studies in this area should be to reveal more of the ontology of the C2IEDM, and then complete the evaluation.  Follow on steps then become the definition of requirements for extension (if needed); the architecting of the referential data model; and most importantly –the means for allowing systems to employ the ontological definition of the data being exchanged through such a data model.Ontology Studies and SISOThe development of methods based on a formal ontology is intended to assist with system-to-system understanding.  This is, we believe, extremely important in the world of simulation interoperability, mainly because many of our simulation systems are dealing with (what they and their designers consider to be) the same real-world entities.  However, each simulation system makes completely different assumptions concerning these entities, leading to a great potential for failure in system-to-system conceptual interoperability.   Methods based on a formal ontology will go a very long way towards solving the these sorts of problems.This potential has already been seen within two ongoing study groups that are sponsored by SISO, the Coalition Battle Management Language study group, and the Military Scenario Definition Language study group.  In both cases, the road ahead (to be revealed in papers presented at the Fall 2005 SIW in Orlando, FL) includes the development of methods based on studies similar to the one described in this paper.AcknowledgementsThe research work underlying this paper was performed by Charles Turnitsa, during the pursuit of a Master’s Thesis in the Modeling and Simulation curriculum of Old Dominion University.  His advisor is Dr. Andreas Tolk.References[1]	Tolk, A. and Blais, C.; “Taxonomies, Ontologies, and Battle Management Languages – Recommendations for the Coalition BML Study Group,” Spring Simulation Interoperability Workshop, 05S-SIW-007, San Diego, CA, April 2005[2]	Turnitsa, C. and Tolk, A.; “Evaluation of the C2IEDM as an Interoperability-Enabling Ontology,” European Simulation Interoperability Workshop, 05E-SIW-045, Toulouse, France, June 2005[3] 	Turnitsa, Charles; “Extending the Levels of Conceptual Interoperability Model,” Summer Computer Simulation Conference, SCSC-05-18-003, Philadelphia, PA, July 2005[4] 	Gruber, Tom; “Toward Principles for the design ofontologies used for knowledge sharing,” Technical Report KSL 93-04, International Workshop on Formal Ontology, Padova, Italy, 1993[5] 	Berners-Lee, T., Hendler, J., Lassila, O.; “The Semantic Web,” May 2001 Scientific American[6] 	Descartes, Renee; “Discourse on Method”, 1637[7] World Wide Web Consortium; website at  HYPERLINK "http://www.w3.org/" http://www.w3.org/ (last visited in July, 2005)[8] Darpa Agent Markup Language; website at  HYPERLINK "http://www.daml.org/" http://www.daml.org/ (last visited in July, 2005)[9]	Ontology Inference Layer; website at  HYPERLINK "http://www.ontoknowledge.org/oil/" http://www.ontoknowledge.org/oil/ (last visited in July, 2005)[10] Web Ontology Working Group; website located at  HYPERLINK "http://www.w3.org/2001/sw/WebOnt/" http://www.w3.org/2001/sw/WebOnt/  (last visited in July, 2005)[11] 	Turnitsa, C., Kovurri, S., Tolk, A., DeMasi, L., Dobbs, V., Sudnikovich, W.; “Lessons Learned from C2IEDM Mappings within XBML,” Paper 04F-SIW-111, 2004 Fall Simulation Interoperability Workshop, Orlando, Florida, September 2004[12] 	Tolk, Andreas; “Moving towards a Lingua Franca for M&S and C3I – Developments concerning the C2IEDM,” Paper 04E-SIW-016, 2004 European Simulation Interoperability Workshop, Edinburgh, Scotland, June 2004[13] 	Multilateral Interoperability Program, “Overview of the C2 Information Exchange Data Model (C2IEDM),”  November 2003[14] Brewster C., Wilks Y.; “Ontologies, Taxonomies, Thesauri: Learning from Texts,” University of Sheffield Department of Computer Science, Sheffield, UK, 2004[15] “OWL Web Ontology Language Use Cases and Requirements”, W3C Technical Report found at  HYPERLINK "http://www.w3.org/TR/webont-req/" http://www.w3.org/TR/webont-req/ (last visited in August, 2005)[16] Zuniga, Gloria; “Ontology: Its Transformation from Philosophy to Information Systems,” Proceedings of the International Conference on Formal Ontology in Information Systems, Ogunquit, Maine, USA , 2001, pp. 187-197.Authors' BiographiesCHARLES TURNITSA is a graduate student studying under Dr. Andreas Tolk at the Virginia Modeling Analysis and Simulation Center (VMASC) of Old Dominion University (ODU) of Norfolk, Virginia.  In addition to his academic pursuits, he also performs as a system engineer and researcher on several VMASC research projects.  He has served in many roles as an IT professional for over a decade, performing analysis, design, and development tasks on many research projects for NASA and the US Military. ANDREAS TOLK is Senior Research Scientist at the Virginia Modeling Analysis and Simulation Center (VMASC) of the Old Dominion University (ODU) of Norfolk, Virginia.  He has over 14 years of international experience in the field of Applied Military Operations Research and Modeling and Simulation of and for Command and Control Systems.  In addition to his research work, he gives lectures in the Modeling and Simulation program of ODU.  His domain of expertise is the integration of M&S functionality into real world applications based on open standards. Please note that we are referring to a formal ontology of a data system (and the world that data system describes – its “universe of discourse”), and not the more general idea from philosophy of a general Ontology – which is the general understanding of the “being” and “relatedness” of everything in the universe Attributed to Lt. Col. “Buck” Surdu	Figure  SEQ Figure \* ARABIC 3 – C2IEDM Object-Type structure, modeled in Protege