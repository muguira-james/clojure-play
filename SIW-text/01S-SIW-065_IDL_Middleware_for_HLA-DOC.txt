IDL4HLA: Implementing CORBA IDL Middleware for HLASean ReillyHoward WilliamsAnteon CorporationOne Corporate Place, Middletown, RI 02842-6277401-849-5952 HYPERLINK "mailto:sreilly@anteon.com" sreilly@anteon.com,  HYPERLINK "mailto:williams@anteon.com" williams@anteon.comKeywords:CORBA; IDL; Middleware; ImplementationABSTRACT: CORBA is a commercial standard for sharing an object's data and methods over a network in an object-oriented, language-independent form. The shareable portion of these objects is specified in an Interface Definition Language (IDL) that serves an interface specification function similar to the headers files common in C, C++, and Ada.  HLA is a DoD standard for sharing object attributes and interactions between modeling and simulations systems.  Although the HLA currently uses a procedural API, many programs have experimented with middleware products that encapsulate the HLA's common operations into an object-oriented library.  Anteon is currently investigating the marriage of an IDL front-end to HLA back-end services.  This paper will discuss the middleware’s requirements, a comparison to existing middleware products, the high level design, and a few examples of product utilization.  By relying heavily on industry standard API’s and data models, we expect this approach to take advantage of the best features from both CORBA and HLA without imposing a large training burden on the simulation developer community..IntroductionThe IDL Middleware for HLA (IDL4HLA) is an internal research and development effort of Anteon Corporation that seeks to combine the best features of both CORBA and HLA.  When completed, this combination will allow CORBA IDL developers to take advantage of the broadcast and multi-cast features of HLA without reworking their implementation code.  Since this is a work in progress, this paper focuses on the rationale behind IDL4HLA and the software’s concept of operations.The Benefits of CORBACORBA is an acronym for the Common Object Request Broker Architecture.  It is an object-oriented, language-independent architecture that is used to share an object's data and methods over a network. The shareable portion of these objects is specified in an Interface Definition Language (IDL) that is specific to CORBA.  Each IDL file serves an interface specification function similar to the headers files common in C, C++, and Ada; it specifies data formats and creates prototypes for each object's member functions.  IDL separates each object's interface from its underlying implementation.  Once separated in this form, remote entities can be locally invoked through the use of "proxy" objects that have the same interfaces as the "real" object, but actually translate all operations into network messages and requests.  The Object Request Broker (ORB) is a vendor-defined instantiation of the translation between these proxies and the real object's implementation code. ORB vendors include an IDL compiler that converts the interface specification into equivalent objects in C, C++, Java, COBOL, Smalltalk, Ada, Lisp, or Python. Developers interact with CORBA objects in their application's native language, these proxy objects interact with the ORB, the ORB sends and receives network messages, and the reverse process is executed on the other side to complete the transaction.  The Internet Inter-ORB Protocol (IIOP) is an on-the-wire specification for passing CORBA data over networks.  The IIOP ensures that CORBA-based applications can interoperate across computer architectures, operating systems, programming languages, and ORB vendors.  The IIOP uses the TCP/IP reliable network protocol to pass data point-to-point between the clients and server for each information transfer.CORBA is a commercial standard developed and balloted by the Object Management Group (OMG).  The OMG consortium now includes about 800 member companies.  CORBA is also the current standard for many of the Navy's shipboard combat systems including the New Attack Submarine (NSSN) program, the Twenty-First Century Combatant (SC 21) program, and the Integrated Surface Ship ASW Combat System (AN/SQQ-89) program.The Benefits of HLAHLA is an acronym for the High Level Architecture for Modeling and Simulation. It is a language-independent architecture that shares objects and interactions over a network.  An HLA object is a collection of attributes that maintains state between network updates. An HLA interaction is a transient object used to invoke a modeling or simulation behavior.  The shareable portion of these objects is specified in an Object Modeling Template (OMT) which is specific to HLA.  HLA is a DoD standard developed and managed by the Defense Modeling and Simulation Office (DMSO).The Run-Time Infrastructure (RTI) is a vendor-defined instantiation of the HLA's application programmer's interface (API).  The HLA API is defined as a series of procedural functions which the application developer uses to pass data back and forth over the network.  Although this procedural methodology exposes more of the details of network communications, it maximizes the HLA's compatibility with non-object legacy systems.Currently, the HLA does not support an on-the-wire specification equivalent to the IIOP.  However the API encourages RTI developers to support broadcast and multi-cast in addition to the TCP/IP channels used by CORBA.  This addition makes the HLA much more efficient in its network utilization for cases where many client/server pairs exist for each information transfer.Why Develop HLA Middleware?Although the HLA's generic API allows individual projects to develop the network interface components tuned to meet their specific needs, it also creates a broad market for middleware products. The HLA Tools and Services Bulletin Board currently includes a wide variety of these HLA middleware solutions (see Table 3.1). Most HLA middleware tools encapsulate common HLA tasks into a library of pre-tested routines. This, in turn, decreases the cost and risk associated with HLA migration.  However, each one of these tools also creates a new, "easy-to-use," API that enhances or replaces the use of the HLA's native API.  Applications developed using one of these tools are often tightly bound to the selected vendor.Table  STYLEREF 1 \s 4. SEQ Table \* ARABIC \s 1 1 Existing HLA MiddlewareToolVendorFedGen Veridian Engineering IncorporatedHLA Foundation Class Software Development Kit John Hopkins University / Applied Physics LaboratoryHLA Integration FrameworkMetron, Inc.Ibis RTI Adapter Ibis Research CorporationOSimFramework™ OriginalSim, Inc.RTI-Adaptor Fraunhofer-IITBSimulation Middleware Object ClassesNaval Air Warfare Center Training Systems DivisionTest and Training Enabling ArchitectureFoundation Initiatives 2010VR-LinkMÄK Technologies, Inc.Please note that although the latest DMSO release of RTI-NG uses CORBA as an underlying protocol, CORBA's use is limited to Message Services.  Message Services are outside of the scope of the Object Management mechanisms supported by IDL.IDL Middleware for HLA (IDL4HLA)It is our contention that an HLA middleware system based on CORBA's IDL provides the best combination of value for modeling and simulation applications:The broadcast and multi-cast features of HLA should provide better performance than CORBA in cases where many client/server pairs exist for each information transfer.Leveraging IDL's bindings to specific languages will provide an "easy-to-use" object oriented API for the HLA without tying application developers to a specific vendor.HLA-specific developer training is frequently cited as a leading argument against converting simulations to this DoD standard.  Since IDL development is widely used in both the commercial and DoD sectors, the IDL4HLA approach improves on the HLA by minimizing the cost of retraining existing personnel.The IDL4HLA concept of operations is outlined in Figure 5.1. The IDL4HLA compiler outputs CORBA-like stub and skeleton source code files.  Object implementations, server, and client applications access each object through its corresponding stub or skeleton.  Although these stubs and skeletons look identical to their CORBA equivalents (from the application’s point of view) they are actually performing HLA operations behind the scenes.  Common HLA operations are encapsulated in a Translation Library (near the center of Figure 4.1) that serves the same function as the CORBA ORB’s network libraries. EMBED Word.Picture.8  Figure  STYLEREF 1 \s 5. SEQ Figure \* ARABIC \s 1 1 IDL Middleware ConceptThe IDL4HLA compiler also outputs OMT files.  CORBA attributes are mapped to HLA objects and CORBA methods are mapped to HLA interactions.  The combination of this information with the Translation Library provides all of the functionality typically needed to interact with the RTI's library of communication routines.  Interfaces to both the Translation Library and/or the RTI's library itself are exposed so that developers can tune their systems for atypical situations.Many of HLA's model development tools already support an export capability from OMT to IDL (including DMSO's Object Model Development Tool).  However, to make the best advantage of the IDL middleware, a new ability to link HLA interactions back to CORBA methods still needs to be addressed.Please note that this concept is different from the IDL application programmer's interface that comes with the RTI.  That API provides access to the RTI's communication library.  This proposal provides access to the simulation objects themselves.Goals for Build 1The IDL Middleware for HLA (IDL4HLA) is an internal research and development effort of Anteon Corporation.  For our first build, we are focused on only the Object Management portions of CORBA.  This approach is similar to the one used by Sun Microsystems to develop the "idlj" compiler for the Java 2 Platform (JDK 1.3).  In this area, we will consider the product to be successful if all of the equivalent features in "idlj" are supported.  We are also not proposing to support all of CORBA’s and HLA’s computer language mappings at this time. In this area, we will consider the product to be successful if both a C++ and a Java mapping are supported.  We feel that additional research is required before this tool can automatically manage HLA’s Ownership, Time, and Data Distribution Management.  For our first build we will be focusing on the Federation, Declaration, and Object Management services of HLA.  All of these limitations are similar to many of the products listed in Table 3.1.  We believe that the advantages of adding a standardized object oriented layer to the HLA more than outweighs these limitations.Author BiographiesSean Reilly is a senior DII COE software developer for the Tactical Control Project at Anteon Corporation.  His previous work for the Navy includes stints as editor of the guidance and rationale documentation for the Real-Time Platform Reference FOM, NUWC's Chief Engineer for the AN/SQQ-89 on-board sonar trainer, and a leading developer for CTEIP's Test and Training Enabling Architecture (TENA).Howard Williams is a senior DII COE software developer for the Tactical Control Project at Anteon Corporation.  His previous work includes software development for the Hughes Aircraft Mk-48 ADCAP Torpedo project and telephony system development for the banking industry.