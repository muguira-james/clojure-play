HLA and MDA at EADS SDC Simulation. Assessment of current and future practiceThomas PeugeotEADS DCSBP 146, rue Dewoitine78142 Vélizy-Villacoublay CEDEX, FranceTel : +33 (0)134637239, Fax: +33 (0)134637157 HYPERLINK "mailto:thomas.peugeot@eads.com" thomas.peugeot@eads.comPatrick de ChampsEADS DCSBP 146, rue Dewoitine78142 Vélizy-Villacoublay CEDEX, FranceTel: +33 (0)134637592, Fax: +33 (0)134637157 HYPERLINK "mailto:patrick.de-champs@eads.com" patrick.de-champs@eads.comKeywords:HLA, MDA, UML, Software Factories, Domain Specific LanguagesABSTRACT: EADS / SDC (System Design Center) Simulation department track record contains several HLA simulation projects successfully completed since 1999. Since HLA inception, our department has leveraged an original MDA approach to solve our clients’ problems. The technology backdrop on those projects was an MDA toolkit named RALExpress. The RALExpress product, initially provided by French Navy, is composed of an IBM Rationale Rose plug-in and a C++ framework. In 1999, RALExpress was a harbinger of MDA developments since it was based on code generation from UML models based on the HLA meta model.The first section highlights RALExpress experiences. We relate how programming at the HLA Meta Model layer helped us to reach ambitious technical goals for our clients. RTI implementation or the COTS tools supporting HLA development, however very good, can sometimes lack a functionality for our needs. This view is supported by our experiences as a leading industrial practitioner. We relate how our RALExpress MDA tool helped us in developing: a C++ / Java FOM-conformant API generator, a time management services framework, a FOM Agility layer, an optimization for WAN simulation (RALGate), a simple HLA record / replay tool (RALPR), and an ubiquitous after action analysis tool (RAL_GESTIND). For each technical subject, a brief description of an EADS simulation project is provided for the rationale. Those projects address different simulation user communities (training, SBA and T&E) and different application domains (navy, army and joint).As an industrial company, we see simulation requirements growing among our customers. With the HLA & MDA paradigm, many of those problems have been solved. However, some problems have resisted solution because they were at the periphery of most concerns. We think some of those concerns are aligned with HLA axis of improvements. The second part of the paper relates two of the improvements EADS would like to encourage in the HLA standard portfolios.Firstly, we think that the emergence of a wire protocol for RTI is essential for interoperability. This subject is presented economically, historically, comparatively to other technologies like CORBA and contextually with simulation application domains. Secondly, we consider the addition of a time reversal service in HLA. With current HLA time services, virtual time is an increasing variable with wall time. User requirements leading to this new service of time reversal are reported. Continuous time reversal has impacts on the RTI API and for models engineering, which are examined here.As a conclusion, we contemplate where “Software Factories”, the step beyond MDA, will bring our simulation business.IntroductionThis paper has two goals : review 6 years of HLA developments and propose directions for the future. This is the point of view of a simulation system provider for training, COA analysis and SBA purposes. The past and current pratice is presented via a toolbox, RALExpress. In 6 years, up to 15 federations projects have been developped using this toolbox. In the first section, we review each part of RALExpress. For each part, a motivation with a reference project is introduced. At the end of this section, we show how RALExpress relates to the MDA [3][2].In the second section, we deal with two problems we have not been able to solve : RTI  wire standard and continuous time reversal. We make those issues public because the problem, in our view, is at the HLA standard level.Finally, we conclude with a rapid presentation on Software Factories, the direction for the future, and how it relates to RALExpress.RALExpressDescription of RALExpress toolboxAs depicted in  REF _Ref98923602 \h Figure 1, RALExpress is comprised of several packages :RAL, originaly provided by ANPROS.RALUtility which provide functions for coordinates transformationRALAgility for the development of FOM Agile federates.RALPR, a simple HLA record, replay tool.GESTIND, a generic AAR tool.Figure  SEQ Figure \* ARABIC 1: RALExpress toolboxThe track record of federation developped using RAL has reached 15 and is still rising.Since the second HLA project, most RAL users do not need improvements. A lighweight approach is taken for managing the RALExpress asset. Technically, a cvs repository resides on a shared disk and each project is responsible for the maintenance and upgrade of RALExpress. In this business model, RALExpress is an EADS internal open source.Description of RAL ANPROSRAL, which stands for RTI Abstraction Layer, is a free toolkit provided by ANPROS, a research lab of the french Navy. RAL presents two advantages :Sources are available. It is possible to modify RAL to support our needs.RAL works with Rational Rose, a tool which our developpers are familiar with.Technically, RAL is :A Rose plug-in which loads a omt file.A Rose plug-in which parses the model tree and generate C++ code.A run time framework on top of the RTI.A test suite with different SOM/FOM and test federates.A documentation. RAL Rose plug-inIBM Rational Rose is a leading UML edition tool. Rose supports generic UML 1.3 edition. It also supports customization via an extension mechanism for UML profiling. A UML profile is a set of stereotypes and tagged values which extends the UML Meta Model. RAL incorporates a UML profile of HLA. 5 stereotypes of UML classes are used : <<HLA Federate>> to denote the singleton class which supports all federation level operation and <<HLA Class>>, <<HLA Interaction>>, <<HLA Complex Type>> and <<HLA enumeration>>. For each stereotype, a set of tagged values enables the specification of desired behavior for the target class. For example, a UML Class with the stereotype <<HLA Class>> can be published and/or subcribed. Any class level attribute in the HLA Meta Model translates into a tagged value into the UML profile.Figure  SEQ Figure \* ARABIC 2: Rational Rose. View of the RAL plug-in.As in  REF _Ref98578475 \h Figure 2, stereotypes and tagged values can be edited in Rose. You can edit the SOM of a federate as with conventional tools as OMDT and VisualOMT or with Rational Rose. Then, information specific to the generation of code can be added.RAL Code generatorThe RAL code generator parses the UML tree and for each class with a HLA stereotype, the source for a corresponding class is generated in C++. The C++ generated code is compiled into a dynamic linkable library (a dll or a .so). Thanks to a bridge design pattern, the generated code can be used without any modification during integration.Among modifications that were made to RAL, the enabling of time management and time stamped messages and the port to linux were major improvements. One important lesson learned is that modifications had to be made at all levels : UML profile, code generator, run time framework and test suite. We will see later that this view of a coherent set is more related to Software Factories than to Model Driven Architecture.Conclusion : RAL as an MDA HarbingerRAL was an harbinger of the Model Driven Architecture standard. Several characteristics support this view :RAL uses the HLA Meta Model (M2) and translates it into a UML profile. The OMT standard is fully expressed by UML stereotypes and tag values. The view that a platform technology can be expressed as a Meta Model is at the core of the MDA.With RAL, SOM are models expressed according to the HLA platform. According to the MDA terminology, the FOM is a M1 conforment to the HLA M2.Since the FOM can be used to generate code on the HLA platform, it is a Platform Specific Model (PSM). The code generation from model is also a pillar of the MDA paradigm.UML models of federates expressed in order to produce C++ can be reused. During the FOM development, some C++ UML models become HLA Classes or Interaction with little effort. This is conforment to the MDA view that Models can support platform migration.Time Management ExtensionMotivationWith constructive simulation, the use of HLA time services solves a lot of coordination requirements. The first use of HLA has been for COSMOS and it has driven the selection of RAL.COSMOSDevelopped since 2000, COSMOS is a constructive simulation for the analysis of air/ground surveillance systems. Modelled plateforms include satellite, aircrafts, UAVs, ground vehicules, humans. The detection modelisation chains include IR, visible, radar (SAR, MTI), acoustics and vibration. During devlopment, modelisation activities in COSMOS were supported by Rational Rose.One requirement for the system was the HLA  connection of several COSMOS systems with the time management service. For example, one COSMOS would simulate targets and the other one would simulate sensor platforms. Since COSMOS is a platform level simulation, the COSMOS FOM was designed according to the RPR FOM and enriched with COSMOS specific models. The resulting FOM contains a lot of information. Manualy coding at the RTI level presented little interest. A tool was needed in order to generate a library exposing the FOM in C++. As of 2001, the selection process of commercial tools was unsuccessfull. Most tools did not support properly time management and time stamped update which was a major requirement for COSMOS. Finally, an in house development option, based on RAL, was considered best. RALGateMotivationAs of 2005, Mäk and Pitch RTI have WAN optimization included. In 2002, this functionnality was missing. This problem was successfully mastered thanks to a in-house developpement based on the RAL layer. ESTHERESTHER [4] is a system for :Interconnecting geographically distributed simulations based on JANUS.  Connecting JANUS and the SIR, the French C3I for Army battalions.Up to 5000 platforms can be simulated in ESTHER. As stated in ESTHER paper [4], ESTHER requires WAN optimization. ImplementationA bridge at the RAL framework level was developped. With WAN optimization, the whole federation is split up into one WAN federation and one LAN federation per site. In this schema, WAN optimization is transparent to federate developper.Figure  SEQ Figure \* ARABIC 3: WAN optimization with RALGateRAL JAVA APIMotivationESTHER is a system made of several federates. Some federates are legacy systems developped in C++ and some are developped in JAVA. The C++ API was provided by RAL. JAVA federates needed a FOM-conforment API.ImplementationFor the JAVA API, RAL was extended to generate the correct JAVA Native Interface layer on top of the C++ FOM conforment API.This development included :the code generator,the RAL framework.This SWIG tool [9] was used to generated a JAVA API on top of the C++ API.Conclusion : similarities between CORBA and HLA + RALCORBA and HLA have similarities. They both have description of an exchange model. For CORBA, the exchange model is described with the “Interface Description Language” (IDL). For HLA the exchange model (the FOM or SOM) is described with the “Object Management Template” (OMT) . With CORBA, the IDL is compiled in order to produce an IDL conforment API. For each function described in the IDL, a header code is generated. The marshalling / demarshalling  of arguments is the responsability of the CORBA implementation.In CORBA, the resulting API can be expressed in several binding language (C++, JAVA, ADA…). Thanks to this IDL compilation, CORBA enables the development of multi-language distributed applications.For the HLA 1.3 standard, there is no OMT compiler. The HLA run time interface (RTI) is at the HLA meta model level. According to HLA, the coding of a FOM conformant API is the responsability of the developper. Also the marshalling and demarshalling of arguments is not supported by the standard.Figure  SEQ Figure \* ARABIC 4: CORBA and HLA comparedSchematically, RAL fills the gap between CORBA and HLA :It is a FOM compiler that produces a FOM conforment API.Marshalling and Demarshalling is the responsability of the RAL framework.A similar remarck can be made for TENA  [1] and HLA + RAL.RALUtilityMotivationMost of our simulations are platform level. Since adherence to the RPR FOM is a recurring pratice. RPR FOM uses geocentric coordinates expressed in WGS84. Seldomly do simulation internal model rely on this reference frame. Therefore, precise and performant coordinate transformation functions are a systematic need.BatlabBatlab was a demonstration project for the Paris Air Show in 2003. One sub-project was to connect a 3D Stealth viewer on the COSMOS federation. The 3D Stealth viewer was a COTS interfaced with VR-Link. It required COSMOS to express its coordinates according to the RPR FOM v1.0 standard.ImplementationFor supporting coordinates transformation from federate internal model to Geocentric WGS84, it was decided to rely on SEDRIS Spatial Refence Model implementation. However, the SEDRIS learning curve being steep, a simpler API on top of SEDRIS was implemented in C++ and Java.This development was later incorporated into RALExpress.RAL Player RecorderMotivationRecord and replay of a federation dynamic is a recurrent need in HLA. In the COTS market, tools are available for this function.During the recording phase, tools transform dynamic HLA information into a static information. The review of available COTS showed following limitations :No support for XML : Static information is located into a database or into a proprietary format. It is necessary to develop a specific connector to interface the record tool. Since most of our practice involved data flow, XML based files were enough.Limitation of fine tuning techniques : A recording can filter a fraction of the HLA dynamic data. A lot of HLA dynamic must be reduced in order to keep a sensible size of log files. A set of complicated filtering technique is often necessary and they were lacking on available COTS.ALLIANCEALLIANCE [5], is a joint force training simulation. It is a federation of more than 20 federates. EADS was responsible for the After Action Review (AAR) tool.In ALLIANCE, operational tracks were updated every few seconds on the RTI. For AAR purpose, a snapshot of the tracks every minute is sufficient. In ALLIANCE, finding the right balance between information and log file size optimization required a specific development.ImplementationThe specific development, RALPR, was based on XML for the static information. XML is not optimal for file size but our estimates showed that XML file size would be moderate. XML brought two advantages : ease of development and overture with other tools.The XML schema of the log file is simple. Four kinds of XML elements are permitted at the first level. They follow the basic HLA callbacks : object creation, object destruction, interaction reception and object attribute update.Thanks to DOM, an XML API and RAL framework, the recorder was running after 5 days of development. Thanks to the human readeable feature of XML, reading directly into RALPR log files helped the integration of the ALLIANCE federation.GESTIND MotivationThe purpose of an After Action Review tool is to crawl into the log data in order to produce indicators. The AAR requirement is present among all simulation systems. In the APLET [6], a “Course of Action analysis” tool at the Brigade level, the AAR tool is at the core of the end-user interaction.During end-user interviews, two operating modes surfaced :A “normal mode” where a set of existing indictors is in place. The end-user computes those indicators after each simulation run.An “expert mode” where the end-user would be permitted to develop their own indicators.ImplementationThe AAR tool, GESTIND main functions enable the operator to  :Load XML logs into a database.Select and parametrize pre-defined indicators.Apply them onto the database.Define its own indicators.As mentioned earlier, the XML nature of RALPR log made it easy to develop a tool for manipulating data.The XML loader was a specific development. The main task was of turning the FOM model into a database schema. The datamining tool was based on Oracle 9i Business Intelligence Beans.Conclusion on GESTINDSince ALLIANCE, RALPR and GESTIND have been reused on different HLA simulation. In general setting, indicator are displayed according to a time axis (“display evolution of unit’s potential during last 5 days”). A new need of indicators correlated to geographical feature has appeared (“display unit’s potential when they are on phase line L1”). Next, the generic AAR tool will be composed of GESTIND and a  cartographic component.ConclusionThe pool of constructive platform level simulation have common feature at the HLA level and most problems have been solved at the HLA level. One need is the reuse of federates when passing from one federation to another. This operation has become a concern because HLA is not a wire protocol. The solution to this problem is in the RTI interoperability. In our view, it seems very difficult to bypass this limitation with the RAL layer.Another limitation of HLA is the lack of time reversal capability. Those two limitations are the subject of the next section. New HLA requirements for simulation systemsHLA as a web wire protocolThe Open RTI SG was formed in response to a growing need among user community for a wire standard RTI. The paper 04F-SIW-018 exposed the findings of the SG. Basically, reasons are both economical and technical. This section completes the findings of the open RTI Study Group (see [7]).Our main problem, also identified in the SG, is the maintability of our federation and the reuse of federates. We have many sub-systems that are tied to a specific legacy hardware. In those cases, avability of a RTI implemetation on this specific hardware becomes a critical risk for the whole system.A finding not supported in the paper is the performance argument. The argument of RTI vendor is that their creativity would be constrained if a wire standard is established. RTI performance improvement would stall with a RTI wire standard. This argument is not relevant for us. Most of our systems, even in real time, require low performance. Early implementation of RTIs are still sufficient for our needs. We see two comparable experiences in the software landscape that could help the reflexion around this topic.CORBA:During the 04F-SIW-018 presentation, it was mentioned that some CORBA integrator use IIOP and the native protocol. During integration with different CORBA run time, protocol is based on IIOP. When the system needs to scale up, CORBA implementation switch to native protocol for performance sake. RTI vendors could propose a similar scheme with more expensive license fees when performance is at stake. W3C:One big success of interoperability standard is the production of the W3C. XML, Web Services, are gaining market share against CORBA, JNI and other API level standards. According to the Technical Architecture Group document [8], a good interoperability standard should be a wire standard and preferably human readable. This is a guarantee against vendor who will take proprietary position on the market.Continuous time reversal (CTR)A HLA Wire Protocol is a system integrator need. Continuous Time Reversal (CTR) is an end user need that is presented here. At home, our end users have DVD players. They know the utility of the reverse function of their DVD players. When they are interrupted in their viewing experience, they want to see the movie go continuously on the past to find a particular moment when they were interupted. It is simply easier to go backwards in the past when you do not know how far it is in the past. For a simulation system, we name the capacity to go continuously in the past the continuous time reversal (CTR) function. Most of training or technical simulations lack the CTR functionality. When end-users search after a particular moment in the simulation, they have to replay from save points.In MERLIN, for exemple, a simulator to study tactical datalink simulator, end users in this domain are interested to see how some datalink components become saturated. They run their scenario at normal speed and wait for an overflow to appear. Then they go in past to understand the causes of the behavior. Currently, they replay the simulation from the last save point. In this case, CTR would be a real added value. Doing CTR on a stand alone simulation requires that each model supports time reversal. A model that relies on differential equation might support time reversal. Sometime, changing the sign of the time step is enough. For discrete events models with state machines, solution can be a bit more complicated since they have to remember internal and external stimuli to find which state where passed during the past. The memory capacity of a model will define how far in the past the simulation can go.With HLA, the API does not provide time reversal service. It seems that this need never surfaced at the HLA 1516  PDG. Doing CTR on HLA is possible but a great deal of twist is required.The cost of the implementation of CTR into HLA is beyond our analysis, but as a simulation system provider, we know that if CTR is at our disposal into the next HLA API, we will use it.Software FactoriesSoftware Factories (SF) is the new software engineering epoch. It proposes four critical innovations :Systematic reuse : shift some ressources from projects management (product development) to inter project management (product line developement) as depicted in  REF _Ref98736479 \h Figure 5.Develop by assembly : promote use of open standard interface as Web Services.Model Driven Development : develop Domain Specific Language (DSL) to specify variation point of your application domain. Develop code generator for application developped using DSL.Process Frameworks : focus on your own development process based on your DSL. Figure  SEQ Figure \* ARABIC 5: View of the organization with Software Factories.Formally, MDA promoted by the OMG, is a set of four standards : UML, MOF, XMI and CWM. Others are coming as QVT and OCL. Those  technologies enable abstraction of the platform. Setting up a development process based on those four standards seems a big investment to enable reuse of models. Our understanding is that major software actors seem to question UML2 applicability.When contrasted with MDA, SF is rather a methodology which proposes general principles for model driven development.Regarding RALExpress experience, some generalities can be drawn :An informal set of developpers has contributed to the reuse of an in-house componentsThose components were specific to the platform simulation domain and to HLARAL is a Meta Model. It is also a code generator, a framework, a coding pattern and a test suite. Therefore, in our views, SF seem a more balanced approach than MDA toward productivity of simulation development.ConclusionA system integrator responsability is to master components of its technical solution. In the case of HLA, the technology is powerful but the market is not too large for COTS vendors. Therefore, when a HLA limitation surface, as for WAN optimization, it is the responsability of the system integrator to find the good bypass to the technological hurdle. Our core competency is on simulation and on HLA in particular. This knowledge has been somehow captured in the RALExpress toolbox.AcknowledgementsThe authors would like to thank Jean-Marc Prieur and all the ANPROS team for their initial contribution with the RAL toolkit.References[1]	Powell, E.T., Lessman, K., Lucas, J. and Rumford, G.J.:  “The Test and Training Enabling Architecture (TENA)” Paper 02F-SIW-074, 2002 Fall SIW, Orlando, FL, 2002.[2]	Frankel, D.: “Model Driven Architecture, Applying MDA to Enterprise Computing” 2003, OMG Press, Wiley Publishing.[3]	Tolk, A.: “Avoiding another Green Elephant – A Proposal for the Next Generation HLA based on the Model Driven Architecture”, 2002 Fall SIW, Orlando, FL, 2002.[4]	Khimeche, L., Gougeat, J.L.: “ESTHER G2 HLA Synthetic Environment Framework for Command Post Exercises”, Paper 04S-SIW-019, 2004 Spring SIW, Washington, 2004.[5]	Ruiz, J., Pineau, V.: “ALLIANCE, a joint training demonstrator for Head Quarters exercises ”, Paper 04F-SIW-004, 2004, Fall SIW, Orlando, FL, 2004.[6]	Khimeche, L., De Champs, P.: ” M&S in decision support for Courses of Action Analysis, APLET”, Paper 04F-SIW-006, 2004, Fall SIW, Orlando, FL, 2004.[7]	Woodyard, J., Mullally, K.:  “Open Run-Time Infrastructure Protocol Study Group Final Report” Paper 04F-SIW-018, 2004 Fall SIW, Orlando, FL, 2004.[8]	Technical Architecture Group: “Architecture of the World Wide Web, Volume One”,  (http://www.w3.org/2001/tag/webarch), visited March 05. [9]	SWIG, (http://www.swig.org/), visited March 05. Author BiographiesThomas PEUGEOT is a Technical Expert at EADS Defence and Communication Systems. His interests include Distributed Simulation, Model Driven Architecture and models of Human Behavior. Previously, he earned a PhD in Computer Science form Ecole Normale Supérieure de Lyon in 1999. He holds a Master in Cognitive Sciences from Université Joseph Fourrier in Grenoble and a Computer Science Engineering degree from the ENSIMAG school of computer science in Grenoble.Patrick de CHAMPS is APLET [6] project manager for EADS DCS and is responsible for decision support activities. He has been involved in projects in the simulation area and in the intelligence area for the French Army, the French MoD and NATO. Reed Little, SIW 2003, Personal Communication