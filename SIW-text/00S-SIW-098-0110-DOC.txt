Application-Specific Network Performance Analysis using the Navy’s HLA Federation TestBedGerald M. SantosJohn M. Repko IINaval Undersea Warfare CenterNewport, RI 02840401-832-5800 HYPERLINK mailto:santosgm@npt.nuwc.navy.mil santosgm@npt.nuwc.navy.mil,   HYPERLINK mailto:repkojm@npt.nuwc.navy.mil repkojm@npt.nuwc.navy.milCynthia Drescher ArchambaultLogicon, Inc.55 John Clarke RoadMiddletown, RI 02842401-849-6270 HYPERLINK mailto:cdrescher@logicon.com cdrescher@logicon.comKeywords: HLA, Data Collection, JADS Inline LoggerABSTRACT: Although DMSO is actively engaged in the generic performance testing of distribution services, the Navy has become interested in developing tools and procedures for Navy application-specific testing.  This non-generic form is required because small-scale HLA demonstrations do not necessarily predict large-scale application performance.  The Navy’s HLA Federation TestBed is envisioned as a suite of tools that can be used throughout the federation development cycle.  During the risk mitigation phases, the tools will support federation emulation on an isolated LAN.  Once software development begins, these emulations can be re-used to debug WAN performance issues and support parallel software development at each site. Once all of the participants are ready to federate, these tools can be integrated into actual federate code to collect performance metrics from “a few runs” of the actual federation. Under this project, NUWC and NRL have teamed together to provide the Navy’s Modeling and Simulation Management Office (OPNAV-N6M) with its first steps toward this goal.  The Navy’s HLA Federation TestBed is focusing on the re-use of existing GOTS and COTS tools instead of new software development.  A modified Joint Advanced Distributed Simulation (JADS) in-line logger is used as the primary data collection tool for real and emulated federates.  These results are correlated to actual network traffic captured by EtherPeek (AG Group) and federate behaviors are emulated using FedProxy (Aegis Corp).  The benefit of this approach lies not in the use of any single tool, but rather in the enhancements provided by the integration between these powerful products.  This paper will focus on the application of the JADS in-line logger and EtherPeek results to a distributed exercise between NUWC and NRL.  Federate emulation efforts will be presented in a future paper.IntroductionThe High Level Architecture (HLA) Run Time Infrastructure (RTI) specification is the DoD standard for network interoperability between simulation systems. The specification is currently managed by the Defense Modeling and Simulation Office (DMSO), which is also actively engaged in developing generic tools to test the performance of RTI implementations.  The Navy has become interested in expanding on these generic tools and procedures to create tools and procedures for Navy federation-specific testing.  As federations are developed, the performance of the RTI within the constraints of the specific federation needs to be quantified and understood. Small-scale HLA applications do not necessarily predict large-scale application performance.  The choke points of a particular network for specific interoperating federates need to be identified and procedures for mitigating their effect developed.  To this end, the Naval Undersea Warfare Center (NUWC) and Naval Research Laboratory (NRL) has teamed together to develop the Navy’s HLA Federation TestBed, designed to provide the Navy with the first steps toward attaining application-specific measurement tools and procedures.The Navy’s HLA Federation TestBed is focusing on the re-use of existing GOTS and COTS tools instead of new software development.  The Joint Advanced Distributed Simulation (JADS) in-line logger is used as the primary data collection tool for real and emulated federates.  The collected data is correlated to federate behaviors and to actual network traffic captured by EtherPeek (AG Group).  This paper describes the application of the JADS in-line logger and EtherPeek results to a distributed exercise between NUWC and NRL.  Data Collection MethodologySince the initial release of the HLA RTI specification and accompanying documents, both the government and industry have recognized the need for tools to support the development and optimization of the federations.  Several tools are now available.  In selecting the tools to be used in the HLA Federation TestBed, two considerations were paramount:The tools should be readily available, at reasonable cost, preferably with user documentation and technical support.The tools could, as a package, collect all the data defined for the metrics and support the integration of this data for analysis. The tools initially selected were the JADS in-line logger, the EtherPeek network traffic and protocol analyzer, and the Network Time Protocol.JADS In-Line LoggerThe Joint Advanced Distributed Simulation (JADS) Joint Test and Evaluation (JT&E) program (references [1], [2], and [3]) was established as an exploratory vehicle to examine Advanced Distributed Simulation (ADS) for use in the Testing and Evaluation (T&E) community. The program’s emphasis is on the performance of the ADS components and their contribution to testing, rather than any particular system under test or class of weapon system. In support of this aim, the JADS program has built a set of freely available tools for supporting performance evaluation.  Part of this tool set is the JADS in-line logger. JADS Logger CapabilitiesAs shown in figure 1, the JADS in-line logger resides in the interface between the federate and the RTI.  It records all function calls to and from the RTI along with all of the function data parameters.  For example, when a federate wants to publish data, it calls the RTI updateAttributeValues function. When the logger is linked with the federate, the federate calls the logger updateAttributeValues function. The logger stores the function identification and parameter data in the log file buffer and then calls the RTI updateAttributeValues function. When a log file buffer becomes full it is written asynchronously to the log file and a new buffer is created.The logger was designed to minimize impact on the federate it is linked with. To accomplish this, the logger design includes the following features: asynchronous direct input/output (I/O), non-degrading process priority, and binary file format.  Asynchronous I/O is used so that the federate software does not wait while the data are written to the log file.  When a buffer becomes full an I/O request is queued to the operating system and control immediately returns to the federate.  The actual writing of the data is accomplished by a separate process.  The log file created by this software is a binary file. JADS Logger EnhancementsSeveral changes to the JADS in-line logger were needed to provide greater information and to minimize the need for correlating logged data between platforms.  The JADS in-line logger currently records the following information:A federate ID for the exerciseFor each event as it is received:A log event countThe time the event was loggedThe RTI method identifierA binary copy of all data parametersThe in-line logger also provides for the use of a user tag for all updateAttributeValues and reflectAttributeValues calls.  The user tag has been further defined by the HLA Federation TestBed to contain information from the publishing federate.  This user tag is written by the in-line logger as the RTI updateAttributeValues function is called.  It is recorded in the publishing federates log and included in the outgoing message.  The testbed user tag includes the following data:The system time of transmissionFederate ID of the unit sending the dataA sequence number to allow the ordering of the dataAs the reflectAttributeValues calls are received at the subscribing federate, the incoming data is time stamped with the system time at the subscribing federate.  One way latency can now be determined by computing the difference between the receive time for reflectAttributeValues calls and the send time contained in the user tag.Two environmental variables have also been added to the logger.  A switch is used to turn logging on or. The variable RTI_USE_LOGGER is set to TRUE if all federates have been compiled with the enhanced in-line logger and logging is desired.  The variable is set to FALSE to enable federates with the enhanced version of the logger to federate with simulations that do not have logging capability.  RTI_LOG_PATH is used to define the path for the log file generation. EtherPeekEtherPeek, a product of the AG Group, Inc., is an Ethernet network traffic and protocol analyzer that is available for Windows 95/98 and NT 4.0. According to industry literature, EtherPeek sets the industry standard for ease-of-use, making the complex tasks of troubleshooting and debugging mixed-platform, multi-protocol networks easy.   Key features of EtherPeek include Real-time utilization statisticsReal-time and post-capture packet filteringPlug-ins for expert packet analysis (including analysis of IP and security-related network issues)Powerful decoding with support for all major protocol suitesSummary statistics for monitoring key traffic elements at relevant intervalsHistory statistics.  The HLA Federation TestBed uses EtherPeek’s capability to capture and time packets to extract network load data.Network Time Protocol for External Clock SynchronizationThe accuracy of the time-dependent calculations depend on the time synchronization among the computers.  The Network Time Protocol (NTP) is a standard Internet Protocol component used to synchronize the time of a computer client to a common reference time source.  It provides client accuracy typically within a millisecond on LANs and up to a few tens of milliseconds on WANs relative to a primary server. For the HLA Federation TestBed prototype demonstrations, all systems will use NTP to synchronize their local time to Coordinated Universal Time (UTC) via a Global Positioning System (GPS) receiver. The Federate ModelsThe HLA Federation TestBed development effort is designed to measure the application specific behavior of the HLA’s Run Time Infrastructure.  The federates for the prototyping effort were chosen by the NRL-NUWC testbed team to be representative samples of “universal” federates.The initial federation consisted of two HelloWorld federates, modified to link in the JADS in-line logger.  The HelloWorld federation was designed as a proof of concept.  The plan is to compare the federate behavior against the DMSO's baseline performance statistics.  Other “universal” federates with more direct application to Navy interoperability issues are currently being brought into the testbed. Integration of the in-line logger into an HLA 1.3 version of the joint semi-automated forces (JSAF), upgraded from the rti-s version used in the Synthetic Theater of War (STOW), is continuing as this paper is being written.  Because JSAF supports construction of many different types of platforms, the HLA Federation TestBed will use it to emulate federates and to determine the efficiency of the RTI for a specific scenario. The Aegis FedProxy federate is being evaluated to determine the level of effort needed to link the logger into this federate. Among the attributes of FedProxy that make it attractive for use in the HLA Federation TestBed areThe capability to organize and save object model preferences, event queue initialization, custom code, and time management settingsTime-stepped and event driven simulation supportAdaptability to any FOM or SOMSimple interface for updating object attributes, sending interactions, and scheduling eventsAn API that allows advanced users to extend internal classes to construct reactive behaviorAn Integrated Development Environment (IDE) for interacting with objects, scheduling events and editing codeRun and step modes of executionIntegration of FedProxy with the JADS in-line logger will allow a more robust capability for characterizing specific federations and collecting data for analysis in accordance with applicable metrics.During the past two years, NUWC has developed HLA interfaces to several hardware-in-the-loop simulations and associated displays.  The logger is being linked to the display portions of these simulations.The JSAF / logger integration is planned for completion before this paper is presented.  Results of the integration will be included in the presentation.The Federate ExerciseTwo unclassified PCs running RedHat( Linux 5.2 operating system were set up, one at NUWC in the Exercise Communications Center (ECC) and one at NRL.   A third PC running Windows NT( was set up in the NUWC ECC for use in observing and collecting data on network traffic.  NUWC and NRL are connected via the Defense Research Engineering Network (DREN), which was used in unclassified mode for federation execution. (NUWC’s unclassified network segment is protected by a firewall.  For issues encountered in executing an HLA federation through a firewall, see 00S-SIW-150, "Recommendations for Conducting an Exercise through a Firewall").The logging HelloWorld federate was executed at both sites for 100 iterations.  The exercise generated three files, two data logs, one from each federate, and an EtherPeek network traffic data log.  These three files were used to provide Matlab with the raw data required to perform the following statistical analysis.HLA Federation TestBed Metrics Although all times between federates and the network analyzer are synchronized using NTP, it is not practical to trace the causality of individual packets.  Statistical measures are therefore defined to measure the average behaviors and the variances from those averages.Mean Network OverheadThe basic function of an HLA network is to transport information between publishing and subscribing federates.  Given this definition of the network’s purpose, the network overhead can be defined as the ratio of payload data size to “everything else” on the network. On a locally isolated network, this measurement can be used to directly measure the RTI overhead averaged across the exercise.  The formula used is as follows:where:   	Tp  =  time at which network packet was recordedL(Tp) =  packet lengthoverhead = mean network overhead for this exerciseS(x,Tn) = size of UpdateAttributesValues payload for federate “x” and sample “n”Latency StatisticsThe latency measurements are not expected to obey white noise or even uni-modal statistics.  To extract useful information about the latency distribution, percentile-based measurements (median statistics) will be used to characterize the “average” behavior and its variations.The probability density function will be estimated using a histogram of latency results.  Given a set of bins locations, m, and a bin spacing , the probability density function will be estimated as:where:	,  	= set of latency measurementsm, 	= set of bins locations, 	= bin spacingN	= total number of samples in count(t,a,b)	= function which counts all occurrences of a ( t < bPDF(t		= estimate of the probability density function.Measurements of large latency behavior can be extracted from this equation by estimating the cumulative density function:where: 	CDF(t	= estimate of the cumulative density function.The cumulated density function represents the probability latency measurement occurring with a value less than its argument’s value.  The 50%, 86%, 95%, and 98% percentiles can then be used to approximation the equivalent of the average behavior and the 1st, 2nd, and 3rd standard deviations.Spectral Estimates vs. TimeFor a finer understanding of the mechanisms that lead to latency, spectral estimation techniques can be used to estimate the rates associated with repetitive phenomenon.  Since the sample times are not regularly spaced on the input, discreet Fourier transforms must be used in place of the fast Fourier transforms (FFTs) often used for this type of work.  The spectral estimation process requires the following steps:Define a time window “W” which is large enough to ensure that a statistically large number of latency measurements “” are included in each segment.  We’ll be starting our analysis with a 10-second window to give the results a 0.1 Hz resolution.Use a shaped window on the latency measurements to reduce the effect of frequency sidelobes on neighboring measurements. We’ll be starting our analysis using a Hamming window (chosen for its ease of use and excellent sidelobe rejection).For each frequency of interest f, compute the Fourier transform of the input data as the sum:	Compute as many windows as possible on the input data stream and sum the power spectra together in frequency space.  Overlap the windows by an amount appropriate to the window shape selected (50% overlap for Hamming windows).Larger windows will provide a finer resolution in frequency space.  Smaller windows will produce more statistically significant averages for a fixed data set size.This metric provides an example of computationally intense measurements from the in-line logger information. They do not, however, provide any correlation to the network sniffer results. Metrics and analysis techniques that combine the frequency data with network EtherPeek data are being developed.Federation AnalysisBecause of delays in executing the federation across the WAN a very limited amount of analysis has been accomplished at this time. The outcome of the initial analysis will be refined over the next two months and data collection is continuing.   Further data and conclusions will be presented at the conference.MatlabThe HLA Federation TestBed team chose Matlab 5.0 as the tool to perform the data analysis of the logged files.  The overhead and network latency metrics described above have been programmed in Matlab and the programs have been executed using data from the HelloWorld federation execution across the WAN. Network OverheadAn initial analysis of the HelloWorld federation execution showed that less than 2 percent of the network traffic was payload.  Further analysis is on-going and will be included in the presentation.Network LatencyAnalysis of the latency statistics for the WAN execution of the HelloWorld configuration revealed mean latency of 283 milliseconds.  The travel time between the publishing application and the subscribing application for approximately 70 percent of the data was between 220 and 320 milliseconds.Further analysis is on-going and will be included in the presentation.References:[1]	 Maj D. L. Wright, C. J. Harris, J. W. Black, “High Level Architecture Runtime Infrastrucutre Test Report,” Joint Advanced Distributed Simulation (JADS) Joint Test and Evaluation (JT&E) Program, Office of the Secretary of Defense (OSD), JASDS JT&E-TR-98-006, August 1998.[2]	Lt. Col. J. M. McCall, G. J. Marchand, “End-To-End Interim Report, Phase 1,” Joint Advanced Distributed Simulation (JADS) Joint Test and Evaluation (JT&E) Program, Office of the Secretary of Defense (OSD), JASDS JT&E-TR-98-004, August 1998.[3]	Maj P. Hovey, “End-To-End Interim Report, Phase 2,” Joint Advanced Distributed Simulation (JADS) Joint Test and Evaluation (JT&E) Program, Office of the Secretary of Defense (OSD), JASDS JT&E-TR-99-005, February 1999.Author BiographiesGERALD M. SANTOS is Navy Deputy for the OSD Foundation Initiative 2010. He has led testing of interoperability between the virtual torpedoes of the hardware-in-the-loop Weapons Analysis Facility (WAF) and real submarines on the AUTEC Range using HLA and its T&E community extensions.JOHN M. REPKO II is a computer engineer at the Naval Undersea Warfare Center and is a recent graduate of The Pennsylvania State University where he obtained a Bachelor of Science in Computer Engineering.STEPHEN OBERMAIER is a Senior Systems Analyst at Logicon Inc, a Northrop Grumman company and supported the development of the analysis metrics and the application of these metrics to the collected data.CYNTHIA DRESCHER ARCHAMBAULT is a Senior Program Analyst at Logicon Inc, a Northrop Grumman company, and is under contract with the Naval Undersea Warfare Center for the HLA Federation TestBed Prototype.Figure 1.  JADS In-Line Loggeroverhead = [ ( L(Tp) - x n S(x,Tn)) /  L(Tp)  ] * 100%PDF(m) = count( m - m + CDF( m + ) = k<=m PDF(k)H(f,Tw) =      |  a( Tn - Tw ) (Tn) exp[ -i 2 f ( Tn - Tw ) ] | ^ 2