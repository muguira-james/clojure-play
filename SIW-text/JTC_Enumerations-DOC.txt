 An Approach to Management of Enumerated Data in FederationsGeorge J. McFaddenWilliam E. BabineauThe MITRE Corporation1820 Dolley Madison Blvd.McLean, VA 22102 USAPhone: 703-883-7022    Fax: 703-883-6435mcfadden@mitre.org   babineau@mitre.orgKeywords:Enumerations, JTC, HLA		ABSTRACT: When disparate simulations operate together in a federation, it is often necessary for these simulations to exchange enumerated data.  By passing enumerated values, rather than all of the attributes implied by the value (e.g. sending a value of "F16" instead of all the details associated with the aircraft), the simulation-to-simulation interface can be simplified.  However, in order to preserve a common representation of the object in both simulations, it is essential that simulations use a common set of enumerated values.  In the Joint Training Confederation (JTC), this is accomplished by mapping a common set of JTC-wide values to internal values for each model.  Factors such as size of the federation, how often values need to be modified, and customization required by different users, can compound the configuration management of enumerations.  Inconsistencies in mapping enumerated values can lead to erroneous and invalid results when simulations interact with one another.  This paper examines how the JTC has adopted an approach using automated data collection tools, a database to track enumerations changes, and a process for configuration management of these changes.  This approach could be made extensible to other HLA federations with similar requirements.IntroductionOverview of the JTCThe Aggregate Level Simulation Protocol (ALSP) is a multi-Service program with the US Army Simulation, Training, and Instrumentation Command (STRICOM) as the Executive Agent. ALSP consists of the software and protocols that permit disparate simulations to work together as an integrated whole. An ALSP confederation (federation in HLA terms) consists of multiple wargames, each sharing information with the others. They communicate through an established message protocol that describes the objects to be shared and the interactions among these shared objects. A collection of system-level software has been developed that facilitates intra-confederation communication and coordinates confederation issues such as time advance and object ownership.The Joint Training Confederation (JTC) is the largest application of ALSP. The JTC has been used since 1992 to train military officers all over the world, including the United States, Germany, Korea, and Japan. The 1999 JTC includes nine actors (i.e., simulations) which provide specific functionality to support the intended training audience. The JTC is an example of a persistent federation, in that it is continually modified and used from year to year, but generally maintains the same underlying Federation Object Model (FOM), or JTC Operational Specification (OPSPEC), as the FOM is known in the JTC.  Details of the JTC can be found in the OPSPEC [1].ALSP is a message based protocol and is comprised of text based messages containing objects, attributes, interactions, and parameters. This paper will provide an overview of each of these items, where they are documented, and a discussion of the importance that enumerations have in the JTC, as well as the problems related to use of enumerated values and the solutions to these problems.Primary JTC DocumentsThe JTC uses two primary documents to describe its interfaces: the Operational Specification (OPSPEC) and Interface Control Documents (ICDs).    JTC Operational Specification (OPSPEC)  The JTC Operational Specification (OPSPEC) [1] is similar to the HLA FOM.  Both documents contain the description of what objects and interactions can be owned (“published” in HLA) and ghosted (“subscribed to” in HLA).  The OPSPEC also contains a complete description of allowable ALSP enumerations for all object attributes and interactions that models can use.  Both the FOM and the JTC OPSPEC contain primarily a “static” description of federation behavior - in other words, the dynamic behavior for any particular interface (e.g., how are messages transacted between models to allow a ground object to engage an air target) are not specified.  Interaction Control Documents (ICDs)The ICDs specify the dynamic nature of all of the functional interfaces.  Four ICDs are responsible for capturing the primary functionality in the JTC - Combat Interactions, Intelligence, Command and Control Warfare (C2W), and Logistics.  In the case of the Combat Interactions ICD, it is broken down even further along lines of Air/Air, Ground/Air, Ship/Air, Ship/Ground interactions, etc.  Each one of these interfaces discusses the exact message transactions that any model must adhere to in order to represent functionality across the interface.  For example, the message transmission requirements for launch, flyout, and engagement of TBMs are specified within one portion of the Combat Interactions ICD.This description of dynamic data transactions for a functional interface in the JTC (ICDs) has no equivalent under HLA.  As mentioned before, the FOM is primarily a “static” description of a federation and does not specify the ordering of data exchange that occurs between federates for a particular functional interface.  Yet, capturing this information is fundamental to the operation, testing, and maintenance of any persistent federation.  Identifying differences between the agreed upon ICDs and the actual implementation is necessary in order to uncover problems in federation operation.ObjectsJTC objects are the entities that may interact with each other in a federation.  There are currently 21 public object classes in the JTC.  These objects are defined by attributes.  Attributes are common characteristics that provide identification, location, and informational data about an object.  Examples of attributes are latitude, longitude, speed, depth, and unit type.  JTC attributes may be of one of the following datatypes: latitude, longitude, text, integer, discrete, control, composite, float, shared, and unspecified.  Information about an object is communicated to the confederation by way of update messages.  These update messages contain those attributes of an object which have changed since the last update.  Which attributes an owning actor sends and which are received by a ghosting actor are determined by the Update, Create, and Interest (UCI) set.   The set of attributes of an object for which a model will provide updates is referred to in ALSP as the update set.  The create set is the minimum set of attributes required by a model to ghost (reflect) an object of a particular class.  The interest set is the attributes of an object (not in the create set) which are of concern to a model but are not required to ghost the object.The values of some of the attributes may also be from an enumerated list (i.e. the unit_type attribute can have a value of “F16”,“F15”,”A10”,”C130”…). Enumerations are significant in that they allow the simulations to pass information about an object between each other utilizing fewer attributes.  Each attribute may be assigned a value that carries certain implicit data.  For example, an enumerated value of “F16” may be sent as the value of the unit_type attribute of an air.fixedwing object.  Sending this enumerated value rather than a number of separate attributes, for example, ceiling, range, survivability, turn_rate, length, angle_of_attack, max_speed, weapon_hard_points, number_of_pilots, significantly simplifies the interface between the simulations.  The ghosting (reflecting) simulation must program the individual capabilities of this type of aircraft.  This allows each simulation to concentrate its efforts on those objects about which it is primarily concerned.  This concept will be discussed fully in a following section. InteractionsJTC objects interact with each other via a set of interaction messages referred to in ALSP terminology as interaction kind messages.  These interactions are specified in both the OPSPEC and the ICDs.  In a description similar to that of objects having associated attributes, interactions have associated parameters.  These parameters provide the details about an interaction kind.  Parameters are to interaction kinds as attributes are to objects, i.e., they provide information about the interaction kind.  Examples of parameters are salvo.weapon, from, to, firer_lat, firer_long, unit_equipment.type, number_wounded, and mission.  Parameters may have similar datatypes as those of attributes.  Furthermore, similar to attributes, some parameters may have values drawn from a list of enumerated value.Enumerated ValuesEnumerated values are the lowest level data items.  Enumerated values are the actual discrete data values that are passed between actors as either values for an attribute or a parameter in an interaction.  Examples of an enumerated value are “F22”, “SKYFLASH”, “F16”, “MOVING_TO_CONTACT”, “STOPPED”, “C130”, etc.  The actual values assigned to either a parameter or an attribute are dependent upon the interaction or object to which that parameter or attribute is currently assigned.  In other words, the attribute unit_type might have as an allowable value “F16” when it is used as an attribute of an aircraft object, but will not have “F16” as an allowable value for a ground (e.g., Tank) object.  Similarly, the parameter salvo.weapon might have a value of “SKYFLASH” when used in an air-to-air interaction and “GBU15” when used in an air-to-ground interaction.  Enumerated values are introduced into the JTC only after a consensus among the actors with respect to the need for an additional enumerated value.  The same mechanism is true when a model wishes to remove an enumerated value from the JTC.  Additions, deletions, and modifications to the JTC enumerations are done via Interface Working Groups (IWGs) and through utilization an email server.   Valid JTC enumerated values and the object-attribute and interaction-parameter pairs to which they are assigned are specified in the JTC OPSPEC.As mentioned in a previous section, utilizing enumerated values, henceforth referred to as enumerations, allows the interface between actors to be simplified.  Each JTC model is responsible for building a credible representation of each specific instance of an object used during a confederation exercise, based upon the enumeration used and the individual simulation’s level of detail.  This requires coordination between JTC actors, especially when one model wishes to introduce a new weapon or weapon system – the model requesting the addition must make the other actors aware of the capabilities of this new weapon or weapon system.  In the JTC, each model determines whether or not this enumeration requires new capabilities or new code to be added to the simulation, or whether it is similar (based upon that model’s level of interest/detail) to an existing enumeration.  In the latter case, the new enumeration is treated in the same way as an existing one, and requires no new code to be developed.  For example, the Army simulation, CBS, is primarily concerned with ground-based objects whereas the Air Force simulation, AWSIM, is primarily concerned with air objects.  In the “real world”, there exists multiple models of the F15 aircraft: the F15A through D models (which are primarily air defense versions) and the F15E (which has as its primary role, ground attack).  AWSIM is concerned with the differences between these models of aircraft, as each will have different capabilities: different turn radius, different types of weapon carried, different targeting abilities, etc.  How AWSIM decides the outcome of an air-to-air engagement between an F15A and another aircraft may be different than that between an F15D and another aircraft due to the differences between these versions.  CBS, because of its primary concern with the ground environment, does not distinguish between the different air defense versions of the F15.  CBS does, however, distinguish between the air defense and the ground attack versions.  Thus, CBS treats all versions of the F15 (A-D) as a single type of F15, and treats the F15E differently.Enumeration MappingThe mechanism by which each model handles this varying level of interest is referred to as the mapping of JTC enumerated attribute values to internal game values.  Mapping means that a model may represent the enumerated attribute value that was passed across the infrastructure to an internal, model-specific enumeration so that it can properly simulate that object based upon the area of interest of the model.  Mapping may occur when a model receives an enumeration from another model or when it sends an enumeration to the confederation.  As an example of a model mapping an incoming enumeration, take the F15 enumeration mentioned previously.  AWSIM launches (flies) an F15C, F15D, and an F15E during a JTC exercise in which CBS is participating.  Since CBS ghosts (reflects) AWSIM’s aircraft, and does not distinguish between different versions of the air defense F15, CBS will map the F15C and F15D to an internal value of F15, whereas it will map the F15E to F15E or some internal value which represents a ground attack version of the F15.  Actors also map outgoing enumerations.  In CBS, there are multiple variations of 155MM Howitzers (an artillery weapon), while there is only one JTC enumeration for a 155MM Howitzer.  This is because no model other than CBS is concerned with the unique variations in the different 155MM Howitzer models.  Thus when CBS sends information about its various 155MM Howitzer models to the confederation, it will map them to a single JTC wide enumerated value.Enumeration Mapping TablesIn the JTC, each actor uses its own mapping table to map enumerated values to internal model values. This mapping table may be an ASCII text file, an Oracle Database, or a table that is apart of the simulations executable.  It contains both the JTC values and the internal game values. Enumeration Mapping IssuesThe JTC uses the OPSPEC and the ICDs to enforce uniformity in the values sent between models across ALSP.  This means that it is up to the individual models to ensure that they are mapping each enumeration correctly and that they are processing each enumeration correctly.  Each simulation does this at a level of fidelity that is suitable to both the individual model and to the overall JTC objectives.  Because of the need to map enumerations there are two main sources of potential problems.  These are enumeration mismatches and enumerations nomaps.Enumeration MismatchesDue to human error, sometimes the internal representation of a JTC attribute is not valid.  Consider the case where an internal model value of “F16C” (a high performance fighter/attack aircraft) is mapped to the JTC value of “C130” (a transport aircraft).  If a model were to send an interaction utilizing this erroneous mapping, it is highly unlikely that damage will be reported back.  This is due to the fact that the engaged model will think a transport aircraft rather than a high performance fighter/attack aircraft is attacking it! Further complicating this example is that the attacked model may respond with a ground to air interaction against the aircraft it believes to be a transport, and will most likely not receive the damage message it expects in return!  Both models involved in this sequence of events will believe that there is problem related to either the infrastructure -- the messages are not being properly delivered -- or with the models themselves -- incorrect logic or probability of kill values -- when in fact, the problem is due to a simple mismatch in the mapping table.  Mismatches can lead to other problems as well.  One of these is related to supply of units.  In the JTC it is common for one model to create a unit (in most cases it is an air defense unit) and then pass “control” of this unit to another model for fire control purposes.  The model that created the object will initially supply that object with certain equipment.  For example, in the JTC, CBS creates a Patriot battery and passes fire control to AWSIM.  If AWSIM were to incorrectly map the missiles at the battery (in this case Patriots) to another type of missile (for example an IHAWK) due to a mistake in its mapping table, this would lead to a great deal of confusion when the AWSIM “fires” an IHAWK missile from this battery since CBS has this unit listed as a Patriot battery!  Further complicating this issue, the convention in the JTC is for the creating model to provide for resupply of the units that it created.  Thus, in the example given, CBS does not decrement the number of missiles, since it believes that only Patriot missiles exist at this battery, and therefore provides no resupply of missiles.  Meanwhile, AWSIM decrements the number of missiles present at this battery by the number of missiles fired causing a disparity between the two models which “own” this battery!There is a more insidious effect of enumerations mismatches.  They may lead to seemingly correct test results due to invalid reasons.  To illustrate this, assume two models wish to test an air-to-ground interaction, e.g., an aircraft drops a 500lb bomb on a stationary unit.  The model which owns the attacking aircraft sends an interaction message to the model which owns the unit utilizing a weapon enumeration that the ground model is not aware.  The ground model receives this interaction and upon not recognizing the weapon enumeration, maps it to some other weapon.  By chance the weapon to unknown value was mapped has a probability of kill such that the intended target was destroyed.  The ground model will respond with an attrition message telling the attacker that the target was destroyed.  Therefore the test may be declared a success.  Unless one were to look at the actual values used by the attacking model, check to make sure that the translation to the JTC enumeration was correct and successful, and that the attacked model successfully translated the JTC enumeration into the correct weapon type, there is no way to conclusively declare that the interaction is valid.  Unfortunately, this method would be required by all enumerations used in this interaction and is prohibitively time consuming.  Therefore, because the expected result was achieved, i.e., the attacker expected to destroy the target and the target was reported as killed by the attacked model, the interaction is deemed to be working and correct.Enumerations NoMapsWhen a model in a JTC confederation is sending an enumeration about which one or more actors are unaware, this causes a nomap condition to occur.  Nomaps may be the result of a model having added a new enumeration immediately prior to the beginning of an exercise to satisfy CINC or training requirements that had not been previously tested for use in an exercise.  Nomaps may also be the result of simple human error.NoMaps are the most frequent cause of errors during a JTC event.  A model who receives a value for an enumeration that is unknown can do one of two things: either map this value to another known enumeration; or ignore it and refuse to process the message. In the first instance, this approach may be described as a mismatch condition, which was explained above.  The receiving model does not “understand” the enumeration and maps it to one it does understand but which may not make logical sense.  In most cases, the unknown enumeration is mapped to the de facto standard enumeration nomap.   In the second, where the model does not process the message, exercise may be compromised.  If a model is attacking a target in another model, and the attacked model does not recognize the enumeration of the weapon used, and ignores the message, no damage will be assessed and the attacking model may believe that it was a miss and attempt to re-attack the target.  This may cause the training objectives of the exercise to fail and in general, the realism of the exercise suffers.Causes of Mismatches and NoMapsThe leading causes of enumeration mismatches and nomaps in the JTC are changes to enumerations due to a variety of reasons, the manner in which the mapping tables and exercise databases are developed, and the difficulty of performing enumerations checking.  Each of these contributing factors will be discussed in the following sections.Enumeration Additions, Deletions, and ModificationsJTC simulations are service specific and as such must rapidly respond to individual CINC requirements.  This means that at various times during the year, the actors encounter a requirement to add a new weapon system into their game.  This may mean that a new enumeration must be created so that the necessary information about that weapon is transmitted to the other actors in the confederation.  It is up to the individual model making the change to determine if a new enumeration should be created.  If so, then this change is promulgated to the JTC community, a new enumeration is added to the JTC list of valid enumerations and the other JTC models make changes to their simulations as appropriate.  If not, then the model will map the new internal value to an existing JTC enumeration.  This may have far reaching consequences if that model is unaware that another model requires the specific details of the new value.  For example, refer back to the F15 example listed previously.  If AWSIM were required to add a new version of the F15 Eagle, e.g., F15F, and this was an improved version of the ground attack F15E Strike Eagle, it is very important that AWSIM treat this new internal value in such a way as to allow it to convey the proper information to the other models, especially CBS.  AWSIM could map it to the JTC enumeration “F15E”, and CBS could treat it in the same manner as it did an F15E, or AWSIM could ask for a new JTC enumeration of “F15F”, in which case CBS could map the F15F to the internal game value of F15E.As weapons become obsolete, a model may desire that their enumerated value be removed from the confederation.  The need to remove obsolete and unused JTC enumerations stems from the fact that some of the models in the JTC are based upon old, outdated hardware and storage space.  Both RAM and disk space are at a premium.  If a model wishes to remove an enumeration, it is not just a case of removing it from the individual simulation.  Other models may still wish to use this value.  If the model that no longer wishes to use this enumeration removes it from its mapping table (and list of valid enumerations), and another model is still utilizing the value, a nomap condition will occur.Similarly, if a simulation changes an enumeration (e.g., changing the spelling of the enumeration) without coordinating with the rest of the JTC, nomaps or mismatches may occur.  The reader should note that ALSP is a text based protocol, therefore even the slightest change to a text string may have far reaching effects.   This is due to the fact that ALSP does not verify what is being sent as the value for an attribute or a parameter.  The attribute and parameter names themselves are verified but the enumerations used are not.In many cases, the name change may be the result of a replacement of one version of a weapon system with another, e.g., replacing the Patriot with the Patriot Pac2.  To the uninitiated this seems like a trivial change, one that may not affect any interactions, when in fact the Pac2 version may be a significant upgrade – range, speed, probability of kill.  If a model using the Pac2 version engages an object owned by another JTC model which is not aware of the capability upgrade implied by this name change, it may treat the Pac2 as a standard Patriot and adjudicate damage based on the capabilities of that type of missile.  This will lead to invalid hit and kill rates reported back to the attacking model.Host Site Database DevelopmentCurrently, in the JTC, each host (exercise) site is responsible for developing its own exercise/test scenario databases.  Since these host sites vary widely in both geography and service sponsorship there are differences in the naming conventions of weapons systems.  Since these differences occur in the individual model databases, and the JTC enumerations are universal across all JTC sites, errors are most often seen in the enumeration mapping tables.  These errors are due to misunderstandings, misspellings, and omissions, to name a few causes.  The results of these errors are enumeration mismatches and nomaps.  Many of the JTC actors are investigating changing their procedure with respect to database development and moving towards a universal database of enumerations that is developed at a central site and contains the entirety of JTC enumerations.  The individual sites would all access this central repository and use a subset of the whole depending upon exercise and training objectives.  This would alleviate many of the mapping problems that currently exist.Enumerations CheckingIn years prior to the 1999 JTC cycle, enumerations checking was done by hand and through a multi-day series of tests.  These tests were designed to find any anomalies introduced into the confederation by enumeration inconsistencies.  The problem with these tests was that they were very resource intensive, requiring a day or so of valuable test time, a set of test plans which needed to be kept up to date, and were only effective at catching the most obvious enumerations problems.  This latter problem is due to the fact that a large number of enumerations are related not to the unit_type attribute but to the unit_equipment.type attribute.  This is significant in that errors in the unit_type attribute enumerations were easily seen, e.g., one model flies a B-52 bomber (Air.Fixedwing Unit_Type (B52)) and another model ghosts the object as a different type of aircraft.  The unit_equipment.type attribute is used in the JTC to indicate type and quantity of equipment and inconsistencies would only show up in a unit’s table of equipment.  In order to find such an error, laborious effort was required to compare the unit_equipment list at the owning model with the unit_equipment lists at the ghosting models.  This effort, in and of itself, is prone to human error.JTC Solutions and ToolsBecause the JTC enforces uniformity only in the values sent between models, i.e., JTC enumerations, it is important that these tools not only aid in the enforcement of this uniformity, but also help to ensure that the model-to-JTC-to-model translation is valid.  It was mentioned in a previous section that the Systems Engineer is responsible for the JTC enumerations and the individual actors are responsible for mapping their internal game values to these JTC-wide values.  MITRE, as the ALSP Systems Engineer, has studied the problem of validating these cross model mappings.  The approach MITRE has taken is to concentrate on validating the model-to-JTC mapping.  This is accomplished by choosing a base enumeration registration file and using the JTC tools to validate the mapping information contained in this file.  The validation process involves checking the registered enumerations against the valid JTC enumerations to ensure that they are both legal enumerations in and of themselves and that they are validly applied to object-attribute and interaction-parameter pairs.  Once these mappings are certified to be accurate and correct, then this information may be used as a baseline against which to judge subsequent enumerations registrations.Furthermore, if the model value-to-JTC mappings are certified for all actors in the JTC, and all nomaps are rectified, then it is reasonable to infer that the inter-model values are valid across the confederation.  In other words:Actor1 vals -> JTC vals = ValidActor2 vals -> JTC vals = Valid => Actor1 vals <-> Actor2 vals = Valid across Actor1 & Actor2The issue of managing enumerations and their mappings is not trivial.  Currently, in the JTC, there are approximately 3,000 distinct enumerated values; 7,000 distinct model internal game values which are mapped to the JTC enumerations; 17,500 distinct object-attribute-enumeration tuples; and 24,000 interaction-parameter-enumeration tuples!  Furthermore, due to the pressures of real-world events the number of enumerations, both from the JTC and the model perspective, change quite regularly.  Managing and controlling these values while attempting to ensure that none of the problems detailed above cause invalid results during an exercise seems like a daunting task.  MITRE, working with the JTC actors, and under guidance from STRICOM, has developed a number of tools that allow the JTC to manage and monitor enumerations.  These tools will be explained in the following sections.  Enumerations RegistrationALSP provides a mechanism for the JTC models to register enumerations with the infrastructure.  This is done via a message sent by the ALSP technical controller to the participating models via the ALSP infrastructure software. Upon receipt of this message, the actors respond with a set of messages that are received by the infrastructure software and are then written to an ASCII text file, one per registering model.  These messages are of the form:Register_enumerations(class(classname)attribute(attribute)alsp_value(alsp_val)actor_value(actor_val) direction(dir))Where:Classname = the ALSP object class nameAttribute = the attribute nameAlsp_val = the JTC approved enumerationActor_val  = the internal actor representation of the specified alsp_valDirection = whether the model expects to only send this value (out); only receive this value (in), or whether the model will send and receive this value (both)The methodology employed by the actors to produce these messages varies greatly.  The resultant file contains all the enumerations that model expects to encounter (whether it sends or receives the enumeration) during the exercise or test.  The model need not be confederated with other actors for this process to occur.  A model may create its own confederation and produce this file, i.e., the resultant file is specific to the particular model.  Although the process of registering enumerations is unique to ALSP, this information may be obtained from the individual model mapping tables directly.   It must be stressed that the content of the enumerations registration log file is the most important part of the enumerations validation process.  It is important that the models only register those enumerations that are expected to be used (sent and/or received).  The JTC has developed tools that take advantage of these files.  These tools and the importance of the data contained in the registration files will be discussed in the following section.JTC Information Resource, On-Line (JIRO)Before discussing the tools that utilize the enumerations registration file detailed above, it is important to discuss the JTC Information Resource, On-line (JIRO).  JIRO was developed as an electronic repository of all JTC information and currently consists of the JTC Database (JDB), an OPSPEC Management Tool , a UCI  Checker, and the JIRO Enumerations Cross Checker (JEX).  The JEX will be discussed in the following section.  The main benefit of JIRO with respect to enumerations is that it provides a mechanism for managing the large amount of enumerations related data – changes, modification, and deletions. Currently the JDB stores all valid JTC enumerations along with the object-attribute and interaction-parameter pair to which they are assigned.  Furthermore, the JDB stores all enumerations, both JTC as well as model specific, that were registered at every test and exercise beginning with the 1999 All Actor Integration (AAI).  This means that there is a historical record of the values used by each model along with a record of the JTC to internal model value mappings, stored by event.  The JIRO Enumerations Crosschecker (explained below) uses this data.	JIRO Enumerations Crosschecker (JEX)The JIRO Enumerations Crosschecker (JEX) is a tool that was developed to automate the checking and validation of enumerations.  The JEX allows the user to check enumerations against the JTC database of valid enumerations (JDB).  This means that enumerations that are registered by a model during an enumeration registration can be checked against the list of valid enumerations, allowing erroneous enumerations to be identified.  These erroneous enumerations may be caused by misspelling (human error) or as the result of a model having added a new enumeration and having failed to notify the community of this new value, causing a nomap.  The enumerations are further checked against the database to ensure they are validly assigned to an object-attribute or interaction-parameter pair.  Incorrectly registered enumerations are identified and reported.  These, too, will result in a NoMap condition.  Enumerations that have passed both validity checks are then written to the database, along with the event for which they are being registered.  Since the database contains a history of validly registered enumerations, the user may compare the enumerations registered at the current event against those registered at previous events.  In this way, invalid mappings may be identified.  Ideally, the JTC-to-model specific mappings will be certified when the model itself is certified (once a year) and thus subsequent mappings may be compared against this certified mapping to identify mismatches.  Once the operator is satisfied that the mappings and enumerations for a particular model are correct and all errors have been corrected, and once all the other participating JTC models have completed similar processes, the operator may then compare the values of all models against each other, identifying the NoMaps between models.  This process ensures that any inconsistencies or errors related to enumerations are removed.  This results in increased fidelity in training and certainty in test results.The JEX produces a number of reports.  They are as follows: Mapped, NoMaps, Invalid, Unknown.  The mapped report lists all the valid JTC-to-model value mappings that have been successfully checked and loaded into the database for historical purposes.  The nomap report lists all those enumerations that will be received by a particular model (based upon that actor’s subscription set) but which have not been registered by that model.  The invalid report contains those enumerations that have been registered by a model but which have been erroneously assigned to an object-attribute or interaction-parameter pair.  Finally, the unknown report contains those enumerations that have been registered by a model which do not currently exist in the JTC.  They may be new enumerations that the model wishes to have added to the JTC list of valid enumerations or they may have been removed or renamed and the model did not make the appropriate change to the database.Since the JEX utilizes the data contained in the enumerations registration log files, it is of vital importance that the information be both complete and concise.  Each model registers all enumerations expected to be sent and/or received for that test or exercise only!  This is important because if one (or more) of the models registers all possible enumerations, while the other models register only those enumerations expected to be used, it is very difficult to distinguish between actual nomaps and those due to the model registering enumerations which will not actually be used during the test/exercise.ALSP Web Site and Mailing ListThe ALSP Systems Engineer, MITRE, maintains two sources of information for the JTC.  These are the ALSP web site and the IWG mailing list.  The ALSP web page (http://ms.ie.org/alsp) contains links to all JTC documents, software, training materials, model points of contact, and (of importance to this paper) a list of all valid enumerations.  This list of enumerations is available in a downloadable MS Excel format and is provided as a supplement to JIRO.  The IWG mailing list serves as a forum for question, suggestions, comments, and request for changes.Exercise Standard Operating Procedures (SOPs) As part of the JTC effort to reduce the number of enumerations related errors, SOPs were developed with respect to performing enumerations cross checking utilizing the JEX.  These SOPs related to when, where, and how often enumerations cross checking should occur.  Currently, the JTC enumerations SOP requires that the models participating in an event send their enumerations registration files to a central location, whether it be the test site or the systems engineer, at least two weeks prior to the initial setup for an event.  This allows time for an enumerations cross check to be performed, the results analyzed and returned to the models, the models to make any necessary corrections to their databases and/or mapping tables, and to resubmit enumerations registration files for another enumerations cross check.  Upon joining the confederation, the models will perform a final enumeration registration, at which point the designated enumerations point of contact will perform a final crosscheck.The tools and SOPs mentioned above were used prior to the two major JTC exercises of the 1999 exercise season: Prairie Warrior 1999 and Ulchi Focus Lens 1999.  These tools proved to be very valuable in identifying problems before the exercise began and in reducing the number of enumerations related problems.  In January 2000, the JTC will conduct its yearly AAI event.  This is the first major test event of the year and allows the model developers to test out new and/or improved functionality in their respective models.  As part of the preparation for this event, the JTC has decided to upgrade the AAI test database.  This is the first major upgrade of the test database in 5 years and it contains a large number of new enumerations: weapons systems, aircraft, artillery, ships, missiles, etc.  As part of the preparation for this test event, the models have submitted enumerations registration files which have been collected, loaded into the JDB, the JEX has been run, results analyzed and returned to the model POCs.  The process has been repeated a number of times and the initial results are very promising.  The number of enumeration mismatches and nomaps have been dropping steadily and it is anticipated that there will be a record low number of enumerations related errors encountered at the AAI.  This will be a welcome change from the previous years.Applicability to Other Federations and the Simulation Community at largeThe enumerations problem discussed in this paper is not limited to the JTC and an ALSP-based confederation.  Any federation that brings together disparate simulations will experience similar issues.  The tools and methodologies employed in the JTC are independent of the infrastructure and could be used in other HLA federations.  Persistent HLA federations can benefit the most from such tools.Other simulations and federations have taken differing approaches to dealing with the enumerations issue. Two of note are the Joint Simulation System (JSIMS) and Pegasus. JSIMS, under the original development plan, integrated objects from nine development authorities into a single simulation using the High Level Design (HLD). This avoided the enumerations problem by using the object (in a software sense of the term) within the simulation. The challenge posed by this technique, as noted in previous sections, is that the entire software object must be used every time the simulation object needs to be instantiated.Pegasus is an HLA federation used to run experiments for analysis purposes. Pegasus uses enumerations to convey the detailed object information between federates. This federation uses a limited number of enumerations that were developed on briefing charts, which were discussed and agreed to. While this has proved to be workable for a single execution of the experiment, a more dynamic enumerations specification process will be required if Pegasus becomes a persistent federation.References [1] U.S. Army Simulation, Training and Instrumentation Command  (STRICOM): “Aggregate Level Simulation Protocol (ALSP) 2000 Joint Training Confederation Operation Specification”. The MITRE Corporation, January 2000.[2] George J. McFadden, C. Zachary Furness, William E. Babineau, Philip S. Barry: The Joint Training Confederation (JTC) Information Resource On-line (JIRO), "Proceedings of the Fall 1998 Simulation Interoperability Workshop", Orlando, FL, September, 1998.Author BiographiesGEORGE J. MCFADDEN is a Senior Information Systems Engineer at the MITRE Corporation where he is currently working as the database administrator and principal Powerbuilder developer for the JIRO project.  He is the Chairman of the ALSP Interface Working Group (IWG) Database and Enumerations Group.  He received the M.S. in Information Systems from George Mason University and the B.S. in Computer Science from Michigan Technological University.  He has over 9 years of experience in database development and modeling and simulation with defense and commercial corporations.WILLIAM E. BABINEAU is a member of the technical staff of the MITRE Corporation where he is currently working as the lead engineer for VV&A and testing on the ALSP program.  He received the M.S. degree in Computer Science from the Stevens Institute of Technology, and the B.S. degree in Electrical Engineering from the Rensselaer Polytechnic Institute (RPI).  He has over 18 years of software systems development and test experience with several aerospace and defense corporations, having worked on applications in automatic test equipment, data storage devices, and sonar, infrared and navigation systems.  He is a member of ACM and IEEE CS.  This is analogous to the publish and subscribe set in HLA. The union of the create set and interest set is equal to the subscribe set in HLA. In the JTC, the model which owns the attacked object adjudicates whether that object was damaged. The full purpose and intent of JIRO was discussed in a paper entitled The JTC Information Resource On-Line (JIRO) [2].