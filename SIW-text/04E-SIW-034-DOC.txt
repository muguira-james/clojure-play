Extending Distributed Simulation: Web Services Access to HLA FederationsTim PokornySchool of ITMS, University of BallaratUniversity DriveBallarat, Vic 3350, Australia+61 3 53279279t.pokorny@ballarat.edu.auMichael FraserSchool of ITMS, University of BallaratUniversity DriveBallarat, Vic 3350, Australia+61 3 53279279m.fraser@ballarat.edu.auKeywords:HLA, Web Services ABSTRACT: The High Level Architecture (HLA) is a framework facilitating the development of distributed simulations. Recently, much research and development has centred on addressing the shortcomings of the HLA in order to facilitate its spread into the wider business community. However, composing distributed simulations with the HLA is a complex and costly exercise requiring expert programming skills and training.As the World Wide Web pushes deeper into our modern society, new approaches towards application distribution which leverage the benefits the WWW provides are being developed. At the forefront of these developments are Web Services. Acceptance of Web Services in what can be considered the mainstream business community has been significant with much new development utilising the surrounding technologies.fedWS is a framework for providing access to HLA information through a Web Services interface. fedWS breaks the often tight coupling needed between a simulation and its ancillary services (visualisations for example) reducing the amount of development time and effort required. Presenting access to dynamic simulation information without assuming any knowledge of the HLA further enhances this benefit. Beyond this; the use of the familiar Web Services technology provides the mainstream business community with an interface they find comfortable and palatable, potentially broadening the reach and appeal of the HLA.This paper discusses fedWS and how it can be leveraged in order to allow remote access to HLA information in a manner that is platform neutral, code space efficient and complexity free.1. IntroductionSimulation development often involves the production of artefacts which are not directly related to the functioning of the simulation. These ancillary services often include visualisers and loggers, services which are generally implemented by directly attaching them to the simulation through a participating federate. While in certain circumstances this is required, in many cases such an approach places an unnecessary burden on their development. In these situations separation from the simulation by way of a simple abstraction presents a number of attractive possibilities. The development of HLA federates involves authoring large amounts of complex code in order to support the RTI [1]. Abstracting the intricacies of the HLA removes the need to engage in the arduous and complex activity of federate development. Separation from the simulation in this context removes the need to support the RTI and consequently triggers a large reduction in the amount of code required. This provides for a much cleaner implementation and reduces the development time involved considerably. The provision for a facility which allows for such services to be separated from the simulation lessens the entry barrier and has the potential to widen the appeal of the HLA. However, in order to realise such a goal, the abstraction facility must be provided through a technology which is readily accepted beyond the traditional domains in which the HLA is leveraged. fedWS is a Web Services based interface to the HLA which provides a simplified abstraction for accessing the information within a federation. This paper will discuss the abstraction provided by fedWS and show how remote clients can simplify their exposure to the HLA through the interface it provides.2. FedWS OverviewWhile later sections will focus on the abstractions provided by fedWS and how remote clients are able to access them, this section will briefly introduce the internal component of the fedWS framework. 2.1 What Does FedWS Provide?fedWS provides a complete framework enabling remote access to HLA simulation state information through a Web Services interface. The use of Web Services allows fedWS to provide this facility to remote clients regardless of the language they are implemented in or the platform they execute on.Provided with the fedWS distribution are helper scripts which simplify the development of fedWS based clients using the Apache Axis Web Services client library.2.2 How Does FedWS Work?In order to obtain simulation state information, access to a federate participating in the federation targeted is required. Through the use of a dedicated proxy federate, fedWS is able to access the information it requires. To minimise disruption to the executing federation, the information obtained is cached outside of the simulation environment in a dedicated storage unit. Figure 1 shows the main fedWS components and the general flow of information through the framework.A more detailed explanation of the components highlighted in figure 1 is given below.2.2.1 FedWS InterestsIn the interests of security, fedWS can be configured to only provide certain simulation information to the outside world. The information fedWS will listen for and cache on behalf of remote clients is termed its “interests”. Semantically, the fedWS interests dictate what simulation information the proxy federate should subscribe to. The listing of interests is stored in an XML file which dictates to fedWS the attributes it is interested in. An example of an interest file for a swimming federation is shown in listing 1:<?xml version="1.0"?><federation serviceName="SwimmingFederation">   <class name="ObjectRoot.Swimmer"             wsClassName="Swimmer">      <attribute name="name” type="string"/>      <attribute name="country" type="string"/>      <attribute name="distanceSwum"             type="double"/>   </class>   <interaction name="InteractionRoot.RaceOver"           wsClassName="RaceOver">      <parameter name="winnersName”           type="string"/>   </interaction></federation>Listing  SEQ Listing \* ARABIC 1: FedWS Interest FileHere, three attributes of the ObjectRoot.Swimmer object class are subscribed to with their type information provided to support the deserialization of attribute reflections as they occur. A single interaction with a single parameter is also subscribed to instructing the proxy federate to cache all occruances. The Proxy FederateThe only component to have direct contact with the executing simulation is the proxy federate. Designed to gather information according to its interests file, the proxy federate forwards the relevant information it receives to the external cache for consumption by remote clients. So as not to interfere with the simulation execution, the proxy federate is able to automatically handle situations such as save and restore initiations or synchronisation point requests in a manner which provides no disruption to the federation. The Object StoreThe Object Store provides the caching facility to the proxy federate and is made available to the Web Service for querying by remote clients. When the proxy receives information from the RTI, it is passed on to the Object Store which handles it in an appropriate manner. Again, in order to minimise disruption to the executing simulation, Web Service requests are passed directly to the Object Store as opposed to the proxy federate. The Object Store does not assume a particular method of storage or communication mechanism between itself and the Web Service. Rather, it provides interfaces with outline the requirements of what a storage or communication mechanism should provide. These interfaces can then be implemented for particular storage and communication methods and attached to the framework through fedWS’s plug-in facility.The default plug-ins shipped with the fedWS distribution provides in-memory object storage and use Remote Method Invocation (RMI) for communication between the Object Store and the Web Service. Additional plug-ins may be provided or the defaults even replaced as personal choice or platform requirements dictate. Potential extensions to the provided plug-ins could include relational database storage or Common Object Request Broker Architecture (CORBA) communication.The Web ServiceCommunicating over the Simple Object Access Protocol (SOAP), the Web Service provides the mechanism through which remote clients are able to access the cached simulation information stored within the Object Store [2]. The interoperable nature of Web Services allows for communication with clients of different platforms, languages and Web Service library implementations [3]. Examples of clients using the Apache Axis and Microsoft .NET Web Service libraries are provided later in this paper.3. FedWS Types & Web Service InterfaceWhile the previous section provided a brief overview fedWS’s inner workings, the remainder of this paper will discuss issues relating to the method by which remote clients can connect to and solicit information from the Web Service. 3.1 FedWS Value TypesBefore considering how remote clients converse with the fedWS Web Service is it important to provide a background on the different data types which fedWS uses and provides. 3.1.1 Generic ObjectsInformation solicited from a fedWS Web Service comes in two forms: Generic and Custom types. The generic type system provides a simple abstraction of HLA objects and attributes, interactions and parameters. Figure 2 shows the relationship between these types:Figure 2: Generic Object TypesMaking no assumptions regarding the type (double, float, byte array etc…) of the attribute or parameter values, the generic types contain a reference to a “Holder” object which is able to contain all primitive data types associated with a simulation.Beyond containing attribute and parameter values, information such as the associated object handle or attribute name is also provided and made accessible through the generic types. Intended to be available through every deployment, fedWS makes use of these types internally and provides them remotely for clients who must remain generic in the information they use (for example, the NOVA generic visualisation framework [4]).3.1.2 Custom ObjectsWhile the generic types provide access to all the state information fedWS offers, the burden of handling information in a generic form is often undesirable. In order to address this issue, fedWS can provide “Custom Type” extensions which are able to provide information in a context friendly manner. Using the federate interests XML file, fedWS can generate the code for these custom types and extend the Web Service to make these types available. For example, in the previous section listing 1 showed the federate interest file for a swimming race federation. Given this file, fedWS can be made to generate and deploy the necessary code such that the following objects are available through the Web Service:Figure 3: Custom Object TypesThe custom data types provide access to simulation state information in a straight forward structure completely free from any HLA specific information. The ability to access this information through a platform accepted in the wider business community (Web Services) and in a manner that implies no HLA knowledge brings to those domains the ability to leverage the information produced by a distributed simulation without additional skills or training. 3.1.3 Metadata and Event ObjectsMetadataWhile the custom and generic objects provide simulation state information, the metadata and event objects provide information about the proxy federates interests and the received events respectively. Handle, name and type information can all be obtained via metadata objects and can be used to identify what state information will be available through the Web Service. The figure below shows the structure of the available metadata types:Figure 4: Metadata Object TypesEventsWhen the proxy federate receives a call back from the RTI regarding its interests, it creates an appropriate event object containing all the information it received. For example, upon receiving a reflection, the proxy federate creates a ReflectEvent object which contains the time and tag associated with the reflection (if provided) in addition to information regarding the attributes to be updated and the values to update them with. Figure 5 contains a complete listing of all the event types available:Figure 5: Event Object TypesThrough the event information gathered by the proxy it is possible to track how the state of an object changed over the course of a simulation. Using this information the state of any object at a given time could be determined or perhaps the number of times an interaction has occurred could be measured.3.2  The Web Service InterfaceThe Web Service interface provides the gateway through which remote clients are able to query the Object Store for simulation information. Provided as simple set of methods for retrieving the state information fedWS can provide, the Web Service simply forwards all calls to the Object Store and returns the information received back to the remote clients.Methods for accessing the generic types are intended to be available through every deployed fedWS Web Service and form the base implementation from which support for custom types extend. Listing 2 below shows the method signatures fedWS makes available for retrieving generic types:ObjectInstance getObject( int objectId )ObjectInstance[] getObjects( String className )InteractionInstance[] getInteractions( String class )InteractionInstance[] getAllInteractions()Listing 2: Methods for accessing Generic objectsJust as these methods provide simple access to the state information regarding the proxy federates interests, information regarding the events received by the proxy is also available through a similar mechanism:DiscoverEvent getDiscoverEvent( int objectHandle )DiscoverEvent[] getDiscoverEvent( String class )ReflectEvent[] getReflectEvent( int objectHandle )ReflectEvent[] getReflectEvent( double atTime )RemoveEvent getRemoveEvent( int objectHandle )RemoveEvent[] getRemoveEvent( double atTime )InteractionEvent[] getInteractionEvent( String class )InteractionEvent[] getInteractionEvent( double time )Listing 3: Methods for accessing Event objectsThese generic object and event access methods form the base interface from which support for the custom types extends. The methods for accessing those custom types follow much the same semantics as with the generic objects. The federate interests file is used to generate both the code for the objects to represent the custom types (Swimmer’s and RaceOver’s for example) in addition to a new Web Service interface extending the generic-type service and providing new methods for accessing the custom types. For example, considering the federate interests file presented in listing 1, the following methods would be added to the Web Service:Swimmer getSwimmer( int objectId )Swimmer[] getAllSwimmers()ClassMetadata getSwimmerMetadata()RaceOver[] getAllRaceOvers()InteractionMetadata getRaceOverMetadata()Listing 4: Generated methods for custom typesSummaryThis section has provided an overview of the type system used by fedWS in addition to the general methods which the fedWS Web Service interface makes available. The following section will show how a remote client can connect to a fedWS Web Service and solicit information using the custom type extensions.4. Remote ClientsThe process of consuming a Web Service through a remote client is one highly dependant on the client library being used. This section will discuss the process involved in two such libraries: Apache Axis in Java and Microsoft .NET in C#. Listings showing example code are provided in an attempt to demonstrate the minimal amount of effort required to obtain simulation state information using fedWS.Web Services OverviewIn order to fully understand the significance of certain elements in following sub sections it is first necessary to provide a basic introduction to the two main components involved with any Web Services framework: SOAP and WSDL.Simple Object Access ProtocolWeb Services and the remote clients that connect to them communicate via the Simple Object Access Protocol (SOAP) [5]. SOAP is an XML based format which details how method calls may be made over HTTP [6]. Beyond knowing that SOAP is used behind the scenes when Web Services are involved, a developer should have no further exposure to the protocol. Web Services Description LanguageThe Web Services Description Language (WSDL) is an XML format which completely describes a Web Service, the methods available and the various ways of calling these methods [6]. WSDL is used as a metadata language for describing how clients and services are to communicate with each other [7]. In the Web Services model, WSDL has a similar purpose to that which the Interface Definition Language (IDL) serves with CORBA. However, rather then simply describing an interface for a remote object, WSDL also describes the location of the object (or service) and how it expects to be communicated with.Web Services libraries generally use WSDL documents in order to generate stub code which can be used by a remote client to simplify the process of making a call to the remote service. This code handles low level issues such as serialization and deserialization in addition to the network communications involved. Apart from a description of the methods a service provides (and their location), a WSDL document also describes the structure of the types which are to be provided as parameters or return values. Using this information, Web Services libraries are able to generate natural objects which can also be used in the client code. For example, the Microsoft .NET WSDL tool would generate a Swimmer class for the Web Service used as an example throughout this paper.Apache Axis and Microsoft .NET ClientsInternally, fedWS makes extensive use of the Apache Axis Web Service library for its provision of the Web Services interface to the Object Store. This section will outline how to build the requisite components for writing Java based clients using the helper scripts provided with fedWS. Additionally, information and examples of a Microsoft .NET client will be provided (authored in C#). 4.2.1	Building Client Side StubsApache AxisIn order to connect to a remote web service through the Apache Axis client library the developer must first build stub code. This code will handle all the serialization of method calls, parameters and return values removing the need for the explicit authoring of code to handle these low level tasks. The fedWS distribution provides a helper script for generating these stubs which requires two items of information; the package name for the generated code to reside in, and a URL which points to the WSDL document describing the Web Service. Under a fedWS deployment, the URL for the WSDL document follows the general scheme shown below:http://<Server Name>:8080/axis/services/<Web Service Name>?WSDLThe server name can take the form of a fully qualified domain name or an IP address. fedWS makes use of the Apache Tomcat web server and servlet engine for hosting its Web Services which listens on port 8080 for request by default. The “Web Service Name” section of the URL corresponds to the service name listed in the federate interests XML file (as an attribute of the “federation” element).Given this information, the helper scripts will invoke the appropriate Apache Axis utilities and generate client side stub code relating to the Web Service described in the WSDL document. Once this process is complete, this stub code can then be used to communicate with the fedWS Web Service.Microsoft .NETThe process for generating stub code for Microsoft .NET is almost identical to that required by Apache Axis. The .NET framework provides a program called wsdl.exe to which a URL identifying the WSDL document is passed. This program then generates the required stub code on behalf of the developer.4.2.2  Authoring Client CodeThe process of communicating with the Web Service is exceedingly simple. Once a reference to the remote service is obtained it may be called on in the same manner as any other object. Below, listing 5 shows how to connect to the example swimming federation, fetch all the swimmers and iterate through them one by one (printing their details each iteration):SwimmingFederationService locator =         new SwimmingFederationServiceLocator();SwimmingFederation service =        locator.getSwimmingFederation();Swimmer[] swimmers = service.getAllSwimmers();for( int i = 0; i < swimmers.length; i++ ){    System.out.println( "Swimmer in lane: " + (i+1) );    System.out.println( "Name: " +         swimmers[i].getName() );    System.out.println( "Country: " +         swimmers[i].getCountry() );    System.out.println( "Distance Swum: " +        swimmers[i].getDistanceSwum() );}Listing 5: Apache Axis Client CodeThe first two lines in listing 5 are the only Web Services specific code required and show how a remote reference can be obtained using the Apache Axis library.SwimmingFederationService webService =     new SwimmingFederationService();webService.Url =        “http://localhost:8080/axis/services/SwimmingFederation";Swimmer[] swimmers =     webService.getAllSwimmers();for( int i = 0; i < swimmers.Length; i++ ){    Console.WriteLine( "Swimmer in lane: " + (i+1) );    Console.WriteLine( "Name:  " + swimmers[i].name );    Console.WriteLine( "Country: " + swimmers[i].country );    Console.WriteLine( "Distance Swum: " +         swimmers[i].distanceSwum );}Listing 6: C# Client codeThe C#/.NET client which achieves the same goal is almost identical to the Apache Axis version. The creation of a SwimmingFederationService object provides the reference to the remote Web Service and from that point on it can be used as if it were a local object.In each case less then 3 lines of code was required to connect to and solicit information from a fedWS Web Service. Contrasting this to the hundreds of lines required to support the RTI and the benefit of this approach becomes immediately obvious.5. ConclusionThis paper has provided a brief overview of the fedWS framework in addition to the data types it uses and provides. It has shown that through the use of these abstract types and the fedWS framework it is possible to reduce the amount of code required to obtain simulation information substantially. Using the context aware, custom type extensions, fedWS is able to provide simulation information to remote clients in a manner which neither assumes nor demands any HLA knowledge. Separation from the simulation provides for a much cleaner implementation of the ancillary services often associated with a simulation. Reducing the amount of code required to support the communication mechanism vastly minimises the extent to which the service logic is polluted by infrastructure code. The provision of a Web Services interface to active simulation state information has the ability to vastly reduce the development time of secondary services and open the ability to leverage simulation information to users beyond the traditional domains in which the HLA is applied.6. ReferencesParr, S., Radeski, A., & Whitney, R.   (2002) The application of tools support in the HLA In Proceedings of the 2002 SimTecT Conference (51 - 56).World Wide Web Consortium (2001) Web Services Description Language (WSDL) 1.1, Internet  HYPERLINK "http://www.w3.org/TR/wsdl" http://www.w3.org/TR/wsdlCauldwell, P., Chawla, R., Chopra, V., Damschen, G., Dix, C., Hong, T., Norton, F., Ogbuji, U., Olander, G., Richman, M., Saunders, K., & Zaev, Z. (2001) Professional XML Web Services (1st ed) Birmingham, United Kingdom: Wrox Press.Fraser, M. (2004) General Purpose Visualisation in Distributed Simulation In Proceedings of the 2004 SimTecT Conference.Seely, S. (2002) SOAP: Cross Platform Web Service Development Using XML (1st ed) New Jersy, United States: Prentice Hall.Robinson, S., Cornes, O., Glynn, J., Harvey, B., McQueen, C., Moemeka, J., Nagel, C., Skinner, M., Watson, K. (2001) Professional C# (1st ed) Birmingham, United Kingdom: Wrox Press.Nagappan, R., Skoczylas, R., Sriganesh, R. (2003) Developing Java Web Services (1st ed) Indianapolis, USA: Wiley PublishingAuthor BiographiesTIM POKORNY is a PhD student in the University of Ballarat’s Distributed Simulation Laboratory. Graduating from a Bachelor of Computing (Hons 1) he is the creator and developer of fedWS with research interests focusing on Web Services and Distributed Simulation.MICHAEL FRASER is currently an honours students studying at the University of Ballarat. Having previously completed a degree in both Commerce and Computing his research is focused on general purpose visualisation for distributed simulation, however I also have interests in programming, open source development and computer graphics. Figure 1: FedWS Framework Overview