Positions For and Against an Open-Source RTIBret R. GivensVeridian Engineering5200 Springfield Pike, Suite 200Dayton, OH 45431937-253-4770Bret.Givens@he.wpafb.af.mil Keywords:Open-Source RTIABSTRACT: This paper examines what open sourcing means in general, and where and how it works today.  It then presents the advantages and disadvantages as revealed through an exploratory application of an open-source RTI.  Finally, an analysis of alternatives is performed and a recommended solution is offered to the Advanced Distributed Simulation Community.BackgroundThe Research, Development and Engineering (RDE) Forum of the Simulation Interoperability Standards Organization (SISO) has been extremely interested in capturing the experiences of the Advanced Distributed Simulation (ADS) community with adapting RDE simulations to use the High Level Architecture (HLA).  Through papers and presentations at the Simulation Interoperability Workshops (SIW) over the past two years, a credible body of knowledge has been compiled.  The RDE Forum also presented a special session at the Interservice/Industry Training, Simulation and Education Conference (I/ITSEC) about the lessons learned during a dozen experiments with HLA in various simulation domains.  These presentations are available on the RDE section of the SISO document library.The RDE Planning Review Panel consolidated the I/ITSEC presentations by applying a use case methodology using four representative scenarios.  The results were presented to the RDE Forum and the briefing is available in the SISO library.  Figure 1 depicts the structuring of the results by use cases, function classes, and metrics.  Additionally, the authors of the papers and presentations compiled an experiment profile form in which they described the objectives and lessons learned about HLA functionality or performance.  These two sources of information from the “early adapters” provide a comprehensive picture of what is needed to mature the HLA technology.One of the key points identified by the RDE Forum at the 1999 Spring SIW was that “current RTI services work, but are far too hard to use.”  The further explanation of the point concluded that the “RTI could not continue to be treated as a black box.”  This paper explores an “open-source” option for the DMSO RTI to address this shortcoming.2. Open-Source SoftwareRecently Paul Nivin Fisher [Reference 1] described open-source software is an idea whose time has finally come.  For 20 years it has been building momentum in the technical cultures that built the Internet and the World Wide Web.  Now it is penetrating the commercial world, and that is changing all the rules.  The basic idea behind open-source is very simple.  When programmers on the Internet can read, redistribute, and modify the source for a piece of software, it evolves.  People improve it, people adapt it, and people fix its bugs.  And this can happen at a speed that, if one is used to the slow pace of conventional software development, seems astonishing. The open-source community has learned that this rapid evolutionary process produces better software than the traditional closed model, in which only a very few programmers can see the source and everybody else must blindly use an opaque block of bits.  Internet and Unix programmers, as a rule, already understand the technical case for open-source quite well.  The case has Figure 1 – Lessons learned in numerous HLA experiments have been consolidated via use case scenarios. been formalized in The Cathedral and the Bazaar [Reference 2]. This paper and eventual book were behind Netscape's pioneering decision to take its client software open-source.The case that needs to be made to most “techies” isn't about the concept of open-source, but the name.  Why not call it free software?  The Free Software Foundation defines free software as "software that comes with permission for anyone to use, copy, and distribute, either verbatim or with modifications, either gratis or for a fee."  The software licenses are the enablers of this freedom. When a programmer or organization decides to release a piece of software under a free software license, they can either choose from the preexisting free software licenses or create an entirely new license.  With a large number of licenses in existence and many organizations choosing to create their own licenses, the need was established for a litmus test that could be applied to each new license to determine if it was indeed a free software license. The Debian GNU/Linux developers first addressed this need by establishing and implementing the Debian Social Contract and the Debian Free Software Guidelines (DFSG), both initially written and presented to the Debian developers by Bruce Perens. Software licenses adhering to the DFSG are clearly marked as free software in the Debian GNU/Linux distribution.  After Christine Petersen of the Foresight Institute coined the term open-source, Eric Raymond and Perens created the Open-Source Initiative (OSI).  The two took the DFSG and renamed it the Open-Source Definition (OSD). Thus, free software and open-source software are one and the same—they both have the same extremely precise definition. The OSI is dedicated to managing and promoting the OSD for the good of the community, specifically through the OSI Certified Open Software certification mark and program.The intent of the Open-Source Definition (Figure 2) is to establish a concrete set of criteria to capture the essence of what the software development community wants open-source to mean.  The criteria ensure that software distributed under an open-source license will be available for independent peer review and continuous evolutionary improvement and selection, reaching levels of reliability and power that no closed product can attain.  For the evolutionary process to work, the license terms must prevent people from sequestering software such that few people can see or modify it. When software developers distribute their software under OSI-approved software licenses, they can apply the "OSI Certified" mark to that software. This certification mark informs users of that software that the license complies with the intent of the Open-Source Definition.  The Open-Source Definition captures what the great majority of the software community means, by the term open-source.  However, the term has become widely used and its meaning has lost some precision.  OSI certification is OSI's way of assuring the public that the license under which the software is distributed conforms to the OSD; the generic term open-source cannot provide that assurance. 2.1 The Business Case for Open-SourceThe open-source model has a lot to offer the business world.  It's a way to build open standards as actual software, rather than paper documents.  It's a way for companies and individuals to collaborate on products that none of them could develop alone.  It's the rapid bug-fixes and the changes that the user asks for, done to the user's own schedule. The open-source model also means increased reliability.  Because code is in the public view, it’s exposed to rigorous scrutiny, with problems being found and fixed instead of being kept secret until the wrong person discovers them. Gerald P. Weinberg once famously observed that “if builders built houses the way programmers build programs, the first woodpecker to come along would destroy civilization”.  Up to now, the reliability of most software has been atrociously bad.  The foundation of the business case for open-source is high reliability. Open-source software is peer-reviewed software; it is more reliable than closed, proprietary software.  Mature open-source code is as “bulletproof” as software ever gets. This is a radical idea to many businesspeople.  Many have a belief that open-source software is necessarily unprofessional, that it is shoddily made and more prone to fail than closed software.  The Internet's infrastructure makes the best possible rebuttal. Consider DNS, sendmail, the various open-source TCP/IP stacks and utility suites, and the open-source scripting languages such as Perl that are behind most “live” content on the Web.  These are effectively the running gears of the Internet.  These open-source programs have demonstrated a level of reliability and robustness under rapidly changing conditions (including a huge and rapid increase in the Internet's size) that, considered against the performance record of even the best closed commercial software, is nothing short of spectacular. In an independent head-to-head reliability test, open-source Unix systems and utilities were less fragile—that is, they crashed or hung less often—than their proprietary counterparts.  The business implication of this technical case is clear.  Eventually, peer review will come to be considered a necessary condition for achieving the highest quality.  In many market niches, software that has not been peer-reviewed simply won't be perceived as good enough to compete.2.2 The Customer Case for Open-SourceBeyond all the reliability and quality gains discussed, the open-source model has one overwhelming advantage for the software customer: you aren't a prisoner.  Because you can get access to source, you can survive the collapse of your vendor.  You're no longer totally at the mercy of unfixed bugs.  You're not shackled to every strategic decision your vendor makes.  And if your vendor's support fees become exorbitant, you can buy support from elsewhere. For this reason alone, every software customer should demand open-source and refuse to deal with software vendors who close and shroud their code. It's a matter of controlling your own destiny. This customer case for open-source may apply even if the software you're concerned about was developed internally and never for sale on the open market. PRIVATEThe Open-Source Definition (OSD)(Version 1.7)Open-source doesn't just mean access to the source code. The distribution terms of open-source software must comply with the following criteria: 1. Free RedistributionThe license may not restrict any party from selling or giving away the software as a component of an aggregate software distribution containing programs from several different sources. The license may not require a royalty or other fee for such sale. 2. Source CodeThe program must include source code, and must allow distribution in source code as well as compiled form. Where some form of a product is not distributed with source code, there must be a well-publicized means of obtaining the source code for no more than a reasonable reproduction cost—preferably, downloading via the Internet without charge. The source code must be the preferred form in which a programmer would modify the program. Deliberately obfuscated source code is not allowed. Intermediate forms such as the output of a preprocessor or translator are not allowed.3. Derived WorksThe license must allow modifications and derived works, and must allow them to be distributed under the same terms as the license of the original software. 4. Integrity of the Author's Source Code.The license may restrict source code from being distributed in modified form only if the license allows the distribution of "patch files" with the source code for the purpose of modifying the program at build time. The license must explicitly permit distribution of software built from modified source code. The license may require derived works to carry a different name or version number from the original software. 5. No Discrimination Against Persons or Groups.The license must not discriminate against any person or group of persons. 6. No Discrimination Against Fields of Endeavor.The license must not restrict anyone from making use of the program in a specific field of endeavor. For example, it may not restrict the program from being used in a business, or from being used for genetic research. 7. Distribution of License.The rights attached to the program must apply to all to whom the program is redistributed without the need for execution of an additional license by those parties. 8. License Must Not Be Specific to a Product.The rights attached to the program must not depend on the program's being part of a particular software distribution. If the program is extracted from that distribution and used or distributed within the terms of the program's license, all parties to whom the program is redistributed should have the same rights as those that are granted in conjunction with the original software distribution. 9. License Must Not Contaminate Other Software.The license must not place restrictions on other software that is distributed along with the licensed software. For example, the license must not insist that all other programs distributed on the same medium must be open-source software.  Figure 2 – The “OSD” is managed and promoted by the Open-Source InitiativeOne case, for example, in which a few employees at a large Internet-equipment manufacturer developed a distributed printing spooler was very important for company use, but completely unrelated to the company's normal expertise or line of business.  What happens when those employees leave?  Under the closed model, this large company would be stuck with decaying software or an expensive retraining job.  But now imagine that the company released the spooler as open-source and helped it find an interest community on the Internet.  Now, when the developers leave, someone else might step in at no monetary cost to take over the software.  At the very least, there's a known pool of people with an interest from which the company might hire replacements. Using most commercial software involves software licenses, and tracking software copies and usage.  This demands record keeping, and legal exposure.  Both raise costs.  Thus, juggling software licenses and copies is a source of costs to businesses, and legal risk to businesses and individuals.  In many (perhaps most or all) businesses, such tracking is imperfect, sometimes intentionally, usually not.  Any such imperfection exposes the guilty party to legal actions (fines, litigation, arrest) due to breaking laws and violating copyrights; an intellectual property quagmire.  Most if not all open-source software can be freely copied and used. There are no licenses to track, and thus no related costs or legal risks. 2.3 Standard ObjectionsNot many people use open-source software.It's hard to know exactly how many people use open-source software because a lot of it is spread via free downloads off the Internet.  Nobody has anything like total sales figures and many users in corporate settings hide the fact for political reasons.  Linux is believed to have somewhere between 4 and 27 million users, with best estimates towards the upper end of that range. (According to IDG, business Linux usage increased 212% in 1998. Other figures indicate it is roughly doubling yearly.) The Netcraft software tallies which web servers are used on the Internet.  It consistently shows the open-source Apache web server to over half of the market share, and to be steadily increasing—beating out better-hyped proprietary products like Netscape's and Microsoft's server suites.  The Internet Operating System Counter collects data about operating system usage in Europe.  It consistently shows Linux is the most popular Internet-connected operating system there.  Indirectly, everybody who sends email or uses the Web is using open-source software.  The basic machinery of the Internet (its mail transports, web servers, and FTP servers) is almost entirely open-source. It’s hard to get reliable support for open-source software.InfoWorld's 1997 “Best Product of the Year” roundup should have demolished this myth once and for all.  As the article states, “...readers who are using Linux in a business environment said they found the support they received to be far more impressive than what they were used to with commercial software.” [Reference 3]  Linux is not an exception. In fact, business users will generally find that mature open-source products are far more reliable to begin with, and that when support is needed, it is dramatically cheaper and easier to get than from closed vendors. Closed source helps protect against security attacks.This is exactly backwards, as any cryptographer will tell you. Security through obscurity just does not work. The reason it doesn't work is that security-breakers are far more motivated and persistent than the rest of us (who have lots of other things to worry about). The perpetrators will find the holes whether source is open or closed.  Alan Cox’s web site [Reference 4] illuminates several other risks associated with closed-source computing.Closed sources have three major drawbacks:  (1) they create a false sense of security; (2) they prevent knowledgeable users from finding the holes and fix them; (3) they make it harder to distribute trustworthy fixes when a hole is revealed.  In fact, open-source operating systems and applications are generally much more security-safe than their closed-source counterparts. When the “Ping o'Death” exploit was revealed in 1997, Linux had fix patches within hours.  The maintainers of closed-source operating systems took months to plug the hole. Open-source opposes intellectual property rights.Raymond [Reference 2] argued that the bazaar development mode might be so much more effective than the cathedral mode that open-source software may eventually drive closed, proprietary software almost completely out of the market.  In the future, selective pressures for higher-quality software may favor the open-source model so heavily that closed or “shrouded” software may become the exceptional case.  Indeed, there are some kinds of software (including many mission-critical Internet tools such as DNS) for which this is already true.  The OSI doesn't have a position either for or against intellectual property rights in software.  They believe that the contention over this issue that has polarized the open-source community in the past is largely pointless, because the best arguments for open-source products are grounded in economics and engineering. There are companies making money programming open-source software right now.  Red Hat, Cygnus, and Caldera are three of the best known.  Probably the purest demonstration today is Red Hat, which has built a flourishing business selling software that one can download for free from Red Hat's own web site!  Red Hat's sales are doubling every year.  What the consumer buys from them is “hand-holding”—a source of support when users have problems with the “free” items they sell.  In 1998 there were probably close to a dozen companies working this model successfully. Closed software and trade secrets make short-term sense in areas where serious research is required.  Today, the Research and Developmental (R&D) costs behind emerging technologies such as speech and handwriting recognition, high-performance 3D engines and MPEG codecs make them candidates to stay closed. Robustness typically isn't a major problem, and thus, unlike systems software, does not benefit greatly from the debugging contributions of a broad set of users.  The cost of forgoing independent peer review is relatively low for such software. In general, if the main cost driver is R&D rather than implementation and maintenance, then it makes sense to be closed. However, the moment anyone else publishes a functionally similar product, this situation reverses.  The value of being closed and proprietary virtually disappears, leaving in its wake all of the chronic problems of the closed approach—and to fix them, you've got to start building a co-developer community late in the game. In 1998 this was happening with such recently hot technologies as scalable font rendering and 3-D animation engines for action games.  The bottom line is that hot technologies don't stay hot forever. In the long run, open-source is the superior model for all but the most research-intensive software. 3. Analysis of AlternativesThe RDE Forum’s use case body of knowledge has been used to analyze whether an open-source RTI would benefit the ADS community in general.  This information source provides quantitative performance metrics, functional service support and platform requirements for the DMSO RTI.  The paragraphs below detail this analysis.3.1 Latency/Throughput/BandwidthThe RDE Forum determined that the protocol associated with the RTI overwhelms the HLA overhead savings for small federations. In controlled experiments, RTI transport delays were too great for even small numbers of highly dynamic objects.  We noted a high variance in latency during simulation execution.  (Because the knowledge base did not include data from federations with large numbers of objects or large numbers of federates, nothing could be concluded for these types of ADSs.  We plan to investigate this area in the coming year.)As discussed above, open sourcing promotes software reliability and quality by supporting independent peer review and rapid evolution of source code.  Using this technique, the ADS community could focus its efforts on those RTI services that are most important to their simulation domains.  Performance gains could be made in days rather than months, unconstrained by the need to wait for closed-source releases.  3.2 ScaleabilityRDE’s use case body of knowledge documented that the number of federate/federation objects has a direct impact on latency, throughput and memory usage.  Small changes in federation size significantly affected performance, and complete failure occurred with greater than 50,000 objects (depending on available memory).  Here again, allowing the ADS community to focus on specific domains of interest would be instrumental in improving RTI performance in the “scaleability” use case.  3.3 Availability/SupportabilityThe RTI availability/supportability issues were broken down into two primary areas: platform support and documentation.  We identified the need to target the RTI to a broader range of platforms and operating systems, and confirmed that the RTI’s reliance on multicast complicates network integration and limits Internet functionality. Platform range is another area in which open sourcing can help.  Open-source authors frequently receive, for free, port changes to operating systems and environments that they barely knew existed, and could not have afforded to pay for.  Each such port serves to widen the market appeal of the product.Regarding documentation, our analysis made it clear that the RDE Forum needs to offer the ADS community “how-to” manuals for each of the use cases.  It is a hallowed given that programmers hate documenting.  Many people would expect the open-source model to be a culture of self-directed egoists that are fragmented, territorial, wasteful, secretive, and hostile.  But this expectation is clearly falsified by the stunning variety, quality and depth of Linux documentation.  Evidently Linux's open-source development led to more useful manuals than the heavily funded documentation shops of commercial software producers. The same could be true for the RTI documents.3.4 Infrastructure SupportThe RDE Forum identified a universal requirement for improved RTI support that includes predictive performance tools or metrics, together with tuning and optimization tools.  Several tools are available to the ADS community under other transport protocols, and the RDE Forum identified the need for similar tools under HLA. These include, in specific, a network sniffer, an RTI monitor, and a stealth viewer.One of the most often-repeated pieces of management advice is “Stay close to the customer.”  In today's fast-moving, short-product-cycle business climate it's more important than ever to do that—to understand almost as soon as they do what the customers want, and to be able to rapidly respond to those needs. The sustained development of the RTI infrastructure will hinge upon this kind of close relationship with the ADS community.The open-source method resembles the way many successful Japanese companies have developed consumer products: be the first to market a product that works but is not perfect, and then iterate quickly based upon customer feedback to achieve a full set of features that the customers needs and wants.  This has proven to be especially valuable for high-technology products (e.g., laptops, personal assistants, cellular phones) that people do not yet know they need, nor the particular features that they will use. Open sourcing promises to offer the same benefits to the RTI infrastructure by eliciting the need for, and sources of, tools such as predictive performance tools or metrics, and tuning and optimization tools.4. SummaryOpen-source promotes software reliability and quality by stimulating independent peer reviews and rapid evolutions of the source code.  The results of our review indicate that the ADS community would be best served by an open-source version of the RTI.  Granted, the RTI developers would undergo a major period of readjustment, and many of their jobs would be changed or redefined. Nonetheless, there would still be a substantial amount of for-pay programming work, and they would have better tools with which to do it. Most importantly, HLA would mature from a convention that is used only where it is not harmful, to truly become the architecture of choice for advanced distributed simulation. It would be embraced by a wider segment of the ADS community and would be better positioned to respond to ever-changing requirements and long-term needs.5. ReferencesFisher, Paul Nivin.  “Free Software Licenses.”  (www.opensourceit.com/news/990607_freesoft-ware. html). 1999.Raymond, Eric S.  The Cathedral and the Bazaar, Musings on Linux and Open-Source by an Accidental Revolutionary.  New York: O’Reilly. 1999.Foster, Ed. “1997 Best Technical Support Award.”  InfoWorld  (December, 1997).	Cox, Alan. “The Risks of Closed Source Computing.” (www.osopinion.com/Opinions/AlanCox/ AlanCox1.html). 1999.Author BiographyBRET GIVENS received his BS and MS degrees in Computer Engineering from Wright State University in 1985 and 1990, respectively.  Mr. Givens works for Veridian and has more than fifteen years of technical experience in software engineering.  He is currently supporting the Joint Strike Fighter Project at the Air Force Research Laboratory (AFRL/VACD).  Mr. Givens is also the secretary of the Research, Development and Engineering Forum for the Simulation Interoperability Workshop. 