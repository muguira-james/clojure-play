Applying Data Distribution Management and Ownership Management Servicesof the HLA Interface SpecificationNico KuijpersJohan LukkienBas HuijbrechtsEindhoven University of TechnologyP.O. Box 5135600 MB, EindhovenThe Netherlandskuijpers@win.tue.nl , johanl@win.tue.nl,Bas.Huijbrechts@etm.ericsson.seMarco BrasséTNO Physics and Electronics LaboratoryP.O. Box 968642509 JG, The HagueThe Netherlandsbrasse@fel.tno.nlKeywords:Data Distribution Management, Ownership Management, HLA-RTI, HLA Federation DevelopmentABSTRACT: The HLA Interface Specification defines services for Data Distribution Management (DDM) and Ownership Management (OM). In addition to Declaration Management, DDM is introduced to provide value based filtering on the attribute values to be communicated. The main objectives of DDM are reduction of the data to be processed by the receiving federate (scalability) and reduction of the data actually sent over the network (performance). However, applying DDM leads to an increase in computational effort by the RTI, especially when many regions need to be updated regularly. To determine the conditions, under which DDM is of benefit, a predator-prey federation has been designed and implemented. The effects of applying several strategies using DDM and OM were analyzed and experiments were conducted using the available DMSO RTI. The usage of DDM and OM is evaluated and guidelines for future use of these services are presented.1.	IntroductionIn an attempt to provide a generic architecture for all simulation application domains, the High Level Architecture (HLA) is initiated as a new development to establish technical standards for modeling and simulation [1]. HLA offers a composable approach to the design and construction of simulations and abstracts from the distributed simulation concept [2]. TNO Physics and Electronics Laboratory (TNO-FEL) and Eindhoven University of Technology (TUE) are investigating various ways of using the High Level Architecture as a development framework for distributed simulations. The HLA Interface Specification is a formal, functional description of the interface between the HLA application and the underlying Run-Time Infrastructure (RTI). The RTI forms the basis of all HLA federates. The software layer takes care of the communication between the simulation models. The RTI supports HLA federations through management services, divided in six categories [3]: Federation Management;Declaration Management;Object Management;Ownership Management;Time Management; andData Distribution Management. In order to reduce network traffic and to limit the amount of computation each federate has to perform, HLA provides a mechanism of publication and subscription through the Declaration Management services. Upon initialization each federate registers object classes and associated attributes it will represent (publication). Also the object classes, attributes and interactions it needs to perform its task are registered (subscription). Through the Data Distribution Management (DDM) services, a federate can also subscribe to (ranges of ) attribute values. The aim is to filter as much information as possible at the source.  The responsibility to update certain attributes of objects, called attribute ownership, can be transferred between federates through the Ownership Management (OM) services.This paper describes and evaluates the Data Distribution Management and Ownership Management services. A distributed simulation model is constructed to measure the performance of the currently available DMSO RTI and to evaluate design trade-offs involving the use of these two management services. The paper is organized as follows. Section 2 focuses on the Data Distribution Management (DDM) services and Section 3 on the Ownership Management (OM) services. Section 4 describes a simulation model, which is the basis of a case study to test several strategies for using the DDM and OM services. Based on the currently available DMSO RTI, this federation has actually been implemented. Section 5 gives an overview of the design and implementation of the federation. Experiments investigating performance issues are described, and their initial results are presented in Section 6. Finally, Section 7 presents an evaluation and some guidelines for future use of the DDM and OM services. 2.	Data Distribution ManagementThrough the Data Distribution Management (DDM) services, filtering is provided on the actual values of the attributes to be communicated [3]. The main objectives for using DDM are the need for reduction of the data to be processed by the receiving federate (scalability) and reduction of the data actually sent over the network (performance). The fundamental DDM-constructs are routing spaces and regions. A routing space is a Cartesian product of finite intervals (referred to as dimensions), whereas a region is a subspace of a routing space [4]. Federates either express an interest in receiving certain data or declare their intention to send data by defining subscription regions and update regions. The purpose of the regions is to express the scope of interest. The receiving federate can express a scope of interest for receiving data by declaring a subscription region and associating it with attributes of a certain object. A sending federate can express the scope of intention for sending (published) data by declaring an update region and associating it with an attribute. Multiple update and subscription regions can be declared for a single routing space.Communication is established by the RTI only when publish and subscription regions overlap. Due to the dynamic behavior of objects, the scope of interest may change, and thus the regions as well. Since the update–subscription region comparison is done by the sending federates, all federates need to be aware of all subscription regions. Modifying a subscription region will therefore lead to communication overhead caused by region change notifications between federates, and thus increase the network load.Expanding regionsIn principle it is desired to choose the regions small: federates only receive the information they need and communication overhead is limited. However, when objects move through the simulation space, regions may have to be updated regularly causing region change notifications. A trade-off can be made when determining the region sizes. By expanding the regions with a comfort zone, region boundaries can be updated less frequently. The challenge is to find an efficient balance. The optimal region sizes can be determined in two ways: by analyzing the behavior of objects or by conducting experiments trying different region sizes. Analyzing an object’s behavior mainly involves analyzing the movement through the routing space. Not only the characteristics of velocity and acceleration need to be investigated, but also characteristics such as whether the object stays relatively long in one area before moving to another area. Besides movements, also the interaction ranges and update rates need to be investigated. Regions should at least cover the interaction range. Less frequent update rates of other objects should be taken into account: objects moving fast through the simulation space should still be detected if they move through a certain region in between two state updates. The HLA Interfaces Specification provides a scope advisory mechanism to cope with this problem. If this mechanism is not used, the regions should be expanded such that objects are detected before they move into the actual interaction range. The size of the scope margin depends on the behavior of objects to be detected: objects going in or out of the interaction range should be detected at least once in the scope margin.Besides analyzing the behavior of objects, the characteristics of the entire federation should be investigated, especially to determine whether the use of DDM is of benefit at all. DDM can only be applied efficiently if regions do not overlap too much, because this would result in a poor filter, while causing a large computational overhead due to region comparisons.Region clusteringFederation executions with a large number of regions may suffer from overhead caused by region change notifications. Therefore, it may be desirable to reduce the actual number of regions by merging multiple regions into a new region. By associating the attributes of multiple objects with the same region, one region may replace a cluster of regions. The bounding box of the regions to be replaced can define such a cluster. There are a few requirements for applying this strategy. First, the regions to be clustered all have to be defined by the same federate (locality) and must belong to the same class (update or subscribe). Secondly, the clustered regions must behave such that they will overlap or stay relatively close within their routing space for a longer period of time to prevent the cluster from growing large during the course of the simulation.Clustering can be applied either statically or dynamically. In the static approach, the federation designer determines the clusters by analyzing the behavior of all objects and their regions. In the dynamic approach the clusters are adapted during the federation execution to maintain the most efficient clusters. As with regions, clusters should be kept small and changes of clusters should not occur too often to avoid unnecessary data exchange and update notifications.DDM efficiencyFor each attribute the federation designer must specify whether communication is reliable or unreliable. Unreliable broadcast and multicast communication can be implemented very efficiently, whereas reliable communication involves more overhead. Here we assume that reliable communication is used. The efficiency of applying DDM consists of two parts: the efficiency of the filtering mechanism and the computational overhead. The filtering efficiency can be expressed by comparing the amount of useful data exchanges compared to the total amount of data exchanges (including region change notifications). Expanding regions and region clustering may lead to a less efficient use of regions. On the other hand, the computational overhead may be reduced as this is related to the amount of region change notifications.To investigate the effects of region expansion and region clustering, and to evaluate whether DDM is of benefit at all, a federation could be developed which fulfils the following requirements: objects have a bounded interaction range and move through the simulation space (region expansion); and objects tend to ‘flock’ when they are in each other’s interaction range (region clustering). A federation fulfilling these requirements will be introduced in Section 4. 3.	Ownership ManagementThe Ownership Management services provide a facility to transfer attribute ownership and to keep the administration of the update responsibilities up-to-date. Attribute ownership transfer is provided through the push and the pull mechanism. A federate may try to release (push) responsibility for one or more published attributes of an object, or try to acquire (pull) responsibility for one or more attributes of an object (see Figure 1). Ownership transfer between federates will only succeed if both sides agree. However, it is possible to push an attribute unconditionally (non-negotiated) which may result in an attribute not being updated by any federate until some federate pulls the ownership. The federation designer should define proper ownership migration strategies in order to prevent ownership handover failures and attributes migrating continuously.Figure 1a: The negotiated push mechanism.Figure 1b: The negotiated pull mechanism.Migrating objectsBoth the push and pull mechanisms operate on attributes only. In case several attributes or even entire objects have to be migrated, problems may arise. Multiple federates may react with a pull attempt on one single push attempt. Since the HLA Interface Specification does not specify how the RTI must deal with multiple pull requests for the same attribute, it is not clear which federate will be the new owner [5]. Thus the RTI could migrate different attributes of the same object to different federates.Not being able to declare attributes of objects as inseparable can be considered as a shortcoming of the HLA Interface Specification. A possible solution is to define an object migration protocol based on the Ownership Management services. The object gets an extra attribute symbolizing the ownership of the entire object, referred to as ObjectOwner. The default attribute PrivilegeToDelete could be used. The object ownership transfer protocol is defined as follows:Federates may only attempt to push objects by pushing the ObjectOwner attribute;Federates may only attempt to pull objects by pulling the ObjectOwner attribute;Federates owning the ObjectOwner attribute, but not owning all other attributes yet, must pull the missing attributes;Federates not owning the ObjectOwner attribute, but still owning some of the other attributes, must relinquish those attributes whenever they receive a request;Federates may not attempt to pull or push inseparable attributes otherwise.Compared to attribute ownership transfer, the object ownership transfer protocol takes more time due to the two phases: the RTI first chooses the new owner by migrating the ObjectOwner attribute, after which the actual transfer takes place. On the other hand, the object attributes still can be updated by the relinquishing federate during the first phase. The HLA Ownership Management services could be extended with functionality for object ownership transfer based on the protocol described above. The internal stateAnother shortcoming of the HLA Ownership Management services is that an object’s internal state cannot be handed over. Publishing and migrating the internal state can solve this problem, but may be undesired. In some situations the entire internal state may be so complex that publication would result in a large overhead. A new attribute, which symbolizes the internal state of the object, can do the job. Since the RTI is not aware of the semantics of an attribute, this attribute can represent the entire internal state: it is the federate’s responsibility to interpret this attribute. In this way only one extra attribute has to be published (thus small overhead for the RTI), and it only has to be updated whenever the owning federate intends to migrate the object. In addition to object ownership transfer as described above, the HLA Ownership Management services could be extended by facilitating the migration of an object’s internal state.Using ownership migration, federates with limited capacity can dispose of the responsibility to update attributes. Federates may also use ownership migration to obtain responsibility for updating attributes of objects they do not own. The latter is often used in case the federate’s desired functionality and accuracy come in danger, for instance due to network latencies.To investigate the effects of ownership transfer, a federation could be developed which fulfils the following requirements: objects can be simulated by any federate and their ownership can be transferred between federates; and, due to network latencies, the simulation accuracy comes in danger if objects are simulated by remote federates. A federation fulfilling these requirements will be introduced in the next section.4.	The Savannah ModelIn order to evaluate the usage of the Data Distribution Management and Ownership Management services and to measure the effects of region expansion, region clustering and object ownership transfer, a federation is introduced below. The requirements to this federation can be characterized as follows:The federation contains at least two types of simulation objects interacting with each other in the simulation space. We call them predators and preys: predators ‘hunt’ preys during the federation execution and try to ‘kill’ them by sending events.Both predators and preys move through the simulation space.Both predators and preys have a bounded interaction range.Preys tend to ‘flock’ when they are in each other’s interaction range.Preys can be simulated by any federate. Ownership can be transferred during the federation execution.Precise knowledge of the position and movements of the hunted prey is necessary for the accurate simulation of a hunting predator.The positions of the predators and preys can be monitored as well as the events.Network traffic can be monitored.The federation is scalable, i.e., a larger number of federates could be used without affecting the functionality much.The federation is called the savannah model. The preys and predators move through the savannah (simulated environment) and perform their hunting game. Predators hunt preys individually, which means that they pursue a prey until they are close enough to ‘catch’ it. To keep the number of preys constant, a new one is born for each prey that is killed. The predator hunts the prey that it can catch fastest. The preys are herd-animals: they tend to flock and even flock closer when a predator is in sight. Preys tend to flee from the predators when they come too close.The simulated world of the savannah model is defined by a linear 2 (or 3)-dimensional space, in which the predators and preys are located and through which they move. For two reasons the space is bounded. First, the savannah space will be mapped on a DDM routing space. Second, the entities should not ‘spread out’ such that they move out each other’s interaction ranges. Therefore, a fence surrounds the savannah world: entities hitting the fence ‘bounce’ back into the savannah world.Predator and prey behaviorPredator and prey movements are simulated using the classic Newtonian mechanics. The state of each object is updated every (t time units (called the integrator). While updating, a new position (p), new acceleration (a) and new velocity (v) are computed (in that order). The acceleration is based on the interactions with other objects. To keep the model simple, an approximation method, based on the Verlet velocity integrator [6], is used to compute the entity’s position, velocity and acceleration. The computations of the position and velocity are based on the assumption that during the time between t and t+(t the acceleration remains constant. The position of an entity on time t+(t is then defined byp(t+(t) = p(t) +(t v(t) + ½ (t2 a(t).The acceleration depends on a force and is bounded. This force is composed of the sum of all interactions with other entities. To bound the velocity as well, a linear friction force in opposite direction of the current movement is defined. Together they determine the acceleration of an entity. Assuming the mass m = 1, a(t+(t) = finteraction + ffriction.Finally, the velocity for an entity is defined byv(t+(t) = v(t) + ½ (t (a(t+(t) + a(t)).In case the entity hits the fence of the savannah world, its velocity and its position are mirrored in the fence. When a predator hunts a prey, it sends a catch event as soon as it is close enough to catch and kill the prey. The prey itself determines whether it is actually killed by comparing its own position to the position of the predator. If, due to network latency, the position of the prey as perceived by the predator differs from the actual position, then the prey would not be killed. We will use this scheme to evaluate the effects of object ownership transfer on simulation accuracy. 5.	Savannah Federation The Savannah world contains two sets of entities interacting with each other. To keep the federation flexible, each federate simulates a subset of these entities, such that each prey and each predator is simulated by exactly one federate. The number of federates is not fixed. Thus it is possible to change the simulation configuration and the level of distribution by using more or fewer federates. During the federation execution, each federate must simulate the predators and preys it owns, and deal with interactions between them. Interactions between entities that are not simulated by the same federate are dealt with through the RTI using reliable communication.In order to implement the federation, a federate, called savannah client, has been built. This federate simulates some predators and a variable set of preys. The Savannah Federation consists of multiple instances of the savannah client. For evaluating the model, the federation is extended with a federate, called savannah observer, which logs all relevant data and displays the entity positions on a screen.Timing issuesPredators can be considered as metaphors for humans-in-the-loop, i.e., they could be replaced with a real-time, manned simulator. Thus real-time requirements are involved: each simulation cycle should take no more than (t time units. To fulfil the real-time requirements, we refrained from using the HLA Time Management services. Instead, the federates perform their simulation based on the local clock. Initially, all clocks are synchronized.Figure 2: simulation cycleA savannah client performs a simulation cycle according to the following scheme. First, all local entities are simulated with integrator (t. The model prescribes that for each entity the next state is based on the old positions and velocities of other, possibly external, entities. This implies that first all entities are simulated, after which the savannah client ticks the RTI to perform the callbacks, which may reflect to the client the (new) external entities with their latest available attribute values. Since this ticking must be finished before the next simulation cycle begins, a maximum time is specified. If the ticking would finish before its maximum allowed time, the remaining time is spent sleeping. In case the tick does not finish before its maximum specified time, a coarser integrator (t will be chosen for the next cycle. All times are sampled on the local clock with exception of the begin time of each simulation cycle, which is calculated on basis of the already performed cycles and the time they should have cost (in most cases (t). It is stressed that this time mechanism is based on the assumption that the local clocks do not deviate while the simulation is executed.Applying Data Distribution ManagementA 2-dimensional routing space is introduced to represent the savannah world. For each predator and prey, the scope of interest is defined by a region within this routing space. When predators and preys move through the savannah world their regions have to be updated. To evaluate the effects of region expansion a comfort zone (Section 2) can be added to each region.  The savannah client will keep the regions unchanged as long as possible. Only when the position of a predator or prey is changed such that the region does not cover the scope of interest any more, the region is updated. Preys tend to flock. The savannah client anticipates on this behavior by trying to cluster the regions (Section 2). During each simulation cycle, regions may be clustered dynamically on basis of the local preys’ states and some clustering strategy. A cluster manager keeps track of all local preys and is responsible for all their (clustered) regions.Applying Ownership ManagementIn the federation each prey can be simulated by any federate and ownership may change during the course of the simulation. A prey may be re-allocated to another federate to avoid undesired latencies or to balance the CPU load. In case a predator hunts an external prey, the savannah client tries to acquire ownership of the prey. Not all pull attempts succeed; it is possible that a predator simulated by the other federate is hunting the prey as well. In that case the pull request will be denied and the ownership of the prey remains at the other federate.A savannah client is not always permitted to pull preys. In order to balance the CPU load, savannah clients balance the number of preys by trading preys that are not hunted. To avoid massive communications due to the prey trading, each savannah client has a window specifying whenever it simulates too few, enough and too many preys.6.	Experiments and EvaluationThe Savannah Federation is created as a means to evaluate the DDM and Ownership Management services of a given RTI. Experiments focus on the impact that the following strategies have on the performance of the Savannah Federation:Using DDM to reduce data traffic;Using region expansion to reduce DDM region change notification overhead;Using dynamic clustering to reduce DDM computational overhead;Using object migration to reduce simulation errors.DDM is an instrument that may be used for decreasing the network load by restricting the amount of data exchanged at the expense of computational overhead. The network load can be measured using a so-called network-sniffer to count the number of object updates and region change notifications. Note that this requires extensive knowledge of the encoding of the network traffic. To obtain a better insight in the computational overhead, the application must do some bookkeeping on the amount of time spent by the RTI, the region-clustering algorithms and the simulation model. From the initial experiments it was concluded that the region-clustering algorithms were computationally very expensive when using many regions. Object migration is an instrument that may be used for improving the simulation accuracy to account for latencies. Measurement methods focus on the simulation errors made; the implementation of the Savannah Federation involves catch attempts failing due to network latencies and due to the possible asynchronous execution of the federates (see Section 5). To measure the error reduction offered by prey migration, the Savannah Client aplication counts the total number of catch attempts that are processed, sent, received, granted, and denied. From the initial experiments it was concluded that the overhead of push and pull communications had a slight effect on the outcome of the overall simulation, as it was decided to perform the object ownership handover in parallel with the simulation execution of the remaining objects. However, it was also noted that the number of simulation errors was reduced, as expected.Since the evaluated version of the RTI (DMSO RTI 1.3v5) showed some problems concerning the deletion of regions, and because the application was stressing the RTI to its limits, not all experiments could be carried out. Hence, merely qualitative results could be obtained so far. In the near future, experiments will be conducted to evaluate the most recent version of the DMSO RTI and possibly other RTIs as well.7.	Conclusions and Future WorkFederate development using the currently available DMSO RTI  involves lots of programming effort to facilitate bookkeeping. The need for administration comes from the fact that the current DMSO RTI is not re-entrant, i.e., during the handling of callbacks the RTI’s bookkeeping on attribute handles is not available. Programming effort can be reduced using a code generator that produces classes for each HLA object and HLA interaction containing the necessary bookkeeping functionality. Since communication aspects and model aspects are strictly separated, a middleware layer such as the Run-time Communication Infrastructure developed by TNO-FEL could be used [7,8]. Such a middleware layer could be extended with a cluster manager to offer better support for DDM. The Savannah Federation is implemented using code generators and the Run-time Communication Infrastructure.The efficiency of the DDM services appears to rely on an efficient implementation of the multicast protocol. The DDM services generate a lot of overhead in both communication and computation when multicast is not efficiently implemented. The clustering of regions seems to work well for a relative small amount of regions per cluster. However, the cluster algorithm is computationally expensive and has to be invoked for nearly every region update notification.The Ownership Management services seem to function well. The number of simulation errors decreased, while the network load did not increase, mainly because the push and pull mechanism replaced the traffic caused by the catch events. Although the Ownership Management services are only offered at the attribute instance level, an object ownership transfer protocol could be implemented using these services. However, it would be more convenient if object ownership transfer protocols were offered by the RTI.Future work involves experiments with new versions of the RTI. The Savannah Federation will be further refined to become a benchmark application for the evaluation of the RTI Management Services, as the federation really stresses the DDM mechanism and makes frequent use of the Ownership Management mechanism. Also, a set of new experiments will be developed to investigate the Time Management services.8.	References[1] Simulation Interoperability Standards Organization, http://www.sisostds.org[2] HLA Homepage, http://hla.dmso.mil[3] US Department of Defense, “High Level Architecture Run-Time Infrastructure Programmer’s Guide 1.3 Version”, 31 July 1998.[4] Katherine L. Morse, “HLA Data Distribution Management: Design Document”, Version 0.7, 12 November 1997.[5] Defense Modeling and Simulation Office (DMSO), “High Level Architecture for Simulations Interface Specification”, Version 0.3.[6] M.P. Allen, D.J. Tildesley, “Computer simulation of liquids”, 1987, Oxford-Clarendon (ISBN 0-19-855375-7)[7] Nico Kuijpers, Paul van Gool, Hans Jense, “A Component Architecture for Simulator Development”, Proc. 1998 Spring Simulation Interoperabilty Workshop, Orlando, FL, March 1998.[8] Marco Brassé, Wim Huiskamp, Olaf Stroosma, “A Component Architecture for Federate Development”, Proc. 1999 Fall Simulation Interoperability Workshop, 99F-SIW-025, Orlando, FL, September 1999.Author BiographiesNICO KUIJPERS is assistant professor at the Department of Mathematics and Computing Science of Eindhoven University of Technology (TUE). His research interests are medical image analysis, large-scale (biomedical) simulations and distributed simulations. In his former job at TNO-FEL he was a member of the scientific staff in the Command & Control and Simulation Division. He was project leader for several collaborative projects in the area of distributed simulation, both nationally and internationally with partners in the industry and academic world. He holds a M.Sc. in Computing Science and a Master of Technological Design in Software Technology, both from Eindhoven University of Technology.JOHAN LUKKIEN is associate professor at the Department of Mathematics and Computing Science of Eindhoven University of Technology (TUE). His research interests are parallel computing and large-scale simulations. He holds a Ph.D. in Computer Science from Groningen University.MARCO BRASSÉ is a member of the scientific staff in the Command & Control and Simulation Division at TNO-FEL. He is a software architect for several projects in the area of distributed simulation, both nationally and internationally with partners in the military and simulation industry. He holds a M.Sc. in Computing Science and a Master of Technological Design in Software Technology, both from Eindhoven University of Technology.BAS HUIJBRECHTS is a researcher at Ericsson R&D. He holds a M.Sc. in Computing Science from Eindhoven University of Technology. In April 1999 he concluded his Master’s Thesis Using DMSO’s High Level Architecture for Distributed Simulations within the Command & Control and Simulation Division at TNO-FEL. This work has been carried out as a cooperation between TNO Physics and Electronics Laboratory and Eindhoven University of Technology. EMBED Word.Picture.8   EMBED Word.Picture.8   EMBED Word.Picture.8  