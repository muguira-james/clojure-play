SEDRIS’izing the CTDB LandscapeAndrew ToshAcuSoft13501 Ingenuity Drive, Suite 200, Orlando, FL 32826Ph: 407-658-9888tosh@acusoft.comJesse CamposScience Applications International Corporation (SAIC)12479 Research Parkway, Suite 600, Orlando, Florida 32826Ph: 407-207-2700, Fax: 407-277-5395 HYPERLINK "mailto:Jesse.J.Campos@saic.com" Jesse.J.Campos@saic.comKeywords:Synthetic Natural Environment, Database Generation, SEDRISABSTRACT: The SEDRIS project has developed the CTDBtoSTF application in order to fully utilize SEDRIS capabilities for users of Compact Terrain Database (CTDB).  This is done by creating SEDRIS transmittals in the form of a SEDRIS Transmittal Format (STF) file set from CTDBs.  The goal of this application is to allow users of CTDBs the capability to create STFs that can be used in SEDRIS tools such as SEE-IT, Side-by-Side, and Focus to improve the CTDBs for use in Semi-Automated Forces (SAF) systems.  Additionally, this application provides a means for other SAF systems that do not use CTDB, to import CTDBs by using SEDRIS as an interchange mechanism.This paper will discuss the state of the CTDBtoSTF application and how to effectively use it in the M&S community. This paper will begin with a description of the mapping of CTDB constructs into the SEDRIS Data Representation Model (DRM), including issues such as how Multi-Elevation Structures (MES) are handled by the application.   The paper will then continue by delineating the current capabilities, limitations, and performance metrics of CTDBtoSTF. This section will describe what data is derived or explicitly stored in the STF as opposed to implicitly in the CTDB.  The paper will continue with planned improvements and enhancement to the application.  The paper will end with a discussion of how this application can be used in tandem with the STFtoCTDB application to improve the quality of CTDBs in the M&S community.IntroductionSEDRIS technologies provide a robust mechanism for the representation of environmental data across all domains and applications.  In order to provide these broad capabilities, five technology components have been developed.  The five technology components are as follows:A Data Representation Model (DRM) allowing the full representation of any environmental piece of data.The Spatial Reference Model (SRM) allowing for an extensive definition of the Spatial Reference Frames (SRF) supported.An Environmental Data Coding Specification (EDCS) that provides complete classification and attribution for environmental data.An Interface Specification, the SEDRIS API, which allows the user to develop applications to consume and produce environmental data.A binary file format, the SEDRIS Transmittal Format (STF), specifically designed for the SEDRIS DRM.These inter-related components are used to interchange environmental data and/or to produce environmental data applications.  While initially the majority of effort of SEDRIS development has been to the former, increasingly, the latter has become more and more important.  Developing SEDRIS tools, i.e. tools that use the SEDRIS technology components, has become more widespread.  This is in large part because of the inherent benefit of developing to an international standard through the standard API and DRM.  By developing tools to the SEDRIS API, a tool developer can leverage all of the interchange mechanisms to and from STF and not deal with the complexity of different formats.  Specifically, the Compact Terrain Database (CTDB) format, a widely used format for the Semi Automated Forces (SAF) community, would benefit from SEDRIS tools.  Leveraging SEDRIS capabilities has been the driving force behind the development of the CTDBtoSTF tool discussed in this paper.This paper will discuss the CTDBtoSTF application and how to effectively use it in the M&S community. The first area to be explored is the mapping of CTDB constructs into the DRM.  The current capabilities, limitations, and performance metrics of CTDBtoSTF will then be provided.  This section will also describe what data is derived or explicitly stored in the STF as opposed to implicitly in the CTDB.  The paper will continue with planned improvements and enhancement to the application.  The paper will end with a discussion of how this application can be used in tandem with the STFtoCTDB application to improve the quality of CTDBs in the M&S community.Mapping CTDB to the SEDRIS DRMThis section describes the basic data elements of the CTDB at a high level and how they are mapped into the DRM.  Furthermore, the DRM organization is described, as well as where each CTDB data element resides within the transmittal organization.This section will refer to specific DRM classes of the SEDRIS DRM version 3.1. The names of these data objects will be enclosed with the symbols “<” and “>”. To find a detailed description of any of the referred to data type please visit  HYPERLINK "http://www.sedris.org" www.sedris.org.This section will not attempt to detail every mapping of CTDBtoSTF. A separate paper can be obtained from  HYPERLINK "http://www.sedris.org" www.sedris.org that provides such detail.CTDB Data TypesPolygon Attribute TableCTDB stores a Polygon Attribute Table (PAT). This PAT is indexed throughout the database to attribute the different data elements. Each row (entry) in the PAT is a unique set of attributes, while each column stores a unique attribute. There are four basic columns in the PAT:Column 1: Trafficability codes for SIMNET and CCTTColumn 2: Soil typesColumn 3: Surface materialColumn 4: Soil wetnessElevation Grid and Soil GridCTDB can store elevation and soil information in a grid format. While the elevation grid stores only the height of the terrain for each post, the soil grid stores three values for each post. The first value, diagonalization, represents how the quad should be divided (i.e. South-West to North-East or North-West to South-East). The remaining two values represent indexes into the PAT. Each index corresponds to one triangle in the quad, which is cut based upon the diagonalization.Polygons in CTDBInstead of storing the terrain in an elevation grid, CTDB can represent the terrain in a polygonal form called Triangular Irregular Networks (TIN). TINs are triangles stored together in a mesh. CTDB also has a concept of MicroTerrain. MicroTerrain polygons can sit on top of TINs or an Elevation Grid to provide more detail in particular areas.Another polygonal aspect of CTDB is the Canopy Polygons. Canopy Polygons are used to represent large areas that restrict visibility, such as forest areas. Finally, CTDB can store Multi-Elevation Structures (MES). These structures contain complete information for representing a structure. This includes apertures, enclosures and floor-lines.Physical FeaturesCTDB stores Trees, Tree-lines, Laid-Linear and Volume Models as physical features. Trees and Tree-lines are stored together for purposes of compactness. Trees are determined to be trees when there is only one vertex. Laid-Linear Features in CTDB represent roads and rivers. Finally, Volume Models are used to represent edifices that obstruct line-of-sight.Abstract FeaturesAbstract Features, such as Soil Defragmentation Areas and Canopy Footprints, are stored in a quad-tree structure within CTDB. These 2-Dimensional features have various uses within the SAF system. Below is a list of some of the CTDB Abstract Features (CTDB has been expanded to support additional types as well).CTDB Abstract FeatureABSTRACT_CANOPYSOIL_DEFRAGSTEEP_SLOPEPOLITICAL_BOUNDARYOFFROAD_SEGMENTBRIDGECRATERDITCHFIGHTING_POSBERMCAMOUFLAGERUBBLESNOWHYDRO_SURFACEHYDRO_SUBSURFACERAILROADPIPELINETable  SEQ Table \* ARABIC 1 CTDB Abstract FeaturesSEDRIS MappingGenerated STF StructureThe graph below shows the overall structure of the STF that is created by the CTDBtoSTF software. EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 1 Generated Transmittal StructureCTDB stores physical features on a tile basis. This patch-based organization is maintained in the generated SEDRIS transmittal. Through the use of a <Spatial Index Related Geometry> instance and a <Spatial Index Related Feature> instance, the features and geometries will be unambiguously stored in the appropriate row and column indexed patch.Features for each patch will be stored under a <Classification Related Feature>; likewise geometry is stored under a <Classification Related Geometry>. These objects are used to organize their components, or children, based upon the component’s ECC (Environmental Classification Code). So the overall hierarchy created by the CTDBtoSTF is a tile organization at the highest level. Then at the tile level, there is a classification-based organization.Figure 1 shows that each <Classification Related Geometry/Feature>, which is the root for each tile, is linked with a <Spatial Index Data>. This <Spatial Index Data> stores the exact row and column index of the tile (CTDB refers to tiles as “patches”).Storing CTDB PATEach entry in the CTDB PAT is stored in a separate SEDRIS <Property Table>. Each <Property Table> will store a value for the appropriate EAC (Environmental Attribute Code). The individual <Property Tables> are organized under the <Data Table Library>.  This is demonstrated in Figure 2.  Note that the exact structure of the CTDB PAT is not maintained in the SEDRIS organization.  This highlights one of the issues with mapping data in and out of the DRM.  Basically, that it is not important to maintain the structure, but it is paramount that the semantics are maintained.  Thus, the CTDB PAT is a mechanism for reusing the attributes throughout a CTDB.  In the DRM, this same meaning is used by instances of a <Library>.  Hence, the mapping from one PAT row into each <Property Table> and all of the <Property Tables> under the <Data Table Library>.  This allows for the sharing of these attributes throughout the transmittal to  be attached to geometry and features.Elevation Grid and Soil GridThe CTDB Elevation Grid and Soil Grid are stored in a single <Property Grid> stored within the <Data Table Library> as shown in Figure 2. The <Property Grid> stores the elevation, diagonalization and two indexes into the <Data Table Library>. The indexes correspond to the specific <Property Tables> that represent a single CTDB PAT entry as described in the previous section.  This again highlights the how the same meaning of the PAT is maintained within a different DRM structure.  The <Property Grid> will be instanced within the transmittal under the <Environment Root> by using a <Property Grid Hook Point> instance.  The reason that the soil grid has two indices for the <Property Table> instances under the <Data Table Library>, is that there can be two possible characteristics per cell in the soil grid.  The property grid provides a triangulation of the terrain that provides two triangles per cell.  Each triangle can then each have its own entry in the CTDB PAT table and hence own <Property Table>. EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 2 Storage of the CTDB Pat, Soil Grid and Elevation Grid in SEDRISSee section 3.2 for how the CTDBtoSTF software can generate polygonal representations of these grids.  It is important to note that due to how the CTDB PAT was stored in the <Property Table> instances, these property tables can be used by either the polygonal representation or the gridded representation.Geometric InformationThe CTDB TINs, MicroTerrain, Canopy and MES polygons are stored as  <Polygon> instances.  The organization of these <Polygons> are provided in Figure 3.  After the <Spatial Index Related Geometry> instance the <Polygon> instances are grouped according to classification using <Classification Related Geometry>.  The classification of the <Polygon> instances is provided in the <Classification Data> link objects.  Instances of <Union of Geometry Hierarchy> are provided under the <Classification Related Geometry> in order to allow for both <Polygon> and <Geometry Model Instance> objects.  The polygons are grouped using a <Union of Primitive Geometry>.  The <Union of Primitive Geometry> will contain a <Property Table> component which is the exact same <Property Table> object stored under the <Data Table Library>.  This provides a great amount of object sharing and is highly efficient since the storage cost of creating a relationship between the <Union of Primitive Geometry> object and the <Property Table> is significantly more efficient than creating another instance of the <Property Table>.  Furthermore, note that the component <Property Table> is not attached to the individual <Polygon> objects.  This provides great efficiency be using the DRM inheritance mechanism to provide the <Property Table> as inherited components of the <Polygons>.  Note that the same mechanism is used for the <Inline Colour>. EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 3 Storage of Geometry in SEDRISStoring CTDB Physical FeaturesThe CTDB Physical Features are stored in SEDRIS <Feature> objects. The mapping of feature types is show below with the organization provided in Figure 4.CTDBSEDRISTree<Point Feature>Tree-Line<Linear Feature>Laid Linear<Linear Feature>Volume Model<Areal Feature>Table  SEQ Table \* ARABIC 2 Physical Feature MappingsNote that the organization of features is very similar to that of the polygonal representation discussed in the previous section.  Again, there is a tiling process achieved with <Spatially Index Related Features> followed by the <Classification Related Features>.  In this case the <Classification Data> will contain the EDCS Classification Codes (ECC) for trees, tree lines, roads, rivers, etc.  <Union of Feature> instances are then contained which have the privimitive feartures.  Thus from the mapping, one can see that the <Union of Feature> that is under the <Classification Data> object for tree, would have <Point Feature> instances, but the <Union of Feature> object under the <Classification Data> tree lines would contain <Linear Feature> objects. EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 4 Storage of CTDB Trees and Tree-Lines in SEDRISSee section 3.2 for how the CTDBtoSTF software can generate polygonal representations of these features.Storing CTDB Abstract FeaturesSince there are a wide variety of CTDB Abstract Features, CTDBtoSTF determines a SEDRIS Feature mapping based on the type of Abstract Feature being converted. A table for the basic mappings is listed below.CTDB Abstract FeatureSEDRIS Feature TypeABSTRACT_CANOPY<Areal Feature>SOIL_DEFRAG<Areal Feature>STEEP_SLOPE<Areal Feature>POLITICAL_BOUNDARY<Areal Feature>OFFROAD_SEGMENT<Linear Feature>BRIDGE<Linear Feature>CRATER<Areal Feature>DITCH<Areal Feature>FIGHTING_POS<Areal Feature>BERM<Areal Feature>CAMOUFLAGE<Areal Feature>RUBBLE<Areal Feature>SNOW<Areal Feature>HYDRO_SURFACE<Areal Feature>HYDRO_SUBSURFACE<Areal Feature>RAILROAD<Linear Feature>PIPELINE<Linear Feature>Table 3 Abstract Feature MappingsTopologySince Laid Linear features in CTDB may not cross patch boundaries, CTDB needs a mechanism to determine how the linears connect and intersect. This is done using topological information. CTDB defines a Feature Edge as a sequence of Linear Features, while a Feature Node is the location where 1 or more edges intersect. The mapping into SEDRIS is shown in the chart below.  Note that the DRM defines just the opposite of CTDB.  The DRM defines a <Linear Feature> composed of <Feature Edge> objects.CTDBSEDRISFeature Node<Feature Node>Feature Edge<Linear Feature>Linear Feature<Feature Edge>Table 4 Topology MappingsAs a result of the mapping, in the generated SEDRIS transmittal, the <Linear Features>, which store n number of <Feature Edges>, may cross patch boundaries. The component <Feature Edges>, however, will not. Therefore, the STF’s feature tiles may share the same <Linear Feature>, as at least one component <Feature Edge> is contained in that patch.  In CTDB the linear feature did not cross patch boundaries.  Again, it is important not to get confused on the wording or structure, because the correct data has been mapped and the meaning has been preserved.Capabilities and PerformanceThis paragraph will describe the current state of the CTDBtoSTF.  It will begin with a description of the architecture.  It will then go into the capabilities such as geometry derivation, among other user configurable options.  Performance metrics will also be discussed.Software ArchitectureCTDBtoSTF is designed as a software library that can be used by other applications. Currently this library is linked against a command line program that passes in a CTDB filename and conversion options. This will eventually be outgrown by a GUI system.CTDBtoSTF is dependent upon the CTDBtoSTF Conversion Library. This library is dependent upon the SEDRIS API, used to create the STF, and ModSAF’s library, LibCTDB, for accessing the CTDB. The CTDBtoSTF Conversion Library also relies on a Mapping File, which is described in section 3.4.The CTDBtoSTF Conversion Library could also be used by other software applications that are interested in tightly integrating with the conversion capability. SHAPE  \* MERGEFORMAT Geometric Data Derivation CapabilityDuring the CTDB to STF conversion some data can be derived to provide a more complete representation of the database. For example, volume models are stored in the CTDB as a set of points outlining the top of the structure. The CTDBtoSTF software can generate both an <Areal Feature> and a complete set of <Polygons> to represent that edifice. Since the polygons that make up the roof and walls are not explicitly stored in the CTDB they must be derived by CTDBtoSTF. The following table details what type of DRM representation is present for each type of CTDB data element. The “N” stands for Native, meaning the data is mapped directly into SEDRIS. The “D” stands for Derived, meaning the data had to be derived from what was stored in CTDB by the CTDBtoSTF software.CTDBFeatureGeometryElevation/Soil GridDTriangular Irregular NetworksNMicroTerrainNCanopy PolygonsNTreesNDTree LinesNDLaid Linears (Roads and Rivers)NDVolume ModelsNDMulti-Elevation StructuresNNAbstract Features (Canopy, Railroads, etc.)NTable 5 CTDB Feature Mappings, "N" indicates the data is storage in the native structure, "D" indicates the data was derived from the source CTDBAll of the geometric data in the SEDRIS transmittal has color that is controlled through an external mapping file. This gives the CTDBtoSTF user the ability to manipulate how the geometric data should be rendered.Elevation and Soil Grid Derived GeometryAs an option, CTDBtoSTF can generate a polygonal version of the grid data. At each post, two triangles are generated based on the diagonalization, soil indices and elevation posts. See Figure 6 below, for a graphical representation of how the triangles are generated.  The triangles are stored as <Polygon> objects which will then contain the <Property Table> components that contain it attributes. EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 6 Grid DiagonalizationPhysical Feature Derived GeometryThe CTDB Physical Features (Trees, Tree-Lines, Laid-Linear and Volume Models) can be used by the CTDBtoSTF software to generate polygonal representations. The CTDB Trees will be used by CTDBtoSTF to create a single <Polygon> that has a <Stamp Behavior>. The Tree-Lines are converted into vertical <Polygons>. Laid-Linear information is used to create <Polygons> that lay flat on the terrain. Finally, CTDB Volume Models are used to create <Polygons> representing the enclosure’s walls.  The application takes advantage of yet another DRM concept, representational polymorphism.  In other words, the application provides two different representations for the same environmental phenomenon.  This is successfully accomplished by creating the associate relationships between the feature representation and the geometric DRM representations.  Hence, the associate relationship is created between the <Point Feature> objects representing trees and the <Polygon> object that has a <Stamp Behavior>.SEDRIS Object Sharing CapabilityTo minimize the size of the generated STF and to represent the topological connection among polygons more accurately, CTDBtoSTF effectively uses object sharing.  The two types of SEDRIS objects that are shared in CTDBtoSTF are <Classification Data> and <Vertex>.<Classification Data> objects are shared throughout the entire database. The same <Classification Data> is used in one patch at least twice (one for features and the other for geometry). For instance, in the case that a transmittal has 10,000 patches, where each patch has data that is classified as ECC_TERRAIN. Sharing this object saves the storage requirements of 9,999 objects.<Vertices> are shared within each patch and only among objects of the same type. Thus, within a patch, TINs will share <Vertices> among the mesh, but TIN <Polygons> will not share <Vertices> with MicroTerrain, Canopy, or any other <Polygons>.  By sharing these objects almost two thirds of the objects can be shared, thus reducing considerable storage space.Configuring CTDB typesThe CTDBtoSTF application uses an external file to map CTDB types to SEDRIS EDCS codes.  It does not use hard-coded values from within the software. This is important because CTDB has been overloaded through the years to represent different things than those originally specified.  For instance, an infrequently used trafficability code might be used for a specific meaning for a subset of the community. By making the mapping file editable, users can specify specific EDCS codes that make the most sense for their CTDBs.The mapping file is used to map soil attributes, feature classifications, RGB colors and property values.  This is the format for a typical line in the mapping file:CTDB Feature Type	Soil Type	ECC	R G BWhere the CTDB Feature Type is one of the types defined in CTDBtoSTF, such as LAID_LINEAR or TERRAIN. The soil type is an integer number ranging from 0 to 4, each indicating a different soil type, as shown below:0	:	Default1	:	Water2	:	No Go3	:	Slow Go4	:	RoadIn the example below, a CTDB Laid Linear that has soil type 1 is mapped to the ECC concept: ECC_RIVER_OR_STREAM (code 860).  While a CTDB Laid Linear that has a soil type of 4 is mapped to the ECC concept: ECC_ROAD.LAID_LINEAR 	1	860	0.1, 0.1, 0.7LAID_LINEAR	4	866	0.8, 0.7, 0.5Derived Geometry ColorThe colors that are specified for the derived <Polygons> are also specified in the CTDBtoSTF mapping file. For example, in the Laid Linear example above, the last three values in the line represent the red, green and blue values respectively. For the Laid Linear entry, representing the river, an appropriate bluish color is chosen as the default.PerformanceThe chart below presents statistical information for a variety of source CTDBs. The chart reports the source CTDB size, the resulting STF size, the size of the STF with derived geometry, and the conversion time.Database NameCTDB SizeSTF SizeDerivedGeom.STFSizeTimeBellevue84.5 KB60 KB429 KB4 sMcKenna583 KB470 KB563 KB6 sPhilly2.39 MB3.8 MB7.55 MB174 sNTC2.17 MB2.2 MB13.7 MB202 sHunter5.24 MB5.1 MB19.2 MB243 sBosnia9.61 MB13.4 MB57.1 MB542 sThe table above has two sections displaying the size of the resulting STF. The first section is the size when the conversion is run with the derived geometry options set to false (e.g. it does not create <Polygons> representing the elevation grid, in addition to the <Property Grid>). The second column includes all derived geometry options, which is why the size increases.  While the size of the STF is comparable to the CTDB, it is expected for STF to be slightly larger. This is due to the fact that CTDB is an optimized format where much of the data is stored within its organization, something that is unambiguously provided by the SEDRIS DRM.Planned EnhancementsGCS CTDBAt the publication of this document, the software was only missing one major capability, which will be added.  The CTDBtoSTF will support GCS (Global Coordinate System) CTDBs. The software will produce a separate <Environment Root> in the STF for each cell of the GCS database. Each <Environment Root> will store the appropriate cell ID in the SRF (Spatial Reference Frame).  It is important to note that the DRM supports the GTRS based GCS and the transmittals will only contain this type of data.  CTDBs with non-GTRS based GCS will also be handled, but stored correctly in the generated transmittal.Effectively using SEDRIS toolsWhile CTDB is a widely used SAF format, there are not many tools to examine and edit its content. However, there are a variety of SEDRIS applications that do just that with SEDRIS transmittals. The CTDB users can now take advantage of those SEDRIS tools by using CTDBtoSTF.  The following is a discussion highlighting some of the tools that can be used in conjunction with CTDBtoSTF.STFtoCTDBThe STFtoCTDB is a freely available application that creates CTDBs from SEDRIS transmittals.  For information on this application please refer to [3].  The CTDBtoSTF has been designed to work in tandem with STFtoCTDB.  Having a means to store the data back into CTDB is important to users of CTDBtoSTF.  It allows users to take advantage of the database editing SEDRIS applications (e.g. SEE-IT and Focus). After editing is complete, the user can convert the data back into CTDB for continued use.  This provides an effective mechanism for CTDBs to be corrected and expanded upon.FocusFocus is a freely available tool used to edit and correct STFs and for integrating editing capabilities for transmittals.  For more information of this tool refer to [4].  Focus contains both import from CTDB capabilities and export to CTDB capabilities.  After importing CTDB into STF, there may be many elements of the STF that would be useful to alter. It may be desirable to edit the attributes of a <Property Table> or fix an errant elevation value. By using Focus, these become simple, straightforward fixes.  Furthermore, Focus allows for further editing capabilities to be provided that can benefit greatly CTDB production.  For example, the ability to change the set of attributes for specific polygons or a set of polygons in the CTDB would be achieved through Focus.  Focus also allows the creation of smaller transmittals based on the same CTDB or the parsing of existing CTDBs.SEE-ITSEE-IT (Synthetic Environment Evaluation – Inspection Tool) is a freely available, powerful SEDRIS inspection tool.  SEE-IT can import and check the correctness of SEDRIS transmittals. It can detect conditions such a T-Vertices, Road-River Intersections, Geometric Duplicates and many others. Many of the detected conditions can also be automatically fixed by SEE-IT.Figure  SEQ Figure \* ARABIC 8 SEE-ITSince the accuracy of the CTDB data is vital to an accurate simulation, having the means to check the CTDB, indirectly, with SEE-IT is of major benefit. Anomalies in the database may go undetected without a tool like SEE-IT. Often, CTDBs are checked by using the SAF to check random points or having entities traverse the terrain. These verification tests are incomplete and require a man-in-the-loop. By using SEE-IT the entire database will be examined.SEE-IT can also correct many of the conditions that it detects in the SEDRIS database. Once these fixes have been made, the SEDRIS transmittal could be stored back in the CTDB, via STFtoCTDB. This process will give the user an improved CTDB.Side-by-SideThe freely available Side-by-Side (SbS) tool is designed to view, correlate and convert a variety of database formats. It can view the feature and geometric data in multiple databases simultaneously to find correlation issues. SbS uses a plug-in system. There are currently plug-ins to import SEDRIS, CTDB, OpenFlight, Performer, DTED, VRML and AcuScene databases. There are also plug-ins to export into OpenFlight and AcuScene.CTDBs are often used in conjunction with a separate database used by the visual system. Ensuring the correlation of these databases is necessary to have a fair-fight simulation (meaning the IG and SAF must use correlated data). By using SbS both formats can be imported and compared.  Figure 9 shows an STF created from CTDBtoSTF on the left and OpenFlight on the right.Figure  SEQ Figure \* ARABIC 9 Side-by-SideSince the CTDBtoSTF software can produce the derived geometry data (e.g. complete geometric volume models) it can be used to compare with existing visual representations of the CTDB.  Thus, a user would convert the CTDB into STF with all of the derived data.  The user would then import the STF and visual database (often OpenFlight) into SbS.  Then the user would use the features of SbS to find areas of the database that are not correlated.  Finally, the user would report these errors to the data producer or fix them with tools like Focus.ConclusionThis paper has discussed the CTDBtoSTF application and how to effectively use it in the M&S community. The mappings of CTDB into the DRM were discussed.  The capabilities, limitations, and performance of the CTDBtoSTF were presented.  The planned improvements and enhancement to the application were provided.  The final discussion centered on providing a working model for the use of STFtoCTDB in conjunction with other SEDRIS tools.  Having a tool like CTDBtoSTF provides a mechanism to access, analysis, edit and convert CTDB by using SEDRIS as the mechanism of interchange. As the number of SEDRIS applications grows, CTDBtoSTF will continue to grow in utility.References[1] G. Lukes, P. Birkel: “Synthetic Environments, Final Technical Report”, sponsored by Defense Advanced Research Projects Agency, September 1998 (Document #98-5-3100)[2] J. Smith: “LibCTDB User Manual and Report”[3] K. Wertman, J. Campos: “Using STFs for CTDB Production”, Fall SIW 2002.[4] M. A. Pigora, D. Shen, J. Campos: “Innovating with SEDRIS Tools”, Fall SIW 2001.Author BiographiesANDREW TOSH is a Software Engineer with Acusoft.  He has been working on SEDRIS among other projects for the past three years.  His primary expertise is in environmental visualization.  Mr. Tosh graduated from the University of Central Florida with a B.S. in Computer science.  He can be reached at 13501 Ingenuity Drive, Suite 200, Orlando, FL 32826, 407-658-9888, tosh@acusoft.comJESSE CAMPOS is a Software Engineer with SAIC.  He has been working the SEDRIS project for almost four years.  His primary expertise is in software development as it applies to databases.  Mr. Campos graduated from the University of Central Florida with a B.S. in Electrical Engineering.  He can be reached at 12479 Research Parkway, Suite 600, Orlando, FL 32826, 407-207-2796, FAX 407-381-8436, Jesse.J.Campos@cpmx.saic.com.Figure  SEQ Figure \* ARABIC 5 CTDBtoSTF ArchitectureCTDBtoSTFCTDBtoSTF Conversion LibrarySTFCTDBSEDRIS APILibCTDBMappingFile