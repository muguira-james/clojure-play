APL Integrated Multi-warfare Simulation (AIMS): Providing Resource Conflict Resolution in Multi-Warfare Analyses Dr. Joseph Kovalchik and Mr. Jonathan W. LabinJohns Hopkins University Applied Physics Laboratory11100 Johns Hopkins RoadLaurel, MD  20723-6099240-228-6264 HYPERLINK "mailto:joseph.kovalchik@jhuapl.edu" joseph.kovalchik@jhuapl.edu,  HYPERLINK "jonathan.labin@jhuapl.edu" jonathan.labin@jhuapl.eduKeywords:HLA, FEDEP, integrated warfare analysis, multi-mission warfare, federation, conflict resolution, expert system, transfer of ownershipABSTRACT: This paper presents the details of the APL Integrated Multi-warfare Simulation (AIMS), which addresses the growing interest in the Defense community in the ability to perform multi-warfare analysis – analysis that crosses the domains of multiple mission areas.  Because of the complexity involved, previous efforts to conduct multi-warfare analyses have been conducted on carefully constructed scenarios, which has led to artificially stove-piped, single-mission-area–analyses.  These studies have avoided both the effects of competing resources across multi-warfare areas and the dependencies of one warfare area on another. 	Advances in the speed of computer hardware and in the development of interoperability standards for simulations have now made it possible to consider performing multi-warfare analysis by federating "best-of-breed" mission-level simulations into a single interoperable simulation operating across several networked computers.  The Johns Hopkins University Applied Physics Laboratory (JHU/APL) has developed such a multi-warfare simulation federation, using the High Level Architecture (HLA) standard developed by the Department of Defense.  AIMS federates the Extended Air Defense Simulation (EADSIM), the Naval Simulation System (NSS), and three APL-developed simulations: the Surface AAW Multi-Ship Simulation (SAMS), the Battle Force Engagement Model (BFEM), and Orbis.  AIMS is being used to simulate a tactical situation associated with multi-warfare naval combat in the littorals. A Commander Federate, utilizing an expert system, sets warfare priorities either by time or event, and provides inter-warfare area conflict resolution for asset allocation, and directs the transfer of ownership of assets from one simulation to another. Using AIMS, analysts will not only have the “best of breed” simulations for analysis of individual mission areas, but will also be able to examine the effects of one warfare area on another.IntroductionThis paper presents details on the APL Integrated Multi-warfare Simulation (AIMS) federation, which addresses the growing interest in the Defense community in the ability to perform multi-warfare analysis – analysis that crosses the domains of multiple mission areas.  Because of the complexity involved, previous efforts to conduct multi-warfare analyses have been conducted on carefully constructed scenarios, which has led to artificially stove-piped, single-mission-area–analyses.  These studies have avoided both the effects of competing resources across multi-warfare areas and the dependencies of one warfare area on another. AIMS is being used to simulate a tactical situation associated with multi-warfare naval combat in the littorals. A Commander Federate, utilizing an expert system, sets warfare priorities either by time or event, and provides inter-warfare area conflict resolution for asset allocation, and directs the transfer of ownership of assets from one simulation to another. Using AIMS, analysts will not only have the “best of breed” simulations for analysis of individual mission areas, but will also be able to examine the effects of one warfare area on another.Background There is an emerging need for analysis to be performed at the “multi-warfare” level, motivated by transition to “capabilities-based” acquisition, creation of multi-mission structures (e.g., Sea Shield), and the need to assess performance/effectiveness of multi-mission platforms (e.g., DD(X)). With the advent of multi-mission platforms, the ability to analyze the effectiveness of a given platform’s configuration as it simultaneously conducts multiple warfare missions while on station becomes imperative.  Because of the complexity involved, the tools to support interoperable, multi-mission warfare have tended to be campaign-level simulations – good for top-level analyses, but often lacking in the level of detail desired for simulating specific operational or tactical situations.  However, analysts in individual mission areas tend to prefer to use tools which provide more detail specific to those mission areas. Integrated multi-warfare analyses have been difficult to conduct in the past since no one model can be easily used to faithfully replicate the detailed warfare area treatments found in specialized mission-level simulations (e.g., AAW, ASW, SUW, MIW, etc.). In using mission-level models, multi-mission warfare analysis is usually conducted in a sequential manner by passing the output of one warfare area analysis as the input to the analysis of the next warfare area. When a series of “stove-piped” models are used independently (to do each of the warfare area analyses) for a common scenario, it is difficult to “integrate” the results. Manpower intensive procedures using off-line methods such as the “sneaker net” are frequently used. Figure  SEQ Figure \* ARABIC 1: Multi-Mission LayerThere is a gap in the analysis modeling and simulation toolset. Our general solution of adopting a new multi-mission layer is illustrated in  REF _Ref113183985 \h Figure 1. Project OverviewThe Johns Hopkins University Applied Physics Laboratory (JHU/APL) recently developed the AIMS federation which consists of several mission-level models preferred by analysts for their respective warfare areas using the High Level Architecture (HLA) standard developed by the Department of Defense.  AIMS provides the capability to:Incorporate simulations of choice based on the analysis task at handConsider the effects of competing resources across multi-warfare areas and the dependencies of one warfare area on another Provide a Single Point of Entry (SPE) for scenario dataCoordinate the execution of scenario runs and data collectionVisualize the scenario interactions, andAssist in post-run analysis Specifically, AIMS federates the Extended Air Defense Simulation (EADSIM), the Naval Simulation System (NSS), and three APL-developed simulations: the Surface AAW Multi-Ship Simulation (SAMS), the Battle Force Engagement Model (BFEM), and Orbis.  These simulations are described below in more detail.Federation Development SHAPE  \* MERGEFORMAT The AIMS federation was developed using the guidance found in the Federation Development and Execution Process (FEDEP) Model []. (See  REF _Ref114975871 \h  \* MERGEFORMAT Figure 2).  The High Level Architecture (HLA) Object Model Development Tool (OMDT) was used to document the Federation Object Model (FOM) [], [].AIMS ArchitectureThe architecture development began by examining a scenario drawn from an ongoing study that involved several mission areas. These mission areas included: air defense against cruise missiles (AD), surface warfare (SUW) against a small-boat attack, anti-submarine warfare (ASW), and theater ballistic missile defense (TBMD). After reviewing analysis tools resident at JHU/APL, we determined a core set of critical mission-level simulations which were preferred by our analysts for the above warfare areas. We then selected from this core set those simulations that were HLA-compliant or could be readily made so:  NSS version 3.3 .3[] and Orbis to analyze the SUW area; EADSIM version 11.0 [] to analyze the theater ballistic missile defense, SAMS to analyze the cruise missile attack; and BFEM version 1.4 to analyze the ASW mission.  REF _Ref113271565 \h Figure 3 shows the overall architecture of the federation. In order to capture the data from simulations runs, we selected hlaResults version 2.2.4. The data from the simulation runs is viewable using Microsoft Access to directly view the data collected in database tables. Figure  SEQ Figure \* ARABIC 3: AIMS ArchitectureFederates were connected using Run-Time Infrastructure (RTI) version 1.3 Next Generation Version 6.0 (RTI1.3NGv6) since this was the version of the RTI with which several models had been previously integrated. As all of these tools were available to run with the MS Windows operating system, we built the federation in an environment using a homogenous operating system (Windows) hosted on several PC platforms. Federate DescriptionsThe following is a brief description of each model/federate chosen. Battle Force Engagement Model (BFEM) is a Monte Carlo simulation (written in C) of Undersea Warfare (USW) engagements for both mine warfare (MIW) and anti-submarine warfare (ASW). It models the tactics, kinematics and performance of submarines, surface combatants, ASW aircraft, mines and individual off-board sensors. Extended Air Defense Simulation (EADSIM) was chosen to assess the effectiveness of Ballistic Missile Defense (BMD). It provides a many-on-many theater-level simulation of air and missile defense, an integrated simulation tool (written in C++) to support joint and combined force operations. Orbis was selected to model the SUW mission area. Orbis is a multi-sided, object-oriented, Monte Carlo simulation (written in Java) intended for a variety of maritime applications including defending against small-boat attacks. Surface AAW Multi-ship Simulation (SAMS) was selected to simulate the shipboard defenses against anti-ship cruise missiles. SAMS is a Monte Carlo event driven air defense system simulation (written in GPSS/H code) designed to evaluate multi-ship effectiveness. It uses results from high-fidelity models that provide performance data at the combat system level for sensors and weapons. Naval Simulation System (NSS) was selected to model various functions not adequately addressed by specialized combat models. NSS is a multi-sided, multi-warfare, object-oriented, Monte Carlo maritime simulation (written in C++) intended primarily for use by the analysis community in support of concept assessments and system effectiveness studies. The Commander federate uses the Java Expert System shell (Jess) engine [] to set warfare priorities and resolve resource allocation conflicts among warfare areas.  The details of the Commander federate are illustrated in the following section.Commander Federate DetailsIn the AIMS federation the Commander federate plays the role of the maritime Component Commander. The federation command structure can be seen in  REF _Ref113184188 \h Figure 4.  Each of the warfare area component commanders is mapped to one or more simulations. BFEM serves as the Undersea Warfare Commander (USWC) and the Mine Warfare Commander (MIWC); SAMS is assigned as the Air Defense Commander for anti-air warfare (ADC); EADSIM is assigned as the ADC for ballistic missile defense; Orbis is the Surface Warfare Commander (SUWC); and NSS (at present) provides commanders not covered above. At the center of the federation command structure is the Commander federate.  A Commander federate, utilizing an expert system, sets warfare priorities either by time or event, and provides inter-warfare area conflict resolution for asset allocation, and directs the transfer of ownership of assets from one simulation to another. The logical components of the Commander federate are shown in  REF _Ref113331717 \h Figure 5. Figure  SEQ Figure \* ARABIC 4: Federation Command StructureFigure  SEQ Figure \* ARABIC 5: Commander Federate ComponentsRule Engine and Rule SetsThe Commander federate uses the Java Expert System shell (Jess) engine to fire rules developed by subject matter experts.  Reading a text file containing a set of Jess rules that defines its behavior, the Commander federate can react to similar events in different ways by simply changing the rule sets without requiring changes to the source code.  In fact, behaviors can be defined for previously unhandled conditions in order to support new commander strategies or analysis needs.The Jess engine obtains information about the state of scenario from the Java federate wrapper through JavaBean technology.  A change to a property of a JavaBean within the Java wrapper causes the same property to be updated within the Jess engine.  This change causes rules to fire within the Jess engine triggering some response by the Commander.  Some examples of this use of Bean technology will be discussed in later sections.The available actions triggered by rules firing are easily implemented.  Many of the rules defined in the Jess rule file make use of user-defined functions programmed in Java.  This allows the Jess rules to perform actions such as sending HLA interactions, determining the relative position of a platform, or processing a queue of received HLA interactions.Federation ManagementIn the AIMS federation, the Commander federate is responsible for starting and managing various aspects of the HLA federation.  After creating and joining the federation, the Commander registers the synchronization points: initialization and execution. These are used later by the federation to perform coordinated initialization.  However, due to the nature of HLA synchronization points, one or more joined federates could race ahead and begin execution of the scenario before all of the simulations have joined.  To avoid this behavior, the Commander federate abstains from achieving the first synchronization point until all expected federates have joined the federation.  The expected number of federates is set in the Commander’s configuration file.  During execution of the scenario, the Commander has the ability to pause the federation or move ahead only one unit of time similar to a frame-by-frame function of a VCR.  This functionality was used during development to ensure HLA messages were sent or received at appropriate times and was also useful during the execution of a scenario to assist in visualization of complex interactions.The Commander federate also initiates shutdown and cleanup at the end of the simulation.  The rule sets currently defined for the Commander federate can determine that the scenario has ended by various mechanisms:The simulation has executed to a specified simulation time limitA named High Value Unit has been destroyedA named High Value Unit has crossed a specified geographic “finish line”All red platforms have been destroyedAll blue platforms have been destroyedAlthough these are the currently defined triggers for shutting down the federation, the rule set can be extended to shut down on virtually any condition. When a simulation ending criterion is met, the Commander sends an HLA interaction informing all federates that the simulation has ended.Damage AssessmentAll simulations publish the location of the blue forces that they own so that other simulations in the federation may model attacks on those blue forces.  Because red weapon hits on blue platforms may occur across warfare areas, a design decision was made to have the Commander federate adjudicate the damage incurred. The Commander federate is told of such a hit through an HLA interaction.  The Commander determines the damage experienced and sends an HLA interaction in response.  This is one of the places where the Commander federate uses a JavaBean to inform the Jess engine of what has occurred.  When sending a damage assessment interaction, the Commander creates a DamageAssessmentBean object and registers it with the Jess engine.  Jess rules are written such that the updated properties of such a DamageAssessmentBeans will trigger behaviors.  In the current rule set, these beans cause changes in the current warfare priorities as discussed later.Common Operational PictureIn order to behave realistically, the Commander federate forms a Common Operational Picture (COP) based on the reports from blue platforms rather than the ground truth locations for red objects.  When a simulation successfully detects a red platform using the sensors of a blue platform, it sends a contact report interaction.  The contact reports from all simulations collectively form the COP maintained by the Commander.  For each new unique contact report, a new ContactReportBean is created and registered with the Jess engine.  If a received contact report matches a previous report in the tracking object, sensor type, and classification of the contact, then the contact report is considered an update and the existing ContactReportBean is updated with the new values.The Jess engine reacts to contacts through rules referencing ContactReportBeans.  These rules consider the range of the contact, the time since the contact was last reported, and the classification/activity of the contact in order to set priorities of different warfare areas.Set Warfare PrioritiesThe previous sections gave examples of rules that set priority values for different warfare areas.  Each of the rules that fire proposes a new possible value for the priority of a certain warfare area.  Even if no priority setting events occur, there are baseline rules that propose priorities based on simulation time and geographic location of key platforms. The Commander collects each of these proposals and picks the highest priority proposal for each warfare area ( REF _Ref114974582 \h Figure 6).  If the priority of one of the warfare areas is raised above a threshold set in the rules, the Commander federate sends an HLA interaction to indicate a change in Rules Of Engagement (ROE). The simulation begins in a state of Peacetime.  As soon as the priority of one warfare area is raised above the first threshold, the Commander federate declares a state of Crisis.  Above the next threshold value, the Commander declares Wartime.  This mechanism limits engagement within the federated simulations until a multi-warfare assessment of the state of the simulation indicates it is necessary.  As with all Commander rules, these threshold values can be changed in the rule set file.   Similarly, new rules can be created to set warfare priorities based on different triggers.  The next sections describe additional ways that these priority values are used by the Commander. Figure  SEQ Figure \* ARABIC 6: Set Warfare PrioritiesProcessing RequestsThroughout the execution of the scenario, some simulations may find that the use of assets, in addition to those initially assigned to it in the scenario, will increase the effectiveness of the blue forces.  At any time, a simulation may request the ownership of an additional platform by sending an asset request interaction. Also, to perform an emergency evasive maneuver, a simulation can request temporary ownership of a specific blue platform with a named asset request interaction.  Each of these requests are processed by the Commander federate and given a response.  The order of processing these requests is dictated in part by the warfare area priorities described in the last section.  Requests originating from a warfare area with higher priority are processed first.  This ordering ensures that filling a request from a lower priority warfare area will not obstruct requests of a higher priority warfare area.Figure  SEQ Figure \* ARABIC 7: Asset RequestsSimulations can request ownership of blue assets originally provided to other simulations in the scenario definition.  The Commander federate considers each request and sends a corresponding Grant message indicating the status of the request as either GRANTED, PENDING, or DENIED ( REF _Ref114978332 \h Figure 7). The Commander relies on readiness report messages for status information of each transferable asset.  This status, along with the location of each potential asset is used in determining if the request is granted. The most important factor while processing an asset request is the relative warfare priorities.  An asset with a ready status can be transferred from any warfare area to any other.  However, assets that are currently assigned to a mission within their simulation can only be transferred away from that mission by a higher warfare area request.  Each simulation is allotted a minimum complement for each asset class.  The Commander will not grant a transfer of ownership for an asset if it reduces number of assets below the current owner’s minimum for that asset class.If the Commander grants an asset request, the losing and gaining federated simulations negotiate a transfer of ownership through defined HLA interface calls.  After the transfer is complete, the new owner of the asset sends a readiness report to finalize the assignment change within the Commander and to provide any new status information ( REF _Ref114975622 \h Figure 8).  The new owning simulation must now update the attributes of this object each time they change.Figure  SEQ Figure \* ARABIC 8: Transferring AssetsIn addition to the asset requests, a simulation may request a change in maneuvering ( REF _Ref114975765 \h Figure 9) constraints with a request to:Change the area assignedChange a course or speed restrictionOperate independentlyFigure  SEQ Figure \* ARABIC 9: Maneuver RequestsFederation ExecutionThe purpose of this step of the FEDEP is to execute the federation, process the output data from the federation execution, report results, and archive reusable federation products. Execution is coordinated through a combination of APL Distributed Scheduler (ADS) and the use of synchronization points. The goal of the ADS is to increase number of federation runs which can be completed in a given time period. As shown in  REF _Ref113330142 \h Figure 10 multiple federations run concurrently. Because we used a homogenous set of windows operating system computers, we were able to take advantage of the Windows Management Infrastructure (WMI) and windows domain authentication. The federation runs are defined in an XML format. During execution, ADS allocates work to potential computing assets maintained in a queue of available resources. This queue can be constructed by ADS automatically by crawling the network.  Data collection focused on assembling the desired set of outputs and on collecting additional supporting data.  These outputs were then recorded to a central location for later analyses. The processing of output data involved the application of appropriate statistical measures and other data reduction methods to transform raw data into derived results using commercial off-the-shelf (COTS) statistical analysis tools.Figure  SEQ Figure \* ARABIC 10: Multiple Federation ExecutionFuture WorkOur future work will involve the addition of other models, developing a single point of scenario entry (i.e., a common database from which to extract scenario information for each model), improving 3D visualization of playback, and providing additional performance optimizations. Now that the core of the AIMS federation is complete, adding other models to this federation will take proportionally less time and effort. Which models to add is determined by the requirements of the underlying study.  Expanding on the theme of conflict resolution at the platform level, we intend to provide conflict resolution on weapon and sensor systems. As shown in  REF _Ref113273383 \h Figure 11 the Commander’s rule set and FOM can be expanded to allocate a weapon system or sensor system to a requesting warfare area commander when conflicts arise. In addition, the Commander federate’s responsibilities will be expanded to include general force motion, constructing motion plans to optimize sensors, and producing water/air management assignments.Figure  SEQ Figure \* ARABIC 11: Future WorkIn addition, the Commander’s rule engine will be changed to use the FuzzyJess [] extension to Jess. While the fuzzy rules for setting warfare priority have been developed and tested outside of the federation, they have not been used in any analysis to date. Rather than choosing the most threatening single event to set the warfare priorities as is done today, fuzzy sets will be used to accumulate the contributions of each event through a summing of the consequent for each warfare area and then normalizing across all warfare areas. In this case, we use the Mamdani rule executor, the minimum antecedent combine operator and the sum global contribution operator. Here is an example of the one of the fuzzy rules developed to set the ASW priority. If the range is short and the time since the event is short then set the ASW priority to Very HighThe antecedents of range and time since can be seen in  REF _Ref114040081 \h Figure 12 and  REF _Ref114040096 \h Figure 13, respectively. The consequent for each event is shown in  REF _Ref114040804 \h Figure 14. Once each event associated with a particular warfare area is processed, the contributions for this warfare area are summed. All warfare area priorities are then normalized before the relative ranking is set. This method results in smoother transitions between the highest priority warfare areas and accounts for the weight of each individual event. Once the warfare areas are set, the processing of requests continues as stated above.Figure  SEQ Figure \* ARABIC 12: Range Fuzzy VariableFigure  SEQ Figure \* ARABIC 13: Time Since Fuzzy VariableFigure  SEQ Figure \* ARABIC 14: Warfare Priority Fuzzy VariableSummary This paper presented details on the AIMS federation and its use of Commander federate and transfer of ownership to resolve asset allocation conflicts across multiple warfare areas. Providing a flexible architecture to conduct analysis on the execution of integrated warfare in multiple mission areas, AIMS can add value to multi-warfare analysis. A Commander Federate, utilizing an expert system, sets warfare priorities either by time or event, and provides inter-warfare area conflict resolution for asset allocation, motion plans, and (in the near future) weapon and sensor allocation among warfare area commanders. AIMS offers several advantages. First, it eliminates sequential, time-consuming data transfers between “stove-piped” single-warfare analysis simulations when conducting multi-warfare studies. Second, it enhances integrated warfare analysis through selective use of appropriate simulations which have been used in individual warfare area analyses. Third, it focuses several warfare areas to a common scenario selection across all warfare areas. Fourth, it preserves the ability for each model to be used in a stand-alone mode. Fifth, it streamlines development of three-dimensional visualization of common OPSITs/TACSITs. Last, the Single Point of Entry reduces duplication of effort and data entry errors by using a single interface for scenario creationAcknowledgementsThis paper reports on the contributions of many individuals to which the authors are grateful. Requirements for AIMS and the Commander federate rules sets were provided by John Benedict, Paul Gulotta, Mike Morris, Ted Smyth, and Joe Kovalchik. The tactical situation was developed by Matt Scarlett. The Commander federate design, implementation integration and testing was conducted by the authors. Combat Model software modifications and scenario development were provided by:Orbis (Eric Hu, Dennis Patrone, Todd Warfield)SAMS (Kay Stuckey, Ben Kerman)BFEM (Ian Craig, Trey Vecera)HLA Wrapper for Orbis (Labin, Kovalchik, Todd Warfield)HLA Wrapper for SAMS (Chris McDonald, Labin, Kovalchik)HLA Wrapper for BFEM (Labin, McDonald)RTI Infrastructure and ADS (Bruce Miller)	NSS (Steve Lange)EADSIM (Kanaya Chevli, Ken Ryals)SPE testing (John Schloman)ReferencesApproved for Public Release: Distribution is Unlimited[]	High Level Architecture Federation Development and Execution Process (FEDEP) Model, Version 1.5, Defense Modeling and Simulation Office, 1999.[] High-Level Architecture Object Model Template Specification, Version 1.3, 5 February 1998.[] High-Level Architecture Object Model Template Specification, Version 1.3, 5 February 1998.[]	Naval Simulation System (NSS v3.3), Space and Naval Warfare Systems Command (SPAWARSYSCOM), PMW-153, 31 August 2002.[5]	Extended Air Defense Simulation Methodology Manual, Version 11.00, May 2002.[]	Jess, The Rule Engine for the Java Platform,           HYPERLINK "http://herzberg.ca.sandia.gov/jess" http://herzberg.ca.sandia.gov/jess, Ernest J. Friedman-Hill, Distributed Computing Systems, Sandia National Laboratories, Livermore, CA, Version 6.1p8 (23 March 2005).[]	 NRC FuzzyJ Toolkit for the Java(tm) Platform, User's Guide, Version 1.5a, Integrated Reasoning Institute for Information Technology, National Research Council Canada, R. A. Orchard , May 23, 2003.Author BiographiesDR. JOSEPH G. KOVALCHIK is a Senior Professional at the Johns Hopkins University Applied Physics Laboratory. His experience spans both academia as Chairman of the Computer Science Department, U.S. Naval Academy and industry, as Director of Software Development.  While at JHU/APL, he has been involved in the development of automated reasoning systems and is currently a member of the Modeling and Simulation Group.  Dr. Kovalchik received a B.S. degree in Mathematics from the U.S. Naval Academy and an M.S. and Ph.D. degree in Computer Science from the Naval Postgraduate School, Monterey, CA.MR. JONATHAN W. LABIN is a Software Engineer at the Johns Hopkins University Applied Physics Laboratory.  Mr. Labin has developed several HLA federations including the Human Exercise Federation. In addition, he has evaluated several commercial RTIs with respect to their compliance with regard to both HLA 1.3 and HLA IEEE 1516 standards. In 2003, he received a degree Magna Cum Laude in Computer Science at the University of Maryland Baltimore County.Figure  SEQ Figure \* ARABIC 2: Six-Step FEDEP