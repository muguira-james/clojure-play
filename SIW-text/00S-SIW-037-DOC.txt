Towards Verification and Validation of an Advanced Distributed Simulation Abstract Model (ADSAM)Pauline A. WilcoxAlbert G. Burger  Department of Computing and Electrical Engineering Heriot-Watt University  Edinburgh, UKP.A.Wilcox@hw.ac.uk, ab@cee.hw.ac.ukPeter HoareDefence Evaluation and Research Agency (DERA)Malvern, UKpeteh@signal.dera.gov.ukKeywords:Abstract Model,  Advanced Distributed Simulation, High Level Architecture.ABSTRACT: The High Level Architecture (HLA) is the latest architecture development in the field of Advanced Distributed Simulation (ADS). The HLA has greatly increased the potential capabilities, complexity and scale of ADS by allowing diverse simulations to take part in increasingly larger exercises. Such benefits come at a price and HLA federations are time consuming and costly to develop. This paper reviews work in development of an abstract model of an ADS. We refer to this model as Advanced Distributed Simulation Abstract Model (ADSAM). The aim of ADSAM is to allow key concerns of an HLA federation to be evaluated on a more abstract level i.e. without having to actually implement the HLA federation first. The focus of the ADSAM is on the abstract representation of three key components: federation participants (i.e. federates), the communication space and communication mechanism.Verification and Validation (V&V) of the ADSAM is non-trivial. This paper describes the use of a modified version of the Department of Defense (DoD) HLA test federation FoodFight for V&V of the ADSAM. The modified version of FoodFight is referred to as FoodFightM. Measurements were taken from executions of FoodFightM and compared to results obtained by running simulations of the corresponding ADSAM model. A summary of these results is included in the paper. We conclude with a summary of the benefits and limitations of the use of FoodFightM in V&V of the ADSAM. Future work is described which considers applications of the ADSAM beyond investigating federate communication patterns.1. IntroductionThe potential capability and complexity of Advanced Distributed Simulation (ADS) is expanding. This is particularly evident with recent work on the Defense Modeling and Simulation Office (DMSO) High Level Architecture (HLA) initiative [1].In this increasingly complex environment it is difficult, if at all possible, to evaluate certain issues without first constructing a particular ADS and conducting one or more experiments. We may, however, be able to investigate certain issues by abstracting away from application and implementation specific details. Such an abstraction allows us to focus on factors concerning the behaviour of the real federation. One such factor concerns the communication patterns. By examining the pattern of communication between federates, and how the pattern varies during the federation execution, we can learn a great deal about the real federation itself. This may help identify potential bottlenecks affecting performance and scalability of the federation. It may also help evaluate options for data collection, an important consideration in federation design [2,3,4]. It may be costly and time consuming to experiment with the real federation to investigate communication patterns. It may in fact be impossible if the federation has not yet been developed. In this paper we introduce an abstract model of an ADS. This abstract model will be referred to as Advanced Distributed Simulation Abstract Model (ADSAM). Since an ADS is itself a model this results in ADSAM being a model of a model.  Using ADSAM it is possible to construct an abstract representation of an  ADS. The resulting abstract ADS can then be executed and we can examine the federate communication patterns through the abstract model. We anticipate that ADSAM may benefit various stages of federation development, from design through to execution and evaluation. It could be used in a predictive role prior to federation construction to examine possible configuration options. Alternatively, it could be used in an explanatory role to examine certain behaviour of the federation once executed, for example to examine the impact of possible changes to the federation composition or configuration.It is worth a note on terminology at this point. Due to the abstract nature of ADSAM we tend to prefer to use the term ADS rather than HLA. We do, however, use the terms federation and federate which although associated with the HLA are applied in an increasingly wider sense.The ADSAM model is composed of a number of levels. In section 2 we introduce the basic level which we refer to as the core ASDAM. We describe the core ADSAM components, input and output parameters and review basic assumptions. Section 3 introduces the HLA test federation FoodFight. We describe the behaviour of the basic program and  then detail modifications we have made. This modified version is referred to as FoodFightM. Section 4 describes the use of FoodFightM to conduct initial verification and validation of the core ADSAM. We describe experiments conducted using FoodFightM and the results of certain corresponding experiments conducted using ADSAM.In section 5 we discuss future work, which is primarily concerned with extensions to the core ADSAM. These include a number of currently planned extensions and additional possible extensions. We describe ADSAM as a family of models with the core being extended to provide additional, or alternative, functionality depending on what we wish to investigate. Finally, section 6 presents a conclusion to the work in this paper.2. ADSAM DescriptionADSAM is an abstract model of the participants and the communication infrastructure. It does not represent a particular ADS instead it presents the building blocks to allow an abstract ADS to be constructed. Since that which we are abstracting is itself a model, ADSAM represents a model of a model. Figure 2.1 illustrates the notion of different levels of abstraction. The core ADSAM is shown to fit somewhere between the two extremes of most abstract and most concrete. We require ADSAM to be sufficiently abstract to avoid application and implementation specific issues (unless we chose to introduce certain issues). We also require ADSAM to be sufficiently concrete such that we can relate it to the real world. Figure 2.1 Levels of AbstractionIn figure 2.1 we choose to show the core ADSAM at a certain level of abstraction. We then consider extensions to the core, which may introduce increasingly implementation specific detail. We shall discuss these extensions later in section 5. In this way the ADSAM can be regarded as a family of models. The focus of this section is to describe the core model, which consists of the basic components and the mechanism by which they will interact. In the core ADSAM we are interested in representing those features and characteristics of ADS which most influence the communication patterns between federates. In the core model our interest focuses on  communication between the federates as we consider this accounts for the majority of network traffic. Figure 2.2 ADS ComponentsIn figure 2.2 we can see the basic components of an ADS. We see a number of federates connected to a local LAN, each LAN connected to a WAN via a number of network interconnects or gateways (marked G). From the point of view of the core ADSAM we are interested in representing the behaviour of the federates and the degree to which they interact. This leads us to introduce the three components in the core ADSAM. These are the participants, the communication space and the communication mechanism. These are illustrated in figure 2.3 and discussed in detail in subsection 2.1. Subsections 2.2 through 2.4 describe the model parameters, assumptions and implementation.Figure 2.3 Core ADSAM Components2.1 Core ADSAM ComponentsThe participant is an abstract representation of the ADS federate. The focus is on the behaviour of the federate and the degree to which federates interact with one another. We describe this through a federate profile [3,4]. The communication space provides an abstract representation of the communication infrastructure i.e. how the messages will be filtered. The communication mechanism concerns how the participants utilise the communication space to send and receive messages.2.1.1 ParticipantsThe participant is represented by a federate profile        (previously introduced as a federate data profile in [3,4]). The profile describes the behaviour of the federate, and may be regarded as representing a federate type. Our interest is in characteristics of the participant that influence the extent to which it will communicate with other participants and consequently the extent to which it will contribute to network traffic during the federation execution. The federate profile therefore defines the set of message types that a federate will publish and the rate at which it will do so. It also defines the set of messages that a federate may subscribe to and the rate at which subscriptions may change (subscription changes are discussed further in 2.1.3). A further distinction concerns whether a federate is more of a consumer or producer of data. In early work towards developing ADSAM [3,4] we describe how these characteristics lead us to define five basic federate profiles: Fast Entity, Slow Entity, Stealth, Dynamic Terrain and Weather federate profiles.As far as message types are concerned our interest is in representing communication between federates (as opposed to communication with the RTI). In [3] we therefore identified a common set of message types (for our suggested five federate profiles) as communication, update, interaction and environmental. We emphasise that ADSAM is not limited to representing the five profiles and four message types listed here. These are merely for illustrative purposes of what we mean by a federate profile and message type.2.1.2 Communication SpaceA message type is associated with its own abstract representation of a communication space (cSpace). A cSpace may have one or more dimensions. When a participant sends or receives a message that message will be routed through the cSpace appropriate for the message type. In this way the cSpace provides a simple class based filtering  mechanism similar to the HLA Declaration Management (DM) group of services [1,5].A cSpace is divided into one or more communication streams (cStream). A cStream  belongs to one cSpace only and covers a particular section of that cSpace. The cStreams cover the entire cSpace and do not overlap. The area covered by a cStream is determined by a range in each dimension of the cSpace. For the core ADSAM we assume that the increment in each dimension is uniform which results in uniform granularity of the cSpace (i.e. cStream are uniform in size).At a higher level the cSpace is subdivided into a number of communication regions (cRegion). The cRegion represents a set of cStream. A cStream may belong to one or more cRegions within the same cSpace and in this way cRegion within the same cSpace may overlap. The cRegion provides an additional level of filtering similar to the instance filtering of the HLA Data Distribution Management (DDM) group of services [1,5].Figure 2.4 cSpace relationship with  cStream and cRegionThe relationship between cSpace, cStream and cRegion is illustrated in figure 2.4. There is a strong parallel with the ADSAM communication space and the use of routing spaces and regions in the HLA Interface Specification [1]. The cStream concept is arguably similar to the concept of streams introduced in the Synthetic Theatre of War (STOW) 97 exercise [6,7]. However, due to the abstract nature of ADSAM, we choose slightly different terminology to avoid too many assumptions about the level of detail being modelled.Figure 2.5 Illustration of 2D cSpaceTo clarify the level of detail represented in the core ADSAM consider figure 2.5. This illustrates a cSpace of two dimensions (d1 and d2) which is uniformly divided into 64 cStreams. Two cRegions are shown, cRegion1 and cRegion2. If we assume that cRegion1 is used by a particular federate for update and cRegion2 is used for another federate for subscription, then the overlap determines the degree of communication between the two federates.It is important to note that we do not represent the position of any simulated entities or objects. The use of dimensions and placement of cRegions is necessarily abstract. 2.1.3 Communication MechanismIn this subsection we describe how a participant federate uses the communication space in order to send and receive messages. From its federate profile a participant knows the types of message it will publish (send) and subscribe to (receive). Within a particular configuration of ADSAM a participant will be allocated a corresponding set of cRegion. A participant will have a cRegion for each message type it will publish (referred to as a pRegion) and a cRegion for each message type it will subscribe to (referred to as an sRegion). The types of message of interest are indicated by the federate profile; but the allocation of pRegion and sRegion is at the participant level. The communication mechanism for the core ADSAM works as follows:Publication: A participant generates a message of a particular type. The message will be sent to the pRegion allocated to that participant for the type of the message. The pRegion will determine which of its member cStream will be used to communicate the message. Only a single cStream will be chosen and the default behaviour for the core ADSAM is that the choice will be random. The message will subsequently be received by those participants who are subscribed to that cStream.Subscription: When a participant federate is allocated a particular sRegion that sRegion will ensure that the federate is subscribed to each of its member cStream. Consequently, any message sent to a cStream will be received by all federates subscribing to that cStream.Given this description of the communication mechanism the situation in figure 2.5 would result in approximately 25% of all updates published via cRegion1 being received by a federate subscribing to cRegion2.  Finally, a point regarding changes in subscription. In the core ADSAM we assume that there are no changes of subscription during the federation execution. What this means is that the cRegions are static. Once defined at the outset of the federation execution the cRegions do not change. Furthermore, a federate does not change which cRegion it uses for publication or subscription. Once a federate as been allocated cRegions for publication and subscription it will continue to use those cRegion for the duration of the execution. In a real HLA-type ADS it is possible that regions will change during a federation execution. Region management is an important factor in HLA data filtering [5,8,9]. It is possible to explore the impact of subscription changes through different region management schemes as an extension to the core ADSAM. This is discussed in section 5.2.2 ADSAM ParametersThis subsection summarises the input and output parameters of the core ADSAM. The input parameters allow us to vary the configuration of the particular ADS represented. The output parameters provided statistics monitoring of the message counts at various levels of detail to allow analysis of federate communication patterns.2.2.1 Input ParametersA full description of input parameters is outside the scope of this paper. Instead, we provide a summary of the key input parameters in table 2.1. In addition to the parameters in table 2.1, we specify the number and connectivity of ADS components described in figure 2.2. For example, the number of networks and the number of federates per network. The number of gateways is also specified and the network connectivity (this defines the network topology). 2.2.2 Output ParametersThe interest in the core ADSAM is to explore the federate communication patterns. Consequently, the output from the model concerns counts of messages. The output parameters are described in table 2.2.PARAMETERDESCRIPTION<numMsgTypes>The number of message types represented in the configuration<numProfiles>The number of federate profiles in the configurationParameters per Message Type (defines associated cSpace)<numStreams>The number of cStream <numRegion>The number of cRegion <numDimension>The number of dimensions Parameters per Dimension<minVal>Minimum value<maxVal>Maximum value<increment>Increment in dimension (used to allocate to cStream)Parameters per cRegion (per cSpace Dimension)<minVal>Minimum value (in each dimension)<maxVal>Maximum value (in each dimension)Parameters per Federate<federateProfile>Each federate is allocated a single federate profile<pRegion>Each federate is allocated a cRegion in the corresponding cSpace for each message type it will publish (given by its federate profile)<sRegion>A federate is allocated a cRegion in the corresponding cSpace for each message type it will subscribe to (given by its federate profile)Table 2.1 Summary of Input Parameters 2.3 AssumptionsIn the core model we are not concerned with performance criteria. Consequently, we assume there are no CPU or other performance limitations of federates. We also assume that network and gateway resources are unlimited and error free. We appreciate this view is limited and this is a further extension to the model we may consider. As far as the communication mechanism is concerned we assume what may be described as reliable multicast; whereby messages are only received (and therefore counted) by intended recipients. Our interest in the core model is to focus on the main factors influencing communication patterns. The source of the majority of network traffic are the messages exchanged between federates as part of the federation execution. This is distinct from the communication between a federate and the RTI, which is concerned more with management of the interaction. We consider the latter to be a factor of interest more for performance analysis. Since we are not interested in performance analysis in the core ADSAM we do not represent the communication between the federate and RTI.PARAMETERDESCRIPTIONParameters per Network <numSent>Total number of messages originating on this network<numReceived>Total number of messages handled by this network (i.e. the sum of numSent and the number of messages received via other networks)<numTrashed>Total number of messages that were undeliverable, either because there are no subscribers to the cStream to which a message was published or if the only subscriber is in fact the originator of the message. Parameters per Federate<numSent>Total number of messages sent (published) by  a federate<numReceived>Total number of messages received by a federateTable 2.2 Summary of Output Parameters2.4 ImplementationThe core ADSAM model has been implemented as a simulation in C++ using CSIM18 [10]. Given that ADSAM itself represents a model of a model, this implementation leads to a simulation of a simulation.3. The FoodFight HLA Test Federation ADSAM does not represent a particular ADS, but rather a framework to construct an abstract representation of an ADS. Consequently, verification and validation (V&V) of the ADSAM is difficult, since we do not have a single source of data in the real world which we can use. As a starting point to gain confidence in the ADSAM we required a simple ADS, whose configuration was known and from which we could collect data. This lead us to examine the DoD HLA test federations which are available as part of the RTI download package via the HLA Software Distribution Center [11]. We downloaded RTI 1.3 version 6.Our requirement was to choose a federation with a diverse mix of message types and varied data filtering (so use of the DDM and DM RTI services was desirable). The FoodFight test federation was chosen as most suitable for our purposes. In FoodFight a federate simulates one or more student objects. Each student in a FoodFight federate exhibits phases of behavior. The first phase concerns purchasing units of food, which form ammunition. The second phase concerns each student object targeting another student in the federation and throwing a unit of food at that student.3.1 Basic OperationFoodFight involves a variety of RTI services: DDM, DM, Object Ownership and Time Management. The basic operation of FoodFight is illustrated in figure 3.1.  Key features are described below:Single Federate Type: a single federate type whose purpose is to simulate one or more student objects. Attributes: each student object has three attributes. With reference to figure 3.1 these are shown as moneyUnits, foodUnits and cleanliness. Initially the moneyUnits is set to 20, foodUnits to 0 and cleanliness to 100. The value of moneyUnits determines the length of the purchase phase. On each iteration of the purchase phase the moneyUnits attribute is decreased and foodUnits increased. During the interaction phase the foodUnits are decreased with each iteration. Each student object that is targeted, and therefore receives a throw interaction, will have its cleanliness reduced by 10. A student object is deleted when its cleanliness is reduced to 0 or the federate itself is removed from the federation execution at the end of the interaction phase when all ammunition is used. Fixed Execution: The FoodFight program operates around a simple loop which has 30 iterations hardcoded. 20 of these iterations form the purchase phase and the remaining 10 form the interaction phase.Message Types: A federate has three types of message:Radio: radio communication is a federate level activity in FoodFight. Federates communicate via radio channels (implemented using the DDM RTI services). By default all federates listen and send to the same channel.Update: an update is sent by a federate for each student object it simulates. Each update details changed values of each of the three attributes (moneyUnits, foodUnits and cleanliness) as appropriate. Updates are communicated via the DM RTI services.Interaction: throw interactions are sent by each student object that a federate simulates. A student object can target another student object. Sending a throw interaction reduces a student’s ammunition supply (foodUnits) and receiving one decreases a student’s cleanliness. Interactions are communicated using the DM RTI services.Targeting Mechanism: A federate regards the objects it is simulating as local and all other objects as remote. Each federate knows about all student objects in the federation. This information is held in an array. The order of the objects in the array is determined by the order in which the student objects were discovered (in the case of remote objects) or created (in the case of local objects). When sending an interaction a federate chooses to target the first remote object in the array. Once a target is chosen, a federate will target that same student object for the duration of the interaction phase. Since each federation execution can result in a different create/discovery order this interaction behaviour is non-deterministic.Figure 3.1 FoodFight Behaviour 3.2 ModificationsIn this subsection we describe the changes made to the basic FoodFight resulting in our own version which we will refer to as FoodFightM. Message Counts: counters were added to record messages sent and received by each federate (by message type). We also record what we refer to as snap shot results so we can see how types of messages sent and received vary over time. An important point concerns the way in which we count interactions. These are only counted as received by the intended target. In this way the count reflects interaction messages as if they were filtered though the DDM, since we count messages at the instance level rather than the class level as in the original FoodFight.  Parameterisation: Through the parameterisation we can control the duration of execution, length of purchase and interaction phases, number of student objects per federation, radio channel used and team number, the latter being a new attribute assigned to a federate.Targeting Mechanism: for our use of FoodFight it was necessary to introduce a more varied and deterministic targeting mechanism. By more varied we mean that the targeting would vary during the course of the federation execution. By deterministic we mean that the targeting should not be dependant on the startup order which we could not guarantee. We therefore introduced the idea of a team number. A federate is assigned a team number. Multiple federates can be in the same team. All student objects simulated by a federate are necessarily in the same team. During the interaction phase targeting is now based on choosing a member of an opposing team at random. For each instance of an interaction, a new target is chosen generating a degree of variability during the federation execution.4. Verification and ValidationThis section describes the approach taken in using FoodFightM to conduct verification and validation of core ADSAM. In the first subsection we describe configurations of FoodFightM. Subsection 4.2 describes  experiments conducted using these configurations. In subsection 4.3 we discuss a selection of results.4.1 FoodFightM ConfigurationsWe required that the configuration of FoodFightM be simple enough such that we did not become lost in the complexity and scale of the resulting federation, yet sufficiently complex that we could see sufficient changes in communication pattern. We decided on a three LAN configuration with a total of nine student objects (three per LAN). Since a federate in FoodFightM can simulate a number of student objects we opted for two  configurations. These are configuration A and B shown in figures 4.1 and 4.2 respectively. In these figures a student object is represented by a black dot at each federate. Each federate is shown as a rectangle attached to a LAN. A federate is identified by a sequential number prefixed by the id of the LAN on which it is located.Figure 4.1 Configuration ABy fixing the number of student objects we fixed the number of update and interaction messages generated using each configuration (A and B), since those message types are sent per student object. The difference between the two configurations concerns the number of radio communications. Since the radio communication is a federate level message we would expect configuration B to have one third of the radio communications of configuration A.Figure 4.2  Configuration B4.2 FoodFightM ExperimentsA number of experiments were designed in which we varied the team membership of federates. It was assumed that a particular team would use its own radio channel such that radio communications were only exchanged between members of the same team.Table 4.1 presents the initial four experiments conducted using FoodFightM (Exp1 to Exp4) and the team allocated to each federate. Each experiment was conducted using configuration A and B where appropriate (hence the labelling in table 4.1 Exp2A and Exp2B etc.). Varying the team number affects the distribution of radio communication messages (which only take place between members of the same team) and throw interaction messages (which only occur between students in different teams). Exp1AExp1BExp2AExp2BExp3AExp4AT0111111T11n/a1n/a22T21n/a1n/a23U0112211U11n/a2n/a32Y21n/a2n/a33P0113311P11n/a3n/a42P21n/a3n/a43Table 4.1 FoodFightM ExperimentsIn all experiments FoodFightM was configured to have a total 300 loop iterations; 200 in the purchase phase and 100 in the interaction phase. Since on each loop iteration there is a time increment of five units this results in a total of 1500 time units simulation time. Since the execution duration and phase behaviour is fixed between experiments we anticipate seeing the effect of the distribution of teams and how, in turn, this alters communication across the networks. In all experiments federates were set to be time regulating and time constrained and the object ownership feature was disabled (although part of the basic FoodFight these were not features we were directly interested in.)Having conducted these experiments using FoodFightM a set of corresponding experiments were conducted in the implementation of the core ADSAM model. The aim being to verify the ADSAM implementation and perform a limited validation of the core model by increasing confidence through experimentation. It is not the intention in this paper to present a full report of results for every experiment conducted. Instead we will focus on the results of one or two experiments which show interesting behaviour of both FoodFightM and the ADSAM simulation.4.3 Experiment ResultsThis subsection describes certain results from experiments with FoodFightM and ADSAM. The results we have chosen concern experiment 2 since these results raise interesting points. Subsection 4.3.1 describes results from experiment 2 with FoodFightM and ADSAM and comments on results for verification and validation of  ADSAM. Subsection 4.3.2 raises an interesting point from using ADSAM in these experiments. Finally, subsection 4.3.3 emphasises the importance of representing phase behaviour. 4.3.1 Verification and ValidationWith reference to table 4.1 we see the key to experiment 2 is that federates on the same LAN are in the same team. For example federates on LAN T are in team 1, federates on LAN U in team 2 and federates on LAN P in team 3. Since only members of the same team communicate via the radio messages this limits such messages to the local LAN on which the message originates. Since interactions occur between teams, this  distributes interactions throughout the network configuration. In figure 4.3 we see the results from running experiment 2 with configuration A (Exp2A). Figure 4.3 shows the messages sent and received by a single federate in FoodFightM (FFM) and also the corresponding experiment conducted using the ADSAM implementation. The break down by message type details counts of radio communication, attribute update and throw interaction.  Let us first consider the counts of messages sent in FoodFightM. Since a radio communication is issued per FoodFightM iteration there are a total of 300 radio communications issued. An update is sent for each student object representing an update in attributes during the 200 purchase iterations and 100 interaction iterations; again resulting in a total of 300. Since interactions are issued per student object for each iteration of the interaction phase then a total of 100 interactions is sent by each federate. We are, therefore, satisfied that we can understand the behaviour we see in the results of the FoodFightM experiment and that the corresponding result from the experiment in ADSAM is verified as correct.Now we turn our attention to the number of messages received by each federate as illustrated in figure 4.3. Each team member receives the 300 radio communications sent by its other 2 team members; resulting in a total of 600 radio communications received (a federate does not receive its own messages back even though it is itself a subscriber to that radio channel).  EMBED Excel.Sheet.8  Figure 4.3 Since update messages are issued via the DM service this effectively results in them being broadcast and received by all federates. This results in a federate receiving a total of 2400 attribute updates (one for each of the 300 loop iterations from the other eight federates.) Finally, the interactions are received by members of opposing teams. A student is targeted by 6 other students (i.e. those in teams other than its own). Given the nature of the targeting mechanism in FoodFightM this results in an average of 100 interactions being received. Again, the same results are shown by the federate in the ADSAM implementation. EMBED Excel.Sheet.8  Figure 4.4Experiment 2 was also conducted using configuration B (Exp2B in table 3). The results for a single federate are shown in figure 4.4. In experiment 2B there is only one federate in each team and that federate is potentially sending and receiving radio communications via the same channel. In FoodFightM (FFM) we see a total of 300 radio communications sent, 900 updates and 300 interactions. Since updates and interactions are issued per student this accounts for the increased numbers of these messages compared to configuration A. Figure 4.4 shows the results for a federate in ADSAM to be the same. The total messages received by a FoodFightM federate in figure 4.4 show a total of 0 radio communications, 1800 updates and 300 interactions. A federate does not receive any radio communications, since it does not receive a message which it has itself sent. The reduced number of update messages received is due to the number of students each federate is simulating in this configuration. A federate receives  an attribute update from each of the other two federates, each simulating three students (6 students x 300 loop iterations). Interactions in experiment 2B are the same as experiment 2A, since each team still has the same number of members and therefore potential targets.In experiment 2 (figures 4.3 and 4.4) we see the results from ADSAM experiments reflect the results from the experiments with FoodFightM. Although not presented here, results from other experiments gave a similar result. Although itself a very simple federation, this shows some success in using FoodFightM towards verifying and validating the core ADSAM implementation. 4.3.2 Use of ADSAMIn experiment 2B we anticipated that the RTI would determine that there were no interested subscribers to the region representing the radio channel. The only subscriber is in fact the only producer of such communications. We anticipated that the federate would be blocked from transmitting the radio communications. From the result in figure 4.4 we can see that this is not the case. This was a surprising result in itself, but our interest in this instance is not in the behavior of the FoodFightM federation and DDM RTI service, but instead how we can use ADSAM to investigate this further and track such messages.In this subsection we focus on the results from experiment 2B to investigate a level of detail in ADSAM that is not directly available in the FoodFightM federation. Since experimentation with ADSAM has shown appropriate values for federate level activity this gives increased confidence in investigating information at the network level.  In figure 4.5 we can see the impact in ADSAM on each of the three LANs (LAN 0, LAN 1 and LAN 2 in the ADSAM experiment correspond to LAN T, LAN U and LAN P in FoodFightM). The graph in figure 4.5 represents the total volume of traffic received (processed) by each network; that being a sum of the messages originating from federates on that network and messages arriving from other connected networks. This graph would indicate that in fact no radio communication messages were transmitted. EMBED Excel.Sheet.8  Figure 4.5The ADSAM, however, provides a finer level of detail by subdividing messages into those sent, received and trashed. As described in section 2.2.2 this latter count represents the number of messages generated by an ADSAM federate that have no destination. This can be for two reasons; either because there are no subscribers to the chosen cStream or, as in this particular case, where the only subscriber is actually the originator of the message.  Since it makes no sense to deliver this message to the originating federate, the ADSAM network object records the message instance as trashed. This is illustrated in figure 4.6. EMBED Excel.Sheet.8  Figure 4.64.3.3 Importance of Phase BehaviorWe are already aware that there is at least one important characteristic of FoodFightM that is not represented by the core ADSAM. We refer to the phase behaviour, notably the purchase phase followed by the interaction phase. The consequence of these phases in  FoodFightM are shown in figure 4.7. Figure 4.7 presents a sequence of 10 snap shot counts of messages sent by a FoodFightM federate during the federation execution. Earlier in this section we detailed how, for the purposes of experiments in table 4.1, FoodFightM had a total of 1500 simulation time units. At regular time periods of 150 simulation time units a count of messages sent during that time period is taken. This is the result shown in figure 4.7.Figure 4.7The corresponding snap shot values for ADSAM are shown in figure 4.8 (the core implementation was modified to allow us to do this). This illustrates that in the core ADSAM we are limited to representing the basic characteristics of the federate profile i.e. excluding phase behaviour. In order to represent the same overall behaviour of a  FoodFightM federate in ADSAM we had to adjust the rate at which messages were produced. As noted in section 2, the phase behaviour was not a level of detail we intended representing in the core ADSAM. The experiments with FoodFightM have helped emphasise the importance of such information and this will be a consideration in the first planned extension to the core ADSAM.Figure 4.85. Future WorkThere are a number of additional experiments we intend to conduct with the core model to continue the V&V process. However, the majority of future work lies in extending the core ADSAM. The following summarises the current planned extensions:Extension One: introduce the phase behaviour of federates and also provide a more accurate model of message generation. We are aware for example that interactions are typically more bursty in nature.Extension Two: introduce the notion of federate dependencies. To see how far we can represent cause and effect type information in an abstract model.There are also a number of other extensions which are being considered:Performance: introducing the impact of network and gateway latencies and federate CPU performance.RTI communication: representing the communication between a federate and the RTI. This is a much smaller volume of communication compared to that between federates, but it will add to the overall network load. Through ADSAM we anticipate being able to investigate performance implications of RTI communication.Region Management: to evaluate region management schemes; for example allowing a federate to change an allocated cRegion by either swapping it for another predefined region or allowing regions to dynamically change. Each region change requires communication between the federate and the RTI. Region Utilisation: to look at varying approaches to identifying which cStream a message will be published to. This is an extension of the current approach which is to choose one at random.Data collection: evaluating the  impact of numbers, locations and types of data collectors and the consequence of additional traffic they may cause on the network.Granularity of cSpace: allow evaluation of different mappings of cStream to cSpace e.g.  allowing a cStream to cover a non-uniform area of a cSpace.6. ConclusionsThrough experiment results described in section 4 we conclude that some success has been made towards verification and validation of the implementation of the core ADSAM. Given the abstract nature of ADSAM validation is certainly the more difficult of the two, but through the experiments of section 4 we have increased confidence in our model.The functionality supported by the core ADSAM is necessarily limited. However, it does provide the basis which we can extend to represent features which have a further impact on federate communications patterns and federation performance. Even at the level of experiments described in section 4 the core model  illustrated important capabilities to investigate a level of detail that we were not able to do in the real federate. For example inferring network level activity by modeling the FoodFightM experiments.FoodFightM has proved useful in working towards V&V of the core ADSAM. However, future use of FoodFightM is limited. This is primarily due to the lack of diversity in federate types and behaviour they exhibit. The FoodFightM federation also remains very fixed in nature (due to the fixed loop based implementation). There is a compromise in making further modifications to FoodFightM and locating alternative data sources. At present we favour the latter approach.Necessarily one thing we hope to learn from future development and experiments with ADSAM is how far a particular feature or characteristic of an ADS can reasonably be evaluated using an abstract approach. We anticipate there are limits to how useful a particular abstraction can be. Work with ADSAM will help identify these limits. Within these boundaries it is possible that ADSAM can make a useful contribution to the development, execution and evaluation of federations.7. References [1]	The Department of Defense, “High Level Architecture Interface Specification”, Version 1.3 DRAFT1, 02 April 1998.        HYPERLINK http://hla.dmso.mil/ http://hla.dmso.mil/[2]	Thomas K. Neuberger, “A Progress Report: Recommended Practises for Data Collection in HLA and other ADS Environments”, Proceedings of the Fall Simulation Interoperability Workshop, September 1998, 98F-SIW-129[3]		Pauline A Wilcox, Albert Burger and Peter Hoare, “Investigating the Impact of Simulation Communication  Patterns on Distributed Data Collection Strategies”, Proceedings of the Spring Interoperability Workshop, March 1999, 99S-SIW-037[4]		Pauline A Wilcox, Albert Burger and Peter Hoare, “Towards a Categorisation of Advanced Distributed Simulations for Data Collection Strategies”, Proceedings of the UK Simulation Society, Cambridge, April 1999.[5]	Mostafa Bassiouni, Ming-Hsing Chiu, Margaret Loper, Michael Garnsey and Jim Williams, “ Performance and Reliability Analysis of Relevance Filtering for Scalable Distributed Interactive Simulation”, ACM Transactions on Modeling and Computer Simulation, Volume 7, Number 3, pp 293-331, 1997[6]	Steven J. Rak and Marnie Salisbury and Robert S. MacDonald, “HLA/RTI Data Distribution Management in the Synthetic Theatre of War”, Proceedings of the Fall Simulation Interoperability Workshop, September 1997, 97F-SIW-119[7]	Stephen McGarry, “An Analysis of RTI-s Performance in the STOW 97 ACTD”, Proceedings of the Spring Simulation Interoperability Workshop, March 1998, 98S-SIW-229[8] 	Katherine L. Morse and Jeffrey S. Steinman, “Data Distribution Management in the HLA, Multidimensional Regions and Physically Correct Filtering”, Proceedings of the Spring Simulation Interoperability Workshop, March 1997, 97S-SIW-052 [9]	Daniel J. van Hook, Steven J. Rak and James O. Calvin, Approaches to Relevance Filtering, Proceedings of the 11th Workshop on Standards for the Interoperability of Distributed Simulations, September 1994, 94-11-144[10] CSIM18,  Simulation Engine Users Guide (C++ Version), Mesquite Software Inc., 3925 West Braker Lane, Austin, Texas 78759-5321. http://[11] 	DMSO HLA Software Products 	http://hlasdc.dmso.mil/cgi-bin/hla_dev/hla_cat.plAuthor BiographiesPAULINE WILCOX received BSc (Hons) Computer Science from Leicester Polytechnic in 1990. After working in industry for six years she returned to academia and received a MSc Computer Science from the University of Edinburgh in 1997. She is presently in the third year of her PhD at Heriot-Watt University.http://www.cee.hw.ac.uk/~ceepawALBERT BURGER received a BSc from the Fachhochschule, Augsburg, Germany, an MSc from the University of Missouri, Kansas City USA and a PhD from the University of Edinburgh, Scotland; all in Computer Science. He is currently a lecturer at the Department of Computing and Electrical Engineering at Heriot-Watt University. His research interests include databases and distributed systems. http://www.cee.hw.ac.uk/~ab/PETER HOARE is a Principal Scientist in the Parallel and Distributed Simulation section of the UK Defence Evaluation and Research Agency in Malvern. He received a BSc (Hons) and PhD degrees from Royal Holloway, University of London in 1988 and 1993 respectively. He has been working in parallel and distributed  simulation since joining DERA in 1993. Currently he is the technical lead of several programmes in the UK researching the use of the DoD High Level Architecture including Project FlasHLAmp a joint UK MoD/Industry simulation technology transfer programme. Also he is currently a Drafting member of the HLA Standards Development group developing the IEEE standards documents. This work was carried out as part of Technology Group      10 of the MoD Corporate Research Programme   © British Crown Copyright 2000/DERA      Published with the permission of the Controller of Her Britannic    Majesty's Stationery Office