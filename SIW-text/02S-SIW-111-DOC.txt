CODE-Net: XML, SOAP and Simulation DevelopmentPaul Gustavson, Larry Root, Steve Goss,Jane BachmanSynetics HYPERLINK "mailto:pgustav@dv.synetics.com"pgustav@dv.synetics.comMark McAuliffeU.S. Army Simulation Training Instrumentation Command (STRICOM)mark_mcauliffe@stricom.army.milKeywords:Federation Development, FEDEP, XML, SOAP, CollaborationABSTRACT:  The successful development of any information system, whether it is a software application or an HLA federation, often depends upon “well-managed collaboration” between tools during the development process.  Even though our world is connected via the Internet, the automation associated to this collaboration is often restricted due to the wide variety of disparate applications, platforms and development languages used.  Other than email applications, tools are not typically integrated in a seamless manner leaving a void in the area of well-managed collaboration – especially in HLA federation development.  The need exists for data to be shared among multiple users, whether it is for real-time or “store-and-forward” sessions.  By latching onto the emerging network technologies of XML and the Simple Object Access Protocol (SOAP), and applying the experiences gained in the development and use of the Computer Aided Federation Development Environment (CAFDE), we have designed a service framework called the Collaborative Online Development Environment Network (CODE-Net).  CODE-Net, being developed under the sponsorship of STRICOM, is designed to allow multiple systems and its developers to share and exchange information regardless of the disparate applications, platforms or programming languages used.  CODE-Net is an open tool environment based on SOAP and uses the Web Service Description Language (WSDL) to describe the set of collaborative services available.  The SOAP component provides a simple and lightweight mechanism for exchanging structured and typed information, such as DIF and XML documents, between peers in a decentralized, distributed environment.   The WSDL component provides the interface allowing systems to request and retrieve information from a central server or host system using Remote Procedure Call (RPC) type communication.   Together the components of CODE-Net allow the integration and collaboration needed among a wide variety of applications and tool environments.  This paper explores the benefits of CODE-Net and the simplicity of integration required for tools to plug in and participate within an automated collaborative environment.  This paper will provide example uses as it applies to tool integration and support of the Federation Development and Execution Process (FEDEP), and we will explore other issues such as security and the integration of repositories. 1.0 IntroductionOne of the common issues during federation development is the lack of communication and coordination among team members throughout the development process.  Typically, federation development is performed independently with occasional telecom or face-to-face meetings between managers and engineers, when deemed necessary.  If the team is fortunate, potential integration and compatibility issues are made known during these sessions and corrective actions are taken.  The amount of time and effort spent by an engineer prior to the realization of a problem is rarely known. It isn’t uncommon for one or more engineers to have to back out code because either a misunderstanding of requirements occurred, or a miscommunication of a desired capability, expected by other participants occurred.  The worse case scenario is that these problems and issues are not manifested until the first execution of an HLA federation.  The question to be asked is, “What can be done to circumvent these issues?” 1.1 FEDEP Automation SupportThe Federation Development and Execution Process (FEDEP) provides a generalized framework for building HLA Federations that encourages communication and coordination.   The FEDEP is a very practical guide that should be used by all federation engineers and managers.   However, it does not guarantee that a federation development effort will be free of communication and coordination problems.  Each individual is ultimately responsible for communicating with team members. However, to do so on a daily basis seems improbable, unless a ubiquitous mechanism was in place to support such communication.  Several years ago, an initiative was taken by STRICOM to establish an open tool architecture that allowed the integration of independent tools and the automated sharing of data among these tools.  This architecture was known as the Computer Aided Federation Development Environment (CAFDE), and was intended to provide an application interface (API) for the integration of next generation HLA development tools for the modeling and simulation community.   It was a first step in providing FEDEP automation support for HLA development tools.   The current version, CAFDE Version 1.1, is still a viable mechanism for creating custom integrated development environments (IDEs), but is currently optimized for the Windows® environment.  While CAFDE provides an excellent way for two or more tools to share data within a single platform, and provides a limited ability for tool environments on different platforms to share data among one another, it was only a start at providing an infrastructure that can leverage the concepts of the FEDEP among players, tools, and repositories.1.2 CODE-Net ServicesThe next step in helping establish a ubiquitous mechanism for communication and coordination among team members has been to apply and utilize some of the emerging Internet technologies to create the Collaborative Online Development Environment Network (CODE-Net).  CODE-Net applies technologies such as the eXtensible Markup Language (XML), the Simple Object Access Protocol (SOAP), and the Web Services Description Language (WSDL) to provide a mechanism for developers and their applications to share and exchange information regardless of disparate applications, platforms or programming languages.  CODE-Net is designed to integrate tools, repositories and other web-based services to establish and heighten communication.This paper explores the architecture and benefits of CODE-Net and the simplicity of integrating tools within this automated collaborative environment.  Examples, as it applies to tool integration and support of the FEDEP, will be provided and the issues of security and the integration of repositories will be addressed. 2.0 The Concept of Web ServicesTo understand the applicability and functionality of CODE-net, it is important to first understand the “re-invented” concept of web services.  The web services of tomorrow will be uniquely different from the web services offered by the likes of Yahoo, Amazon.com, Orbitz, and eTrade.   “Software as service” is the notion of tomorrow’s web services.  No longer will web services be limited to just web sites that are viewed in a browser, and constrained to searching, data querying and secured purchasing.  Tomorrow’s web services will offer access to specialized utilities that perform various services external to your computer, and yet, integrate seamlessly and autonomously with your local software.  Applications other than a browser will take advantage of these services providing newfound capabilities for users.  Rather than manual mouse clicks and keyboard entry through a browser for specific information, your software will learn to “discover” appropriate services available on-line and automate the process of querying, gathering and transforming data for you.  Future Web Services really provide another level of Reuse.  The first level of reuse within the software industry occurred at the object language level with the advent of C++, Ada, and Smalltalk.  The next level of reuse occurred at the component level with the advent of Visual Basic Controls (VBX), ActiveX, Visual Component Libraries (VCLs), and JavaBeans (and, soon to be, BOMs within the simulation world).  These components allow developers to plug in precompiled binary and byte code, which provides specific functionality, into their applications.  Now, web services are ushering a new level of reuse at the application level.  As is a concern with object reuse and most component reuse, this level of reuse is not concerned with the language the app was developed with or the platform the app was written for.  Web services offer language and platform independence for those wishing to reuse the services they offer.It is the promise and potential for novel and innovative automated services that makes web services compelling -- especially for HLA Federation Development.   Web Services facilitate greater reuse, componentization and interoperability.  These are all necessary ingredients for enhancing the federation development process.   The key is establishing a robust architecture that can be used to access any number of potential services, repositories and external tools needed by the collective community during the federation development effort (activities from FEDEP Step 1 to Step 6).  3.0 Technologies AppliedEstablishing a robust architecture as described above is no simple task.  The experiences gained from developing CAFDE has leant itself well in establishing CODE-Net.  The CAFDE API provided a way to “wire tools” together, including a mechanism for exchanging DIFs and other relevant data among HLA development tools.   This API provided a sense of automation of the FEDEP that was driven by a Windows-based CAFDE DLL and tools that integrated the CAFDE API calls.  Data, such as DIFs, could be automatically exchanged between tools supporting various FEDEP steps.  Furthermore, “real-time” collaboration over the network between multiple tool environments could be accomplished via an UDP-based CAFDE network interface.   CAFDE provided a highly functional set of collaboration functions within a single environment (one computer) that could effectively share information with other tools within the same environment.  However, CAFDE was somewhat limited in sharing data with other environments (multiple computers).  Distributed collaboration has not been CAFDE’s forte, simply because the right technologies had not yet emerged during its development.  With the emergence of XML, SOAP and WSDL, however, an effective means of collaboration and automation across multiple environments can be provided.  These technologies allow the integration of these services to be implemented in a manner that minimizes the impact of code changes, and maximizes tool interoperability and automated FEDEP support.  Additionally, CAFDE’s publish / subscribe-based API services provide a solid basis for laying out the CODE-Net services provided through SOAP and WSDL.3.1 XMLThe eXtensible Markup Language (XML) provides a platform-neutral syntax description language for structuring, documenting and sharing data.  XML is text based, which makes it easy to handle in most environments regardless of platform or language.  With XML comes an abundant amount of XML-coding and decoding software (i.e. parsers) available on virtually every platform for every programming environment.   XMLs flexibility allows data to be easily extended in unambiguous ways.  For instance, XML data can be serialized into transmittable forms that can be easily decoded on any platform.  This provides the interoperability exchange needed between different manufacturer’s platforms with differing software environments.   REF _Ref498204110 \h  \* MERGEFORMAT Figure 3.1, for example, illustrates an HTTP XML payload.  <RepositionTrack	xmlns=”urn:schemas-tactical-com:TrackProcessing	xmlns:3Dviewer=’http://UpdateTrackPos/longitude’><trackid>1275</trackid><longitude>120:25:53.341W</longitude></RepositionTrack>Figure 3.1 - HTTP XML PayloadAny client that receives this message can determine if it understands the schema and has processing for the requested namespace (xmlns) values and methods.  If so, it processes the request and then may respond with an HTTP response.  XML, with its flexibility, combined with HTTP as a transport, is the foundation of SOAP.3.2 SOAPAs XML has grown and gained acceptance, a handful of individuals and companies saw an opportunity to develop a lightweight XML-based protocol for exchanging information in a decentralized, distributed environment.  Two standards or approaches have been developed: XML-RPC and SOAP.  Both protocols are related to one another.  XML-RPC and SOAP both use the HTTP as a method to perform Remote Procedure Calls (RPC) in which XML encoded messages are shared and distributed.  XML-RPC is designed to be fairly simplistic with the goal of keeping distributed computing from being difficult and platform dependent.  SOAP is actually an evolution of XML-PRC and provides greater distributive computing support.  SOAP has been co-developed and backed by a larger consortium of companies including IBM, Lotus, Microsoft, DevelopMentor and UserLand (these last two have been the original developer’s of XML-RPC).  While XML-RPC and SOAP are very similar, SOAP has emerged as the technology frontrunner and version 1.1 has been adopted as a standard by the World Wide Web consortium1.SOAP methods are nothing more than HTTP Request/Response packets that comply with SOAP encoding rules.  Each SOAP payload is an XML document with the root element <Envelope> that wraps all of specific elements and attributes.  Within the <Envelope> is an optional <Header> for protocol extensions and the mandatory <Body> element.  The <Body> will contain one distinct root element that will identify it as a request or response object. Figure 3.2 illustrates what a SOAP payload for updating an object attribute might look like in simulation interplay (for integration testing – FEDEP Step 5).  This entire payload would be wrapped as an HTTP payload.   <soap:Envelope	xmlns:soap=’urn:schema-xmlsoap-org:soap.v1’>	<soap:Header>		<errorcondition>	soap:mustUnderstand=’true’		xmlns=”http://updateattributeinformation.com”		</errorcondition>		</soap:Header>	<soap:Body>	<Federate:UpdateAttribute  	xmlns:Federate =’urn:uuid: 	C3979D17-89C6-11D4-EA71-FE00C7902810’>	<object>432</object>	<vel>1093.354</vel></soap:Body></soap:Envelope>Figure 3.2 - SOAP PayloadIn this particular instance, the SOAP message contains a schema Uniform Resource Identifier (URI) that assists the receiving federation in determining whether it can process this message or not.  If the receiving system’s interpreter is not familiar with this schema and URI then it will not process the information.  Also, note that the payload contains a <Header> with a “mustUnderstand” flag and URI.  If the receiving system does not understand the URI, an error message must be returned and the message rejected.  The remainder of the SOAP message informs the processing system to update the attributes for a specific object.  SOAP provides the community the following items that enhance interoperability and collaboration beyond current technologies: No specific endpoint object relationshipNo explicit programming modelsThe endpoints of a SOAP request is a simple HTTP URL and does not require a specific object to be tied to a given endpoint.  In the case of DCOM, all objects map to a specific object references (OBJREF).  In CORBA, an endpoint representation is called the Interoperable Object Reference (IOR).  With SOAP, the implementer decides how to map the object endpoint identifier onto a server-side object.  This provides highly flexible systems and data transfer extending the possibilities for collaboration and interoperability beyond current implementations.  SOAP is also a network protocol with no explicit programming model.  SOAP has no API or ORB and expects developers to use as much existing technology as possible.For HLA Federation development, SOAP can be used to provide a simple and lightweight mechanism for exchanging structured and typed information such as DIF and XML documents between peers in a decentralized, distributed environment.   This is exactly how it is applied for CODE-Net.3.3 WSDLAs described by W3C.org, the Web Services Description Language (WSDL) is “an XML Format for describing network services as a set of endpoints operating on messages containing either document-oriented or procedure-oriented information.”1  In other words, a WSDL file will identify the external methods available by a web service.  It is analogous to an IDL file.  An application will use the WSDL file to identify the Remote Procedure Calls (RPC) that can be made for requesting and retrieving information from central server or host system.   The RPC communication to these endpoints can be accomplished using SOAP 1.1, HTTP GET/POST, or MIME.  The listing attached to the end of this document provides an illustration of a WSDL file, which provides an interface for an application to access the methods of the CODE-Net service via SOAP calls.4.0 CollaborationAn important difference between CAFDE and CODE-Net is that CAFDE’s support of collaboration was limited to real-time (synchronous) data exchange, whereas CODE-Net is not.  With CAFDE, two or more users needed to be on-line simultaneously in order to fully benefit from team development.  If a change was made to a FOM element, it could be distributed to another developer for their immediate approval or acceptance.  The persistence of data, however, was not easily accomplished via CAFDE. If a user was disjoined and came online later, he was manually responsible to catch-up on the changes.  In reality, it’s difficult for developers and managers to stay on-line simultaneously and constantly, especially if they are on opposite ends of the coast.  A better mechanism is needed to support the asynchronous exchange of data.  This asynchronous exchange of data is known as “store and forward” collaboration.  The capabilities offered by XML, SOAP and WSDL provide a tremendous opportunity to support “store and forward” collaboration as well as real-time collaboration.  Together these components of CODE-Net allow the integration and collaboration among a wide variety of applications and tool environments.  The question is, “What specifically are the types of services that can be supported via CODE-Net, whether it is real-time (synchronous) or store-and-forward (asynchronous) collaboration?”   Analysis of the FEDEP activities, which center upon team communication and coordination, identify a handful of potential services. 4.1 FEDEP Step OneThe goal in step one is for the team, which consists of users, sponsors, and developers, to collectively define and document the objectives of the federation.FEDEP Step One ActivitiesIn order to “develop a clear understanding of the problem to be addressed”2, a significant amount of collaboration is required by all the players from the on-set.  With the proper tools applied, CODE-Net provides a beneficial conduit for pooling players together in performing the tasks typically required during the Step One activities as shown in Table 4.1:Table 4.1 – Define Federation ObjectivesActivityPotential Collaboration TasksIdentify User/Sponsor NeedsAgree upon specific purpose and objectivesIdentify critical systems of interest (actors)Identify entities and key events to be represented in the federation scenarioIdentify development and execution constraintsDevelop Federation ObjectivesDefine and prioritize federation objectivesIdentify key federation characteristics and risksIdentify VV&A activities, products, and participantsDefine schedule and initial planning documentsUnfortunately, automated tools that can support aspects of the Step One activities have been slow in emerging.  This isn’t surprising since the primary mechanism for sharing this type of data has been through email and email attachments of external files (e.g., Word Documents, Excel Spreadsheets, Project schedules, etc…).   Automated support for integrating, synching and processing the data being generated by multiple team members who are defining the federation objectives simply hasn’t been available.  But the need isn’t necessarily new tools in themselves, it is a capability to take what a tool produces and provide a way to publish the data in a manner that other tools can access, parse and process that data.  For instance, when objectives for the federation are identified, it would be beneficial to publish that information in a manner so other participants can immediately collect and review the objectives and begin to perform other associated tasks such as prioritizing the objectives, identifying key systems, characteristics and risks, and laying out a schedule to meet those objectives.    CODE-Net provides a service for potentially supporting this type of collaboration.  What’s required are tools that take advantage of this service by including XML and SOAP processing capabilities, and for them to utilize other services that can be tapped through CODE-Net such as a version control service, or a comment tracking service.    4.2 FEDEP Step TwoThe goal in Step Two is to develop an appropriate representation of the real world domain.  This is known as conceptual analysis.  FEDEP Step Two ActivitiesThe two big efforts associated to this step are to produce a conceptual model of the federation, and to develop the scenario.  The scenario provides a description of an exercise and the events to occur.   Both the conceptual model and scenario directly feed into establishing the requirements for the federation, which is the third key activity identified for this step.  Again, these are activities in which CODE-Net can act as a collaboration conduit among team players provided the right tools are being utilized.  Table 4.2 – Perform Conceptual AnalysisActivityPotential Collaboration TasksDevelop ScenarioIdentify domain areas and key events Identify behavior activities required to complete the scenario and vignette events Identify actors (e.g. entities, environmental conditions) required, and their relationship to one another against timeIdentify initial conditions (e.g. force laydowns), termination conditions (e.g. exceptions / variations), geographic regions, and scenario and simulation timeframe.Verify and validate the scenario together with federation stakeholders”Develop Federation Conceptual ModelIdentify, structure, and describe federation objects (i.e. actors)Define static and dynamic relationships between federation objectsDefine how the environment should be represented and the level of fidelity expected.Verify and validate the conceptual model, including key process and events, with federation stakeholdersDevelop Federation RequirementsDetermine which federation objects will be simulated, or stimulated through real or human-in-the loop systems.Define requirements for each federation object and object interaction.Establish fidelity and performance requirements.Determine the level of execution management, control and security requiredIdentify test evaluation criteriaIf you noticed in glancing through the table, the FEDEP places heavy emphasis on the effort of verifying and validating scenarios and conceptual model with the “federation stakeholders” 2.  Collaboration is the key ingredient in making this happen.  Tools that support conceptual modeling can take advantage of collaboration through the web services concept of CODE-Net.   Scenarios, conceptual models and requirements can be generated and stored online and accessed seamlessly by federation development tools.  This data, for example, can be used by federation development tools to drive FOM development and implementation and the creation of test criteria.  4.3 FEDEP Step ThreeThe goal in Step Three is to identify the responsibilities and functionalities to be provided by each participant (federate).FEDEP Step Three ActivitiesThe activities associated to this step include selecting federates, allocating the necessary functionality, and developing a federation development plan which includes a schedule to be adhered by each participant.  The collaboration aspects of these activities are described in Table 4.3.Table 4.3 – Design FederationActivityPotential Collaboration TasksSelect FederatesIdentify candidate federatesAnalyze the capability provided by each candidate federate in representing the required objectives, activities and interactions.Make final selection of federatesAllocate FunctionalityMatch federates with functionality required to support the conceptual model, federation scenario(s), and federation requirements.Define data exchange, synchronization and real-time data processing requirements necessary to objectives.Prepare PlanDevelop and update federation and execution plan which includes: Identifying the specific tasks and milestones for each federate, and Agreeing upon a proposed schedule for completion of each task.According to the FEDEP, the creation of the Federation Development Plan for Step 3 “requires close collaboration among all federation participants to ensure a common understanding of federation goals and requirements.” 2   CODE-Net offers a team collaboration mechanism for facilitating the selection of federates, the matching of federates with functionality, and the development of a federation and execution plan.  This is accomplished with automated tools that utilize the CODE-Net services.  Furthermore, it is at this stage that integration of repositories can be leveraged to populate and access lexicon information and project requirements.4.4 FEDEP Step FourThe goal in Step Four is for the team to develop the specification for information interchange that will occur between all federates at run-time.  This is known as the Federation Object Model (FOM), which includes object classes and interaction classes and their associated attributes and parameters.  Additionally participants identify and agree upon which algorithms and databases are to be used. FEDEP Step Four ActivitiesAs illustrated in the diagram, the activities associated to this step include the development a FOM, establishing federation agreements for all participants, and implementing the necessary federate modifications by each player to support the overall requirements.  The collaboration aspects of these activities are identified in Table 4.4.Table 4.4 – Develop Federation ActivityPotential Collaboration TasksDevelop FOMDevelop OMT components for a FOM which includes: FOM/SOM LexiconObject and Interaction Class Structure TablesAttribute and Parameter TablesRouting Space / Dimensions Table, and theObject Model Identification TableSpecify federation publication / subscription agreements and routing spaces for attribute updates.  Utilize the Object Model Data Dictionary and other agreed upon repositoriesVerify the FOM fulfills federation requirements and anticipated federate responsibilities with federation stakeholdersEstablish Federation AgreementsDecide the behavior of all federation objects and how they should interact during executionIdentify databases, algorithms, and authoritive data sources to be usedIdentify time management, data synchronization, and initiation procedures for the federation and each federate.Analyze federation objectives and requirements to identify data to be monitored and collected.Implement Federate ModificationsModify federates to provide required functionalityUpdate community data models and simulation components used by the federationDevelop the HLA interface for non-HLA-compliant federates if necessaryThere is quite a bit of activity and coordination required to support the tasks associated to Step Four.  It is at this stage, disjunction among federation developer’s can occur.  Based on observation, there are several reasons this may happen: The requirements are not clearly understood and, therefore, are difficult to verify with what’s produced by each federate, and The communication among participants is often lacking and not very effective.  Perhaps this is because the focus of the developer is on his / her assigned responsibility, and emphasis on the total integrated picture is no longer on the forefront of one’s mind. The result is that there is little concern regarding the impact each effort may have on another.  The irony is that requirements and communication are the crucial elements in making a federation development successful, and, yet, when the focus is on the development stage, it is the emphasis on requirements and communication that are often are relaxed.   What is crucial are tools and repositories to help support the job.  According to the FEDEP, “the use of automated tools to facilitate the object model develop process is strongly encouraged.  Furthermore, object model libraries provide users with access to reusable object models…”2 CODE-Net’s value in circumventing the requirements and communication issues is its ability support the Step Four activities including the integration of tools and repositories.   For instance, CODE-Net can be used to tie together Object Model (OM) tools used by individuals over a collaborative network, and facilitate the communication and verification of requirements, which, again, often fail during this effort.   FOMoramas can be performed in a more coordinated and expeditious way.   Access to repositories and other services can be automated and integrated with tools.  For example, CM and version control support can be added as an external service through CODE-Net.  OM tools can automatically query repositories in search of a needed object model that meets the requirements meta-data that was defined in Steps One and Two (this has been called meta-data matching).4.5 FEDEP Step FiveThe goal in Step Five is to integrate and test the federates, ensuring that they adhere to the interoperability requirements, including compliance to the FOM.FEDEP Step Five ActivitiesThe activities associated to this step include developing an execution plan, integrating the federation, and finally testing the federation prior to execution. The collaboration aspects of these activities are described in Table 4.5.Table 4.5 – Plan, Integrate, and Test FederationActivityPotential Collaboration TasksPlan ExecutionRefine test and VV&A plans, and develop detailed execution plansIntegrate FederationEstablish method for managing known software problems and “workarounds”.Perform incremental federation integration according to the execution plan.Test FederationTest that federates have properly implemented HLA functionality and adhere to the FOM, which includes:Verifying that the federate software correctly implements the federation requirementsVerifying that federates can join and leave and interact correctly with the RTIVerifying that federates can interact according to the scenario and meet the level of fidelity requiredUse of the HLA Management Object Model (MOM) can be used to provide useful information on the operation of the RTI, individual federates, and the integrated federation.The Step Five activities begin to identify the opportunities for future automated tools in concert with a web service like CODE-Net.  Once a FOM is created  (Step Four), it can be potentially tested and validated with itself and other participants with CODE-Net acting as interim RTI like mechanism.  Consider that FOMs (and SOMs) under IEEE 1516 are XML-based.  The representation of data being published and received by a federate could easily be formatted in XML and passed as SOAP messages.  Perhaps the performance may not be as high as the RTI, but the capability to test and debug a FOM being integrated into a federate has tremendous merit.  As a developer, I’d like to be able to “compile” my FOM with in my OM tool and test and debug it much like I can with code within an integrated software development environment.  With this capability I can also leverage and test my FOM implementation for my federate online against the FOM implementation for other federates through CODE-Net.  If a bug manifests itself in my FOM implementation, I can make the necessary corrective action and test again.  This would help decrease the time required for federation development, and would increases the confidence of the federation stakeholders; instilling the feeling that federation execution will perform as expected once Step Six is reached. 4.6 FEDEP Step SixThe goal in step six is to execute and analyze the federation.  FEDEP Step Six ActivitiesThe activities associated to this step include monitoring the federation during execution and analyzing the results.  The collaboration aspects of these activities are described in Table 4.6.Table 4.6 – Execute Federation and Analyze ResultsActivityPotential Collaboration TasksExecute FederationUtilize execution management and data collection to provide real-time monitoring and performance based on test evaluation criteria.Collect Data to support replaysReview results and take appropriate actionsProcess OutputPerform statistical analysis of collected dataTransform data into derived results according to the execution planAnalyze ResultsEvaluate results and determine if all federation objectives have been metTake corrective actionsIn time, execution support tools could be set up so they simultaneously monitor the activities on the federation network during execution and gather performance criteria data available through CODE-Net.  This would be used to provide real-time and automated analysis.  Immediate feedback and a suggestive report of corrective actions could be generated and absorbed by tools that support activities of earlier steps.  It is not uncommon for federation execution exercises to take place with less than stellar results because of slight differences in a FOM implementation or the use of different algorithms.  These issues are sometimes not revealed for weeks or months after exercises are complete.  Perhaps in conjunction with an automated CM mechanism external to CODE-Net, these issues could be identified almost real-time, and allow developers to make necessary “on-the fly changes” in order to ensure the success of the exercise without wasted man-hours or lab time.5.0 Leveraging CODE-Net ServicesThis paper has presented at length the concept of web services and what services CODE-Net is designed to provide, especially as it pertains to federation development.  In truth, CODE-Net can be used to support a far greater number of activities inside and outside of the simulation world.   However the breadth of CODE-Net and how it can be applied outside of HLA federation development is beyond the scope of this paper.  The next issue is identifying and understanding the effort required to integrate into CODE-Net or any other web service for that matter.  Perhaps you are a tool vendor who would like to add this level of reuse to your products, or a user who sees the benefit of web services and how they can be used to support your federation development efforts. SOAP, which is the key technology used by CODE-Net, simplifies the integration effort immensely over other distributing computing paradigms (i.e., DCOM and CORBA), and virtually avoids run-time licensing cost often associated to environments such as CORBA.     Additionally, since SOAP is optimized for use with HTTP, most applications and services can easily benefit from this type of transport.  HTTP is common and provides greater support with networks that are fire walled.   5.1 Interfacing Tools as ClientsA SOAP service such as CODE-Net is made available to a wide range of clients (and other services) through the WSDL document.  The WSDL document provides information on how the clients and other services can post and receive information to and from the service. This WSDL document is dynamically published by CODE-Net and most other SOAP services (see  HYPERLINK "http://www.xmethods.com" www.xmethods.com for examples).   Any modern web browser can be used to display a listing of WSDL documents, which are XML formatted, simply through an URL that is made up of the location of the CODE-Net service application.  This URL may look something like the following: HYPERLINK "http://www.abc.com/codenet.dll/WSDL" http://www.abc.com/codenet.dll/WSDLTypically, to create a client (or another service) that leverages the services of CODE-Net, you must import the WSDL document, which describes the types and interfaces, into your application.  This requires using the right tool or library that supports SOAP and WSDL.  There are a growing number of tools and libraries related to the emerging Internet technologies that allow developers to create web services and clients.  Some of the newer development tools like Delphi, Kylix, and Visual .NET, access these web services and define and register the interfaces locally for you within your project (typically as a separate header file or unit file).   The term Uniform Resource Identifier (URI) is often associated to the interfaces identifying the SOAP / WSDL based services.  The client and server must register the interface using the same namespace URI, or they cannot communicate.   Each tool is slightly different and mileage may vary, but for the most, integration of your application to the interface provide by a web service is accomplished through the access and use of a representative class.  The class contains methods that represent the end-points provided by the service.  Furthermore, there are numerous libraries that wrap the actual SOAP message and envelop processing, so that developers don’t have to worry about building and parsing XML protocol messages.  (See section 3.2 for a discussion of SOAP Payloads).5.2 Integrating Repositories and Other Web ServicesOne of the greatest opportunities in leveraging CODE-Net services and supporting the FEDEP is the capability to seamlessly tie-in repositories and other web-services.   The activities associated to federation development can be deeper than what has been described thus far.   Repositories providing data such as environmental information based on SEDRIS standards, DTED and satellite imagery, 3D models, and Base Object Models components can be accessed and discovered autonomously via CODE-Net by individual tools.   Algorithms and services that provide transformations of FOMs, foreign and non-standard data formats and structures can be provided through this service as well.   The opportunities are virtually boundless in terms of the number of services and capabilities that can be provided.     5.3 Platform and Language IndependenceAs the implementation of CAFDE was limited to Windows (although the specification was platform independent), CODE-Net, including its implementation, is platform and language independent for applications that want to connect to the service.  It does not matter whether it is a Linux application, Java application or Windows application.  Using SOAP calls and XML messaging, a widespread variety of applications, repositories and other web services can independently and collective access one another through the SOAP-based CODE-Net server. 5.4 Security IssuesThere two general approaches to support security using XML and SOAP.   One method is to use the Secured Socket Layer (SSL) for protective exchange of data.   In this case the security protection is wrapped outside the XML message being exchanged.   The other method is to utilize a Digital Signature within the content of the XML message (or SOAP envelop).  In this case, the security protection is contained within the XML message being exchanged.  At this time, CODE-Net does not utilize or mandate the use of these methods, although, in time, it very well could support these and other security mechanisms.5.5 Other Distributed TechnologiesWe should mention again technologies such as the Common Object Request Broker Architecture (CORBA) and Distributed Component Object Model (DCOM).  These are both popular distributed object-computing infrastructures that can provide the type of capability supported by SOAP.  However, using CORBA or DCOM requires a significant amount of integration effort – it’s harder.  Furthermore, CORBA, which is more platform-neutral than the Windows-based DCOM, often requires an expensive development and run-time licensing cost.   SOAP is a more effective and attractive mechanism for distributing computing and collaboration within the HLA federation development environment.  6.0 ConclusionCODE-Net provides a viable mechanism for supporting collaboration and automation through the Federation Development process.  It is a “next generation” web service infrastructure that leverages the concepts of the FEDEP among players, tools, repositories, and potentially other services.  With only a minimal number of tools that integrate with CODE-Net, we have successfully been able to demonstrate the ability to exchange Use Cases (requirements / scenarios), meta-data, and object models among a distributed environment.  CODE-Net supports both real-time and “store-and-forward” collaboration, allowing developers to work synchronously and asynchronously with one another.   It is highly recommended that next generation tools begin to take advantage of using and providing web services such as CODE-Net to facilitate better and faster federation development.   Tools and services such as CODE-Net are needed to fully support “well-managed collaboration” as identified within the FEDEP. 7.0 References[1] World Wide Web Consortium, Simple Object Access Protocol (SOAP) 1.2, Dec 2002, http://www.w3c.org.[2] Draft Recommended Practice for High Level Architecture (HLA) Federation Development and Execution Process (FEDEP) Mode, Draft 3, Simulation Interoperability Standards Organization (SISO), November 12, 2001.[3] CAFDE Specification, September 21, 2000, www.cafde.org.AcknowledgementSpecial thanks to Jane Bachman for her contributions to the design and preliminary implementation of CODE-Net.Author BiographiesPAUL GUSTAVSON has over twelve years of computer engineering experience supporting a wide variety of modeling and simulation, and software development efforts within the DoD community.  Paul has been one of the key software developer’s of OMSuiteTM, an HLA implementation tool suite that utilizes Use Cases, BOMs and OM Mapping, and is based on the HLA FEDEP and CAFDE architecture.  Paul is a member of the Simulation Interoperability Standards Organization (SISO) and has served as the chairman of the Base Object Model (BOM) Study Group and an officer of the Federation Development Process (PROC) Group within SISO.  He has authored and presented numerous papers within the M&S community and is a contributing author of the “C++Builder 5 Developer’s Guide”.    LARRY ROOT has over seventeen years of experience in the areas of Software Engineering, System Engineering, Technical Management, and Financial Management.  Most of this experience has been in support of the Naval Surface Warfare Center Dahlgren Division (NSWCDD), but most recently, it has been in support of the commercial development of tool suites.  These tool suites, and their integrated development environments (IDEs), provide data visualization and large-scale modeling and simulation (M&S) support to M&S efforts using DoD’s newly defined High Level Architecture.  This work has offered the opportunity for Mr. Root to push the edge of technology within the world of modeling and simulation, allowing his experience and contributions to act as a unifier in bringing together various technologies within the commercial and DoD M&S communities. STEVE GOSS has over twenty-seven years of military combat system experience with emphasis on modeling and simulation technologies, system engineering, system analysis, and test.  He has provided software engineering support in the development of OMSuite™, a collection of HLA tools used to support creation and maintenance of FOMs, SOMs and OM Mapping and Inspection.  He is also a member of the BOM Study Group within the Simulation Interoperability Standards Organization (SISO) and has published and presented several papers within the SISO community.  Steve also has provided software engineering support in the development of CoBRA, a coordinated battleforce replay and analysis environment.  This environment allows for the overlay, replay, visualization, and automated analysis of battleforce exercises from a battleforce perspective.  It is currently in use by such Department of Defense programs as the AEGIS Weapon System, the Gun Weapon System, and the Shipboard Gridlock and Auto-correlation System.MARK E. MCAULIFFE is a principal investigator in the Synthetic Environment & Technology Management Division for the U.S. Army Simulation Training Instrumentation Command (STRICOM).  Mr. McAuliffe has over twenty years experience in real-time simulation research and development, with the last nine years focused on distributed simulation technologies and standardization.CODE-Net WSDL Interface1 www.w3c.org1 www.w3c.org2 Draft Recommended Practice for High Level Architecture (HLA), Federation Development and Execution Process (FEDEP) Model, Draft 3, Simulation Interoperability Standards Organization (SISO), November 12, 2001.2 Draft Recommended Practice for High Level Architecture (HLA), Federation Development and Execution Process (FEDEP) Model, Draft 3, Simulation Interoperability Standards Organization (SISO), November 12, 2001.2 Draft Recommended Practice for High Level Architecture (HLA), Federation Development and Execution Process (FEDEP) Model, Draft 3, Simulation Interoperability Standards Organization (SISO), November 12, 2001.2 Draft Recommended Practice for High Level Architecture (HLA), Federation Development and Execution Process (FEDEP) Model, Draft 3, Simulation Interoperability Standards Organization (SISO), November 12, 2001.