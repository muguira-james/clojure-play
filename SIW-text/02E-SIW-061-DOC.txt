Performance Measurements of a HLA Component-based Fighter Pilot StationPaul KuiperArjan LemmersRené VerhageNational Aerospace Laboratory NLRAnthony Fokkerweg 21059 CM Amsterdam, The Netherlands+31 20 511 3721   www.nlr.nl HYPERLINK mailto:kuiperpj@nlr.nl kuiperpj@nlr.nl,  HYPERLINK mailto:lemmers@nlr.nl lemmers@nlr.nl,  HYPERLINK mailto:verhager@nlr.nl verhager@nlr.nlKeywords:HLA, performance, componentsABSTRACT:Based on the principles of the High Level Architecture, a component-based simulation architecture for a training system has been proposed by Fokker Space, TNO-FEL and the National Aerospace Laboratory NLR. The HLA concept has been extended to the level of simulation components. The simulation components are the building blocks for the federates and the federate is composed of various simulation components that interact using the same architecture and infrastructure as the overall HLA federation. The capabilities of this component-based simulation architecture were demonstrated in a project in August 2000. Feedback on the demonstration revealed that latency is considered as a possible threat to the application range of a HLA-based component architecture. Therefore the next phase of the project focuses on performance improvement especially concerning the delay and latency issues. Verification of the improved architecture performance will be performed by the NLR.Traditionally the NLR Flight Simulation Department is strong in high fidelity human-in-the-loop flight simulation. In recent years a high-performance network has been created between NLR’s military flight simulations in combination with computer generated forces using ITEMS and a connection between this high performance network and “external” simulations has been established based on DIS and HLA. Comparison of the component-based simulation architecture with the performance of the validated NLR flight simulation facilities will show the capabilities. The NLR Pilot Station has been restructured in accordance with the component-based concept and an experiment has been set up and carried out to measure the performance.In this paper first the component-based architecture will shortly be explained and it will be described how the Pilot Station has been divided into components. Next the set-up of the validation tests will be outlined. Finally the results of these tests will be discussed and conclusions will be drawn to what extension the component-based concept is validated and in what areas it will have its advantages.    1. IntroductionTo ease reusability and interoperability of simulation models on several levels Fokker Space, TNO-FEL and the National Aerospace Laboratory NLR have proposed a concept for simulation architecture for a training system. This component-based simulation architecture uses the principles of the High Level Architecture and extends it to the level of simulation components, while still remaining fully compatible with HLA. A Federate is composed of various building blocks, called simulation components, which interact using the same architecture and infrastructure as the overall HLA federation. This facilitates the independent development of Federate functionalities by dedicated area specialists and eases the reuse of such components. Simulation components communicate via a data-exchange middle-ware layer, called the Run-time Communication Infrastructure (RCI). The RCI is currently based on the HLA RTI 1.3 Interface Specification. Figure 1 shows a schematic view. The capabilities of this component-based simulation architecture were demonstrated in a project in August 2000. Feedback on the demonstration revealed that latency is considered as a possible threat to the application range of a HLA-based component architecture. Therefore the next phase of the project focuses on performance improvement especially concerning the delay and latency issues.  The goal is to explore the usability of a component-based structure for a typical high fidelity simulator such as NLR’s  Fighter Pilot Station.Figure  SEQ Figure \* ARABIC 1: Component-based ArchitectureTraditionally the NLR Flight Simulation Department is strong in high fidelity human-in-the-loop flight simulation. In recent years a high-performance network has been created between NLR’s military flight simulations in combination with computer generated forces using ITEMS and a connection between this high performance network and “external” simulations has been established based on DIS and HLA (reference [1]). Over the years the importance of consistency in a distributed environment was inevitable, as was the importance of minimising latencies within a simulator. Comparison of the component-based simulation architecture with the performance of the validated NLR flight simulation facilities is a good base for evaluation. In the next section some discussions on distributed simulation environments and their (performance) problems will be outlined. Then the elements of importance for each application domain will be identified and the evaluation parameters for each of the three domains will be defined.2. Consistency in a distributed environmentA major requirement for distributed simulations with real-time man-in-the-loop applications is to create a common and consistent presentation of the virtual environment among each federate and component. Due to message transmission delays, clock asynchronies among different simulation nodes and simulation time step of each node, together with the timeliness requirements of this kind of simulations, various inconsistencies may occur. This means that for example different participants may see the same entity located at different positions at the same (wall-clock) time. This phenomenon is called Time-Space Inconsistency and may cause inconsistent judgements among participants about the situation at wall-clock time t, what can lead to inconsistent actions. According to Zhou (reference [2] and [3]) these inconsistencies can cause the following problems in a distributive interactive application: Expectation Violation, Causal Order Violation and Divergence. Expectation Violation: After a participant takes an action, the participant expects the relevant outcome to be congruous with its real-life experience. This expectation can be so strong that violation of it will greatly degrade the application.Causality Violation: In real world, events happen according to their causal orders. Without the cause, the effect can never happen. Thus, the cause must happen before the event. If this causal order is violated in the virtual world, participants will feel the virtual world incorrect and in contradiction with its real-life experience. Divergence: The same action may result in different interpretations at different sites.  Besides the transmission delay and clock asynchrony, time-space inconsistency is also dependent on some fundamental parameters of the simulation application, such as the threshold and average update rate of DR algorithm, the dynamic properties of the moving entities, and human factors like minimum discernible distance and human reaction time. 2.1 Evaluation aspects of application domainsBased on the time-space inconsistency problems discussed in the previous paragraph and the hardware aspects of the distributed implementation we can distinguish three different application domains which each have their own demands:   Human Machine Interface (HMI) domainModelling & Simulation (M&S) domain Technical Implementation domain2.1.1 HMI domainAn essential part of flight simulation is the generation and display to the pilot in the simulator of a simulated perspective view of the outside world. The visual system receives position and attitude inputs from the dynamic model and must provide the out of the window view appropriate to each position and attitude. The same principle is valid for the avionics display except the fact that this display provides the pilot with a radar view and a Primary Flight Display (PFD). These displays stimulate the pilot to control inputs, and these control inputs lead to simulator responses, which will finally be represented in the displays. Delays in this closed loop must be as low as possible and are critical to the controllability of the simulated aircraft as given in reference [4].   The following elements are identified for this domain.controls to visual latencycontrols to avionics display latencydifference in latency between avionics display and visual 2.1.2 M&S domainWithin a distributed simulation environment the effects of data transmission delays and data losses can have a major impact on the differences between the true and perceived positions of the distributed simulation entities (reference [5]). This can be especially a problem for high performance entities interacting with each other (e.g. aircraft/munition). From this modelling and simulation point of view for interactions the following elements are of importance:the latency of remote entities (from a CGF) to visual (for targeting)the latency of remote entities to avionics (for detection by avionics systems)the latency of  actions (target lock, hit etceteras) to remote entities2.1.3 Technical Implementation domainLoads imposed on the network and on the CPU in general depend on scenario, (dead-reckon) algorithms and (communication) protocols. Network loading is based on increasing numbers of digital entities and their performance characteristics to investigate scalability. Recent years many research projects were performed to investigate the network load and to predict the bandwidth and CPU-load requirements for both configurations based on the DIS protocol and HLA/RTI based configurations (ref. [6]-[9]). With the results of these projects and a baseline of latency and performance characteristics of the simulation architecture it will be possible to identify requirements for network and CPU capacity and predict the simulation performance. From this implementation/technical point of view the following elements can be a constraint depending on the resources available:the I/O throughput (network load)the calculation need (CPU load)the memory size (memory use)  For all of these elements not only the (average) value is important but the minimum, maximum and variance also have a major influence on the usability.3. Experiment set-upThe Fighter Pilot Station (FPS) used for the project consists of five relevant major software components:Controls input component which acquires pilot inputs (actions)Aircraft dynamics component which calculates the aircraft movementsCGF component (Computer Generated Forces) which simulates “other” aircraftAvionics component which incorporates the instruments and display logic Visual component which drives the visual systemFigure 2: Models in Fighter Pilot Station,                 undivided set-upThese software components each produce data and/or use data from each other as indicated in figure 2 and 3.  The data elements that are distributed among the components are:Controls inputs divided into:Stick and throttle position (used by the aircraft dynamics)Switch positions (used by the avionics system)The ownship Aircraft State (position, orientation, appearance) used by the visual module for eye-point movement, by the CGF module for interaction with other aircraft and by the avionics module for display indications.The states of  “other” aircraft (position, orientation, appearance) used by the visual module for the movement of visual models in the outside world scene and by the avionics module for display indications (radar display).  Figure 3: Models in Fighter Pilot Station,                 Component-based set-upBoth the FPS (undivided) as the FPS based on components have the same basic data flow. There is no difference in connection with the hardware systems (controls, visual and avionics display). With the undivided FPS the data is distributed among the software modules on one host computer through Global Simulation Data which resembles shared memory. Also the software modules are triggered sequentially within the real-time simulation program PROSIM. Because of the fast shared memory communication the whole process is scheduled real-time at a high frequency of 50 Hz.For the component-based set-up the software components are not triggered sequentially but run independently of each other and they have their own frequency (free running). Each component is scheduled real-time within its own simulation program PROSIM. To communicate between the software components on the separate host computers the component based FPS uses a middle-ware layer based on HLA, called the Run-time Communication Infrastructure (RCI). The RCI currently uses DMSO’s RTI through Ethernet.  3.1 The different latenciesThe latencies can be divided into the following categories:Component hardware to software latency or vice versaProcessing time (CPU time to process the data)Software component to software component latencyThe first category is the same for both the undivided FPS as for the component based FPS because they both use the same hardware connections and are not influenced by the dividing of FPS into components. These hardware latencies have been analysed and measured in the past (reference [10]) and therefore these have not been measured again but are assumed as given.The average processing time is determined by multiplying the average processor load (%) with the cycle time (milliseconds). The average memory load is measured and no-growth is monitored using the system tool top.The last category (s/w to s/w latency) is the essential point in a component-based set-up. This is measured by sending a timestamp together with the data flow and calculating the difference in time between the send time stamp and the time this data is received, using a common time base. Also the time stamp increase with each sample is measured as an indication of the smoothness of the data, and a counter is used for the controls data-flow to detect lost updates or out of order updates.  The network load and bandwidth also influence the latency of this last category. There were no suitable tools available to determine the momentary network load in relation with the simulation timing data, only the average network load was measured (in packets/s) with system tools such as top and netstat.The different latencies are expressed in time lines in the following figures. For the Controls to Visual latency this is as follows (figure 4): EMBED PowerPoint.Show.8  Figure 4: Controls to Visual latency timelineThe Controls to Avionics display has two timelines, one for the effect of stick and throttle inputs (data-flow 1a – 2 in figure 3) and one for switch input that goes directly from the Controls component to the Avionics component (data-flow 1b in figure 3). These timelines are given in figures 5 and 6 respectively.The latency of remote entities (from a CGF) to visual (for targeting) and the latency of remote entities to avionics (for detection by avionics systems) are similar to figure 6.As can be seen in the figures the software component to software component latency is encountered twice in both the stick to visual path and in the stick to avionics display path. This is not the most desirable situation, especially for the stick to visual path, but was a conscious choice for this experiment to explore the effects. With operational simulators the critical path(s) should be carefully identified and such double latencies herein should be minimised. This means that the choice of components should be made carefully while keeping in mind the overall aim and requirements of the system to be built. EMBED PowerPoint.Show.8  Figure 5: Controls to Avionics display latency timeline EMBED PowerPoint.Show.8  Figure 6: Controls to Avionics display latency timeline, switches data-flow 1b3.2 Experiment executionMeasurements were done with two different numbers of players:runs with ownship only (one player)runs with two to eight players (ownship and 7 other aircraft)  The runs were done with all components running at the same frequency of 10, 25, 40 and 50 Hz respectively.Timing data was sent along with the data so that the latency between the components could be measured.  This latency contains not only the transmission latency but also the latency resulting from the components running independently from each other with their own frequency.Relevant parts of RPRFOM v1.0 were used as bases with addition of attributes for the timing data. A class was added for stick and throttle data and interactions were added to implement events for the switches data-flow (1b in figures 2 and 3). The RTI software used was RTI 1.3NGv3.2 (IRIX-6.5-MIPSpro-7.2-mips3-opt-mt). The default RTI configuration was used except for the event retraction options in the federation section. These were set to zero to minimise memory use.The specifications of the computers used are given in the following table:FederateControls& VisualAircraft DynamicsAvionicsComputer typeSGI OriginSGI ChallengeSGI O2Processor4 x R12K4 x R4400R10KProcessor speed (MHz) 270100225Memory (MB)5126464OS IRIX 6.5.6IRIX 6.5.5IRIX 6.5.5Table 1: Computer systems specifications4. Experiment resultsThe isolation of the software modules and building of separate components with these modules was fairly straightforward and could be assigned to different developers without problems.  The integration of the components was done in a fairly short time and no difficulties with the components were encountered during the integration. This is one of the strong points using HLA in combination with a middle-ware layer such as RCI. The test runs were successful up to 25 Hz (see figures 7 and 8). Higher frequencies gave an unacceptable build-up of latency. This was mainly due to restriction in processing power and computer memory of the older computer systems. The 100 Mhz R4400 processor in combination with the limited amount of 64 Megabyte of memory proved to be inadequate to handle higher data rates. The CPU load for the RTI application on this type of processor was high even with one player (ownship) only, ranging from 30% at 10 Hz to above 70 % at 25 Hz .The CPU load was not always stable enough at 25 Hz or higher.  Also addition of a player gave 10-15 % increase in CPU load. Presumably the RTI needs lots of CPU power to do it’s work.Figure 7: CPU loads of RTI application on different                 processors at different frequenciesFigure 8: CPU loads of RTI application on different processors with different number of players @ 10 HzThe memory use of the RTI application was also high with approximately 165 MB, which was workable but caused too much memory swapping and growth of memory use when the CPU load of the RTI application rose above 65-75 %. On the R12K type of processor these type of problems were not encountered and the CPU load was much lower (5 to 20 % respectively). Due to the fact that the measured data has not been analysed yet, no further conclusions can be made yet. 5. Conclusions and lessons learnedThe described component-based architecture has been achieved with relatively little effort. Data exchange with frequencies higher than 25 Hz was not possible due to high CPU and memory load on older computers. When selecting computer systems for use with HLA the old rule applies: the faster the better. Older computers systems should only be used when certain that they will not cause bottlenecks.6. References[1]	MAPLESIM: Tailored solutions for networking legacy flight simulators; a HLA based approach, Arjan Lemmers and Paul Kuiper paper AIAA 2001-4127, AIAA Modeling & Simulation Technology conference, Montréal, Québec, Canada, August 2001 [2] 	Time-Space Consistency in Large Scale Distributed Virtual Environment, Suiping Zhou, Wentong Cai, Francis B.S. Lee, Stephen J. Truner, School of Computer Engineering, Nanyang Technological University, Singapore HYPERLINK http://www.ntu.edu.sg/home/asspzhou/ts.ps http://www.ntu.edu.sg/home/asspzhou/ts.ps[3]	Consistency in Distributed Interactive Applications, Suiping Zhou, Wentong Cai, Francis B.S. Lee, Stephen J. Turner, paper 01E-SIW-003, Simulation Interoperability Workshop, Harrow, UK, June 2001[4]	Flight Simulation, J.M. Rolfe and K.J. Staples, Cambridge Aerospace Series, 1986, Cambridge, UK[5]	Report on Architectures for Simulation Interoperability involving High Performance Flight Simulations (UC), N. Smith, DERA/AS/FMC/CR980386/1.0, August 1998[6]	A Comparison of HLA and DIS Real-time Performance, LT. Stephen Purdy and Roger Wuerfel, paper 98S-SIW-042, Simulation Interoperability Workshop, Orlando, March 1998[7]	PDU for DIS versus HLA-RTI: A Load Perspective, Hans-Peter Menzler, Hartmut Ufer, paper 99S-SIW-076, Simulation Interoperability Workshop, Orlando, March 1999[8]	Bandwidth, Latency, Jitter, and Synchronization: A High Fidelity Simulation Perspective, Ronald Bertin, paper 01S-SIW-096, Simulation Interoperability Workshop, Orlando, March 2001[9]	Lessons Learned in Virtual Strike Warfare Environment (VSWE) 7, Bret Givens et.al., paper AIAA 2001-436, AIAA Modeling & Simulation Technology conference, Montréal, Canada, August 2001[10]	Opening up full-mission flight simulation for networked simulation exercises; experiences with advanced distributed simulation, Paul Kuiper and Arjan Lemmers, paper AIAA 2000-4398, AIAA Modeling & Simulation Technology conference, Denver, USA, August 2000Author Biographiesing. P.J. (PAUL) KUIPER is a senior project engineer at the National Aerospace Laboratory NLR. He graduated in 1983 at the Technical Highschool Rijswijk in Mechanical Engineering and after that he studied 2 years Aerospace Engineering at the Delft University of Technology. In 1990 he joined the NLR. He is involved in software design and development of real-time simulation computer systems and is the project leader of MAPLESIM.ir A.J.J. (ARJAN) LEMMERS is a research engineer at the National Aerospace Laboratory NLR. He graduated in 1996 at the Delft University of Technology in Aerospace Engineering. After his study he joined the Royal Netherlands Navy as a research fellow and lecturer. In 1998 he joined the NLR. He is involved in projects dealing with distributed simulation. His research interests include modelling and simulation of air operations with particular interest in applying Distributed Simulation and HLA.ing F.R. (RENÉ) VERHAGE is an aeronautical software engineer at the National Aerospace Laboratory NLR. He graduated in 1997 at the Haarlem University of Professional Education (Hogeschool Haarlem) in Aerospace Engineering. In 1999 he started his current (part-time) study Computer Science at the Leiden University. After gaining three years of experience in telecommunications IT, he joined the Flight Simulation department of the NLR in 2001. Within this department he is involved in various challenging software projects, like the design and development of HLA implementations. EMBED Excel.Sheet.8   EMBED Excel.Sheet.8  