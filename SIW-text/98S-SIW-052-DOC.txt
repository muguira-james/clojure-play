Prototype Distributed HLA C4I Simulation Environment for System Performance Modeling                                                                                                                                  Lawrence H. GoldbergU.S. Army, Communications-Electronics Command (CECOM)C2SID M&S / C3IFort Monmouth, NJ 07703-5202732-427-2837goldberg@doim6.monmouth.army.milLarry DworkinMonmouth UniversityWest Long Branch, NJ 07764-1898732-571-4491dworkin@moncol.monmouth.eduKeywords:C4I, HLA, Open Systems, SPM, Federation, Federates, SOM, FOM, Object Oriented, AMASE, RTI ABSTRACT: The current family of system performance models used by CECOM need enhancement in the following areas:They are not yet HLA compliant as now mandated by the DoD master plan.  The cost and time associated with the creation of new simulations have been high.The reuse, flexibility and extensibility of these models must be improved.The ability to link models of different character and views (e.g., Research, Development & Acquisition (RDA), Advanced Concepts Requirements (ACR) and Training, Exercises & Military Operations  (TEMO) was not an original objective of the M&S community.The desire to link modeling environment to real test equipment (e.g., the Digital Integration Laboratory (DIL)) has created special interface problems.The rewriting of existing models currently in GSS, and the development of new models in OPNET are costly, time-consuming and complex processes.Available funding of future modeling efforts is becoming more limited.The use of modeling and simulation within the military is intended to save money, reduce risk and shorten development time.  Both performance modeling and “DIS” type modeling have received extensive funding and attention as a result.  The failure to reuse existing models and create future HLA-compliant models can have a serious economic impact on future C4I systems development.  It is, therefore, imperative that a methodology and architecture be developed to overcome the issues raised above.The US Army CECOM, and Monmouth University (MU), have been jointly working under a Cooperative Research & Development Agreement (CRDA) to address these issues. This paper describes the work accomplished on a four year ARO sponsored program, AMASE, and how it provides the methodology and architecture required.1.0  BackgroundFour years ago the Army Research Office (ARO) funded MU to develop a modeling environment and architecture to support reuse, model interfacing and a variety of support tools.  This resulted in the Advanced Modeling, Analysis, Simulation and Engineering (AMASE) environment.  The resulting architecture is very similar to the HLA now adopted as a DoD M&S standard.  It is object oriented, has a run-time infrastructure controller, a specified public interface and essentially conforms to the HLA rules. We are examining the use of AMASE to form the kernel of a performance model federation that can be used to link legacy models and simulations via HLA-compliant interfaces.  In addition, AMASE contains a set of tools and modeling federates (members of the federation) that will permit the development of future simulations that will also be HLA compliant.	A prototype HLA AMASE based environment will be hosted on CECOM computers in the M&S laboratory and utilized to interface legacy performance models as well as develop new ones for TEMO, ACR and  RDA.Subsequent papers will be written documenting developing products.1.1  Objective of  PaperThis paper describes the establishment of a prototype development environment for integrating legacy and new performance models for TEMO, ACR & RDA. The work is based on a CRDA between MU & CECOM.  Emphasis will be on reuse & HLA compliant products.  The prototype environment will be based on the ARO funded, government owned, Open Systems, AMASE, and on-going efforts in GSS and OPNET.  This environment will also enable enhanced VV&A, and the interfacing of the Tactical Internet Model (TIM) with C2, SA & C2 Protect functions.  The products of this development may include reference SOMs & FOMs.1.2  Deficiencies in Current C4I M&SThe evolution of M&S infrastructure for Research, Development, and Acquisition (RDA), Advanced Concepts Requirements (ACR), and Training, Exercises, and Military Operations (TEMO) has not followed a single, well-defined paradigm. Consequently, most existing models, used in Constructive, Virtual, and Live (CVL) simulations, represent many of the same C4I functions but, having been built independently, have dissimilar model architectures and data structures; dissimilar languages and operating systems; and even dissimilar algorithms.  1.3  Current Army Needs [1]A cost effective transition of existing performance models to an HLA-compliant modeling environment.Support of a linkage of the RDA, ACR and TEMO domains.An Open Systems interface that facilitates and enhances VV&A.A linkage of real (e.g., DIL), virtual and constructive environments. The establishment of a software development infrastructure that includes configuration management, necessary hardware and software environments and defines procedures for conducting VV&A and linkage to the CECOM DIL(e.g., connect to real test equipment, or other simulators).An HLA based environment which facilitates the development and implementation of C2 Protect tools.	1.4  The Advanced Modeling, Analysis, Simulation and Engineering (AMASE) Environment [2]	In 1993, the Army Research Office (ARO) awarded a grant to Monmouth University (MU) for $2.3M to develop a modeling environment and architecture to support reuse, model interfacing and a variety of support tools.  This resulted in the AMASE environment.  Although this was an effort independent of the work being conducted by DMSO and STRICOM, the resulting architecture is similar to the HLA now adopted as a DoD M&S standard.  It is object oriented, has a run time infrastructure called a controller, a specified public interface and essentially conforms to the HLA rules.  AMASE will form the kernel of a performance model federation that can be linked to modified legacy models and simulations via HLA-compliant interfaces.  In addition, AMASE contains a set of tools and modeling federates (members of the federation) that will permit the development of future simulations which will also be HLA compliant.  This effort includes some modifications to legacy model architectures and interfaces that have been written using GSS, OPNET, Q+ and other tools.  This will permit extensive reuse of existing models. 1.4.1  Queueing Network Performance Engineering Tool (QNPET)QNPET, a toolset originally developed for the Modeling, Analysis, Simulation and Engineering (MASE) environment (predecessor of AMASE), is provided as part of AMASE.  It was the first tool for AMASE, is simple and easy to use, ideal for students and beginners but is also a very useful high level tool for experienced performance analysts.Capabilities include: Builder/Editor;  build, save, retrieve, edit, outputConsistency Checker;  ensures model meaningful to load, checks stability of networks, consistency of resource seize/release, split/join Analyzer; supplements Consistency Checker, solutions for open networks Simulator;  event/delta/continuous run modes, final statistics, pause with parameter change Engineer’s assistant; analytic tools, engineering & evaluation capabilities Browser: browse, print model representation, notes, filter results Help;  Hypertext based, access all levels, explanation, guidance, library & tutorials1.5  The AMASE based Run Time Infrastructure (RTI) [2]PRIVATE The AMASE environment is an open, object-oriented environment consisting of a variety of integrated toolsets for modeling, analysis, simulation and engineering in many areas including computer and communications systems, information systems, business operations and production systems. A primary objective of this environment is to promote software reuse, particularly the reuse of simulation models that can often be extremely costly to develop, in terms of both money and time. The AMASE environment provides the mechanism for a user to build a “supermodel” (federation) by making use of the combined capabilities of an integrated set of simulation modules (federates) from its library – as well as providing a variety of tools and utilities. AMASE specifications include minimal interface requirements for modules to be added to the system library. Such modules are registered with AMASE at a given compliance level and as belonging to a given communicating class. In this way, AMASE can integrate a variety of non-homogeneous modules so that the user can make effective use of their combined capabilities at a level commensurate with the problem at hand.  Some key distinctive features of AMASE include:An integrated toolkit supporting various aspects of performance analysis and engineering, Queuing Network Performance Engineering Tool (QNPET)An open system view supporting the addition and integration of externally developed modules Heterogeneous module support allowing integration of disparate modulesModular model development supportHierarchical modeling supportSupport for distributed simulation and Programmable nodes. While not all of these features are independent, their combination provides an excellent basis for fostering module reuse – one of the primary objectives of the AMASE environment.In the following, some of the key features of the AMASE design are presented, particularly as they provide support both direct and indirect, for the reuse of simulation models. That is, they are either features that directly support reusability, e.g. by making it easy to include a module for reuse, or they indirectly support reusability by providing a highly desirable environment for modeling and simulation.1.5.1  Integrated Environment with Multiple Toolstc  \l 4 "e.3.1.1.	Integrated Environment with Multiple Tools"In AMASE, one develops (graphically) a common model description from which analytic models can be invoked to get quick (approximate) results or runs detailed simulations. Engineering tools are available for preliminary sizing of system resources (e.g., buffers). Browsers provide customizable views of results. In the case of basic modules representing elements of a generalized queueing  network, analytic approximations are used. However, for some of the more complex library modules (e.g. an ATM switch) approximate analytic methods are also embedded in the module – along with its simulation capabilities. AMASE also provides for the concept of a savable "problem".   A problem consists of a model description plus one or more named parameter files for each of the modules, as well as the database of all resulting runs that have been made with this model. The user can readily attach notes to each problem to facilitate documentation.1.5.2PRIVATE   Open System Concepttc  \l 4 "e.3.1.2.	Open System"The paradigm for integratable modules is externally controllable objects, with enhancements (standard interfaces) to promote reusability. Modules need only support a small set of control functions, e.g., create(), initialize(), run_till() ..., in order to be integratable.  Such modules could be written in C++ or have a suitable C++ control wrapper.1.5.3  Heterogeneous Module Supporttc  \l 4 "e.3.1.3.	Heterogeneous Module Support"When modules are “registered” in the submodel library, they must register their communicating class, which basically specifies the structure of the transaction (message) that they use to communicate. All communicating classes must support a common, required part, but they can add an optional arbitrary part. By default, the system handles the conversion for transactions flowing between modules of different communication classes, although the user may also "customize" a communication adapter.1.5.4  Modular Supporttc  \l 4 "e.3.1.4.	Modular Support"All of the modules within the library are capable of communicating with all other modules and can be replicated as often as desired. In addition, any simulation model built within the environment automatically becomes a module itself that can thus be linked to other modules to form a “super” model. PRIVATE 1.5.5  Hierarchical Modeling Supporttc  \l 4 "e.3.1.5.	Hierarchical Modeling Support"Within a “super” model, one can readily interchange a high level, possibly analytic module with a low level, detailed simulation module. This is made possible by the modular support and system provided communications adapters.PRIVATE 1.5.6  Distributed Simulation Supporttc  \l 4 "e.3.1.6.	Distributed Simulation Support"Modules can be run on separate platforms under several “synchronization” methods.  For example: In lockstep mode, which would provide no potential speedup for multiple processors,  Limited error mode, where designated modules are allowed to simulate the “future” with the system ensuring the resulting errors are kept within designated bounds, and, Partial or full rollback mode--if at least some modules support rollback.PRIVATE 1.5.7  Programmable Nodestc  \l 4 "e.3.1.7.	Programmable Nodes"Users can, of course, write their own modules, e.g., in C++, however, the system also provides specialized programming features for various nodes where the user can modify system modules in very selective ways - and not introduce programming errors. For example, the user is given macros at certain server nodes to allow him to implement user specified service disciplines. As noted, the programmable adapters are an essential tool for supporting hierarchical modeling.1.6  AMASE Compliance with HLA Rules [2]The AMASE modeling, analysis and simulation environment is essentially HLA compliant in that it either currently meets all HLA rules or can be readily enhanced to do so. The key HLA rules are divided into two categories: 1) those pertaining to federations and 2) those pertaining to federates. Both sets of rules are pertinent to AMASE since it is both an environment for building federations and it contains a library of federates (currently under construction). These two sets of rules, and how they relate to AMASE, are discussed below.1.6.1  PRIVATE Rules for Federationtc  \l 4 "e.3.2.1.	Rules for Federation"The first five HLA rules for federations are summarized with AMASE compliance discussed after each rule.Rule 1: Federations shall have an HLA Federation Object Model (FOM), documented in accordance with the HLA Object Model Template (OMT). AMASE Compliance: While it has not specifically used the OMT, AMASE is a highly structured environment (all of the tenants of object-oriented design have been followed) for building federations and as such it should take a minimal amount of effort to build the required documentation in the appropriate OMT format. Rule 2: In a federation, all representation of objects in the FOM shall be in federates, not in the runtime infrastructure (RTI).AMASE Compliance: The AMASE architecture in Figure 1 shows clearly the separation of concerns. AMASE’s RTI is purposely made as lean as possible. The Central Control (CC) is essentially a message-processing agent. It receives messages from the Graphical User Interface (GUI) e.g. to build, initialize, run a simulation of a confederation. In addition to a global clock, it maintains two lists, a Pending Message list (PM list) and a Federate Event list (FE list). It sends / receives messages from the federates (and the GUI) coordinating the simulation timing. There are no simulation objects in the RTI.Rule 3: During a federation execution, all exchange of FOM data among federates shall occur via the RTI.AMASE Compliance: As shown in Figure 1, all federates must communicate via the RTI. Indeed, since the federates are allowed to be in different communicating classes  (i.e., exchange different message objects) the RTI must relay messages which enables it to convert the format when appropriate.Rule 4: During a federation execution, federates shall interact with the runtime infrastructure (RTI) in accordance with the HLA interface specifications.AMASE Compliance: AMASE has a highly structured interface specification that all federates must comply with to ensure that they are plug compatible within AMASE. These specific (HLA) interfaces are the only means for federates to communicate with the RTI. Figure 1.  [2]LF = Local FederatePM = Pending Messages ListFE = Federate Event ListCC = Central ControlRF = Remote FederateRTF = Run Time InterfaceGUI = Graphical User InterfaceRule 5: During a federation execution, an attribute of an instance of an object shall be owned by only one federate at any given time. AMASE Compliance: If the developers of the federates adhere to this rule (all library federates in AMASE do) then the AMASE RTI will ensure that the federation does also.Rules for federates, and AMASE compliance statements for each, are presented below.Rule 6: AMASE Compliance: The specifications that AMASE provides for the addition of library simulation modules (federates) is highly structured and can readily be translated into the appropriate OMT format.Rule 7 -- Rule 9 AMASE Compliance: These rules essentially provide for the capability of an orderly exchange of data, objects, etc., during runtime via the RTI facilities. Again, the interface specifications and parameterization of AMASE library modules is structured appropriately for supporting these rules.Rule 10:  AMASE Compliance: With AMASE the use of a Local Federate stub (LF stub – see figure 1) not only allows for remote execution of a federate, but also allows for a variety of simulation synchronization methods. The stub contains both the needed communications capabilities and the simulation control for the desired mode. From the main RTI’s viewpoint, all federates reside locally and are running in a synchronous simulation mode. The stub logic can be configured to run in a synchronous simulation mode as well as in a bounded event time error mode (a new mode) or in rollback mode.2.0  Utilization of the Prototype Distributed HLA C4I Simulation Environment2.1  ApproachThe AMASE environment will be demonstrated to serve as the run time infrastructure (RTI) that assures HLA compliance and the necessary interface to the modified legacy models and current virtual and constructive models.Legacy models and simulations using GSS, OPNET, and other code will be modified along with existing relevant databases and appropriate shells built, that are compliant with HLA rules and templates.Needed changes to existing simulations in GSS and OPNET, Queuing Network Performance Engineering Tool (QNPET) (the tools which come with AMASE) and the AMASE environment, will be recommended, so they can meet future simulation applications in a cost-effective manner.Necessary interface requirements and procedures to permit simplification of VV&A and establish the infrastructure needed for configuration management and linkage to the DIL will be addressed and evaluated.Fundamental to this work is the development of a modeling environment and architecture that permits the reuse of current performance models and simulations, provides a basis for building new models and simulations in a cost-effective manner, and permits the linking of  these models with each other and other classes of simulations (e.g., virtual and constructive man-in-the-loop).2.2  Prototype RTIThe AMASE environment will be demonstrated to serve as the run time infrastructure (RTI).  Initially, stubs will be developed with QNPET, representing performance models to be interconnected / interoperable.  The stubs will then be systematically replaced with real SPMs, e.g. the Next Generation Tactical Internet Model (an SPM simulator written in GSS) and possibly, an OPNET based C2 Protect model. 	2.3   Development of Standard InterfacesLegacy models and simulations using GSS, OPNET, and other code will be modified to provide RTI interfaces (e.g., external controllable objects) and standard, AMASE compatible, OO interfaces.  By direct coding or by using C++ wrappers.  OPNET modifications would have to be made with MIL 3 (owners of OPNET) consent / cooperation and agreement.2.4  New Interface requirementsChanges to existing and future simulators will be addressed.  Changes to existing simulations in GSS and OPNET, QNPET and the AMASE environment, will be recommended, to enable them to meet future needs, and perform properly under HLA.2.5  Interface Requirement ProceduresInterface requirements and procedures will be established which enhance interoperability, simplification of VV&A, configuration management and linkage to the DIL.  This will include exhaustive testing and assurance of full HLA compliance.2.6  Application of the Prototype C4I EnvironmentThe environment will be applied to solving real problems e.g., C2 Protect for the Tactical Internet. This will demonstrate an architecture that provides a basis for building new models and simulations in a cost-effective manner, and permits the linking of these models with each other and other classes of simulations (e.g., virtual and constructive man-in-the-loop).  Target systems are Force Battle Command Battalion & Below (FBCB2) and First Digitized Division (FDD).	3.0  Summary and Conclusions We have defined a Prototype Distributed HLA C4I Simulation Environment for System Performance Modeling.  It will support the development, integration and evaluation of C4I systems in the Research, Development and Acquisition, Advanced Concepts Requirements and Training, Exercises and Military Operations domains, in a synergistic manner, for Constructive Virtual and Live simulations.  The Prototype will support evolving Army C4I M&S efforts under a strategy for transitioning current C4I performance models to HLA-compliance, while developing new HLA federates and federations. The objective is to establish a development environment based on proven, Government owned, Open Systems, demonstrated technology.  It will also eliminate current deficiencies in C4I performance models, help evolve C4I M&S toward cost effective products, training, testing and rapid prototyping. Command & Control will be enhanced and protected. AMASE will reduce duplication, enhance reuse, reduce cost, and accelerate system development and evaluation, and has the potential to integrate existing legacy models that do not conform, currently, to the HLA guidelines.Additional refinements are being developed, tested and added to the AMASE environment.  The effort will reach completion by the spring of 1999.4.0  References[1]  Larry Goldberg, Paul Barr, Bob Greenfield, John Santapietro, Joe Lacetera, Larry Dworkin:  “Prototyping a C4I Common M&S Environment for Developers and  Users” 15th DIS Workshop, 16-20 September, 1996.[2] Larry U. Dworkin, Albert A. Fredericks, Jose L. Ucles, “Transition to Objective C4I Modeling / Simulation Development”  Monmouth University (White Paper),  15 July, 1997.Author BiographiesLAWRENCE GOLDBERG is an Electronics Engineer & Computer Scientist at the US Army Communications, Electronics Command, Ft. Monmouth, NJ.  He is currently working in C2 Systems Integration, C3I M&S.  Mr. Goldberg is a member of the RDE PRP, and co-author of reference [1].LARRY DWORKIN is currently, Director of the Center for Technology Development and Transfer at Monmouth University, under which AMASE has been developed.  Dr. Dworkin is co-author of reference [2].