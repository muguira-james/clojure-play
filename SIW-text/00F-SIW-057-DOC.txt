A Knowledge-Based Approach for Collaborative Modeling and Simulation for SpacecraftDavid P. SilberbergAndrew D. GoldfingerLien T. DuongJohn R. GershMartin L. GomezJohn W. Hunt, Jr.Anthony R. Nardo, Jr.Gabe D. RogersFrancis B. Weiskopf, Jr.The Johns Hopkins University Applied Physics Laboratory11100 Johns Hopkins RoadLaurel, MD 20723-6099240-228-6231, 240-228-5748, 240-228-7502, 240-228-5503, 240-228-5946, 240-228-8615, 240-228-8615, 240-228-4557, 240-228-7298, 240-228-5041 HYPERLINK mailto:david.silberberg@jhuapl.edu david.silberberg@jhuapl.edu,  HYPERLINK mailto:andy.goldfinger@jhuapl.edu andy.goldfinger@jhuapl.edu,  HYPERLINK mailto:lien.duong@jhuapl.edu lien.duong@jhuapl.edu,  HYPERLINK mailto:john.gersh@jhuapl.edu john.gersh@jhuapl.edu,  HYPERLINK mailto:martin.gomez@jhuapl.edu martin.gomez@jhuapl.edu,  HYPERLINK mailto:jack.hunt@jhuapl.edu jack.hunt@jhuapl.edu,  HYPERLINK mailto:tony.nardo@jhuapl.edu tony.nardo@jhuapl.edu,  HYPERLINK mailto:gabe.rogers@jhuapl.edu gabe.rogers@jhuapl.edu,  HYPERLINK mailto:frank.weiskopf@jhuapl.edu frank.weiskopf@jhuapl.edu Keywords:Aerospace, Spacecraft, Collaborative design, Knowledge-based design, Standards, Knowledge sustainmentABSTRACT: The Johns Hopkins University Applied Physics Laboratory is developing a knowledge-based approach to standardizing spacecraft modeling and simulation as well as sustaining design and design-process knowledge. The approach supports seamless inter-organizational collaborative development, mixed-fidelity distributed simulation capabilities, plug-and-play capabilities to support rapid prototyping and software reuse, and design reuse. The architecture enables spacecraft designers from multiple organizations to represent designs using familiar tools and to rapidly integrate them into a knowledge-based representation. Since design components are based on standards and the knowledge base is platform-independent, its contents can be used to generate a federated simulation that runs on multiple distributed simulation platforms. Finally, the knowledge base represents history, information, and experience with designs and design components to enable knowledge sustainment tools to assist spacecraft designers in their design tasks.1. IntroductionSpacecraft design has traditionally been a slow and tedious process [1][2]. The engineering design task typically is divided into subsystems and delegated to multiple teams of designers. Throughout the design process, simulations are used to examine the feasibility of the designs. Since subsystem simulations are typically not interoperable, design teams periodically share simulation results with other design teams to ensure seamless and accurate system integration. As problems are discovered, the designs are iterated upon until an overall system design is reached.Our vision is to accelerate the spacecraft design process through a knowledge- and standards-based architecture that enables groups of designers to express their ideas using familiar design mediums. The design concepts are transformed to an abstract representation in a knowledge base, which integrates the subsystem designs and enables distributed simulations to be generated in a platform-independent way. When the simulations are run, the results are displayed to the designers and stored in the knowledge base. The simulation results are used in conjunction with knowledge sustainment tools to help direct designers to improved designs.The concept of operations is simple [3]. A designer gets an idea for a subsystem design. Using knowledge-sustainment tools, he examines similar designs to understand those that were successful in previous missions. Now he starts the design based on insights from previous designers. Which components should he use? Several vendors offer components that are appropriate in the design. He downloads the vendors’ component simulations and descriptions. He places the simulation software on a machine to be used later and incorporates the components’ descriptions into the knowledge base. Then he creates his design by selecting the components from the palette of his design tool and linking them according their intended functionality. When the design is completed, it is stored in a knowledge base. In turn, the system generates the necessary directives to a distributed simulation platform. The simulation is run and the designer reviews the results. The designer annotates the knowledge base to describe the successes and failures of the design run. To improve the results, the designer tweaks the design or replaces some of the components and tries again until the subsystem design is complete.Subsystems are integrated by linking and merging subsystem designs using a design tool. The process is facilitated by abstract knowledge- and standards-based representations of the design. Simulations are automatically generated with a push of a button and are run to identify the successes and to detect the anomalies of the design. The system design is iterated upon until the simulations work perfectly under the constraints of the system requirements. During the design process, the knowledge base is annotated to provide assistance to future designers and speed up their design process.2. Architectural ComponentsA three-tiered knowledge-based architecture is employed to represent design knowledge from three domain perspectives [4]. The top layer represents knowledge from the perspective of the designers’ concepts and ideas. At this level, designers interact with design tools to represent the mechanical, electronic, and environmental interactions of spacecraft components. The middle layer of the architecture represents the knowledge base, which is itself represented by three tiers. The knowledge base represents the synthesis of spacecraft object-oriented modeling standards, knowledge of component capabilities, and designs as expressed by the subsystem-specific integration of the components that adhere to the standards. In addition, knowledge sustainment information enhances all tiers of the knowledge base.The bottom layer represents simulation knowledge that enables distributed simulations to execute. In addition, it represents captured knowledge from simulation results that can be analyzed by spacecraft designers.The ensuing sections describe the standards that enable the approach to operate and the three-tiered architecture in more detail.3. Design StandardsThe goal of developing spacecraft component standards is to facilitate the rapid development of mixed fidelity distributed simulations of spacecraft through a combination of both new and legacy models in a plug-and-play fashion. The standards are represented by an object-oriented decomposition that describes generic interactions of spacecraft components and the environment. Components that adhere to standards will inter-operate in well-defined ways to facilitate the design and simulation to be performed in a plug-and-play fashion. The standards are also extensible to encourage ingenuity and innovation. The first version of the standards [5] has been developed by studying a number of candidate spacecraft that represent a rich and varied set of systems from which standards are abstracted. The three such spacecraft that were studied are: Thermosphere – Ionosphere – Mesosphere Energetics and Dynamics (TIMED), and scientific earth orbiting spacecraft that is in the design phase, MSX, a large and very complex earth orienting spacecraft containing a variety of imaging sensors, and Near Earth Asteroid Rendezvous (NEAR), a deep space mission currently on its way to rendezvous with and orbit an asteroid. From these spacecraft, a set of standard object-oriented classes was defined that can be used to represent all three of the spacecraft. The interactions and interfaces between objects that inherit from these classes have been defined. Together the classes and interfaces constitute the set of standards. Spacecraft designers at NASA and Jet Propulsion Laboratory (JPL) will review the standards for general community acceptance.Based on the results of the standards study, we have created both a physical and functional decomposition of general spacecraft [6]. The functional decomposition represents a “has-a” hierarchy, which describes how a spacecraft is broken into smaller components. In contrast, the physical decomposition represents an “is-a” inheritance hierarchy, which describes how components inherit abstract classes that are common to other components.For example, an attitude system has-a star camera and has-a reaction wheel, while the reaction wheel is-a massive object and is-a powered object. The has-a, or contains, relationships describe the manner in which functional objects (such as the attitude system) are further decomposed into and interact with their components; while the is-a, or inheritance, relationship describes the physical nature of the objects. For example, the functional object attitude system contains and interacts with the component objects star camera and reaction wheel; and the reaction wheel object inherits the mass attribute from the massive object class and the power consumed attribute from the powered object class.The functional decomposition identifies at the highest level of a spacecraft the classical nine subsystems of spacecraft. These are the attitude determination and control, command and data handling, instruments/payload, mechanical and structural, navigation, power, propulsion, telecommunications, and thermal control subsystems. In addition, the environment is modeled as a class that interacts with the others. The subsystems are represented by abstract classes and standard interactions, which are expressed by software interfaces. Examples of interactions include mechanical, electrical, data communication, and physical.Each of the subsystems, in turn, is decomposed into standard types of components that have functionality. Great care is taken not to focus on specific or traditional system components. Rather, functionality that must be addressed by subsystems are identified and grouped into abstract component classes. In practice, however, the abstract components correspond to categories of components traditionally found on spacecraft. For example, an attitude control object may “have” and interact with component objects including reaction wheels, torque rods, thrusters, star trackers, gyroscopes, accelerometers, sun sensors, horizon sensors, magnetometers, and bus interface. A telecommunications subsystem object may “have” and interact with objects including antennas, receivers, transmitters, amplifiers, transponders, diplexers, power splitters, and RF switches. Various spacecraft components share common physical characteristics. For example, many components have mass, consume power, generate heat, generate electromagnetic noise, and communicate. These physical characteristics are embodied in the attributes the objects inherit from a number of standard classes. Thus, the massive object, powered object, and data source object components are abstracted into their respective classes. Each physical class is defined by standard interactions that are shared by all components that inherit them. The massive object provides inheritance of attributes that include mass, center of mass, size, position, and orientation. The powered object class provides attributes that include steady state power, maximum power, heat generated, e/m noise generated, and power status. Similarly, the data source class provides attributes that include update rate, data rate, response time, data storage, and on/off status. The methods of component classes describe their mechanical, electrical, data, and physical interactions with other components and the environment. Each of the class attributes has related methods that both set and return the attribute values. In addition, the standards not only specify how components are called, but also how they call other components. For example, the reaction wheel object, as shown in Fig. 1, inherits methods from the massive object and powered object classes, and also possesses the unique attributes setTorqueCommandVoltage(), publishWheelSpeed(), publishWheelMomentum(), and publishWheelTorque(). Similarly, star tracker objects, as shown in Fig. 2, inherit attributes from the massive object, powered object, and data source object classes, but also possesses the attributes setFieldOfView(), setSensitivity(), publishCoordinateError(), setNumberOfStarsTracked(), publishQuaternion(), and publishTime().Actual component simulations may inter-operate with a distributed simulation provided that they adhere to the standards. A component registers with the knowledge base by specifying the classes from which it is inheriting its methods. Thus, a high-fidelity simulation of a reaction wheel may specify that it inherits from and implements the methods of the abstract reaction wheel, massive object, and powered object classes. A low-fidelity simulation may only inherit from and implement the methods of the abstract reaction wheel class, but not the massive object and powered object classes. Dual use components may inherit from multiple abstract class objects. For example, a spacecraft chassis that is made from battery material that serves to power the spacecraft may inherit from both the power subsystem and structure subsystem classes. Component simulations are not restricted to implementing only standard methods and interactions. They may extend the standards by specifying their additional unique capabilities. However, since the simulations meet the base standards, they only need to specify the incremental interactions that are supported.Standard components may be assembled via a graphical user interface, such as shown in Fig. 3, that allows designers to select the components of their design (from a palette, perhaps), place them onto a design area, and connect them according to the intended design. The connections are facilitated by the knowledge of standard component interactions that represent method calls with standard parameters. After the design is completed, it is stored in the knowledge base, which validates the integration of the components. 4. Knowledge BaseThe knowledge base is the key to providing an environment for rapid and collaborative distributed simulations [7]. It embodies an abstract representation of both design and the simulation representations. It permits designers to rapidly develop subsystem designs and integrate them with other subsystems in a manner and expression that is familiar to their own domain. In particular, many design tools would fit well within our knowledge-based paradigm as long as it could be tied into the knowledge base. Thus, while is our project is not recommending a specific design tool, we are developing a prototype that exemplifies the types of functionality and design capabilities that we envision providing to collaborating spacecraft designers.The knowledge base represents three levels of abstract knowledge representation, as shown in Fig. 4 and modeled using the IDEF1X [8] notation. The top level represents knowledge of the standards. Such knowledge includes the abstract classes, their functional decomposition and physical decomposition hierarchies. In addition, it represents standard methods and interactions including the interoperability of the class methods, the standard parameters, and the parameter semantics. For example, the standards layer represents the massive object class with methods that include getMass(), getCenterOfMass(), getSize(), getPosition(), and getOrientation(); the powered object class with methods that include setSteadyStatePower(), getMaximumPower(), and getHeatGenerated(); and the reaction wheel class with methods that include setTorqueCommandVoltage(), publishWheelSpeed(), publishWheelMomentum(), and publishWheelTorque().The middle layer of the knowledge base represents knowledge of the components. In particular, component knowledge includes the standard abstract classes from which they inherit methods and interactions, their unique methods and interactions, component specific properties (e.g., weight, size, power capacity, etc.), and the platform on which the simulation software resides. The knowledge at this layer can be supplied by different sources, including manufacturer Web sites and component simulation libraries. Each source must provide list the abstract classes from which the simulations inherit their methods and interactions, their additional unique methods, and component specific properties. The bottom layer of the knowledge base represents specific designs assembled from components that are created based on the standards. The designs capture the interactions among components and subsystems as specified by the designer through the graphical user interface. The knowledge captured by the three layers describes the design in the abstract, which makes it feasible to extract specifications that can drive simulations on multiple simulation platforms, including the Department of Defense (DoD) High Level Architecture (HLA) [9] and the JPL Millenia Engine.  The knowledge base also captures information about requirements and experience with components and designs that can aid future designers. (This is not shown in Fig. 4). This knowledge will be described in the Knowledge Sustainment section of this paper.5. Distributed Simulation ArchitectureSince the knowledge base is an abstract representation of the standards, components, and designs, we can extract information to drive distributed simulations on a variety of platforms. However, to demonstrate feasibility, we have selected the HLA platform. Developed in the mid-1990’s by the Department of Defense (DoD) to support the interoperability and reuse of simulations, HLA was designed as a successor to the Distributed Interactive Simulation (DIS) protocol developed and used by the DoD to support war-gaming and training. Nevertheless, HLA is applicable to a broad range of functional areas including spacecraft design. It provides a general and uniform environment that supports simulations involving pure software representations, man-in-the-loop simulators, hardware-in-the-loop simulators, event driven simulators, and live components. It supports an object-oriented approach to the development of distributed and interactive simulation models and environments, which is the type of environment needed to support the goals of our spacecraft M&S standardization effort.HLA is rapidly being accepted as a general architecture for the specification of distributed simulations. In November 1998, the Object Management Group (developers of CORBA) adopted HLA as the Facility for Distributed Simulation Systems. Version 1.3 of the HLA specification has been submitted to the Simulation Interoperability Standards Organization for open standardization through the IEEE (IEEE Standard 1516) with approval in December 1999. A number of other countries are adopting HLA for their modeling and simulation activities.As a proof of concept for our knowledge- and standards-based approach, we are developing a simulation of the TIMED satellite’s attitude control system (ACS). The TIMED ACS includes flight computers (two Attitude Interface Units (AIU) and two Attitude Flight Computers (AFC)), actuators (four reaction wheels and three redundant magnetic torque rods), sensors (two star trackers, an internally redundant Inertial Reference Unit (IRU), redundant magnetometers and sun sensors), communication busses (using the 1553 protocol) and the rest of the spacecraft linked together, as shown in Fig. 5. Each of the component simulations currently is being adapted to the draft standards. The simulation components are being placed on distributed and networked computers to be used by various designs. We will create multiple versions of the ACS design and show how the design descriptions can be represented in the knowledge base. Then, we will demonstrate the extraction of Simulation Object Model (SOM) and (Federated Object Model) FOM files can automatically be extracted from the knowledge base to drive the distributed simulations on the HLA platform. Then, we intend to demonstrate the flexibility of the approach by using the design tool to create models of the MSX and NEAR spacecraft ACS and automatically generate their simulations.6. Knowledge SustainmentOur approach to knowledge sustainment is designed to preserve knowledge about the design and the design process with the goal of accelerating the design activity. While there are many aspects of knowledge sustainment that can facilitate the design process, we have chosen four areas that appear to have promise.The first aspect of knowledge sustainment that we are addressing is to link requirements to the design [10]. When a design is formulated and stored in the knowledge base, system and/or subsystem requirements are associated with the spacecraft components discussed in Section 3. Each stored requirement contains the parameter, and associated value, for which the requirement is specified.  When a distributed simulation is generated from the design, another simulation model is generated to capture the outputs of the parameters associated with the requirements and to save them to a file. A tool to determine the degree of compliance to requirements analyzes the file and the results are published to the designer and to the knowledge base for future use. The second aspect of knowledge sustainment that we are addressing is capturing knowledge about performance visualization. In particular, designers need to view the simulated behavior of designs in ways that best represent their design goals (mainly, satisfying design requirements). Knowledge of visualization needs of designers is captured in the knowledge base.   After the simulation output is collected in a file, a process is executed that uses the knowledge about performance visualization to display the simulation results to the designer in the preferred format.    Based on the results, the designer may choose to modify the design over multiple iterations to best meet the design goals.The third aspect of knowledge sustainment that we are addressing is a case-based reasoning capability that recognizes the context of the current design and retrieves/displays designs with similar context from the design database [11][12]. This context calculation is robust in this application since the design context is structured by the design standards discussed in Section 3.  A window of past designs will be available to the designer for review and the information associated with individual designs (e.g. requirements, annotation) will be available through pop-up windows.  This capability brings relevant past design cases to the designer’s attention.  The fourth aspect of knowledge sustainment that we are addressing is a tool to allow designers to annotate designs with information including design rationale, experiences with the designs, performance ranges, and viability for other missions. Designers will use this capability during all phases of their design activities both for researching other designers annotations and for making annotations useful to other designers on this and future missions.  The approach to this tool is based on the PROSUS (PROcess-based Support System) [10].7. Status and ConclusionTo date, we have developed the concepts and are in the process of creating a prototype to demonstrate their feasibility. Specifically, we have: Developed a first draft document that capture standards relevant to attitude control systems. Designed and created a knowledge base to represent the concepts described in the previous sections.Created software that automatically infuses standards into the knowledge base.Created software that automatically infuses component descriptions into the knowledge base.Commenced the coding of the spacecraft design interface.Commenced the coding of the process that automatically generates SOM and FOM files for the HLA distributed simulation platform.Commenced the coding of ACS simulation components of the TIMED spacecraft to be used in our prototype.Commenced the design of the requirements representation in the knowledge base.Commenced the design of the case-based reasoning tool.Commenced the design of the visualization tool.We expect to complete our prototype in December 2000.We believe that our approach has significance beyond the domain of spacecraft design. In particular, any collaborative modeling and design activity in which simulation component interactions can be standardized can benefit from our knowledge-based approach since it provides methods for rapid plug-and-play development and agile subsystem design integration capabilities. The abstract design representations are independent of simulation platforms, thus allowing designers to reuse simulation components in future missions. Furthermore, the knowledge sustainment capabilities of the architecture integrate requirements into the design and simulation process, ensuring rapid validation of designs. Finally, the knowledge sustainment capabilities provide designers with simplified and immediate access to the experience of previous designers and help them avert repeating the same mistakes.8. AcknowledgementsWe would like to acknowledge our support from the NASA Advance Technical Development program.9. References[1] 	J.R. Wertz and W.J. Larsen (editors): Space Mission Analysis and Design, Kluwer Academic Publishers, Dordrecht. Chapter 1, 1991.[2] 	V.L. Pisacane and R.C. Moore: Fundamentals of Space Systems, Oxford University Press, New York. Chapter 1, 1994.[3] 	A. Goldfinger, D. Silberberg, L. Doung,, J. Gersh,  M. Gomez, J. Hunt, G. Rogers, F. Weiskopf, F.: “An Integrated Architecture for Spacecraft Design and Simulation” Proceesdngs of the 2000 Summer Computer Simulation Conference, July 16-20, Vancouver, Canada.[4] 	A. Goldfinger, D. Silberberg, J. Gersh, J. Hunt, F. Weiskopf, T. Spisz, Z.G. Mou, G. Rogers, R. Semmel: “A Knowledge-Based Approach to Spacecraft Distributed Modeling and Simulation” International Journal of Advances in Engineering Software including Computing Systems in Engineering, Elsevier, Oxford, U.K., 1999.[5]	G. Rogers and J. Hunt: “Draft Spacecraft Modeling Standards” Internal JHU/APL document, May 2000.[6] 	D. Silberberg, A. Goldfinger, J. Gersh, J. Hunt, F. Weiskopf: “Standards for Distributed Spacecraft Modeling, Simulation, and Knowledge Sustainment” Proceedings of the American Institute for Aeronautics and Astronautics (AIAA) Space Technology Conference. AIAA Press. 1999.[7]	D. Silberberg, A. Goldfinger, T. Spisz, J. Gersh, F. Weiskopf, Z.G. Mou, J. Hunt, G. Rogers, R. Semmel: “Knowledge-Based Modeling and Simulation for Spacecraft Design and Development” Fifth Symposium for Research and Development, Johns Hopkins University Applied Physics Laboratory, 1999.[8] 	National Institute of Standards and Technology: Integration Definition for Information Modeling (IDEF1X), Federal Information Processing Standards (FIPS) Publication 184, December 1993.[9] 	Department of Defense: High Level Architecture Object Model Template Version 1.0, 15 August 1996. http://hla.dmso.mil/portals/hla.html[10]	L. Blessing” “Supporting the Knowledge Life Cycle” Knowledge-Intensive CAD 3,Tokyo Japan, Dec. 1998.[11]	T. Bilgic, M. Fox: “Constraint-Based Retrieval of Engineering Design Cases” Fourth International Conference on Artificial Intelligence in Design, Stanford California, June 1996.[12]	D. Leake, D. Wilson: “Combining CBR with Interactive Knowledge Acquisition, Manipulation and Reuse” Proceedings of ICCBR-99,  HYPERLINK http://www.cs.indiana.edu/~leake/INDEX.html http://www.cs.indiana.edu/~leake/INDEX.html Author BiographiesDAVID SILBERBERG is a senior computer scientist in the Research and Technology Development Center at the Johns Hopkins University Applied Physics Laboratory. He manages three research programs in the area of knowledge-based, distributed spacecraft modeling and simulation as part of the NASA Advanced Technology Development program. He is also leading a research program in the area of architectures for intelligent access to heterogeneous information. In the past, Mr. Silberberg was the manager and chief architect of several large-scale software systems at the NASA National Space Science Data Center and an architect of Hubble Space Telescope Data Archive and Delivery Service. He received an S.B. and an S.M. degree from the Massachusetts Institute of Technology in Computer Science in 1981 and is currently pursuing a Ph.D. in Computer Science at the University of Maryland, College Park. ANDREW GOLDFINGER has a Ph.D. in physics from Brandeis University, and an M.S.E. in counseling from the Johns Hopkins University. He is currently Assistant Supervisor of the Space Mission Concept and Analysis Group at the Johns Hopkins University Applied Physics Laboratory. Previously he has served as Chairman of the Working Group on Space Synthetic Aperture Radar Processing of the International Society for Photogrammetry and Remote Sensing, and as Director of Space Technology Training for the Republic of China. LIEN DOUNG has 14 years of experience in the fields of embedded software design, simulation, system architecture, graphical user interface, and visualization. She joined APL's Submarine Technology Department in November 1995, after nine years working at AAI for the Unmanned Air Vehicles Department and Robotics Department. She received a B.S. degree in Computer Science and a B.S. degree in Information System Management, both from University of Maryland Baltimore County (UMBC) in 1986. She received her M.S. Electrical Engineering in 1993 and M.S. in Computer Science in 1998, both from Johns Hopkins University.JOHN GERSH received the S.B. and S.M. degrees in Electrical Engineering in 1973 and the E.E. (Electrical Engineer) degree in 1979, all from the Massachusetts Institute of Technology. He has been with The Johns Hopkins University Applied Physics Laboratory since 1980, and is currently a Principal Engineer in the System and Information Sciences group of JHU/APL's Research and Technology Development Center. Mr. Gersh's work has involved both research and development in the area of human interaction with complex information systems. He is co-leader of the Navy's  21st Century Destroyer's Total Ship Information Management project. He is the Principal Investigator for a NASA Advanced Technology Development project investigating human interaction with advanced autonomous spacecraft. He also leads a JHU/APL team developing a system for user interaction with complex DNA-sequencing and gene-discovery information.MARTIN GOMEZ has 16 years of experience in the fields of embedded software design, simulation, system architecture, and flight software design. He joined APL's Space Department in April 2000, after nine years working at Aurora Flight Sciences Corporation, a manufacturer of unmanned air vehicles (UAVs). Martin received a B.S. degree in Aerospace Engineering in 1982, and a Master of Engineering (Electrical) in 1983, both from Cornell University.JOHN W. HUNT, JR. is an engineer in the Space Department of the JHU/APL. He is a graduate of Virginia Tech with a degree in Aerospace Engineering. His tasks have included analysis of a variety of satellite attitude control configurations, simulations of both rigid and flexible body dynamics, development of spacecraft sensor and environmental torque models, analysis of appendage deployments, control system stability analyses, and IV&V of flight software systems. He has experience developing advanced distributed simulations using the High Level Architecture. He was the lead engineer for the attitude determination & control system of the Advanced Composition Explorer (ACE) spacecraft. He is currently the lead engineer for the Solar-TErrestrial Relations Observatory (STEREO) Guidance and Control system. TONY NARDO is a member of the Senior Professional Staff at JHU/APL. Mr. Nardo is responsible for software design, development, and testing within the Information Technologies Group of JHU/APL's Submarine Technology Department. Previously, Mr. Nardo worked in the industrial sector, where he was responsible for design and implementation of both Factory Automation and Process Control Systems at EMC Controls, Inc. (Hunt Valley, MD), Rexnord Automation (Hunt Valley, MD), and the Computer Products Research Center (Hunt Valley, MD, and Dublin, Ireland). Mr. Nardo holds a B.S. in Computer Science from Loyola College of Maryland (1982) and an M.S. in Computer Science from The Johns Hopkins University (1992).GABE ROGERS is a Guidance, Navigation, and Control Analyst in the Space Department of Johns Hopkins University Applied Physics Laboratory, Laurel, MD. He obtained a masters degree from the University of Illinois in Aerospace Engineering. He has extensive modeling and simulation experience on a variety of computing platforms and with a variety of software languages and tools. Currently he is developing the attitude control and test-bed software for NASA's CONTOUR spacecraft.FRANCIS B. WEISKOPF, JR. is a Principal Staff engineer in the Systems and Information Sciences Group of the Research and Technology Development Center at JHU/APL. For approximately the last ten years he has lead the design, development and implementation of information systems, especially knowledge-based systems, for information management, process improvement, signature interpretation, diagnostics and manufacturing applications. Mr. Weiskopf received BS degrees in Engineering Mechanics and Computer Science and MS degrees in Mechanical Sciences.Figure 2. Star Tracker DefinitionFigure 1. Reaction Wheel DefinitionFigure 3. Example Spacecraft Design ToolDesign AreaDesign Palette EMBED Word.Picture.8  Figure 4. Knowledge Base DesignFigure 8. TIMED ACS Block Diagram