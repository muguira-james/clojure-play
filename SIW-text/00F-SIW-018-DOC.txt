An Introduction to the Joint Modeling and Simulation System (JMASS)Vernon K. HandleyPeter M. SheaDynetics, Inc.P.O. Box 5500Huntsville, AL 38814-5500205-964-4311, 205-964-4296vernon.handley@dynetics.com, pete.shea@dynetics.com CPT Mark MoranoJoint Modeling and Simulation System (JMASS) Program OfficeASC/SMJ Building 282145 Monahan WayWPAFB, OH 45433-7017937-255-3969mark.morano@wpafb.af.milKeywords:JMASS, HLA, Modeling and Simulation, SBA, C++ABSTRACT: The Joint Modeling and Simulation System (JMASS) is a simulation support environment that includes a collection of well-defined, well-documented interface standards to which models can be built. JMASS provides software tools that help users build representations of real-world systems, configure those models, assemble them into simulations, execute those simulations, and process the results. As a tri-service product with nearly 300 registered users, JMASS partners include the U.S. Army, Navy, Air Force, Department of Defense (DoD), Defense Intelligence Agency (DIA), and industry. With object-oriented technology applied throughout, a single set of source code executes in the Windows NT, Sun Solaris, and SGI IRIX computing environments. JMASS currently serves the acquisition, test and evaluation, and scientific and technical intelligence communities with a standard engagement and engineering-level simulation framework. It provides a critical element in the technical portion of the overall simulation based acquisition (SBA) strategy. JMASS will comply with the High Level Architecture (HLA), which provides a common technical framework to ensure interoperability of different simulation components. This paper provides an introduction to the concept, operation, and utility of JMASS.1.	JMASS BackgroundIn the early days, there was little formalized modeling and simulation, but Operations Research developed during World War II began to fill in the gap with pure mathematical models. As general-purpose computers came into more widespread use in the 1960s, large many-on-many engagement models were used to describe event interactions among various friendly and enemy entities, such as aircraft and surface-to-air missile (SAM) sites. The 1970s brought a proliferation of standalone, more detailed engineering and engagement models with differing assumptions and limitations and with results that often differed widely. We saw the development of SAM simulations such as the Enhanced SAM Simulation (ESAMS). Modeling of enemy command and control led to SUPPRESSOR. The 1980s brought model hierarchies to provide a set of tools for logically consistent results where an output of one could be an input to another. Because the cost of model development was significant, reusability became a hot topic. Integrated modeling systems with object-based technologies were proposed as a technological solution to reduce development and ownership costs. In the 1990s, JMASS was an early joint development in this area followed by the Joint Simulation System (JSIMS) and the Joint Warfare Simulation (JWARS).JMASS was originally designed to support the high-fidelity engagement level analyses required for weapon system development and acquisition. Since the early 1990s, JMASS has progressed from a UNIX-only solution to a compact and efficient system requiring less than 100 Mbytes of disk space. Initial operational capability (IOC) is scheduled for early 2001 with full operational capability (FOC) scheduled for 2004. When completed, JMASS will be a complete simulation system consisting of a defined set of standards and specifications, an efficient simulation engine, tools to assist the analyst user and model developer, and an infrastructure of validated threat models. A single set of source code, including the graphical user interface (GUI), executes in the Windows NT, Sun Solaris, and SGI IRIX computing environments. In the coming year, JMASS will become compliant with HLA, which will allow JMASS to interoperate with other simulations. JMASS currently provides an infrastructure for training and customer support. A Model Developer Reference and a comprehensive User’s Manual are provided with the JMASS software. Context-sensitive on-line help will be available in future releases. Training and customer support are available from the JMASS Program Office (JPO). Details are available at www.jmass.wpafb. af.mil.2.	JMASS UtilityFour levels of analysis are presented in Figure 1. Force structure studies based on multi-day, many-on-many scenarios fall into the Campaign category. Mission analyses include system trade-off studies based on tailored scenarios and fewer, more detailed systems. The Engagement and Engineering categories include studies of system and subsystem performance based on the interactions among a few highly detailed objects. Results, not models, can be aggregated and passed up the pyramid. JMASS works at the engineering and engagement level, but in the near future, the greatest utility of JMASS will be in support of analyses at the tactical/engagement level. Figure 1.  Levels of AnalysisJMASS currently serves the acquisition, test and evaluation, and scientific and technical intelligence communities with a standard engagement and engineering-level simulation framework. It provides a critical element in the technical portion of overall SBA strategy. By placing weapon systems in a virtual environment, JMASS provides a framework for analyzing the design and performance of weapon systems considered for procurement. In this manner, JMASS complements other DoD modeling and simulation programs such JSIMS and JWARS. JMASS is not a part of JSIMS and JWARS, but rather generates data that can be validated for use in either JSIMS or JWARS.3.	JMASS DescriptionAs depicted in Figure 2, JMASS is composed of four distinct parts: legacy model functional implementation, red threat models, blue digital system models, and the architecture. The JMASS architecture and models are discussed in this section.Figure 2.  The Four Parts of JMASSJMASS models typically correspond to real-world physical objects such as aircraft, radar, missiles, electronic countermeasure (ECM) systems, or missile seekers. JMASS defines and provides a standardized set of file formats and application program interfaces (APIs) that allow these models to be developed such that interoperability is achieved. The primary file format specification captures model design information, and a sophisticated code generator transforms the design information into a code framework to ensure that all architecture capabilities are accessible to the model developer. Model developers are required only to fill in behavior code for their models and understand and use the service APIs to ensure interoperability with other models. To facilitate model reuse, JMASS takes an open-systems approach and uses common object-oriented language that includes GUIs and applications based on commercial standards such as Microsoft Windows, POSIX, ANSI C++, and OpenGL. The JMASS open architecture allows customization and extensibility. The standard tool suite is accessible through native drag-and-drop file managers for both Windows NT and UNIX platforms. The provided GUI tools are implemented in Tcl/Tk allowing them to run on Windows NT, Sun Solaris, and SGI IRIX. Site-specific tools may be added to the architecture to customize and extend design and analysis capabilities. 3.1	JMASS ArchitectureJMASS provides standard service modules for scheduling, spatial services, data recording, message logging, as well as physical environments for the atmosphere and terrain. User-supplied physical environment and atmosphere models may be substituted if desired. A discrete event-based scheduler is the default, but real-time, frame-based, or HLA time-management approaches could be employed. A hierarchical six-degrees-of-freedom spatial manager with two derivatives is provided to maintain and extrapolate states of spatial entities within the simulation. The standard data recorder can provide simulation output in binary, MATLAB, and/or ASCII format. The message logger displays color-coded messages during the simulation run and stores these messages to a file. Architecture services will be plug-and-play in the IOC JMASS.Designed to help engineers develop simulations quickly and easily, JMASS provides tools that permit model developers to concentrate on algorithms instead of software. The standard tool suite is accessible through native drag-and-drop file managers for both Windows NT and UNIX platforms. Figure 3 shows some of these tools. The Builder tool provides automated code generation, dependency generation, compilation, and linking. It isolates the user from compiler and file system details but still offers detailed control through makefiles. The Configuration GUI provides for initializing simulation attributes and Figure 3.  JMASS Modes of Operation and GUI Toolsselecting data for recording. The Execution tool displays color-coded messages while running the simulation. It also provides for profiling and debugging the simulation. Command line execution is also supported. The Automated Model Conversion Tool (AMCTool) will be incorporated into future releases of JMASS. It is a visual programming tool used to support model development by providing an automated approach for converting Simulink models to JMASS components.JMASS provides a study manager called the Flexible Automated Study Tool (FAST) designed to support engineering analysis studies that use JMASS. FAST distributes multiple runs over a local area network for parametric and statistical analyses. It also collects data and provides tools for data reduction and analysis. FAST allows analysts to run experiments by varying one or more simulation inputs, distribute these experimental runs across multiple computers, and then graphically analyze the results.JMASS includes an analystquality visualization tool called SimView that is used to visualize the spatial behavior of players simulated in JMASS. Support for SimView in JMASS is provided by the SpatialInfoPlayer. The developer does not have to do any additional programming within the models to support visualization. SimView is designed to support analysts’ needs by providing visualization of players in three space.To use SimView, the user must first execute the simulation scenario. Executing a scenario that contains the SpatialInfoPlayer generates a .sv file with all the data SimView needs to replay the scenario visually. A window similar to that shown in Figure 4 will be displayed when initiated. A number of controls on the SimView playback window allow the user to adjust playback rate and provide a variety of viewing angle and zoom options that can all be changed during playback. EMBED Word.Picture.8  Figure 4.  SimView Analyst Quality Visualization ToolJMASS also includes a cross-platform, post-processing plotting tool called JPlot. JPlot reads JMASS Binary Journal Data (BJD) files created during execution of a simulation scenario and displays the data in a spreadsheet, from which the user may select columns/rows of data for plotting. JPlot provides a wide variety of options, which permit axes scaling and styling, polar plots, linear-linear, log-linear, and log-log plots, and the overlaying of plots of the same type. Additional options permit 3-D plotting, grids/no grids, color coding, and annotations. A typical plot is shown in Figure 5.Figure 5..Plot Window from JPlotJMASS is an open architecture with a well-defined API that makes it relatively easy to interface commercial products. This has been demonstrated with Simthetica from Computer Explorations, Inc. A sample output snapshot is shown in Figure 6. Figure 6.  Simthetica DisplayThe JMASS tool BJD_to_Text converts JMASS binary journal data (BJD) files into ASCII text files for use with other tools such as Microsoft Excel or MATLAB. JMASS also provides the capability to record data in MATLAB binary format. These data can be loaded directly into the MATLAB workspace for data analysis and plotting, and for presentation-quality visualization.The JMASS analyst tools are being extended by a number of users. These customized tools and GUIs are tailored for particular analyses. One example is the Tcl/Tk-based JMASS Analyst Capability Kit (JACK) being used by the Air Force Operational Test and Evaluation Center (AFOTEC). This tool will be available for future releases of JMASS. Another example of tool extensibility is the Java-based analysis tool, JTEAM, which has been developed by the Air Force Information Warfare Center (AFIWC) for internal use. The JTEAM analyst “dashboard” is shown in Figure 7.Figure 7.  JTEAM Analyst Dashboard GUI3.2	JMASS ModelsJMASS provides architectural services through a well-defined API. JMASS models are referred to as players and typically correspond to real-world physical objects such as aircraft, radar, missiles, ECM systems, missile seekers, etc. JMASS supports multiple levels of detail. The level of detail of a JMASS model can be developed or selected to match the scenario to be executed. JMASS permits the model detail to be varied across the simulation and across the model itself. The APIs are robust enough to handle both high and low levels of detail permitting both high and low detail models to be used in the same simulation. Similarly, within a model, the level of detail can be focused in those areas that are stressed by the application or use. The detail in the models strongly affects the speed of the JMASS simulation. The architecture (simulation engine) has low overhead so that run time is determined/ driven by the number and detail of the models included in the simulation. JMASS models may be subdivided into digital system models (DSMs), environmental models, and ancillary models. DSMs are typically divided into friendly (blue) and threat (red). Threat DSMs are developed and validated by the appropriate Intelligence Centers. They will plug and play in JMASS without requiring that new code be written, which would necessitate revalidation of the threat DSMs. HLA will provide a means for these validated threat DSMs to interoperate with other available JMASS or nonJMASS simulations. Environmental models in JMASS model the environment for the particular sensor domains of interest in the simulation. JMASS currently has a radio frequency (RF) domain environmental model designed primarily to handle the radar-directed weapon systems and sensors. Additional environments for the infrared (IR) and undersea domains are required for FOC.Additional ancillary models, the SpatialInfoPlayer and the SpatialObserver player, are available to provide additional functionality and support information to the simulation. These models and the additional functionality they offer will be described later.The primary tool for modeling ECM systems in JMASS is the Generic ECM (GenECM) toolkit. GenECM is a flexible, generic, general-purpose ECM signal generator that provides the capability to exercise the various threat SAM and air-to-air missile models with realistic electronic combat (EC) environments for checkout, evaluation, and test of EC techniques, as well as for evaluation of the effectiveness of threat counter-countermeasures. GenECM provides a foundation of object-oriented EC components to populate a JMASS component library for use by EC hardware developers. The GenECM model has a modern object-based structure and design that permit it to be rapidly reconfigured to reflect the specific hardware structure of a particular EC system. GenECM is designed to facilitate focused fidelity, permitting the various components of the ECM suite model to operate at different levels of detail. GenECM was also designed to fully utilize the advanced features of the JMASS signal packet interface. GenECM supports all three of the typical ECM response types: repeater, transponder, and noise. Threat models are developed, validated, owned, and maintained by the appropriate threat Scientific and Technical Intelligence (S&TI) Centers. Currently, three different levels of detail are being developed to support different kinds of analysis. These levels of detail are referred to as subanalytic, analytic, and EC-capable. All three are object-based in the sense that the software design is organized in the same manner as the hardware being modeled, at least down to some level of decomposition. For each hardware object, there is a corresponding software object, and signals flowing between the hardware objects correspond to the data flowing between software objects in the simulation. The subanalytic and analytic models are faster running, but in no way are they EC predictive in their behavior. They may have EC responses “hard-wired" into their behavior code but they have to be told what technique is attacking them and they must have a prescripted behavioral response available for that technique. They do not simply respond to the signal environment presented to them by the environment player. The EC-capable models have the ability to exhibit truly predictive ECM behavior for a broad class of EC modulations. Ideally, these models will be based on detailed hardware design and measurement data. Signals that could represent multiple overlapping signals from the target, the ECM, and/or the environment are combined into a single composite signal and presented to these models through the antenna component, and they respond accordingly. Advanced modeling techniques allow non-linearities to be accurately simulated with baseband processing of the signals, not at the RF or intermediate frequency (IF) of the system being modeled. This has a tremendous effect on the overall computational cost and efficiency of the model.JMASS comes with a simple aircraft player that can be used as an RF target or a missile-launch platform. It currently has a configurable constant radar cross section (RCS) value and the ability to perform prescripted maneuvers in both the pitch and yaw planes. It is not intended to be a full aerodynamic aircraft model, but rather a moving platform that can act as a target aircraft or launch aircraft for air engagement scenarios.Two players are delivered with JMASS that do not represent any physical entity but are useful in supporting analysis. These are the SpatialObserver, which computes the point of closest approach (PCA) between two players, and the SpatialInfoPlayer, which produces the SimView output file.The SpatialObserver monitors the relative spatial states between pairs of spatial components and ultimately calculates the PCA. Multiple pairs may be monitored by a single instance of the SpatialObserver class. The SpatialObserver dynamically schedules the next observation between the pairs of spatial entities. This allows resolution to be increased as the entities approach each other.The SpatialInfoPlayer extracts the data needed for SimView with respect to a specified reference spatial object. The recorded data are written to an output file with the extension .sv. This file can be used by SimView to display the objects in three space. Objects to be recorded must have observations configured for them. The rate at which the states will be recorded is set by the SpatialInfoPlayer update interval.The JMASS Modular Object-Oriented Simulation Environment (JMOOSE) is the most widely used RF environment player for JMASS. It provides signal representation and modulation processes approximating the phenomena experienced in short-wave RF operation in the range of 100 MHz to 100 GHz. The JMASS event time-management concept is designed for pulsed systems such as radars, RF seekers, RF countermeasure equipment, and identification friend or foe (IFF) systems. However, careful design will allow simulation of continuous wave (CW) systems as well. JMOOSE interfaces with JMASS are simple and reliable and are mandatory for systems that will interact with the RF environment, including any vehicle with an RF cross section detectable by RF electronic sensors.An electro-optical (EO)/IR environment model is being designed and prototyped.4.	JMASS Interoperability Through HLAJMASS is designed to handle high-fidelity, tightly coupled simulations of interactions between ECM and the intended victim. For these applications, the latency associated with HLA and simulations distributed across a network is highly undesirable. HLA is designed to enable interoperability between various simulations across a network. HLA provides a much looser coupling than does JMASS. JMASS provides a tight framework for plug-and-play operation of tightly coupled models interacting through shared memory on a single- or multi-processor computer.JMASS will comply with HLA, which provides a common technical framework to ensure interoperability of different simulation components. Since HLA is a general-purpose architecture designed for simulation reuse and interoperability, it will be the standard through which JMASS simulations will communicate with other simulations. This will allow for high-fidelity, tightly coupled models interoperating within JMASS to interoperate with other simulations through HLA. This will provide a portal to HLA for legacy models that are ported to JMASS or provide for interaction with actual hardware. For instance, JMASS could simulate a high-fidelity missile shooting at a target that is actually a man-in-the-loop aircraft simulator, with the two interacting via HLA.JMASS will only implement unconstrained, unregulating time management. JMASS will support the use of any of the HLA time-management schemes through its ability to plug new schedulers into the JMASS architecture.5.	Future JMASSFuture releases of JMASS will provide real-time capability, parallel simulation processing, simplified model integration capability, improved installation efficiency, and improved GUIs. Model design tools and 2-D contour and 3-D topology map visualization will be added. Legacy model conversion processes along with undersea and EO/IR/ultraviolet (UV) environment improve-ments will be incorporated. Improved customer support via website and beta site testing will be available soon.6.	SummaryFor the past 10 years, JMASS has had a significant impact on the definition and concept of modeling systems. JMASS has evolved as an object-based technology for reusable, interoperable models. It provides a simulation architecture and tool set for model development compliant with architectural standards. Deeply rooted in the acquisition and test and evaluation community, JMASS best supports engagement-level analyses. JMASS is key to twenty-first century engagement modeling.AcknowledgementsInformation for this paper was gleaned from many sources, including material presented at the April 2000 JMASS Customer Conference in Dayton, OH. Special thanks are extended to Ms. Cindy Porubcansky, JMASS Program Office (ASC/SMJ) Program Manager, for her guidance and support, and to Mr. Bill McQuay, Technical Advisor for the Collaborative Simulation Technology and Applications Branch, Information Directorate, Air Force Research Laboratory, Wright Research Site, for his material on the history of modeling and simulation and JMASS.Author BiographiesVERNON HANDLEY is a Principal Engineer at Dynetics, Inc., Huntsville AL. He holds a BSEE from the Georgia Institute of Technology and an MSEE from the University of Alabama in Huntsville. As a model developer and systems analyst, he has been involved with JMASS for over ten years. He currently leads JMASS training and outreach activities.PETE SHEA is the Chief Engineer for Dynetics’ JMASS development activities. He holds a BSEE from Clemson University and an MSEE from North Carolina State University. He has been active in JMASS model, tool, and architecture development since the early 90s.CPT MARK MORANO is Director of the Support Team at the JPO. In this capacity he oversees customer support, training, and the Outreach Program.