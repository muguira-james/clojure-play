The Use of the Joint Theater Level Simulation (JTLS) With the High Level Architecture (HLA) To Produce Distributed Training EnvironmentsDavid L. ProchnowC. Zachary FurnessThe MITRE Corporation1820 Dolley Madison BlvdMcLean, VA  22102Jonathan RobertsRolands & Associates Corporation500 Sloat AveMonterey, CA 93940prochnow@mitre.org HYPERLINK mailto:dseidel@mitre.org zfurness@mitre.orgjtlshla@jtls.nps.navy.milKeywordsHLA, JTLS, CEP, HIP, GDS, OTM, EADSIM, NATO, RTI, Distributed TrainingAbstract:  The Joint Theater Level Simulation (JTLS) has been employed in two separate High Level Architecture (HLA) federations to support training of military officers.  Recently, these federations have executed successfully at training exercises in Turkey and Kuwait.  The combination of JTLS and HLA has proved to be a symbiotic relationship.  JTLS has benefited by exploiting the software components not normally run with JTLS, leading to an improved training environment.  In addition, the HLA community has benefited from several lessons learned from these experiences.  HLA lessons learned are in the areas of federation initialization, performance, memory usage, Data Distribution Management (DDM), time management, and use of the Federation Management Tool (FMT).This paper describes the two separate federations in which JTLS participated, problems encountered along the way, and actions taken to address these issues.  In addition, the paper describes the user perception of the training environment.IntroductionThe Joint Theater Level Simulation (JTLS) is an interactive wargame played by up to 10 opposing sides.  It has been used successfully for over 15 years to support training exercises in the U.S. and throughout the world.  It is used in a distributed environment, where players typically sit at graphical workstations, at which they view the battle situation and enter orders into the game.  For many years, the Genis Data Server (GDS) was used to link JTLS component systems.  In 1998, the Defense Modeling and Simulation Office (DMSO) began examining the use of JTLS in an HLA environment while still using GDS for certain exchanges.  An initial federation prototype integrated JTLS with the Global Command and Control System (GCCS) and NATO command-and-control systems.  The challenges of that initial federation are described by Nielsen and Salisbury [NIEL98].  Since then, much has changed in the federation (now referred to as the JTLS-NATO federation), and this paper offers some of the lessons learned.Over the past year, JTLS has also executed in another federation with the Extended Air Defense Simulation (EADSIM).  Both the JTLS-NATO and JTLS-EADSIM federations participated in exercises during the first half of 2000.  In March, the JTLS-NATO federation executed in Izmir, Turkey, as part of the Disciplined Warrior exercise.  In May, the JTLS-EADSIM federation supported the Lucky Sentinel exercise in Kuwait.  The version of the RTI that we used in both federations was RTI 1.3v7pr1 (patch release 1 of version 7); this is important because observations that we made about the RTI may not be applicable to other versions. Both federations utilized the same Federation Object Model (FOM).  Both the JTLS-NATO and JTLS-EADSIM federations are described in this paper, along with lessons learned from each.2.  The JTLS-NATO FederationThe JTLS-NATO federation is a distributed wargame in which data is exchanged using HLA.  The JTLS Combat Events Program (CEP) serves as the wargame engine and communicates with the GDS.  The HLA Interface Program (HIP) connects to the GDS and sends wargame data to the federation through the Runtime Infrastructure (RTI).  Several Order Translation Modules (OTMs) also interact with the RTI, sending orders and receiving wargame data and order confirmations.  The HIP passes data that it receives from the OTMs back to JTLS.  Another component, the Aggregator, amasses object data and creates aggregate entities.  The Federation Management Tool (FMT) monitors and manages the federation execution but does not interact directly with the other federates. 2.1 Overview of JTLS-NATO Federation Experience at Disciplined Warrior 2000 ExerciseThe JTLS-NATO federation at the Disciplined Warrior exercise demonstrated a successful use of HLA at a NATO exercise.  Most, and sometimes all, of the Opposing Forces (OPFOR) play were conducted using this federation.  Federation performance, a large concern in 1999, was acceptable. Despite heavy loads at times, the federation had no problem keeping up with JTLS and sending and receiving orders in a timely manner.  The federation ran with the game ratio usually set between 2:1 and 3:1.Figure 1 shows the logical diagram for the JTLS-NATO federation employed at Disciplined Warrior. The Red OTMs were included in the federation for just one day of the exercise.  Note that for the orange side, three land OTMs, one air OTM, and an Aggregator were included in the federation.  After a few exercise days, we experimented with including the Red side in the federation as well.  This added the two additional federates shown in red in Figure 1.  The hardware in use at the exercise is listed in Table 1.Figure 1. JTLS-NATO Federation Diagram ComponentHardwareJTLS CEPSun Ultra 10, 333 MHz CPU, 1 GB RAMHIPSun Ultra 5, 270 MHz CPU, 256 MB RAMOTMs (each on separate PC)Gateway NT Laptop, 398 MHz CPU, 384 MB RAMAggregatorGateway NT Laptop, 398 MHz CPU, 384 MB RAMFMTSun Ultra 5, 270 MHz CPU, 256 MB RAMRTIexec(ran on same machine as FMT)FedExec(ran on same machine as FMT)Network100 Mbit switchedTable 1.  JTLS-NATO Federation Hardware in use at Disciplined Warrior ExerciseWe encountered several technical issues in the JTLS-NATO federation.  Many of these issues were brought to light at two formal testing events prior to its use at the Disciplined Warrior exercise in March 2000.  These tests occurred in December 1999 and January 2000.The two formal federation tests prior to the exercise ensured that we entered the exercise with the proper software and procedures in place to successfully execute the federation.  This prior testing highlighted potential problems and allowed us to develop workarounds for certain RTI anomalies.  We also used the tests to optimize performance.  As a result, we went to the exercise knowing that the federation could handle the expected load, and we had realistic expectations of crash recovery times.This is not to say that the exercise was without problems.  Both RTI anomalies and federate crashes occurred, but we usually implemented quick recoveries from these problems or successful workarounds. Our experiment of using the federation for both the Orange and Red sides was both a success and a failure.  We succeeded in using the federation to represent 20,000 objects, with the correct functionality.  This allowed the OTMs of different sides to receive different perceptions of the battlespace and to input appropriate orders to JTLS to direct entities on their side.  Unfortunately, with this configuration, we were only able to run for about 12 or 13 simulation hours at a time.  After this point, due to an RTI memory leak, the HIP ran out of virtual memory and crashed.In addition to an hour-long outage caused by a network problem, on numerous occasions, an OTM would crash on internal, mostly non-HLA related, errors.  We recovered quickly from these problems, by manually removing the crashed OTM from the federation and rejoining it.  In these cases, the OTM was operational again in about 2 minutes.We also experienced several RTI problems, which are described in subsequent sections of this report.  None of these problems led to significant downtime of the federation.  Although we did not solve any of these problems while at the exercise, we implemented workarounds for each of these anomalies.2.2 Initialization of JTLS-NATO FederationIn the JTLS-NATO federation, the HIP is the main producer of a massive amount of data while the OTMs are the primary consumers of this data.  Due to the nature of the federation, there is no guarantee of the order in which the federates join the federation.  As a result, it was critical to come up with an initialization scheme that ensured that each OTM received all the data from the HIP, while limiting the number of times that the HIP had to send out the initial data.In 1999, an original initialization procedure was developed that used synchronization points.  However, this mechanism suffered from several problems due to the RTI 1.3 implementation at the time and the lack of any HLA specifications on event ordering.  These problems are well documented by Nielsen [NIEL99].We dropped the use of synchronization points, but we were still operating under the same "pull" paradigm: the HIP would not send out any updates until receiving an update request callback, and the OTMs would request an update on each object instance discover.  Because there were normally several subscribing federates, this resulted in many needless updates for the initial values of each new object.  As we made changes in our current federation, we moved to more of a "push" paradigm.We first modified the HIP to ignore all update requests while it registered its initial objects.  Afterwards, all updates were sent out regardless of whether or not requests were received.  This enabled the HIP to send out only one initial update for these objects instead of one for each OTM already joined.  This improved our performance during initialization, but objects registered after initialization still triggered a request from each OTM. The HIP was then modified to send out the initial values immediately after registering an object and the OTMs were modified to wait a short time after discovering an object instance and then only request an update if it had not received one by this time. This helped, but with larger scenarios, the performance of the RTI dropped and the OTMs were not receiving the updates before the delay times expired.  The OTMs would send out more requests, causing the performance to drop further still and exasperating the problem.  Simply increasing the wait time was not the solution, because there were other times when a single OTM would join the federation late and would need to receive the initial data as soon as possible.At our January test, we found a solution to the problem of the late joining OTMs.  The OTMs were modified to request updates by class immediately after subscribing instead of requesting an update for each object instance discover. The OTM class update requests only get passed on to the HIP if they were made after the HIP started publishing (i.e., for late joining OTMs).  It is therefore most efficient for the HIP to join last.Using this method had the effect of reducing both network traffic and the required processing for each federate.  To top it off, the code was cleaner and easier to implement.One may note that, using this method, the object instance discovery callbacks are no longer needed so long as you treat the first update of an object as a discover.  It would therefore be useful to inhibit the RTI from sending discovers altogether to further reduce processing and network traffic, but as of now we know of no way to do this.2.3 JTLS-NATO Federation Performance IssuesPerformance was a very large concern for the JTLS-NATO federation.  JTLS produces a significant load both in terms of number of objects and the size of objects.  A typical scenario might have 10,000 objects per side, and a typical object class is composed of 60-70 attributes.  At one time, performance was so bad that it was uncertain if use of JTLS with HLA was even viable.2.3.1 Changes From 1998 Architecture to Improve PerformanceIn the non-HLA version of JTLS, the CEP sent all of its data to the GDS, which in turn fed all other programs.  In the original 1998 federation, the CEP was modified to be an HLA federate, feeding everything through the RTI instead of the GDS. This resulted in about 100,000 objects for a typical scenario, and, as we found out, this was too much for our version of the RTI. Also, because the CEP is already very large, linking it with the RTI libraries produced a process too big to be run efficiently.  To achieve acceptable performance, the CEP went back to feeding its data directly to the GDS.  A separate program called the HLA Interface Program (HIP) was developed that received data from the GDS and published it using the RTI.  This allowed the CEP and its RTI code (the HIP) to be run on different machines, reducing the CPU and RAM bottlenecks.  More importantly, this allowed us to scale back how much data would pass through the RTI by choosing which programs would be HLA federates and which ones would be normal GDS clients.  The HIP now typically only publishes one or two sides’ perceptions resulting in a more manageable 10,000 to 20,000 objects.  In addition, the HIP may be tailored to only publish the types of objects required by the subscribing federates.  For example, in the JTLS-EADSIM federation, the HIP publishes less than 5,000 objects.2.3.2 JTLS-NATO Federation Initialization TimesOur biggest performance challenge was to complete federation initialization in a reasonable amount of time.  The process of registering all objects, sending out all updates, and receiving all reflections in the subscribing federates took so long that in 1999, it was uncertain if the performance would ever be adequate to use the federation at an exercise.  Fortunately, once initialization completed, we did not encounter any problems with the throughput of subsequent updates and interactions.  This allowed us to focus on minimizing the federation initialization times.With the earlier versions of the RTI prior to DMSO RTI 1.3v7, increasing the number of objects had an exponential relationship to performance.  This was especially noticeable in object registration.  In some performance benchmarks that we ran with v6 patch release 1, it took 2.7 minutes to register 10,000 objects, but it took 3 hours to register 50,000 objects. The performance was worse with actual JTLS objects.  Once the federation migrated to RTI 1.3v7, these performance problems went away.  The benchmark program registered 50,000 objects in 4.9 minutes, and we are now able to register and update about 10,000 JTLS objects in 2 minutes.2.3.3 Performance at Disciplined Warrior ExerciseDuring the Disciplined Warrior exercise, we captured throughput data in 5-minute data collection intervals.  Object updates constituted the majority of the federation traffic, while interactions resulted in a minimal load.  At peak times, we saw around 20,000 updates being sent during a 5-minute interval, or about 4,000 updates per minute.  The HIP generated the vast majority of these updates, though the Aggregator is also capable of generating updates of aggregated entities.  The OTMs and Aggregator had to receive and process the resultant reflections.  As for interactions, we never observed more than 225 interactions sent in a 5-minute period. It should be noted that we did not encounter any performance difficulties at the exercise.  Thus, these numbers indicate the throughput that we achieved but do not indicate any upper limit for the federation.2.4 Use of Data Distribution Management (DDM) in JTLS-NATO FederationThe JTLS federation employs Data Distribution Management (DDM) to control the different perceptions by each side being played. We utilize a routing space with 11 regions, one assigned to each of the ten sides and one for ground truth. For every game entity, such as a ground unit, there are up to 11 different objects registered, each with the appropriate region. The subscribing federates subscribe only to region(s) of interest.  This proved to be an effective method of managing the perceptions and limiting the data received by any of the OTMs to what was relevant for its side.The negative aspect of this approach is that it significantly increases the number of HLA objects in the federation.  The alternative was to use a single HLA object for each internal object and then place the perception data using arrays passed in the attributes. However, the latter approach would have caused each subscribing federate to receive much more data than it needed, and the benefit of reducing the network traffic as well as the data load on the subscribing federates outweighed the performance implications of the increased number of HLA objects.2.5 Treatment of Time in JTLS-NATO FederationThe original 1998 federation employed HLA time management.  However, the JTLS-NATO federation no longer manages time across HLA.  Although JTLS manages time internally, it was deemed unnecessary for this federation to employ HLA time management.  The federates other than the HIP just want the game time so that it can be included on their displays.  Rather than forcing these federates to use time management, we found that it was more efficient to use a special object class for game information.  The HIP periodically updated a single instantiation of this class, including attributes that informed the subscribing federate of the current game time and game ratio.The OTM and Aggregator federates continuously updated their displays with the current game time, as indicated in the reflections received for the game information class.  Because neither the OTM nor Aggregator federates were time regulating, all orders (in the form of HLA interactions) sent by them were processed immediately rather than being placed in the timestamp order queue of the JTLS CEP.  For orders that were associated with a particular game time, we used interaction parameters to hold the time values.  2.6 Runtime Infrastructure (RTI) IssuesThe RTI was adequate for meeting the needs of the Disciplined Warrior exercise.  It was able to handle network traffic fast enough to meet the demands of the federation.  However, we did note several anomalies and these are discussed in this section.  It should be reiterated that the version of the RTI that we were using is no longer supported, so the lessons learned may be of little relevance to readers who are using different versions of the RTI.Full-time RTI support for the JTLS-NATO federation at the test events and exercise was absolutely necessary.  By having an RTI support person present, we were able to develop quick workarounds for problems that we detected.  This was particularly important for this federation because we were stressing the RTI in ways that no other federation had done.  As more robust versions of the RTI are developed, the availability of RTI support at exercises may become less critical.2.6.1 RTI Problem: Missing DiscoveriesThe most critical problem that we faced was missing discoveries in the OTMs.  This is a problem that we previously observed in earlier test events. When the problem occurred, some of the OTMs would not receive any of the discoveries of object instances in one or more classes. Although we were unable to pinpoint the exact cause of the problem, it appeared to be associated with updates being sent while objects were being discovered. Because we had previously observed this bug, we entered the exercise prepared with workarounds and solutions.  For one, the initialization procedure that we developed at the January test minimized the likelihood of the problem occurring.  In addition, because of the seriousness and unpredictability of this problem, we ensured that we exploited the FMT to check object counts whenever we initialized the HIP or OTMs.  At the exercise, the problem occurred about 5% of the time that an OTM was reinitialized.  When we did observe that an OTM did not receive all the discoveries that it should, we resigned and rejoined the affected OTM. 2.6.2 RTI Problem: Unprocessed DeletesDuring the exercise, we also observed a problem that we had not previously seen.  Sometimes, after the HIP would resign (requesting that the RTI delete its objects), an OTM would not receive all the appropriate removeObjectInstance() callbacks. We had previously observed reflected objects still existing in the OTMs after a HIP crash and manual removal from the fedExec, but in these cases, the HIP resigned cleanly.Even though the HIP used the same object names when it rejoined and consequently the remaining reflected objects in the other federates did not get re-discovered, this was still a problem if JTLS was running while the HIP was down.  In this case, any of the objects that did not get removed from the OTMs but were deleted from JTLS in the interim could not be removed from the OTMs.  As a result, the OTMs would display some objects that no longer existed in the game.Our workaround was for the HIP to explicitly delete its objects immediately prior to resignation.  While this resulted in several more minutes of shutdown time for the HIP, all of its objects were successfully deleted from the other federates.  Having the OTMs resign and rejoin was an alternative solution, but we decided that would be more disruptive to the game play.2.6.3 RTI Problem: Memory LeaksDuring the Disciplined Warrior exercise, the HIP crashed twice when it exhausted virtual memory.  Both of these crashes occurred when the HIP was playing both the Orange and Red sides and thus was managing twice as many objects as a single side. Further testing revealed that the problem was in its Local RTI Component (LRC).  As a result of the memory leak, it was impossible for the HIP to run a 2-sided (20,000 objects) scenario for more than about 12 simulation hours.   Since the exercise, the memory leaks have been eliminated in this version of the RTI.2.7 Use of the Federation Management Tool (FMT) in the JTLS-NATO FederationThe Federation Management Tool (FMT) became an essential part of the JTLS-NATO federation.  Because there was the known problem of missing discoveries described above, the FMT was used to quickly assess the object counts.  In addition, the FMT captured statistics that were used when analyzing federation performance.  Also, the FMT produced graphs of federate availability.  These graphs were later included in the exercise’s after action report. 2.8 Crash RecoveryAt one time or another, either in testing or in the actual exercises, each of our federates crashed.  It was therefore essential to produce crash recovery procedures for each HLA component.  We did so and, as a result, we recovered quickly from any federate crashes at the actual exercises.2.9 User Perspective of JTLS-NATO FederationWhile the federation developers encountered the issues described in the previous section, the end users at our exercise were, for the most part, immune to these problems.  This section discusses the user perception encountered at the Disciplined Warrior exercise.The overall impression of NC3A, our primary user, was very positive. The general opinion after this exercise is that the federation has potential to become the default way to connect NC3A applications to JTLS.  However, according to NC3A, for this to occur, we must have a stable RTI.  In addition, we must manage the FOM and federation carefully.  Any future FOM changes must be agreed upon and distributed to all active federates.  Any behavioral changes must be agreed upon by all affected federates.  An effort should be made to ensure that any changes will have a minimal impact on other federates, especially those federates that do not require these changes.The operators were most pleased with the reduced initialization times per OTM, fast throughput of interactions, immediate feedback on orders and fast updating of all data.  Exercise Control also noted the following positive aspects.  The federation was flexible, as adding new federates for the Red side was performed quickly and easily.  The operators were able to accomplish their jobs, and the federation worked without too many troubles.  Exercise control also spoke positively on the stability of the HIP and, relative to their database counterparts, the OTMs and Aggregator.  Finally, the federation did not crash or hamper the simulation by sending bad data to JTLS.On the negative side, exercise control was dissatisfied with the awkward process after a federate crash of having to call Tech Control to remove the federate from the FedExec.  They also expressed displeasure that the HIP could not get through a secondary download without going downThe NC3A developers encountered a larger amount of RTI bugs than expected.  It is hoped that the lessons learned from this federation can lead to more robust versions of the RTI. 3.  The JTLS-EADSIM FederationThe JTLS-EADSIM federation reused the FOM and the JTLS, GDS, and HIP components from the JTLS-NATO federation.   This federation added another warfighting simulation, the Extended Air Defense Simulation (EADSIM).  This was a major difference as previously all simulated entities resided in JTLS.  Another major difference with this federation was that it employed HLA time management.  In fact, this federation introduced a new regulating federate, called the Pacer, which controlled the speed of the game.   Figure 2 shows a diagram of this federation.Figure 2.  JTLS-EADSIM Federation Diagram3.1 JTLS-EADSIM InteroperabilityThe largest challenge of the JTLS-EADSIM federation was not how to pass the information (the RTI makes this relatively simple), but what kind of information to pass.  Several problems stemmed from difference in fidelity of the two simulations.  For instance, JTLS models a single ground unit that has many individual tanks.  In EADSIM, on the other hand, each tank is modeled individually.  When translating from a low-fidelity entity to a high-fidelity entity, some data (individual tank locations, fuel quantities, etc.) needs to be extrapolated.There is also the danger of overwhelming the high-fidelity simulation with too many entities.  JTLS normally deals with much larger scale simulations than does EADSIM.  So when the JTLS aggregate entities were expanded into the individual entities, EADSIM was forced to deal with more entities than to which it was accustomed.Other challenges involved incompatibilities in the ways the entities are modeled, update rates and data representation.3.2 Time Management in JTLS-EADSIM FederationMost of the time management implementation work for this federation involved creating a new federate, the Pacer, to regulate the game time.  All federates in this federation (HIP, EADSIM, Pacer) are both time regulating and time constrained.  The Pacer allows the user to set the desired game rate, and the federation will only advance time as fast as this rate.  (If all federates have enabled time regulation and time constraint, then the federation as a whole will be constrained to run only as fast as the slowest federate.)  The HIP and EADSIM are set to run as fast as possible, but of course, they are constrained by the Pacer.The Pacer is a generic federate that can be used to pace any time managed federation.  The Pacer also uses the Management Object Model (MOM) and a simple graphical user interface to monitor the status of each federate in the federation.While it may first appear that development of a pacing federate would be straightforward, we encountered several issues that had not been anticipated.  As a result, the Pacer went through several revisions, each of which is described in the subsequent paragraphs.The first version of the Pacer would check the current wallclock time, use the desired game rate to calculate the desired federation time and then make a time advance request to that time.  This worked fine keeping the game running at a constant speed, but it had problems when you wanted to change speeds.  The problem derived from the fact that once you make a time advance request with the RTI, you cannot change it or cancel it.  You must wait on all other regulating federates to get the advance grant before another request can be made.  If the desired game rate is large or if any regulating federate causes the federation to get behind, the requested time advance can be large (or far in the future).   In particular, there was no way to pause the federation or modify the game rate until the requested time was achieved.The Pacer was then rewritten to act more like a time-stepped federate.  It waited until the wallclock time advanced to the next time step and then made the request at that time.  The size of the time step was chosen to be relatively small (one second) so that the Pacer would not get stuck waiting for an advance far in the future. The next problem was that the Pacer could not advance fast enough at certain times.  For example, if the Pacer is the only regulating federate in the federation, it should be able to advance very quickly.  But with a time step of one second, it must make 86,400 separate time advance requests in order to advance one day.  To speed things up, the time step was made to be variable based on the actual achieved game rate.  If the achieved game rate was 50 to 1, then the time step was 50 seconds.  Finally, the time step was given a minimum of one second and a maximum of 100 seconds.  With this design the Pacer was able to run fast when needed, but also would not get stuck waiting too long for an advance.3.3 JTLS-EADSIM User PerspectiveFrom the user perspective, the JTLS-EADSIM federation was a success at the Lucky Sentinel exercise in Kuwait.  All the federation components were stable, allowing the desired training to occur.  Use of the RTI was transparent to the user.For comparison, a previous exercise integrated JTLS and EADSIM using a file sharing mechanism.  The use of HLA produced a vastly improved interface between these simulations.  The information passed between JTLS and EADSIM using HLA was in far greater depth than before, and the interface was much more dynamic and efficient than occurred with the file sharing linkage.In addition, by taking advantage of HLA time management, we were able to ensure causality between the events occurring in JTLS and EADSIM.4.  ConclusionsAs a result of the JTLS federation experiences, we present the following general conclusions:HLA was an excellent enabler for reuse.  It required a relatively small effort to make JTLS interoperate with EADSIM because we were able to reuse both the FOM and the HIP federate from the JTLS-NATO federation.From the training audience’s perspective, the use of JTLS with HLA was positive.  Users received prompt updates of data and almost immediate feedback from orders entered.  Although we encountered some problems as described in this paper, they were not evident to the end user.A federation is a complex system that requires careful testing.  Both the JTLS federations uncovered numerous problems during tests prior to use at exercises.  The early discovery of bugs led to the development of fixes or workarounds before scheduled use of the federations.Any federation that tests the limits of the RTI may encounter unexpected problems.  As none of the RTIs currently available are very mature, very stressful applications may reveal problems that have not yet been discovered.Federation initialization mechanisms are often necessary to ensure data integrity of all federates at the start of a federation execution.  At the start of execution, some means is necessary to ensure that each federate has the data it needs from other federates.  In addition, federates that join a federation in the middle of execution must also have mechanisms to be initialized properly.Performance issues may impact federation design.  A federation that generates a large amount of data should be careful in how the federation is designed.  In our case, it was necessary to separate the simulation process from its HLA interface process, rather than embedding this functionality in the simulation software.  In addition, an intelligent initialization scheme can ensure that the federation is started up efficiently.  Issues associated with DDM and data subscriptions should also be explored.Use of a manager federate is essential for quick identification of problems.  In our case, the FMT displays quickly alerted us to anomalies.  As federation processes are complex systems with multiple potential sources of problems, a management tool is very helpful to identify problems at runtime.AcronymsCEPCombat Events Program (part of JTLS)DDMData Distribution ManagementDMSODefense Modeling and Simulation OfficeEADSIMExtended Air Defense SimulationFMTFederation Management ToolFOMFederation Object ModelGCCSGlobal Command and Control SystemGDSGenis Data SystemHIPHLA Interface ProgramHLAHigh Level ArchitectureJTLSJoint Theater Level SimulationNATONorth Atlantic Treaty OrganizationNC3ANATO Consultation, Command and Control AgencyOPFOROpposing ForcesOTMOrder Translation ModuleRTIRuntime InfrastructureBibliography[NIEL98] Nielsen, J. Salisbury, M., “Challenges in Developing the JTLS-GCCS-NC3A Federation,” Proceedings of the Fall 1998 Simulation Interoperability Workshop, September 13-18, 1998.[NIEL99] Nielsen, J. “Federation Initialization and the RTI 1.3: Lessons from the JTLS-GCCS-NATO Federation,” Proceedings of the Spring 1999 Simulation Interoperability Workshop, March 14-19, 1999.Author BiographiesDAVID L. PROCHNOW is a lead software engineer in the Information Systems and Technology Division at the MITRE Corporation. He currently provides technical expertise to several HLA programs.  He has also chaired the SIW Logistics Forum since 1996.  At MITRE, Mr. Prochnow previously contributed to the ALSP project and to logistics simulation efforts. While at BDM International and Control Data Systems, Mr. Prochnow developed software for various corps-level and theater-level wargames.  He received a B.S. in Computer Science from the University of Virginia in 1983.C. ZACHARY FURNESS is Project Leader for MITRE support to the Defense Modeling and Simulation Office.  Previously, he served as Project Leader for the Aggregate Level Simulation Protocol (ALSP) project. Since joining MITRE in 1990, he has worked on numerous simulation programs involving the training, acquisition, and analysis of C4I systems. He holds a Master's Degree in Electrical Engineering and a Bachelor's Degree in Physics, both from Virginia Tech.JONATHAN ROBERTS is a lead software engineer in the HLA development team at Rolands & Associates Corporation.  He designed and developed the HIP and Pacer federates.  Mr. Roberts received a B.A. in Computer Science from the University of California at Berkeley in 1989. Game ratio is defined as the elapsed simulated time divided by the elapsed real time. The OTMs still have the mechanism to request updates after discovers, but the delay time is set to 5 minutes. At exercises, JTLS runs on machines with 1 GB RAM. These measurements were taken on a Sun Ultra 5 with 256 MB RAM and a 270Mhz processor. The modified RTI was subsequently used at the Prairie Warrior exercise in May 2000, but there are no plans for any more release of this RTI.	 EMBED PowerPoint.Slide.8   EMBED PowerPoint.Slide.8  