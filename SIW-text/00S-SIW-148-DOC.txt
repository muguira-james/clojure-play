JMASS98 – Engagement Level Simulation Framework++Bob McCauley, Jerry Hill, Peggy GravitzIllinois Institute of  Technology Research Institute (IITRI) 13501 Ingenuity Drive, Suite 236Orlando, FL 32826RLMcCauley@iitri.org, JHill@iitri.org, PGravitz@iitri.orgDavid McFarlandJMASS Joint Program Office2145 Monahan Way, Room 143Wright Patterson Air Force Base, Ohio 45433-7017Dave.mcfarland@wpafb.af.milKeywords: Engagement Level Simulation, JMASS, Simulation Framework, Models, Event Scheduling, Simulation Based Acquisition, HLA/RTI, Modeling and Simulation., Engagement Level Simulation, Engineering Level Simulation.ABSTRACT: This paper describes the currently deployed Joint Modeling And Simulation System (JMASS) version, JMASS98, focusing on how JMASS has been designed to be a plug-and-play model development system and framework that runs on Windows NT, Silicon Graphics Inc. (SGI) IRIX and Sun Solaris providing analysis tools and dynamic reconfiguration studies.. Background and ObjectiveJMASS is a tri-service Modeling and Simulation (M&S) system, which fosters simulations to be used in support of acquisition in general.  The intent is to make the M&S effort easier, cheaper and faster. JMASS provides a standard engineering/engagement-level simulation support environment, allowing modelers to define plug-and-play models, combine them into simulations, execute those simulations, then process and evaluate the results. A model thus assigned is called a player.  The assembled group of players is referred to as a team.  JMASS provides several tools and pre-defined services that simplify the configuration of players and provide access to common simulation services such as timing, event queuing, message logging, player data input/output, and inter-component communication.  The tools in JMASS interact via files whose contents are defined by simulation-specific File Format Specifications (FFSs).  JMASS provides additional common environmental services such as spatial state, terrain, Radio Frequency (RF) transmission, message passing, etc. JMASS simplifies and encourages code reuse by allowing JMASS compliant players to be combined and used within simulations through an object-oriented design philosophy and an established player Application Programming Interface (API).  If these players can be validated as being compliant with JMASS standards, they are added to the JMASS player repository.  Framework: JMASS thus consists of a simulation framework which provides an environment permitting modelers to focus on player development without expending significant effort on the infrastructure required for them to execute.  Framework++: Furthermore, the evolutionary addition of supporting players makes JMASS much more than a framework.  Over time, the portfolio of players to be added increases to provide an increasingly robust simulation environment.This paper focuses JMASS98, the currently-deployed JMASS version discussing the implementation of the above capabilities in the following fashion:True plug-and-play is provided with a definitive set of APIs, a disciplined architecture enforced by an input coding standard and a code generator to interpret that standard.  System installation on Solaris, Windows NT and IRIX is provided via one installation CDROM, with a common directory structure across these platforms.A common GUI standard, coupled with POSIX compliance, allows one set of source code to be run on Solaris, Windows and IRIX platforms.Reconfiguration of a simulation can be accomplished by changing player attributes, data to be recorded and execution components, via a GUI. Sequences of simulation runs with varying parameters can be easily configure and executed.  The results of these runs can be analyzed with the tools provided or with user selected tools.System descriptionThe system abstract model of JMASS98 is shown in Figure 2.-1.  A JMASS System is considered to be the worldview of all entities that play in a scenario involving a JMASS Simulation.  Such a scenario may involve JMASS either as a standalone simulation, or with interfacing to external systems, such as Hardware-In-The-Loop (HWIL), Man-In-the-Loop (MIL), external simulations, or live test assets such as are found in Open Air Ranges.As shown in the figure, a JMASS Simulation is made up of players and JMASS98, which provides the foundation supporting the development and deployment of the players.  This foundation includes a set of tools supporting development, execution, analysis and studies.  It also includes an execution framework, comprised of a Sim Engine and a set of Services including capabilities such as player-to-player communication, status logging, event scheduling, in addition to spatial, terrain, and atmosphere servers.  System CapabilitiesThe JMASS System described in section 2.0 provides the components to allow JMASS to be used for analytical engagement and engineering level simulations, which are comprised of one on one, one on few and few on few scenarios.  JMASS is designed to provide support of players pertinent to all services on land, sea, air and in space.  Specifically, JMASS supports:Execution of single engagement/engineering-level simulations comprised of multiple players, on a single processor platform.Capability for players to have repeatable, dependable and predictable exchange of data with other playersEvent-stepped simulations with an accurate data time tagging and a repeatable, controlled, time/event synchronization mechanism.Capabilities to dynamically start, pause, and abort execution of JMASS simulations.Capability to selectively execute language-specific and operating system software debugging functions including software traps, stepped execution, tracing, and output during runtime without perturbing other players, or general simulation execution ReuseThe foundation for the plug-and-play nature of JMASS players that facilitates reuse is the development standards provided. Player compliance standards define the basic software structure of JMASS players. The basic structure of the players are described using an architecture defining language, which allows all data attributes and object-oriented methods to be defined in a meta-language.  This meta-language is then processed by a code generator in such a fashion that the resulting code conforms to the prescribed player compliance standards.Data compliance standards also define communication between players that operate in the JMASS environment. Data standards also define JMASS-specific user input and output and the associated journaling files that are created during simulation execution and processed.  This provides a common denominator access to JMASS output that allows this data to be processed by external tools. Operational OverviewThe following sections describe the workflow of the system with respect to how the users of JMASS98 build and use applications.  For a more detailed explanation of this process, see the JMASS98 1.0 Users Manual [1] or the JMASS “As-Is” Technical Reference document [2] that are available from the JMASS JPO office.  As is shown in Figure 5-1, the process consists of four basic steps: develop & assemble, configure, execute and post-process.  In the normal use of JMASS, players and scenarios are developed and archived (after being validated using the Test Suite) in a reuse repository, thereby making these players available for future application development.This first step, Develop & Assemble, is separate from the rest of the build process to allow later configuration and reconfiguration to maximize the expandability of the players.  This step involves developing players, which are placed in player libraries, and assembling them into teams for execution.The next step, Configure, allows these teams to be configured or reconfigured by entering player parameters or information specifying what is to be recorded, or journelled, during execution.  Additionally, components may be substituted on a polymorphic basis.Figure 5.-1 Operational OverviewThe teams are then selected for execution and the scenario is executed.  During the execution, journal files are created which record the step-by-step results of the executions.The last step involves post-processing the journal files for analysis purposes, which allows a graphical 3D view of the simulation replay, and/or statistical analysis and graphing of recorded simulation results.The results of the entire process, including building players, teams, scenario, etc. can be archived and reused in later simulations.  JMASS Internal Execution ArchitectureThe top-level diagram of the JMASS98 internal execution architecture is shown in Figure 6-1. This figure shows the basic outline of how the system components function to run a simulation.  A GUI tool is used to initiate the execution of a simulation by making a call to the JMASS98 Sim Engine, specifying a scenario file that has been previously built during the development phase and modified during the configuration phase.  The Sim Engine reads and parses the scenario file and creates all players specified in the scenario.  The Sim Engine then uses the Initialize Method of the newly created Players to initialize the Players.  As part of the Initialize Method, the Player initiates its next activity (usually an update) that begins the update cycle.  When a Player runs, it interfaces with other players via JMASS ports.  These other players can function in a server capacity or on a peer-to-peer basis.  In order to execute a simulation, the players call JMASS98 Services, such as Terrain, Atmosphere, Event Scheduling, Message transmission, status message logging, etc.  These services respond to the calls, calling other services or the Sim engine, as necessary.  When a “scenario stop” request is entered via the Execution GUI, the Sim Engine calls the Destruct Method of the Players to stop the execution.Figure 6-1 Internal Execution ArchitectureConclusionsThe results discussed in the paper titled Rapid Prototyping Using Simulation Frameworks presented at the Fall 97 SIW Conference, indicated that use of a simulation framework significantly increases development productivity.  This was due to the fact that the developers can focus on one area, such as behavior modeling without having to develop be concerned with developing the foundation for executing the players.  JMASS is more than a simulation framework (thus labeled Simulation Framework ++ in this papers title), since it not only provides the development, execution and analysis foundation, but also tools, services, and interfaces necessary to create a scenario that can be used to execute the subject player. The orientation of JMASS for rapid development/spiral development makes it an ideal candidate for use in the next decade in conjunction with Simulation Based Acquisition (SBA).Future JMASSJMASS is an evolving system.  JMASS has been deployed for three years.  The previous release, JMASS 3.2 was an Ada 83 and C++ based system.  The current instantiation, JMASS98 is C++ based and has been released and is being used successfully for engagement level simulations.  The JMASS Operational Requirements Document (JORD) [4] provides for more capabilities (such as real-time multiprocessing, HLA/RTI interfaces, HWIL, MIL and Live Test Assets interfaces) than is currently available in JMASS98.  A JMASS migration path is currently being addressed in a system design process to schedule items to complete the JORD requirements to be added to JMASS during the remainder of the program.References[1] JMASS98 1.0 User’s Manual – Dynetics, Inc. – February 1999 (Available from the JMASS JPO Program Office -  http://www.jmass.wpafb.af.mil/index.html)[2] JMASS “As-Is” Technical Reference Architecture (TRA) –IITRI – October 1999 (Available from the JMASS JPO Program Office -  http://www.jmass.wpafb.af.mil/index.html) [3] Bob McCauley, Michael Tackaberry.Rapid Prototyping Using Simulation Frameworks,1997 Fall Interoperability Workshop - September 1997[4] Joint Operational Requirements Document for JMASS – 31 August 1998  (Available from the JMASS JPO Program Office -  http://www.jmass.wpafb.af.mil/index.html)Author’s BiographiesPeggy Gravitz is a Science Advisor for IITRI, who has specialized in DoD Modeling and Simulation standards with a focus in the areas of data and software quality.  She has over 17 years of IT experience in systems analysis, systems/database design, data/process/enterprise modeling, software development, software quality assurance, configuration management and systems administration. Jerry Hill is a Senior Science Advisor for IITRI., who has specialized in real time data acquisition software development.Bob McCauley is a Senior Science Advisor for IITRI and the project lead for developing the JMASS To-Be Technical Reference Architecture (TRA).David McFarland is a systems engineer for the JMASS program office and is the group leader for the JMASS system development group. Studies ToolsAnalysis ToolsDevelopmentToolsExecution ToolsServicesSim EngineFrameworkToolsPlayersJMASS 98External SystemsJMASS SimulationJMASS SystemFigure 2.-1 JMASS System Abstract Model