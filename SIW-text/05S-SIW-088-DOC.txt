RPR-BOM Initiative: Providing a Set of Applicable BOMs to the M&S CommunityPaul GustavsonTram ChaseSimVentions, Inc.11903 Bowman Drive, Suite 102, Fredericksburg, VA 22408-7307 HYPERLINK "mailto:pgustavson@simventions.com" pgustavson@simventions.com HYPERLINK "mailto:tchase@simventions.com" tchase@simventions.comKeywords: BOM, Composability, HLA, Metadata, Reuse Libraries, RPR-FOMABSTRACT:  As the development of the BOM specification has evolved, it has become evident that an initial set of applicable BOMs should be made available to the community.  While our HLA “hello world” examples that typically center upon a restaurant theme provide some substance for understanding, the appetite has been for something much more.    The Real-time Platform Reference (RPR) FOM has arguably been the most widely used FOM in the community.  Thus, it makes sense to leverage the recent RPR FOM 2.0 version, and decompose it into a set of manageable BOMs representative of the various patterns of interplay useful in supporting the composability of various simulations and simulation environments.  Furthermore, this effort provides an opportunity to capture additional information such as state transition model within these BOMs, which helps further enable integration.The benefit in these RPR BOMs is that it should provide and enable the composability, exchangeability, extensibility, manageability, and understandability of models within the community.  This paper explores each of these benefits based on the current versions of the RPR BOMs, which have been created as an initial proof of concept. IntroductionDeveloping and selecting an appropriate Federation Object Model (FOM), which represents the agreed upon information to be exchanged among participants within a federation, is one of the most critical aspects leading to simulation interoperability within the High Level Architecture (HLA).     The task of developing a FOM can be long and arduous as it requires extensive collaboration with the stakeholders of each federate.  A common approach is to adopt an existing FOM and tailor each federate to conform to that federation agreement.  Another approach is to modify both the FOM and the federates to better reflect the needs and objectives of the sponsor(s) of the federation.    Whichever approach is chosen, extensive effort is required in the engineering of the FOM and/or in the integration of the federation.  Until this point, these activities have been necessary.  For without common adherence to an agreed upon FOM, the interoperability desired among federates can not be achieved. Yet frustration often results, not only in the amount of time, effort and collaboration it takes to formulate a FOM and in refactoring a federate to comply with that FOM, but in the engineering of things which are found to be commonly recreated and repeated from one federation development effort to another.  The desire is to reuse and integrate common piece-parts that go into a FOM:  object classes, interaction classes, and perhaps some of the relationships commonly found among object classes and interaction classes. FEDEP Piece Part ApproachThe Federation Development and Execution Process (FEDEP) paints a very clear picture that an alternative way to build FOMs and SOMs is through the application of “piece-parts” [1].   The FEDEP, which is an IEEE standard, provides a systems engineering perspective on developing and supporting distributed simulation environments as it relates to the HLA.  One of the specific things mentioned in the FEDEP is that the concept of Base Object Models (BOMs) could serve as a potential facilitator for providing reusable object model components used for the rapid construction and modification of simulations and simulations spaces.A BOM is a standards-based approach for describing a reusable component or piece part of a simulation or system.  BOMs are unique in that they are able to represent or support discrete patterns of interplay among conceptual entities within a simulation environement.  BOMs are intended to serve as building blocks for supporting composability.  This includes the composition of HLA object models, federate capabilities, and / or federation agreements irregardless of the hardware platform, operating system, or programming language required of a participating federate.The Need for Relevant BOMsWhile BOMs provide an emerging standard that supports the FEDEP “piece part” concept, the obvious need is the availability of existing BOMs so that they can be applied and used.  This raises the question of what types of examples makes the most sense to the community?The place to start in answering this question is to evaluate what common object models are used to support the majority of defense-oriented federations.  The Real-time Platform Reference (RPR) FOM [2], pronounced “reaper fom”, may arguably be the most widely used FOM in the community. The author’s contention is that common “patterns of interplay” can be leveraged from this FOM that can be turned into highly-reusable BOMs.   A pattern of interplay is defined as specific type of pattern characterized by a sequence of activities involving one or more conceptual entities.The benefit in decomposing the RPR FOM into RPR BOMs is that it would provide a means for supporting the following:Composability – BOMs and any supporting functional models can be combined and used to support federation agreements and/or enable federate capabilities. Exchangeability – BOMs can be swapped and replaced by other BOMs, which provides a  means for serving more sponsor-focused interests and greater simulation-asset capabilities Extensibility – new BOMs can be added more easily to an existing BOM set representing a FOM.Manageability – BOMs can be individually managed, controlled, versioned, verified, and validated.Understandability – BOMs provide more information than SOMs or FOMs which leads to understanding the BOMs intent, limitations, and how it can be integrated and used.Decomposing the RPR FOM into BOMs.The RPR FOM was originally intended to support the transition of legacy Distributed Interactive Simulation (DIS) [4] systems to the HLA.  It organizes the Protocol Data Units (PDUs) defined by the DIS into a HLA object class and interaction class hierarchy.  Like DIS, the RPR FOM is “designed to support real time simulations where the principal participants are models of discrete physical entities such as planes, ships, soldiers, and munitions.  These simulations are considered "real-time" because each second of elapsed execution time is equivalent to one second of time in the virtual world.”  Decomposing the recent RPR FOM 2.0 version it into a set of manageable BOMs serves as good demonstration of how well the BOM concept can be applied to a relevant, widely applicable domain.  These BOMs can serve useful in supporting the composability of various simulations and simulation environments.  Furthermore, this effort provides an opportunity to begin to capture additional behavior descriptions such as state information within these BOMs. This will further enable integration.  State information was reflected for various PDU applications in the DIS Protocol Data Unit (PDU) specification, IEEE 1278, the HLA OMT specification [6], IEEE 1516.2 does not provide a way to document this information.BOM BasicsBefore diving into what can be decomposed from the RPR FOM into BOMs,   It’s important to understand the BOM basics.  A BOM distinguishes between a component’s or piece part’s interface and its implementation.  Specifically, a BOM reflects a language neutral interface that identifies the essential elements provided by a component or piece part. The implementation (or functionality) for that component or piece part can be captured independently through source code, a binary object such as a Windows DLL, a Unix Object, or in other ways such as the Simulation Reference Language Markup (SRML).This separation of interface from implementation allows BOMs to serve as building blocks for supporting composability.  This includes the composition of HLA object models, federate capabilities, and / or federation agreements irregardless of the hardware platform, operating system, or programming language required of a participating federate.  The basic components of a BOM which provide the framework to support this type of composition are identified in Figure 2-1.Figure 2-1 – BOM Metadata ElementsAs stated earlier, one of the anticipated applications of BOMs is to capture a pattern of interplay among conceptual entities. This is accomplished in the Pattern Description portion of the BOM. The Pattern Description is composed of a collection of actions that describe the events which transpire among the conceptual entities being modeled. These events are messages or triggers that have been included in the Events section of the BOM. The Pattern Description actions also contain a source and target property which allows the BOM user to denote which conceptual entities the event occurs between. These allow an object class to be tagged as the conceptual entity that fulfills the responsibilities described by the pattern description.  If a BOM exists that describes an interface to a model, whether it be an object class, pattern of interplay, or state machine, and that model appears to support the required objectives for the federate or federation, it would be sensible to use that existing model instead of repeating the development process; that is recreating it. Furthermore, such a BOM could provide use history and other related meta-data that would assist in the selection process.The Patterns of Interplay found in the RPR FOMThe best place to start in identifying the patterns of interplay within the RPR FOM is to examine the original document that the RPR FOM development team used as basis for defining the RPR FOM:  the DIS PDU specification.Although they are not explicitly called “patterns of interplay” in the DIS PDU specification, IEEE 1278 does identify a common set “types and families of Protocol Data Units (PDUs).  These protocol families are identified as follows:Entity information / interactionWarfare (including fire / detonation)Logistics (including resupply and repair)Simulation ManagementDistributed Emission RegenerationRadio CommunicationsEntity ManagementMinefieldSynthetic EnvironmentThe RPR FOM does a reasonable job reflecting these – but they are melded together and presented as one combined model group leaving little opportunity for “reusing” common model pieces – or exchanging one pattern of interplay for another.Another set of documents useful in leveraging for decomposing an applicable set of BOMs is the RPR FOM 2.0 DIF and its supporting Guidance, Rationale, and Interoperability Manual (GRIM) for the RPR FOM [3].The RPR FOM identifies the various object classes and interaction classes needed for supporting the various patterns of interplays.  A set of BOMs based on the RPR FOM will contain additional information including the states of a conceptual entity. This information can be drawn from the original DIS PDU specification.  In fact, in the GRIM it states that “the use of interaction classes involves a detailed understanding of the state transitions and timing between events.”  The original DIS Protocol Data Unit (PDU) specification provides some of the state information for the related protocol families that can be reflected within a BOM.Mapping with the protocol families described in the original DIS PDU specification and also described in the GRIM, we can identify candidate RPR BOMs: Weapon EffectsLogistics SupportResupplyRepairSimulation ManagementEntity/Exercise ManagementData ManagementDistributed Emission RegenerationRadio CommunicationsRadioSignalEntity ManagementMinefieldSynthetic EnvironmentFor the sake of fitting within the limitations required for this paper we will explore only the three of the potential BOMs:  Weapon Effects, Logistics Support for Resupply; and Logistics Support for Repair.  Then we will describe how these can be combined and used as an act of composability to support federation integration and interoperability.Weapons Fire RPR BOMWeapons Fire is a pattern that is prevalent in many simulations and federations.  The conceptual entities include a shooter and a target.  The activities between these conceptual entities include a fire and, if successful, a detonation, which results in a damage state update by the target.  This set of activities represents a pattern of interplay, which can be defined and packaged as a BOM.  Figure 3.1 illustrates a UML sequence diagram representing this pattern of interplay.  The vertical lines in this diagram represent the life-time of the object instances which are labeled at the top. The horizontal lines represent the actions that occur among these object instances.  Additionally, this sequence diagram has been decorated with numbered circles identifying the sequence of the action within the pattern of interplay and the states for both the shooter (firing entity) and target (target entity) as boxes beside each objects life-time.  Figure 3.1 – Weapons Fire Pattern of InterplayWhat we can extract from the original RPR FOM needed for this BOM are two Interaction Classes:WeaponFire Interaction ClassMunitionDetonation Interaction ClassAlthough there are only two conceptual entities shown in the sequence diagram there can be up to three conceptual entities used to support this pattern of interplay:Firing EntityMunition (owned by Firing Entity)Target EntityThe UML diagram we have used to illustrate this BOM has provided a mechanism for understanding the pattern of interplay.  However, UML, in itself, is not sufficient for capturing BOMs.  It is imperative to be able to capture the behavior information of patterns, states and events in a context that is appropriate for supporting but not limited to HLA. What is needed is the notation conforming to a standardized template containing the necessary pattern information that is described using HLA OMT constructs.   This template is provided by the BOM Template Specification [7]. In this manner no new notation(s) needs to be learned for those who are not UML-savvy, additionally it allows for existing and emerging HLA tools to easily adopt and utilize this template.The pattern of description for this BOM utilizing the BOM Template Specification is provided in Table 3.1-1. Table 3.1-1 – Weapon Fire Pattern Description  Action Sequence1NameWeapon FireEventWeaponFireSourceFiringEntityTargetTargetEntityBOMN/AAction Sequence2NameMunition DetonationEventMunition DetonationSourceFiringEntityTargetTargetEntityBOMN/AAction Sequence3NameDamage State UpdateEventDamageStateUpdateSourceTargetEntityTargetFiringEntityBOMN/AThe events identified with the actions contained within the pattern of interplay are defined with either messages or triggers.  The messages for this BOM utilizing the BOM Template Specification are identified Table 3.1-2 and Table 3.1-3Table 3.1-2 – Weapon Fire MessageNameWeaponFireMessage Content ElementsHLAinteractionRoot.WeaponFireSource Descriptor ElementsHLAinteractionRoot.WeaponFire.FiringObjectIdentifierTarget Descriptor ElementsHLAinteractionRoot.WeaponFire.TargetObjectIdentifierDescriptionMessage for representing weapon fire interaction among conceptual entitiesTable 3.1-3 – Munition Detonation MessageNameMunitionDetonationMessage Content ElementsHLAinteractionRoot.MunitionDetonationSource Descriptor ElementsHLAinteractionRoot.MunitionDetonation.FiringObjectIdentifierTarget Descriptor ElementsHLAinteractionRoot.MunitionDetonation.TargetObjectIdentifierDescriptionMessage for representing weapon detonation interaction among conceptual entitiesThe Trigger for this BOM is defined in Table 3.1-3.Table 3.1-4 – Damage State TriggerNameDamageStateUpdateTrigger ConditionHLAobjectRoot.TargetEntity.DamageState != previousHLAobjectRoot.TargetEntity.DamageStateSource Descriptor ElementsHLAobjectRoot.TargetEntity.idDescriptionTrigger for representing entity update interaction among conceptual entities These events are supported interaction classes that are extracted from the RPR FOM. These are listed in Table 3.1-5.Table 3.1-5 – Weapons Effect Interaction ClassesHLAinteractionRoot (N)MunitionDetonationWeaponFireThe states of a conceptual entity that fulfill the responsibilities for both roles described in the pattern are shown in Table 3.1-6.Table 3.1-6 – Weapons Effect Entity StatesNameEntityStatesObjectEntityClassFiringEntityTargetEntityState NameReadyExitCondition PatternActionWeapon FireNextStateUnderFireNotes State NameFireExitCondition PatternActionWeapon FireNextStateMunitionFlightNotes State NameUnderFireExitCondition PatternActionMunition DetonationNextStateReadyNotes State NameMunitionFlightExitCondition PatternActionMunition DetonationNextStateReadyNotes Notes Logistics - Resupply RPR BOMOne of the common patterns used to represent logistic operations is resupply. Actors involved include a conceptual entity called the “requester” which requests the need for the resupply of fuel, food, equipment or ammunition for either itself, or another conceptual entity, called the “consumer”.  The conceptual entity responsible for providing the resupply is known as the “supplier”.   The activities between these conceptual entities are identified in the UML sequence diagram shown in Figure 3.2.   This diagram has been additionally decorated with the states associated to these three conceptual entities.   It should be noted again that the “requester” and “consumer” may be one in the same. Figure 3.2 – Logistics Resupply BOMWhat we can extract from the original RPR FOM needed for this BOM are four Interaction Classes:ResupplyCancel Interaction ClassResupplyOffer Interaction ClassResupplyReceived Interaction ClassServiceRequest Interaction ClassThe Conceptual Entities used to support this pattern of interplay are identified below:Requester / ConsumerRepairerSupplierThe pattern of description for this BOM utilizing the BOM Template Specification is provided in Table 3.2-1. Table 3.2-1 – Logistics – Resupply  Pattern DescriptionAction Sequence1NameRequest ServiceEventRequestServiceSourceRequesterTargetSupplierBOMN/AAction Sequence2NameResupply OfferEventResupplyOfferSourceSupplierTargetConsumerBOMN/AAction Sequence3NameResupply ReceivedEventResupplyReceivedSourceConsumerTargetSupplierBOMN/AThe events identified with the actions contained within the pattern of interplay are defined with either messages or triggers.  The messages for this BOM utilizing the BOM Template Specification are identified Table 3.2-2 and Table 3.2-3Table 3.2-2 – Service Request MessageNameRequestServiceMessage Content ElementsHLAinteractionRoot.ServiceRequestSource Descriptor ElementsHLAinteractionRoot.ServiceRequest.RequestingObjectTarget Descriptor ElementsHLAinteractionRoot.ServiceRequest.ServicingObjectDescriptionMessage for representing service request interaction among conceptual entities Table 3.2-3 – Resupply Offer MessageNameResupplyOfferMessage Content ElementsHLAinteractionRoot.ResupplyOfferSource Descriptor ElementsHLAinteractionRoot.ResupplyOffer.SupplyingObjectTarget Descriptor ElementsHLAinteractionRoot.ResupplyOffer.ReceivingObjectDescriptionMessage for representing supply offer interaction among conceptual entitiesThe Trigger for this BOM is defined in Table 3.2-4.Table 3.2-4 – Resupply Received TriggerNameResupplyRecievedTrigger ConditionHLAobjectRoot.Consumer.Full = trueSource Descriptor ElementsHLAinteractionRoot.ResupplyReceived.ReceivingObjectDescriptionConsumer has been resuppliedThese events are supported interaction classes that are extracted from the RPR FOM. These are listed in Table 3.2-5.Table 3.2-5 – Resupply  Interaction ClassesHLAinteractionRoot (N)ResupplyOfferServiceRequestResupplyCancelResupplyReceivedThe states of a conceptual entity that fulfill the responsibilities for both roles described in the pattern are shown in Table 3.2-6.Table 3.2-6 – Resupply Entity StatesNameEntityStatesObjectEntityClassRequester/ConsumerSupplierState NameReadyExitCondition PatternActionResupply OfferNextStateReceivingExitCondition PatternActionResupply OfferNextStateSupplyingNotes State NameSupplyingExitCondition PatternActionResupply ReceivedNextStateReadyNotes State NameReceivingExitCondition PatternActionResupply ReceviedNextStateReadyNotes Notes Logistics - Repair RPR BOMThe other common pattern used to represent logistic operations is the repair activity. Actors involved include a conceptual entity called the “requester” which requests the need for the repair for either itself, or another conceptual entity, called the “consumer”.  The conceptual entity responsible for providing the resupply is known as the “repairer”.   The activities between these conceptual entities are identified in the UML sequence diagram shown in Figure 3.3.   This diagram has been additionally decorated with the states associated to these three conceptual entities.   It should be noted again that the “requester” and “consumer” may be one in the same. Figure 3.3 – Logistics Repair BOMWhat we can extract from the original RPR FOM needed for this BOM are three Interaction Classes:RepairComplete Interaction ClassRepairResponse Interaction ClassServiceRequest Interaction ClassThe Conceptual Entities used to support this pattern of interplay are identified below:Requester / ConsumerRepairerSupplierThe pattern of description for this BOM utilizing the BOM Template Specification is provided in Table 3.3-1. Table 3.3-1 – Logistics Repair Pattern DescriptionAction Sequence1NameRequest ServiceEventRequestServiceSourceRequestorTargetRepairerBOMN/AAction Sequence2NameRepair CompleteEventRepairCompleteSourceRepairerTargetConsumerBOMN/AAction Sequence3NameRepair ResponseEventRepairResponseSourceConsumerTargetRepairerBOMN/AThe events identified with the actions contained within the pattern of interplay are defined with either messages or triggers.  The messages for this BOM utilizing the BOM Template Specification are identified Table 3.3-2 and Table 3.3-3Table 3.3-2 – Service Request MessageNameRequestServiceMessage Content ElementsHLAInteractionRoot.ServiceRequestSource Descriptor ElementsHLAInteractionRoot.ServiceRequest.RequestingObjectTarget Descriptor ElementsHLAInteractionRoot.ServiceRequest.ServicingObjectDescriptionMessage for representing a service request interaction among conceptual entitiesTable 3.3-3 – Repair Response MessageNameRepairResponseMessage Content ElementsHLAInteractionRoot.RepairResponseSource Descriptor ElementsHLAInteractionRoot.RepairResponse.ReceivingObjectTarget Descriptor ElementsHLAInteractionRoot.RepairResponse.RepairingObjectDescriptionMessage for representing a repair response interaction among conceptual entitiesThe Trigger for this BOM is defined in Table 3.3-4.Table 3.3-4 – Repair Complete TriggerNameRepairCompleteTrigger ConditionHLAobjectRoot.Consumer.DamageState = undamagedSource Descriptor ElementsHLAInterationRoot.RepairComplete.RepairingObjectDescriptionConsumer has been repairedThese events are supported interaction classes that are extracted from the RPR FOM. These are listed in Table 3.3-5.HLAinteractionRoot (N)RepairResponseServiceRequestRepairCompleteTable 3.3-5 – Repair  Interaction ClassesThe states of a conceptual entity that fulfill the responsibilities for both roles described in the pattern are shown in Table 3.3-6.Table 3.3-6 – Repair Entity StatesNameEntityStatesObjectEntityClassRequester/ConsumerRepairerState NameReadyExitCondition PatternActionRequest ServiceNextStateRepairingExitCondition PatternActionRequest ServiceNextStateUnder RepairNotes State NameRepairingExitCondition PatternActionRepair ResponseNextStateReadyNotes State NameUnder RepairExitCondition PatternActionRepair ResponseNextStateReadyNotes Notes  Creating a RPR Assembly BOM and Outputting a FOMOne of the common boundaries to the use of compositions is the difficulty in identifying and assembling components. The BOM concept provides a standard framework which facilitates such compositions via a simple process.  In this section we will discuss and show how to create a BOM Assembly that ties together our RPR BOMs as a composition. We will then show how to take that Assembly BOM and generate an HLA 1516 compliant FOM.  At the level which the RPR BOMs have been described we have an individual BOM which portrays a weapon fire event and a separate BOM describing a repair event, each of these has a set of actions associated to events noted within the respective BOM which are accomplished. If the level of abstraction is zoomed out a bit, each BOM mentioned could be an individual action inside a BOM with broader scope.  This composition of various BOMs as “actions”, and the related conceptual entities that use or are affected by these “actions” can be graphically shown via the use of a UML sequence diagram as illustrated in Figure 4.Figure 4 – RPR BOM AssemblyThe pattern of description for this BOM utilizing the BOM Template Specification is provided in Table 4-1. Table 4-1 – RPR BOM Assembly Pattern DescriptionAction Sequence1NameWeapon FireEventN/ASourceFiring EntityTargetTarget EntityBOMWeapons Effect BOMAction Sequence2NameRepair DamageEventN/ASourceRepairingEntityTargetTarget EntityBOMRepair BOMThe Pattern Description in this new BOM has two actions and both are references to other BOMs instead of messages or triggers. This is what is known as a BOM Assembly. This BOM Assembly is a standalone BOM and contains its own set of metadata. While the BOM specification does not restrict including descriptions of the object and interaction classes, a less redundant solution is to let the class and interaction classes “live” in the original BOMs. This reduces conflicts that could arise from editing one BOM and not the BOM Assembly or vice versa.Once BOMs have been combined in the above manner to describe the requirements of a federation (or even an individual federate), it is possible to transform the BOM Assembly into a FOM. First, the referenced BOMs must be parsed and any object and/or interaction classes must be pulled from those BOMs, as well as any associated attributes, parameters, and datatypes. Second, an XLST transformation is then used to output a FOM from the BOM Assembly metadata and the pulled class data. This approach allows for continued HLA operations while taking advantage of the benefits of BOMs mentioned in Section 1.2.SummaryWe have explored the benefits and an initial set of examples of BOMs derived from the RPR FOM that  have not only been created as an initial proof of concept – but as living set of BOMs that can be used today for supporting a more efficient and effective federation development process. The benefits of BOMs are that they lend themselves well to: supporting composability by allowing BOMs to be combined to represent and federations and support federations; providing extensibility of FOMs through the application and integration of new BOMs; supporting the exchangeability of one BOM for another; facilitating better manageability of BOMs by enabling team development through distribution of responsibilities, and as a mechanism needed for configuration management and unit testing; and for increased understandability of intent, limitations and application through the metadata BOMs provide.The result of this initial RPR BOM effort is that it can be used to provide a framework for supporting the next update of the RPR FOM, version 3.0, as a RPR BOM Assembly.Additional InformationAdditional information and downloadable material on BOMS can be found on the Base Object Model Specification Information website at  <www.boms.info>.AcknowledgmentsThis document was prepared based on the work produced by the SISO BOM Product Development Group (PDG) and the results and findings of SimVentions in support of the Defense Modeling and Simulation Office (DMSO) in the area of composability.  The authors would also like to thank Roy Scrudder for his insights and comments provided in the development of this paper, and Graham Shanks, a noted authority of the RPR FOM, who has encouraged the development of these RPR BOMs  ReferencesIEEE Recommended Practice for High Level Architecture (HLA)  Federation Development and Execution Process (FEDEP), IEEE Std 1516.3-2003Real-time Platform Reference Federation Object Model (RPR FOM), ), Version 2.0D17, SISO.Guidance, Rationale, and Interoperability Manual for the Real-time Platform Reference Federation Object Model (RPR FOM), Version 2.0D17, SISO.Standard for Distributed Interactive Simulation--Application Protocols,  IEEE 1278.1, 1995 Standard for Distributed Interactive Simulation--Application Protocols,  IEEE 1278.1a, 1998 IEEE Standard for Modeling and Simulation (M&S) High Level Architecture (HLA) - Object Model Template (OMT) Specification, IEEE Std 1516.2-2000Base Object Model (BOM) Template Specification, SISO-STD-003.1-TRIAL-USE-V0.9bGuide for Base Object Model (BOM) Use and Implementation, SISO-STD-003.0-DRAFT-V0.9Author BiographiesPAUL GUSTAVSON is Chief Scientist and co-founder of SimVentions, Inc.   He has over 15 years experience supporting a wide variety of modeling and simulation, system engineering, and web technology efforts within the DoD and software development communities.  Mr. Gustavson has been a long-time advocate and pioneer of the Base Object Model (BOM) concept for enabling simulation composability, interoperability and reuse. He has also co-authored and edited several software development books and articles related to C++, UML and mobile computing. His e-mail address is <pgustavson@simventions.com>.TRAM CHASE is a software engineer at SimVentions, Inc. (http://www.simventions.com) and is focused on the development and integration of technology for creating innovative and engaging experiences and solutions. In support of BOMs, Tram has been the lead developer of BOMworks™, a tool used to build, edit and compose BOMs.  Tram is a graduate of Virginia Tech, with a B.S. in Mathematics (1994), and has supported a wide variety of modeling and simulation and system engineering efforts within the DoD. Tram lives in Virginia with his wife.  His e-mail address is <tchase@simventions.com>.