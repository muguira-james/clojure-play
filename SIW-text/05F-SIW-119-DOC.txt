Modeling and Enhancing C4ISR with Executable Architectures David C. BenjaminLawrence G. Elliot Gregory A. Harrison Lockheed Martin Simulation, Training & Support (LMSTS)12506 Lake Underhill Rd.Orlando, FL, 32825407-306-5067, 407-306-5220, 407-306-6584david.benjamin@lmco.com,  HYPERLINK "mailto:lawrence.elliot@lmco.com" lawrence.elliot@lmco.com, gregory.a.harrison@lmco.com Russell HuttAir Force Agency for Modeling & Simulation (AFAMS)/MSN 407-208-5718 HYPERLINK "mailto:russell.hutt@afams.af.mil" russell.hutt@afams.af.milHoward S. KernLockheed-Martin Information Technology (LMIT)5290 Shawnee RdAlexandria, VA 22312703-916-9418 HYPERLINK "mailto:howard.kern@lmco.com" howard.kern@lmco.com Keywords:Architecture, Petri net, Executable Architecture, DODAFABSTRACT: Methods to document C4I architectures generally result in a static artifact. Efforts in Executable Architectures allow these static diagrams to be simulated to evaluate different architectural choices. Various simulator engines provide the capability to model these architectures, generally using a Petri Net methodology. Multiple, best-of-class, simulation systems can be linked together to provide a more accurate simulation, with each simulator modeling a certain aspect of the environment space. Once the executable architecture is running, it can be used to perform what-if analysis, and act as a gauge for measuring performance of the actual system during operation. This approach helps the integration and monitoring of the distributed system modeled within the executable architecture. This paper will describe an example Distributed Executable Architecture, the integration of its components, and its application to C4ISR. 1. Introduction to Executable ArchitecturesThe effort to Model and Enhance C4ISR with Executable Architectures is led by the Air Force Agency for Modeling and Simulation (AFAMS). AFAMS, which is the implementing agent for the AF M&S Integration Matrix and the Air Force M&S Cross-Mission Architecture.  Modeling and Enhancing C4ISR with Executable Architectures is a milestone effort which not only supports the Integration Matrix  and the Air Force M&S Cross-Mission Architecture, but it is an effort that smoothens the gap between the DODAF Six Step architecting processes, operationalizes M&S into the real-world architectures, shows utility in developing and maintaining architectures and is our critical accomplishment of achieving Objective 1.0 of the DoD Master Plan, having the capability to foresight. The Integration Matrix, shown in Figure 1, is a mission-centric view of the overarching Battle Plan for advancing AF M&S into the future.  The Integration Matrix identifies the areas where the AF needs to devote more time and resources to support our national defense by furthering AF capabilities. Therefore IAW DoD Architecture Framework, the Integration Matrix identifies and drives the purpose for architecting, this is Step #1 of the six step architecting process, shown in Figure 2. EMBED PowerPoint.Slide.8  Figure 1. The Integration Matrix.The overall purpose of the Air Force M&S Cross-Mission Architecture as directed by the AF CIO initiative was to populate the AF Enterprise Architecture; to begin mapping this architecture with the real-world architectures and to tie the M&S Event Architectures between the two; to kick start the architecting initiative within the M&S community; to assist the AF and JNTC in their training transformation initiative.  Since the Air Force M&S Cross-Mission Architecture is a large undertaking, a spiral development process was incorporated which identified the construction of different architecture versions.  The first version, known as Spiral One, had a further defined purpose.  The purpose of Modeling and Enhancing C4ISR with the Executable Architectures effort is to provide an open platform for conducting  EMBED PowerPoint.Slide.8  Figure 2.  The Architecting Process.executable architectures, to use the executable architecture methodology for M&S capability planning, and to determine the best use of time and resources to set up training events.  EMBED PowerPoint.Slide.8  Figure 3.  Linking Simulation with Real-World Infrastructure.Step #2 is to scope the Air Force M&S Cross-Mission Architecture. Coincidentally the M&S Community is organized into three Air Force M&S Thrusts, which lends itself well for scoping out the work.  The Air Force M&S Cross-Mission Architecture, is the one representative architecture for all of AF M&S; it is the overarching AF M&S architecture that articulates the association for all architecture artifacts identified within each of the thrusts.  This architecture will identify all the resources in each of the thrusts that can be shared and interchangeably used among everyone in the M&S community at large to support varying purposes.  The three Air Force M&S Thrusts are:New and Emerging Warfighter Capabilities (NEWC) – Focuses on capabilities to determine future force structure, which includes Science & Technology (S&T), analysis, concept exploration and future wargaming.Accelerated Acquisition (AA) – Focuses on capabilities needed to reduce time and resources to provide material solutions to the Warfighter.  This includes M&S resources and processes for design, development, test and evaluation, maintainability, and logistics. AF-ICE and the Multi-Service Distributed Testing Event (MSDE) architecture are examples of architectures that support this thrust.   Warfighter Readiness (WR) – Focuses on Warfighter environment capabilities to improve operational training, mission rehearsal, operational decision support, concept development, and wargaming designed to teach warfighting skills. The Distributed Mission Operation Center (DMOC) architecture is an example of architecture that support this thrust.  Figure 3 illustrates some of the capabilities provided by the DMOC to link real world operations with Modeling and Simulation.  The effort to Model and Enhance C4ISR with Executable Architectures is within this thrust.  To determine data required to support the intended purpose, the architecture work was to begin with architecting Distributed Mission Operations (DMO) – since it is very well known within the M&S community.  In accordance with Step #3, the type of data required for this effort was sourced from the DMOC and the Virtual Flag Events. Specifically, the prototype effort was to focus on a Time Sensitive Targeting Thread (TST).  This was just the 1st thread, of the 5 possible threads from the DMOC VF.  The heart of this paper will further explain Steps 4-6: Step #4 is to collect the data from the DMOC; Step #5 is to develop and demonstrate the Executable Architecture Methodology for Analysis (EAMA) to validate the C2 Constellation TST Architecture during the VF event; and Step #6 is to use empirical data from the previous step to refine the static architecture views.2.  The Static Architecture as a Baseline for the Executable ArchitectureThe baseline for this executable architecture effort is a static architecture thread from a Virtual Flag (VF) Exercise – the Virtual Flag Time Sensitive Targeting (TST) Special Operations Forces (SOF) Vignette Architecture, version 3.0, 11 July 2005.  The effort was scoped to focus on a single VF Exercise training event in order to understand the complexity of the relationships between operational and systems components of the modeling and simulation (M&S) environment while remaining within architecture production budget constraints.As one of the overarching objectives of the architecture effort was to show how the M&S environment of the exercise vignette emulated the real world, we used a real-world TST architecture as a starting point for the exercise architecture – the Command and Control (C2) Constellation Time Critical Targeting (TCT) 2005 Architecture, 12 December 2003, developed by MITRE for the Air Force.  We updated and focused it based on the Multi-Service Tactics, Techniques, and Procedures (MTTP) for Targeting Time-Sensitive Targets, 20 April 2004 and used a TST architecture developed by the Cross-Service Integrated Architecture (CSIA) Working Group for further focus.  As development of the architecture progressed we modified the architecture to reflect unique aspects of the way the scenario was implemented in VF at the Distributed Mission Operations Center (DMOC).   This allowed the Exercise World, shown in Figure 4, to be better understood, to enhance simulation of the real world, using the available assets.Figure 4.  Real-World and Exercise WorldThe scenario flowed through the TST Find, Fix, Track, Target, Engage, and Assess (F2T2EA) phases.  VF-specific changes included limiting C2 and ISR assets to those participating in the exercise vignette such as JSTARS, Predator, AWACS, and SOF.  The architecture did not include all the assets that would be available under the C2 Constellation TCT 2005 Architecture, e.g., Global Hawk, U-2, etc., nor did it include VF assets not used for TST such as Patriot, B2, the Control and Reporting Center, and the Air Support Operations Center.  Scenario constraints, meanwhile, dictated that the TST was initially observed and reported only by a SOF team.  Follow-on Predator, and Rivet Joint observations, as well as reporting obtained from engaging fighter assets (F-16s) confirmed the TST and assisted in post-strike assessment.  Consequently, the architecture reflects the flow of information to various ISR assets but does not necessarily reflect flows from all of them, because not all had target-related information to report.  The architecture did not include “negative reporting” from ISR assets that a target had not been sensed by those assets.In order to meet Chief of Staff of the Air Force (CSAF) guidelines for prosecution of TST within 10-15 minutes, we also used several DMOC subject matter expert (SME)-recommended assumptions. Although an ultimate objective for M&S is to provide an environment that simulates reality to the point that the trainee does not perceive a difference, the march toward this goal is still in progress.  The variety of systems that must be brought together does not include just the virtual and constructive systems that simulate those of the real world or simulate their products.  The exercise must incorporate additional measures such as filters to step down the transmission of data to receiving systems in a way that prevents the receivers from being swamped.  Similarly, the environment must take steps to emulate the latency of the real-world environment.  The real tactical environment is not tied together by T-1 lines, engineering networks, voice communications emulators, etc.  Also, there is an overlay of systems that are key to controlling the exercise such as loggers and brief/debrief tools.  These facets are characteristic of the M&S Warfighter Readiness environment.  In part from the DMOC information, and in part from additional research, we derived a cross-reference between real-world and constructive/virtual systems participating in the exercise.  The relationship was not always one-to-one and sometimes there were issues concerning the same system having different names in different Services.  Gathering the information is one of the main efforts involved in the use of Executable Architectures.  Lee, et al created spreadsheet representations of the real-world and conducted surveys to populate their DoDAF diagrams for their executable architecture [1].The need for sufficient detail to develop an executable architecture also meant that the data had to be traceable.  Use of Activity Based Methodology© (co-developed by MITRE Corporation and Lockheed Martin) to develop the architecture, provided unique benefits and challenges.  The methodology provided an extraordinary amount of traceability that enabled multiple facets of the architecture to be traced to consistent data.  This meant that the architecture no longer was a series of unconnected DoDAF-compliant graphics, spreadsheets, and matrices.  The products became ways to view and make sense of the underlying consistent data.  This traceability, in turn, provided an opportunity for more reliable analysis and provided the consistent data for reuse and expansion in the Executable Architecture.  On the other hand, the data-centric nature of the way products were generated made it more time consuming to update data and still retain data integrity.  Part of this time intensiveness was a by-product of the Popkin System Architect tool being used, and we continue to provide feedback to the tool developers and are developing our own macros and workarounds to speed the process.We used a standard set of Department of Defense Architecture Framework (DoDAF) required products.  One of the key differences, however, was that instead of using a standard OV-6c Operational Event Trace, we used a modified version of the Business Process Model Notation (BPMN) diagram in the Popkin Software.  This process model depicts the set of operational activities (BPMN terminology: Processes/Activities) derived from the OV-5 Node Tree and Activity Model within specific Operational Nodes (BPMN terminology: Pools / Swim Lanes / Participants) in an event sequence diagram with the Information Element flows (BPMN terminology: Sequence Flows / Message Flows) between the activities.  The result was a sequenced flow of operational activities linked to operational nodes connected by information flows.  This sequence of activities could be traced to the F2T2EA process for TST and it had the time hacks required to meet Air Force goals.  An additional benefit of using the OV-6c in this way was that it provided a cross-check to the other products.  Thus we were able to make the Information Exchange Requirements and Data Exchanges more consistent.Figure 5.  OV-6c Operational Event Trace  3. Making the Architecture ExecutableOnce the architecture was defined, and the various participants in the scenario specified, the scenario could be simulated.  After researching earlier efforts to simulate architectures, such as the Mitre work [2], we endeavored to create a time-sensitive simulation of the scenario, in an open, network-based environment.  We used an Architecture Simulator to reflect the processing and to control the messaging in the OV-6c Operational Event Trace diagram.  A Network Simulator was used to find the time delays associated with each of the messages in between the individual OV-6c activities, and a Combat Simulator was used to find realistic durations for the aspects of the simulated scenario that involve real-world activities in the field.All the simulators were linked with an HLA infrastructure.  This allowed different simulators to provide different OV-6c Activity node simulations, while still operating together in the same Executable Architecture.  HLA provided the messaging infrastructure to allow different activities to be simulated using different tools, enhancing the openness of the simulation architecture.  In the case where the architecture would be executed in real-time, it is possible to provide human-in-the-loop virtual participation by having the virtual simulator replace certain OV-6c Activity nodes, responding to and supplying the appropriate messages to the HLA federation.  In this simulation architecture, the messages are automatically checked for transmission duration and delivered to the appropriate downstream nodes.  This approach would work in the TST scenario, since all action may be complete in a reasonable time frame, but other scenarios may require longer time frames that would call for discontinuous simulation.As the central control for the simulation, the Executable Architecture (EA) simulator, we chose a discrete simulator, Rockwell’s Arena.  It provided the capabilities to simulate the OV-6c Activity processes, and allowed effective integration into a larger, heterogeneous, simulation system.  The EA Simulator allowed all of the Activity nodes of the architecture to be contained in a single simulator, or to allow external simulators to provide Activity node simulation transparently, while enabling external simulators to be linked in to supply higher fidelity simulations where possible.  The higher fidelity simulation was used for the simulation of network traffic between the various participants in the environment, and for a simulation of the combat environment.  The EA Simulator processed the concurrent state changes in the environment, and linked to the network and combat simulator for enhanced accuracy in the timing of the execution.3.1 Components Four major components are used in the system, the Executable Architecture (EA) simulator, the network simulator, the combat simulator, and the HLA network.  We conducted a detailed trade study of various simulators for use as the EA simulator, and decided upon Arena, due in part to the ability to model Petri Nets, and to interface with a larger system.  In  this simulator we model most of the Activity nodes and Messages depicted by the OV-6c diagram.  The rest of the Activities and Messages were simulated in the Combat Simulator.In the network simulator, we model the communications environment, as it pertains to the TST scenario, as well as any background interference that may be involved in execution of the scenario.  Some of the network paths model global TCP/IP communication, and radio links to various battlefield assets, and space-based assets, as simulated by the DMOC.  We used OpNet for the Network Simulator because it had the capabilities to model the network entities and provide message transit time, while providing an HLA interface.The combat simulator maintains a concurrent simulation of the environment around the target, with entities simulating friendly and enemy assets in the field.  The various entities interact using the rules involved in the combat simulator to help produce a more realistic estimation of the times it takes to accomplish various tasks.  Communication messages into and out of the combat simulation are linked to the EA simulator through HLA, and are timed by the network simulator, to help determine full-system throughput.  The Combat Simulator supplied the Activity node and Messaging that pertained to the BPMN-diagram swimlanes for the SOF Team, the F-16 and the target.  We used JSAF for the Combat Simulator because it operated at the correct level of simulation, and provided an HLA interface.The HLA network serves as the glue between all the simulations, and provides an interface for future substitution of components in the simulation.  It can be viewed as a telecommunications cloud, where messages are deposited into and received from, automatically.  Substituting a component would allow for training of some participant in the scenario, while retaining the full simulation properties of the rest of the architecture for response and monitoring.  The HLA system also determined the simulated message transit time by linking with the OpNet Network Simulator model.  The compatibility of DODAF architectures with HLA is described in [3].  3.2 Messages, Nodes, and SwimlanesThe DODAF BPML diagram consists of messages, Activity nodes and swimlanes.  The swimlanes define the participant in the simulation, such as a SOF Team.  The Activity nodes, or simply ‘nodes’, indicate decision and work points that take time and produce a result, and belong to the participants in the swimlanes.  The messages interconnect the whole system, and go from node to node, both within and across swimlanes.  A certain participant may produce a message that goes to multiple nodes, and would be modeled as such in the architecture. The node becomes a generic, but central, model in the EA simulator, and it adheres to a defined interface, allowing different simulators to provide node functionality in the same simulation.  When a node receives the appropriate messages, it will produce its own message to the system, after a time delay that is meant to model the actual processing time to make the decision, or to do the real-world processing modeled by that node.  Messages also introduce delays in the processing of the scenario, due to the physical constraints involved in getting the entire message from place to place, or swimlane to swimlane.  The network simulator finds the message transit duration.3.3 Combat simulator interactionThe combat simulator runs a separate physical simulation of the battlefield environment.  Most, if not all, doctrinal decisions are modeled in the EA simulator, and flow down into message to the entities in the combat simulator.  The constructive entities in the combat simulator proceed to carry out the orders within the environment modeled therein.  Special event response situations detected in the combat simulator, such as target-destroyed, are converted into communication messages in the HLA environment that reach into the rest of the executable architecture environment to induce subsequent action, based upon the doctrine encoded in the EA simulator, and the messaging routing encoded into the Combat Simulator3.4 Petri Net technologyIn order to provide a cohesive, but open simulation system architecture, a method to control the execution of the system across all the simulators had to be found.  Our solution involved the use of Petri Net technology to control the execution of the architecture.  This technology permitted multiple threads of information to flow concurrently through the system.  Basic to the execution of the architecture in this effort is the concept of Colored Petri Nets, or CPN [4].  In a Petri Net, there are nodes and messages.  Nodes fire when they receive the appropriate messages.  Colored messages means that there may be different kinds of messages that are required, and not just some kind of universal token passed from node to node.  This is shown in Figure 6.  In our operational context, we have extended the CPN concept to encompass detailed colorization, or tagging, of messages.  The messages must come from a certain location, contain certain data, and be tagged to be of a certain type, in order to satisfy the input requirements of a given node.  This could be referred to as a tagged Petri Net technology.Figure 6.  Petri Node 3 fires, and sends message m3, when it receives the appropriate messages, m1 and m2, from Petri Nodes 1 an 2.Time is also critical in this effort, and as such, the messages are treated as actual communications that traverse physical pathways from node to node.  Some messages may go between nodes in a single swimlane, in which case their message transmission duration may be rather fast, while other message may traverse great distances, multiple network protocols, and other processing to get to the destination, taking more time.  This could be referred to as a timed, tagged Petri Net technology.Also, since this EA system uses multiple simulators, likely hosted on different machines, when a message is fired by a Petri Node, there may be software routines run at the same time to cause actions to be taken in concurrent simulations.  For instance, if a headquarters node determines that the target is important and needs to be immediately destroyed, it will send a message to an AWACS node to cause a message to be sent to an F16 to attack the target.  When the F-16 node receives the message it executes its simulation software as part of its response to the message.  The F-16 node in the Combat Simulator thus operates in a controlled fashion as part of a distributed, heterogeneous, Petri Net.4. ImplementationIn order for the executable architecture to provide a high-fidelity analysis we divided the architecture into three simulation components: the Architecture simulation, the Combat simulation, and the Network simulation; each contributing its own specialized data to the simulation. Utilizing the three components enabled us to analyze the static architecture against real-world, physical constraints.  Interoperability between the simulation components was realized using High Level Architecture (HLA).4.1 Architecture simulatorThe architecture simulator is used to simulate the decision making processes of the overall executable architecture by monitoring, controlling and reacting to the other simulators within the executable architecture.  It also provides the analyst with a central location to collect data and analyze the overall performance and/or specific performance characteristics of the executable architecture.  Arena, a tool developed by Rockwell Software, was chosen to implement the architecture simulator.  The model is an executable representation of the OV-6A diagram in the static architecture. In order to ensure the OV-6A diagram was represented accurately, the data from the static architecture was exported from Popkin System Architect and used to drive the Arena model.  An example of a section of the OV-6c implementation in Arena is shown in Figure 7. SHAPE  \* MERGEFORMAT Figure 7.  Swimlanes and Activity nodes are visible in the Arena model of the DoDAF OV-6c diagram.The flow control of the Arena model was designed using Petri Net methodology.  In the model, each Arena mobile entity is assigned multiple attributes.  Each entity represents a Petri Net token while each entity attribute represents the color, or tag, of the token.  Process blocks are used in conjunction with Assign blocks and decision blocks to represent the Petri Net transitions.  The decision blocks are used to evaluate the attribute values (based on a firing condition) of the incoming entity.  If the firing condition is satisfied, the process block will be executed and the Assign block will be used to update any user-defined entity attributes.  If the firing condition is not met, the node will wait for further message entities to arrive. Figure 8 depicts a typical configuration of each Arena block mentioned above.Figure 8.  Arena Petri Net block.The Arena simulation can operate in faster-than-real-time or in real-time mode.  Once all the data is obtained from a detailed real-time operation, faster operation allows for automatic iterative optimization search processing to operate at machine speed.  In order to synchronize the Arena simulation with the combat simulation and the network simulation for real-time execution, we simulated our model in real-time using the Arena RT add-on.  Utilizing Arena RT gave us the flexibility to set the duration of each process block in one of two ways.  The first method involves loading a statistical expression, which represents the process duration, into the input parameters of the process block.  We used this method to model processes in the architecture that are not affected by the battlespace environment and or communication delays. An example process is that of periodically creating Air Tasking Orders (ATO).  The second method involves real-time interactions with the combat simulator and the network simulator.  As the process block fires, Arena sends a trigger message to the combat simulator to perform a task.  When the task is complete the combat simulator sends a new message, or set of messages, into the HLA network, reaching nodes in Arena that can fire to allow that aspect of the simulation to proceed.  The time that elapsed between Arena sending the trigger message and receiving the response message is recorded as the process duration.  4.2 Combat SimulatorWe chose to use Joint Semi Automated Force (JSAF) simulator as the combat simulator.  JSAF enabled us to accurately model the physical battlespace and analyze how the conditions of the battlespace affect the performance of the architecture.  JSAF also provides a visualization of the executable architecture. As described in Section 4.1, Arena sends trigger messages to JSAF to notify JSAF to perform a task.  After the task is complete JSAF sends a message to Arena to notify that the task is complete. An example of this trigger/response interaction between Arena and JSAF could be scripted as follows:  Arena sends a trigger message to JSAF to task an F-16 to attack a target of opportunity.  After the attack is completed, JSAF sends a message to Arena to notify the task is finished.4.3 Network simulatorThe purpose of the communications simulation is to model the communication latency between different simulation entities and provide that data to the architecture simulator.  Detailed analysis of the various network/communications system in use in the system that the architecture represents allows for correct modeling of the message communication time latencies.5. ConclusionsThe creation of Executable Architectures allows static architecture diagrams to be tested in a simulator.  These diagrams may represent the interaction of many different entities in a large organization.  Much of the work occurs concurrently, which is simulated very well through the use of Petri Net methodology.  The integration of different best-of-class simulations of different aspects of the architecture should help increase the accuracy of the overall simulation.EA techniques can be used to perform and evaluate different what-if scenarios where parts of the architecture are changed.  Changing the architecture to achieve system improvement is somewhat like changing the algorithm in a software program.  The use of a good algorithm can greatly improve the performance of a piece of software, and it is expected that changing the architecture of a large system can also lead to substantial improvements.  EA provides a means to test the resulting performance.Another application for an executable architecture is for the architecture to run in real-time while a real-world event happens.  The messages in the scenario would come from the real-world, and be sent both to the real, implemented architecture as well as the simulated, executable architecture.  As the EA progresses from state to state, it can be used to see if the state of the real-world has changed accordingly, and thus provide early detection of problems, and a clue as to how to solve them.Most, if not all, aspects of a C4ISR system can be simulated using EA technology.  The Command aspect is certainly inherent in an EA system, as doctrine is simulated and becomes executable.  Command decision simulation is facilitated by sending messages around the system in the Petri Net fashion.  The simulation of the Control aspect of C4ISR is provided through the messaging capability in the simulation, and also through the linkages to the combat simulator, present in our current research.  Communications processing is simulated by the messaging, and enhanced in our current research through the inclusion of a networking simulator.  The Computer aspect can be simulated as part of the time duration required to complete tasks in each node.  The Intelligence, Surveillance, and Reconnaissance aspects are included in the EA model by including swimlanes in the architecture for the various ISR entities.  Validation and verification (V&V) of the C4ISR architecture is enhanced through the use of executable architectures.  This V&V activity then feeds back to increasing the quality and correctness of the overall simulation, as described by Tolk and Solick in [5].Architecture specification tool vendors appear to recognize the benefits of executable architecture, and are including simulator tools of various capabilities bundled with their products.  Hopefully more industry integration of generic EA simulation tools with architecture specification tools will occur, thus offering a path to help standardize and perhaps share EA modeling capabilities.  The open architecture of the system developed through the research we performed will allow many different brands, and types, of simulators to operate simultaneously in the same Executable Architecture.  Simulations of different aspects of the architecture can be performed by different teams, all adhering to the same Federated Object Model, to join in the Petri-Net-controlled simulation to achieve increasingly accurate simulations of a given scenario.  The interactions between the Activity nodes modeled in the various simulators are all made equal and interoperable, through timed, tagged, Petri-Net technology to achieve a cohesive simulation, similar to how virtual, live and constructive simulators can interoperate through network standards.  The possibility of adding human-in the-loop capability presents many opportunities for use of this technology in training, whether in a solitary embedded capacity, or in a large, multi-participant, simulation such as at the DMOC.  The capability to provide computer-based optimization of the architecture due to its computer-executable capability also provides the opportunity to identify potential improvements in doctrine and infrastructure, as mentioned in [6], thus providing a means to determine directions for future research that can have the most beneficial results.6. References                                                                                                                                                      [1]	Lee, J., Choi, M., Jang, J., Park, Y., Jang J., Ko, B. 2005.  The Integrated Executable Architecture Model Development by Congruent Process, Method, and Tools.  Proceedings of the 2005 Command and Control Research and Technology Symposium, Paper 259, Tyson’s Corner, Virginia.[2] Command and Control (C2) Constellation Time Critical Targeting (TCT) 2005 Architecture, 12 December 2003, developed by MITRE for the Air Force.[3]	deSylva, M.J., Lutz, R.R., Osborne, S.R.  2004.  The Application of the DoDAF within the HLA Federation Development Process.  Proceedings of the Fall 2004 Simulation Interoperability Workshop, IEEE CS Press[4]	Petri Nets, July 14, 2005.  Web site:  HYPERLINK "http://www.petrinets.info/" http://www.petrinets.info/ [5]	Tolk, A., Solick, S.  2003.  Using the C4ISR Architecture Framework as a Tool to Facilitate V&V for Simulation Systems within the Military Application Domain.  Proceedings of the Spring 2003 Simulation Interoperability Workshop, IEEE CS Press.[6] Atkinson, K.  2004.  Modeling and Simulation Foundation for Capabilities Based Planning.  Proceedings of the Spring 2004 Simulation Interoperability Workshop, IEEE CS Press.Author BiographiesDAVID C. BENJAMIN is the LM Simulation, Training & Support Modeling and Simulation Engineer for the Air Force Agency for Modeling & Simulation (AFAMS) Executable Architectures Simulation Design and Implementation.  Mr. Benjamin received his B.S. in Electrical Engineering from University of Florida (2001).  He is currently working towards an M.S. in Electrical Engineering with focus on VLSI and Hardware/Software co-simulation.  LAWRENCE G. ELLIOTT is the LM Simulation, Training & Support Systems Engineer for the Air Force Agency for Modeling & Simulation (AFAMS) Executable Architectures Simulation Design and Implementation.  Mr. Elliot served as software engineer, on War Fighter Simulation (WARSIM) and Common Training Instrumentation Architecture (CTIA).  His primary responsibility was to design and produce cost-effective software.  He received his bachelor’s degree in Computer Science from the Florida State University in 2001. Recently he acquired his M.S. in Engineering with a concentration in management at the University of Florida and currently works in the Independent Research and Development department.  Research interests are: modeling training systems and distributed simulation.GREGORY A. HARRISON is Project Lead for LM Simulation, Training & Support for the Air Force Agency for Modeling & Simulation (AFAMS) Executable Architectures Simulation Design and Implementation.  He received his Ph.D. in Computer and Electrical and Computer Engineering from the University of Florida.  He was a member of the LM SeCore virtual simulation staff, for EW, ship modeling, Navaids, and the mathematical virtual environment.  He served as Project Engineer for multiple Navy ship machinery control systems including AOE, MCM, and FFG, and designed the next generation vibration monitoring system for DDG turbine control.  His research includes executable architectures, electronic warfare, coordinate systems, DSP, embedded real-time computing, robotics, and artificial intelligence techniques such as neural networks, genetic programming and intelligent agents.  He is a member of the Graduate Faculty of the Florida Institute of Technology.  Dr. Harrison is the author of numerous papers, with two AI-related patents.  He is a member of IEEE. RUSSELL HUTT is Chief Modeling and Simulation Architecture Program Manager for the Air Force Agency for Modeling and Simulation (AFAMS).  As Chief of the Modeling and Simulation Architecture Program, Mr. Hutt is responsible for the overall integration of the Operational, Systems and Technical Architectures for the Air Force Distributed Mission Operations (DMO) Architectures and ultimately the Air Force Modeling and Simulation Enterprise Architecture.  Mr. Hutt is responsible for orchestrating modeling & simulation (M&S) resources for developing a common infrastructure dedicated to the development, study, and approval of M&S architectures IAW DoD Architecture Framework.  He serves as the AFAMS representative to the Defense Modeling and Simulation Architecture Group, Enterprise Architecture Integration Council and the Air Force Modeling and Simulation Architecture Council; also serves as Air Force's representative for short-term Innovative IT projects.    HOWARD KERN is the Project Manager and Lead Operational Architect for LM Information Technology in support of Air Force Agency for Modeling & Simulation (AFAMS) Virtual Flag Time Sensitive Targeting Special Operations Forces Vignette Architecture and the AFAMS Virtual Flag Business Process Architecture.  These projects use the Activity Based Methodology co-developed by MITRE and Lockheed-Martin.  Mr. Kern has twenty-nine years experience in DoD and private industry at the service, agency, unified command, allied, joint, operational, and tactical levels. His Air Force career included supervising intelligence system project managers responsible for automating intelligence staff and mission support functions at USAF combat headquarters and units and it included intelligence analytical experience in DIA, US Central Command, NATO, Korea, and operational units.  After retirement from the Air Force, he spent over six years assisting the Department of the Army in managing enterprise information technology architecture programs and policy.  He developed the first ever Army Enterprise Architecture Master Plan Strategy and Program Plan tying almost sixty projects and activities into a coherent package to support Army objectives. Mr. Kern has a BA from the University of Virginia, an MIPP from Johns Hopkins University, and a Certificate in Information Systems from George Washington University.