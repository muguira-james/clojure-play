Federate Management Infrastructure IN HLA BASED DISTRIBUTED SIMULATIONSTolga BasturkHurcan Gokce Solter Isa TasdelenYasir Kurtulus AvcıbasiOnur DestanogluOmer ErogluF. Erdogan SevilgenOguz DikenelliTUBITAK Marmara Research CenterInformation Technologies InstituteP.O Box 21 41470 Gebze/Kocaeli TURKEY HYPERLINK "mailto:tolga.basturk@bte.mam.gov.tr" tolga.basturk@bte.mam.gov.tr,  HYPERLINK "mailto:hurcan.solter@bte.mam.gov.tr" hurcan.solter@bte.mam.gov.tr,  HYPERLINK "mailto:isa.tasdelen@bte.mam.gov.tr" isa.tasdelen@bte.mam.gov.tr,  HYPERLINK "mailto:yasir.avcibasi@bte.mam.gov.tr" yasir.avcibasi@bte.mam.gov.tr,  HYPERLINK "mailto:onur.destanoglu@bte.mam.gov.tr" onur.destanoglu@bte.mam.gov.tr HYPERLINK "mailto:omer.eroglu@bte.mam.gov.tr" omer.eroglu@bte.mam.gov.tr,  HYPERLINK "mailto:erdogan.sevilgen@bte.mam.gov.tr" erdogan.sevilgen@bte.mam.gov.tr,  HYPERLINK "mailto:oguz.dikenelli@bte.mam.gov.tr" oguz.dikenelli@bte.mam.gov.trKeywords:Distributed Simulation, Federate Management Infrastructure, Middleware, HLAABSTRACT: This paper addresses Federate Management Infrastructure (FMI), which can be used in HLA based distributed simulation development and integration processes. The purposes of this layer are to allow domain programmer experts to design their own simulation software architectures by being abstracted from distributed simulation architecture and to allow domain users programmers to focus their attention only on their workspaces by minimizing programming burden originating from distributed simulation environment. In this workpaper, FMI, a national solution prepared at by TUBITAK Marmara Research Center, Information Technologies Institute, and its modules are will be discussed in detail.d, and the modules it consists of will be examined.IntroductionIndividual simulations are no longer meet the abundant expectations of military training community. So, large systems of simulations are usually built up by combining a group of simulation components that are developed at different times and by different developers. To promote the interoperability and reusability of such simulations, HLA (High Level ArcitectureArchitecture) [1] is the current standard framework. Individual simulation components are called federates and federations are formed by combining some federates in HLA specification.Interface Specification of HLA has six major services which are implemented by Runtime Infrastructure (RTI). These services are Federation Management, Declaration Management, Object Management, Ownership Management, Time Management, and Data Distribution Management. Some of these services are quite complicated and to employ them efficiently requires a great deal of experience on distributed simulations and RTI itself.  Federation Management Infrastructure (FMI) is as a middleware between RTI and federate domain layer. It provides a simpler programmers interface for most of these services and even manage them automatically without domain programmer involvement. Therefore, it isolates programmer from RTI implementation and avoid their mishandling by eliminating influence of RTI’s architecture on the domain architecture. In general, RTI is a communication layer with some services and should not have an effect on the architectural design decisions of the domain layer.  SHAPE  \* MERGEFORMAT Figure 1.  FMI General ArchitectureThis paper is organized as follows: Ssection 2 presents general architecture of FMI and roughly defines its modules. Section 3, 4 and 5 describe modules of FMI which are Federate Management System (FMS), RTILink and FOMLink respectively. Section 6 shows some experimental results and analysis. Conclusion and future work are given in section 7.General ArchitectureFMI, consists of Federate Management System (FMS)FMS, RTILink and FOMLink modules. FMI also uses includes a library called Utility Llibrary which consists of a xml parser,  a logger, an exception library and, a file reader and some other features.Federates directly interact with FMS is the layer twhichhat simulation federates directly use, handles most of the simulation specific events, operations and services. It lies between simulation the federate and RTILink module and isolates the federate from most of the simulation specific operations such as time management, object management, publishing (and subscribingsubscribing to) objects and interactions,, and services such as time management, object management and so on.RTILink module, on the other hand, functions serves as the an RTI interface for the federate. It works on the actual HLA RTI interface and controls message traffic that arrives to and send from the federate. It automatically publishes and subscribes objects and interactions that federate wants to interact according to SOM. RTILink handles HLA objects and interactions and controls them during the simulation lifetime.FOMLink is a code generator that generates C++ classes for objects and interactions specified in the HLA FOM document. These classes automatically initialized at the beginning of the simulation and FMS matches each FOMLink classes with the corresponding HLA classes which are logged in RTILink.  FTherefore federates uses these real classes. When a federate changes the the state of an object (member of a real class), and   FMSI reflects these changes to HLA classes stored in RTILink which, in turn, reflecteds to RTI by RTILink.Figure 1 gives the general architecture of the FMI middleware. SHAPE  \* MERGEFORMAT Figure 1.  FMI General ArchitectureFMSFMS , allows domain federate developers to implement their own architectural design and ideas by isolating them from the underlying complexity of distributed simulation architecture.  General features of FMS are:Management of Federate and -Ffederation Iinteractions Object Services and Lifetime ManagementMessaging ServiceTime Service Management and SchedulingRunning SimulationCallback Bbased iInteraction Ddispatching MmechanismCreating and joining a federation, publishing and subscribing to objects and interactions are done by FMI with little interaction from developers.  FMS is initialized by a configuration file which contains properties of the federate like including federation name, federate name, FOM/SOM filenames and, time management policy and properties. Publish - Subscribe information is obtained from Simulation Object Model (SOM) File and necessary services executed operations are performed by using the some RTILink function calls automatically.  SHAPE  \* MERGEFORMAT 			Figure 2: General architecture of FMSAfterinitialization, FMS starts a federate with an empty model, and it is able to send and receive interaction and object updates . From figure 2 FMS lies under domain layer and uses services provided by FOMLink, utility library and RTILink. Federate Management class is the single  point of entry to the FMS. All functionality of the system is provided to the federate developer through this class. Domain user only uses this class and can use all features of FMS.Object management is handled by both FMS and RTILink. RTILink stores HLA objects in two classes called HLAObject and HLAObjectInstance. HLAObject class stores static info about an object and After initialization, a simple federate which is able to send and receive interaction and object updates, can be started trough FMS. The class diagram of the FMS module is given in Figure 2. In the figure, FMS lies under domain layer and uses services provided by FOMLink, utility library and RTILink. Federate Manager Class is the single point of access to the FMS functionality. All functions of the module are made avaliableavailable to the federate developer through this class. Object Manager Class offers services which to both FMS and RTILink. RTILink stores HLA objects in two classes called HLAObject and HLAObjectInstance. HLAObject class stores static information (which do not change between object instances) about an object and  SHAPE  \* MERGEFORMAT 			Figure 2: General architecture of FMSHLAObjectInstance is keeps the a reference of to the object instance. Object Manager handles all RTILink allows class based operations with the help of RTILink. , which is meaningful when we think HLA approach. Therefore user for example can subscribe to a HLA class with given attributes. Same applies for interactions. Domain users never deal with these HLA classes. Since dealing with these classes requires storing each object and (and interaction) class handle and itstheir attribute (and parameter)’ handle valuess., Tthis process may become quite complicated and prone to errors. RTILink does all this bookkeeping internally. It reads the SOM in XML format,format,  extracts  publish-subcribesubscribe information and makes the necessary calls to publish and subscribe objects and interactions and , then stores handles in its internal data structures for handling attribute updates and interaction dispatching.At a higher level, when a domain programmer needs an HLA object or interaction, FMS initialize proper class in the Object Factory (from generated by FOMLink), match it with a corresponding classes in RTILink and passes it to domain programmer.. Therefore, programmers use concrete classes like Platform with methods like setWorldLocation. Code generation for concrete classes is explainedwill be  told in FOMLink section. User Programmers can also register callback functions for remote objects’ discover, update, remove events. Callback Listener Cclass continuously listens monitors RTI and forwards these events to the domain level by calling callback user registered callback functions registered by the programmers. Event Mmanager Cclass monitors incoming interactions subscribed by the federate and routes the outgoing interaction traffic. Users Federates can send and receive messages interactions specified in SOM. Incoming interactions are dispatched to user programmer registered callback functions with proper FOMLink interaction object...FMS presents provides a users component based architecture to the programmers. In this architecture FMS defines a classes called component which has virtual tick methods. All the domain objects shoudshould be derived from component class. Object specific implementation of the tick method can perform any operation such as Users user or generate this class and implement tick method. They can write any code there such as objects update or mathematical models. FMS calls this tick method at every simulation cycle of the federate. Unlike many other approaches simulation cycle of the federate is in FMS, not in domain layer. In this way, This approaches allows FMS to workoperates synchronized with both domain layer and RTI.Engine Module in FMS synchronizes the domain layer with RTI. So, it pursues the following operations in a simulation cycle: First, it evokes RTI to get updates in the federation and brings them to domain layer. Next, it allows domain layer to do its own domain specific operations. Last it sends newly generated interactions to RTI. Engine Module synchronizes the simulation based on the time management policy specified in the configuration file. Engine Module provides FMS handles time management and runs the federate according to the these following time advancement mechanisms [2]:Time stepped,Event based,No time managementNone (controlled by the domain).Besides the time advancement mechanism, Engine Module supports the following And these time management policies:Constraint,Regulate,Constraint & Regulate,No time management.Engine in FMS runs the simulation according to these time policies.Federates which do not employ any time advancement mechanism, can use Scheduler Module. Scheduler Module allows users to register a callback function which will beis called later once or periodically. User These functions can do anything. anything in these functions. For example, he the callback function can be used may want to run his the mathematical model, periodically different then federation tick periods.RTILinkRTILink Module is dDesigned to run be between FMS and RTI modules. It, RTILink module enables FMS to run operate independent of underlying simulation infrastructure. In our current implementation, RTILink mMediatesing communication between RTI and an individual federate in an HLA based simulation framework., Wwith its current available design, RTILink’s main functions are listed belowas follows:Message passing management through RTISimulation object creation / update / deletion managementEncoding and decoding FOM objects and interactions’  attributes / parametersProviding time management services by collaborating with FMSGeneral software architecture of RTILink Module is’s general software architecture depicted in Figure 3., RTILink moduleIt includes uses a single class as an interface to FMS module. Through this interface, any necessary federation operation can be executed. SHAPE  \* MERGEFORMAT Figure 3 General Architecture of RTILinkRTIAmbassador and FederateAmbassador classes which are derived from initial actual HLA RTI classes are used for RTI linkage. RTILink serves as a gateway to any function call to RTIAmbassador and handles all callback functions in the FederateAmbassador class. For example, time management callbacks are forwarded to FMS and object updates are perforromed by HLA Object Part.HLAObject class is used for storing the information about the published or subscribed objects that are previously defined in FOM. ObjectDataRepository class stores the attribute values of the HLA objects.  Building up process of those classes and the interacting phase between RTI and the objects are automatically performed in RTLink module. Besides; HLAInteraction class is used for defining the HLA interaction classes, which are previously defined in FOM, in RTILink module. With the assistance of this class, any interaction operation between federates of the federation can be performed. SHAPE  \* MERGEFORMAT Figure 3 General Architecture of RTILink SHAPE  \* MERGEFORMAT Figure 4 Remote Object Handling Mechanisms in FMSHLAObject class in HLA Object Part is used for storing the information about the published or subscribed objects that are defined in the FOM. ObjectDataRepository class stores the attribute values of the HLA objects.  Creation of HLA objects and the interaction between RTI and the objects are automatically performed in RTILink module. Besides, HLAInteraction class is used for defining and delegating the HLA interactions which are defined in FOM. FOMLINKAt the heart of a federation execution lies FOM, which defines the information exchange data model in a federation. HLA 1516-2000 Object Model Template [3] standard introducesd an XML-based data format which alsoand defines unambiguous encoding for the data types present in the FOM. Although, RTI  enforcesis aware of what avaliableavailable types of objects and interactions which can be present in federation execution, it does not and cannot check the how the exchanged data is encoded and represented, much less how they are used by federate developer. FOMLink provides the mapping between simulation objects and concrete C++ classes. It does so by generating code from a given SOM or FOM with a tool called SomCompiler which creates C++ classes for objects with methods to set and get attributes., Sso, FOMNLink promotesing type safety and provides the federate developers with an easy-to-use interface for simulation objects. SomCompiler also generates encoder and decoder classes for serializing these classes according to OMT specification, so relieving the federate developer from the burden of hand crafting the code for encoding which is a source of many errors .[4].Through the development cycle as the FOM develops improves and matures, the changes made to FOM may  cause the generation of new FOMLink libraries which then can be integrated into the FSM. FSM supports the linking of new FOM libraries statically and dynamically. As a result,so different FOMLink libraries can be configured by federate developers to be used by FSM, without the need for recompiling recompilation of the client code. FMI Performance DiscussionsIf we thinkWhen the performance of the federate which is using FMS is consideredthis middleware, it is of course slower than using RTI directly. But using RTI directly and handling simulation specific problems at domain layer makes domain specific code more complex and error prone. Without using FMS lie middleware, iIf there areyou have more than oneseveral federates in a simulation system which is the general case in distributed simulations, then eachall federate developerss must solve these problems by themselves. In a distributed simulation, if the domain model execution is not considered, the most time consuming process is the message traffic. Time for message traffic has two parts: handling the messages by FMI and sending the message through physical links. Since the latter takes more time than the former,if we don’t think about domain specific time consuming operations such as heavy calculations and algorithms, time consuming in middleware is much less in time consuming occurred between federates. (network traffic) Therefore allowing RTI thread to return back immediately after it loads data to subscribing federate  subscribes to is very important. FMI uses buffers at these points. Figure 4 describes the general object instance discover, update, remove handling architecture. In FMS there are three buffers to handle each of those events. When a federate registers an object and another federate subscribes to it, RTI sends a notification to the subscribing federate that an new object it subscribed is registered discovered in federation.  This happens as a function call in FederateAmbassador which is implemented in RTILink layer in FMI. After RTILink gets this notification, it immediately queues it the notification to the related buffers in CallbackListener class. The An important point is that the thread passes the data notification to the buffer is the RTI thread not other. So, using buffers at this layer allows RTI thread to return back immediately and resume its execution without unnecessary delay. FMI handles those notifications on at next simulation cycle. SHAPE  \* MERGEFORMAT Figure 4 Remote Object Handling Mechanism in FMSInteractions are handled similarly. Interactions reveivedrevived by the federate are queued in buffers by RTILink and handled in FIFO (First In First Out) manner order at every simulation cycle of the federate. On the other hand, when the federate wants to send an interaction it is stored in an out buffer in FMS layer and it is sent after incoming notification are dispatched. Figure 5 tells describes interaction mechanism in FMS.The engine in FMS tries to synchronize federate with RTI. So it follows this order; First it evokes RTI to get new data about federate, then read them and brings to domain layer. Next it allows domain layer to do its own domain specific operations and last sent new interactions to RTI. This is done in one simulation cycle of the federate.  SHAPE  \* MERGEFORMAT Figure 5 Interaction handling mechanism in FMSConclusion and Future WorksIn this paper, the Federate Management Ithe FYA infrastructure (FMI) that can be applied employed for in development and integration of   HLA based distributed simulations has beenis proposed. This application FMI allows domain users to focus on their own domain architecture by abstracting then from distributed simulation system architecture. Therefore, it minimizes the programming load that arises from the nature of distributed simulation. FMIIt facilitates to design an effective federate by supporting asynchronous messaging. It minimizes the programming load that arises from the nature of distributed simulation.It providesWith its a flexible infrastructuredesign, FMI that  can be improved to meet new requirements.References[1]	IEEE 1516, Standard for Modeling &   	Simulation – High Level Architecture[2] 	Fujimoto Richard, “Parallel and Distributed 	Simulation Systems”, John Wiley& Sons   Inc, 2000[3]  IEEE std 1516.2-2000, “IEEE Standard for Modeling and Simulation (M&S) High Level Architecture (HLA).Object Model Template (OMT) Specification”[4]  Björn Möller,Mikael Karlsson ,Björn Löfstrand , “Reducing Integration Time and Risk with the HLA Evolved Encoding Helpers” Proceedings of 2006 Spring Simulation Interoperability Workshop, 06S-SIW-042 SHAPE  \* MERGEFORMAT Figure 5 Interaction handling mechanism in FMSAuthor BiographiesTolga Basturk is the researcher at the TUBITAK MRC (Marmara Research Center) Information Technologies Institute, Kocaeli, TR. He holds a M.Sc. in Computer Science at Gebze Institute of Technology. He is currently studying on casual order messaging and time management mechanisms in distributed simulations.Hurcan Gokce Solter is a researcher at the TUBITAK MRC Information technologies Institute, Kocaeli, TR. He received the B.Sc. degree in Electronics Engineering in 1999 from Hacettepe University, Turkey. His research interests include telecommunications, distributed computing and simulation.Isa Tasdelen received the M.Sc. degree in Computer and Control Education in 2001 from Marmara University, Turkey. He is currently working toward the Ph.D. degree in Control Education. He has been working in TUBITAK MRC as chief researcher since 1997. Since 2005, His research interests include swarm robotics, educational robotics and simulation.Omer Eroglu received the M.Sc. degree in Computer Science in 2005 from Yıldız Technical University, Turkey. He is currently working toward the B.Sc. degree in Computer Science . He has been working in TUBITAK MRC as researcher since 2006. Since 2005, His research interests include grid computing, simulation.Onur Destanoğlu is the researcher at the TUBITAK MRC(Marmara Research Center) Information Technologies Institute, Kocaeli, TR. He received the B.Sc. degree in Computer Science in 2005 from Yildiz Technical University, Turkey. He holds an M.Sc. in Computer Science at Gebze Institute of Technology. He is currently studying on dynamic load balancing algorithms in distributed parallel computation.Fatih Erdoğan Sevilgen received his B.S. degree in Computer Science and M.S. degree in Systems and Control Engineering from Boğaziçi University, İstanbul, in 1990 and 1993. He received his M.S. and Ph.D. degrees in Computer Science from Syracuse University in 1996 and 2000, respectively. He is currently an Assistant Professor in the Department of Computer Engineering at Gebze Institute of Technology in Turkey. He is also a senior researcher at TUBITAK Marmara Research Center in Turkey. His research interests are in parallel and distributed computing, distributed simulations and metaheuristic optimization.Oguz Dikenelli received his BSEE degree in electric and electronic engineering from the Middle East Technical University, Ankara, Turkey in 1988 and the MS and PhD degrees in computer engineering from the Ege University, Izmir, Turkey in 1991 and 1995 respectively. He was a visiting researcher in the computer science department in Penn State University during1992-1993 and SMU, Texas, USA during 1993-1994. He is currently professor in computer engineering department at Ege University. He is the author or co-author of more than 50 papers describing his research and serves as a committee member in various national and international conferences.RTILinkRTI SoftwareRTIInteraction    BufferSimulation FederateUtility Libraries FOMLinkFederate Management System(FMS)Federate AmbassadorRTI AmbassadorRTILinkRTIAmbassador->Evoke multiplecallbacksObject Removed BufferObject Updated BufferObject Discoved BufferCallbackListenerFederate Management    SystemDomain CodeRTILinkEngineScenarioManagerObject FactoryCallback ListenerEvent ManagerObject ManagerFederate ManagerFMSDomain CodeUtility Libraries FOMLinkRTILinkInteraction      BufferEventManagerFederate Management    SystemDomain CodeRTIHLA InteractionFederate AmbassadorRTI AmbassadorRTILink InterfaceHLA Object PartHLA Data RepositoryHLA ObjectEngineScenarioManagerObject FactoryCallback ListenerEvent ManagerSimulation FederateUtility Libraries FOMLinkFederate Management System(FMS)Federate AmbassadorRTI AmbassadorRTI SoftwareRTILinkObject ManagerFederate ManagerFMSDomain CodeUtility Libraries FOMLinkRTILinkRTIHLA InteractionFederate AmbassadorRTI AmbassadorRTILink InterfaceHLA Object PartHLA Data RepositoryHLA ObjectRTILinkDomain CodeFederate Management    SystemCallbackListenerObject Discoved BufferObject Updated BufferObject Removed BufferRTIAmbassador->Evoke multiplecallbacksRTIInteraction    BufferRTILinkInteraction      BufferEventManagerFederate Managerment    SystemDomain Code