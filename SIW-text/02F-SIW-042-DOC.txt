Post AOCPost-AOC, Air Tasking Order Release Decision FlowDavid F. PermeGestalt, LLC1040 First Ave, Suite 302King of Prussia, PA 19406610 7678-0800, ext:.  227 HYPERLINK "mailto:dperme@gestalt-llc.com" dperme@gestalt-llc.comRichard LongGestalt, LLC227 North Magnolia, Suite 104Orlando, FL 32801Office: 407 839-8481 HYPERLINK "mailto:rlong@gestalt-llc.com" rlong@gestalt-llc.comABSTRACT:  The three primary products of the Air Operation Center (AOC) are the Air Tasking Order, the Airspace Control Order (ACO) and the Special Instructions (SPINS). The ATO planning cycle normally begins 36 hours ahead of actual mission execution. Thousand of man-hours of effort go into the building of the Air Battle Plan expressed in the ATO. Tasks include packaging of missions to ensure proper support, proper selection of assets to best fulfill the mission, communications support and coordination, airspace coordination, and selection of mission command elements. Even with concentrated detailed planning executed in the AOC, thousand of man-hours of additional planning are expended in mission planning following the release of the ATO. This planning ranges from decisions made at the Wing Operations Center, to the mission commander, package commanders, flight leads and actual aircraft commanders. The personnel who are conducting this planning are experts in their weapon systems and familiar in the specific theater operations. Neither this level of expertise nor level of manpower is available for controller support during AOC wargaming exercises. This paper will examineexamines the decision flow of the ATO post after AOC release and characterizes the types of decisions made at 3 three successively more detailed levels.Currently in use at Joint Training Confederation (JTC) exercises, there is an interface system is in use that provides AOC input to simulation systems and provides mission feedback to the AOC planning system, the Theatre Theater Core Battle System (TBMCS).  The system has been built on a 3three-layered enforced architecture using a gateway approach that allows many simulations to interface to the AOC systems.  The system uses a normalized data representation of air mission tasking and execution.  This normalized data, or the Command and Control Data Interchange Format (C2DIF), has proven its stead worth in both use and evolution.  An expert system approach that has already been in use at wargaming sites worldwide will be is detailed and the lessons learned in its use at multiple exercises are given.  Theis expert system extends the translation function of the gateway such that it addsby adding mission levelmission-level content to the AOC tasking..1.  Post AOCPost-AOC ATO Release CycleAn ATO destined to be executed by live participants undergoes a great deal of planning post after AOC release.  The mission planners at the AOC understand this and realize that the ATO tasking will be studied and planned to a much greater degree than was performed during the ATO development.  The personnel performing this additional planning have been trained, are well prepared to undertake this task, and there are a great number of them.  With regards to the simulation environment, the number of controllers available for an exercise or events are nowhere not nearly as numerous and, in many cases, not as well trained or up to dateup-to-date as their operational counterparts.  The controllers are fewer in number during ATO processing for a simulation than the experts are during ATO processing for real-world operations.Therefore, any measures that can be taken to automate the post AOCpost-AOC ATO processing must be seriously considered.  This document includes an ATO Processing Activity Diagram.  Each activity state is numbered in order to provide a reference to the discussion points that follow the diagrams.1.1  Activity Steps Elaboration(Step 1)  AOC Releases ATOThe AOC can release the ATO via USMTF message delivered by email or posted to a web site.  The ATO can also be released via the database by altering the status of the ATO and its tasked missions within the ATOPLN segment of the AODB database.(Step 2)  The ATO is received:At this point, 4 four parallel threads (processes) can be executed.  They are Validate ATO USMTF Format, Update AOC UOB, Update Simulation UOB and Update ACM.(Step 3) Validate ATO USMTF Format: Checks for a correct, “processable” USMTF message.  This check is to see if the message can be translated and that it follows the USMTF formatting rules.(Step 34)  Update AOC UOB (Unit Order of Battle): This event is triggered by the arrival of the ATO.  This includes the initial ATO release (change 0) and all ensuing releases within the cycle.  The UOB must be updated to ensure that any changes to the UOB are captured.  It is an error to consider that the UOB is “static” and does not undergo any changes in the course of an exercise, . quite Quite the opposite is the case, : the UOB changes daily during an exercise.  This situation will only increase in the light of current operations that emphasize use of deployed forces and expeditionary operations.(Step 45)  Update Simulation UOBThe simulation UOB is updated.  This step can be triggered as depicted or more efficiently executed by obtaining updates as they occur, via messaging middleware, such as ALSP or HLA, via CREATE/UPDATE and DELETE messages.  Presently there is no scenario initialization component in a JTC or HLA federation being actively used.(Step 56)  Update ACM (Airspace Control Measures): ACMs can be updated by processing the USMTF Airspace Control Order (ACO), by registration with the airspace services supported by TBMCS, or by directly accessing the AIRSPC segment of the AODB.  ACM updating is required to provide airspace representation against the ATO specifiedATO-specified airspaces (2nd OrderSecond-Order ATO Validation).(Step 7) First-Order ATO TranslationThis step is where the incoming ATO is translated to Dirty C2DIF.  Translations that do not need any additional activity to complete algorithmically and do not need any additional dynamic data are termed First-Order.  An example of this is the Latitude/Longitude translation from USMTF formats to the C2DIF format.  The C2DIF is “dirty” at this point because it can contain data ambiguities and data omissions.  Examples of data omissions are missing Time Over Target (TOT) values in Ground Attack segments (GTGTLOC), missing Standard Conventional Load (SCL), or two ACM locations designated in the AMSNLOC segment.  The end result of this step is Partially Translated Dirty C2DIF.ATO Processing Activity Diagram(Step 7) 1st Order ATO Translation:This step is where the incoming ATO is translated to Dirty C2DIF.  Translations that occur do not need any additional activity in order to complete algorithmically and do not need any additional dynamic data are termed 1st Order.  Examples of this are Latitude/Longitude translations from USMTF formats to the C2DIF format.  The C2DIF is “Dirty” at this point because it can contain data ambiguities and data omissions.  Examples of data omissions are missing Time Over Target (TOT) values in Ground Attack segments (GTGTLOC), missing Standard Conventional Load (SCL), or two ACM locations designated in the AMSNLOC segment.  The end result of this step is “Partially Translated Dirty C2DIF”.(Step 8) 2nd OrderSecond-Order ATO Translation:This activity step requires that the AOC and Simulation UOBs be updated.  This step can be combined with step 7, 1st OrderFirst-Order ATO Translation.  This translation step translates such items as the unit name, operating location, mission type, aircraft type, ground ground-launched cruise missile type, equipment types, and weapon types from the AOC names to the simulation names.  This is required to ensure that correct simulation assets are correctly tasked.  It is not realistic to believe that the AOC and simulation database will be 100% synchronized insofar as unit names, locations, etc.  This step requires an interface viewer to resolve conflicts or inconsistencies between the simulation and AOC if they arise.  The result of this activity is “Fully Translated Dirty C2DIF”.(Step 9) 1st OrderFirst-Order ATO ValidationThis step ensures that the minimum set of data required in order to properly task missions and units has been populated.  In the event that there are data omissions, then this process will make a best effort to populate them.  Examples An example of this such omissions are missing TOTs.  Frequently, an AOC will task a mission for a multiple ground attack scenario, that is, there will be multiple GTGTLOC lines for a given mission.  Only the 1st first GTGTLOC will have a TOT value populated.  The following segments will have NULL values3 in the TOT field.  The proper interpretation of this is NAF dependentThe proper interpretation of this is NAF-dependent4, but normally means that the mission should meet the TOT of the 1st first GTGTLOC and then, as soon as possible, hit the remaining targets.  This step is titled as a 1st first-order step, since the logic required to provide the missing data can be implemented within a rule set or configuration file or “hard coded’ coded” if required, but it is largely static for the duration of the exercise/event.  However, one should note that the types of data omissions are NAF NAF-dependent and do change from on NAF to another.  The result of this activity is still Fully Translated Dirty C2DIF.(Step 10) 2nd Second-Order ATO ValidationThis step is dependent on the UPDATE ACM activity in order to complete.  This step ensures that missions tasked to use named ACMs can identify those ACMs.  Additionally, reference points such as Air Refueling Control Points (ARCPs) are not always declared and defined within the ACO.  In this case, the mission is tasked to refuel from a certain tanker aircraft operating in a certain refueling orbit.  The definition of the orbit doesn’t always include the ARCP.  The ARCP is needed to initialing direct the mission to, prior to entering the refueling track.  The Dirty C2DIF can now have the location ambiguities removed or new ACMs declared.  The result of this step is “Fully Translated Clean C2DIF”.  The Clean C2DIF is not totally simulation simulation-executable at this point.  The missing components are data that is normally supplied by mission planning cells, mission commanders, WOCs, and aircrews.  This is covered in the following activities.(Step 11)  C2DIF Conditioning:This activity applies the normal planning associated with an ATO that is performed by or handled by the WOC, Mission Commander/Package Commander, or Flight Lead/Aircraft Commander.  This activity determines mission ingress and egress routing, mission priorities, weapons loads, or the actual task unit that will execute the mission.  Mission priorities are required in the event of over- tasking.  Over Over-tasking can occur since because the ATO planning cycle normally begins 36 hours in advance of execution.  The available assets and launch bases status can change drastically in that time.  Weapon loads are assigned especially when a “BEST” SCL is identified.  The proper SCL selection is then dependent on target type and availability of the weapons.  Ingress and egress routing is defined within the ACO, ; however there is nothing that relates those routes to the actual missions, save for the SPINS (Special Instructions).  The SPINs are a large, free free-text comment field attached to the ATO.  They are difficult to or impossible to machine- process.Package commanders and mission leads will adjust TOTs, Time on Stations (TOS), orbits, caps, etc… ., to best execute the mission.  The package is normally “built” around a primary mission or missions.  These missions are identified and the surrounding “support” missions altered to best execute the tasking.  Additionally, contingency operations are planned, i.e., aircraft fallout and WX.  Ingress and egress routing can be assigned at this point as well.Flight Leads and Aircraft Commanders provide sanity checks, which include fuel requirements based on routing, range and coverage periods, weapons launch envelopes (for example, weapons launch altitudes for air launchair-launched cruise missiles), time and distance checks for required speeds, and the final pre-flight threat assessment.  The result of this step is  “Executable C2DIF”.Current system approachThe current system in use that provides some level of automation to the ATO release is the AOC Simulation Interface (ASI).  ASI has been developed under contract from ESC/CX.  Program direction comes from AFAMS (Air Force Agency for Modeling and Simulation) as well as the user audience.  The user audience for ASI is primarily the model controllers in place at various wargaming support facilities worldwide.  These include the AFC2TIC, KASC, JTASC, WPC, NSC, ESC Testing Facilities, JSIMS Integration Facility, and others.2.0  ASIASI has recently been incorporated into NASM, JSAF and RESA.  ASI provides the following:2.1  Database correlationBetween the TBMCS Air Battle Plan (ABP) and the SIMULATION Scenario Database:  ,  ASI provides the capability to map, validate and report on the condition of the correlation between the TBMCS ABP and SIMULATION scenario databases.  Correlation services are provided for airbases, aircraft, tasking units (squadrons), stores/weapons, target types, and mission types.  This functionality is used during pre-simulation activities to ensure that the scenario database built in the simulation is properly prepared for the upcoming exercise.  This functionality is also used during the exercise each time a new ABP and new ATO is generated, to correlation correlate for each new TBMCS ABP is with the simulation scenario database.2.2  Airspace correlation and processing:ASI extracts Airspace Coordination Orders (ACO) from the TBMCS AODB database and translates them to SIMULATION SIMULATION-recognized airspace.  Automatic translation occurs for non-ambiguous airspace types (two-point AA and single-point CAP) and shapes (LINE, LLTR, POINT, POLY_ARC, and TRACK).  For ambiguous airspace types (multi-point AA, multi-point CAP) and shapes (C2, EC, OTHER), a Human Human-Machine Interface (HMI) is provided, for by which an operator to can select the type of airspace translation.  Once the airspace is translated, a command file is generated containing the SIMULATION airspace definitions.2.3  Air Tasking Order (ATO) processing:ASI processes the USMTF ATO message from TBMCS.  The ATO is parsed, converted, and correlated, so that SIMULATION SIMULATION-compliant mission orders are generated.  An HMI is provided to allow operators to review and edit, if necessary, any of the generated mission files.  A mission launcher is provided to insert the files into the simulation.2.4  C4I information feedback:ASI provides the following feedback to TBMCS on tasked missions: Database updates Ssimulate Mission Status updates normally performed by Wing level personnel.  This simulates operational personnel using the TBMCS Unit Level  Execution Management Control (EMC) to input mission data.  ASI’s feedback functionality is dynamically configurable to ensure that the TBMCS sequence is followed regardless of the sequence of updates received from the simulation.  Other database input simulates airbase and ship status updates. TADIL TADIL-A Air Track Messages USMTF Feedbackfeedback, including MISREPS (Mission Reports) and ABSTATS (Air Base Status messages).Java based Mission Planner Workstation.  The MPW provides a workstation for use by controllers (personnel charged with ensuring that the simulation support of the AOC training is as realistic as possible).  The MPW has 3 components:Mission Monitor: A spreadsheet like display of current ATO missions and selected data about them (launch base, unit mission, aircraft type, status information and estimated time of Departure, simulation status).Mission Editor: A syntactically sensitive editor with selection buttons and pull down lists that guide the controller in any required editing of generated ATO missions.Graphics View:  A graphical view that includes the Enemy Order of Battle and the currently selected mission flight profile.  The controller can edit the mission graphically using the mouse or textually using the Mission Editor.  In either instance, editing changes affected on one application are mirrored instantly in the other.  The mission displayed is automatically centered when selected by the controller.Architecturally, the system ASI is part of a 3 three-level layered systems which isolates both sides of the interface from changes and alterations in the opposing systems.  A view of the system is included below:Layered Architecture3.0  Mission Planner Workstation (MPW)The MPW is a development begun early in 1999 for use at the Joint Expeditionary Forces Experiment 1999 (JEFX99).  It is an effort designed for the the model controller to allow them to graphically edit the ATO mission profile.  Prior to the effort, the only means available to the controller was to use the Mission Editor and Mission Monitor provided by ASI.  These two components have been integrated into the MPW.The requirements of the MPW were to allow the controller the ability to graphically view and edit a mission.  Also, any edit executed graphically had to be executed on the text editor as well.  At this point a short description of the MPW components is necessary.The MPW has three components:3.1 Mission Monitor:The mission monitor is a JAVA basedJava-based component that simulates a spreadsheet in look and feel.  It is database database-driven and presents the controller with all of the missions specified in an ATO.  The system ensures that only the most appropriate mission is presented.  That is, an ATO cycle can be comprised of many ATO releases within a 24 24-hour period.  Normally, the ATO cycle is tied to an Air Battle Plan.  Therefore, the 1st first ATO released will be “ATO  (ATO ATO Identifier) ) Change Change 0”, ; afterwards, consecutively released ATOs are labeled with increasing change numbers.  A mission can be modified, deleted, or added.  These changes are tracked by change number and displayed with the most appropriate one.  The Mission Monitor displays some additional fields and these can be seen in the picture below:MPW Mission MonitorMMission Monitor ViewThe Some columns of note are:Simulation Mission Number – —Tthe numbers may vary due to some creative ATO relationships, such as multiple Aircraft aircraft types and configurations under the same mission number.  Many simulations cannot handle this constraint and must have homogeneous aircraft types per mission number.  .Launch Base of the mission.  . Squadron or Task Unit, Package Identifier (if identified) of the unit, (if identified) ATO Change nNumber., Status as specified by the ATO (ADDED, CHANGED or DELETED) and) Stack Status – —the Ccurrent simulation status of the mission (SENT, CHECKED, AWAITING LAUNCH, AIRBORNE, ON-GROUND, MISSION COMPLETE and DESTROYED), ETD. 3.2  Mission EditorThe mission editor is another JAVA basedJava-based component that is essentially a syntactically sensitive editor.  The supported syntax is that of the SIMULATION simulation.  This syntax has its routes roots in the RESA naval simulation system, that begat ADSIM (Air Defense Simulation) that became SIMULATION (Air Warfare Simulation) developed at the WPC.  SIMULATION is the reengineered version of the simulation implemented by Raytheon Systems, Inc., from 1995 to 1997.  Maintenance of the system is ongoing today.  The editor allows a novice controller the ability to edit and add value to the ATO mission profiles without having to learn the syntax of the simulation.  The mission editor displays the mission selected with the w:in the mission monitor.MPW Mission Editor3.2  Graphics ComponentAnother MPW component provides a graphical view that includes the Enemy Order of Battle and the currently selected mission flight profile.  The controller can edit the mission graphically using the mouse or textually using the Mission Editor.  In either instance, changes made with one application are mirrored instantly in the other.  The mission displayed is automatically centered when selected by the controller.The graphics component makes use of the GIAC (Graphical Input, Aggregate Control) workstation software, originally developed by the Los Alamos National Laboratories.  The MPW has used this software since its initial development in 1990, and continues to maintain it today.  The system provides a highly scalable data-distribution middleware layer.  It was the system of choice at Millennium Challenge 2002, for both a single integrated air picture and a ground truth air picture.MPW Graphical Display3.2  Graphics ComponentThe MPW makes use of the Los Alamos National Laboratories developed Graphical Input, Aggregate Control) workstation software.  This software has been in use since initial development begun in 1990, and has continued through to present in a maintenance mode.  The system provides an eminently scalable data distribution middle ware layer.  It is the system of choice at Millennium Challenge 2002 for both a single integrated air picture and a ground truth air picture.Of note is that edits performed on either the GIAC or Mission Editor are reflected on the other.4.0  C2 Data Interchange FormatAir tasking orders need to serve as the input to a  number of simulators used by the Joint Synthetic Battlespace simulation centers.  This need led to the creation of a normalized data layer from which the suite of simulators can build simulator orders.  This layer is called the Command and Control Data Interchange Format (C2DIF). C2DIF is a set of object definitions (i.e., classes) that capture the planning elements of the ATO and ACO, as well as the data elements that simulators require to generate orders.The following diagram is a recommended format and relationship that represents unit and mission level task. AnalysisThe approach to an analysis of establishing a common command and control data format was to approach it from 2looked at the problem from two viewpoints.  The 1st first viewpoint was simulation simulation-centric.  Essentially, this approach was to analyze all of the air tasking simulations, both deployed and under development. existing and in development Air tasking simulations.  The older simulators came from a common background and their order formats are similar.  The type of mission being executed is the major determining factor on what the mission can do.  This is constraining, since the capabilities of aircraft is are changing and air power doctrine is adjusting to today’s battlefield.  The new simulators are attempting to be ATO- centric, but they are still in the design phases.  Hopefully, they will avoid constraining mission behavior do toby the type of mission being performed.The second approach was ATO C-centric.  This looked at the data elements from the ATO viewpoint.  Actual ATOs produced at Joint Expeditionary Forces Experiments, Blue Flag 99-4 and TBMCS testing were used.   The focus was on determining the USMTF sets and fields that were actually being used and attempting to discern any patterns in usage.  Sixty-four ATOs were used as the baseline examples.The simulation simulation-centric approach resulted in  identifying what mission behaviors are allowed by the simulators and the required data to execute the order to obtain a behavior.  The ATO- centric approach resulted in the mission behaviors that the AOC planners want to accomplish and what supplemental information is required from other sources.  The merging of the two approaches allowed the development of set of classes to hold all of the information required for a missions behavior and allow a simulator to build an order from the mission class that will execute and accomplish the planner’s intent.4.1  Models SurveyedAWSIM – The Air Warfare Simulation is a simulation with a very mature order entry format that has been refined over years of military computer aided exercises.  The user is allowed to launch and control flights of aircraft to perform a mission.ENWGS – The Enhanced Naval Warfare Gaming System is in a maintenance mode and there is limited support.  There was not enough information accumulated to understand the order entry capabilities.  The simulation is based upon an expert system and the user is allowed to define rules to be used in the knowledge base.JTLS – The Joint Theater Level Simulation order entry is geared toward a higher command level then the other simulations that where examined.JWARS – The Joint Warfare Systems order entry is still in the design phase; however, the static class diagrams were available.  The classes, that may or may not be used in the final design, look like they are focused upon the ATO format.NASM – The National Air and Space Model is planning to work from an ATO and the order entry information is in a design state.RESA – The Research Evaluation and Systems Analysis is related to the AWISM simulation order entry format with a focus upon Naval operations. 4.2  ATO SurveyThe Air Tasking Order (ATO) was heavily focused on, since it contains the intent and behavior of what the planning staff is attempting to accomplish.  The C2DIF has to capture and maintain this planning and carry it into the simulation.  The ATO was dissected to discern what data that a planning staff will provide and an initial C2DIF ATO static class diagram was developed.  The ATO is developed with the understanding that other USMTF messages will contain information that other planners will use to refine the missions contained in the ATO.  It is necessary to capture this information in other C2DIF messages.  The ATO may contain a defined route for a mission to use but the route points are not contained within the ATO.  The ATO will reference a SCL and perhaps an alternate SCL but it will not list the weapons and equipment contained within the SCL.The Air Control Order (ACO) was examined to capture the defined air space.  This information will is be required for the expert system to perform ingress and egress mission route planning.4.3  Analysis MethodThe initial design of the C2DIF started with the ATO to ensure that the behavior and intent of the planning staff was captured and maintained.  Redundant information and information not required by the computer simulations were stripped away until the class diagrams resembled a bare -bones ATO, containing only the information necessary to carry out the air operation missions.C2DIF classes were designed to hold information that is necessary to support the ATO; however, not all of the information necessary to execute the mission is contained in the ATO.  Other messages had to be added to the C2DIF classes.  The other messages deal with the defined air space that is laid out in the ACO messages, the SCL definitions that are located in systems like TBMCS, the makeup of the squadron and what resources are available at a base come from the simulator, etc.Each simulation was examined in turn for the orders necessary to execute an air operation and these where were listed in a spreadsheet.  This took approximately two to three days to go through the manuals for the simulation order entry and record the orders in the spreadsheet.  Orders to control the simulator, —for example the order to control simulation time or take a game save, —or and orders for senior controllers, —for example the power to magic magic-move a unit or revive a destroyed unit, —were ignored.  The format of the order was listed and each required data field to satisfy the order was listed.  The simulation order spreadsheets were combined into a master spreadsheet to reveal what orders and data fields are common across the simulations and what data fields or orders are unique.The master spreadsheet was compared to the ATO C2DIF classes to see what information the simulator required but the ATO did not address.  The classes where were expanded to support the simulation order data requirements or to allow this information to be derived from the C2DIF class.  For example, the JTLS simulation will allow an aircraft to search an area and with a prioritized list of target types.  If an armor unit and infantry unit is are in the same area then one has precedence over the other for being selected for the attack.  The ATO does not provide for this type of information in the mission lines but the C2DIF does provide for this simulation- unique mission behavior.  The expert system can use the ATO information to modify the C2DIF objects and append this mission behavior if the JTLS simulator is being used.4.4  C2DIF ExplanationThe goal is to develop a set of generic C2DIF transport classes that will capture the state of the battlefield, the intent of the planning staff, planning down to the mission level, and allow the generation of orders to support existing and future simulators.  These classes are not intended to be a simulation order but designed to transport the data from the planning staff ATO, through the expert system, and to the simulator.  The C2DIF must be translated to the native protocol expected by the simulation, for example, Configured Text Files, an HLA FOM, XML files, etc.  This enables simulators to rapidly attach to the interface and send or receive the C2DIF. 5.0  Expert system approachThe expert system will aidaids the model controllers in accomplishing their task to refine the missions and meet the objectives laid out in the ATO.  This is accomplished done by refining the mission through the rules and ; all of the missions in a package can be normalized according to these rules.  Each mission will has have the undivided attention of the expert system and the intended behavior by the ATO can be accomplished without the attention of the model controller.  For example, the rules can handle what is intent by a “BEST” weapon load based upon the aircraft type and aircraft mission for a particular squadron.  The rules will act upon the missions as if they were going through a series of planners instead of a model controller.  They will not be affected by a single model controller’s knowledge of air operations or the model controller’s knowledge of the simulator.  The missions in a package can be evaluated as a group and adjustments can be made. 5.1  Expert System AdaptabilityAn expert system is used instead of a traditional structured approach since the logic changes frequently and the logic is “rule of thumb”.  Each planning staff will have their flavor for putting the planning intent into the ATO format, every squadron will have their its own flavor to interpret the ATO, and each exercise brings its surprises and adjustments.  The expert system can adjust to this environment without programmers maintaining and compiling executables.  It is easier to train the model controller to use rules “If A and B then do B and C” instead of a simulators order syntax.  Model controllers can focus upon operational correctness and refinement instead of translating  mission intentions to the simulator. 5.2   JESSThe Intelligent Mission Controller NodeIMCN (IMCN) uses the Java Expert System Shell (JESS) to perform reasoning on raw C4I data.  JESS is a rule engine and scripting environment written entirely in Sun's Java(TM language by Ernest Friedman-Hill at Sandia National Laboratories.  Jess was originally inspired by NASA’s CLIPS expert system shell, but has grown into a complete, distinct, dynamic environment of its own. Using JessJESS, you can build Java applets and applications that have the capacity to "“reason”"  using knowledge you supply in the form of declarative rules.  JESS is open -source software, —see  HYPERLINK "http://herzberg.ca.sandia.gov/jess/" hhttp://herzberg.ca.sandia.gov/jess/.IMCN is itself a pure Java application, making JESS an ideal candidate for an expert system layer.   IMCN uses C2DIF mission data. . C2DIF mission objects can be bound to JESS variables or inserted into JESS facts.  JESS uses Java reflection to provide a full suite of specialized functions to create, query and manipulate arbitrary Java objects without prior knowledge of their structure or contents.    Java objects may even be asserted directly into the JESS expert system environment using the built built-in JESS functions ‘Defclass’  and ‘Definstance’.  The resulting JESS “‘shadow facts’ facts” closely mirror the structure of the original C2DIF objects, and use Java’s native event  messaging system to synchronize JESS facts with the original Java object containers without the need of additional coding.  Like CLIPS, Jess uses the Rete algorithm to process rules —-- a very efficient mechanism for solving the difficult many-to-many matching problem.  Jess JESS is also a powerful Java scripting environment, from which you can create Java objects and call Java methods without compiling any Java code.  Whenever a rule fires and alters a set of facts, all of the Rules rules must be evaluated again to see if they now apply. Rete makes JESS much faster than a set of cascading if/-then statements in a loop.  An expert system shell such as JESS allows the user to define a simple set of mutually interacting rules with which to model extremely complex behavior in a fast and efficient manner.  The user may even alter facts and rules ‘on the fly’“on the fly” to examine their effects without requiring code to be recompiled, or even for the system to be shut down or reset.  This is especially useful in a dynamic and intensely human interactive environment such as occurs in a simulation exercise.5.3  IMCN and JESSIMCN builds a knowledge base from a set of aircraft, weapon and mission properties derived from the simulation, and a set of pre-defined global and local rule sets.  Missions, in the form of C2DIF objects, are then added to the knowledge base for analysis and modification.  Rules fire as matches on facts are discovered.  The knowledge base may send the mission to other analysis modules (such as the route planner), select an appropriate equipment load based upon the mission and target parameters, or alter the mission based upon other rules that have been entered on the fly.  The IMCN contains aA rule editor has been added to IMCN , that which provides a visual interface for rule management by the model controller.  The model controller is able to enable or disable various rule-sets interactively, or modify them ‘on the fly’ using a simple graphical interface.  The more experienced model controller also has a direct command-line interface to the knowledge base.   IMCN gives model controllers the ability to add, delete, or modify rules that can act upon the C2DIF classes.  The expert system applies the model controller’s rules and facts to refine the mission planning.  This will enables the expert system to perform the bulk of the mission routing, weapons selection, aircraft type selection, attack target location, etc.,  leaving the model controller to review the missions and focus on the more difficult cases.  If the model controller observes a mission behavior that is not valid, then a rule can be added or modified to correct the errant behavior.  This rule can then be applied to all subsequent missions and possibly stored for permanent inclusion into the local or global knowledge bases.Here is an example of a rule to set the takeoff speed of an aircraft in a mission to the cruise speed as defined in the aircraft property fact (comments begin with a semicolon):“Set all of the takeoff speeds to the slot take off speed”.(defrule takeOffSpeedRule (declare (salience 10)) ;salience sets the priority of this rule.This is the ‘if’ side of the rule.  ?f <-                           ;this binds the matching fact to ‘f’    (AirMission             ;the AirMission fact is derived from the C2DIF      (missionObject ?airMissionObject)                                     ;the airMissionObject contains the      (missionNumber ?number)	                                     ;mission java object itself.      (aircraftType ?aircraftType)	                                     ;Get the aircraftType of the mission.      (takeOffSpeed 0.0)                                    ;if takeOffSpeed is 0      (eventObjectArray $? ?TakeOffEventObject $?)                                    ;Get the takeOffEvent object.    )   (aircraft	                  ;The aircraft fact for type ?aircraftType     (name ?aircraftType)     (cruiseSpeed ?speed)	                                  ;Get the speed associated with this type.   ) =>This is the ‘then’ side of the ruleIf takeOffEvent object is of class TakeOffEvent  (if (instanceof ?TakeOffEventObject TakeOffEvent)then                            ;Then call the java method                                                                   (call ?TakeOffEventObject setSpeedKilometers ?speed)                                  ;Print out the mission number and speed     (printout t "Mission " ?number " take off speed " ?setSpeed crlf)  ))By utilizing tBecause it uses thehe C2DIF, the expert system is not tied to a specific simulation.  The ATO, ACO, SCL, etc., are converted into the C2DIF format.  The expert system will expand and refine the missions to accomplish the intent of the AOC staff.  The expert system is taking on the “Business Rules” of the gateway, allowing the database and schema to store and concentrate on the most efficient representation for the incoming and outgoing data, without compromise.  Finally, a simulator order writer can translate the C2DIF missions into simulator orders to execute the mission and accomplish the intent of the planning staff.Conclusion:Through the use of a gateway approach, a specific breakdown of processes and information flow, a detailed analysis of data requirements and the application of an expert system, the model controller’s work load has decreased, and the level of realism has increased.The use of the IMCN expert system will continue to expand in both breadth and acceptance.  Controllers will be able to concentrate on packages and tactics versus mission syntax.Author BiographiesDavid Perme is a managing director at Gestalt,  LLC.  He is the principal architect behind the ASI system.  His experience with DoD simulations began with the initial ALSP effort.  Hence Thereafter, Mr. Perme has been involved with Simulation to C4I interoperability since 1995 onwards.Richard Long is a senior developer at Gestalt-, LLC.  Richard Long has ten years experience with artificial intelligence and expert systems.  He was the lead scientist responsible for research and development of a novel form of force-feedback glove used for remote manipulation and telepresence, as well as a highly efficient Holographic Element Head Mounted Display.  He was in charge of developing neural network, clustering and statistical analysis tools for the Fraud Spotlight fraud-detection/data-mining system, including many novel algorithms for feature compression and overall performance enhancement.  As technical lead for the IMCN he developed the expert system as well as designing an extremely fast, customizable routing algorithm capable of 3D routing of thousands of missions around enemy threats in just a few seconds.  He has published numerous papers in the field of Neural neural Networks networks and Cognitive cognitive Neuroscienceneuroscience, Emotionalemotional/Cognitive cognitive modeling. Activity Diagram: A UML diagramming technique that is used to represent the execution state of a mechanism as a sequence of steps sequentially grouped as parallel control flow branches. Dirty C2DIF uses most of the same object classes as Clean C2DIF; the difference is the addition of a Location Class and that there may be attributes that require values that presently contain no value. Dirty C2DIF uses most of the same object classes as Clean C2DIF; the difference is the addition of a Location Class and that there may be attributes that require values that presently contain no value.3 A USMTF NULL value is indicated by the hyphen within the message set. NAF – Numbered Air Force4 NAF — Numbered Air Force In the case of an AMSNLOC segment that defines a new ACM “on the fly”. It is common for an AOC to task Wing wing-Level level organizations versus Squadron squadron Levellevel.  A normal US Air Force Wing wing is comprised of 3 three Squadronssquadrons.  When this occurs, it is the responsibility of the WOC to determine which actual task unit (squadron) will fulfill the mission.PAGE  PAGE  1Gestalt, LLC		September 2002 DATE \@ "MM/dd/yy" 0Ge9/04/02PAGE  2Gestalt, LLC		September 2002PAGE  13Gestalt, LLC		September 2002 DATE \@ "MM/dd/yy" 0Ges9/04/02ATO Processing Activity Diagram