PortalFlow® - A Portal and Workflow Environment to Transform Air Force ATR System Development	Jerome B. Soller, Ph.D.	Rob GraySteffanie MooreWendell Duncan, Ph.D.Patrick HayesMichael Johnson, Ph.D.CogniTech Corporation1060 East 100 South Suite, #306Salt Lake City, Utah 84102801-322-0101soller@cognitech-ut.comJim StadlerVeridian Engineering5200 Springfield StreetDayton, OH  45431Victor ClarkAir Force Research Laboratory / SNASDayton, OH  45433Victor.Clark@wpafb.af.milKeywords:ATR, Algorithm, CEE, Workflow, Test, Evaluation, CORBA, XMLABSTRACT: PortalFlow, a workflow management system and web portal associated with the Air Force Research Laboratory Sensors Directorate Collaborative Engineering Environment (CEE), integrates data, distributed software, and measures of effectiveness.   The workflow management capabilities enable system integrators and engineers to visually author, modify, configure, monitor, and control the execution sequence of distributed software processes.  Portalflow allows users to securely collaborate and share their content, such as software algorithms, simulations, data, and workflow process definitions.  By enabling users at different locations to integrate, register, execute, test, evaluate, compare, and refine Automatic Target Recognition (ATR) and sensor fusion software algorithms under a variety of different scenarios, it transforms the Air Force's target recognition capabilities to respond to existing and future threats and requirements.  Portalflow runs on multiple platforms and can invoke distributed software processes written in a variety of programming languages.  Its primary technologies include XML, Java, CORBA, and SQL, and it will support web services technologies.  The portal provides security through encryption, authentication, role-based access control, and audit trails.1. IntroductionOne of the responsibilities of the Air Force Research Laboratory (AFRL) Sensors Directorate is the testing, evaluation, and comparison of Automatic Target Recognition (ATR) and sensor fusion algorithms to support procurement, development, and deployment decisions on software components of weapons systems. The AFRL Sensors and Information Directorates are partnering to apply the Collaborative Engineering Environment (CEE) [1] to simulation-based acquisition in a laboratory environment for the development and demonstration of information and sensor technologies. Due to the distributed nature of Air Force simulations, resources, data, algorithms, and performance metrics, the workflow system needs to remotely and securely invoke processes on different systems. Many of the image processing algorithms and simulations generate are numerically intensive and may run on a variety of platforms dedicated to their use.  These algorithms may be written in the C/C++, Fortran, Python, TCL/TK or Java programming languages, but will need to interoperate.  A variety of algorithms from the Air Force Research Laboratory Sensors Directorate Collaborative Engineering Environment (CEE) are integrated within test and evaluation workflow processes.An example of a workflow process is a sequence of activities that converts a radar image into a collection of target identifications.  In the past, the AFRL Sensors Directorate CEE program utilized workflow tools to link distributed programs running in different laboratories/buildings and control the flow of execution.  These systems could effectively demonstrate individual activities within a single process, but could not tightly integrate with the activities.  The loose integration did not efficiently support complex control flows and data flows between activities.In response to the requirements of secure and tight integration of software processes with complex control flows, CogniTech Corporation developed the PortalFlow® workflow and web portal technologies. This environment can integrate distributed ATR and sensor fusion simulations, data sources, image processing algorithms, and performance measures, while managing the sequence of activities and the flow of data between applications. The details of the initial design and technical architecture are included in a previous SISO paper [5].  This paper focuses upon the practical considerations that impacted the translation of the original vision and design into a production environment for the Air Force Research Laboratory Sensors Directorate, Veridian Engineering, and other contractors to support their test, evaluation, and demonstration activities. It will also discuss the application of this technology to support Air Force testbeds, including the Joint Simulation Integration Fusion Testbed.2. Technical Approach2.1 User RequirementsThe Air Force Research Laboratory Sensors Directorate requires robust and secure communication of software components and services on known servers at different sites. Furthermore, Air Force system users can be characterized by different roles and security privileges. Algorithm developers should be able to access approved data for algorithm creation and initial testing of algorithms.  Systems integrators need to create software interfaces to existing pattern recognition and other algorithms and the workflow integrating the interfaces with potential scenarios. The ideal toolset should provide them with administrator access to integrate the distributed software for subsequent use by the testers within the test and evaluation of pattern recognition algorithms.   The testers will access selected data, pre-wired simulations and pattern recognition algorithms, and performancemetrics.  Evaluators will access test results to comparethe performance of multiple algorithms. After the testand evaluation processes are completed, the test and evaluation software framework should support interoperability with other simulation frameworks and C4I systems.During the design of PortalFlow® [5], the development team made a decision to model the interoperability of the activities under test and evaluation (e.g., software algorithms, data resulting from simulations) as activities within workflow processes [7].  The workflow formulation of a series of activities or tasks is appropriate when the tasks or test scenarios do not require logical time synchronization, but may require a complex control flow and specified order of execution. The workflow technologies complement simulation technologies, such as HLA, whose strong point are their support for logical time synchronization and the ability to publish and subscribe events and objects. The workflow approach is particularly valuable for test and evaluation of a predefined set of software algorithms, whose control flow and data flow are explicitly defined.2.2 Development Decisions2.2.1. TechnologiesThe primary portal technologies include XML, Java, the Common Object Request Broker (Architecture) CORBA, SQL, and public key encryption.   Because the core components of the environment are written in the Java programming language, it can operate on a variety of hardware and software environments. 2.2.2. ArchitecturePortalFlow®'s data repository and workflow engine are capable of securely interoperating with a variety of distributed clients (e.g., Java applications, Java applets, HTML pages, applications) through CORBA, HTTPS, and/or SSH. The portal will provide central control to all processes and capabilities of the system. The environment was deployed on Linux, Windows NT and Sun Solaris platforms. It manages and produces dynamically customized user interface content managed as XML.   It currently supports multiple communication protocols, including CORBA IIOP, HTTP tunneling of CORBA IIOP, SSH tunneling of CORBA IIOP, HLA protocol mappings, shell script invocations, and shell script invocations over SSH. Web services support is planned for the future. The portal utilizes JacORB [4], an open source object request broker (ORB), providing a high performance multi-threaded implementation in Java of the CORBA 2.3 specification. It is interoperable with other 2.3 compliant ORBs, such as the TAO ORB [6]. 2.2.3. Tradeoffs Between Applications and AppletsBy deciding to develop the user interface objects in the Java programming language, the Java classes could support either a Java application or a Java applet.  The Java interfaces transform XML representations of the workflow and other content into Java objects. The user interfaces for client access to the portal will run on any platform with support for Java 2. It has been tested onUnix, Linux, MacOS X, and Windows clients.The advantage of the applet approach is the software versions can be maintained centrally and no copies of the software (other than support for a web browser and a particular version of the Java virtual machine) are required locally.   This avoids the need to coordinate updates of application software on each client computer or device.  However, a decision to use applets limits the use of these technologies to certain categories of workflow activities.  For example, the Java sandbox security model does not allow the direct invocation of a locally resident software application by an applet running on a browser with typical security settings.  Therefore, if the user of the workflow engine has the requirement to run a mix of remote software processes and some local applications (e.g., image visualization, running local Unix scripts that manipulate files and directories), applets are not the best option.A Java application variant of the user interface was selected to address the requirements for tightly coupled local execution of applications.  Java applications, like applets, can communicate across the Internet.  Unlike applets, their code is not automatically updated each time the software is run.  However, the software can be configured to install itself or update its classes across the Internet using tools, such as Java WebStart. PortalFlow®'s software architecture supports the following deployment models:standalone workflow applications capable of invoking remote processes and local processeslocal files and/or database for the workflow content and audit trails, andcentralized data repository for the workflow content and audit trails for multiple usersa Java applet capable of invoking remote processes with a centralized data repository.2.2.5.  Workflow Activities A process definition consists of one or more activities, each comprising a logical, self-contained unit of work within the process.   The scope of an activity is local to a specific process definition.  Software Modules correspond to software applications, including image processing/pattern recognition applications, data conversion routines, warnings and alerts, and system level functions.   The registration of a Software Module allows the entry of its data, including execution information, runtime parameters, and descriptive data about the module.  A workflow activity may trigger the execution of a Software Module. Workflow activities within a given process definition may also include nested workflow processes and complex control constructs.  PortalFlow® can support complex control flows that incorporate the following control constructs:Routers, Joins,Assigns, Delays,Loops, Choice modules, Switch modules, andPrompts.Figure 1 shows an example of a simple workflow process definition from the CEE program that executes a combination of remote Unix scripts and local Windows executables.  It first sets up the environment variables and file directories.  Next, it converts the images from the National Imagery Transmission Format (NITF) image format into a format suitable for the Constant False Alarm Rate (CFAR) algorithms, which extract regions of interest.  Based upon the results of the CFAR algorithms, the users are prompted for their decision whether to automatically annotate particular images.  After the annotation, the files and directories are removed from the working directory and, as appropriate, copied to persistent storage.  The image viewer software is used to view the resulting annotated images.2.2.4. Security and Distributed CommunicationsThe investigators needed distributed software interfaces to allow software running on different sites to communicate in a synchronous, secure, and robust fashion.   The current version of PortalFlow® supports several alternatives to the execution of activities.   The Java application configuration of PortalFlow® can support the execution of scripts or commands directly on the local system.  For remote access, it currently supports RSH (Remote Shell), SSH (Secure Shell), CORBA, and HLA interfaces to run programs or scripts on another computer, possibly at another location.  SSH and RSH are useful for remote execution of Windows and Unix scripts.  The ATR software algorithms are written in several programming languages for multiple operating environments.   CORBA can support the interoperability of software distributed objects. In addition to the software interfaces represented in the Interface Definition Language (IDL), CORBA provides location transparency through its Naming Service, transaction support, security, and other services.To support CORBA communications through restrictive Network Address Translation (NAT) firewalls, CogniTech developed a technique to tunnel IIOP through the secure HTTP (HTTPS) protocol, commonly used for secure web transactions [5].  The advantage of this approach is its support for existing, well-understood security tools.  The limitations of this approach were driven by its use of existing HTTP servers, which impacted its performance for large file transfer and required administrative support.To address these limitations, particularly the administrative support, the development team created a method for tunneling encrypted CORBA communications via SSH through NAT firewalls.3. Deployment and Utilization of PortalFlow®3.1. Transition into ProductionVeridian and the Air Force staff provided CogniTech with commonly used, unclassified ATR and sensor fusion algorithms and test and evaluation scenarios to support the initial testing and configuration of PortalFlow® at CogniTech's offices.   SSH communications were configured on Windows and Unix workstations to invoke local and remote algorithms and data conversion routines.   Once these tests were successfully completed, the software was configured to enable the workflow integrated development environment and workflow runtime environment to securely invoke remote processes in the public portions of the AFRL Sensors Directorate CEE.  PortalFlow® was distributed as a Java JAR file for Veridian and AFRL staff, and installed in the CEE production environment.3.2. PortalFlow® Use at AFRL and Other Air Force Laboratories3.2.1. JSIFT Testbed and JCIET DemonstrationThe Joint Simulation Integration Fusion Testbed (JSIFT) is a testbed that currently "plays back" measured sensor data and sends these data to the system under test.  In the future, synthetic data will be supported as an alternative input to the system under test.  Within the JSIFT, Air Force staff, Veridian Engineering, and other Air Force contractors used PortalFlow® to initialize and execute each of the different activities of the system.  UNIX Scripts were written to start each activity. Each script launches a process on the host computer or other lab computer. In most of the scripts, RSH is used to open a terminal window and run the process with the text output going to the terminal window.Using PortalFlow®, a Software Module (a software process or application) was created and registered for each of the Unix scripts to be invoked as workflow Figure 1. A Simple Workflow Process Definitionactivities.  After registration, interfaces to the Software Modules were manipulated through icons within the workflow palette in the Integrated Workflow Development Environment.  Process Definitions created for JSIFT defined the control flow, data flow, and order of execution for each Software Module.   Using the visual workflow editor, the Software Modules were copied from the palette and visually wired together to create a Process Definition.  PortalFlow® can generate input data for a Software Module in several ways, including the outputs of a previously executed Software Modules, the value of a parameter within a process definition, the value of a counter within a loop, and direct user entry into a dialog.  For example, Veridian defined an input to one of the Software Modules (i.e., the simulation stop time), which was passed into the Unix script, as if it had been typed on the command line.  A Software Module was created to wait for the simulation to complete and another Software Module to execute a shutdown script.  The shutdown script sends a kill signal to each of the processes in the simulation requesting or forcing them to terminate.3.2.2. Experiences with the JCIET DemonstrationThe Joint Combat Identification Evaluation Team (JCIET) [2], U.S. Joint Forces Command, contains military staff from the Army, Navy, Air Force and Marines.  JCIET tests and evaluates surface-to-surface, air-to-air, surface-to-air, and air-to-surface systems.  Their exercises produced sensor data that were used within an AFRL demonstration of JSIFT, using PortalFlow® technologies.  In the JCIET demonstration, the system under test was a modified Army TES (Tactical Exploitation System), and the data was collected during a Joint Forces (Army, Navy, and Air Force) exercise.  System integrators and testers used PortalFlow® to define a Process Definition for this demonstration. The “wrapping” of the simulation simplified non-developer usage of the JSIFT testbed. PortalFlow®'s GUI showed the status of simulation components (e.g., running, completed, or failed).   A workflow process definition can handle the failure of one of its activities by triggering an exception that can either cause the entire process definition to fail, continue to a specified activity, or reattempt the failed activity a specified number of times.4. HLA GatewayThe project team realizes that some future sources of target recognition inputs will result from HLA-compliant data sources. Likewise, the results of the pattern recognition workflow will need to integrate with battlefield C4I and decision support systems as sets of algorithms move beyond the laboratory, as well as constructive HLA-compliant simulationsof battlefield scenarios and equipment platforms.Furthermore, an entire workflow of pattern recognition software processes integrated within this framework could serve as a single federate within a larger HLA-compliant, time-synchronized federation.These requirements drove the development of a simple HLA gateway between the workflow runtime engine and implementations of the HLA Runtime Infrastructure (RTI).  PortalFlow®'s previous demonstrations of HLA interoperability utilized the Defense Modeling and Simulation Organization’s (DMSO’s) HLA implementation, its Java bindings, and the Java interfaces to this framework.  DMSO has eliminated this publicly funded HLA RTI software, and left researchers with few options for prototype development and research projects. Many organizations (e.g., W3C, Sun, DARPA, IBM) see the release of a free reference implementation as a way to increase the acceptance of their standards.   Ultimately, the principal author believes a freely available reference implementation would enhance the adoption of HLA in DoD and commercial communities. The GeorgiaTech Research Institute's HLA RTI implementation, the GeorgiaTech Federation Development Kit  [3], provides a freely available RTI implementation for research projects performed by U.S. citizens.   In addition to the cost savings, the source code availability of the GeorgiaTech software offered the ability to tightly integrate and modify the communications infrastructure.  Therefore, the current version of PortalFlow® demonstrated its HLA interoperability with the GeorgiaTech Federation Development Kit.5. ConclusionThis paper presented an overview of PortalFlow®'s transition from a concept to a deployed system at the AFRL Sensors Directorate. Its workflow management capabilities enable system integrators and engineers to visually author, modify, configure, monitor, and control the execution flow of distributed software processes and data.  It allows users to securely collaborate and share their content, such as software algorithms, simulations, data, and workflow process definitions.  PortalFlow® met the needs of the JSIFT testbed and will improve the ability of Air Force collaborative engineering, test, and evaluation programs to support future ATR system requirements.  6. References[1]	AFRL, "Overview of the Sensors Directorate," AFRL’s Sensors Directorate, Wright-Patterson AFB Ohio.[2]	Eglin Air Force Base, Joint Combat Identification and Evaluation Team (JCIET), 2002, https://jciet.eglin.af.mil/defaultMil.htm.[3]	B. Fitzgibbons, T. McLean, and R. Fujimoto, "RTI Benchmark Studies," paper 02S-SIW-105, Spring 2002 Simulation Interoperability Workshop, SISO, March 2002.[4] 	G. Brose, "Jacorb: High performance java orb,"	http://www.jacorb.org/.[5] 	J. Soller, et al, "PortalFlow - A Web Portal for Virtual ATR Test and Evaluation," paper 02S-SIW-70, Spring 2002 Simulation Interoperability Workshop, SISO March 2002.[6] 	Washington University in St. Louis’ Center	for Distributed Object Computing	http://www.cs.wustl.edu/schmidt/TAO.html.[7] 	Workflow Management Coalition, "The Workflow Management Coalition," http://www.wfmc.org/7. Author BiographiesJEROME B. SOLLER, PH.D. is the President of CogniTech Corporation.  He currently is the principal investigator of a contract to develop a web portal for the AFRL sensors directorate and a contract to develop a chemical sensor simulation environment for the Navy. He has previously held research positions at the University of Utah, the U.S. Department of Veterans Affairs, and industry. He received his Ph.D. in Computer Science from the University of Utah and his B.S. in Electrical Engineering from the Johns Hopkins University.ROB GRAY is a Senior Software Engineer at CogniTech Corporation.  He led the development of PortalFlow®'s integrated development environment.  His previous employment experience as a Senior Software Engineer included the development of advanced distance learning environments, XML content management, and user interface design.JIM STADLER is a software engineer at Veridian Engineering.  He developed the previous workflows for CEE and tested the PortalFlow® prototypes.  He currently leads the technical development of the JSIFT testbed. VICTOR CLARK is a Senior Electronic Engineer at the Air Force Research Laboratory.  He is theAir Force Project Engineer for the Air Force PortalFlow effort.  Mr. Clark has a M.S. in Computer Engineering from Wright State University.STEFFANIE MOORE is a software engineer at CogniTech Corporation.  She led the development of the run-time workflow engine described in this paper. She is currently pursuing an M.S. in Mathematics at the University of Utah.WENDELL DUNCAN, PH.D. is CogniTech’s lead technical person for physical sciences, modeling, and simulation. He led the development of the CORBA and SSH tunneling technologies for this project. Dr. Duncan has a Ph.D. in computational chemistry.PATRICK W. HAYES JR. is a software engineer at CogniTech Corporation who led the initial design of the XML content for this workflow engine and analyses of workflow standards. MICHAEL JOHNSON, PHD is a Senior Software Engineer/Research Scientist at CogniTechCorporation.  Dr. Johnson performed the initial configuration of the SSH protocols for Windows and Unix systems.   Dr. Johnson previously worked in the computational materials science group at the Knolls Atomic Power Laboratory.  He received his Ph.D. in Computational Chemistry from the University of Utah. AcknowledgementsThis project was supported by Air Force contracts F33615-00-C-1657 and F33615-01-C-1867. Steve Haupt and other Veridian staff provided assistance withaccess to and integration of the ATR algorithms and ATR data resulting from simulations, as well as usability feedback for PortalFlow® throughout its software life cycle.   Scott Johnson of Gracar Corporation provided valuable feedback to improve the software's usability.Copyright 2003, SISO, Inc. Permission is hereby granted to SISO members and sponsors to quote any of the material herein, or to make copies thereof, for personal or internal organizational purposes, as long as proper attribution is made and this copyright notice is included. All other uses, including resale and/or redistribution for commercial purposes, are prohibited without written permission from SISO, Inc.PAGE  8PAGE  8