World Wide Web Becomes World Wide Warfare?Lessons Learned Integrating DIS and DirectPlayRiley B. RaineyWeb Simulations, Incorporated2404 Custer ParkwayRichardson, Texas 75080-2559972-690-3432 HYPERLINK mailto:riley.rainey@websimulations.com riley.rainey@websimulations.comKeywords:DIS, DirectPlay, Component Object ModelABSTRACT: Microsoft’s DirectPlay provides an attractive collection of distributed game setup, game management, and packet transport services.  However it lacks the basic entity-level services essential to a distributed simulation.  This paper describes the implementation of a simple distributed air combat simulation, ACM for Windows.  It was architected layering IEEE 1278 DIS on top of DirectPlay. The author reviews the techniques used to integrate DIS with DirectPlay and describes some of the successes and pitfalls encountered along the way.DirectXGames are big business on PC’s and it’s not surprising to find Microsoft heavily engaged anywhere the action is.   Game software authors were slow to move to Windows 95.  Windows graphics and multimedia services were perceived as inefficient and yielded poor results when compared to games targeted to run on MSDOS.In 1994, Microsoft began an effort to add services to the Win32 API that would give game programmers the control that they needed to deliver workable games that ran directly on Windows 95 or Windows NT.  This effort was originally released under the name WinG – G for Gaming.  WinG services were focussed display management; no services were present that directly aided distributed gaming. Microsoft continued the effort to expand Windows-based multimedia capabilities, aggregating new services and features.  The WinG API was updated and re-released as DirectX in 1995. Direct X has continued to evolve at a seemingly frantic pace. Version 6 has just been released.All this effort is being driven by intense market demands for networked computer games.  On-line gaming sites have sprung up across the Internet.  One such site, Microsoft’s Internet Gaming Zone [1], sports a typical evening load of over seven thousand concurrent participants.Essentially these gaming sites are simply rendezvous points.  They provide elaborate chat services to allow players to find one another, then quickly launch the actual gaming application typically relies on UDP multicasting to communicate directly between the actual player machines.DirectPlay EvolvesDirectX is implemented atop Microsoft’s Component Object Model (COM). COM allows software components to expose functions through interfaces. By definition, once a COM interface is published, it is not permitted to change in appearance or functionality.  To add new features or capabilities, one would define a wholly new interface that exposes the original functionality along with new features.For example, DirectPlay originally defined an IDirectPlay interface.  When Microsoft added new features, a new interface was made created, IDirectPlay2.  Existing applications that depend upon the original behavior remain unaffected – in fact, they do not even need to be recompiled – since they continue to access the original interface. This is an important idea that has helped to minimize the pain that might otherwise be suffered by anyone wishing to use this evolving standard. Of course, making this work in practice depends largely on the implementor of the interfaces that you depend upon, but my experience in this area has been quite favorableAs it currently exists, DirectPlay has these major features:Lobby model -- a matchmaking service can bring together players and automatically start the application on all the participant's machines and connect them to each other in a communications channel. Once the game is in progress the lobby software and the application can exchange information while the session is in progress. Network independence – DirectPlay provides network service providers to allow simulations to interconnect via TCP/IP, IPX, direct dial modems, or serial cabling. Service provider model - this allows DirectPlay to take advantage of network capabilities like multicasting to optimize operations like sending messages to all participants.  EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 1 the DirectPlay APISimple send/receive functions -- for exchanging PDUs or other messages between applications. Player and group management functions -- automatic messages generated when new players are created, destroyed, added/deleted from groups, etc.; function to help manage application specific data associated with the player/group.   These features have no direct equivalent in DIS and were largely unused.Remote shared data -- changes in remote data are propagated to all the other machines automatically.  This HLA-like feature was unused in our DIS/DirectPlay implementation.Keep alive - DirectPlay will detect when players lose their connection. Not surprisingly, DirectPlay provides no equivalent of the entity level interactions laid out in the IEEE 1278 DIS protocol.  One could argue that the diversity of commercial games that might be layered atop DirectPlay makes such a definition useless; still, traditional military simulations could benefit.Combining DIS and DirectPlayI released the original version of ACM in 1991.  At the time it ran only on UNIX and relied on a central simulation server.With prodding and some help from colleagues interested in ACM, in 1995 I wrote my own C-language implementation of the DIS protocol and used that to create a truly distributed version of ACM. This DIS library was used as the starting point for integrating to DirectPlay.DirectPlay exposes easy-to-use multicast transport services.  Once a session is established, one simply calls Send() and Receive() methods to transfer PDUs between applications.  To avoid the CPU overhead of continuously polling DirectPlay for incoming PDUs, I designed a separate PDU reader thread to block, waiting for incoming PDUs, and process them as they arrive.This framework made it easy to integrate the two components.  No special framing or encapsulation of DIS PDUs was required. The only changes to the application level DIS interface were to expose functions to configure the transmission/reception logic to reroute packets to DirectPlay rather than to a UNIX-style sockets API.  It was even possible to do this in such a way as to retain a normal DIS operating mode so that the application could be configured to participate in conventional DIS exercises.TestingEarly testing uncovered a serious problem.  Within the simulation, position updates were occurring at up to 50 hertz.  As with any DIS-compliant simulation, if the aircraft’s updated position exceeded the specified dead reckoning tolerance, a new Entity State PDU would be emitted.  With the reduced bandwidth available, the reception channel quickly saturated.A simple enhancement to the transmission logic solved the problem.  At program startup, a transmission timeout was computed:T = Pave * 10 * Etot  /  BWhere T is the transmission timeout in seconds, Pave is the average size of an outbound Entity State PDU, in 144 bytes in ACM, B is the transmit bandwidth in bits per second, Etot is the number of entities currently active in the exercise.  The constant, 10, represents the number of bits needed to be sent for each byte of data – ten in this case to include start and stop bits in an asynchronous data stream.  The entity state transmission logic was updated to wait until this timer had expired before transmitting an entity state PDU.  This logic assumes that each machine is responsible for only one entity. EMBED Visio.Drawing.5  Figure  SEQ Figure \* ARABIC 2 Updated PDU transmission logicQuality of ServiceWe spent several weeks performing beta testing on the Internet.  Testing was performed in the evenings.  Beta testers connected to the net through an assortment of ISPs using 33.6Kbps modems.  The “ping” program was used before play testing to measure IP-level packet round-trip times.  Typical round trip time was 250 to 300 milliseconds.Figure 3 shows latency standards defined by IEEE 1278.2-1995 [2].  Extrapolating from our ping latency results (150 ms one-way), we would be categorized somewhere in the gray zone between tightly and loosely coupled simulations. EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 3 IEEE 1278 latency characterizationsPacket latency is a well-known issue on today’s Internet.  There are now commercial service providers that attack the Internet’s latency problems.  Most provide their own TCP/IP connectivity specifically for gaming.  One notable site, DWANGO [3], is available in most U.S. metropolitan areas and advertises latencies less than 150 milliseconds.No effort was made to synchronize system clocks to Coordinated Universal Time.  Instead PDUs where time stamped with relative values.IEEE 1278.1-2 defines other quality of service parameters such as transport-to-transport jitter and reliability.  These were not measured as part of our testing, but my suspicion is that the Internet would not score splendidly in these areas.The FutureOne goal I have is to help facilitate commercially viable interoperable simulations.  Several commercial projects are being contemplated as a result of this work.Standardized terrain.  A standardized, non-proprietary terrain model suitable for land, sea, and air use would help enable the dream of interoperable commercial simulations.Enumeration Repositories.  Currently sanctioned IEEE enumerations are only helpful for simulating modern conflicts.  What would you do to simulate a World War II era battle?One solution that I’ve experimented with involves the creation of centralized enumeration repositories that would provide traditional lookups – what’s the enumeration for a Soviet T-34 tank, for instance – and extended information as well such renderable object descriptions.ConclusionsAn existing DIS communication library was fairly easily adapted to use DirectPlay as a network transport layer.  DirectPlay provides a rich simulation lobby environment that has potential applicability to more conventional training environments.  DirectPlay has the additional benefit of being no cost software on all Microsoft Windows platforms.The DIS protocol, or some derivative of it, still provides promise to be the underpinning of a new generation of interoperable commercial games.References[1]  Internet Gaming Zone,  HYPERLINK http://www.zone.com http://www.zone.com[2] ACM for Windows, http://websimulations.com/acmfw.htm[3]  IEEE Standard 1278.1-1995, Standard for Distributed Interactive Simulation – Communication Services and Profiles[4] DWANGO Multiplayer Network,  HYPERLINK http://www.dwango.com http://www.dwango.comRILEY RAINEY is the president of Web Simulations Incorporated, Richardson, Texas.  In 1991, he released source code for ACM, the first UNIX based flight simulation freely available on the internet.  He has been active in the internet community for nine years. 