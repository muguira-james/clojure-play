Rosetta; A Platform for Correlation in the JDN and JCTNPhilip YanniANZUS Inc.9747 Business Park AveSan Diego, CA 92131(619)-547-912870571.2714@compuserve.comPaper No. 00S-SIW-074Keywords:C4I DATALINK JDN JCTN VMF CEC LINK-16 JTIDS MIDS SINCGARS IDM LINK-11 FORWARDING SIGNAL EMISSION SENSOR CORRELATION COM DCOM CORBA MISSION REHEARSAL SIAPABSTRACT:One of the key issues presented at every Balkans lessons learned conference has been that we need to coordinate our realtime information sources.  'We already have a true capability for finding the most important targets at any given moment,' …The next piece is to field a data link and architecture to move a piece of data to the right shooter.'  This problem is becoming more complex as we increase the number of realtime systems in the battlespace.  F-16CJ SEAD aircraft with IDM, EPLRS on the ground, Combat ID systems, and the current Link-11 / Link-16 tactical datalinks are only the beginning of the Joint Data Network (JDN).  The Joint Composite Tracking Network (JCTN) is limited to radars, but its capabilities will expand as new highspeed sensors are fielded.  Correlating tracks and managing the information have become the major issues.  Rosetta is a realtime highspeed information processor with a proven track record for moving information among these datalinks.  Rosetta, having been able to manage the data, is now addressing the formidable issue of integrating the information they carry into a coherent tactical picture or "Single Integrated Air Picture".  Rosetta interfaces directly with the tactical datalink hardware (JTIDS, IDM, Link-11, EPLRS, etc.) and makes the data available to correlation engines in a normalized format.  The realtime transformation of the ground, air, and sensor data into a coherent format has required a novel approach to the process of data preparation.  This paper will address the architecture of the Rosetta system as it applies to correlation engines.  As with tactical datalinks, correlation engines tend to be optimized for a specific environment, Rosetta simplifies the integration of these engines into a common architecture.  This paper will address the simulation of the correlation platform along with the results of fleet operational testing. TOC \o "1-3" \t "Header,1" Rosetta; A Platform for Correlation in the JDN and JCTN	 PAGEREF _Toc475242142 \h 11.0 Introduction	 PAGEREF _Toc475242143 \h 32.0 CONOPS	 PAGEREF _Toc475242144 \h 33.0 Overview of JCTN	 PAGEREF _Toc475242145 \h 43.1 JCTN Data Correlation	 PAGEREF _Toc475242146 \h 44.0 Overview of JDN	 PAGEREF _Toc475242147 \h 45.0 Correlation among JDN Data Sources	 PAGEREF _Toc475242148 \h 56.0 Rosetta Architecture	 PAGEREF _Toc475242149 \h 56.1 Platform Features	 PAGEREF _Toc475242150 \h 66.2 Forwarding Rules Object Gateway	 PAGEREF _Toc475242151 \h 67.0 Access to Rosetta	 PAGEREF _Toc475242152 \h 77.1 Implementation of the TCP/IP Interface	 PAGEREF _Toc475242153 \h 78.0 Correlation between JDN and JCTN	 PAGEREF _Toc475242154 \h 78.1 Correlation message in RQL	 PAGEREF _Toc475242155 \h 89.0 Simulation Interfaces	 PAGEREF _Toc475242156 \h 810.0 XML access to Rosetta	 PAGEREF _Toc475242157 \h 911.0 WAP and Bluetooth, Expanding Access	 PAGEREF _Toc475242158 \h 912.0 Certification Testing	 PAGEREF _Toc475242159 \h 913.0 Conclusion	 PAGEREF _Toc475242160 \h 914.0 References	 PAGEREF _Toc475242161 \h 10Author Biography	 PAGEREF _Toc475242162 \h 10 1.0 IntroductionThe following comments are from a recent article in Aviation Week and Space Technology on the Kosovo lessons learned:‘We collect a lot of signals from the battlefield,’  a senior Pentagon official said. ‘The problem is putting all that information together to determine the precise geographic location of a target emitter.’  ‘We already have a true capability for finding the most important targets at any given moment,’ said a mid level Air Force officer. …The next piece is to field a data link and architecture to move a piece of data to the right shooter  [1].’The communication issues faced in Kosovo are not new.  Although many attempts have been made, upgrades to legacy systems have failed to solve the information distribution problem.  More significantly, passing uncorrelated track data among the battlespace participants exacerbates the problem.   In the Balkans and other theatres there are at least three sources of realtime data, a Link-16 network, a Link-11 network, and a network of Electronic Warfare (EW) data.  Additional realtime track data is available from a variety of ground based systems including EPLRS, SINCGARS SIP, and OmniTraks. Figure 1 is an overview of how Rosetta has been deployed to integrate the legacy datalinks into a TCP/IP infrastructure.Figure 1. Rosetta Technology in the Balkans Theatre.To resolve the battlespace realtime information distribution problem several primary issues need to be addressed:--A common interface among legacy and new datalinks--Integrating the legacy datalinks into a modern   commercial communications architecture --Correlating the track data among diverse sensors.With the advent of sensor datalinks, (e.g. CEC and the JCTN) these issues will become acute.  New sensors are bringing more information to the battlespace, but a significant amount of time critical information resides in the legacy datalinks and Combat ID systems.  Rosetta technology integrates all these data sources and acts as a catalyst for track correlation.The Rosetta architecture is a realtime system that can implement information exchange requirements among navigation, sensor, and datalink inputs on a Pentium class computer.  The technology enables realtime abstraction of data from various message standards and wireless network protocols.  Non-homogeneous data are normalized and made available for translation.Information Exchange Requirements (IER) are defined using the Realtime structured Query Language (RQL) and the Forwarding Rules Object Gateway (FROG) manages the exchange.  As a platform for correlation Rosetta realtime data engine creates a common WGS-84 grid for the tracks received from various networks.  Correlation systems pull data from the engine and “Insert” correlated track data back into Rosetta.  Rosetta then performs the complex communications processing required to drop or correlate the tracks on the appropriate networks.This paper will address the architecture required to develop a dynamic tactical datalink gateway and a platform for correlation.  A discussion of how Rosetta implements the Information Exchange Requirements in realtime is also included.  To highlight the warfighter’s perspective, the original concept of operations is reviewed.  The Rosetta architecture is designed to optimize the data exchange and simplify the correlation of data among legacy links.   Optimization has been performed at the protocol, message, and IER level.2.0 CONOPSThe concepts of operation (CONOPS) behind the Rosetta gateway was developed at the US Atlantic Command.  Initially the study concentrated on the two primary datalink message standards, JVMF and Link-16’s TADIL-J.  The study defined the Information Exchange Requirements required for a Close Air Support mission that included both JVMF ground forces and Link-16 (TADIL-J) equipped strike aircraft.  As depicted in Figure 2, the final version of the CONOPS included many interfaces not initially identified. Significant information was required from other datalinks to implement the CAS mission including several Combat ID systems, Intel datalinks, and mission planning data from non-realtime systems.  The combination of these systems significantly improved the effectiveness of the CAS mission, but only if the data could be correlated.Figure 2. Realtime data sources in the battlespace.The CONOPS also highlights the need for a dynamic gateway that can adjust to the warfighter’s requirements as a mission evolves.  All these sources of data must be normalized to create the Single Integrated Air Picture (SIAP), the Holy Grail of the warfighter.3.0 Overview of JCTNThe Joint Composite Tracking Network is designed to share sensor data at a rate that allows guiding precision weapons.  Using the cooperative engagement capability (CEC) as a reference, sensor measurement data is exchanged among platforms once every two seconds or in the case of the CEC Patriot interface once every four seconds [2].  The platforms exchange measurement data and then utilize a large Kalman filter to create tracks from the common data.  The advantage is that all platforms have the same data, perform the same computation, and can produce an identical track picture as depicted in Figure 3.Figure 3. JCTN Architecture.The system requires large processors to compute the Kalman filter results and a highspeed wireless datalink, the Data Distribution System (DDS), to exchange measurement data.  Although one of the radars in the system must initially declare a “track”, once a track is declared the other radars in the system can contribute to the combined pool of measurement data.3.1 JCTN Data CorrelationThe advantage of the JCTN system is that correlation errors among the Radars are virtually eliminated.  Although an extremely accurate system for pointing weapons, the JCTN does not include extensive ID information [2].  IFF data is combined with the radar measurement data but the robust ID information that currently exists on the JDN is not available on the JCTN.To merge ID information from the JDN into the JCTN requires track correlation.  Since the JDN and the JCTN operate at different update rates, correlation of two objects in space requires at least a time stamp, a common position reference, and often track history.  Since both the JDN and JCTN use IFF codes these can also help correlate a track.  To date, no common platform exists for correlation engines to access data from the JDN and JCTN.  The JDN/JCTN without a common interface is like the WWW without HTML. 4.0 Overview of JDNThe Joint Data Network (JDN) will be an extension of the existing Link-16 architecture.  It is designed to manage the tracks from a wide variety of sensors (i.e. EW, IRST, Radar, etc.), perform track association, and perform command and control operations as shown in Figure 4.  The existing Link-16 system includes several Command and Control circuits including Mission Management, Fighter-to-Fighter Target Sorting, and Weapons Coordination.  Tracks are generated on Electronic Warfare, Surveillance, and other circuits.  It is essentially a sensor to shooter network that operates nominally at 54Kbits/sec per user and 1Mbit/sec for the entire system.  Update rates for command and control are less than two seconds and sensor track rates vary from circuit to circuit but are nominally less than 12 seconds.  The message standard is designated TADIL-J.  It utilizes a combination of waveform and encoding techniques that make it virtually unjammable.  However, it also includes a variety of features that render the waveform hard to detect [3].Figure 4. Joint Data Network.5.0 Correlation among JDN Data SourcesAlthough Link-16 will be used as the backbone of the JDN, it is not the most common datalink.  As depicted in Figure 5, the JDN will include position reports and command and control information from a variety of datalinks including EPLRS, TIBS, IDM, FAAD, and the various Intelligence datalinks.  The protocols used to access these wireless radios and the message standards transmitted are diverse.  The waveforms of these datalinks have been optimized for a specific environment and are a viable aspect of the JDN.  For instance HF Link-11 allows communications beyond Line-of-Sight (LOS) without a relay.Many of these datalinks have their own grid reference system in addition to their own protocols. Correlating the data among these diverse networks is a significant task.  For instance Link-11 uses a flat earth model with ownship position reported as a delta X, Y, Z from a Data Link Reference Point (DLRP).  Tracks are then reported from each units “System Coordinate Center” (SCC).  Obviously these tracks require translation to a common grid system before any correlation engine can manipulate them.  Further, the update rate of Link-11 varies from cycle to cycle requiring accurate timestamps for correlation engines.Figure 5. Networks requiring Correlation.Commercial systems, such as Qualcomm’s OmniTraks use GPS as their source for navigation and thus implement the WGS-84 standard.  EPLRS Position Location Identification reports (PLIs) are generated on their own grid and IDM relies on the accuracy of the host navigation system.  Link-16 also has its own navigation grid system, its very accurate (less than 50 feet) and operates independently of GPS.Unfortunately, all these systems require at least a translation and a rotation of their grid system into a common reference.  Nominally, that has become WGS-84 and GPS position.  The Rosetta engine has been adapted to perform the navigation transformation required.  This effort enormously simplifies the role of a correlation engine.  Independent navigation grids must be overcome to correlate tracks. The other issue addressed by Rosetta is a common interface to all legacy datalinks.  Previously attempts have been made at hard coding datalink messages and Information Exchange Requirements (IER) to create a gateway among multiple datalinks. This method requires creating a gateway for NX combinations of datalinks.  It has proven to be financially and technically impossible.The Rosetta architecture eliminates static point-to-point gateways by using a realtime information processor at the core of its design. Although each radio has its own access methodology, message format, and data rate, the high speed information processing capability of Rosetta enables managing the information flow without writing software for each datalink.6.0 Rosetta ArchitectureThe objective of the Rosetta engine is to enable sharing critical data among datalinks in a normalized format.  All tracks data is time stamped upon receipt and corrected to WGS-84 Latitude and Longitude to ensure a common platform for correlation.  Rosetta was designed to address several key issues:--A common interface among legacy and new datalinks--Integrating the legacy datalinks into a modern   commercial communications architecture --Correlating the track data among diverse sensors.The Rosetta architecture is based on an object oriented highspeed information processor, the Realtime SQL Engine (RQL) and the Forwarding Rules Object Gateway (FROG).  Legacy datalinks are treated as realtime information sources their data is indexed and stored in memory [4]. The system includes a text parsing engine which eliminates the need to write C code to implement a datalink message.  All of the Link-16, Link-11, JVMF, GPS, and sensor messages are stored in text files that have been parsed from MIL-STD Documentation [5].  The tracks and commands from each of the datalinks can be managed by IERs developed in the SQL language.  To retrieve and insert sensor data Rosetta clients use commercial TCP/IP, DCOM or Sockets, and SQL calls.  Figure 6. Rosetta Architecture.6.1 Platform FeaturesIn the Rosetta architecture, a correlation engine is a client to the RQL engine.  Correlation engines requests realtime information on tracks from a variety of datalinks and they return the probability that any track pairs should be correlated.  To ensure a highly modular design, Rosetta must perform all the datalink hosting functions required to insulate the correlation engine from the complexities of each wireless datalink.The hosting function varies from datalink to datalink but suffice it to say that each datalink has it own low level access protocol (i.e. MIL-STD-1553 or NTDS Type-A), its own message format, and its own access methodology.  For Link-16 there is an entire family of track management messages (J7.x) for creating correlated tracks (and de-correlating), reporting ID differences, and requesting updates on specific tracks.  Rosetta ensures these functions happen transparently when a correlation is indicated.Other significant features of the hosting engine include track number management and filter management.  Track numbers in most datalinks are assigned via an Optask Link Message or Air Tasking Order.  As tracks are created and dropped each transmitting unit manages their own track block.  Filter management is another feature of the Rosetta system, often tracks inside or outside of a geographic area are not transmitted in an effort to reduce track load or eliminate sensor overlap.The Rosetta datalink hosting functions also performs Reporting Responsibility (R2) processing for the clients attached to the system.  Based on better track quality, a unit can take over the transmission of a specific track. In general a “correlated” track created from multiple sensors will have better track quality and more ID information.For correlation purposes tracks are time stamped when received at the hardware interface.  The enables the correlation engine to perform extrapolation if necessary.  As stated earlier several navigation functions are also performed by the Rosetta Hosting function.  Foremost, the Rosetta system accepts navigation data from a variety of Inertial Navigation Systems (INS) and/or GPS to perform ownship position reporting.  For correlation purposes flat earth grid systems are converted to WGS-84. 6.2 Forwarding Rules Object GatewayThe Forwarding Rules Object Gateway enables exchanging information among a variety of datalinks via Information Exchange Requirements.  The Rules are written in a variant of the Structured Query Language (SQL) called “RQL”.  The RQL statements are stored on the hard drive in a text file and are read into the system at initialization. Figure 7 is a sample RQL statement showing the English language format of the IERs.  The objective is to take the IERs out of the hands of C programmers and place them in the hands of the warfighter.Figure 7. An IER in SQL Syntax.Significant feature of the FROG include units tracking and the “where clause”.  In Figure 7 “speed” from the K04.99 message is set equal to “speed” from the J3.2 message.  Units tracking automatically converts Kilometers per hour in the K04.99 message to nautical miles per hour in the J3.2.  The “where” clause in the figure ensures this particular IER is only implemented when the JVMF track is an air track.  The where clause can specify a mission phase, combination of aircraft, or geographic area in which to implement a specific forwarding rule.  7.0 Access to RosettaClients to the Rosetta engine have several methods of accessing the realtime data stream.  If the client is running on a COM compliant operating system the Rosetta TrackServer looks like any other software object.  COM enables software objects to exchange binary data and publishes their interface properties dynamically.  When COM objects interface across a network, Distributed COM (DCOM) is utilized to marshal the resources [6].Figure 8. COM and Sockets InterfacesRQL statements can also be issued to Rosetta via “Sockets” as well as COM/DCOM.  The Sockets server uses a wrapper to convert the Rosetta COM objects into the Sockets interface.  This interface has been demonstrated across TCP/IP datalinks and in conjunction with an application running on a Realtime Operating System.  The flexibility enables Rosetta to be either collocated with a Sensor suite computer or connected via Ethernet, ATM, FDDI, etc.7.1 Implementation of the TCP/IP InterfaceAn example of the realtime TCP/IP interface to Rosetta is deployed at the NATO Combined Air Operations Center (CAOC). The CAOC is tied into the Link-16 network over Kosovo using Rosetta technology.  As a result of line-of-sight limitations, the physical JTIDS terminal is located at the Italian Army base of JACO-Tenente.  Its 4000 foot high location enables constant connectivity to the Link-16 network over Kosovo.  Rosetta technology is used to make Link-16 and other realtime datalink data available to the CAOC.  The connection from the Rosetta system at JACO to the CAOC is a CISCO 2500 router, KG-84 crypto devices and an existing 128KB/s phone line between the sites.  Currently they are receiving the entire Link-16 picture with less than a 200ms delay.  This allows them to transmit updates to the Air Tasking Order and other critical “Free Text” on Link-16.  As additional commercial bandwidth becomes available (DSL, T1, etc.), the CAOC can continue to upgrade their capabilities at extremely low maintenance costs.8.0 Correlation between JDN and JCTNBuilding the Single Integrated Air Picture requires merging ID data from the JDN with precise target quality tracks from the JCTN.  Correlating air tracks poses different issues than correlating ground tracks.  The speed and maneuverability of aircraft creates a situation where tracks tend to correlate and then decorrelate.  Often two fighters are hard to discern from a large aircraft.  To further complicate the process, Link-16 Surveillance update rate is nominally 12 seconds and CEC uses a 2 second update rate.  The varying reporting cycles will require extrapolation of highspeed objects.  Each of these systems also use unique navigation reference frames.  Link-16 terminals create their own relative navigation solution without the aid of GPS, and CEC systems report tracks in X,Y,Z and a covariance matrix.Figure 9. Rosetta JDN to JCTN Correlation.To simplify the correlation process the Rosetta engine transforms JCTN X,Y,Z position data into WGS-84 Latitude, Longitude, and Altitude.  The Rosetta time stamps are also critical to the correlation process.  Rosetta is always directly attached to the JTIDS terminal via MIL-STD-1553 and time of arrival in the system is based on the JTIDS clock. These timestamps are converted to GMT by the Rosetta engine.  The time stamps on the CEC tracks are based on when the track message was created, but is essentially sensor reporting time.8.1 Correlation message in RQLTo maintain the architectural framework of an SQL interface, an “Insert” statement is used by the correlation engine to inform Rosetta of track correlation.  Figure 10 is a sample of the correlation message.Figure 10. Rosetta RQL Correlation Message.This message defines the interface between multiple datalinks and any correlation engine.  The correlation engine reports the probability of track association, and Rosetta performs the datalink management functions.  Although the message is quite brief, the information required for track management is readily available.  For instance, the “LnkRefTrkCorr” field identifies the source of the data.  If the consumed track is preceded with a “J” then Rosetta will transmit a J7.x correlate message on the Link-16 network.The “LnkRefTrkRetained” highlights an important feature of the Rosetta engine, the concept of a Master Track.  Objects in the RQL engine are can be indexed by almost any field, however in order to generate a unique ID, they are generally indexed by the source of the data, and the datalink reference number.   It is also possible to create a “Master” or “Retained” track in the RQL engine.  These virtual tracks are then “Updated” with data from a variety of sources.  In the example in Figure 10, track Q.3067 may include data the other correlated tracks do not, for instance “Activity”.  This data can then be appended to the retained track via an update statement.The objective was to develop an extremely simple to implement, two way interface, between Rosetta and any correlation engine.  To retrieve the data for correlation, a “get all tracks” is issued, to respond the correlation message “7F7F” is sent to Rosetta.  Although simple looking, several complex operations are performed to ensure the integrity of the data and the interface.  The TrackServer manages the position and units associated with all the data in each track.  The correlation engine sees a single track message format regardless of the datalink it was transmitted on.  A host of error checking is also built into the TrackServer, for instance you cannot correlate to a track no longer maintained on the datalinks.9.0 Simulation InterfacesIntegrating simulation systems and correlation engines poses some unique issues.  Simple correlation engines use projected track position to compare two or more tracks.  More complex engines review the historical path of objects to determine the probability that two objects from different sources are actually the same track.  All of these methods rely on accurate time stamps to determine track position.  Unfortunately, in the simulation environment often the timestamps are unrealistic. Tracks are reported much faster via TCP/IP than they could have ever been produced via a wireless datalink.To compound the issue, often  simulated tracks are much more accurate than actual realtime track data.  The pointing error from a Radar on a moving platform (AWACS, AEGIS Destroyer, E-2C) is significant and is non-linear with distance to the object.  Track uncertainty of 1 square mile is common. The objective of correlation engines is to analyze multiple disparate datastreams and determine what objects represent one platform.  To test a correlation engine using multiple simulated datastreams requires generating data that is realistically inaccurate and time stamped as if from a real sensor.  Mixing live entities with simulated entities becomes extremely difficult.  Often the results are everything correlates or nothing correlates.  The Rosetta RQL interface includes a unique feature extremely well suited to testing and development of correlation engines.  The Rosetta playback function enables accurate time stamped playback of formerly live data.  This data can include multiple datastreams (Link-11, Link-16, JVMF, etc.) and will include the anomalies of the actual sensors.  Virtually the same RQL call used to attach to live sensors is used to attach to stored sensor data.  From the perspective of the correlation engine live data and stored data look identical.  This function has enormously improved the ability to compare and contrast correlation algorithms via simulation.10.0 XML access to RosettaIn the quest to constantly simplify the interface to realtime data, ANZUS has developed the capability to use XML as the data description language or schema.  Currently a “get detail” command to the Rosetta engine returns an ASCII string of the binary datalink data.  This data must then be formatted by the client for display purposes.  XML effectively eliminates the requirement to reformat the ASCII data.  By establishing and XML DTD the client and server eliminate the need to negotiate the string values.The next step in this program is to use XML to define the RQL statement.  As XML evolves is will eventually be capable of performing the SQL function of requesting data in specific units (i.e. speed in nm./sec).  The primary drawback at this stage is the access time required.  The current Rosetta interface, SQL calls made via COM or Sockets, is performed in under a millisecond in most cases and XML is a web based protocol that may take hundreds of milliseconds to execute.11.0 WAP and Bluetooth, Expanding AccessBased on commercial architecture, Windows NT, Rosetta can rapidly take advantage of the enormous investment in commercial infrastructure.  Specifically, Rosetta will be compliant with both the Wireless Application Protocol (WAP) and Bluetooth.  These commercial wireless standards are extremely efficient at carrying data.  As chipsets and software are built to support them they will become the standard the military must adhere to.  Rosetta enables rapidly integrating new commercial standards with legacy wireless datalinks. RQL statements are abstracted at a higher level and thus can be executed over any commercial interface including WAP.Current Bluetooth systems include 721 kb/s uplink and 57.6 kb/s downlink or 432.6 kb/s symmetric link.  The transceiver fits on a chip in a cellular phone [7].  By approving the Bluetooth Link Management Protocol as a standard interface, the military can begin to take advantage of extremely inexpensive wireless datalinks.  More significantly, the Bluetooth specifications standardize the bridge from fixed TCP/IP systems to mobile wireless systems.At a higher abstraction level, the Wireless Application Protocol (WAP) [8] standard will bring email and other web related services to wireless systems.  WAP is supported by all the major software and cell phone vendors and is the standard for delivering content to handheld devices.  Microbrowsers are being developed by Microsoft and other vendors to support web access.  Other vendors have announced XML database access via WAP.  One of the most significant features of these new protocols is the concept of a client publishing their capabilities.  For instance, if the handheld does not have a graphics screen it will announce itself as text only.  This technology can be used quite effectively with Rosetta, for instance, if the device only understands TADIL-J, all exchanges will be made in the TADIL-J message format.12.0 Certification TestingAlthough developed in just 9 months the Rosetta  Link-16 engine has been through several JITC test events.  The data forwarding function was certified as part of the Link-16 to VMF ACTD.  Rosetta delivered information integrity and proven robustness translating over 25 different message types simultaneously, it ran daily for over 12 hours during certification testing [9]  The performance of the RQL Engine has exceeded expectations forwarding data at a rate ten times faster than the requirement [10].The JMMTIDS system underwent Joint Interoperability Test Center (JITC) certification in September 1999.  This test session certified the Link-16 processing capability of Rosetta.  Rosetta has also undergone Data Forwarding testing at the Aegis test center in Dahlgren Virginia.  These exhaustive test programs have clearly shown that Rosetta architecture is robust, flexible, adaptable,  and extremely inexpensive to maintain.13.0 ConclusionRosetta is an object oriented realtime tactical information management system.  Sensor data, navigation Data, and datalink data from a wide variety of datastreams is managed as data objects.  This is a radical departure from existing military platforms.  By design, the success of Rosetta has been integrating this modern architecture with legacy platforms.  This architecture will enable the Single Integrating Air Picture.  No other technique enables correcting the navigation transformation, timing , and data disparity issues simultaneously.The payoff is that commercial tools can be used to access legacy data and legacy platforms. The extreme speed of the engine enables managing disparate sensor data as if it were a homogenous database.  Rosetta acts as the bridge from the commercial platforms correlation engines are built on, to the military datalinks and sensors that supply data.The advantages are diverse, but include:-- Single SQL interface to all sensors / datalinks -- Management of the datalink picture-- SQL language for receiving / transmitting data-- Warfighter control of IERs-- Ability to rapidly add new sensors/datalinks-- Extremely small footprint-- Adaptable to legacy platformsIn the Balkans deployment Rosetta proved to be robust and adaptable to the warfighter’s requirements as they arose.  Rosetta is an enabling technology, it places control of the information in the battlespace back in the hands of the warfighter.  As a platform for correlation, Rosetta enables simulation, certification, and deployment of new algorithms in days and weeks, not years and decades.14.0 References[1] Fulghum, D. A. & Wall, R., “Data Link, EW problems pinpointed by Pentagon”, Aviation Week & Space Technology, September 6, 1999, page 87.[2] E-Systems (1998). CEC Patriot Interface Design Document No. 58-02862-001. Revision A., 15 September, 1998.[3] Yanni, P.: "Modeling Comm Planning and Advanced Datalinks in the DIS/HLA Environment", Spring  1997 Simulation Interoperability Workshop. [4] Yanni, P.: "A VMF / Link-16 / Simulation Gateway;      Addressing the complexity of datalink   interoperability.", Spring  1999 Simulation Interoperability Workshop[5] DOD (1999).  Interface Standard TADIL-J MIL STD-6016A. JEBCA Reston VA, 30 April 1999.[6] Grimes, G. O. (1997). DCOM Programming. Canada, WROX Press.[7] Bluetooth Consortium (1999). Specification of the Bluetooth System v1.0B.  HYPERLINK http://WWW.Bluetooth.com WWW.Bluetooth.com December 1, 1999.[8] WAP Forum (1999). Wireless Application Protocol Technical Specification 1.2.  HYPERLINK http://WWW.wapforum.org WWW.wapforum.org. November 1999.[9] Defense Information Systems Agency Joint Interoperability Test Command.  Link-16 / EPLRS ASCIET 99 Demonstration Results for Rosetta Gateway. Fort Huachuca, AZ August 1999.[10] Defense Information Systems Agency Joint Interoperability Test Command.  Link-16 to VMF ACTD Demonstration Results for Rosetta Gateway. Fort Huachuca, AZ August 1999.Author BiographyPHILIP YANNI holds a BSE from the University of Pennsylvania.  He has 15 years of experience in commercial and military avionics and simulation.  He has been Principal Investigator for HLA/DIS programs.  In his role as a communications engineer, he specializes in developing hardware to bring Internet protocols onboard commercial and military aircraft. He is chief engineer for Rosetta technology and the project manager for the JTIDS Moving Map Tactical Information Display System (JMMTIDS).  He is currently the Program Manager for the JCTN-JDN Rosetta Gateway.  JMMTIDS won the Microsoft Software Development of the year award at Comdex 1998 and Rosetta is the 1999 winner.