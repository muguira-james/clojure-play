KAMA: A Tool for Developing Conceptual Models For C4ISR SimulationsUtkan EryılmazODTU-TSK MODSIMMER06531, ODTU, Ankara, Turkey+90-312-210-7393utkan@metu.edu.trN.Alpay KaragözBilgi Grubu Ltd.METU Technopolis Gumus Blocks,No:3, 06531, Ankara, Turkey+90-312-210-1791alpay@bg.com.trKeywords:Conceptual Modeling, Mission Space Conceptual Model, Tool SupportABSTRACT: In this paper we will introduce a conceptual model development tool that supports a previously developed conceptual modeling process and method. Conceptual modeling is regarded as an indispensible product that includes both domain elements (related requirements) and simulation elements (related to design) especially for distributed and complex simulations.  The need for conceptual modeling is obvious but detailed and comprehensive definitions for conceptual models are lacking. Lacking of established methods can be attributed to two reasons. Firstly, due to the complexity and heterogeneity of the domain of interest and simulation methods, concepts and relations cannot be captured easily.  Secondly, even if domain elements are defined precisely and rigorously, the tool support for developing conceptual models is still lacking. This is also crucial in the fact most of the conceptual models are large containing large number of elements and tool support is essential for developing and updating these models. There is limited number of tools available for conceptual modeling even for established approaches. Moreover, the necessity of tool support for gaining acceptance is valid also for software engineering approaches. In this paper based on the previously defined characteristics of a conceptual model in the literature, we will list the properties that are indispensible for conceptual modeling and the importance of tool support for satisfaction of these properties. Then we will present our tool for conceptual modeling that supports both process and notation provided by the KAMA approach.1. IntroductionConceptual model development for simulations has become subject many papers in the field. Studies underline the importance of conceptual model in simulation development process, functions and desirable properties of conceptual models and research requirements. On the other hand there are very few reported experiences of conceptual model development and application of approaches. Establishment of a conceptual modeling approach as an industrial practice requires intense practical use, evaluation, consolidation and improvement of various approaches. In this paper, first we will highlight the need for conceptual modeling and supporting tools for exploiting the benefits cited in the literature. The tool is critical in the sense that a tool can significantly contribute and streamline the conceptual modeling process. In the second section we will briefly discuss relevant approaches of conceptual modeling, desirable properties for conceptual models and importance of tool support. In the third section a conceptual modeling tool is described that is part of an approach comprising also a process and a method. Then in the following section, we evaluate the tool by a case study of industrial size simulation project. Finally we conclude with evaluation of the current study and providing suggestions for future work.2. Conceptual ModelingConceptual modeling term is used by database community to describe the logical design of a database. In the logical design the relations between real world entities and their relations are defined and a visual diagram showing these relations are provided (entity relationship or extended entity relationship diagram). Methodologies exist for mapping of ER diagrams to database designs and optimizing the design in the database domain. Similarly in simulation domain the mission space conceptual model describes what is to be modeled. In the following subsection, an overview of past literature on conceptual modeling for simulations is provided in order to better understand concept. In the second subsection desirable properties of conceptual models are listed based on past studies.  In the last subsection previously defined approaches for conceptual modeling are discussed in terms of tool support.2.1 Literature SurveyBalci[ REF _Ref228644013 \r \h 1] states that the early phases of a simulation study are not just visited once, but that they are continually returned to through a series of iterations in the life-cycle of a project.Nance[ REF _Ref197848558 \r \h 2] separates the ideas of conceptual model and communicative model. The conceptual model exists in the mind of a modeler; the communicative model is an explicit representation of the conceptual model.Pace[ REF _Ref188768794 \r \h 11] is one of the most influential authors in this debate and defines conceptual modeling as “translating modeling requirements into a detailed design framework from which the software that will make up the simulation can be built”. Pace states that the conceptual model is largely independent of software design and implementation decisions. We can deduce from his view that conceptual models serve as a bridge between requirements analysis and design phases. This bridge should also include definitions for translations which will facilitate transformations between phases. He also defines the ingredients of a conceptual model as assumptions, algorithms, characteristics, relationships and data.Sargent[ REF _Ref188775094 \r \h 13] focuses on validation of computerized models and simulations using conceptual models.  According to him, conceptual models should be structured enough to provide means for validation. FEDEP (Federation Development and Execution Process) [ REF _Ref188766776 \r \h 7] describes the conceptual model as “an implementation-independent representation that serves as a vehicle for transforming objectives into functional and behavioral capabilities”. This statement includes many essential aspects of conceptual models that can be listed as: independency from specific platform requirements, being well-structured in order to provide effective communication, including transformation definitions between objectives and capabilities and providing traceability.DMSO (Defense Modeling and Simulation Office) one of the pioneering organizations in modeling and simulation; defines a conceptual model as a representation of the combined view of user’s and developer’s that is used to describe the statement of the content. Any assumptions, limitations, and algorithms should also be included in this representation. DMSO extends this definition and introduces the term CMMS (Conceptual Models of the Mission Space) [ REF _Ref228644175 \r \h 8] which can be defined as “simulation-implementation-independent functional descriptions of the real world processes, entities, and environment associated with a particular set of missions”Similarly, Johnson[ REF _Ref228644175 \r \h 8] states that conceptual models should provide the necessary information and methods for constructing modeling and simulation representations and should capture the features of the problem space and the target domain. He also suggests that the conceptual models should represent a simulation-neutral view of the real-world, acting as a bridging function between the domain expert (war fighter in the CMMS context) and the simulation developer. Although many of the researchers acknowledge the importance of conceptual modeling in the simulation development lifecycle, there are very few studies and publications on the conceptual model development methods and notations. Most of the time the information required for developing a mission space conceptual model is written in free text by the subject matter experts. Pace describes four approaches for documenting the conceptual models; which are ad hoc method, design accommodation, CMMS paradigm, and scientific paper approach. All of these approaches utilize free text notation for representing the conceptual models. In modeling and simulation it serves not only for design but also to describe the real world elements. By this way conceptual modeling activity is a milieu between analysis and design stages of simulation development process. The complexity of the domain, the heterogeneity of simulations, and the approaches make it harder to provide an universal approach for conceptual modeling. In the remaining of this section we will discuss the desirable properties of a conceptual model based on the previous studies primarily work of Pace[ REF _Ref188768794 \r \h 11].2.2 Desirable PropertiesPace[ REF _Ref188768794 \r \h 11] have identified quality attributes for conceptual models as completeness, consistency, coherence and correctness. We have formulated following more practical desirable properties for conceptual models based on conceptual modeling literature. Satisfaction of these properties requires both use of a rigorous conceptual modeling method and a tool supporting the method. Property 1: A simplified representation of the real system shall be described by the conceptual model.By definition the main purpose of the conceptual model is to provide the details of the real system and related elements. Descriptions of the conceptual model mention abstracted real system for the intended purpose. The information about the real system is called the simulation context and can also be used as referent during verification of simulation results. As this information is gathered from a number of different sources, it can be in various formats (a document, image, video etc.).  As we will later discuss in property 2 the assumptions and limitations on real system and its environment are crucial for determining modeling requirements. A tool will enable user to develop and rapidly modify the conceptual model and to link the necessary information to relevant entities, missions, tasks etc. Also the user shall have capability to compose and decompose the information contained in the conceptual model without wasting effort.  Property 2: A specification of the problem including limitations and assumptions shall be included.To define what is not to be modeled is as important as to define what is to be modeled. Usually during the early phases of the modeling process it is very hard to define the assumptions and limitations. There may be a tendency to include less important details and increasing the fidelity. More information can be present for an element even if plays a minor effect in the simulation and fidelity requirements are low. Also for some of the conceptual model elements about which enough information is not available, it is necessary to provide assumptions and limitations for providing better guidance for development. The assumptions and limitations are invaluable for the success of the project.Property 3: The conceptual model shall be understood both by the users and the developers.The conceptual model is the first comprehensive product the user and developers agree on in a simulation development project. Contents resemble both requirements and design elements and relations between these elements. The conceptual model shall provide various views (abstract views for users and more detailed views for developers) and these views shall be related and coherent. The conceptual model shall also be easily navigable enabling rapid visual inspection for coherency.  Property 4: The conceptual model representation shall focus on more on the problem than the solution.As described by first property the primary aim is to describe the simplified version of the real system so the main focus is on the problem. Pace also lists implementation independence as an attribute of a good conceptual model. The conceptual model shall provide information more on the problem domain then the solution. The information about entities, attributes, missions, tasks etc. and assumptions and limitations are primary concern of conceptual modeling process. Property 5: The conceptual model shall be verifiable.The conceptual model aims to describe both the problem context and simulation elements. The conceptual model also forms the baseline product to verify the simulation model.The formal approaches are best for verification but past trials for formal conceptual modeling have not provided an established methodology. Two problems exist for formulating the conceptual model in a formal way. One of them is the need for effort for formulation and second is application of verification methods for these large models.Semiformal approaches such as UML can provide heterogeneous set of methods (object oriented modeling, activity, state machines, etc.)  together, will enable checking of syntax and limited semantic rules on the model however use of formal verification methods still require effort. A paper based conceptual model where most of the information is expressed in natural language is the most hard to verify.Property 6: The conceptual model shall support the validation of the simulation.Although the conceptual model is very limited in describing the solution and details of the simulation, limitations, assumptions, fidelity and referent requirements are provided. Also the conceptual model is a product that is understood both by the developer and the developers so the basis for validation of the simulation model. For validation of the conceptual model by SMEs using inspections, it shall be well structured and easily navigable. The inspector shall have capabilities to check for rules and finding patterns. Although checklists and structured inspection approaches can support the inspector, tool support can increase both effectiveness and efficiency of this process. Property 7: The conceptual model shall be modifiable.It is very hard to provide an implementation independent representation for a conceptual model as underlined in the literature [ REF _Ref188768794 \r \h 11]. So a representation that will not restrict the implementation will be adequate. Application of a method can guarantee coherency but modifiability more depends on systematic decomposition and tool support. Tool support is crucial for modifiability of a conceptual model. A configuration control methodology both for the entire model and the parts of the model is also a fundamental requirement for supporting iterative conceptual model development process and modifiability.2.3 Current Approaches for Conceptual ModelingA complete framework solution for developing conceptual models of the mission space should include a process definition (or a method) for guiding the conceptual modelers and the domain experts, a notation for representing the conceptual models and a tool for supporting the process and the notation. BOM does not include a detailed process definition for developing conceptual models and DCMF focuses on the knowledge acquisition activities of the conceptual modeling phase. Although Robinson’s paper [ REF _Ref228645903 \r \h 12] is entitled as a framework, it does not include a notation specification and tool support for developing conceptual models. The CMMS approach was promising when the objectives are considered, however the project faded away without being able to provide a common syntax and semantics for conceptual modeling. FEDEP includes a high-level overview of the conceptual analysis phase by providing the boundaries of the phase, required inputs and the produced outputs; however detailed guidance for developing conceptual models is lacking.Finally we conclude that conceptual modeling approaches do not provide tools that specifically support defined methods. Although there is definite need for tools to enable certain desired properties of conceptual models, there is limited tool support for the methods and process definitions.On the other hand UML tool support is very broad. Although UML evolves rapidly tools supporting UML tool development both by commercial vendors and open source projects also supports this evolution. 3. The KAMA ToolKAMA tool is one of the components of the KAMA approach [ REF _Ref228646230 \r \h 17], which supports both the conceptual modeling notation and process definition as shown in Figure 1. KAMA process definition is formed by definition of major steps in conceptual modeling. KAMA notation [ REF _Ref231532641 \r \h 18] is derived from Meta Object Facility (MOF) as a metamodel. Three components provide a comprehensive solution for the conceptual modeling for modeling and simulation systems. The high level functional requirements and the architecture is explained in the next two sections.Figure 1. KAMA Approach3.1 Functional Requirements This section presents the high level functional requirements of the tool that supports the KAMA notation and process.1)	Develop and manage conceptual modelsThe user can create, store, delete or update conceptual models. A conceptual model consists of conceptual model elements, diagrams and information related with these. User can operate on the conceptual model as if it is a composite entity, can save it as a new version. Security level can be assigned to a conceptual model.2)	Create and manage conceptual model elementsThe user can create, store, delete or update conceptual model elements. All of the conceptual model elements are logically grouped and represented as an item in the model tree. Once defined, a conceptual model element can be used in many diagrams by dragging and dropping onto the diagram. The tool checks whether a conceptual model element can be used in a diagram by referring to the predefined rules in the metamodel. A conceptual model element includes detailed information in its properties tab. This information consists of general information, information resources, properties and relations sections. Properties section is customized for different types of conceptual model elements. Security level can be assigned to each conceptual model element.3)	Associate external files with conceptual model elementsThe user can associate any file type with a conceptual model element. The tool keeps this association and stores the associated file in its local database. When the conceptual model is exported, these files are also exported together with conceptual model definitions. This feature is especially necessary for representing information which cannot be easily represented as diagrams such as geographic references. The tool will not be responsible for editing the associated files, but only store the link and the file itself.4)	Create and manage conceptual model diagramsDiagrams are the means used to represent the model from different viewpoints. The user can create, store, delete and update diagrams. The tool presents a customized toolbar for each type of diagram. The tool keeps the rules related with each type of diagram. These rules are then verified by the tool to assist the user while creating diagrams. The user can drag and drop model elements from the model tree onto the diagram pane, or the user may also select to create empty diagram elements using the toolbar. The user can manage diagrams using drag and drop facility. 5)	Provide a search facilityReusing existing conceptual models and elements was one of the objectives of the research project; therefore the tool shall provide a powerful search mechanism. The user can perform search within and among conceptual models stored either locally or on the remote central repository. The user can preview the found conceptual models, conceptual model elements or diagrams and if the user decides to use any of them, s/he can download it and add it to the local database. If the element is located in the local database but in another conceptual model, the element is copied to the target conceptual model. The user can perform a complex search by filtering the result set.6)	Provide version management for conceptual models and conceptual model elementsThe tool shall store the conceptual models and conceptual model elements with version information so that the user can access and use any version s/he needs. The user can restore a version, delete it or delete all versions of a conceptual model element. The versioning mechanism shall also handle the versions of the conceptual model elements residing on the central repository.7)	Provide controlled access to the conceptual modelsThe user can assign security levels to the conceptual models. The system administrator can assign access rights to the users. Any user with an access right lower than a conceptual model cannot read or update that conceptual model. These access rights and security levels can be updated by the system administrator.8)	User management (add/remove/change access rights)The user can manage local users, and the system administrator can manage both the local and remote users. They can add or remove users and change access rights.9)	Provide a reporting mechanismThe developed conceptual models will probably include many conceptual model elements located in many diagrams. The tool shall provide a customizable reporting mechanism which will fit the user’s documentation needs. Details of conceptual model elements, diagrams, verification results, rules used to verify the conceptual model shall be included in the reports.10)	Provide access to a remote central repositoryThe user can access the central repository for performing a search, downloading a conceptual model or a conceptual model element, and publishing a conceptual model for sharing. Conceptual model shall be internally verified prior to being published. Conceptual model versions shall be managed by the tool during these transfers. The system administrator shall be able to accept or reject the published conceptual model. When a conceptual model is published it shall be marked as accessible by other modelers and any changes made on it shall be controlled.11)	Verify the conceptual modelThe tool is able to verify the conceptual model based on a predefined set of rules. These may be generic rules at the metamodel level or specific rules at the model level. The tool shall produce a verification results report, including both errors and warnings. An error indicates a conflict or a defect within the conceptual model that shall be corrected before the conceptual model is published to the central repository. Warnings indicate situations which may lead to an error but it is not compulsory to correct them as a prerequisite for publishing.3.2 Architecture of the ToolThe tool is designed to be a client application which uses a local database to store the conceptual models. A central repository is located on a server and clients access to this repository through web service interfaces. Client includes mainly the following product components; a graphical editor, model manager, version manager, report generator, model rule base manager, n-dimensional viewer, user manager, security manager, file access manager and data access manager. Figure 2 depicts the architecture of the tool. The architecture is composed of three logical layers, which represent view, control and model layers as defined in the MVC pattern[ REF _Ref228644368 \r \h 16].Figure 2. KAMA Tool ArchitectureThe view layer includes two-dimensional graphical editor to create diagrams, a model explorer to create and navigate among model elements, a version manager to create, store and access different versions of each model element, a report generator to see the model properties in detail and an n-dimensional viewer to produce views of the diagrams in three dimensions. The Control layer includes manager packages which provide services for accessing the model elements, diagrams, users and security properties. The Model layer includes packages for providing data access services to the local database, central repository and files attached to the model elements. Clients store the data in the local database that has the same structure with the central repository. Data transfer among the clients is carried out via the XML files that are generated by the export / import utility of the tool.4. Case StudyThe tool was used in a case study to develop the conceptual model of a real life simulation system about C4ISR systems. The KAMA process and method was also utilized during development of the conceptual model. The conceptual model of a C4ISR system would be developed based on a 343 pages of System Requirements and Conceptual Model Document [ REF _Ref188775119 \r \h 14] as the major information resource. The mission space consisted of 5 missions each of which was described with detailed task definitions. The following table is presented to give an idea about the scope of the conceptual model by providing the number of conceptual model elements.Table 1: Conceptual Model Element CountsConceptual Model ElementCountMissions5Tasks 54Activities94Events7States7Entities68Data Items29Command and Control Units12The case study was implemented by 2 modelers, one of whom was experienced in object oriented software analysis and design, process modeling and the other in simulation systems development and modeling. It was done in three stages, in parallel to the development of the conceptual modeling tool. In each stage a review activity has followed the model development.Table 2. Schedule Summary IDPhaseResourceEffort (person-hours)1Conceptual Model (CM) V1.0 DevelopmentModeler542Verification of CM V1.0Reviewer63Conceptual Model (CM) V2.0 DevelopmentModeler204Verification of CM V2.0Reviewer65Conceptual Model (CM) V3.0 DevelopmentModeler186Verification of CM V3.0Reviewer67Validation of the CMDomain Expert12Verification results revealed that developing the conceptual models in a diagrammatic modeling language and using a tool that supports this language helped the modelers in describing relationships, navigating among the model elements, communicating the model and finding mistakes. We also observed that using intuitive graphical notations would increase the effectiveness of the verification process[ REF _Ref188775306 \r \h 15]. 5. ConclusionDuring the study we have observed that the definition of conceptual model is used in different ways by the simulation community.  Although related work underlines the importance of conceptual modeling, method descriptions and supporting tools rarely exist. Tools are necessary for development of conceptual models that serve their purpose. In this study we presented the KAMA tool which is developed to support conceptual modeling process. KAMA tool has a set of functions to enable development of conceptual models with desirable properties discussed in the literature. According to a case study it was observed, the diagrammatical notation increased the effectiveness of the verification process.REFERENCESBalci, O. (1994) Validation, Verification, and Testing Techniques Throughout the Life Cycle of a Simulation Study. Annals of Operations Research, 53, 121-173. Balci, O., Nance, R.E. (1985) Formulated problem verification as an explicit requirement of model credibility. Simulation 45 (2) 76–86.Borah, J. (2007) Informal Simulation Conceptual Modeling -- Insights from Ongoing Projects Proceedings of the Spring Simulation Interoperability WorkshopChapman, R.M. (2000) Mission-Oriented Conceptual Modeling Framework for Distributed Mission Training, Proceedings of the Fall Simulation Interoperability Workshop Davis, P. K. (1992) Generalizing Concepts and Methods of Verification, Validation and Accreditation (VV&A) for Military Simulations, Paper R-4249-ACQ, RAND, Santa Monica, CA HYPERLINK "http://www.euclid1113.com/" http://www.euclid1113.com/, Euclid RTP 11.13 SEDEP, Last visit on: October 2007 IEEE Computer Society (2003) IEEE 1516.3 Recommended Practice for High Level Architecture (HLA) Federation Development and Execution Process (FEDEP)Johnson, T. H. (2002) “The Conceptual Model of the Mission Space and Data Engineering Toolset”, Technical Report Lacy, L.W., Randolph, W., Harris, B., Youngblood, S., Sheehan, J., Might, R. & Metz, M. (2001) Developing a Consensus Perspective on Conceptual Models for Simulation Systems, Proceedings of the Spring Simulation Interoperability Workshop Pace, D.K. (1999) Use of Subject Matter Experts (SMEs) in Simulation Evaluation, Proceedings of the Fall Simulation Interoperability Workshop. Pace, D.K. (2000) Simulation Conceptual Model Development, Proceedings of the Spring Simulation Interoperability WorkshopRobinson, S. (2007a) Conceptual modeling for simulation Part I: Definition and requirements. J. Opl. Res. Soc. 59 (3) 278-290. Sargent, R. G., (1987) An Overview of Verification and Validation of Simulation Models, Proceedings of the Winter Simulation ConferenceSGKS-C4ISR-MOS 106 (2004) Sistem İsterleri ve Kavramsal Modeli Dokümanı Sürüm 1.1.2, TÜBİTAK-MAM-BTETanriover, O. & Bilgen S. (2007) An Inspection Approach for Conceptual Models for the Mission Space Developed in Domain Specific Notations of Uml, Proceedings of the Fall Simulation Interoperability WorkshopGamma, E., Helm, R., Johnson, R. & Vlissides, J. (1994) Design Patterns: Elements of Reusable Object-Oriented Software. Reading, MA:Addison-WesleyKaragöz, N.A., Eryilmaz, U.,  Yildiz, A.,  Demirors, O.,  Bilgen, S. (2005) KAMA Project Research Report, Center of Modeling and Simulation, Middle East Technical UniversityKaragöz, N.A, (2008), “A Framework For Developing Conceptual Models Of The Mission Space For Simulation Systems”, PhD Thesis, Department of Informatics, Middle East Technical University,.Authors' BiographyUTKAN ERYILMAZ is senior researcher at Middle East Technical University Modeling and Simulation Research and Development Center. He graduated from Electrical and Electronics Engineering and holds Master of Science Degree in Industrial engineering and MBA degree. He is currently Ph.D. student at Information Systems Department. His research interests are conceptual modeling, M&S, multi criteria decision making.ALPAY KARAGÖZ holds MSc. and Ph.D. degrees from the Department of Information Systems, Middle East Technical University. His research areas include conceptual modeling, software process improvement and process modeling. He has participated in research projects in the fields of software process improvement, enterprise process modeling, and conceptual modeling. He has been working as consultant in conceptual modeling and software process improvement projects for the last 7 years.Why tool