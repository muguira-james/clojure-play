From Domain Knowledge to Behavior RepresentationRobert B. CalderSAIC20 Burlington Mall Rd., Suite 130Burlington, MA  01803rcalder@bos.saic.comMartin S. KleinerLogicon RDAP.O. Box 2903New Haven, CT  06515mkleiner@logicon.comScott A. CareyLogicon RDA 400 Shawnee St.Leavenworth, KS  66048scarey@logicon.comKeywords:Knowledge Representation, Command Decision-Making, Knowledge Acquisition,Behavior Development ProcessABSTRACT:  One of the more challenging aspects of simulation programs is the effective acquisition of domain knowledge and the subsequent development of consistent simulated unit behaviors.  These two tasks are critical to enable training simulations to provide realistic, usable simulation environments for military trainees.  Providing an efficient process for representing domain knowledge and translating it into simulation unit behaviors is therefore an attractive goal.The DARPA Advanced Simulation Technology Thrust (ASTT) program is exploring concepts related to advanced, automated decision-making behaviors in its Advanced Synthetic Command Forces (ASCF) project.  A fundamental component of this project is to develop a more effective domain knowledge representation for decision-making behaviors, and to define an efficient process for transforming that domain knowledge into software decision-making behaviors.The ASTT ASCF project has devised a new approach for formulating Knowledge Acquisition (KA) documentation and for translating it into behavior designs.  This approach utilizes a concept called “abstract tactics.”  It is used to facilitate the KA-to-design translation and decrease behavior development costs by enabling the re-use of “core” behaviors across multiple echelons and unit types.  The approach requires Subject Matter Experts (SMEs) to research and identify the “core” behaviors that are employed by multiple unit types at multiple echelons.  This is achieved by abstracting away the particular instantiation of unit type or echelon, and documenting the behaviors in a form that addresses only those concepts that are applicable across the unit types and echelons.  Unit type- and echelon-specific information is documented as a secondary consideration, to be used when a given behavior is ultimately instantiated for a specific unit in the simulation.  Developing abstract behaviors in software also provides a powerful decision-making model that can be used to generate varied solutions to tactical military problems.IntroductionOne of the more challenging aspects of simulation programs is the effective acquisition of domain knowledge and the subsequent development of consistent simulated unit behaviors.  These two tasks are critical to enable training simulations to provide realistic, usable simulation environments for military trainees.  Providing an efficient process for representing domain knowledge and translating it into simulation unit behaviors is therefore an attractive goal.  However, simulation programs to date have not adequately addressed this issue and developed such a process.The traditional approach has been to perform a formal, extensive knowledge acquisition (KA) process and develop a substantial base of KA documentation.  However, this documentation is often developed without regard for the underlying needs of the simulation software models that will be developed.Upon receipt of this voluminous knowledge base, behavior software designers and developers make their way through the documentation attempting to extract the data they need to adequately model the required behaviors.  This effort typically proceeds in an ad hoc fashion, and its success is based solely on the ability of the software designers and developers to identify the relevant information, understand it, and design and develop representative behavior software models.  For this model to succeed, a talented and highly experienced design and development staff is required.  Unfortunately, the design and development staffs rarely possess this level of expertise.  This is a contributing factor to the success or failure of many programs.The Advanced Synthetic Command Forces (ASCF) project, part of DARPA’s Advanced Simulation Technology Thrust (ASTT) program, is addressing some of the issues surrounding the behavior development process.  Specifically, the ASCF program is focused on exploring concepts related to advanced, automated command decision-making behaviors.  A fundamental component of this project is to develop a more effective domain knowledge representation for decision-making behaviors, and to define an efficient process for transforming that domain knowledge into software decision-making behaviors.  The underlying decision-making methodology employed by ASCF utilizes a constraint satisfaction approach.  For a full description of the ASCF project and its goals, see [1].The Behavior Development ProcessAs stated earlier, a well-defined and controlled behavior development process is critical to ensuring a successful simulation product.  In addition, such a process helps to decrease overall behavior development costs.There are three distinct, sequential tasks that need to be performed in the development of automated behaviors.  These three steps and their interrelationships are depicted in Figure 1.First, Subject Matter Experts (SMEs) take domain knowledge from doctrinal manuals and personal experiences, and translate it into KA documents that address the relevant issues for the modeling task at hand.  Second, behavior developers examine the KA documents and formulate a design for the behaviors, utilizing their particular knowledge representation.  This step typically involves frequent interactions between the behavior developers and SMEs to augment and clarify the KA documents.  Third, behavior developers produce software that implements the behavior designs.  During and after this step the SMEs typically perform testing to determine if the simulated behaviors are an accurate representation of the real-world behaviors.Prior to beginning any aspects of this three-step behavior development process it is crucial that SMEs and behavior developers, in conjunction with program management, determine the overall goals of the research/development program in order to specifically focus the behavior development effort. This is particularly true in the case of a very complex domain such as military operations, where the developer may possess some general knowledge but is often unable to articulate the specific knowledge base requirements. Because, by its very definition, a simulation is only a partial representation of the process or system being modeled, it is critical that the SMEs and developers fully understand the intended application of the model or simulation.Oftentimes the developer or end user of the simulation will state that the application should be all encompassing and capable of representing everything that the modeled system is capable of achieving. While this may be desired, and even possible, it is rarely affordable or reasonably achievable. As an example, at the outset of the Synthetic Theater of War (STOW) Command Forces (CFOR) program it was stated that the automated command agent for the Army's Heavy Company Team (mixed tank and mechanized infantry platoons operating together) should be capable of performing all of the missions that the real world unit performs. Further discussion and examination of its application in the STOW-97 ACTD indicated that the model would be performing its rather traditional role of combat operations in open terrain. This did not require the development of a capability for combat in urban terrain or Operations Other Than War (OOTW), such as peace making and peace keeping, thus allowing SMEs and developers to concentrate on the attack, defend and security capabilities of the command agent.If successful, this preliminary step serves as the beginning of a continuing dialogue and mutual education process between the SMEs and the behavior developers. This relationship is a critical element in the behavior development process and must be fostered at all costs. On small programs where there are a small number of behavior developers and one or more supporting SMEs this is usually fairly easy to accomplish. On large programs this is often attempted by forming Integrated Development Teams (IDTs), but these frequently involve only supervisory personnel interacting with each other.  This alone is insufficient to support efficient and effective behavior development and must be supplemented with direct and open dialogue between the behavior developers and SMEs. The remainder of this section discusses each of the three steps of the behavior development process in further detail, with emphasis on steps one and two.Knowledge AcquisitionKnowledge Acquisition in support of military modeling and simulation development is a varied and nonstandard process that is not governed by any core methods or standards. It may vary from large, structured programs, such as the joint contractor/ military team that supported the development of the Close Combat Tactical Trainer (CCTT), to independent efforts of individual programmers rifling through various source documents. The process described here has been developed and used on numerous DARPA-sponsored modeling and simulation development programs and is an effective, efficient and standardized procedure for performing the KA function. It has been used to support a variety of modeling efforts, from individual physical entities and their interactions with the environment to the behavior of pure and task organized units. The most challenging effort by far, however, has been in the modeling of command decision-making, i.e. the cognitive processes required by automated command agents.  This effort began with support to DARPA's STOW CFOR program and continues with DARPA's ASTT ASCF research effort.Once the SMEs and developers have defined and agreed to the processes that need to be modeled in order to achieve a specific simulation capability, the SME must then develop the specific KA documents (or knowledge base) that the developer will use in the subsequent steps of his process. This knowledge base development consists of several sequential tasks that begin with the gathering of all available relevant material, then consolidating, reducing and synthesizing it into a usable series of documents.  The SME begins by looking in three general areas for information: doctrinal sources, general documented sources, and personal experiences. Doctrinal information is that information recorded in authoritative professional documents.  General information is information published in generic documents, such as dictionaries, encyclopedias, non-authoritative journals, and professional papers.  Personal experience information is information based on experience (the author’s or someone else’s) that is not documented.  This is sometimes referred to as anecdotal information. In most cases what is being modeled is a specific task, or series of tasks, for a specified echelon and type of unit.  For discussion purposes, let us assume the task is the occupation of an assembly area by an Army heavy (tank/mechanized) company team.  The SME begins by identifying generic information concerning the task “occupy an assembly area.”  This includes identifying appropriate definitions from Army doctrinal manuals and standard language dictionaries, and gathering general data about the task from Army doctrinal capstone documents.  The SME then researches specific information concerning the task and the type unit.  In this case the SME would research the appropriate Field Manuals (FMs), Army Training and Evaluation Program (ARTEP) Mission Training Plan (MTP), and Tactics, Techniques, and Procedures (TTP) documents.  Next the SME would research the task as it is applied by those units immediately subordinate and superior to the heavy company team, i.e. the tank/mechanized platoons and the tank/mechanized battalion task force, for the purpose of understanding the relationships between echelons in conducting the occupy assembly area task.  This is to say that the tank/mechanized company team does not exist in a vacuum. The way it conducts the task ”occupy an assembly area” is dependent on the actions of its subordinates and the way it is required to interact with its peers and superiors.  The SME then researches any pertinent non-doctrinal sources that he might find relevant, to include professional periodicals (Armor, Infantry, and Military Review magazines; papers and bulletins published by the Center for Army Lessons Learned (CALL); and others).  Finally, the SME gathers anecdotal information from his own experience and that of others.Once all this information is gathered it is consolidated into a single product.  This is accomplished by synthesizing the information, taking into consideration the desired capability to be developed and the familiarity of the behavior developers with the domain.  The SME reduces the volume of data into a concise document that presents the information and applicable interactions. This information must be presented in a manner that identifies and separates authoritative, doctrinal information and information based on non-doctrinal sources.  This is important for verification and validation purposes.  It is also beneficial to present the information in both textual and graphical/pictorial formats when possible.  A picture or a flow chart can sometimes show relationships much better than text alone.It should be noted that in regards to cognitive tasks, doctrinal sources do an excellent job of identifying what must occur but lack clarity in defining how most decisions are made.  They rely heavily on the assumption that the reader is a member of the profession and has matured through the profession to the point where he has the prerequisite knowledge to understand the presentation of the material.  For example, FM 71-1, Tank and Mechanized Infantry Company Team, discusses the task “Support by Fire” talking about the selection of the support by fire position saying it is based on the factors of METT-T (Mission, Enemy, Terrain and Weather, Troops, and Time Available).  It assumes a clear understanding of the concepts of METT-T.  One can research METT-T and get a definition of each of the variables.  But in so doing it also requires an understanding of OCOKA (Obstacles, Cover and Concealment, Observation and Fields of Fire, Key Terrain, and Avenues of Approach).  These also can be researched to get general definitions.  Understanding the concepts as they are applied to selecting a support by fire position as discussed in FM 71-1, however, requires experience gained through training and application.  It is experience that tells the person selecting the position:How large the position needs to be to support the size force. Where the position needs to be located in relation to the enemy’s location, weapons ranges, the assaulting force, and weapon’s danger areas.How to evaluate potential positions in terms of cover and concealment, fields of fire, and possible approach routes to get into position.  This is where the SME applies his anecdotal information to the doctrinal information to clarify and bring alive the process for the behavior developer.One of the primary responsibilities of the SME is to translate the information from the professional language of the domain to common language without changing the meaning within the domain.  The behavior developer translates from the common language to the professional language of the programmer.  The danger here is that there are words that have specific, yet different, meanings in all three languages.  The SME must guard against any misunderstandings in the translations.In supporting the development of Command Agents the SME must identify cognitive/computational processes and separate the humanistic aspects from the scientific processes.  What a unit looks like and what it can do can be described by mathematical formulas.  It occupies a certain amount of space, moves at mathematically describable rates, and interacts with the environment in calculable manners.  The cognitive behavior deals with the command and control of units.  It is this data and associated processes that have to be modeled to create automated behaviors.  Command and control has been described as the art and science of warfare.  Command is the art and control is the science.  [2] states that “Command is the authoritative act of making decisions and ordering action; control is the act of monitoring and influencing this action.”  Control is very much a scientific process of defining limits, determining requirements, allocating means, monitoring status and performance and comparing it to desired norms, and forecasting change.  As a scientific process, control lends itself readily to automation.  Command is the modeling challenge.   As mentioned earlier command is described as an art, but like the art of painting it still has some science to it.  The art of painting involves science in the areas of colors (complementary, contrasting, mixing to create other shades), perspective, proportion, etc.  By applying this science a computer can be programmed to create paintings.  The quality of the product may range from simplistic (paint by number quality) to intricate, based on the effort applied to the programming.  Can the computer create a painting the quality of a Rembrandt?  Many people doubt this.  This is the art.  As in this example, military art also involves a lot of science.  The processes involved in making decisions and the factors influencing those processes can be described in scientific terms.  Therefore, the command process can be automated.  Will this create a Napoleon or a Patton?  Probably not, but it can create an acceptable level of automation for use in training and simulation.  It should never replace the human for actual warfare.The SME has to be able to analyze command and control from this scientific perspective in order to describe it in a manner that the behavior developer can work with. In terms of detailing cognitive processes/decision-making the standard model of “Inputs, Processes, Outputs” is utilized. It is the function of the SME to define the inputs, outputs and variables that are involved in each task or decision and then define and explicate the relationship between and among the variables that constitute the “process.” A critical factor in defining the inputs and outputs is to describe them not only in real world terms, but to also associate them with their counterpart representations, as they will exist in the simulation environment. In detailing the “process” portion of the task the SME must re-examine it numerous times in order to ensure that it is reduced to the highest degree of granularity possible.  He should diagram or flow-chart the process to ensure a clear understanding for himself.  This diagram or flow chart will also prove beneficial to the behavior developers in understanding the thought process even though they may actually be using a different methodology to model the behavior.Behavior DesignThe design of behaviors from KA documents is the second step of the behavior development process.  Formulating an appropriate design for automated command decision-making models is a challenging endeavor.  It requires the behavior designer to study and understand the decision-making processes which humans employ, and to develop a way to effectively simulate those processes to obtain similar results. It must be noted here that there is no requirement for the simulated behavior to emulate the human behavior step by step.  Rather, the goal is to design a simulated behavior that will produce results similar to those of the human given inputs similar to those that the human receives.On most programs to date, this step of the process has proceeded in an ad hoc fashion.  The development of and adherence to a repeatable process for performing this step serves as an effective means of validating behavior designs.  It helps to expose flaws in behavior designs prior to the actual software implementation of the behaviors, thereby leading to more efficient development.The behavior designer begins with a thorough examination of the knowledge base produced in the Knowledge Acquisition step.  It is critical that he fully understand the problem domain and the human inputs, processes, and outputs.  To achieve this level of understanding, frequent interaction between SMEs and behavior developers is required.  Behavior designers are not typically experts in the area they are modeling, and therefore will need to ask numerous questions and seek clarifications on the knowledge base.Once the behavior designer has an initial understanding of the domain, it is often useful for the SMEs to hold seminars or advanced walk-through sessions with the designer to further clarify his understanding.  This is particularly true when modeling the complexities of cognitive human decision-making processes.  On such programs, it is often useful to have the SMEs take a detailed mission vignette and “role-play” the decision-makers’ activities from planning through execution of the mission, while the behavior designer observes the process and asks questions.  This approach has been employed with great success on both the CFOR and ASCF programs.At this point in the behavior design process, the behavior designer should have a thorough understanding of the domain.  Now he must translate that knowledge into behavior designs.  The first decision he must make is what form the behavior designs will take.  There is no single “correct” form for behavior designs; the possible formats depend greatly on the modeling technique to be employed.  However, there are some important goals to strive for.  One goal for behavior designs is that they are prepared in a format that makes them easy for SMEs to understand and critique.  This requires that at a minimum the designs utilize the language of the domain rather than a software pseudo-language, which is often cryptic.  A second goal is that the behavior design representations are easily translatable into code, preferably by an automated code generation tool.The ASCF project uses a constraint satisfaction problem (CSP) [3] approach to representing behaviors.  The CSP approach requires the behavior designer to represent each unique behavior as a set of variables, representing the decisions to make, and constraints, representing the relationships between those decisions.  This representation is typically depicted as a graph of “variable” nodes with “constraint” connections.  The variables are named after their representative tactical decisions, and the constraints are named after the tactical relationships that they enforce.  This graphical representation is easy for SMEs to review and understand since it utilizes their domain language directly and is a natural way of viewing tactical decision-making.  In addition, this graphical approach lends itself to the construction of behavior designs using a commercial drawing package to capture the designs.  This facilitates an automated code generation tool for the development of behavior code from the behavior designs.  ASCF and related projects have developed such a graphical behavior design tool as well as a number of automated behavior code generation tools.Using available means the behavior designers continue to formulate their initial behavior designs.  The typical approach is to design a behavior for each task for each individual unit type at each echelon.Once the initial designs have been generated, they should be reviewed with the SMEs to verify that the behavior designs are accurate representations of the real-world behaviors.  The purpose of this review is to identify misunderstandings and design flaws early in  the behavior development process where it is more cost effective to correct errors.  Effectively performing this process requires the SMEs to study and understand the behavior representation being employed.  Oftentimes the SMEs are not willing or able to grasp the underlying technical details, which leads to their inability to review behavior designs and expose flaws at this stage. This leads to the unfortunate situation of having to wait until the behavior software is written and can be demonstrated for problems to be uncovered.  Such an approach is clearly inefficient.After an initial design review by SMEs, the next step is for the behavior designers to formulate their final designs.  They will use the SME feedback on the initial designs as guidance in development and finalization of these designs.  In addition, as they develop these final designs they should apply standard software design techniques to design the behaviors such that they adhere to object-oriented design methodologies and provide maximum code reuse and ease of maintenance.  One reason for doing this in this step is that the behavior development team is typically comprised of less experienced developers than the design team, and as such they will often develop the behaviors verbatim from the design.After the final behavior designs are complete, the final step is for the SMEs to again review them for accuracy and completeness.Behavior Software DevelopmentThe implementation of behavior software from behavior designs is the final step of the behavior development process.  Depending on the particular modeling technique employed, each behavior development effort executes this step differently to best accommodate their approach.  Therefore, we will not go into a lengthy discussion on a recommended approach for this step.However, one recommended feature of this step that is independent of the modeling technique is the desire for automation.  Any automation that can be employed in this step streamlines the behavior development process and reduces the number of errors.  If the behavior design is represented in the appropriate way, then the goal of automated behavior software development is much more achievable.The ASCF program is researching means of automating the behavior software development process by prototyping code generation tools.  Examples include tools that allow for input of graphical representation of behaviors, and tools that can automatically generate behavior software from intermediate declarative representations of behavior.As the behavior software development step progresses, SME participation is required as well.    As mentioned above, one of the primary functions of the SME is to ensure clear understanding of the real-world processes by the behavior developer.  Once the SME turns the KA documentation over to the behavior developer, the behavior developer decides how best to model this behavior as he understands it.  He writes the code to implement the behavior.  The SME now plays another important part in the overall process.  He must review the behavior with the developer.  The SME should test the behavior against as many variations of conditions as possible and evaluate the behavior against doctrinally acceptable standards.  If the behavior is incorrect then either the behavior developer modeled the process incorrectly or the SME incorrectly or incompletely described the process.  When an incorrect behavior is identified, the SME and developer walk through the code/process to identify why the behavior occurred as it did.  This allows the SME to see how the developer interpreted his KA information.  The error is usually a problem in translation.Occasionally, a behavior error occurs when the behavior developer has modeled the process exactly as the SME described and the SME’s description is correct.  The problem occurs because the computer does exactly what it is told, and unless it is told to build in flexibility it won't.  For example, while working on the CFOR program the SME described the process for a company team to assault an objective.  During testing the entities behaved improperly during the assault.  In walking through the code with the behavior developer it was discovered that the computer was expecting all enemy to be inside the objective graphic.  One enemy vehicle was just outside the objective graphic and therefore the software switched from doing the assault task to doing an “actions on contact” task for unexpected enemy contact.  That is, the enemy vehicle just barely outside of the objective was considered unexpected enemy by the software.  The SME worked with the behavior developer to create a change in the assault code to define what was considered expected versus unexpected enemy based on a buffer area created around the defined objective graphic.  The SME’s purpose during this testing phase is to ensure that the behavior is not only modeled correctly, but also looks correct to the user.Abstract Representations of BehaviorThe ASTT ASCF project has devised a new approach for the representation of command decision-making behaviors. This approach is based on a concept called “abstract tactics.”  The abstract tactics approach primarily affects the behavior development process steps of formulating KA documentation and generating behavior designs.The key to the abstract tactics approach is the identification of common concepts, decisions, and motivating factors that drive the decision-making employed in planning military operations.  Upon identifying these characteristics, an “abstract core” can be developed for each behavior. An abstract core’s representation is based on the key factors that drive a commander’s decision-making, rather than the specific techniques used by a specific unit. This is in contrast to developing a distinct behavior for each task for each unit type at each echelon.  This abstract core can then be used to model the decision-making for multiple units of differing types and echelons.To illustrate the difference between a standard tactic and an abstract tactic, it is useful to look at mathematical formulae.  A given mathematical concept can be represented by a formula, such as the equation for a line.  The equation “y = mx + b” is used to describe any line.  Lines with a slope of 12 are defined by a more specific version of the general equation, by using “y = 12x + b.”  As you move towards filling out more and more of the variables in the general formula, you move toward defining more specific classes of lines.  The other extreme is to specify a line by enumerating the coordinates of all points on the line.  This also defines the line, but in a more “brute force” way.  The purpose of the abstract tactics approach is to identify the “formula” for a given tactic, and then encode that formula as the abstract core for that tactic.  This enables us to move away from the brute force approach to representing behaviors.  In this way, the reasoning can be performed at the abstract level, and the abstract tactic can then be specialized to represent the same or similar tactics for various echelons and unit types.  (Note that we are not proposing to represent tactics using mathematics here, but rather are using mathematics as an analogy to help explain the underlying concept.)The abstract tactics approach identifies a number of modeling techniques in order to be successful.  First, each behavior must represent only the core formula of a tactic rather than the technique employed in the tactic.  For example, let us look at an “attack” which is conducted to concentrate sufficient effects of fires onto an objective (terrain or enemy force). (Sufficient determined by the desired reason for conducting the attack.)  An “attack” for any echelon or type of unit addresses the following four aspects that constitute the core formula:- Analysis of relative combat power (to determine the size force required and where best the fire’s effects should be applied).- Allocation of forces to the battlefield framework (ensures the sufficiency while providing protection to the force).- Determination of mobility possibilities (how can we get the fire's effects to the objective?).- Determination of techniques used to get the allocated forces to the objective (forms of maneuver or fire and movement).These four aspects are the variables that combined with a description of how they interrelate constitutes the formula for “attack.”  The values applied to these variables are determined by the specific echelon and unit type to be modeled.Second, the identification of key abstract factors must be made to prevent the abstract core from turning into an echelon- or unit-specific representation.  One such key factor is that of force ratios for use in determining appropriate tactics.  The tendency in many traditional models is to use a specific “friendly unit type and echelon vs. enemy unit type and echelon” measure rather than the more generic relative combat measures of force ratios.Finally, resources must be expressed in terms of their relationships and capabilities, rather than their labels and metrics.  Examples here include measuring fuel in distance rather than gallons, and reasoning about a unit in terms of its capabilities rather than its type, size, and list of component sub-units and vehicles.In addition, the ASCF effort has identified other modeling techniques that should be used in the overall decision-making process to help make the decision-making behaviors generic and therefore transferable to other unit types, echelons, and Services.When fully implemented and utilized, the abstract tactics modeling approach will yield powerful decision-making models that are efficient to develop and utilize.  The ASCF project is currently exploring how these abstract behaviors can be used to generate varied solutions to tactical and operational military problems.  Specifically, the ASCF program is identifying ways to use the abstract behaviors to generate multiple unique courses of action from the same set of core behaviors.The Abstract Behavior Development ProcessUtilization of the abstract behavior representation approach requires some changes in each step of the behavior development process, as described below.Abstract Knowledge AcquisitionIn the KA phase of behavior development, the abstract approach requires that SMEs research and identify the “core” behaviors that are employed by multiple unit types at multiple echelons.  This is achieved by abstracting away the particular instantiation of unit type or echelon, and documenting the behaviors in a form that addresses only those concepts that are applicable across the unit types and echelons.  Unit type- and echelon-specific information is documented as a secondary consideration, to be used when a given behavior is ultimately instantiated for a specific unit in the simulation.The KA discussion above describes the knowledge acquisition process as it relates to a specific type unit at a specific echelon.  For instance, the example above describes an Army tank/mechanized company team conducting the task “occupy an assembly area.”  Since virtually all Army and Marine Corps units conduct an “occupy assembly area” task regardless of echelon or unit type, the next logical step is to conduct KA to allow the behavior developers to create a single behavior that describes this task across echelons and unit types.In doing this, the KA procedure of defining the process, gathering material, and analyzing the processes to identify inputs and outputs remains the same.  There is, however, a significant additional step required.  The SME must examine the process, inputs, and outputs across the echelons and unit types to identify the commonalities and differences.  He must then describe the base process in generic terms.As described earlier, this is very much like creating mathematical formulae.  The SME identifies the function (process) that describes the relationships, the constants and variables (inputs) that affect the function, and the possible range of outputs.  For example, in the task “occupy an assembly area” for any given unit type and echelon there is a specific amount of area that is required in order to accommodate the unit.  Area is one of the variables applied to the function “occupy an assembly area.”  It can be addressed as a value ‘A’ abstractly in the function and be coded such that when needed for a specific type and echelon of unit the code accesses an appropriate value from a database.  The function, however, is created using these abstract formulae allowing the same function to be applied in multiple places.The SME must also look for ways to describe the items that affect the relationships.  He may find that similar items are named differently at different echelons.   For example what is described as fire and movement at lower echelons can be equated to forms of maneuver at higher echelons when describing an attack.  While these may be considered very different from each other, they may substitute into the overall relationship replacing the same variable in the function describing the process depending on the echelon.Additionally, the SME must look for abnormalities in the process.  Is there some change to the function that occurs for a specific unit or echelon?  Is it unique only to that unit or echelon, or is it a transition point that affects all units and/or echelons beyond that point?  Does this require a new function or an adjustment to the function?  That is, do we now require two functions for this process or can the original function be modified to accommodate the abnormality?Abstract Behavior DesignIn the behavior design phase of abstract behavior development, it is required that the behavior designer constructs an “abstract core” design for each behavior.  For a given behavior, this abstract core represents the common components that apply across unit types and echelons.  In addition to the abstract core design, the design for any unit type-specific and echelon-specific behavior components must be specified for each behavior.  The behavior designer’s goal is for the abstract cores to be as “rich” as possible, and the unit type- and echelon-specific specializations to be as “thin” as possible.The identification of the abstract cores should fall directly out of the abstract KA documentation.  The modeling techniques described above must be adhered to in this design step.  The key factors of abstract tactics discussed above should be reusable in a number of abstract cores.Abstract Behavior Software DevelopmentThe behavior software development step is virtually unchanged when utilizing an abstract approach.  The behavior developer (or automated code generation tool) still implements his code directly from the behavior design.  The one difference is that the design for behaviors now has two parts: the abstract “core” behaviors and the unit type- and echelon-specific specialization software.  In the long run, utilization of the abstract approach will require less development effort due to the reuse of the abstract cores for many behaviors across multiple unit types and echelons.ConclusionsWe have identified an approach for the development of simulated unit behaviors which is comprised of the three steps of knowledge acquisition, behavior design, and behavior software development.  In addition, we have described a new approach to command decision-making behavior representation based on an abstracted representation of tactics.  We have described how the employment of this abstract behavior representation approach affects the three-step behavior development process.AcknowledgmentsThis work is sponsored by the Information Systems Office of the Defense Advanced Research Projects Agency (DARPA) under contract MDA972-97-C-0022.References[1]	Vrablik, G. R., et al (1998).  “Advanced Synthetic Command Forces Architecture,” Proceedings of the Spring 1998 Simulation Interoperability Workshop, March 9-13, 1998.[2] US Army Field Manual “FM101-5 Staff Organization and Operations,” Concepts and Doctrine Directorate, US Army Command and General Staff College, Ft. Leavenworth, KS, 31 May 1997.[3] Kumar, V. (1992). “Algorithms for Constraint Satisfaction Problems: A Survey,” AI Magazine, 13(1):32-44, 1992.[4] Kleiner, Martin S., Carey, Scott A.: "Knowledge Acquisition in Support of Artificial Intelligence:  An Example and Some Lessons Learned," Proceedings of the 1996 Winter Simulation Conference, 1996.Author BiographiesROB CALDER is a Principal Software Engineer in the Technology Research Group at SAIC in Burlington, MA.  He has been involved in the development of automated behaviors for intelligent agents for over eight years. He currently serves as the principal investigator on DARPA’s Advanced Simulation Technology Thrust (ASTT) Advanced Synthetic Command Forces (ASCF) project, and as the technical director on DARPA’s Course of Action Analysis (COAA) program.  He previously served as the principal investigator on the STOW Command Forces project. Prior to joining SAIC, he was a software developer on multiple generations of CGF systems and the ModSAF project lead, at Bolt Beranek and Newman/Loral Advanced Distributed Simulation.  His primary research interests are in the area of military tactics and behavior representation and generation for computer generated forces.  Mr. Calder holds a Master of Science degree in Computer Science from Boston University.MARTIN KLEINER is the director of Logicon Advanced Technology Division's Knowledge Acquisition program and has served in this capacity since its inception five years ago.  He retired from the U.S. Army with the rank of Colonel and has experience in the areas of maneuver warfare, intelligence, campaign planning, operational level targeting, and research and development.  He received a baccalaureate degree in organizational behavior and management from the University of Houston and is a graduate of the U.S. Army War College.SCOTT CAREY has been a senior researcher/writer for Logicon RDA’s Knowledge Acquisition program since 1994.  He is a retired Army Lieutenant Colonel with more than twenty years experience as an armor officer.   His last assignment before retiring was as the senior command and control battlefield operating system subject matter expert and observer/controller for the Battle Command Training Program at Fort Leavenworth, Kansas.  Mr. Carey has a Bachelor of Science degree in Education from the University of Maine and a Master of Science degree in Business Administration from Boston University, and is a graduate of the U.S. Army Command and General Staff College. EMBED PowerPoint.Slide.8