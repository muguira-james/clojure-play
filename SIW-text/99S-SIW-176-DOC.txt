How to Plan and Execute Data Collection and Analysis for HLA federationsPaul B. PerkinsonHung Q. (David) PhanMichael A. ThomaRobert V. HeadVirtual Technology Corporation5400 Shawnee Road Alexandria, VA 22312703-658-7050pperk@virtc.comRodney LongMark McAuliffeRob MillerU.S. Army Simulation, Training, and Instrumentation Command (STRICOM)12350 Research ParkwayOrlando, FL 32826-3276Keywords:HLA; RTI; Data Collection; Analysis; Federation Planning; Federation Management; FEDEP; database; simulation.ABSTRACT: This paper is intended to provide a federation independent Data Collection and Analysis (DC&A) roadmap for federation developers and managers building and executing High Level Architecture (HLA) federations. The paper draws on the experiences and lessons learned planning and executing DC&A for both large and small scale HLA federations, most recently in support of the Defense Modeling and Simulation Office (DMSO) at the Interservice/Industry Training Systems and Education Conference (I/ITSEC).  The lessons learned performing DC&A on small-scale federations closely mimic the important experiences gained performing DC&A for very large scale federations.  The important technical concepts a federation developer must be aware of in order to be successful planning and executing DC&A for any HLA federations will be discussed.  In order to draw specific attention to the need to consider the verifiability of federation objectives through analysis early in the federation design and development process, the hazards of performing analysis on a Federation Object Model (FOM) designed without foresight toward analysis will be highlighted.  Specific examples of the difficulties and challenges encountered performing analysis using a FOM that does not encapsulate the sponsor’s analysis objectives, including Measures of Effectiveness, Performance, and Success will be cited.  The types of analysis performed using the Data Collection Tool (DCT) during the I/ITSEC federation execution will be discussed including the displays and the use of Commercial off the Shelf (COTS) tools, such as Microsoft Access and Excel.1.	IntroductionThis paper is intended as a High Level Architecture (HLA) federation Data Collection and Analysis (DC&A) User’s Guide, a resource that federation managers can turn to for guidance in planning and executing DC&A. The only HLA federations that should not employ DC&A are the federations for which you are not interested in what happened during federation execution and are not planning to analyze the results. The motivations for performing DC&A are numerous and well understood, including Verification and Validation (V&V) of federation participant behavior and analysis of the causes of the events in the federation and of the effectiveness of the federation to achieve it’s objectives. Unfortunately, although DC&A is vital to federation success assessment and improvement it rarely gets the attention it deserves. This paper describes a process, set on the backdrop of the Federation Development and Execution Process (FEDEP), for planning and executing DC&A for HLA federations, which can be followed to minimize risk and maximize the opportunity for success. The process has been refined based upon experience designing, developing, and executing DC&A for large and small-scale federations, including the Synthetic Theatre of War (STOW) Advanced Concept Technology Demonstration (ACTD), Joint Precision Strike Demonstration (JPSD) Counter MRL ACTD, and the Defense Modeling and Simulation Office (DMSO) Interservice/Industry Training, Simulation, and Education Conference (I/ITSEC) HLA Tools federation. To date the STOW ACTD is one of the largest HLA federations ever completed. The STOW federation DC&A requirements, results, and lessons learned have been well documented [1]. Hundreds of computers distributed across the country and internationally participated during the STOW federation’s 48 hours of continuous, uninterrupted operation. During that time the Data Collection System, the Common Data Infrastructure (CDI) captured and stored more than 141 million (M) object and interaction updates and in excess of 25.7 gigabytes (GB) of data. The DMSO I/ITSEC HLA Tools federation DC&A is more thoroughly explained in Section 2, but provides an excellent example of a small-scale federation with 6 federates, 7 computers and two orders of magnitude less data collected than STOW. Both DC&A activities were completed successfully and were instrumental in the development of this process. With the growing power of computers and increases in network bandwidth, HLA federations will likely grow larger than STOW. However, federations on a smaller scale than the HLA Tools federation with either a shorter duration or fewer federates are created all the time. There is no difference in the importance of and little difference in the steps necessary to plan and execute DC&A for large and small-scale federations. Finally, the paper will wrap up with an introduction to the Data Collection Tool (DCT). The DCT is a joint DMSO, U.S. Army Simulation, Training, and Instrumentation Command (STRICOM) project to develop a tool, which will collect data for any federation and provide the capability to analyze the federation during execution. The DCT will be freely available in early April for use by the entire HLA community. 2.	Guidelines for a DC&A ProcessThroughout the Federation Development and Execution Process (FEDEP) [2], there are several tasks which should be accomplished to maximize the opportunity for success of the DC&A activity. The FEDEP is a five step process for constructing a federation. In this section each of the tasks is described in the FEDEP step it should be performed.2.1	Requirements DefinitionStep 1: The federation sponsor and federation development team must define and agree on a set of objectives, and document what must be accomplished to achieve those objectives.The Requirements Definition Phase is the necessary first step in the development of an effective federation.  The primary purpose of this phase is the definition of sponsor requirements in the form of a Sponsor Objectives Statement and development of measurable federation goals.  For each federation, the Sponsors Objectives and federation goals will be unique.  For instance, a training federation may focus on improved performance or greater understanding by the training audience for some specific set of performance measures.  Identify federation effectiveness measures. Based upon the Sponsor’s Objectives and the federation goals, meaningful federation Measures Of Effectiveness (MOE), Measures Of Performance (MOP), and Measures Of Success (MOS) must be developed to gauge federation success. The importance of defining federation goals that are measurable during federation execution cannot be overstated, since the federation’s success in achieving these goals will be judged based upon the federation data collected. These MOEs, MOPs, and MOSs will be used later in the DC&A process to identify the specific analysis to perform on the data collected.Identify technical objectives. Many federations have measurable technical objectives, including specific numbers of federates, objects, or interactions in the federation. For federations whose purpose includes development of HLA infrastructure these types of benchmarks can be particularly useful for judging effectiveness. It is important if your federation has these types of technical objectives to identify them well in advance of federation execution. These types of federation objectives will affect data collection during federation integration and execution. Suppose your federation has a target of achieving 10,000 objects in the execution. In order to ascertain the federation’s peak and sustained object levels; and assess the number of dormant objects it may be necessary to collect and store all object updates. Most other federation effectiveness measures may be gauged by collecting a subset of the federation data. Therefore, it is important to identify these technical objectives early in the federation development process, to scope the scale of the federation DC&A effort.2.2	Conceptual Model DevelopmentStep 2: A representation of the real world domain of interest is developed, and described in terms of a set of required objects and interactions.During this phase in the federation development process the federation manager constructs the FOM, the collection of objects and interactions federates will use to communicate with one another.  The HLA Object Model Template (OMT) and OMT Extensions prescribe a standard format for documenting these salient characteristics of the federation and federation constituents.  The OMT Data Interchange Format (DIF), [3], was developed to establish a common physical encoding of OMT descriptions, facilitating the exchange of simulation and federation data among Object Model Development Tools (OMDT), and exercise planning and analysis tools. FOM Validation. During FOM development it is crucial to guarantee that the FOM will support analysis of the federation. Therefore, object model validation is necessary to ensure the effectiveness of the federation to reach sponsor’s objectives can be measured.  If the FOM does not contain the required data to perform analysis and draw conclusions then Conceptual Object Model Development must be re-visited. For the I/ITSEC HLA Tools federation the objectives of each moon rover operator was to protect his moon rover while trying to destroy the other moon rover and the monsters. Based upon these objectives and the video game style play of the rovers, the original MOE identified for the federation was the total number of rovers and monsters killed by each player. Based upon this measure, the winner would be the moon rover driver who killed the most rovers and monsters. However, the moon rover federate does not support this type of analysis by tracking the cause of the moon rover and monster kills. Although the moon rover provided an excellent platform for demonstrating the capabilities of the RTI and the HLA Tools it is also a good example of a federate and a SOM, which was not built for analysis.Limit the use of opaque types. There are several opaque types supported by the OMT DIF that may appear in your FOM. These types, octet, any, and unbounded arrays provide little or no insight into their contents.  Therefore, it is difficult for other federates, such as a data collection or analysis tool to evaluate the contents of these types. Although these types serve a purpose, they should be included in your SOM or FOM only when necessary. An octet is an 8 bit quantity, which can be used to represent many values. The any type may encode any of the OMT DIF basetypes (float, double, short, unsigned short, long, unsigned long, long long, unsigned long long, char, boolean, octet, and string). An unbounded array is an OMT base or complex type with a cardinality of 1+ and can represent any length array. In order to keep the data types in your FOM as explicit as possible, it is best to limit the use of octet, any, and unbounded arrays due to the inherent ambiguity in the contents of these opaque types. One of the keys to the use of these types is to make sure that an unbounded sequence is not used when a bounded sequence is sufficient.Use non-opaque types. The OMT DIF supports two types, enumerations and boolean, which are the opposite of the OMT DIF supported opaque types. Enumerations and boolean are the ultimate non-opaque type, because not only do these types imply a data type size and encoding, but also unlike most other types it also defines the range of legal values. A boolean is a binary type which can represent True or False. An enumeration type is used to represent data with a finite discrete set of possible values. For instance, an object’s appearance may have a few explicit values, such as (Good, Bad, and Ugly). By defining the object’s appearance as an enumeration in the FOM, analysis of the data is more meaningful. DC&A can report the number of good entities or bad entities rather than the number of entities with an appearance of 0 or 1, which isn’t expressly meaningful. Furthermore, using these types enables automated systems to easily verify the accuracy of the data being passed and facilitates a better understanding of the SOM/FOM by explicitly listing legal values.2.3	Federation DesignStep 3: Federation participants are determined, and a FOM is developed to explicitly document information exchange requirements and responsibilities.Federation design is essential to a successful federation as well as overall federation wellness.  The identification and thorough description of the federate and federation physical structure, resources, responsibilities, and requirements developed during federation design is fundamental to accurate execution, monitoring, and analysis.  A properly designed and developed federation is not only well understood, minimizing confusion about resource and data requirements, but should operate correctly.  Perhaps most importantly, a well conceived federation will use analysis to verify success rather than identify points of failure. HLA compliance and selecting an RTI. When selecting federates to participate in the federation a single RTI vendor and version must be selected for use by the entire federation to guarantee federate interoperability. When selecting federates it is worthwhile to use HLA Compliance Testing to verify that all operate correctly with an IFSpec compliant RTI. The HLA compliance testing is a four step process for verifying a federate’s HLA compliance. To pass compliance testing a federate must have a valid SOM and make a Compliance Statement (CS) enumerating the HLA Interface Specification (IFSpec) calls the federate makes. Compliance testing verifies that the federate will update and/or reflect the objects in the federate’s SOM and send and/or receive interactions. The CS is also checked to ensure that the federate can create, join, resign, and destroy a federation and make all the IFSpec calls claimed in the CS. By requiring the federates in the federation to undergo HLA Federate Compliance Testing you can be assured that the federates work with IFSpec compliant RTIs.2.3.1	Selecting a Data Collection & Analysis SystemThere is an inherent conflict of interest in suggesting a set of requirements for a Data Collection and Analysis System and also advocating a particular tool in the same paper. Although we are making no claims of impartiality, the DCT, which is described in greater detail in Section 4, will soon be freely available to the M&S community. Whether or not you choose to use the DCT, we suggest placing great importance on these requirements, as well as other specific federation requirements, when selecting a DC&A system.Federation independence. Several federations have built data collection systems tightly coupled to their particular federation and/or FOM. Undoubtedly even for the simplest federation the federation participants and FOM will evolve during federation development and integration. During that process, a federation specific data collection system will have to be fixed to work with the changes to the federation. Therefore, although this can be a successful strategy for very static federations it will be expensive and time consuming to make changes to the system if significant changes are made to the federation and the data collection system must be re-developed for each federation. Using a data collection system built for a particular federation also limits the ability of federation managers to incorporate additional federates or federate features into the federation late in the federation development process without risking federation execution delays. After completion of a specific federation, a federation specific data collection system may require manual source code changes as well as data store modifications in order to be applied to subsequent federations.Federation runtime analysis. With the cost associated with organizing and executing a federation it is important to provide immediate feedback through federation runtime analysis. Measures Of Performance (MOP) related to issues such as detection of failure or non-responsiveness of federation participants, will prove useful to federation managers during execution. This data will provide more insight into the execution details of a federation, allowing the manager to improve the federation execution plan over time.  This data also provides the basis for federation re-start decisions. With federations which may run for a long duration it is important to provide feedback during execution, especially when it may be apparent early in the execution through runtime analysis that federation objectives will not be achieved.2.4	Federation Integration and TestingStep 4: All necessary federation implementation activities are performed, and testing is conducted to ensure interoperability requirements are being met.During the federation integration and testing phase analysis is done on the performance of the physical components of the federation.  The entire federation is exercised to identify points of failure.  The results of each federation execution test are used to update the object attribute and interaction parameter update rates; host and LAN resource requirements; and latency requirements predicted in the Federation Execution Planners Workbook (FEPW) during the federation design phase with actual values.  This feedback loop ensures the refinement and achievement of federation performance requirements.Verify the accuracy of the federation data. DC&A performed during the Integration and Testing phase is particularly important to ensuring accurate federation behavior.  The Integration and Testing phase is the last opportunity before Federation Execution to ensure federates are individually producing the correct data, as well as, interacting correctly. During the Integration and Testing phase of the FEDEP it is important to perform this type of validation of each of the federates and the federation as a whole.  Without this type of check to verify federation accuracy it is difficult to ensure proper federation execution or achievement of federation goals. During the STOW Full System Tests (FSTs) several problems were identified by the Data Collection System.  These problems included unexpectedly large amounts of data from the weather simulation and entity interactions; unsynchronized use of time by federates; use of incorrect coordinated systems and datum for entity locations; and incorrect model placement. Because these problems were identified prior to the STOW ACTD each was solved, increasing the value of the results of the federation.  2.5	Federation Execution and AnalysisStep 5: The federation is executed, outputs analyzed, and feedback provided to the federation sponsor.The main objective of the Federation Execution and Analysis phase is the execution of the federation and analysis of the results.  Data Collection and Analysis. During this phase of federation management process analysis will be performed to determine the success of the federation in achieving objectives. During this phase it is important to capture and store the temporal evolution of the state of the federation necessary to perform analysis. Evaluate and Leverage Commercial Products. With the size, scope, and fidelity of federations increasing constantly, automated tools are absolutely necessary for performing analysis of the achievement of federation objectives and sponsor needs identified early in this process. Several types of commercial tools can assist with DC&A, including federation data (1) storage and retrieval and (2) analysis and visualization. With the wide availability of low cost commercial desktop software, federations should evaluate and leverage these low cost tools rather than incurring the cost of re-development. Although all federations and particularly federations of different sizes have unique requirements, commercial tools for all scale federations exist. Several data base management systems, including Oracle and Microsoft SQL Server and Access support data storage, organization and optimization, and retrieval. With the large number of parameters that can be used to characterize federation operation it is necessary to use visualization to represent the data graphically and bolster our ability to understand the data rapidly. Whereas in the past these types of tools came with a large price tag and system requirements these types of tools are readily available on low cost platforms.3.	The Data Collection Tool (DCT)Virtual Technology Corporation (VTC) is currently working with the DMSO, U.S. Army STRICOM, and the M&S community to implement key components of an HLA wide vision for a tool architecture [4]. A key component of that tool architecture is the Data Collection Tool (DCT). It will be the federations that embrace automated tools to support the HLA defined processes and data standards, which will realize the maximum potential benefits that the HLA can provide. The DCT is a powerful and flexible DC&A system for the HLA. The DCT is a result of the incorporation of the design, implementation, and execution lessons learned from the STOW data collection system, the Common Data Infrastructure (CDI), and the JPSD CMRL Runtime Measures Of Effectiveness (MOEs). The architecture has undergone refinement to improve the usability of the system; the use of widely available desktop automation software; and provide federation independence. The DCT is an HLA federation runtime tool that can be used to collect data and perform analysis for any federation. The purpose of the DCT is to enable collection and analysis during federation execution so that federation results can be analyzed immediately during federation execution while corrective action can still be taken. The tool can be used in the integration and testing as well as the execution and analysis phases of the FEDEP to determine exactly what happened during federation execution; to verify simulation model behavior; or to verify the effectiveness of achieving federation goals. To keep the cost of DCT ownership low the tool makes use of widely available commercial desktop database and analysis software. The tool will enable you to dynamically change the federation data collected during execution to limit collection to the federation data necessary to achieve your specific federation analysis goals. The DCT has undergone compliance testing and has been certified HLA compliant by DMSO’s certification agent.3.1	Data Collection WizardThe Data Collection Tool User Interface is designed as a wizard, which will guide you through the steps required to plan and execute data collection. The tool requires very little user intervention to begin data collection and will even generate a database schema to store the federation data.3.2	DC Planning and Execution StepsThe Data Collection Tool Wizard implements a process for planning and executing DC&A. The Data Collection Wizard contains seven easy steps ( REF _Ref439008621 \h Figure 1). Each step in the process will only be reached after the previous step has been completed. At each of the steps the wizard will clearly identify the information necessary to complete that step. At most steps in the planning and execution process the wizard will provide default values to minimize the amount of configuration necessary. Figure  SEQ Figure \* ARABIC 1 DC&A planning and execution steps.After completing each step in the DC&A planning and execution process the wizard will guide you to the next step in the process. This section describes the details of each of the seven steps in the process. Federation Specification – The first step in planning and executing DC&A using the DCT is to describe the data characteristics of your federation by specifying the location of three standard Modeling and Simulation (M&S) files, the Federation Object Model (FOM), the Federation Execution Data (FED), and the Federation Execution Planner’s Workbook (FEPW). These files describe the objects and attributes, interactions and parameters, and data characteristics and types communicated using the RTI. Specifying these files allows the Data Collection Tool to collect and understand the data exchanged among federation participants.FOM. The DCT has the capability to load an appropriately formatted Object Model Template (OMT)-Data Interchange Format (DIF) FOM. The HLA OMT provides a template for documenting HLA-relevant information about classes of simulation or federation objects and their attributes and interactions [3]. FED. The DCT has the capability to load appropriately formatted Federation Execution Data (FED) files. The FED file contains information specific to the federation and necessary for the RTI to execute.FEPW. The DCT has the capability to load appropriately formatted Federation Execution Planner’s Workbook (FEPW)-DIF files.  The FEPW DIF file format was designed to share federation execution characteristics among automated tools and across federations [5]. An FEPW DIF is not a prerequisite for using the DCT. If your federation has not developed an FEPW, it is necessary to specify the byte ordering of the data in the federation.  This is done by selecting the either Big or Little endian.  If you are not sure what the byte ordering of your federation is, ask the developer of your federation or the developers of the individual federates. Federation Verification – After specifying the FOM, FED, and FEPW files in Step 1, the wizard will guide you to the Federation Verification step in the process. This step allows you to visualize and verify the contents of the FOM. The purpose of this step is to ensure the correct FOM has been loaded before you progress far into planning DC&A for your federation. This is an important part of the process because the objects and interactions specified in these files must be consistent with the objects and interactions published by the federates in the federation. Database Schema Generation – The next DCT Wizard step is to specify whether to store the federation data in a database or log the data collected in log files. If you choose to store the collected data in a database the DCT will generate a Microsoft Access™ database schema based upon the objects, attributes, interactions, parameters, and data types in your FOM. Therefore, DCT users can store federation data in a database and use of the full power of Access™ without needing to understand how to build a database, database tables, or other database elements. Automating the generation of a database based upon the FOM also will also enable DCT users to re-generate a database after any changes are made in their federation’s FOM. If you choose to log the collected data the DCT requires a location to store the log files.Collector Generation – The next DCT Wizard step is to specify the name and location for the tool to generate a Data Collector application specific to your federation. In order to facilitate federation runtime analysis, it is necessary to collect, understand, and store your federation’s data. By providing a capability to generate federation specific, FOM-aware data collectors, you can collect data for any federation without writing a single line of source code. Therefore, the DCT will generate a Data Collector based upon the objects, attributes, interactions, parameters, and data types in your FOM. The generated collector is used with the generated database schema to collect and store federation data. Automating the generation of a data collector based upon the FOM also will also enable DCT users to re-generate the data collector after any changes are made in their federation’s FOM. Generation of the database and collector eliminates a tedious, time consuming, and error prone task.Subscription – The next DCT Wizard step is to preplan the federation data to be collected during execution. This is accomplished by selecting the objects, attributes and interactions to collect from a scroll list of the FOM contents. It is not necessary to preplan subscriptions and whether or not you choose to preplan you can dynamically change the federation data collected during execution. The purpose of preplanning subscriptions is to complete a Data Collection Plan for later re-execution of the same DC&A. Either by preplanning your FOM data collection before execution or during federation execution the DCT enables you to collect only the data you need to perform analysis on your federation.  Execution Planning – In the final DCT Wizard step prior to execution you must specify where to run the DCT and its components. During execution the DCT is typically comprised of two components, (1) the data collector and (2) the database. The DCT provides a default configuration of running both components on a single machine, which should be suitable for most federations. Although all the components of the DCT can be run on a single computer the components of the system can also be distributed across two computers, if preferred, by identifying a second computer. If you have chosen to log the federation data collected to files rather than a database the DCT will only have a single runtime component, (1) the data collector.Execution – After completing the data collection planning steps you are ready to begin DC&A. At the start of execution the DCT will launch each of the system components. During federation execution and simultaneous to collection and storage in the database the DCT prepares the data for query to facilitate runtime visualization and analysis using commercial tools, such as Microsoft Excel™. During data collection you are able to dynamically control the FOM elements collected. The DCT provides visual feedback of the data collection status through an iconic situation display bar. The DCT will display the system status (running, collecting, etc.); the number of objects and interactions being collected; and the packet loss. The Data Collection Plan. In order to make it easy to re-execute the same federation data collection and analysis to verify results or to repeat execution of the same federation, the DCT provides a mechanism to save a data collection plan. The Data Collection Plan contains all the information necessary for the DCT to execute data collection for a federation, the FOM, database name or log file directory, data collector, preplanned subscriptions, and execution information. At any point in the planning or execution process you may save or load and execute a Data Collection Plan. 4.	DC&A for the I/ITSEC federationTo demonstrate the tool support for the HLA, DMSO ran a live federation at I/ITSEC featuring several federation planning and runtime tools. The DMSO I/ITSEC HLA Tools federation was comprised of a total of six tool and simulation federates. The runtime tool federates participating in the HLA Tools federation included the Data Collection Tool (DCT), Federation Management Tool (FMT), and the Federation Verification Tool (FVT). The other federation participants were two moon rover federates, and a Computer Generated Forces (CGF) federate. The moon rover federate is a real-time, man in the loop simulation converted from Distributed Interactive Simulation (DIS) to HLA as part of an effort to educate the Modeling and Simulation (M&S) community about HLA.  The conversion from DIS to HLA was used to demonstrate that HLA provided the necessary simulator fidelity, functionality, and performance for real-time applications.  The moon rovers operate within a virtual environment representing craters on the Jupiter moon and include several dynamic environmental features. The CGF federate is responsible for modeling the behavior of a Lava Creature and the dynamic environmental features. During the I/ITSEC federation execution two moon rovers interacted with each other, the environment, and the Lava Creature opponent. All federates participating in the HLA Tools federation at I/ITSEC used the RTI 1.3. Aside from a configuration issue with the RTI Initialization Data (RID) file identified and fixed during integration, the version of the RTI used during the I/ITSEC federation worked nearly flawlessly and proved to be a stable and reliable environment. The DMSO I/ITSEC HLA Tools federation development followed the FEDEP. The DCT was an integral part of the integration and testing as well as execution and analysis phases of the HLA Tools FEDEP. The DCT is an HLA runtime tool that can be used to collect data and perform analysis during federation execution for any federation so that federation results can be reported during execution rather than waiting until completion of the federation execution.  4.1	Integration and TestingTwo weeks were allocated for integration and testing of the HLA Tools federation at the integration site near the Convention Center used for I/ITSEC in Orlando, FL. Federation integration was scheduled for completion a week prior to the start of the conference to allow enough time for integration over runs, as well as, delivery and setup of the systems. Some of the federates that participated in the federation were pre-release versions of the software; none of the federates had interacted previously; and all were using a new update to the RTI 1.3. Therefore, although two weeks initially seemed like a long period of time it was important to allot sufficient time to successfully test and integrate all the components of the federation. During federation integration and testing the DCT was essential in identifying and diagnosing several issues. Problems with the number of multicast groups in the first release candidate of the Runtime Infrastructure (RTI) 1.3 v5 RID file caused problems with specific types of hardware with multicast limitations.Many Network Interface Cards (NICs) have limitations on the number of multicast groups they can join and may have undefined results if that number of groups is surpassed. After encountering problems, the data collection development team in conjunction with the RTI support team identified the problem, developed an application to test the multicast group join limitations, discovered the change in the RID file, and reduced the number of multicast groups in the RID. Identification of missing data in some object attributes and interaction parameters, including fire interactions missing a moon rover object name used to determine which moon rover fired. Without adequately populated object attributes and interaction parameters it is not possible to determine what occurred during the federation or the causal relationship among events. In order to perform some of the specific types of analysis planned for the HLA Tools federation, an object name is necessary in fire interactions to identify the moon rover. Therefore, the moon rover federate was updated during integration to populate some FOM interaction parameters so that the HLA Tools federation analysis objectives could be achieved.Identification of inaccurate data in some object attributes and interaction parameters, including an undefined vehicle type in the data collected during integration and analysis.During integration and testing it was discovered that periodically inaccurate data was used to populate federate data. As well as affecting analysis and the determination of the events occurring in the federation, inaccurate data can affect the outcome of the federation. This problem was resolved during integration prior to federation execution.4.2	Execution and AnalysisWithout the ability to facilitate analysis of the data collected, collecting federation data is without a purpose. Therefore, at I/ITSEC it was important to demonstrate the ability to easily and effectively display and analyze what was happening in the federation while the federation was still executing.The moon rovers are intended to provide a real-time, interactive, graphical demonstration of an application of the HLA. Based upon the objectives of the moon rover operator in the federation, two Measures of Effectiveness (MOEs) were developed to assess the ability of the participants in the federation to achieve their goals. These MOEs are (1) moon rover kills, and (2) fires by moon rover. These particular MOEs enable the assessment of the success of the man in the loop to protect his rover and the number of times the driver fires. To demonstrate the DCT federation runtime analysis capability, Microsoft Excel™ graphs were developed to display federation MOEs.  We used the standard Microsoft graph wizard to chart the columns directly from the database rather than the columns in a spreadsheet. Throughout the execution of the federation, displays of the MOEs were updated to track the progress of the federation. Figure 1 represents the cumulative moon rover kills over the course of an execution.  REF _Ref438912989 \h Figure 3 displays the number of times each rover fired as a percent of the total number of fires during an execution. Strangely, over the course of the conference an inverse relationship developed between the number of times a rover fired and the number of times the other rover was destroyed.EMBED Excel.Sheet.8Figure  SEQ Figure \* ARABIC 2 Moon Rover Kills.Figure  SEQ Figure \* ARABIC 3 Moon Rover Fires.The HLA Tools federation was in operation during the four days of I/ITSEC. During that time the exhibits were open and the federation was executing for approximately 29 hours. Over the course of the exhibition, the DCT collected and the MOE displays indicated that more than 600 moon rovers were destroyed, either by the other moon rover, the Lava creature monster, or by excessive damage done to the rover caused by poor driving.  4.3	ResultsThe DCT worked up to all expectations from federation integration through execution. The moon rover and CGF simulation represented the state of the rovers, lava creature, lava balls, and environment features to produce the bulk of the federation data. A single FOM object (Entity) was used to characterize the state of the moon rovers, lava creatures, lava balls, and the dynamic environmental features. An interaction (Entity_Interaction) was used to represent moon rover fires, detonations, and collisions. During the 29 hours of execution for the I/ITSEC federation, the DCT was used to dynamically subscribe to the federation data required for analysis. The DCT collected in excess of 1.15 million object and interaction updates and 244 megabytes (MB) of data. These numbers do not represent the total number of object updates and interactions sent using the RTI, because change detection was employed by the DCT during I/ITSEC. Because the purpose of data collection during the HLA Tools federation was to support the demonstration of analysis of the federation, it was important to capture the data required to accurately characterize the federation. However, it was not necessary to collect or store every object and interaction update as long as the temporal evolution of the state of the federation is preserved. Therefore, change detection was performed as part of data collection for the I/ITSEC HLA Tools federation to filter duplicate object and interaction updates. Table 1 breaks down the data collected for each day of I/ITSEC. A significant majority of the data received is interactions, with a small percentage representing object updates. Table 1 Data Collected during I/ITSEC.5.	ConclusionBased upon experience designing, developing, and executing DC&A for large and small scale federations, guidelines have been developed for improving the opportunity for success performing DC&A for all scale federations. The Data Collection Tool (DCT) is a freely available tool that supports DC&A during federation execution for all federations and implements key components of the HLA federation DC&A process. The I/ITSEC HLA Tools federation successfully used the DCT to collect and display the federation MOEs in near real-time.6.	References[1]	Perkinson, Paul, Bachinsky, Stephen, Tarbox, Dr. Glenn: Lessons Learned from the STOW Data Collection System, January 1998.[2]	High Level Architecture Federation Development and Execution Process (FEDEP) Model, Version 1.1, Department of Defense, November 1997.[3]	Object Model Template (OMT) Data Interchange Format (DIF), Version 1.3R2, Department of Defense, 5 February 1998. [4] 	Hunt, K., Dahmann, J., Lutz, R., Sheehan, J.: Planning for the Evolution of Automated Tools for the HLA, 1997.[5]	High Level Architecture Federation Execution Planner’s Workbook, Version 1.3, U.S. Department of Defense, 10 June 1998. Author BiographiesPAUL B. PERKINSON received his BS in computer science from George Mason University.  He has over six years of experience in software engineering; featuring object oriented analysis, design, and implementation. For more than three years he has been employed at Virtual Technology Corporation as the Director of Software Engineering and worked on such large scale distributed simulations as the Joint Precision Strike Demonstration (JPSD) and the Synthetic Theatre of War (STOW.) He was the lead developer for the STOW Simulation Infrastructure (SI) and Data Collection System, the Common Data Infrastructure (CDI) and worked on the Runtime Infrastructure (RTI) 1.3 Next Generation (NG) development team.  Mr. Perkinson is currently the lead engineer for the DMSO sponsored Data Collection Tool (DCT) and VTC’s effort to develop tools to support the Department of Defense’s (DoD’s) High Level Architecture (HLA), the Toolteam.HUNG Q. PHAN received his MS in Computer Science and BS in Electrical Engineering from George Mason University.  He has over six years of experience in software development and has been employed at Virtual Technology Corporation (VTC) for more than three years.  As a senior systems engineer, he has lead teams of developers in various projects that include the Counter Multiple Rocket Launchers (CMRL) and the Rapid Terrain Visualization (RTV). Currently, Mr. Phan serves as a key member of VTC’s Toolteam developing components of the Data Collection Tool (DCT) and the HLA communications framework.MICHAEL A. THOMA received his BS in Mathematics from the University of Massachusetts, Amherst.  He has over 12 years experience in the software development industry, featuring object oriented design, generic algorithm design, graphical user interfaces, software engineering principles, and optimization techniques. Mr. Thoma worked on the design and development of an HLA federation data collector template for data collector generation. ROBERT V. HEAD is a Senior Software Engineer with Virtual Technology Corporation and has been involved with a variety of HLA-related projects since joining VTC in 1996. He was an integral part of the technical support team for the RTI F.0, 1.0, and 1.3, and has recently been involved with several projects supporting VTC’s effort to develop HLA tools. Mr. Head received a B.S. in Mathematics and Computer Science from Mary Washington College and a M.S. in Computer Science from George Mason University. He is currently pursuing doctoral studies in Information Technology at George Mason University.