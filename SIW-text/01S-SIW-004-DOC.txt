Exploring the Next Generation of Internet Protocols for Distributed SimulationMartin R. Stytz, Ph.D.Sheila B. Banks, Ph.D.Air Force Research LaboratoryCalculated InsightWright-Patterson AFB, OH  45431Orlando, FL  32828 HYPERLINK mailto:mstytz@worldnet.att.net mstytz@worldnet.att.net,  HYPERLINK mailto:mstytz@acm.org mstytz@acm.org HYPERLINK mailto:sbanks@calculated-insight.com sbanks@calculated-insight.comKeywords:Distributed simulation, networking, IPv4, IPv6, internet protocols, simulation environment requirements, multicasting, real-time simulationABSTRACT: In this paper we discuss the Internet Protocol version 6 (IPv6) and how the differences between IPv6 and Internet Protocol version 4 (IPv4) can be exploited to improve distributed simulations.  We describe how the new networking capabilities provided by IPv6 can be used to improve the performance of distributed simulations and we discuss examples of additional capabilities that IPv6 can provide.  We discuss how IPv6 can be used to improve bandwidth allocation and how its flexibility can be exploited to improve the operation and fidelity of federations.  In the paper we recommend and outline the changes to the HLA documentation that should be considered in order to capture the needs of simulation entities vis-a-vis IPv6 capabilities.  We also discuss the circumstances when a simulation entity can further benefit by exploiting an IPv6 capability.  The paper concludes with a brief summary and suggestions for future work.1.	IntroductionNetwork bandwidth is generally the chief limiting factor in federation performance and constrained bandwidth degrades the degree of complexity and fidelity that a federation simulation environment can achieve.  To optimize the use of available network bandwidth resources, bandwidth is generally allocated among federates and among interactions according to their communications and information timing needs.  But, network bandwidth, or rather the lack of sufficient bandwidth, remains as one of the most limiting factors to distributed simulation performance.  The distributed simulation community faces two obstacles to addressing the bandwidth problem and to providing and supporting the next generation of distributed simulation environments.  This next generation of networked distributed simulation environments will use networks that are timely, secure, opportunistic, flexible, and extensible ([4], [6], [9], [10]).  The two obstacles are providing sufficient network bandwidth and efficient network bandwidth allocation.  These twin obstacles exist for a number of reasons; one of the chief reasons being the networking protocols used to transmit the data.  We can reasonably assume that the civilian marketplace will continue to develop technologies that increase network bandwidth and minimize switching latency.  One of our problems will; therefore, be solved for us by the markets’ demand for raw bandwidth.  Our focus should be upon the other problem, which is the protocols used to manage data transmission and how the protocols can be exploited to improve distributed simulation environments.The networking protocols used today do not permit adaptive, dynamic allocation and re-allocation of network bandwidth and resources.  From a distributed simulation point of view the protocols are inefficient in their use and allocation of network resources.  Therefore, the development and exploitation of improved networking communication protocols is needed in order to implement future generations of distributed simulations.  Note, however, we do not have complete freedom in our choice of protocols.  A further constraint and one of that affects federation performance is the protocols required by the High Level Architecture (HLA).  Currently, the High Level Architecture (HLA) assumes the use of the IEEE standard Transmission Control Protocol and Internet Protocol (TCP/IP) protocols, especially Internet Protocol version 4 (IPv4).  For economic reasons, this reliance upon TCP/IP by the HLA is unlikely to change; therefore, HLA must rely upon and exploit the capabilities provided by the dominant or standard communication protocols and hardware.  The current IP, IPv4, has a number of limitations that affect the performance of distributed simulations.  Some of these limitations are IPv4's relatively small and fixed data packet size, its fixed packet routing policies, inflexible packet headers, and lack of native support for encryption.  These limitations affect not only the simulation community, they also affect the commercial marketplace.As a result of the commercial imperatives, a new Internet Protocol, Internet Protocol version 6 (IPv6), has been proposed, developed, and adopted as an IEEE standard.  IPv6 was developed to prepare networks and the internet to handle a broader range of traffic than is currently handled, the traffic will also consume greater network bandwidth and require broadband communication with mobile communication devices as well as fixed network hosts.  As a result, IPv6 offers a wide variety of new capabilities for transmitting data.  Several important capabilities in IPv6 that would seem to benefit distributed simulation and the HLA in particular have emerged as by-products of these commercial improvements.  Therefore, we advocate research into these capabilities with a view toward improving the performance of distributed simulations and HLA-based federations.In this paper we address a number of topics related to the development and exploitation of the IP for distributed simulation.  We begin with a discussion of the IPv6 and of the differences between IPv6 and IPv4.  We then discuss the additional capabilities that IPv6 provides and then discuss how these new capabilities in IPv6 can be exploited to improve the performance of distributed simulations.  We discuss how IPv6 can be used to improve bandwidth allocation and how its packet header flexibility can be exploited to improve federation execution.  We also discuss the modifications to the HLA documentation that that we believe are needed to capture the needs of simulation entities vis-a-vis IPv6 and to specify when and how a simulation entity should exploit an IPv6 capability.  The paper concludes with a summary and suggestions for future work.2.	Background to TCP, IP, IPv4, and IPv6In this section we provide a brief introduction to a number of topics that are relevant to the suggestions and recommendations we make in Section Three.  The first subsection provides an overview of the operation of the Transmission Control Protocol and Internet Protocol ([1], [2], [3], [5], [7], [8]).  The second subsection contains an overview of IPv4.  The third, and final, subsection contains a discussion of IPv6 and its capabilities.2.1	Introduction to TCP/IPThe backdrop to the work we report in this paper is the standard Transmission Control Protocol and Internet Protocol (TCP/IP) used for internet systems and is assumed to provide network communication for the Distributed Interactive Simulation (DIS) and High Level Architecture (HLA) standards.  In the TCP/IP approach to network communications, data is transmitted from computer to computer on the network using data packets.  Each data packet is composed of a header and a body.  Figure 1 shows a notional packet and a header and data format used by a generic internet protocol.The IPv4 packet header can contain information relating to security, packet sequencing, addressing, packet data integrity, and packet size, but it does not contain the data that is being transferred.  The data is contained in the body of the packet, which is called the data segment.  For reference purposes, and to place our suggestions later in this paper into a proper context, the standard TCP/IP protocol stack is depicted in Figure 2.  The highest level of the stack, the Application layer, contains the application(s) that generate and receive data.  The HLA interfaces to the network and operates at the Application layer level.  The Transport layer provides reliable end-to-end, (sender-to-recipient) communication.  For outgoing data, the Transport layer inserts the data given to it by the Application layer into TCP formatted packets.  These packets are then passed down the stack to the Internet (or IP) layer.  For incoming data, the Transport layer receives TCP-formatted packets from the Internet layer in the stack, strips off the TCP header, performs whatever validity checking and message re-assembly operations are required, and passes the complete message on to the destination application in the Application layer.  TCP operates only in the Transport layer and uses symbolic (or logical) addressing to indicate the sender and the recipients of he data.  The Internet, or IP, layer is directly below the Transport layer and the Internet layer manages communication between computers on the network using logical addresses.  For incoming data, the IP layer receives the packets of data, called datagrams, that arrive from the Network layer, strips off the IP headers, checks the validity of the incoming data, and passes the data segment on to the Transport layer.  For outgoing data, IP performs routing of data and places the data into IP-formatted packets.  The Network Interface layer manages the transmission of the data over the physical network and deals in real addresses and the problems that arise when dealing with a physical medium.  Unlike the other three layers, the Network Interface layer only manages real addresses, not logical, addresses on the network.  In the TCP/IP approach to communications are conducted on a peer-to-peer basis between protocol stacks.  For example, the TCP layer on one computer communicates only with the TCP layer on any other computer, all of the intervening layers of the TCP/IP protocol stacks on its own machine, the recipients’ machine, and intermediate router machines operate in a manner that is transparent to the sender’s and recipients’ TCP layer.  As noted above, each packet is composed of a header and a body (or data) segments; therefore, clearly the body of a message at one layer of the stack will contain the header information for lower layers in the stack.  Outgoing packets are, then, nested structures.  The output from a higher layer level of the stack is placed into the structure and the resulting header and data segment combined as a packet serves in toto as input to the next layer of the stack when data is being transmitted.  For data reception, the process operates in reverse; each layer of the stack strips off its particular header information before passing along the data to the next higher level in the stack.  Because of this clean separation of functionality between layers in the TCP/IP stack, we can safely concentrate on exploiting the new capabilities offered within the IP layer of the stack and discount the possibility of an unanticipated or unwanted effect upon the operation of the other layers in either the transmitting or receiving TCP/IP stack.For reference purposes, the basic TCP header is presented in Figure 3.  TCP provides different services than the IP; TCP services include positive data acknowledgement, individual port addressing, and padding to insure that the packet size is the desired size.  The TCP abstraction of the operation of the network is one in which the service is guaranteed, packets are never lost, messages can always be reassembled, and routing only occurs using symbolic addresses.  The transition from IPv4 to IPv6 does not affect this layer of the TCP/IP stack or any other part of the standard internet/networking communication protocols used for the High Level Architecture or the Distributed Interactive Simulation standard.2.2	Introduction  to IPv4Before turning to a discussion of IPv6, we will briefly discuss the operation of IPv4 [1,2,3,8].  An IP packet consists of header and data segments, the header contains all of the information that is required to deliver a packet to a destination and to specify the lifetime of a packet within the network.  The IPv4 protocol defines an unreliable, connectionless delivery protocol and the protocol specifies the basic unit of data transfer.  IPv4 was designed to be unreliable so that the packet processing overhead at intermediate routers is minimized.  IPv4 is connectionless because the designers did not want to support either virtual or real circuit switching in the protocol.  Finally, and of some import to the efficiency of an executing federation, IPv4 requires that each host examine every IP packet header that arrives at the host, even those packets intended for some other host, which results in the waste of network and federation computational resources.The current IPv4 has a 32bit address space and a 1k packet length, which is too small to support the expected audio and video demands that will be placed on the internet and IPv4 also does not readily support several of the requirements for distributed simulation, such as entity migration or guaranteed real-time quality of service.  Additionally, the IPv4 approach to internet addressing does not readily support transmission of real-time data or resource reservation, and it has the further burden of a fixed packet header.  The fixed header is usually a federation implementation hurdle because it forces the user to adopt implementation-unique solutions when problems related to message size, routing, multicast or other services, arise at the IP level during federation execution.Another shortfall of IPv4 is that it does not adequately support the transmission of real-time data streams (such as voice or video.)  Furthermore, IPv4 does not have a standard mechanism to support resource reservation or quality of service specification.  Additionally, IPv4 only poorly supports the specification of the amount of time a packet can exist within a network before it is automatically terminated and IPv4 does not support the creation of virtual circuits.  IPv6 addresses all of these shortfalls and provides other improved capabilities in conjunction with IP header flexibility, which can be exploited to assemble improved distributed simulation environments.The IPv4 approach to addressing and message routing does not readily support network resource reservation and the small fixed packet size causes choppy video presentation and noticeable packet drop-outs.  A final problem is that the IPv4 32-bit address space is nearly saturated.  As a result, unique or high-density addressing schemes can not readily be supported by IPv4 and a number of implementation-unique remedies to the 32-bit addressing limitation have been developed.  While these stop gap measures can currently satisfy the needs of the internet, they do lead to networking difficulties but these measures can not satisfy the demands of the next generation of networking and so their performance does not scale.2.3	Introduction to IPv6IPv6 addresses the shortfalls in IPv4 discussed above (as well as other shortfalls mentioned below) by adopting a 128-bit address space, 64k+ bit packets, and a flexible header format.  For our purposes, the flexible header format is the most important change to the IP.  The flexible header format will allow the simulation community to standardize upon a few unique headers that will suite the needs of its federations while at the same time permitting the continued use of the commercial, off-the-shelf communications equipment that supports IPv6, and so minimize implementation and maintenance costs.Figure 5 presents the IPv6 packet format.  In IPv6, here are six kinds of optional headers that have been defined.  The first portion of the standard header specifies that IPv6 is being used to transport the data.  The next three portions of the header specify how the packet should be routed and the fragmentation performed on the data.  The hop-by-hop options portion of the header is used to handle large datagrams, thereby permitting datagrams to be much larger than the standard 64kb limit.  IPv6 allows a datagram to be 1 Mb or more in size.  In IPv6, the limit on datagram size is an engineering decision made by the network implementer that depends upon the maximum size of a datagram that can be efficiently handled by intermediate networks/hosts and upon the need to minimize fragmentation since fragmentation is computationally costly.  The routing portion of the IPv6 header extension tells each intermediate router whether a full or partial route to follow has been specified and the specific routers that must be visited by the packet along the way to its destination.Another advantage of IPv6 is that message fragmentation occurs before transmission begins, whereas in IPv4 fragmentation is performed as required by any of the intermediate routers.  As a result of pre-fragmentation of the message packets, the source host can specify the type of fragmentation performed, the number of fragments, the number of fragments that follow the current datagram, the datagram identifier, and the specifics needed by the recipient to reassemble the information.  Pre-fragmentation also reduces the message handling computational burden imposed on the intermediate network routers.  The authentication and security portions of the header are included to improve the inherent security of the transmission, but do not serve as a replacement for other forms of transmission security such as encryption.  The authentication portion of the header provides a mechanism for authenticating the source of a packet.  The encryption portion of the header contains the public portion of the key for an encryption algorithm.  The destination options portion of the header contains information that is only needed by the recipient host.As noted previously, IPv6 uses a 128-bit address space and a flexible header format in conjunction with optional headers.  This combination permits a sender to specify and use only the services that are needed and minimizes the amount of bandwidth consumed since IP services that are not used do not have space allocated for them in the header.  IPv6 has an inherent capability for supporting resource (bandwidth and networking facilities) allocation.  A further capability in IPv6 is its inherent ability to support customized extensions to the protocol and to the packet header.  The basic IPv6 header consumes only 40 bytes and can support up to 64kbytes of data per packet.The IPv6 also provides an improved capability for managing network resource allocations and for providing quality of service (QOS) guarantees.  The QOS guarantee improvements are achieved by permitting the sender of a message to request a QOS level, which is forwarded from router to router along the entire path from the sender to recipient.  All of the routers that were probed are required to respond affirmatively if they can satisfy the request or alternatively to specify the minimum level of service that can be provided.  To provide an increased level of assurance of the quality of service, the IPv6 performs message fragmentation at the message source and not at the intermediate routers, as is currently done for IPv4.  Fragmentation before transmission does require prior coordination of the required level of service; however, the computational savings and network latency savings can be substantial because the intermediate routers are not required to determine if fragmentation must be performed and they do not need to re-assemble messages.  Intermediate routers can retransmit the packets as fast as they can read the header and re-insert the packet into the appropriate network.IPv6 has other advantages that can assist in the development and execution of distributed simulations.  The requirement to specify the lifetime of a packet in terms of number of hops instead of elapsed time will minimize the consumption of network resources by lost packets in the network.  The 128-bit address space can be used to establish a multi-level hierarchy of addressing within a distributed simulation environment.  The multi-level address hierarchy permits addressing of individual components of simulation systems and supports fine-grained contact between components of a simulation environment without the need to worry about over-consumption or over-flowing of the address space.The greatest attraction of IPv6 lies in its inherent ability to support custom additions to the basic header format, and it is in these custom additions where research by the distributed simulation community is required.  For example, IPv6 can support real-time delivery of audio and video, and this capability should be investigated and exploited to determine if it can provide low-latency and high-accuracy data transmission and custom delivery of data to support distributed simulation training, analysis, and experimentation needs.  We will next turn to a discussion of the potential uses of IPv6 in distributed simulations and how the HLA documentation should be changed in light of the capabilities provided by IPv6.HeaderDataFigure 1:  Generic Packet Layout and FormatApplicationTransportInternetNetwork InterfaceFigure 2:  The Transaction Control Protocol/Internet Protocol (TCP/IP) StackTCP Header (shown for reference purposes only)Source portDestination portSource NumberAcknowledgement NumberData Offset and FlagsWindowChecksumUrgent PointerOptions & PaddingFigure 3:  The Internet Protocol Version 4 (IPv4) Packet HeaderBase Header IPv6Extension Header 1...Extension Header NData/PayloadFigure 4:  The Generic Internet Protocol Version 6 (IPv6) Packet HeaderIPv6 Header FormatIP v6 HeaderHop-by-hop optionsRoutingFragmentationAuthenticationEncapsulation securityDestination optionsTCP HeaderDataFigure 5:  Details of the IPv6 Basic Header Format3.	DiscussionIn our view, the distributed simulation community should immediately begin the transition to IPv6, start experimentation on the use of IPv6, and determine where best to exploit IPv6 capabilities to improve all distributed simulations and federations.  This transition necessarily has two aspects:  the identification of the capabilities that should be exploited in IPv6 and the modification of the Federation Development (FEDEP) process so that the exploitation of IPv6 occurs as an integral part of federation design.  We will first turn to a discussion of the IPv6 capabilities that the distributed simulation community should exploit and conclude this section with a discussion of the modifications to the FEDEP that are indicated.3.1	Exploitable IPv6 CapabilitiesTwo aspects of IPv6 that can be effectively exploited are the capability for specifying the traffic class and the type of traffic within a class.  Each traffic class, and potentially each type of traffic in a class could be handled as a multicast group using IPv6.  A traffic class defines the general characteristics of the data being transmitted and so provides an indication of how the packets in the class should be handled.  To illustrate the point, one class of traffic is real-time traffic and another class of traffic is interactive traffic, each class can have its own latency and performance requirements.  Within a class, there can be a number of subtypes of the class, which are organized into data streams.  Data streams in a real-time class could contain data transmitted from radiating sensors, phenomenology, weapons projectiles, or other models.  The ability to classify IP traffic and to identify even the data stream that a particular data flow belongs to permits better use of networking resources and insures that the highest priority classes of traffic and data streams always receive the handling priority that they need.  In addition, IPv6 supports the use of traffic class and flow labels.  Traffic class and data stream labels enable a reduction in the computational burden imposed on the intermediate routers by network traffic.  Traffic class and flow labels would permit a distributed simulation to have a number of classes of traffic flows operating concurrently and yet give each class customized handling depending upon their priority.  Traffic class and data stream labels can also reduce the computational burden on the hosts in the federation.  Class and data stream labels allow hosts to selectively extract the data they need from the network traffic at a relatively low level in the network stack, which means that every packet need not be examined in detail to determine if it contains data that is of interest to any entity on the host.  The benefits of this technology to entity publication, subscription, and multicast group identification are obvious.A final advantage of having traffic and data stream labels is that multicasting is readily supported at the IP level, which will minimize the computational burden forced upon computer hosts in the federation during multicasting.  This feature alone may be sufficiently powerful to entice the simulation community to rapidly adopt IPv6, since multicasting is trivially accomplished in IPv6.  Ipv6 imposes a minimal computational cost while simultaneously boosting the overall efficiency and complexity of the distributed simulation.Security and authentication are a concern for current distributed simulations and their importance will only increase; therefore, the ability to employ a number of different authentication and security measures within a single simulation environment will be advantageous.  The security and authentication options provided in the IPv6 header permit the distributed simulation environment to have a number of different security levels in operation simultaneously within the same federation and the level of security for the data in a packet could be determined solely by examining the IP packet header.  As a result, the payload need not be examined until it reaches its destination and the computational burden is minimized.  Furthermore, the security of a packet could be increased by incorporating a reference to an external decryption key within the IPv6 packet header.Another important inherent capability of IPv6 is its ability to perform multicast group management during federation execution and to change the multicast grain during federation execution.  IPv6 will also increase the effectiveness and speed of actor migration.  Because of the large address space provided by IPv6, each entity in a federation can have its own IP address, and different parts of the same entity can have its own IP address since the IPv6 address space is so very large.  The data transmission portion of entity migration then becomes a straightforward matter since an entity can move from host to host and traffic addressed to the entity will automatically arrive at the entity’s new host by simply following the entity’s IP address as the entity moves.  In addition, the large packet size will permit the rapid and efficient transfer of the entity’s state, knowledge base, and any other information that is required by the entity in order to re-establish its operation at a different computer host.As noted previously, IPv6 inherently supports a guarantee of quality of service in its delivery of packets and in satisfying timing requirements.  These guarantees are especially important in simulation environments where unacceptably high latency can reduce the fidelity of the simulation environment and reduce the quality and utility of the subsequent analysis.  Quality of service guarantees, especially real-time and latency guarantees, will have a positive impact on simulation fidelity, especially in federations that require the simulation of devices that have real-time needs, such as sensors, jamming systems, countermeasures, and information warfare components since these aspects of the virtual battlefield require precise timing to properly portray their effects.One means for insuring that real-time or other stringent timing requirements are satisfied is to use the IPv6 capability for establishing a virtual circuit to transmit data.  In a virtual circuit, unlike normal packet switching, the route to be followed by a series of packets is fixed and only minimal work is performed at the intermediate routing hosts, which will insure that the packets reach their destination with minimal network-induced delay and with the imposition of a minimal computational burden on the intermediate router hosts.A final consideration is the use of the capability in IPv6 to define customized extension headers.  The chief argument for their use is that they can make some tasks, such as federation management and entity migration, easier to perform because the headers can be used to identify data that requires special handling and any information needed to handle the data properly.  The danger in using extension headers is that their use tends to make achieving interoperability more difficult to achieve.  Therefore, we believe that the IPv6 header extension mechanisms should be exploited in a standardized manner by the simulation community and not in an ad hoc fashion.  Some design and experimentation effort should be targeted toward defining a set of HLA specific extension headers that explicitly address distributed simulation requirements.3.2	Indicated Changes to the HLA Documentation and the Federation Development ProcessThe changes caused by a migration to IPv6 revolve around two main points:  changes to the Federation Object Model (FOM) and Simulation Object Model (SOM) documentation and changes to the Federation Development process (FEDEP).  The changes to the FOM and SOM should include provisions for documenting timing and latency requirements that IPv6 can address.  The revised FOM and SOM should also document the multicast groups that a federation would contain, the requirements for entering and exiting a multicast group, and the data available in each multicast group.  Because of the capability for effectively using multicast groups, the FOM and SOM documentation should be extended to include information related to traffic classes and the information streams within each class.  The class and stream documentation should be cross-referenced to the multicast groups that they serve.  In our opinion, the multicast groups should be used to define the traffic classes and streams within the federation and there should be a direct correspondence between the hierarchy of the multicast groups and the hierarchy formed by the traffic classes and streams.  The FOM and SOM should also document any special purpose IP headers developed for the federation, their use, and the justification for their development.  The FOM and SOM should also document the security and authentication requirements for the federation that IPv6 can support, which should include the types of encryption used and the means of authentication.  Finally, the FOM and SOM extension should document the format and placement of any extension headers in the IP header block that are used by the federation.The modifications to the Federation Development Process that are indicated are narrow in scope and targeted at identifying the aspects of behaviors and interactions that can benefit from the capabilities offered by IPv6.  The current FEDEP is, at best, an awkward guide to assembling a federation.  First of all, the FEDEP should be modified so that the process includes specific steps to follow to identify the data that should be encrypted and which portions of the data or data streams possess special timing requirements, the nature of those requirements, the effect of missing the requirements, and the data’s priority.  A second issue is identification of multicast groups that should be in operation at the start of federation execution and the conditions for adding new multicast groups, for changing membership in multicast groups, and for terminating multicast groups.  By identifying these multicast operational criteria and incorporating them into the federation documentation, we believe that the resulting federation will make the best use of its available network bandwidth.  A third issue to be addressed is the identification of the traffic classes and streams and relating them to the multicast groups that were identified.  Currently, the FEDEP lacks an accepted methodology for identifying and specifying the multicast groups required by a federation, for identifying the amount of bandwidth and other network resources that should be committed to each group, or for identifying the members of the group.  Currently, multicast groups are identified in an ad hoc, trial and error fashion.   We believe that the distributed simulation community should develop a methodology that addresses these three multicast group issues and that ties the results of multicast group analysis to the identification and definition of traffic classes and streams.  This methodology must support identification, implementation, and allocation of the network resources required by the federation and also document how the network and multicast bandwidth resources should be allocated in the federation.  A fourth issue related to multicast groups is determining the criteria for changing multicast group grain; that is, determining when a multicast group should change the size of its geographic boundaries, membership, or information stream flow.  A fifth issue is determining when to initiate a multicast group.  All of these multicast criteria should be captured in the FOM and SOM documentationAnother needed modification to the Federation Development Process is development of a methodology and IPv6 documentation that addresses the latency, bandwidth, and real-time requirements for the data that must be transmitted.  Currently, the FEDEP does not explicitly address these issues.  We believe that these issues should be addressed for each class of traffic and for each stream of each class as well as for each data item.  The necessary documentation should be embedded in the FOM and SOM as they are developed and should indicate the traffic class and stream assignments for each data item.  The FOM and SOM documentation should explicitly address the maximum tolerable latency for the data items and for each class and stream of traffic.  The documentation should address the conditions for terminating each traffic class and stream, the conditions for initiating a stream, and the minimum and optimal bandwidth that should be allocated to support each class of traffic and each stream in each class.Following up on our recommendation for the development of a standard set of IPv6 extension headers, the distributed simulation community must address the federation documentation needs imposed by the availability of optional headers.  The distributed simulation community should develop a set of documentation for all accepted extension headers, a methodology to aid in determining when each type of custom header should be used, a methodology for developing and publishing a new type of header, and documentation of the format for the data segment that accompanies the custom extension.A final consideration for the FEDEP is determining when virtual circuits should be established in order to provide a desired quality of service.  A virtual circuit establishes a semi-permanent connection between a transmitter computer and recipient computer, thereby minimizing packet header processing at intermediate routers and also minimizing the latency through the network.  The FEDEP should take explicit steps that will lead to the identification of the required methodology to identify virtual circuits, their performance specifications, and the type(s) of data that each of the circuits should carry.4.	Summary and Future WorkIn this paper we discussed the capabilities that IPv6 can provide to the simulation community and to HLA federations.  We indicated how the capabilities of IPv6 can be exploited to improve the performance of distributed simulations.  IPv6 can be used to flexibly and to dynamically improve bandwidth allocation for a federation and it can improve the operation and fidelity of federations.  We also discussed the modifications to the HLA documentation that are indicated in order to capture the needs of simulation entities vis-a-vis IPv6.  Nevertheless, much remains to be done, and so we will conclude this paper with a few suggestions concerning the direction of future efforts.One research topic that should be addressed immediately is that of the extension packet header formats.  The IPv6 capability for using customized headers for particular communications needs can be a powerful device for improving the fidelity and accuracy of a simulation environment.  However, the maximum benefit of this capability can only be achieved if some effort is devoted to standardizing the types and formats of extension packet headers and of the data segments in the packets as well.In addition to developing standardized extension headers and packet data formats, the distributed simulation community should start the process of incorporating the IPv6 capabilities into the HLA standard.  We mentioned a few of the areas that should be addressed in this paper, but the main point is that the HLA standard should rapidly evolve so that it can fully capture and exploit the capabilities that IPv6 offers to HLA federations.  In addition to modernization in the HLA standard, the FEDEP should be revised as well.  The revision should address the development of a methodology and documentation formats that help federation designers and user to recognize opportunities to exploit IPv6 capabilities and insure that exploitation of IPv6 capabilities are accomplished as a standard part of the development of a federation.  Additionally, the FEDEP revision and the HLA standards evolution should be pursued in a timely manner so that re-use and interoperability between IPv6 federations and federates is assured.  Finally, experiments should be executed to evaluate the utility and refine the ideas that we have presented in this paper.ReferencesComer, D.E. (1995) Internetworking with TCP/IP: Volume 1, Principles, Protocols, and Architecture, Prentice Hall, Upper Saddle River, NJ.Comer, D.E. and Stevens, D.L. (1995) Internetworking with TCP/IP: Volume 2, Design, Implementation, and Internals, Prentice Hall, Upper Saddle River, NJ.Comer, D.E. (1999) Computer Networks and Internets, Prentice Hall, Upper Saddle River, NJ.Hartman, J.J.; Bigot, P.A.; Bridges, P.; Montz, B.; Piltz, R.; Spatscheck, O.; Proebsting, T.A.; Peterson, L.L.; and Bauer, A. (1999) "JOUST: A Platform for Liquid Software," IEEE Computer, vol. 32, no. 4, April, pp. 50-56.Minoli, D. and Schmidt, A. (1999) Internet Architectures, Wiley Computer Publishing, New York, NY.Smith, J.M.; Calvert, K.L.; Murphy, S.L.; Orman, H.K.; and Peterson, L.L. (1999) "Activating Networks: A Progress Report," IEEE Computer, vol. 32, no. 4, April, pp. 32-41.Stallings, W. (1998) High Speed Networks: TCP/IP and ATM Design Principles, Prentice Hall, Upper Saddle River, NJ.Tanenbaum, A.S. (1996) Computer Networks, 3rd ed., Prentice Hall, Upper Saddle River, NJ.Tennenhouse, D.L. (1997) "A Survey of Active Network Technology," IEEE Communications, Jan., pp. 80-86.Wetherall, D.; Guttag, J.; and Tennenhouse, D. (1999) "ANTS: Network Services Without the Red Tape," IEEE Computer, vol. 32, no. 4, April, pp. 42-49.Author BiographiesMartin R. Stytz is a Chief Principal Research Scientist and Engineer at the Air Force Research Laboratory.  He received a Bachelor of Science degree from the U.S. Air Force Academy in 1975, a Master of Arts degree from Central Missouri State University in 1979, a Master of Science degree from the University of Michigan in 1983, and his PhD in Computer Science and Engineering from the University of Michigan in 1989.  He is a member of the ACM, SIGGRAPH, SIGCHI, the IEEE, the IEEE Computer Society, Simulation Industry Association of Australia, American Association for Artificial Intelligence, and the Society for Computer Simulation.  His research interests include virtual environments, distributed interactive simulation, distributed systems, modeling and simulation, large-scale system architecture, design, & development, distributed software development, the web, cyberwarfare & modeling, computer graphics, graphical user interfaces, distributed simulation, distributed virtual environments, user-centered decision support, large-scale systems design, cybersensors, human-computer interaction, computer generated actors, intelligent agents, medical virtual environments, information security, software engineering, information visualization, medical virtual environments, and software engineering.SHEILA B. BANKS is the president of Calculated Insight.  Dr. Banks received her Bachelor of Science from the University of Miami, Coral Gables, FL in 1984 and a Bachelor of Science in Electrical Engineering from North Carolina State University, Raleigh, NC in 1986.  Also from North Carolina State University, Raleigh, NC, she received a Master of Science in Electrical and Computer Engineering in 1987 and her Doctor of Philosophy in Computer Engineering (Artificial Intelligence) from Clemson University, Clemson, SC in 1995.  Her research interests include artificial intelligence, human behavior and cognitive modeling, intelligent computer generated forces, associate and collaborative systems, distributed virtual environments, intelligent human computer interaction, and man-machine interfaces. Routing is the process of choosing a path through the network, or internetwork, for packets to follow. A router is a computer in a network whose sole purpose is to make routing decisions.  IP routing is the process of routing IP packets across physical networks.  Generally, routers form the bridges between networks, allowing data to move freely between networks and hiding the properties of each of the networks it is connected to from all of the other networks it services. As fragmentation increases, the computational expense incurred in managing the network traffic also increases. The requirement to pre-fragment the message before transmission is the justification for an initial probe message that transits the network and returns to the sender before transmission of the actual message commences.  The probe helps the originating host computer to determine the best size to use for the message fragments and also gives a strong indication concerning the optimum route for the packets to follow to reach the destination. The first eight bits of the IPv6 address space are used to indicate the broad class of service desired for the packet being transported.  For example, the bit mask 0000 0000 is reserved to indicate an IPv4 address (which is only 1/256th of the available IPv6 address space), which enables full backward compatability with existing internet addressing schemes.		PAGE  