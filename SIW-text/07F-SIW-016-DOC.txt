BML Development by a Task Analysis MethodologyJeff AbbottAcuSoft, Inc.11869 High Tech AveOrlando, FL, 32817USA001-321-235-7716jabbott@ideorlando.orgDr. Michael R. HiebCenter of Excellence for C4IGeorge Mason University4400 University DriveFairfax, VA   22030USA001-703-993-3990mhieb@gmu.eduPer M. GustavssonSaab Microwave SystemsStorgatan 20SE-541 30 Skövde,Sweden46-31-794 8939Per.M.Gustavsson@saabgroup.comKeywords: Battle Management Language (BML), Military Standard Definition Language (MSDL), Joint Consultation, Command and Control Information Exchange Data Model (JC3IEDM), Command and Control (C2), Grammar, Linguistics, Orders, Task, MissionsABSTRACT: This white paper presents “one” way of developing grammars and vocabularies for Battle Management Language (BML) through a methodology of task analysis.  Consider that collective task manuals, such as the US Army’s Mission Training Plans (MTPS) are based on a common set of measures.  If these measures are common across the tasks, the standardization of the measures may provide “one” aspect of specifying a BML.  These measures originate from task lists such as the Army’s Universal Task List (AUTL) and the Universal Joint Task List (UJTL).  The methodology presented in this paper demonstrates how these task lists can be used to normalize Mission Training Plan (MTP) collective tasks down into a tasking language that fulfills many of the objectives of BML and the Military Standard Definition Language (MSDL).IntroductionIf a language for battle management is to be successful it must scale across those organizations to which it applies.  This means BML will have to integrate with existing infrastructures for doctrinal development, training & training development, and operations.  Past papers have explored various facets or faces of BML that must be supported [4, 5, 6]. This paper examines the implications of such integration between operational C2 systems, JC3IEDM, and simulation (SAF-CGF) systems from a lifecycle and mixed-discipline perspective.  The focus on lifecycle exposes insights into what a feasible BML implementation will require across the disciplines of engineering, training development, behavioral sciences, military doctrine, and emerging applications of computer science.Figure 1 shows how BML could support simulation execution.  C2 information is stored in the JC3IEDM database and provided to the simulation in an abstracted format via BML. The underlying thread of this approach assumes the Measures of Performance and Measures of Effectiveness of collective and individual tasks were derived by training developers from the command and control methods used in the conduct of the tasks.  If we accept this premise it leads us to an understanding that while a BML solution may be normally thought of as the marriage of technology and doctrine, the effectiveness of BML lies in the disciple of training development.BML Premise  AUTONUMLGL  \* Arabic \e : Measures of Performance and Measeures of Effectiveness of service specific tasks are derived by training developers based on the needs of command and control rather than training.Figure  SEQ Figure \* ARABIC 1: BML Integration with JC3IEDM and M&SFigure  SEQ Figure \* ARABIC 2: Task Layers of BML HierarchyA top down approach to conducting such a task analysis would logically begin with the highest level task available.  Coalition tasks would be the optimal starting point, but we start at the next highest available task list, the Universal Joint Task List (UJTL).  The UJTL identifies the service specific tasks, such as Army Universal Tasks (AUT) and then decompose the AUT down the terminal components of those tasks.  In the process of the decomposition the analysis is used to document how terminals are applied to represent higher order terms.  For example, a route is a higher order term built upon lower fundamental terms of language or terminals to include items such as start and release points, check points, halt points, halt times and other terms.  The unambiguous specification of this decomposition can enable computational systems to understand the complex hierarchical representations underlying the military language.  In the introduction of the UJTL this general description of the document is provided:“The UJTL, when augmented with the Service and applicable Defense agency task lists, is a comprehensive, integrated menu of functional tasks, conditions, measures, and criteria supporting all levels of the Department of Defense in executing the National Defense Strategy and the Military Strategy.”  [1].This statement supports the methodology presented in this paper and indicates the feasibility of the approach.  The next premise we make is that the highest order terms decompose directly to the highest order tasks (at the Coalition level), and so the lowest order terms aggregate directly to the lowest order tasks (at the Service level).BML Premise  AUTONUMLGL  \* Arabic \e : Service specific tasks form the foundation or bottom layer of the BML hierarchy; building to Joint, National, and Coalition tasks. .Inspection of this premise leads to the realization that the higher order tasks are specified by the next highest order tasks like the layers of a system architecture as shown in Figure 2.  From this perspective, we can see a higher level task is dependent on the specification of tasks in the next lower layer.  This leads us to our next premise:BML Premise  AUTONUMLGL  \* Arabic \e : A common approach to specifying BML is necessary due to the dependencies of higher order tasks on lower order tasks.Consideration of the feasibility of this premise leads to two conclusions or reasons for documenting a common approach to BML task analysis.  First, the complexity and scope in specifying a tasking grammar that encompasses service, joint, national, and coalition boundaries is far too broad for any single organization to solve.  Second, it is too resource expensive for any single standards group to produce a complete BML specification without support and funding from the stakeholders who will benefit from the specification.  This BML specificationwill require stakeholder backing and participation.  The backing solves the resource problem.  Participation means each stakeholder will be responsible for developing the specification in the scope of their doctrine, and maintaining that specification through the same lifecycles of development that exist for their collective task manuals today.Now consider the implications of how such a BML implementation might relate to task doctrine today.  REF _Ref157247660 \h Figure 3 below depicts the boundary conditions.  If all tasks were defined in a common language (BML), equivalent tasks across service and national boundaries could be normalized down to a common instance.  Today the left boundary represents the scope of tasks as they are maintained in doctrine.  The lack of clear equivalence across doctrine and domain boundaries results in a pyramid.  In a perfect world we might expect a fully normalized set of tasks reflect the scope depicted in the right boundary.  At this boundary the set of tasks grows upward, as a few words in a language can combine to represent many different sentences.  Realistically we recognize a feasible solution falls somewhere in between, as depicted in the middle.Figure  SEQ Figure \* ARABIC 3: Boundary Conditions of BML NormalizationSelect a Task.The first step in this task analysis is to select a top (highest) level task to analyze.  In order to keep the discussion concise and demonstrate the value the approach, we will begin with a Joint task.The universal joint task “Conduct Tactical Airlift” will be used as a starting point.The Army service specific task for “Conduct Tactical Airlift” (CTA) is “Conduct Tactical Road March” (CTRM).  At first inspection there appears to be a mismatch between these two tasks.  This “appearance” of a mismatch will be clarified shortly.Table  SEQ Table \* ARABIC 1: AUT Conduct Tactical Road March (CTRM)AUTART 2.3.3 CONDUCT TACTICAL ROAD MARCH2-37. A tactical road march is a rapid movement to relocate units within an area of operations (AO) in order to prepare for combat operations. Commanders arrange troops and vehicles to expedite their movement and conserve time, energy, and unit integrity. They anticipate no interference except by enemy air, special operations forces, or sympathizers. Units conducting tactical road marches employ three tactical march techniques: open column, close column, and infiltration. (FM 3-90) (USACAC)To clarify this discussion the paper will use the term “task” to refer to task outside the context of a mission.  The term “order” will be used in reference to tasks in context to a mission including directed or specific measures of effectiveness specified in that order.BML Premise  AUTONUMLGL  \* Arabic \e : A task becomes an order when a higher element tasks a unit including mission specific measures of effectiveness.Analyze the Measures.The analysis methodology begins with the inspection of the task’s measures.  The measures are analyzed to identify the terms applicable to command and control.Table  SEQ Table \* ARABIC 2: Terms in Measures of Conduct Tactical Road MarchNo.ScaleMeasure01Yes/No Unit crosses and clears SP and RP at designated times.02Yes/No Unit follows the prescribed route without deviation unless required otherwise by enemy action or on orders from higher headquarters.03Yes/No Enemy does not surprise the unit main body through a failure to conduct appropriate security operations.04Yes/No Unit employs appropriate tactical march technique (open column, close column, or infiltration).05Yes/No Unit task organizes properly for tactical road march.06TimeTo initiate movement (task start)07TimeTo complete movement (task end)08PercentOf force completing the movement.09PercentOf unit casualties.The terms are then identified in Table 3, the nouns are bolded, the verbs are underlined, and the adjectives are italicized.  This approach to visual attribution serves to facilitate the analysis to follow.The adjectives are key attributes in the analysis.  They are used to discriminate between directives and guidance when included in context to an order (remember the premise that measures of MTP tasks are measures of command and control, not of training).  For a computational system, such as computer generated forces, to understand the tasks in context to an order, it is important to document/communicate the difference between guidance (prescribed in this case) and directive (designated) as specified in the doctrine of the tasks. Identify the Constituents of a BML.The next step in the analysis is to identify the Constituents of a BML (informally this has been the “5Ws”).  This paper discusses the Constituents of BML from an informal 5W perspective to convey the concepts presented without having to present the complications of linguistics and grammar. The results of this step reflect greater complexity than past BML efforts have identified.The who portion includes the units that command and that perform the task.  The what takes a bit more analysis.  It is important to differentiate between how a task is used and how it functions.  This is a critical part of the analysis.  When we document the “use” of tasks we place false barriers on the understanding of the true function the successful task performance depends upon.  Focusing on the “function” enables us to normalize language across use cases (tasks).  In practice, identifying the function of a capability can be a difficult practice.  For example, the use of a telephone is to talk.  But the function of a telephone is to send and receive signals.  By focusing on the function we realize that any device than can send and receive signals can be used to talk. Hand and arm gestures for example, radios, cellular telephones, and so on. Fortunately the AUTL has done a good job of identifying the function served by each task.   Note the first sentence of the task description in  REF _Ref157247789 \h Table 1.  “A tactical road march is a rapid movement to relocate units within an area of operations (AO) in order to prepare for combat operation.”  The function of the task is to “relocate units within an area of operations.”  The next constituent of the 5Ws is the where.  The where is of course the route, but as presented earlier the route is a higher order term built upon lower terms to include the start point, release point, check points, halt points, and other terms each of which take us closer to the terminals.  This method of abstraction provides a means to identify a patter of high level behavior based on higher order terms. It should be noted that the terms identified here are not terminals themselves, as the locations of those points have not been identified as yet.  The use of points and other graphic measures in specifying BML is, like the route, a powerful abstraction that allows the location to change or be re-specified without impacting on the higher order terms used in context to the task or order.  The specific points, by name/designation, remain unchanged, while the terminal locations change as necessary in context to command and control.BML Premise  AUTONUMLGL  \* Arabic \e : Domain layers of tasks from lower to higher tasks abstract away underlying complexities to enable the development of higher level cognitive (computation) functions.Continuing on we reach the when, a term of time represented by the task start and task end; time to initiate and complete the movement.  The when like the where is not necessarily a terminal.  A time can be designated as a planned event, phase, or designated “H” hour.  Again, this level of abstraction is a powerful tool that allows the concept of command and control to be developed and changed without affecting the underling understanding of the order.  Now consider the possible uses of such abstractions.  For example, as details develop such as specific locations of points, and times of events, it becomes possible to compute the feasibility of the plan, or more to the point, the ability to computationally estimate the terminals of time and location based on inputs such as the estimated rate of travel.  The abstractions enable computational course of action analysis.Finally we reach the why, a term of intent or reason for performing the task (conditions).  Like the what, the why is identified in context to the underlying function, rather than use of the task.  Again the AUTL has done an excellent job of identifying the function of why a task is performed.  The conditions for conducting a tactical road march can be found in the first sentence of the task description in  REF _Ref157247789 \h Table 1 to “prepare for combat operations.”Table  SEQ Table \* ARABIC 3: 5Ws of Conduct Tactical Road MarchWhoUnitWhatRelocate units within an area of operationsWhereRoute, Start Point, Release PointWhenCross time, clear timeWhyContext DependentFrom this discussion we have another premise:BMP Premise  AUTONUMLGL  \* Arabic \e : Terms (the BML vocabulary) are derived from and traceable to domain specific doctrinal tasks.This premise leads to the understanding that development of BML vocabulary begins with the analysis of doctrinal task lists, or in other words, the terms of BML vocabulary are derived from the decomposition of those tasks into terms of BML.Decompose Higher Order Terms.The next step of the analysis is to specify the terms, both constituents and terminals.  Due to the broad scope of BML, these terms will require a structured representation (consisting of data types and enumerations) to provide scope and boundaries of their use.  Without explicitly defined boundaries, computational systems will have to deal with ambiguous conflicts in the domain use cases of terms where they are used in similar ways.  For example, and air route and ground route are both routes.  But their underlying terminals are different.  If BML is to unambiguously communicate between systems the higher level terms of language, they must be communicated in the proper context..  Table 5 below summarizes the constituents and terminals representing the 5Ws. There are terms that we have not identified for this task.  Measure 03 specified for the task is “Enemy does not surprise the unit main body through a failure to conduct appropriate security operations.”  It is not clear from this measure what the terms might be.  Time for another assumption or premise:BML Premise  AUTONUMLGL  \* Arabic \e : Measures which don’t include adjectives of command and control are the sole responsibility of who performs the task.Table  SEQ Table \* ARABIC 4: BML Term for the Conduct Tactical Road March TaskTermDescription in task contextTerminalData TypeUnit*Identifier of the unitTRUEWho.Ground.UnitUnit Main BodySubset of unit, other than security element, recon element, etcFALSEWho.Ground.Unit.ElementsRoute*Start point, release point, check points, halt points, etc.FALSEWhere.Gound.RouteRelease Point*End of routeTRUEWhere.TacticalGraphic.ReleasePointStart Point*Start of routeTRUEWhere.TacticalGraphic.StartPointCross Time*Date Time Group the unit is to cross a pointTRUEWhen.Time.AbsoluteClear Time*Date Time Group the unit is to cross a pointTRUEWhen.Time.AbsoluteTask StartDate Time Group the unit initiates movementTRUEWhen.Time.RelativeTask EndDate Time Group the unit completes movementTRUEWhen.Time.RelativeMarch TechniqueTactical march technique or formationTRUEWho.Ground.Formation.MarchEnemyEnemy air, special operations forces, or sympathizersFALSEThreat.Enemy.AirThreat.Enemy.SOFThreat.Enemy.Sympathizers* Indicates the terms of the 5Ws that are specified in an order from the higher command element.Relate the Measures of Performance and Measures of Effectiveness.BML Premise  AUTONUMLGL  \* Arabic \e : Measures of Performance (MOP) and the corresponding Measures of Effectiveness (MOE) are needed for SAF-CGF DevelopmentSo measures of effectiveness are measures that make the plan effective.  Measures of performance are measures of the unit’s actual performance.   For example, an effective rate of movement can be estimated from the length of the route, and the designated cross and clear times of the SP and RP.  The actual rate of movement of the unit along the route is a measure of performance.  The MOE can be related to the  “what” term.  The MOP can be related to the  “who” term.  These MOPs and MOEs have computational relationships that can be used to estimate performance and evaluate performance by those estimates; in other words, computational course of action analysis (COAA).  The function that implements computational COAA is dependent on the “what” term. So, just as we understand terms of BML represent a common language, there are common functions relating these terms  that can be used to make computational estimates of the plan.BML Premise  AUTONUMLGL  \* Arabic \e : Just as the terms of BML are common across domain boundaries, there are common functions inter-relating these terms.If we take another look at Table 5, there are a number of terms that could be interpreted as either measures of effectiveness or measures of performance. If we consider measures of effectiveness to be the known measures, or those used to estimate measures of performance, we understand the discriminator between a MOP and a MOE is a decision of command and control.  Fortunatly many of those decisions have already been made as indicated by the “*” in Table 5, where these MOEs are designated as part of the order.   For the others, decisions are made in context to the situation.  Selection of a march technique greatly depends upon the situational in regards to security.  The rate of movement takes into account many knows; cross and clear times, and route for example, but priorities of security and concealment also have implications.  These situational complications need to be considered when developing the BML because those detail needs to be communicated as well.  However, the challenges of using intelligent computational systems to distinguish between MOPs and MOEs based on the situation is not part of the problem in specifying BML, it is part of the problem of understanding BML in context to the situation.  So BML can assist in specifying the dependencies of measures (terms) on one another, as well as on the situational context to enable this understanding.In this way, when too many variables (terms) are not know, the situational context can be used to select estimates of values that reduce the risk associated with performance.  Without accounting for risk in context to the situation, intelligent systems would be left to rely on guess work.  So the situation provides contextual justification and rational for why specific decisions are made in regards to the MOPs and MOEs.  We have defined our 5th namespace.  The namespace of why is the situational context in which decisions must be made.Build the Black Box.The pattern of inputs (MOE), outputs (MOP), and underlying function specify a signature that computationally identifies a task.  Computational systems can recognize a task by its signature.  To begin with we define the a black box based on C2 inputs from higher, outputs measures of the actual performance of the task, and the task itself as the box’s function.  This ‘black box’ reflects a specific doctrinal definition of the task.  If an equivalent doctrinal task, under a different name or language, existed elsewhere, how would a system computationally recognize it as the same?  The problem is this black box represents a physical model of “Conduct Tactical Road March” (CTRM).Figure  SEQ Figure \* ARABIC 4: CTRM Physical Model (Domain Specific)If we define the physical model in terms of local components, we would enable the capability for computational systems to recognize equivalent tasks across domain boundaries of doctrine.  This may seem to be an optimistic statement, even ridiculous in nature; let’s explore further.  When two analyses are performed on tasks across service, national, or coalition (domain) boundaries, tasks that are actually equivalent, may include inputs, output, or function of a different name resulting in mis-matched signatures.  This is due to the nature of natural (human) language.  If we consider the names of the terms to reflect a physical model, or black box, of the task, we recognize that an underlying logical model exists as well, where data types replace terms, and functions replace tasks.  In other words, we can specify a logical model by replacing the named terms with the identification of their data types and functional representation.  Using the data types for the inputs, outputs, and function serves to normalize the language across domain boundaries merging these domains into a single ontology.  The identification of the inputs and outputs in a logical fashion simply requires the specification of their data types.  For the function of the task itself, we need to look again at what the task is intended to provide for. That what (relocate units within an area of operations) is the task’s function.Figure  SEQ Figure \* ARABIC 5: CTRM Logical Model (Computation)The result is an interface specification for the function, including the inputs and outputs.  This interface specification represents a significant step forward in making BML computational.  As a result of a defined interface for each function, the implementation can vary across domain instances of the task (branch, service, joint, national, coalition) while maintaining common signature.  So in our case, a system could computationally understand that “Conduct Tactical Road March” and “Conduct Airlift Operations” are functionally equivalent.  If we consider how we might use such an interface, the significance quickly becomes apparent.  Each function can be embedded into simulations, war-gaming engines, event C2 systems where the functions can be used to facilitate planning as embedded components of a C2 GUI. In our “Conduct Traveling Road March” example, the functions could be used to drive a Gantt chart on the GUI displaying a timeline for travel from start of movement to the start point, check/halt points, release point, and finally end of movement.  The times between points represent estimates based on expected rate of travel.  The times from start (and end) of movement to cross and clear time of the start point (and release point) would represent quartering and assembly activity time. EMBED PBrush  Figure  SEQ Figure \* ARABIC 6: Gantt chart ExampleTaking this one step further, a system could compare tasks (of the same function) by resource constraints (measures) and select the best task for the mission by the best measure of performance.  The challenge here is in defining ‘best’.  For example in CTRM is “best” interpreted as the fastest, most secure, most concealed, or some other measure of effectiveness; the answer of course would be found in the order itself as well as in the context of the situation (why).Computer Generated ForcesMuch of the promise of a computation battle management language involves semi-automated and computer generated forces (SAF-CGF).  The challenges of BML don’t end with the specification of the computational language alone.  Making BML computation is only one side of the problem.  A “bridge” must be constructed to span the gap between domain of computational systems and the domain of battle management.  In order to span this gap the foundation of the bridge must be built on both sides. The paper “Bridging the Gap for Embedded Modeling and Simulation” described the gap between SAF-CGF implementations and the military elements the CGF unit behaviors.  The paper went on to show that SAF-CGF systems did not make use of the same inputs for tasks as military orders do.  These behaviors relied on estimates of MOP based measures rather than measures of effectiveness.  In the CTRM example, CGF systems execute by estimates of performance (route, desired rate of movement, formation, etc), but measures of effectiveness such as cross and clear times are not present.  Hence the semi-automated portion of their name; for the CGF to model military forces accurately, a role player is required to direct the effectiveness of the CGF.  That paper accurately describes the foundation of the bridge that must be built on the CGF side of the gap.  For CGF to execute behaviors by BML orders, the CGF must be capable of interpreting those orders in the context of CGF behaviors/tasks.  The BML functions described in this paper can serve to accomplish just that.  These functions can transform MOE based terms into MOP based terms.  If a BML intelligent engine were to monitor CGF performance, that system could re-evaluate CGF unit performance of tasks at intervals or key events to take proactive action, ensuring the CGF unit performance remains effective (speed up, slow down, change formation, etc).  The SAF-CGF role player would be surrogated with a BML intelligent engine. Figure  SEQ Figure \* ARABIC 7: BML Intelligent Engine and SAF-CGFAs described in the paper, CGF behaviors don’t actually model military unit behaviors as a black box, unless the SAF role player is included as well.  This insight is more significant that it may appear.  The idea that SAF-CGF systems don’t model military tasks properly is not valid. They do model performance properly, what they don’t model is the decision making process that ensures effective performance.  A long term objective of SAF-CGF systems has been to automate behaviors of military elements company and above.  While some success has been achieved at the company level, the fully automated battalion, brigade and division tasks has eluded the modeling and simulation community. Just as BML promises to build from service level tasks up to coalition tasks, BML constructs can be used to build upon CGF behaviors providing fully automated command and control over CGF units.  BML could even provide a computational “second opinion” to military commanders as a decision aid when operating in time constrained environments.  Such systems could access the known situation and produce options of command and control in near real time.It is interesting to note the common pattern between operations and simulations.  In each case BML needs to be integrated with a task based language.  For operational C2, computational BML will be integrated under task based doctrine. For M&S CGF systems, BML will be integrated over the CGF task-performance based behaviors.  These efforts are reciprocals of each other.  In effect M&S holds the part of solution for operational C2 systems, and operational C2 systems have part of the solution for M&S. Figure  SEQ Figure \* ARABIC 8: Reciprocal Nature of C2 across Operational and M&S DomainsThis reciprocal relationship is a very significant insight.  Only through cooperative mixed disciplinary approaches of military C2, modeling & simulation, training/task development can the promise of BML be reached. ConclusionMuch work remains to reach the objectives of integrating BML with systems of C2 and M&S.  The work needs to concentrate not on the use of MSDL to initialize M&S or BML to provide for execution, but instead we need to concentrate on specifying MSDL as a functional simulation context of the scenario, and BML as a definition of command and control for both M&S and operations.Even when the technological basis of BML has been completed significant levels of effort will be required to integrate doctrinal tasks with the standards.  The same is true for M&S where work will be required to integrate cognitive Agent technology with simulation specific protocols for performance based command and control. Just as BML needs to be integrated under doctrinal tasks as a computational layer, BML needs to be integrated with over M&S as a cognitive layer of effective C2.  These are reciprocating efforts that accentuate the concept that M&S has already solved much of the operational problem, and operations have already solved much of the M&S problem.  These reciprocating problem sets can only be solved when all elements of operational battle command and training (service through coalition) cooperatively work with the M&S community on common approach/framework together.EpilogFrameworks help us to focus competition along clearly defined objectives, of technology and business.  Once common frameworks and standards for C2 information exchange have been defined, competition between implementations will provide a strong business model for all stakeholders to move forward on.  The framework will provide a level playing field providing for informed decisions in regards to technological selection of competing implementations.  Technologies will include simulations, C2 systems, protocols, after action review and even SCORM based instructional technology.  More importantly Integrated Development Environments (IDE) will compete for providing the solutions of mapping doctrinal tasks to BML , and developing cognitive agent functionality for integration so simulation (CGF) systems.  The integration of BML across C2 and M&S systems will provide computational course of action analysis and promises to enable automated generation of alternative courses of action.  One obstacle remains between us and these promises.  That obstacle is cooperation, or the lack there of.  Today cooperative efforts are being distracted and even diverted by competitive technological approaches that diverge our mutual understanding of the problem to be solved.  Competition is a necessary component, but today there are no winners, because we have not yet defined what we are competing to achieve (win).  In software frameworks and standards analogous to the common manufacturing standards and processes that enabled the industrialization revolution under the name of mass-production. Today’s stovepipes are analogous to the non-standard products of fine workmanship that came from skilled artisans.  The quality of such products surpasses that of their mass-produced counter parts, but at a price.References[1]	CJCSM 3500.04D, 1 August 2003, UNIVERSAL JOINT TASK LIST (UJTL), page A-1, Joint Staff Washington DC. [2] FM 7-15, 1 August 2005, THE ARMY UNIVERSAL TASK LIST (UJTL), page 2-24, Headquarters Department of the Army. [3]	“SOA: Enabler of Mass Customization”, Computerworld, web address;  HYPERLINK "http://www.computerworld.com/action/article.do?command=viewArticleBasic&taxonomyName=web_services&articleId=271603&taxonomyId=61&intsrc=kc_feat" http://www.computerworld.com/action/article.do?command=viewArticleBasic&taxonomyName=web_services&articleId=271603&taxonomyId=61&intsrc=kc_feat, 2007[4]	Tolk, A., S. Diallo, and C. Turnitsa, Merging Protocols, Grammar, Representation, and Ontological Approaches in Support of C-BML,” IEEE Fall Simulation Interoperability Workshop, September 2006[5] Schade, U. and Hieb, M.R., “Formalizing Battle Management Language: A Grammar for Specifying Orders,” IEEE Spring Simulation Interoperability Workshop, April 2006[6] Schade, U. and M. Hieb, “Development of Formal Grammars to Support Coalition Command and Control: A Battle Management Language for Orders, Requests, and Reports”, Proceedings of the 11th International Command and Control Research and Technology Symposium, CCRP Press, 2006[7] 	Pullen J.M., Hieb M. R., Levine S, Tolk A. and Blais C. “Joint Battle Management Language (JBML) - US Contribution to the C-BML PDG and NATO MSG-048 TA”, IEEE European Simulation Interoperability Workshop, June 2007[8] 	Gustavsson, P. M., Lundmark S. “One Step Further Towards the Next Generation Training Systems” to be presented I/ITSEC-07, Novemebr 2007[9] Diallo, S. and A. Tolk, “Adaptive Generative Grammar for JC3IEDM Web Services,” IEEE Spring Simulation Interoperability Workshop, March 2007Author BiographiesJEFF B ABBOTT holds a masters degree in engineering from the University of Central Florida.  Jeff has worked in the area of modeling and simulation for 20 years.  Much of that time has been spent working issues of interoperabity related to simulation based training.MICHAEL HIEB is a Research Associate Professor with the Center of Excellence in C4I at George Mason University. Dr. Hieb’s current research is in the area of developing formal languages for Command and Control. Dr. Hieb led the US Army team that developed the initial BML concept for the US Army. Dr. Hieb worked with the Army Modeling and Simulation Office to establish the US Army Simulation to C4I Interoperability (SIMCI) Overarching Integrated Product Team and is currently one of its senior technical architects. He received his PhD in Information Technology at George Mason University in 1996. He has published over 90 papers in the areas of BML, Simulation Interoperability with Command and Control Systems, and Multistrategy Learning.PER M. GUSTAVSSON is a Research Engineer at the M&S and Information Fusion office at Saab Microwave Systems (SMW) working with applied research in the area of advanced decision support systems. He is also an industrial Ph.D. student at University of Skövde. Gustavsson is currently a visiting scholar and Affiliate Research Faculty at the C4I-Center, George Mason University. Gustavsson is the Vice-Chair for the Coalition Battle Management Language (C-BML) and Co-Chair the Military Scenario Definition Language (MSDL) standardization. Gustavsson holds a M.Sc. in Computer Science, New Generations Representations, Distributed Real-Time Systems and a B.Sc. in Systems Programming both from University of Skövde, Sweden.