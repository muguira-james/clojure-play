Functionality of Exercise Initialization from the PC (Windows) DesktopJeffrey B. AbbottAcuSoft Inc.12249 Science Drive Suite 160Orlando, FL 32826407-658-9888Gene HagaSTRICOM12350 Research ParkwayOrlando, FL 32826-3276407-384-3686Dr. Mona CrisseyARL-HRED-STRICOM12350 Research ParkwayOrlando, FL 32826-3276407-384-3639Keywords:Exercise Planning, Interoperability,Exercise InitializationABSTRACT: Today’s military is becoming increasingly computer literate, however, most trainers do not use simulation often enough to become familiar with the specific exercise planning interfaces used in their simulation environments. Although, simulation has been moving closer to the desktop, integration of simulation with the user’s desktop will require migration of common desktop tools into simulation.  Familiarity of user interfaces for simulation planning and initialization tools can be achieved through the integration of desktop commerciasll off the shelf (COTS) products already in common use.  Most exercise plans originate in COTS products such as Microsoft Office.  These plans are then prepared for application to specific simulation environments.  The process of exercise preparation is primarily a task of transposing the Mission, Overlays, and Execution Matrices from desktop formats into formats compatible with specific simulation environments.  Desktop software is now sophisticated and powerful enough to automate this translation of exercise plan information (documents) into simulation formats for exercise initialization.  This process involves the transfer and integration of a simulation environment’s object model into common desktop tools.  The object model must be integrated with the planning tools so that through the course of exercise development, the plan may be captured in a format consistent with scenario generation.  Initialization of Close Combat Tactical Trainer (CCTT) exercise units, obstacles, and control measures from PowerPoint will be used as a practical example of this functionality.  In particular the paper will show how COTS products meet user requirements for an automated initialization tool and provide a uniform view of the training and simulation domains for both users and developers.1.  UniformityThe first step in interoperability between the exercise planning process and simulation is to provide a uniform view of the simulation domain to both the simulation developer and user (training developer).  Much of the information contained in training materials is used to drive the development of simulation-based exercises.  The problem is that little or no data from training materials can be used directly by simulation.  To provide a uniform view of the simulation domain, information requirements of the training domain must be mapped to the data requirements of the simulation domain.If a uniform view of the training and simulation domains is to be obtained certain assumptions must be made and tested.  The most important assumption is “The basic training process does not vary by training environment”.   This statement would suggest that whether in the live, virtual or constructive environment, training and simulation are equivalent.  If we accept this hypothesis, then the simulation domain falls within the training domain and we can conclude that the simulation process does not require the user to perform any tasks beyond those required for live training.  However, since simulation involves automation, some of the difficult tasks in the training process ought to be simplified, and some of the tedious tasks ought to be eliminated.  Statements as bold as these are not likely to be accepted at face value.  Let us examine the basic steps in the training process to see how well simulation maps to them. 1.1  Steps of the Planning ProcessWe will restrict ourselves to the steps of Plan, Prepare and Execute.  The Evaluation or Assessment step that makes up the After Action Review process will not be discussed in this paperPlanning is the first step in the training process. It involves the development of exercise objectives and the conditions under which the exercise is to be performed.  Conditions may be defined as the Mission, Enemy, Terrain, Troops, and Time (METT-T) constraints for the exercise.  Each mission impacts on the behaviors/tasks to be simulated and/or performed in an exercise.  Enemy and Troops identify the units to be trained as well as simulated.  Terrain identifies the terrain database and impacts on the locations of units and control measures.  Time available identifies constraints on schedule and exercise synchronization.Preparation for an exercise generally involves scheduling for and acquiring exercise assets.  This step maps well to simulation.  It is the preparation step in live training that can be the most difficult.  Here simulation greatly simplifies the difficult tasks of obtaining exercise assets such as equipment, fuel, ammunition etc.  Generally, all that needs to be done is to schedule the exercise with the simulation site, prepare for food, lodging and travel, and the simulation will generate (automate) the rest.Execution of a simulation-based exercise involves more than just performance of the tasks to be trained.  Execution involves appropriate stimulation of the training environment in circumstances designed to train appropriate tasks to standard, and to stress the training audience’s abilities to fulfill the exercise mission.  In simulation, the task of stimulating the training environment primarily falls to computer-generated forces (CGF), semi-automated forces (SAF) operators, unit commanders, and other role players and training participants.Evaluation and assessment are completed during the After Action Review for an exercise.  This step involves the collection, review, summary, and analysis of exercise data.Of these four steps in the training process, it is the planning step that benefits the least from simulation.  If the exercise plan captured in training materials is to map into the simulation domain, the plan must not only present information, but it must also capture and deliver the data required by a simulation environment to implement the exercise.  Data is used cognitively by the trainer to develop information used in the definition of a training exercise.  If it is not captured during the development of training materials, it is lost.  Once lost, the exercise plan will have to be redeveloped for simulation, using the training materials as guidance alone.  Remember our assumption: “The basic training process does not vary by training environment”.  If training developers are to use the same process to implement a plan for simulation as they would use for live training, then the tools used must be extended to capture the data required by the simulation environment during the planning process.  It is important to note that if we replace the trainer’s tools with those developed for a specific simulation environment, then we have violated our assumption. This makes sense from a human factors perspective as well.  People generally use those tools they are familiar with, even if it means more work.  Because it is unlikely that a simulation user will train in a particular simulation environment often enough to become familiar with its planning tools, it is most likely those tools will not be used.  This is not a question of man machine interface.  No matter how well an interface is defined and implemented, familiarity ultimately comes from experience.  The question becomes “How can a simulation environment’s data requirements be captured and applied in the training developer’s tools?”2.  Approach and ImplementationTo enable the capture of simulation data during the planning process, three tasks must be accomplished:Port the simulation environment data to the developer’s desktop.Link the ported data to the trainer’s planning tools and environment.Motivate the user to capture the data required by simulation.As a practical example of this approach, CCTT will be used for the simulation environment, and PowerPoint will be extended to perform as a desktop planning PVD tool.2.1  Porting a Simulation Environment’s DataLet us return to the earlier examination of an exercise’s METT-T conditions as they relate to simulation.  The Mission, Enemy, and Troops identified for exercises are constrained by the unit supported in the simulation environment.  The terrain is constrained by the terrain databases available in a simulation environment.  Unit type data alone is not sufficient to support initialization of units in simulation.  Other data, to include Unit Designations, Formations, Behaviors, and specific Manned Module, are needed.  Likewise, identification of the terrain database to be used is not sufficient.  In order to place Units, Control Measures, and Entities in their proper positions for the exercise, correlated digital maps are required.  Digital maps, whether rendered from terrain databases or scanned, must be incorporated into the graphics package(s) used by the training developer to enable the capture of unit, entity, and control measure positions and orientations.  In an ideal situation, all data required to plan exercises for a simulation would be ported to the PC desktop in the simulation environment’s native format.  When the data does not exist or is incomplete, formats will have to be developed to complete this task.  In the case of CCTT, data exists in tabular and reader file formats, which documents the Supported Units, Unit Placement Parameters, Supported Entities, and Entity Configurations.The Supported Units are defined in the following files: BLUFOR_PURE_UNITS.RDR – Identifies BLUFOR units in terms of their, type, aggregate type, echelon, organization, equipment and life form makeup. OPFOR_PURE_UNITS.RDR – Identifies OPFOR units in terms of their, type, echelon, organization, equipment and life form makeup.  TASK_ORGANIZATION_VALUES – Valid unit designations (example: 1-7CAV)Unit Placement Parameters are defined in the following files: MCC_FORMATIONS.RDR – Identifies formation and spacing by unit echelon. UNIT_PLACEMENT_DATA.RDR – Identifies formation order of subordinate units by aggregate unit type.Supported Entities are defined in the following files: ENTITY_TYPE_VALUES – DIS entity type values and enumerations supported by CCTT. VEHICLE_CLASS_DATA.RDR – Groups entities by vehicle class.Entity Configurations are defined in the following files: CGU_RESOURCE_DATA_FILE.RDR – Identifies fuel and munition loads, cargo, and repair capabilities for supported entities. AIRCRAFT_HARDPOINT_DATA_FILE.RDR – Identifies weapon system and ammunition loads for aircraft. UOSP_SOLDIERS_PLATFORMS.RDR – Identifies entity type values (weapon system) by life form/DI type.Figure 2.1 depicts a sample of the data contained in “BLUFOR_PURE_UNITS.RDR”.(Unit_3    (ID                TANKPLT)    (Owner             Saf)    (Accessible        True)    (Name "Tank Platoon")    (Unit_Class        Aggregate)    (Unit_Type         Tank)    (Echelon           Platoon)    (Agg_Unit_Type     Blufor_Tank_Platoon)    (Num_Subordinates  4)    (Subordinates        (Subordinate_1            (ID             M1A1)            (Role           Unit_1)            (Behavior_Role  Alpha_Leader)            (Section        Alpha_Section)            (Org            Veh  1)            (Has_Assoc_Veh  False))        (Subordinate_2            (ID             M1A1)            (Role           Unit_2)            (Behavior_Role  None)            (Section        Alpha_Section)            (Org            Veh  2)            (Has_Assoc_Veh  False))        (Subordinate_3            (ID             M1A1)            (Role           Unit_3)            (Behavior_Role  None)            (Section        Bravo_Section)            (Org            Veh  3)            (Has_Assoc_Veh  False))        (Subordinate_4            (ID             M1A1)            (Role           Unit_4)            (Behavior_Role  Bravo_Leader)            (Section        Bravo_Section)            (Org            Veh  4)            (Has_Assoc_Veh  False))))Figure 2.1 CCTT Pure Unit DataFor CCTT, digitized maps and unit behavior data does not exist in a convenient form that can be ported to the desktop.  However, digitized maps may be created on the PC using a variety of approaches.In the case of our example, PVD screen dumps were merged into a single bitmap and inserted into a PowerPoint presentation as part of the slide master.  The PowerPoint presentation’s coordinates were then correlated to 10 digit grid locations.  The parameters defining the correlation were then embedded within the presentation’s properties. Next, the presentation was saved as a template under the “Template” directory of Microsoft Office.  In this fashion, each time a user selects the “New” option under the “File” menu the template is made available for selection in the standard “New Presentation” dialog.  Figure 2.2 depicts such an example. EMBED PBrush  Figure 2.2 PowerPoint New Presentation DialogInitialization of unit behaviors in CCTT requires each behavior be linked to specific units with the appropriate control measures (routes, checkpoints etc.) and/or subordinate units.  The detailed requirements for initializing each behavior must be extracted from the source code.   At the time this paper was written, these details had not yet been identified.  As a result, the practical example will not demonstrate the capture or initialization of unit behaviors.2.2  Linking ported data to desktop planning toolsLinking the ported data to the exercise planning tools on the PC desktop involves four primary steps.  First, object classes need to be developed to support loading of the ported data.  These object classes must describe the properties, makeup, and behaviors of all simulation objects that may be initialized in an exercise.  A general list of such objects includes, but is not necessarily limited to, Units, Entities, Control Measures, and Environmental Features such as Obstacles and Minefields.  The second step is to instantiate a simulation environment’s objects into the desktop exercise planning applications making them available to the application itself.  The third step involves developing software to enable the trainer’s desktop applications to create and manipulate simulation objects as required in support of specific exercises. This software can be written in an application’s native macro language, and/or linked into the macro language through Dynamic Link Libraries, Dynamic Data Exchange, or other methods. Applications that use Visual Basic, such as those found in Microsoft Office, are ideally suited for this task.  The fourth step in the linking process is to provide a facility for saving the exercise plan in a format consistent with the targeted simulation environment.In our example, Visual Basic for Applications was used to develop the classes, instantiate the objects, develop software methods to manipulate the objects, and save the exercise plan to a CCTT compatible format.  Each of these steps was accomplished in PowerPoint 97.  In order to make this happen, CCTT objects (Units, Control Measures, Obstacles, and Minefields) had to be linked with the objects created as graphical shapes in PowerPoint.  These links were developed in reader files.  Units were linked to the unit shapes in PowerPoint with the file TREDS_Unit_Data.rdr.  Figure 2.3 depicts a sample of the content of TREDS_Unit_Data.rdr.  Control Measures, Obstacles, and Minefields were linked to PowerPoint shapes with the file TREDS_Overlay_Types.rdr Figure 2.4 depicts a sample of the content of TREDS_Overlay_Types.rdr.{ BLUFOR_TREDS_Links   (Unit_1    (ID      TANKCMP)    (Name    "Tank Company")    (TREDS   "co ar (m1a1)"))  (Unit_2    (ID       MECHCMP)    (Name     "Mechanized Infantry Company")    (TREDS    "co ar inf, co ar inf guneq"))...}Figure 2.3 Overlay TypesThe field “ID” identifies the Enumeration by which CCTT identifies a Pure Unit.  The field “TREDS” identifies one or more unit shape names that are to be linked with the CCTT Pure Unit.  The field “Name” is used in PowerPoint for user feedback during the planning process.{TREDS Overlay Types--Points  (ID	coord_pnt    (Type    Point)    (Owners  SAF)    (Toolbar "Maneuver")    (Macro   "Coordinating_Point")    (Text    "Coordinating Point From Ellipse")    (Image	"Tool5.bmp")      (CCTT_Symbol_Type  Coordination_Point        (Format	          Fixed)        (Palette	          MANEUVER)        (Symbol_Width	  10496)        (Local_Symbol	  False)        (Alternate_Symbol  False)))...}Figure 2.4 Overlay TypesThe field “ID” identifies the Enumeration by which PowerPoint identifies a Control Measure, Obstacle, or Minenfield.  The field “Type” identifies the control measure as a Point, Line, or Area shape.  The field “Owners” identifies the CCTT asset to which the symbol belongs.  The “Toolbar” field identifies the toolbar in PowerPoint on which the button (Image) is to be placed (Maneuver, Fire Support, Engineer, Logistics, Unit Role, Unit Echelon, etc).  The field “Macro” identifies the procedure to be executed when the toolbar button is clicked.  The field “Text” identifies the tool tip displayed for the button.  The field “CCTT_Symbol_Type” identifies the CCTT Enumeration for the control measure.  The remaining fields are required as input to CCTT to initialize the control measure.  The Macro procedure performs two functions.  First it takes a selected PowerPoint shape and makes it into a recognizable overlay symbol.  For example, a line or rectangle may be converted to a minefield with the click of a button.  Second, the macro procedure tags the new overlay shape to give it identity.  In the case of an anti-tank mine, the label assigned would be “tredsObst mine_at”.2.3  Motivating the user to capture simulation exercise data.Porting a simulation’s data into a desktop application and enabling that the application to act upon that data to initialize a simulation exercise is a good start.  However, if training developers are not sufficiently motivated to use the tools that have been integrated into their desktop, or if by accessing the new capabilities the task of training development becomes more difficult or tedious, they are likely to return to techniques that are more familiar to them.  In order to motivate the training developer to use the simulation planning tools, those tools need to simplify difficult tasks, automate tedious tasks, and be convenient to use.  In our example, the macro procedures automate the tedious tasks of laying out overlay symbology by converting simple shapes, such as lines, rectangles, and ovals into units, minefields, bridges, axis of advance, front lines, fortifications, etc.  The correlated digital maps that are stored within PowerPoint templates simplify the difficult task of determining the grid positions of units, entities and control measures. By integrating a simulation’s planning functionality into the desktop, we have already made simulation planning more convenient.  However, this may not be sufficient.  In our example, seven toolbars were created to provide access to CCTT simulation planning functionality.  Seven toolbars would certainly become cumbersome and clutter the screen.  Each time one is to be accessed, the user must click on the “View” menu, select the “Toolbars” option and finally click on the toolbar of choice.  To make this more convenient, an eighth toolbar was created.  This toolbar consolidates the PowerPoint drawing tools needed to produce the simple shapes used by the macro procedures.  This toolbar also makes access to the planning toolbars more convenient by incorporating shortcuts to them.Walk Through ExampleA walk through example of creating an overlay in PowerPoint for a CCTT exercise will reinforce the effectivness of integrating simulation into the training environment. Each step will be discussed in terms of the impact integration of CCTT data and functionality has had on the planning process.  First, a new presentation must be created.  Selecting the “New…” option under the “File” menu will allow a user to select terrain based on the digitized maps available.  In this step, the terrain is automatically identified and displayed.  Units may be placed by simply drawing a rectangle, clicking on the appropriate echelon, and unit role buttons, and specifying the unit designation.Figure 3.1 Unit PlacementRather than placing additional data requriements requirements on the user, the toolbars acutally actually simplify the process by providing short cuts for drawing and designating units.Next the control measures, obstacles, and minefields need to be placed.  As with units a simple shape such as a line or rectangle is drawn first, the appropriate control measure button is clicked, the echelon (if any) is selected, and appropriate text is entered to designate the control measure.  A tactical boundary is displayed as an example in Figure 3.2.Figure 3.2 Tactical BoundaryAs with unit placement, the toolbars acutally actually simplify the process by providing short cuts for drawing and designating the control measures.Continuing the steps for placing control measures and units, a complete overlay may be developed in a very short period of time.  Figure 3.3 depcits depicts a PowerPoint overlay for a CCTT structured scenario designed to train a scout platoon.   LINK PowerPoint.Show.8 "\\\\HOMER\\users\\Abbott\\CCTT_RTT Interoperability\\CCTT Demo 2 TSP\\Overlay.ppt" "" \a \p Figure 3.3 Example PowerPoint OverlayOnce the overlay is complete, the exercise data can be exported to Unit Off-Site Planner  (UOSP UOSP) format by selecting the “Save in CCTT Format” option from the “File” menu of PowerPoint.  A sample of the UOSP representation of the overlay shown in Figure 3.2 3 is depcited depicted in Figure 3.34.Show a sample UOSP output file for our CCTT example.<UOSP_IC_FILE>  0.730<Text>	STRUCCTT Scout Platoon Fundamental</Text><Text>	Generated by PowerPoint 97</Text><EnvTerrain> 3</EnvTerrain><Begin_PureUnits> FRIENDLY	[BLUFOR PURE UNITS]</Begin_PureUnits><Begin_PureUnits> OPPOSING	[BLUFOR PURE UNITS]</Begin_PureUnits><TaskOrgUnit> "N/A" 0 False Unit_1 Column 1200	[BLUFOR TASK ORGANIZED UNITS]</TaskOrgUnit><TaskOrgUnit> "N/A" 0 False Unit_1 Column 1200	[BLUFOR TASK ORGANIZED UNITS]</TaskOrgUnit><Overlay> FRIENDLY	[BLUFOR OVERLAY SYMBOLS]</Overlay><Overlay> OPPOSING	[OPFOR OVERLAY SYMBOLS]</Overlay><EnvWeather>	[ENVIRONMENTAL CONDITIONS]</EnvWeather><OCCTCP></OCCTCP><OCFSE>"None"</OCFSE></UOSP_IC_FILE>  0.730Figure 3.2 4 Example CCTT UOSP Exercise FileOnce the data hase has been saved to diskette, the exercise may be imported at the CCTT Master Control Console (MCC), and saved in CCTT’s native exercise file format.  This is the only simulation specific step that must be taken by the training developer to transfer the exercise plan into the CCTT simulation environment.  This example demonstracts demonstrates a simple approach, using familiar applications that enhance and shortcut the time normally taken during the planning process to achieve the same end.4.  ConclusionIn review of the information presented, we can see that the development cycle for an integrated PC planning tool varies little from the development cycle of a specific simulation environment’s native planning tool.  A primary difference is the transition from the simulation environment’s own programing language to the language of the user’s desktop planning environment.  This is a painful transition at best.  Simulation developers have a preferred programming language.  Software engineers learn to think in terms of their primary programming language.  It is difficult to transition from one language and development environment to another.  Educating an engineer on a simulation development environment, who is experienced in desktop development, is difficult as well.  However, where new simulation environments depend on the development of planning applications, the desktop development environment already exists.  Microsoft Office is an example of a desktop development environment, and these applications have been written.  They have a broad user base and they work.  Simulation developers can seize this user base as an opportunity to extend simulation into the familiar tools associated with the PC desktop.  Recall the assumption “The basic training process does not vary by training environment”.   By integrating initialization data into the simulation domain from existing tools of the training domain, the views of both the training developer and simulation developer move that much closer to a uniform view of simulation and of training, meeting the needs of both.A/1-7CAV11/A/1-7CAV1/A/1-7CAV