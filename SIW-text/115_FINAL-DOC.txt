Dynamic Terrain in the Environment FederationDr. Dale D. MillerDavid BakemanDr. Steve AdelsonDaniel GilbertAnnette JanettLockheed Martin Information SystemsAdvanced Simulation Center3605 132nd Ave. SE, Suite 400Bellevue, WA 98006ddmiller@lads.is.lmco.com,  HYPERLINK mailto:dbakeman@lads.is.lmco.com dbakeman@lads.is.lmco.com,  HYPERLINK mailto:sadelson@lads.is.lmco.com sadelson@lads.is.lmco.com, dgilbert@lads.is.lmco.com, ajanett@lads.is.lmco.comKeywords:Dynamic Terrain, HLA, Runtime Infrastructure, Object Model, SEDRIS, SEDRIS Transmittal Format, SEDRIS Environment Data Coding SpecificationABSTRACT: The DARPA Synthetic Theater of War (STOW) program developed the capability to communicate and emplace changes in terrain databases both immediately prior to, and during the course of, a simulation execution. Examples included the creation of anti-tank ditches and vehicle survivability positions, and the destruction of buildings and bridges. This capability was originally developed as an extension to the Distributed Interactive Simulation standard and was migrated to the High Level Architecture (HLA) Runtime Infrastructure (RTI) via a layer of software which translated between DIS PDUs and RTI interactions. In that initial implementation, routing spaces were extensively and productively used to ensure federates were not bombarded with unwanted data. However, the associated design was prepared and implemented using an early prototype version of the RTI that did not implement all HLA services (e.g., ownership management). The Environment Federation project, sponsored by the Defense Modeling and Simulation Office (DMSO), offered the opportunity to revisit these design decisions from a variety of perspectives. In particular, the question was changed from “How can Dynamic Terrain (DT) work with the RTI?” to “How can the RTI help DT?” Our goal was to investigate, via design, implementation and experimentation, how object classes, interaction classes, declaration management, data distribution management, and transport mechanisms could support the distribution of DT changes, which are characterized by relatively infrequent, but individually potentially high volume (bursty), communications.In this paper we will discuss a number of critical (re)design decisions and their ramifications, including: how to use RTI reliable transport effectively; whether terrain changes are better represented in the RTI as interactions or objects; how to support effective federate “mix-and-match” subscriptions to different types of terrain environment changes; how best to describe environmental interactions in terms of “neutral” real-world descriptions as opposed to a union of federates’ unique views of those changes (by using extensions to the SEDRIS Environment Data Coding Specification (EDCS)), and whether the SEDRIS Transmittal Format may be usable as the run-time authoritative representation of the terrain for a federation.Particular emphasis will be placed on the resulting dynamic terrain SOM, which could serve as the core for a Reference Object Model (ROM) for HLA federations including dynamic terrain environmental data. By coupling this ROM with technology components from the Synthetic Environment Data Representation and Interchange Specification (SEDRIS), there is a natural progression from pre-simulation to run-time environmental data modeling, and an enhanced basis for addressing federate interoperability in the environmental domain.IntroductionThe Environment Federation project is a DMSO-sponsored effort which is examining the use of the SEDRIS Data Representation Model (DRM) and Environment Data Coding Specification (EDCS) in a run-time simulation federation. The hypothesis is that using the unambiguous syntax and semantics from SEDRIS to describe the runtime data exchanges will make individual environment federates more broadly re-usable in the DoD modeling and simulation community. The project also serves as a useful demonstrator of the scope and nature of dynamic environment and terrain modeling capabilities that are available today. The FederatesFollowing is a brief description of each federate participating in the Environment Federation, as shown in  REF _Ref471532511 \h Figure 1.The Environment Data Server (EDS) is the owner and distributor of the ocean, atmosphere, and space data within the federation. Acting as a publisher of data, the EDS serves dynamically changing values for key environment data elements to the rest of the federation. In this effort, the Global METOC 98 database was used as the data source.JointSAF is an entity-level combat simulation capable of receiving and reacting to dynamic environment and terrain data. JointSAF owns and models all of the simulated entities (e.g., tanks, aircraft, ships) in the federation. These entities can cause changes to the terrain and can be affected by the dynamic terrain and environment. For example, increased liquid water content near the earth’s surface (i.e., fog) will reduce visibility and cause moving vehicles to slow down. Similarly, the creation of craters or ditches in the terrain will hamper vehicle movement.The Dynamic Terrain Simulation is a suite of capabilities that when taken together provides a consistent, causally-correct representation of changes to the terrain and its features, to the rest of the federation. The DTSim accepts incoming data about the environmental processes and the actions of simulated entities that may cause changes in the terrain (e.g., detonation of ordnance against a bridge). It then computes the impact(s) of those events on the terrain and its features, and publishes that data for use by other federates.ModStealth is a three-dimensional display tool that can accept dynamic terrain data, environment data, and data about simulated entities, and render an appropriate 3-D visualization of the battlespace. A ModStealth exhibits similar interests in terrain and environmental data as virtual simulators and thus is a useful low-cost surrogate for that class of federates.Figure  SEQ Figure \* ARABIC 1. Environment Federation CompositionDynamic Terrain Capabilities in STOWOne of the technology developments of the DARPA Synthetic Theater of War (STOW) program focused on Dynamic Terrain (DT). Capabilities were developed to modify the terrain geometry and the states of terrain-based features in a fully distributed heterogeneous simulation using the High Level Architecture (HLA) Run Time Infrastructure (RTI) (see [1] and [2]). Specific capabilities included terrain surface changes (anti-tank ditches, vehicle survivability positions, infantry trenches, berms and craters), run time emplacement and breaching of other obstacles (concertina wire, dragon’s teeth, minefields), and damage to vertical structures (buildings, bridges, etc.). Figures 2 and 3 show some of these capabilities as rendered by the ModStealth 3-D viewer. More recently, the ability to create forests, urban areas, and cut and filled roadbeds during a simulation exercise has been developed (see [3]).Figure  SEQ Figure \* ARABIC 2. Armored Vehicle Launched Bridge (AVLB) Deploying over an Anti-Tank DitchFigure  SEQ Figure \* ARABIC 3. Vehicle Survivability PositionDynamic Terrain Objectives in the Environment FederationThe Environment Federation provided an experimental testbed to allow us to examine how the RTI can be exploited to support efficient exchange of environmental information. In particular, our goals were to:Improve the use of the RTI as a data transport mechanism for DT;Make more extensive use of the RTI Declaration Management (DM) services;Open up Environmental Change Notices (ECN) through the use of the SEDRIS Environmental Data Coding Specification (EDCS); andInvestigate the use of SEDRIS Transmittal Format (STF) as the authoritative run-time terrain environmental representation.ArchitectureDynamic Terrain Architecture in STOW and Use of the RTIThe challenges for STOW of supporting DT environmental modeling capabilities in a distributed simulation environment were:•	Real-time operation,•	Arbitrating simultaneous changes to the terrain from multiple applications (e.g., bulldozer simulator and cratering munitions),•	Serializing changes,•	Communicating changes (abstractly and polygonally),•	Minimizing network bandwidth requirements, and•	Addressing the needs of a large scale distributed simulation on an arbitrary TIN terrain surface.The solution was based on communicating DT changes via an interaction called an Environmental Change Notice (ECN), which contains all necessary state and feature and polygonal change information. Separate applications assess the collateral effects of warfighter activities (or internal environmental dynamics), modeling the consequences and requesting the indicated changes via ECNs. An application known as the DTScribe arbitrates and serializes requested changes. In effect, the DTScribe is the owner of the terrain "object" of which multiple DT simulations can request state changes. Each federate (e.g., JointSAF, OpenScene ModStealth, DTSim) includes a DTAgent which then integrates each change into its federate’s run-time data base in real-time. Run-time induced changes to the terrain surface and cultural features are thus managed, peer-to-peer, in a distributed manner.The DT architecture as used for ST”OW is described in more detail in [1], [2] and [3]. Of particular significance is that the DTScribe provided a consistency and reliability mechanism originally developed for DIS using experimental PDUs and was directly ported to the STOW RTI. The ECN PDUs were reformulated as HLA interactions and were comprised of header information followed by a “bag of bits” which subscribed federates were required to interpret (using a shared library called the ECN API). While this approach follows the letter of the HLA “law”, it is not in accord with the HLA spirit, because the data structures which describe the DT changes are conspicuously absent from the Simulation and Federation Object Models (SOM, FOM).ECN Types and Routing Spaces in STOWFor STOW, there were six ECN types:Request: Requested changes from any applicationValidated: Sent by DTScribe to all DTAgentsReject: Notice from DTScribe to requestor of changeHeartbeat: Current DTScribe sequence numberNACK: Application request for retransmissionNew Subscriber: Retransmission from DTScribe to new subscriberFour routing spaces were created to provide interest management. Because a federate joining an ongoing federation must receive a history of all ECNs (which can be quite large), it was especially important to provide a separate routing space for new DTAgents, which contained all New Subscriber and Heartbeat ECNs. Another routing space was created for DTAgents (Validated, Reject, and Heartbeat), another for the DTSim (Validated, Reject, Heartbeat), and one for the DTScribe (Validated, Request, NACK, New Subscriber, Heartbeat). REF _Ref471547596 \h Figure 4 and  REF _Ref471548216 \h Table 1 illustrate and annotate the data flow for the generation of a crater from a detonation interaction. Note that interest management was imperfect; for example, the validated parameterized ECN generated in step 3 is received by all federates but is of interest only to the Repoly Service. While more ECN types and routing spaces could have mitigated this, it was judged that this additional complexity would do little to improve the overall simulation performance.Figure  SEQ Figure \* ARABIC 4. Crater Creation Data Flow in STOWTable  SEQ Table \* ARABIC 1. Data Flow Annotation for  REF _Ref471547596 \h Figure 4PublisherSubscriberRouting Space1DTSim hears Detonation interaction, runs cratering modelJointSAFFederationN/A2DTSim generates parameterized crater ECN with following parameters: location, diameter, depth, spoil flag, raggedness factorDTSimDTScribeDTScribe3DTScribe validates parameterized ECN. Repoly Service beings computing polygonal ECN. All other federates update sequence numberDTScribeAll federates except newcomersAll except new DTAgents4Repoly Service sends polygonal ECN request to DTScribeDTSimDTScribeDTScribe5DTScribe validates polygonal ECN. All federates modify their run-time data basesDTScribeAll federates except newcomersAll except new DTAgentsSTOW Design for ECNs as ObjectsReference [2] describes a design for ECNs as objects instead of interactions. This approach used separate routing spaces for ECN request objects (invalidated space) and validated ECNs (validated space). The requestor of an ECN would create objects and attributes in the invalidated space and then request divestiture of the attributes to the DTScribe. The DTScribe would validate the ECN by accepting ownership and moving the attributes to the validated space. This approach was not implemented for STOW, however, because HLA Ownership Management services were not available in the STOW RTI.Architecture Evolution for the Environment FederationThe STOW DTO consistency mechanism for latecomers was similar to the state consistent transport mechanism (and its NACK suppression scheme) which was provided in the STOW RTI (but not in RTI 1.3). When the DTScribe receives a new subscriber request for the complete ECN history, it waits a backoff interval so that it can simultaneously service multiple federates joining the exercise at nearly the same time (e.g., when a LAN comprised of multiple federates joins the exercise). We considered adding a general purpose state consistent transport mechanism on top of RTI 1.3, discussed further in Section  REF _Ref471608996 \r \h 2.2.1.It should be kept in mind that DT is a potential stress on the RTI. For example, the US Atlantic Command (USACOM) J9901 exercise used DT technology for pre-exercise terrain data tailoring [3]; over 330 MB of ECN data were distributed, and the largest single ECN was over 30 MB.Changes as Objects or Interactions?As described in Section  REF _Ref471550007 \r \h 2.1.2, our initial bias was to use RTI objects to contain the ECN data. The key differences between objects and interactions are:Interactions are transitory but objects persist. Objects can be discovered, but it doesn’t make sense to discover an interaction which has occurred in the past.Objects have attribute owners but interactions don’t.Given these distinctions, we proposed that validated ECNs and the DTScribe state (maintained via a Scribe sequence number) be objects, and that ECN requests and Repoly Service requests be interactions. Then late joining federates would (automatically) discover all ECN objects and request their attribute values from the RTI. This could potentially burden the DTScribe and the communication mechanism and would require state consistent transport or a similar DTScribe NACK supression mechanism, and would require an ordering mechanism, neither of which are provided by RTI 1.3. The crushing blow to this proposal for validated ECNs as RTI objects was the realization that all subscribing federates must maintain all objects and their attributes, potentially hundreds of MB. But an ECN is static; once issued, it never changes. Once the federate’s DTAgent has processed the ECN and modified the run-time data base, it has no further use for this data. The RTI object architecture is clearly overkill for such static objects.Henceforth, in the Environment Federation, all ECNs are interactions, now called environmental interactions. There is one object, called the Terrain State, which contains a vector of scribe sequence numbers (to be discussed further in Section  REF _Ref471550740 \r \h 2.2.2).Publishing and SubscribingThe new environmental interaction types are listed in  REF _Ref471550880 \h Table 2 together with the publisher(s) and subscriber(s) of each type. Note that RTI reliable protocol is now used for interactions with a single subscriber.Table  SEQ Table \* ARABIC 2. Environmental Interaction TypesEnvironmental Interaction TypeTransport MechanismPublisher(s)Subscriber(s)Candidate_Change (IR)Reliable, point-to-pointDTSim, JointSAFDTScribeRepoly_Request (N)Reliable, point-to-pointDTSim, JointSAFDTScribeRepoly_Return (IR)Reliable, point-to-pointRepoly ServiceOriginal RequestorValidated_Change (N)Best EffortDTScribeAll FederatesRejection (IR)Reliable, point-to-pointDTScribeOriginal RequestorRetransmit_Request (IR)Best EffortJointSAF, DTSim, Repoly Service, ModStealthDTScribeScribe Heartbeat not required – handled by RTI since it is an attribute of an objectUsing the revised DT architecture, the data flow for the generation of a crater from a detonation interaction is illustrated and annotated in  REF _Ref471551180 \h Figure 5 and  REF _Ref471609287 \h Table 3.Figure  SEQ Figure \* ARABIC 5. Crater Creation Data Flow in the Environment FederationTable  SEQ Table \* ARABIC 3. Data Flow Annotation for  REF _Ref471551180 \h Figure 5PublisherSubscriberInteraction1DTSim hears Detonation PDU, runs cratering model, and generates crater areal feature and parameters for Repoly ServiceJointSAFFederationN/A2DTSim requests Repoly Service to generate polygonal craterDTSimRepolyCrater_Request3Repoly computes polygonal change and sends to DTSimRepolyDTSimRepoly_Return4DTSim generates ECN request from previously computed areal feature and polygon modifications receivedDTSimDTScribeCandidate_Change5DTScribe validates ECN. All federates modify their run-time data basesDTScribeAll federates CraterFor STOW, all federates subscribed to all validated ECNs. To allow more flexible interest management, federates in the Environment Federation may subscribe to an arbitrary subset of validated DT changes. DT changes are decomposed into classes called coverages, following the terminology of the JSIMS Terrain Common Data Model (TCDM), see [4]. However, we require that if a federate subscribes to any interaction type within a coverage, it must subscribe to all interactions in the coverage. This “mix-n-match” approach to DT was chosen because it is in keeping with the spirit of the RTI. Examples of federates which may subscribe to limited set of interactions include a runway repair simulation which may subscribe only to crater features, or a map display federate which may subscribe to features but not polygons.For STOW, both polygonal and feature changes describing a real-world change were contained in an atomic ECN, e.g., an anti-tank ditch (ATD) emplacement contained polygonal changes (add/modify/delete polygons) and a feature addition (linear feature for ATD centerline with appropriate attribution). This atomicity guaranteed consistency, and a single scribe sequence number described state of the world. The Environment Federation allows separate subscriptions to terrain polygon changes and various coverages of feature changes. A vector of scribe sequence numbers is now used, where each sequence number describes the state of a coverage. We continue to use the DT reliability mechanism for validated interactions to guarantee consistency. Note that in our ATD example, a federate may be subscribed to the appropriate polygonal and feature coverages, but could receive, say, the polygonal interaction and fail to receive the feature interaction. The RTI, however, ensures that this inconsistency is only temporary. When the federate discovers that its scribe sequence number for the feature coverage is out of date, it will request retransmission of this interaction from the scribe.Dynamic Terrain Simulation Object Model (SOM)The DMSO sponsored software called the Object Model Development Tool (OMDT) [5] was used to generate the DT SOM. Table 4 shows the six environmental interaction classes (left) and subclasses (right). The Feature_Change subclass of the Validated_Change class is further decomposed in Table 5. The leaf nodes of the hierarchy represent the individual interactions to which a federate may subscribe. The second column lists the coverages; our implementation requires that a federate must subscribe to all or none of the interactions in a coverage. Table  SEQ Table \* ARABIC 4. Six Environmental Interaction Classes in the SOM Object Interaction TableRetransmit_Request (IR)Repoly_Request (N)Land_Use_or_Land_Cover_Vegetation_Request (IR)Crater_Request (IR)Ditches_and_Berms_Request (IR)Fighting_Position_Request (IR)Road_Request (IR)Repoly_Return (IR)Rejection (IR)Candidate_Change (IR)Validated_Change (N)Feature_Change (N)Polygonal_Change (N)Reset_Area (IR)Table  SEQ Table \* ARABIC 5. Hierarchical Decomposition of Feature and Polygonal Change ClassesCoverageFeature_Change (N)Administrative_Boundary_Category (N)SCC_Administrative_Boundary (IR)Label (IR)SCC_Display_Sign (IR)Battlefield_Element_Category (N)Crater (IR)SCC_Barrier (N)Boulder_or_Rockdrop (IR)Breach (N)SCC_Breach_Point_or_Lane (IR)SCC_Embankment_or_Fill (IR)SCC_Cross_Country_Barrier (N)ATD_Berm_Wall (IR)Concertina (IR)Dragon_Teeth (IR)SCC_Infantry_Trench (IR)SCC_Prepared_Defensive_Position (N)Fighting_Position (IR)Terrain_Obstacles_Category (N)SCC_Fence (IR)SCC_Pipeline_or_Pipe (IR)SCC_Trees (IR)Transportation_Category (N)SCC_Bridge_or_Overpass_or_Viaduct (IR)SCC_Cart_Track (IR)SCC_Railroad (IR)SCC_Road (IR)Hydrography_Category (N)SCC_Dam_or_Weir (IR)SCC_Lock (IR)Linear_Connectivity_Category (N)SCC_Power_Transmission_Pylon (IR)LC_Mobile_Munition (N)MICLIC (IR)Maritime_Trafficability_Category (N)SCC_Pier_or_Wharf_or_Quay (IR)SCC_Platform (IR)Point_Cultural_Category (N)SCC_Building (IR)SCC_Power_Plant (IR)SCC_Storage_Bunker_or_Storage_Mound (IR)PCC_Similar_Attribute_Grouping_1 (N)SCC_Crane (IR)SCC_Pumping_Station (IR)SCC_Rig_or_Superstructure (IR)SCC_Tank (IR)PCC_Similar_Attribute_Grouping_2 (N)SCC_Communication_Building (IR)SCC_Communication_Tower (IR)SCC_Disk_or_Dish (IR)SCC_Flare_Pipe (IR)SCC_Helicopter_Landing_Pad (IR)SCC_Cooling_Tower (IR)SCC_Substation_or_Transformer_Yard (IR)SCC_Water_Tower (IR)Surface_Areals_Category (N)SA_Mobile_Munition (N)ESMB_Net (IR)SCC_Ground_Surface_Element (N)SCC_Geographic_Information_Area (IR)SCC_Slope_Category (IR)SCC_Disturbed_Soil (IR)Scorched_Soil (IR)Moist_Soil (IR)Tree_Canopy (N)SCC_Land_Use_or_Land_Cover_Vegetation (IR)Urban_Area (N)SCC_Built_Up_Area (IR)Polygonal_Change (N)Conformal_Polygons (IR)Terrain_Polygons (IR)Vertical_Linear_Polygons (IR)For STOW, routing spaces were used to filter ECN data, including those messages which were functionally point-to-point with best effort transport and the DTScribe for reliability. For the Environment Federation, routing spaces are not used; interaction subscription is used instead. Also, reliable transport is now used for point-to-point communication. An important extension needed for the Environment Federation is to add two routing space dimensions: one for new subscribers to receive validated environmental interactions, and one for everything else.Environmental Change Notice Data ContentFor STOW, ECNs were implemented as a “bag-o-bits”, which could be complex data structures containing variable length fields and the concatonation of multiple ECN types. The data were specifically tailored to the requirements of JointSAF and ModStealth, and the ECN API was provided for assembling and interpreting the data. For the Environment Federation, we have defined the attributes and data structures in the SOM using more generic descriptions of the real-world changes. REF _Ref471553870 \h Figure 6 shows the structure and data contained in a multi-state object (MSO) ECN from STOW. The Environment Federation has no generic “MSO” interaction. Rather, interactions are defined for specific types of point features, e.g., Maritime trafficability coverage supports add/ modify/delete interactions for Pier/Wharf/Quay and PlatformPoint Culture coverage supports interactions for Building, Power Plant, Crane, Pumping Station, Rig/Superstructure, Tank, Communication Building, Disk/Disk, Flare Pipe, Helicopter Landing Pad, Cooling Tower, Substation/Transformer Yard, Water Tower, etc.We next give a simple example of querying the SOM using the OMDT to derive the data content of a Water Tower environmental interaction.  REF _Ref471554278 \h Table 6 shows the hierarchy of interaction classes which contain the Water Tower interaction. Each interaction class can be queried for its associated parameters or attributes. Note we have full inheritance of attributes. Another table, the Parameter Table gives the data types of each parameter.  REF _Ref471554401 \h Table 7 below is an extraction of entries relevant to our Water Tower. In order to interpret the data types, the Complex Datatype Table is used;  REF _Ref471554509 \h Table 8 is an extraction of the relevant entries. Finally, these tables can be unrolled into a single table showing the data actually contained in our Water Tower interaction as show in  REF _Ref471554586 \h Table 9.Figure  SEQ Figure \* ARABIC 6. Validated STOW Multi-State Object (MSO) ECNTable  SEQ Table \* ARABIC 6. Object Interaction TableInteraction ClassParametersValidated_ChangeSender_IDScribe_IDFeature_ChangeSCCPoint_Cultural_CategoryPCC_Similar_Attribute_Grouping_2FeatureSCC_Water_TowerTable  SEQ Table \* ARABIC 7. Parameter TableParameterData TypeSender_IDScribe_IDScribe_IDScribe_IDSCCChar[5]FeaturePoint_Cultural_Group_2Table  SEQ Table \* ARABIC 8. Complex Datatype TableComplex DatatypeField NameDatatypeScribe_IDhunsigned longlunsigned longsequenceunsigned longPoint_Cultural_Group_2Num_Point_Cultural_Group_2_FeatureslongPoint_Cultural_Group_2_FeaturesPoint_Cultural_Feature_Group_2Point_Cultural_Feature_Group_2Action_TypeECN_TAG_TYPEAttributesPoint_Cultural_Feature_Common_Attributes_2Cell_IDlongLocationLocation_3D_64OrientationLocation_3D_32Point_Cultural_Feature_Common_Attributes_2SAC_FEATURE_IDENTIFICATION_NUMBERlongSAC_ANGLE_OF_ORIENTATIONfloatSAC_DAMAGE_GENERALfloatSAC_HEIGHT_ABOVE_SURFACE_LEVELfloatSAC_LENGTH_OR_DIAMETERfloatSAC_WIDTHfloatTable  SEQ Table \* ARABIC 9. Data Contained in a Water Tower Environmental InteractionSender_IDRequester ID and Requester’s sequence numberScribe_IDScribe ID and new Scribe sequence numberSCC= “AM080” (Water Tower)Num_Point_Cultural_Group_2_FeaturesTo allow for multiple point culture changes in one interaction (subsequent data repeats)Action_TypeAdd/modify/delete on different feature typesSAC_FEATURE_IDENTIFICATION_NUMBERSDCS UID_SAC_ANGLE_OF_ORIENTATIONSDCS AOO_SAC_DAMAGE_GENERALSDCS DGENSAC_HEIGHT_ABOVE_SURFACE_LEVELSDCS HGT_SAC_LENGTH_OR_DIAMETERSDCS LEN_SAC_WIDTHSDCS WIDCell_IDGCS cell IDLocation(x,y,z) in GCSOrientation(h,p,r)The Water Tower example is relatively trivial. A more interesting example is given by the dragon’s teeth interaction ( REF _Ref475472701 \h Figure 7). For STOW, dragon’s teeth were described via a complex ECN containing:linear features (for JSAF to approximate intervisibility around dragon’s teeth)an areal feature (for JSAF planners to avoid the region)multiple MSOs (typically many hundreds, for ModStealth visualization of the 3-D models)For STOW, data was a union of specific data types required by the federates. For the Environment Federation, it’s simply a “Dragon_Teeth” interaction:data is well defined by parsing the tables of the SOM (but more complex than the water tower)data is descriptive of the object in the real world from which the DTAgents derive federate specific features (e.g., from the row and dragon’s teeth spacing data, the ModStealth DTAgent now computes the point feature locations)Figure  SEQ Figure \* ARABIC 7. Dragon's Teeth Created from the Dragon_Teeth InteractionReconciling FeaturesFor STOW, point features were identified on the network via location and S1000 model ID. (S1000 is a legacy terrain database generation tool set available from the US Army Topographic Engineering Center.) This approach assumed a predistributed library of models to all federates. For the Environment Federation, each federate receives a description of the feature and must match it to an entry in its feature library. (This is analogous to JointSAF’s OTMatch for entities.) A simple matching scheme was implemented: most point features require an exact match of the SEDRIS Classification Code (SCC) and an exact match on enumerated SEDRIS Attribute Codes (SAC) (e.g., Building Function Category). Because there can be infinite variability in dimensions, the feature is then selected which has the closest match to the sum of the height, length, and width attribute values. As the feature is created, its size is scaled to the exact height, length and width requested. Bridges require exact match on all SAC values. If a match not found, the model selected defaults to the first feature of same SCC. REF _Ref471556267 \h Table 10 shows some of the Building features in the database and their SCC and SAC values used for model reconciliation. Note that all building features have an attribute of BFC_ (Building Function Code) and PRO_ (Product Category). In addition, each building feature has attributes of height, length and width, also used in the matching process as described above.The data model describing the feature types and applicable attributes for the point features is loosely derived from the JSIMS TCDM. Note however, that this information is explicitly captured in the SOM.Table  SEQ Table \* ARABIC 10. Sample Building Features and their SCC and SAC ValuesSTOW Feature DescriptionSCCSCC NameBFC_Building Function CodePRO_Product CategoryLarge warehouse and storage buildingsAL015Building1Fabrication Structures137Automobiles and TrucksBunker, large commandAL015Building8Military Administration / Operations Building997Not ApplicableBunker, medium commandAL015Building8Military Administration / Operations Building997Not ApplicableBunker, small commandAL015Building8Military Administration / Operations Building997Not ApplicableBunker, Underground, CommandAL015Building8Military Administration / Operations Building997Not ApplicableBuilding, semi-hard, small officeAL015Building12Police Station997Not ApplicableHardened shelter, TELAL015Building21Garage137Automobiles and TrucksWarehouse, largeAL015Building24Warehouse107SteelWarehouse, mediumAL015Building24Warehouse107SteelWarehous, smallAL015Building24Warehouse107SteelRailroad locomotive shopAL015Building26Railroad Storage / Repair Facility999OtherLoading platform, railroad, largeAL015Building26Railroad Storage / Repair Facility999OtherLoading platform, railroad, smallAL015Building26Railroad Storage / Repair Facility999OtherBuilding, soft, large officeAL015Building28Administration Building997Not ApplicableHangar, largeAL015Building30Hangar1AircraftHangar, mediumAL015Building30Hangar1AircraftHangar, smallAL015Building30Hangar1AircraftHardened shelter, aircraftAL015Building30Hangar1AircraftMOBA JAL015Building35Post Office997Not ApplicableBuilding, soft, residentialAL015Building44Apartment / Hotel997Not ApplicableMedium apartment structures and commercial buildingsAL015Building44Apartment / Hotel997Not ApplicableSEDRIS Transmittal Format (STF) as the Dynamic Terrain Data Base (DTDB)As described in Section  REF _Ref471533048 \r 2.1, the DT architecture requires an authoritative representation (viz., the DTDB) of the Features existing in the synthetic environment. The Environment Federation makes use of SEDRIS Environmental Data Coding Specification (EDCS) to contribute feature data in standard terms with significant attribution. SEDRIS allows for data interchange and standard mechanisms by which synthetic environment data can be exchanged between applications. Typical SEDRIS Transmittals are used to exchange terrain database or atmospheric data. The SEDRIS data reference model (SDRM) provides a context to describe environmental constructs such as polygonal geometry, features, feature topology and data tables. In combination with the SEDRIS data model, the EDCS provides for rich attribution of SEDRIS objects.The Dynamic Terrain Data Base (DTDB) operates within a federation to maintain the “authoritative” state of the synthetic environment during simulations in which the environment dynamically changes. At any time during an exercise, a participant may request the current environment state, or a federate may instigate a change to the environment. The DTDB is used within the Environment Federation as the “authoritative” environment from which data is maintained and then communicated to subscribing applications using the RTI.Dynamic changes to the environment must be represented such that all federates can get reasonable and complete information. The DTDB must maintain and provide data required for visual systems, SAFs and any other federates such that each federate may then “compile” the change into its internal optimized representation of environment data. A DTDB maintained using the SEDRIS data representation model and EDCS would maintain all data required to represent the current environmental state to all federates.For this experiment, we examined the feasibility of using SEDRIS Transmittal Format (STF) as the DTDB. The experiment was restricted to Point Features. We created point features, modified them, and saved the current authoritative environment as an STF file.Given the SEDRIS data representation model (SDRM), a mapping to a point feature representation was completed.  REF _Ref471532536 Figure 8 shows this mapping. Note that STFs written do not pass the SEDRIS checker utility since the Feature Model contains no topology, even though in the Feature Model data, it is indicated there is no topology.Figure  SEQ Figure \* ARABIC 8. SDRM Mapping REF _Ref471532550 Figure 9 demonstrates a specific example of a Power Plant point feature that has been saved to an STF. This figure shows the feature attributes typical for this type of feature.Figure  SEQ Figure \* ARABIC 9. Data Mapping ExampleFrom these two figures observe there are three main branches in the SEDRIS representation for point features. The Model Library branch, the Feature Model Instance branch, and the Point Feature branch. When a new feature is received (RTI Interaction), the Create Feature callback is invoked. During feature creation, we first compare classification data. If the new feature has a classification we’ve already seen, it is placed within the existing classification Union of Features for the Point Feature and Feature Model Instance branches. New classifications result in new Union of Features. Additionally, the feature properties are examined to see if this is a new model or matches an existing model in the model library. In the example shown, the Power Plant model is defined with a set of property values. If any of those model property values are different, a new Power Plant model will be identified in the model library. A differing classification will always result in a new model definition.For this experiment, features may be modified during run time. Features to be modified are identified by their location and classification value. Typical modifications involve the damage state of a feature. The damage state is contained within a Property Value (Damage General, DGEN). Upon receipt of a change request, the SEDRIS objects are searched to find the one matching the location specified in the change request. Once a matching object is found, the property values are traversed to find the damage state property and that value is changed.At any time, the operator may save the current environmental state. When this save command is initiated, the current set of SEDRIS objects are saved to a SEDRIS Transmittal Format file. The STF may then be distributed for later analysis, or, in future exercises, it may be used as the initial environment.Details – the Level 1 Read/Write APIWithin the distributed simulation community the use of SEDRIS has been growing. Stable and well defined SEDRIS releases and practices are supportive of its usage. With the recently released SEDRIS Write API, the ability to write SEDRIS Transmittal Format has allowed faster development and output of SEDRIS information. The SEDRIS Write API was not developed for the purpose of dynamic modification, or reset of data without saving it. With the existing SEDRIS Write API, and the required capabilities for Dynamic Terrain modification in mind, a SEDRIS “Level 1” API was defined to allow these additional capabilities. The Level 1 API can be described in sections.  REF _Ref471532585 Figure 10 shows the Level 1 functions that are based on existing SEDRIS Write API functions. In a few cases, names were changed to indicate this is a Read/Write capability. Several new API functions are shown in  REF _Ref471532840 Figure 11. These functions allow for the reset and save capabilities as well as deletion and modification. Finally, a small subset of the SEDRIS Read API functions were provided for in this Level 1 capability, as needed for the development of the experiment. These Read Level 1 functions are shown in  REF _Ref471532605 Figure 12.Figure  SEQ Figure \* ARABIC 10. Standard Level 1 Write APIFigure  SEQ Figure \* ARABIC 11. New Level 1 FunctionsFigure  SEQ Figure \* ARABIC 12. Read Functions for Level 1What is different about these functions? The Level 1 API functions use SEDRIS Write API calls, but also maintain internal lists of SEDRIS objects and their relationships.The Level 1 read functions then first review the Level 1 managed objects to determine if any of the searches or component matches are maintained within the current set of SEDRIS objects, then SEDRIS Read API functions are utilized to read SEDRIS input from any initial STF.Typical DTDB operations involve the creation, modification, deletion of point features along with reset and save capabilities. Here are some examples showing which SEDRIS Level 1 API function calls are used to perform some typical DTDB operations. The Level 1 calls shown here are those needed to create the STF as depicted in  REF _Ref471532536 \h Figure 8, the data mapping example.ConclusionsThese experiments led us to the conclusion that RTI objects fundamentally do not support environmental changes which happen once but never change again. However, RTI interactions are perfectly suitable for communicating such changes, which really are interactions from the DTScribe to the data bases of the federates. Advances in Dynamic Terrain for the Environment Federation included leveraging RTI reliable protocols, leveraging subscription mechanisms, development of a SOM for full environmental interaction documentation, using EDCS (with extensions) for describing the environment, and taking the first step toward our long term goal of using SEDRIS as the DTDB. While we have shown that the use of STF as the DTDB is practical for point features, full use of the STF as the DTDB remains an open issue.AcknowledgmentsThe authors thank our DMSO sponsors Marnie Salisbury and Dr. Judith Dahlman for their vision and support. Special thanks go to Dr. Paul Birkel of the MITRE Corporation for his far-ranging vision as well as diligence and hard work well beyond the call of duty. We also thank Dave Macanucco, Lockheed Martin Advanced Simulation Center, for his contributions to the architectural redesign and his help with integration and demonstrations.References[1]	D. Miller et al., “Dynamic Terrain and Objects in the STOW 97 Advanced Concept Demonstration using the High Level Architecture”, Proc. Simulation Interoperability Workshop, Paper 98S-SIW-161, March, 1998.[2]	D. Miller et al., “Dynamic Terrain Implementation using the RTI”, Summary Report, The 15th Workshop on Standards for the Interoperability of Distributed Simulations, Paper DIS 96-15-093, Sept., 1996.[3]	D. Bakeman et al., “Dynamic Terrain: From Run-Time Modifications to Pre-Exercise Tailoring”, Proc. Simulation Interoperability Workshop, Paper 99F-SIW-043, September, 1999.[4]	P. Birkel et al., “The Terrain Common Data Model (TCDM): A Joint Effort of JSIMS, STOW, and JWARS” CGF-BR TCDM”, Proc. 8th Computer Generated Forces and Behavioral Representation, Paper 8TH-CGF-004, May, 1999.[5]	AEgis Research, “High Level Architecture (HLA) Object Model Development Tool (OMDT) User’s Guide”, Version 1.3, June, 1998 (available from the Defense Modeling and Simulation Office).Author BiographiesDR. DALE D. MILLER is the manager of Advanced Technology Development for the Advanced Simulation Center group of Lockheed Martin Information Systems. He led the projects Dynamic Terrain and Objects in a Virtual World and the Terrain Database Generation & Technology for Synthetic Environments both sponsored by DARPA and USATEC. He was also the technical leader for the terrain database and terrain data fusion development for the WARSIM Program. Currently he leads the STRICOM Common SNE and DMSO Dynamic Terrain in the Environment Federation projects. Dr. Miller received his Ph.D. in Mathematics from the University of Washington in 1976. Since then he has contributed to the areas of DIS and its successor, HLA, data models for terrain representations, real-time computer graphics, computer image generator design, adaptive filtering, image processing, feature extraction, machine vision, and optical character recognition.DAVID J. BAKEMAN is a senior realtime software engineer with Lockheed Martin Information Systems Advanced Simulation Center in Bellevue, WA. He graduated from Montana State University in 1986 with a B.S. in Computer Science. After graduation David worked for Hewlett Packard designing and developing real time software for digital low frequency spectrum analyzers. This included the design and implementation of two-dimensional graphical displays. David started working for Loral in 1993 and was originally responsible for the adaptation and implementation of the data intersection process for the VistaWorks program. Since joining the DTO team David has been involved in the design and implementation of the Dynamic Terrain Agent and the corresponding GDE Agent to visualize Dynamic Terrain changes. Since then David led the Ocean modeling team for Dynamic Virtual Worlds and served as the focal point for the integration of the Virtual Interactive Targets physics based damage assessment program into the DTO architecture. Most recently David was the lead for the effort to utilize DTO to make massive edits to the Southwest Asia terrain database.DR. STEVE ADELSON is a senior software engineer at Lockheed Martin Information Systems in Bellevue, WA. He contributed to all aspects of the DTO program, with a special interest in the repoly service, which allows dynamic terrain modifications of all sizes and database tailoring at synthetic environment initialization. DANIEL GILBERT is a senior software engineer with Lockheed Martin Information Systems Advanced Simulation Center in Bellevue, WA. He graduated from the State University of New York at Buffalo in 1992 with a B.S. in Electrical Engineering. Dan worked at Link Flight Simulation after graduation, where he developed avionics systems simulations for various military aircraft flight simulators, including the AH-64 Apache helicopter, UH-60 Blackhawk helicopter, and B-2 Stealth Bomber. Dan joined Lockheed Martin in 1995 and began work as a member of the STOW Dynamic Virtual Worlds team. In the following years, he has been involved in the development of portions of the OpenScene visual system. For the Environment Federation project, Dan worked primarily on the new point features functionality, as well as the integration and test with the other federates. Annette Janett is a senior software engineer with Lockheed Martin Information Systems Advanced Simulation Center. She previously led in the development of the OpenScene visual system, the STOW Dynamic Terrain and Objects, and Dynamic Virtual Worlds programs, and STOW SE integration with virtual simulation. Ms. Janett provided the expertise and development experience necessary to implement SEDRIS as the DTDB for point features.