Correlating DIS and CIGI to Improve InteroperabilityLance R. MarrouMark A. FaulkScience Applications International Corporation (SAIC)12901 Science DriveOrlando, FL 32826 USA(407) 243-3710, (407) 243-3553 (phone) (407) 243-3586 (fax) HYPERLINK "mailto:lance.r.marrou@saic.com" lance.r.marrou@saic.com,  HYPERLINK "mailto:mark.a.faulk@saic.com" mark.a.faulk@saic.comMr. Richard DeakinsU.S. Army Program Executive Office for Simulation, Training, andInstrumentation (PEO STRI) 12350 Research ParkwayOrlando, FL. 32826 USA(407) 380-4839 (phone), DSN 970 HYPERLINK "mailto:richard.deakins@us.army.mil" richard.deakins@us.army.milABSTRACT: Distributed Interactive Simulation (DIS) is an infrastructure that promotes interoperability amongst various training systems.  Common Image Generator Interface (CIGI) is a specification that promotes a common method of IG and host communication.  The DIS and CIGI standards development communities typically have a small intersection of individuals.  A person familiar with both, however, and who is involved in the standards development of each, can leverage the work of one with the other in order to improve that standard and therefore enhance interoperability.The U.S. Army Program Executive Office for Simulation, Training, and Instrumentation (PEO STRI) Project Manager Combined Arms Tactical Trainer (PM CATT) initiated the Synthetic Environment (SE) Core Architecture & Integration (A&I) program.  This contract is tasked with developing a Virtual Simulation Architecture (VSA) with the goal of providing the Warfighter with enhanced training by increasing interoperability between training systems, increasing the reuse of products developed for training systems, protecting the investments made in developing current virtual training simulations, and increasing the adaptability and extensibility of the virtual training simulations that are developed to enable the easy incorporation of new features.  A large segment of the PM CATT virtual domain programs uses DIS, so this standard is important in legacy, current, and future training systems. Establishing a single flavor of DIS that will be used by the training and simulation programs under PM CATT and then communicating the desired changes to the standards community at the Institute of Electrical and Electronics Engineers (IEEE) and the Simulation Interoperability Standards Organization (SISO) is one of the initiatives contributing to resolving the interoperability issues within the U.S Army virtual domain.  Additionally, adopting CIGI has become a recent effort across PM CATT in order to promote ease of transition to and from different image generators and for usage in standardizing visual data services within the VSA.These standards have several key components that should be correlated to identify potential extensions for maximizing interoperability. In this paper, we discuss several elements from DIS and CIGI, specifically communication services, coordinate systems, entity state, fire and detonation events, simulation processing, and dynamic environments.  We provide an intriguing perspective on how the development of interoperability standards can be leveraged with each other.  Where relevant, we provide specific recommendations and general suggestions on how these standards can be improved.  A key factor prevalent in much of the standards development is the gradual progression towards higher resolution training systems.IntroductionThe U.S. Army Program Executive Office Simulation Training & Instrumentation (PEO STRI) Synthetic Environment (SE) Core program is supporting the Training of our Warfighters by providing a common virtual environment (CVE) that links system and non-system simulations into a fully integrated and interoperable training capability. The SE Core concept includes the development of a Virtual Simulation Architecture (VSA) responsible for providing the Warfighter with enhanced training by increasing interoperability between training systems, increasing the reuse of products developed for those training systems, protecting the investments made in developing current virtual training simulations, and increasing the adaptability and extensibility of the virtual training simulations that are developed to enable the easy incorporation of new features  REF _Ref175564328 \r \h  \* MERGEFORMAT [1].Through the development and application of the VSA architecture framework, standards, and common products, SE Core is supporting the overarching objective that we "train the way we fight," training in a way that helps ensure mission performance in the contemporary operating environment (COE).  SE Core components will support virtual simulations at home station, Combat Training Centers (CTC), en route to and at deployed locations for training or wartime mission planning and rehearsals. SE Core is applying an incremental building block approach to the identification and development of key capabilities that represent the highest contributors to the achievement of interoperability and ultimately fair fight in support of combined arms training.  The result of force structure changes combined with the reality of current operations has yielded an environment where the level at which the Army needs combined arms training is now at a much lower echelon (platoon and company level). In order to provide effective combined arms simulation training at this level, virtual training system interoperability and fair fight must be achieved. Some of the key SE Core capabilities that represent the highest contributors to the achievement of interoperability and ultimately fair fight in support of combined arms training include common communication protocols, common Semi Automated Forces (SAF), common environment, common databases, common visual models, common sensor models, and common digital communications. SE Core mission is consistent with the overarching objective to provide the ability to train the effects of the full spectrum of the combined arms force even when only selected elements of the force are available for training.  This enables repetitive training in a realistic, stress-producing Live Virtual Constructive-Training Environment (LVC-TE), easily tailored to meet mission-specific training and rehearsal needs for active and reserve components A large segment of the Project Manager Combined Arms Tactical Trainer (PM CATT) virtual domain programs uses Distributed Interactive Simulation (DIS) (e.g. PM ACTT  REF _Ref188093456 \r \h  \* MERGEFORMAT [2]); as such, the evolution of this standard is a key component to the improvement of interoperability in legacy, current, and future training systems.  A smaller but growing segment uses the Common Image Generator Interface (CIGI).  The CIGI specification relevance is rising as the emerging technology comes closer to an established standard and acceptance within the visual systems community.DIS is a far more mature standard than CIGI, so it stands to reason that CIGI can better leverage lessons learned from the maturing and evolution of the DIS standard than vice versa.  On the other hand, CIGI represents newer ideas and a fresh perspective from a visual systems viewpoint not commonly found in the DIS community.  The constituency for DIS is much larger than that for CIGI, which is a younger specification, not yet beyond standing study group (SSG). DIS has evolved and survived in this large support base with a very heterogeneous hardware and software environment.  This widely varying user and provider community has forced DIS to assume change as inevitable and provides the flexibility to accommodate and evolve.DISDIS is an infrastructure that promotes interoperability amongst various training systems.  It links multiple types of simulations from the constructive, live, and virtual domains, and across different types of networks.  REF _Ref188342397 \r \h  \* MERGEFORMAT [3]  REF _Ref170636800 \r \h  \* MERGEFORMAT [4] DIS is required to support the large, current investment of PEO STRI DIS-based virtual simulation training systems.  For that purpose, the SE Core VSA has begun an effort to capture requirements for PM CATT for a DIS extension.  These VSA DIS (V-DIS) value-added specifications are intended to be rolled into the DIS standards; they not to be a one-off solution for PM CATT.In addition to these published standards, we have embraced the ongoing drafts proposed by the SISO DIS Product Development Group (PDG), including all currently proposed Problem / Change Requests (PCRs) and their solutions to be adopted in the next draft.  Although by definition, the draft is not final, we are willing to adapt to the upcoming new DIS standards and enumeration schemas.  REF _Ref188441213 \r \h  \* MERGEFORMAT [9]CIGICIGI is a specification that promotes a common method of image generator (IG) and host communication  REF _Ref188342335 \r \h  \* MERGEFORMAT [5].  CIGI is used by several PM CATT programs and has been adopted by SE Core within the VSA.  In addition to the published specification, there are several CIGI PCRs that have been put forward, and we have even proposed our own.  SE Core has performed a gap analysis between the CIGI 3.2 specification and several PM CATT programs, including IG Interface Control Documents (ICD).  This analysis helped formulate two dozen recommendations to the CIGI SSG on potential improvements.Why Can They Be Compared?At first glance, DIS and CIGI appear to be apples and oranges; they have no comparable parameters.  This is not true, however, because there are several components that that can be correlated or might even have an equivalent function (such as entity state).  The keystone in this correlation is that both specifications attempt to standardize communication originating from a simulation application.  In one case, that communication is passed along to other simulation applications (DIS) and in the other, it’s passed to one or several image generators (CIGI).  In each case, the study group that created the specification may not have considered the impact or even similar effort required for the other standard.  This paper will attempt to establish that some of that effort can be associative and that, that design work be can used to enhance interoperability.Communication ServicesThe primary network transmission services used differ in DIS and CIGI.  DIS will primarily use best-effort multicast or even broadcast.  A DIS simulation host will rarely use unicast, even though the standard allows for it on Simulation Management PDUs and requires it on the Object State PDU transmissions to the Environment Manager.  The reason for this is that most training systems have multiple simulation applications, including an AAR, which need to receive the data.  It is easier and more efficient to use a multicast group, if not broadcast, than to transmit multiple copies of those PDUs.  Additionally, the sending application is often unaware of the full set of applications interested in receiving the data.  On the other hand, CIGI suggests using a dedicated Ethernet connection (unicast) over User Datagram Protocol (UDP) or a shared memory communication service and typically has a single destination IG.  Can DIS and CIGI be compared with respect to how they handle communication services?  No, because to whom the simulation hosts communicates and when is the core difference between them.  It is worth noting, however, that CIGI does not have a separate communications standard  REF _Ref188853910 \r \h  \* MERGEFORMAT [14].Although both standards essentially support real-time, it’s clear that CIGI requires a much faster and stricter timing control, usually based on the vertical sync signal of the IG display system  REF _Ref188854208 \r \h  \* MERGEFORMAT [5].  DIS not only supports a much higher latency, but does not even require 100 percent reliability  REF _Ref188853910 \r \h  \* MERGEFORMAT [14].Coordinate SystemsA comparison of the coordinate systems used in each protocol proves to be intriguing.  DIS uses a right-handed geocentric coordinate system with the positive X-axis at the equator and prime meridian, the positive Y-axis 90° east longitude along the equator, and the positive Z-axis through the North Pole.  Conversely, the CIGI world position is based on a geodetic coordinate system (including a geodetic, not geocentric latitude) using (by default) the WGS 84 earth reference model (ERM).  The utilization of WGS 84 has the added benefit of also being used by the Global Positioning System (GPS), which is also probably used by live entities in a combined live, virtual and constructive (LVC) exercise.  It’s also interesting to note that CIGI allows the host to alter the ERM with a specific packet, specifying a 64-bit floating point value for both the equatorial radius and flattening.The benefit of the non-geodetic coordinate system is that the physical modeling (especially mobility) typically uses velocity and acceleration in terms of meters and not in degrees latitude and longitude.  Therefore, should DIS adopt a geodetic coordinate system, a coordinate conversion would always need to take place before sending out the entity state.  Also, many ground-based simulation systems will use Universal Transverse Mercator (UTM), a flat earth model, and thus require a coordinate conversion anyway.  Interestingly, the benefits of the geodetic coordinate system in CIGI depend entirely upon the database format of the IG.  Whether CIGI should allow for a different coordinate system depends on whether the IG or host has more processing time available for coordinate conversions. DIS might also be modified to allow for different coordinate systems, but the change of coordinate systems might be better suited if restricted to a particular multicast group (which could allow for separation based on training system application).  A dedicated gateway would therefore be a logical place for coordinate conversion between the groups.The origin for the entity coordinate system (and for views or other objects) in CIGI is based “typically on the center of gravity.”  Unfortunately, this not a firm directive of how the image generator should handle locating objects, because it seemingly allows an IG to overrule the reference point.  DIS has a better, clearer definition, wherein the origin of the entity is the center of its bounding volume, excluding the attached and articulated parts.  While that might seem more complex, what it does accomplish is that the origin of the entity coordinate system doesn’t change as the entity picks up or drops items or adjusts the position and orientation on various components.  Technically speaking, the entity coordinate system on an M1A2 tank in CIGI should change as the turret rotates, because the center of gravity changes.  Most likely, no CIGI implementer actually alters the entity reference point, so the CIGI specification should be updated to reflect that.EntitiesOf all topics, the receipt and processing of entity-state data has the largest and possibly most important correlation between DIS and CIGI.  Not only must the host receive DIS entity information, it must communicate that information to the IG.  It is apparent, therefore, to see what information is passed in the DIS protocol and make sure that any necessary information for visual display is included in the CIGI protocol, and vice versa.  We analyze in detail the correlation of processing entity information in the following sections.  See  REF _Ref188350722 \h  \* MERGEFORMAT Table 2.1 for an outline of the correlated entity state parameters.Table  STYLEREF 1 \s 2. SEQ Table \* ARABIC \s 1 1 Comparison of Entity State ParametersDISCIGIIDIDForce IDN/ATypeTypeArticulated / Attached PartsArticulated / Attached PartsAppearanceAppearance, Component Subclasses PCR 012MarkingSymbology PCRCapabilitiesN/AAlternate TypeN/AVelocityVelocity (Rate Control)AccelerationTBDAngular VelocityAngular Velocity (Rate Control)TBD VP RecordAlphaTBD VP RecordGround ClampLocationLocationOrientationOrientationCollision & Collision-Elastic PDUsCollision Detection EnableTBD VP RecordAnimation ControlsAny table entry marked “TBD” means “to be decided” and should be the subject of a future, if not current, PCR.Entity ID and TypeEach entity in the system needs to be identified uniquely.  DIS handles this with a 48-bit record of three 16-bit values for site, application, and entity ID.  CIGI provides only a single 16-bit value.  The correlation here assumes that the IG host has some sort of translation table for the potentially much larger number of DIS entities to correspond with those the IG must visualize.  Some image generators do support higher than a 16-bit ID, so the CIGI specification may be revised in the future to accommodate them.  Also, this increase may be required perhaps to support non-entity objects such as environmental or dynamic components.  As the approach for dynamic terrain, buildings, and other commonplace objects solidifies within DIS, it stands to reason that that work will be leveraged into improving CIGI.The Entity Type (a 64-bit septuplet) in DIS defines what that entity ID represents.  CIGI also supports a type, but it is only 16-bits.  It’s possible that in the future, the CIGI specification needs to have a wider range because a single IG implementation may require the unique classification of more than 16-bits worth of entity types.The concept of a Force ID used in DIS is not necessary for an IG / host interface.  Any visualization required for force identification will be implicit within the entity type and appearance.Attached and Articulated PartsBoth DIS and CIGI support articulated and attached parts, but they sometimes do so in a very different way.  CIGI supports a full hierarchical approach where each part is an entity unto itself (with all the power and responsibilities therein).  It also supports articulated parts, with the option for a reduced bandwidth packet (Short Articulated Part Control vs. Articulated Part Control).  On the other hand, DIS does not inherently support submodels, and therefore uses a minimum amount of information to identify all of the parts in a single packet associated with the parent entity.  Although the DIS scheme is still hierarchical, each child part cannot be an entity and has little individualistic information.  The reason for this discrepancy is a fundamental difference between a networking interface between different simulation systems and a networking interface between the IG and host in the same simulation.  It is reasonable to assume persistency with the IG / host, because for the most part, it will be a reliable unicast connection (not necessarily reliable TCP / IP, just the reliability gained from a dedicated line).There are several points that can be gathered from this evaluation.  Firstly, DIS may consider supporting submodels.  This could be accomplished with the use of the Attribute PDU as an extension to the Entity State PDU supplying a parent model ID and possibly additional information.  Secondly, after a closer look, the reduced bandwidth option for CIGI supports multiple articulated parts in the same packet, and the non-reduced bandwidth option does not.  High-fidelity applications with an articulated part requiring multiple degrees of freedom would be the only ones using the Articulated Part Control packet.  Thirdly, DIS supports many more articulations in the same (entity state) packet than does CIGI.  CIGI requires more packets to provide a lot of articulations on a single entity, but since that requirement will be rare, it’s not likely to have a significant cost.  Therefore, we would not recommend any changes based on the number of potential articulated parts.  Lastly, CIGI does not support articulated, attached parts with the Articulated Part Control packets.  An articulated part in CIGI cannot be separated from its parent.  To support attached parts, CIGI requires the usage of actual submodel entities.  This may be, in fact, a benefit, however, because detaching a part should “leave” something remaining in the battlefield space that would be no surprise to other players.  DIS does not inherently support such a concept, though it does support the fact that detached parts can become new entities.  The problem with these new entities is that suddenly much more information about the entity may become available that was not known a priori.  With the advent of the Entity Association VP record, however, DIS handles this issue.Entity AppearanceThe DIS appearance field contains more data than is transmitted by the CIGI appearance data.  Both have a state flag (active or not), but DIS has many more specific appearance flags that are also dependent on type (e.g. land platforms).  DIS also has recently incorporated the Variable Parameter record, which allows for even more appearance information such as colors, additional lighting flags, and thermal parameters  REF _Ref188341835 \r \h  \* MERGEFORMAT [7]. Unfortunately, CIGI has not yet matured to the level of detail that is offered by DIS, but a review of these appearance data in DIS will help identify the requirements for CIGI.  Along these lines, a recent effort was started within the CIGI SSG to more clearly define what type of entity appearance information (such as model switching for damage levels, hatch opening, etc.) is required (PCR 012). Entity MarkingThe marking of an entity is desirable in CIGI when used as visual symbology on the entity.  Such requirements have recently led to a significant effort within the CIGI SSG (PCR 011).  This effort also allows for other types of symbology that is not useful to DIS, such as user interface controls, heads-up displays, and planned view display (PVD) icons.  The CIGI proposal allows very complex symbology at the primitive level (lines, circles, etc.).  DIS currently only provides for text or a specific character set (digit chevron).  That format is unlikely to change because the complex primitive-level interface is only useful in an IG / host communication.Entity Capabilities and Alternate TypeCapabilities in DIS represent simulation-level data, such as whether an entity can tow another, supply fuel or ammunition, or repair others.  Such simulation information is not necessary to communicate to the IG, although the results of such capabilities will be communicated.  Alternate Type is also not useful for an IG / host interface.  As currently defined in DIS, it doesn’t have any relevance to the IG as the host need only identify the current type of entity.  Even in a future V-DIS proposal wherein the Alternate Type could be a disguise (and thus be a changing parameter), the host still needs to identify only the current entity type  REF _Ref188341835 \r \h  \* MERGEFORMAT [7].  The IG does not need to be concerned with potential visuals that are not in use.Dead ReckoningIn CIGI, linear and angular velocities are transmitted via a different control packet from the rest of the entity state, specifically the Rate Control packet.  This distinction is relevant in that it shows that rate control by the IG is not strictly necessary.  The host could perform all dead reckoning if it is able to keep up with the positions and orientations every frame of the IG.  In this respect, acceleration of entities is not currently supported in CIGI, but it probably should be included to better support dead reckoning.However, a recent proposal in CIGI has recommended the adoption of a local interpolation / extrapolation flag within the Entity Control packet and a global enable flag within the IG Control packet.  This would allow the IG to perform history-based extrapolation or even interpolation of entities and articulated parts (PCR 009).Entity TransparencyThe alpha value of an entity is not something currently handled by DIS, though the Variable Parameter provides the flexibility to allow it.  V-DIS has proposed several extended appearance records that allow for various paint schemes and colors, which could indicate levels of transparency in parts of the entity (such as a glass top)  REF _Ref188341835 \r \h  \* MERGEFORMAT [7].Ground ClampingExplicit ground clamping is not something that is normally thought of being required for interoperability.  Ground-based entities are typically terrain-clamped by default.  However, in some cases, it is difficult to discern if an entity should be terrain-clamped. For most of its exercise life, an AH-64D Apache helicopter does not sit on the ground and therefore is never terrain-clamped.  However, a flag of some sort needs to be provided in order to terrain-clamp it when it lands (also prior to its initial takeoff).  Although DIS does not currently support ground-clamping, this has recently been proposed within the context of the extended appearance records  REF _Ref188341835 \r \h  \* MERGEFORMAT [7].  A similar issue exists for ground entities that jump or fall. This concept is known as “present domain,” wherein the domain of the entity (land, air, surface, etc.) changes during the course of an exercise.  CIGI supports ground- and ocean-clamping, because they’re an inherent trait required for image generators.Other Entity ParametersPosition and orientation are handled identically in both DIS and CIGI (despite the differences in coordinate systems, see section  REF _Ref188856975 \r \h  \* MERGEFORMAT 1.5).  Location is defined using three 64-bit floating point values and orientation with three 32-bit floating point values.  Although some image generators allow the host to specify a different coordinate system on the fly, such flexibility is not required or even desirable for generic interfaces and therefore is not supported in CIGI beyond the possible change in the earth reference model.Most state-of-the-art image generators support collision detection, making the decision to include a collision detection flag within CIGI obvious.  Such a flag is not necessary within DIS, however, because the decision of where to process collision detection should be left up to the individual simulation systems.  The allowance in CIGI just facilitates that decision.  DIS does support the communication of collisions across training systems with the Collision  REF _Ref188342397 \r \h  \* MERGEFORMAT [3] and Collision-Elastic PDUs  REF _Ref170636800 \r \h  \* MERGEFORMAT [4].Entity animation controls are not provided in DIS at all.  CIGI offers a direction flag (forward or backward), loop mode (one-shot or continuous), and state (stop, pause, play, and continue). Currently, within DIS, it is expected that the host will communicate such animation requirements to the IG, based on other parameters, such as fire and detonation events (see the following section) or perhaps appearance flags within the entity state.  However, there is a recognized requirement for specific animations that would facilitate complex actions quickly within DIS  REF _Ref188349428 \r \h  \* MERGEFORMAT [8].The latest draft being worked within the DIS PDG modifies the articulated parameters fields to be more generic, calling them Variable Parameter records  REF _Ref188441213 \r \h  \* MERGEFORMAT [9].  The correlation within CIGI for this type of flexibility is captured in the Component Control and Short Component Control Packets.  As people or groups within the DIS community develop VP records, it becomes important to share those records to facilitate interoperability amongst disparate programs, similarly for CIGI.Fire and Detonation EventsWhen a weapon fires, it will typically have a visual impact on the scenario.  If a training system has visual capabilities, then it will transmit fire events to the IG.  Similarly, detonations need to be visualized.  DIS and CIGI have very different methods for handling these events, which outlines a major functional difference in the two specifications.  For DIS, several parameters from the fire and detonation events must to be transmitted, describing the firing entity, target entity, munition type, location, etc.  For CIGI, the only relevant data required is normally what kind of explosion (or visual effect) is required and where.Fire EventsA fire event occurs when a weapon discharges or an expendable is fired, be it a hand-held weapon by a dismounted infantry, a 155-mm howitzer, or even a ballistic missile.  REF _Ref188443116 \h  \* MERGEFORMAT Table 3.1 outlines the Fire Event parameters.Table  STYLEREF 1 \s 3. SEQ Table \* ARABIC \s 1 1 Comparison of Fire Event ParametersDISCIGIFiring Entity IDIDTarget Entity IDSimulation-specificMunition/Expendable IDN/AEvent IDSimulation-specificFire Mission IndexSimulation-specificLocationN/ADescriptorSelection of VisualsVelocitySimulation-specificRangeSimulation-specificTBD – Attribute PDU or Fire PDU ChangeWeapon FiredThe Firing Entity ID is required, because that will define where the muzzle flash or similar visual effect will occur.  A significant difference now manifests because the visual effect in CIGI must be represented as an “entity.”  In this case, the entity is an animation and could either be a submodel or perhaps merely one of the animations on the identified firing entity.  If a submodel, then the Entity Control packet can be used to manipulate the animation.  However, this also requires that the animation be predefined as a submodel with its own entity ID (taken from the more limited pool of CIGI 16-bit identifiers).  If the animation is not a submodel (per the CIGI hierarchy), then it will need to be controlled via a Component Control Packet.  There is currently no standardization on the Component Control packets, so we’ve established a preliminary proposal for the Entity class for Switch Node Control, Animation Control, Illumination Source, and Scale Control, including the modification of the Component Control and Short Component Control Packets to allow for a Component Subclass (PCR 012).The Target Entity ID, Event ID, Fire Mission Index, Velocity, and Range aren’t necessary for CIGI because they’re simulation-specific values.  The host may find them useful, but it will not need to transmit that information to the IG (unless for display purposes as user feedback, but that should be considered under Symbology).  The only minor issue on this is the Velocity value, which could be used to generate a slightly different effect, but it’s not likely that even very high fidelity simulations would do that.  The Velocity may also be used to reposition any munition or expendable, but that would be transmitted to the IG in a subsequent Entity Control for the new munition entity.The Munition/Expendable ID (“Expendable” was added in the latest draft  REF _Ref188441213 \r \h  \* MERGEFORMAT [9]) may be used by the host to create the Munition (if required) prior to its first Entity State PDU, but otherwise, it is not directly relevant to the fire event.  The location also isn’t relevant, unless the weapon that was fired cannot be unambiguously identified by the data in the Descriptor record (which includes the munition or expendable type).  Unfortunately, it may not be a trivial function to ascertain the appropriate weapon.  Consider an M1A1 which has two M240 machine guns.  To determine which one fires, the host will have to compute the offset of each gun and compare them with the offset of the fire Location from the entity position.  An extra value like this could be added to the Fire PDU, either as an Attribute PDU  REF _Ref188441213 \r \h  \* MERGEFORMAT [9] or some other modification of the Fire PDU, perhaps by reducing the Fire Mission Index to 16-bits and using the remaining bits as an entity-specific weapon identifier (but this change would not be backward compatible).The Descriptor record is either a Burst Descriptor or Expendable Descriptor record and will be the primary data from which the host will select the appropriate visuals (animation sequence or model).  The Expendable Descriptor record only contains the expendable type, which would be used to select the appropriate visuals (if more than one expendable type were possible on an entity).  The Burst Descriptor record contains several variables, all of which may impact the selection of appropriate animation visuals, including continued firing (a single fire event may be used for multiple rounds).Detonation EventsA detonation event occurs when a munition impacts or explodes, a non-munition explodes (e.g. gas tank on fire), or an expendable ignites or bursts.   REF _Ref188679690 \h  \* MERGEFORMAT Table 3.3 outlines the detonation parameters.Table  STYLEREF 1 \s 3. SEQ Table \* ARABIC \s 1 3 Comparison of Detonation Event ParametersDISCIGIFiring Entity IDN/ATarget Entity IDIDMunition/Expendable IDSelection of VisualsEvent IDSimulation-specificVelocitySimulation-specificLocation (World)Detonation LocationDescriptorSelection of VisualsLocation (Entity)Detonation LocationDetonation ResultSelection of VisualsArticulated / Attached PartsDetonation LocationThe Firing Entity ID is not required for CIGI because where the munition/explosion originated is not relevant for visualization.  In fact, outside of After Action Review (AAR) the Firing Entity ID is most likely not relevant for the simulation, unless it has somehow lost track of the Fire Event (or perhaps it wasn’t received).The Target Entity ID, on the other hand, will help identify the location of the detonation, or close to it, depending on the Detonation Result.  The articulated / attached parts will also help correlate the target explosion with the given location in world and entity coordinates.The Munition / Expendable ID and Descriptor will identify the selection of visuals for the IG to display, if multiple fidelities exist.  For instance, varying levels of munitions will cause different effects and sizes of explosions.  Similarly, the detonation result may affect the final model of the target entity.The Event ID and Velocity aren’t necessary to the IG.  They are simulation-specific and may be utilized by the host, but are not readily useful for visualization.  The velocity of the munition may in some ways be useful (e.g. estimating the size of a crater from an impact), but that data is not currently necessary for inclusion into CIGI.Simulation ProcessingThe IG can sometimes be used as a powerful processing tool in simulation, either physical or behavioral.  Terrain querying, line-of-sight calculations, collision detection, and other complex or time-consuming tasks could be handled by the IG.  In this respect, the IG is essentially a secondary processing node for the training system.Terrain querying (height above terrain or height of terrain) has little relevance in DIS except for a potential terrain correlation solution.  If desired, that could be simulated in DIS with the Action Request and Action Response PDUs.  Line-of-sight calculations are slightly more useful in DIS, because damage is calculated by the target, not the firing entity.  Therefore, if the firing entity’s visuals (or actual uncorrelated position) are slightly off, then he/she will be wondering why the munition did not produce the desired effect.  If the actual position were somehow corroborated with a distributed line-of-sight calculation, then such an event wouldn’t occur.  It’s certainly questionable, however, if network latency could even have a hope of solving such a problem.Collision detection is probably even more useful, but only in high-fidelity simulations.  For simulations requiring only box-like or even spherical collision volumes, then processing all collisions within the simulation will be the best choice.  For simulation desiring much higher fidelity, then some sort of distributed collision detection would be superior.  For example, one simulator would ask another, “Did I just bump into you?  Here’s my geometry.”  Alternatively, the geometry could be sent or identified a priori in a scenario configuration file.Dynamic EnvironmentsDynamic Environments present a golden opportunity to take lessons learned from both DIS and CIGI to improve their design and implementation.  Image generators obviously have a lot of interest in terrain databases and any dynamic terrain proposal should not ignore the vast experience of visual systems experts.  The communication of terrain, weather, smoke, destructible buildings, and destructible and deformable objects should consider the impact on networking, simulation training systems, and their image generators.  In this section, we only present a brief discussion on weather, smoke, and dynamic terrain.WeatherWeather has a robust and fairly comprehensive design in CIGI.  The implementation in DIS, however, is not specified.  It consists of several datum identifiers, many of them undefined and with no defined protocol (presumably some data query mechanism).  It is not clear in DIS if any of the Synthetic Environment PDUs were intended to be used for weather attributes, whether global or regional.  The Environmental Process PDU is the closest match to the CIGI scheme, however, and is also used for nuclear, biological, and chemical (NBC) warfare simulation  REF _Ref188696439 \r \h  \* MERGEFORMAT [10].  The Gridded Data PDU is generic enough to be used for weather (or almost any other function for that matter) and may have been initially designed for that purpose  REF _Ref188850677 \r \h  \* MERGEFORMAT [13], but is most likely better suited for terrain, water, or other needs requiring very high fidelity.  For a majority of virtual and constructive training systems, the Gridded Data PDU would not be useful for weather data.CIGI provides a convenient method using the Atmosphere Control packet to indicate global weather parameters, such as air temperature, visibility range, humidity, horizontal and vertical wind speed, wind direction, and barometric pressure.  In addition, the Weather Control packet can be used to provide the same data (and more) to a specific weather layer or region as defined in the Environmental Region Control packet or an entity as defined in the Entity Control packet.  The Environmental Region Control packet defines a rounded rectangle for localized weather parameters (also used for maritime and terrestrial surface conditions control and wave control).  CIGI essentially provides a very powerful and flexible interface for defining and controlling atmospheric effects on the IG.  This, of course, comes at the cost of the IG needing to implement this interface and associated functionality.SmokeAs noted previously, the Environmental Process PDU is intended to be used for NBC warfare simulation.  This PDU is essentially composed of two elements: the geometry and state.  The PDU can contain multiples of each, but due to the size limitations on packets, it likely will not contain too many.  DIS currently contains many more types of geometry than that supported in the CIGI Environmental Region Control packet.  More importantly, however, the DIS geometries inherently support dead reckoning while CIGI doesn’t.  CIGI may not need to, however, because it allows weather control packets to be affixed to entities, so a cloud that functions as an entity could be controlled like an entity.Dynamic TerrainThis is a subject that has been targeted on several occasions, but has yet to have a consensus for complete interoperability  REF _Ref188700491 \r \h  \* MERGEFORMAT [11]  REF _Ref188700492 \r \h  \* MERGEFORMAT [12].  From a DIS perspective, dynamic terrain can basically take two approaches: process or object.  The process approach requires the use of the Gridded Data PDU, while the object approach would use the Point, Linear, and Areal Object State PDUs.  Obviously, there are advantages and disadvantages to each; otherwise, both methods would not simultaneously exist.  It’s also worth noting, however, than destructible objects (such as buildings) will typically use the object approach.CIGI doesn’t have a defined interface for dynamic terrain, although it’s possible that the entity control mechanisms could be used to simulate the object approach in DIS.  Whichever method CIGI chooses to implement, if not just some combination of them all, it will most likely be based on how the visual systems experts (i.e. mostly the IG vendors) are able to implement dynamic terrain on the IG.SummaryThe SE Core program is working to improve simulation interoperability across the PEO STRI virtual simulation programs.  It will provide an open architecture and a common virtual environment (CVE) for all U.S. Army training elements in the virtual domain.  It’s likely that this architecture will be readily extensible to the entire LVC domain  REF _Ref188348288 \r \h  \* MERGEFORMAT [6].  Adopting and reviewing both DIS and CIGI is an obvious choice within the VSA, and correlating the two standards is a straightforward application of systems engineering.It is evident from this analysis that several changes or extensions can be made in both DIS and CIGI.  In fact, several proposals have already been made or are the subject of other papers.  It is encouraging to see the DIS standard provide greater flexibility, especially with the advent of the Variable Parameter record and Attribute PDU, which allow such extensions to occur quickly.  It is our hope that this correlation effort can improve interoperability and facilitate proposals within both standards groups.DIS Summary of RecommendationsIn this paper, we have discussed several areas in DIS that could be improved or investigated based on this correlation analysis.  These are summarized below:DIS should be able to support an “alpha” value of some type for entities or objects.  This could be put into a VP record appropriate for that object.  V-DIS has recommended several VP records for entities that include a paint / decal scheme that would support transparency.DIS should support a method of distinguishing ground-clamping for specific entities.  An example of this was recommended in the “present domain” flag of a V-DIS VP record.  For example, if the present domain were terrain, then the entity should be ground-clamped (even if it’s an aircraft).DIS should provide an approach for animation controls that could support higher fidelity simulations.  V-DIS also has a recommendation for this with respect to lifeforms  REF _Ref188349428 \r \h  \* MERGEFORMAT [8].DIS should provide a parameter to identify the weapon fired in Fire and Detonation PDUs.  This could be done with a coupled (bundled) Attribute PDU.Distributed processing algorithms such as collision detection could be investigated for relevancy within DIS. DIS should consider looking at CIGI’s approach to atmospheric, weather, and ephemeris models.DIS could be modified to allow other coordinate systems to reduce the number of coordinate conversions that take place.  DIS is not a one-to-one protocol like CIGI, however; so perhaps this change of coordinate system could be restricted to a particular multicast group.Any Dynamic Terrain approach needs to consider both CIGI and DIS.DIS could be modified to allow submodels of entities.  This could be accomplished with the use of the Attribute PDU.CIGI Summary of RecommendationsWe have also discussed several areas in CIGI that could be improved or investigated based on this analysis.  These are summarized below:CIGI could be modified to allow other coordinate systems to facilitate coordinate conversion in the host rather than the IG.  An alternate suggestion is to create a non-geometry “super-model” that is placed at some reference point in the database and then have every entity model be a child of that super-model. If CIGI were to adopt an alternate coordinate system methodology, then perhaps some additional “hand-shake” functionality could be incorporated whereby the IG identifies which system it prefers.  Additionally, it should be written clearly in the standard that CIGI does not alter the entity reference point (and thus coordinate system) once it is established. CIGI should support entity marking and other forms of symbology (PCR 011).  This is probably more comprehensive than that required by DIS and the details of this PCR should be further investigated to see if DIS could further leverage off the work.CIGI could be modified to support acceleration for dead reckoning (including for articulated parts).CIGI could be modified to use fields of more than 16-bits for both entity type and ID.CIGI could be modified to support additional appearance data and model switching (PCR 012).A standardization of component control packets within CIGI would facilitate its primary function (PCR 012).CIGI could be updated to support more types of geometry for environmental region control.Any Dynamic Terrain approach needs to consider both CIGI and DIS.Investigate whether a packet of the same size as Articulated Part Control could be implemented that would allow for more parameters and more articulations, rather than six degrees of freedom for one part.ReferencesFaulk, Mark, Richard Fuchs, Jeffrey Todd Littlejohn, and Brian Kemper. “A Product Line Approach for the Virtual Domain.” 06F-SIW-041, SISO Simulation Interoperability Workshop, Fall 2006.Weirauch, Chuck. “Keeping Up Has Its Challenges.” MS&T, Issue 1/2006.IEEE 1278.1-1995: “IEEE Standard for Distributed Interactive Simulation – Application protocols”.IEEE 1278.1a-1998: “IEEE Standard for Distributed Interactive Simulation – Application protocols”.The Boeing Company. “Interface Control Document for the Common Image Generator Interface (CIGI), Version 3.2.” Report No. TST06I019, 2006.Weirauch, Chuck. “Truly Seamless Integration of LVC Training Assets.” MS&T, Issue 4/2007.Marrou, Lance, Mark Faulk, Terry Tyson, and Brian Kemper. “Enhancing Virtual Simulation Systems Interoperability through V-DIS.”  07F-SIW-076, SISO Simulation Interoperability Workshop, Fall 2007.Marrou, Lance, Mark Faulk, Stephanie Banaag, and Brian Kemper. “Lifeforms in V-DIS.”  08S-SIW-071, SISO Simulation Interoperability Workshop, Spring 2008.IEEE 1278.1-200XD13: “IEEE Standard for Distributed Interactive Simulation – Application protocols”.  Draft 13, under review by DIS PDG.O’Connor, Michael, et al. “Developing Biological Hazard Detection Tactics, Techniques, and Procedures Using Distributed Simulation.” 98F-SIW-140, SISO Simulation Interoperability Workshop, Fall, 1998.Li, Xin, and J. M. Moshell, “Modeling Soil: Realtime Dynamic Models of Soil Slippage and Manipulation”, SIGGRAPH, July 1993.Upton, Graham, Timothy Woodard, Joseph Wychock, Greg Amend, Steven Luoma, and Rita Simons. “Networked Real-Time Dynamic Terrain for PCs.” IMAGE 2000 Conference Proceedings.Reynolds, Robert. “State of the Art and Evolution of Weather Simulation Technology.” Proceedings of I/ITSEC, 2006.IEEE 1278.2-1995: “IEEE Standard for Distributed Interactive Simulation – Communication Services and Profiles”.Author BiographiesLANCE R. MARROU is a senior systems engineer at SAIC in Orlando, Fla.  He is currently a lead in the SE Core Architecture & Integration program, developing V-DIS.  Mr. Marrou received his master’s degree in computer science from the University of Central Florida.  He has been working with simulation and training systems since 1992 and has more than 20 years experience in software and system design.MARK A. FAULK is a senior systems engineer at SAIC in Orlando, Fla.  He is currently the system architect for the Synthetic Environment (SE) Core Architecture & Integration program, developing a virtual domain product line architecture for the Army.  Mr. Faulk received his bachelor’s degree in computer science from the University of Central Florida.  He has over 13 years of experience with simulation and training systems and more than 23 years in software and system design.  Mr. Faulk has been involved with multiple simulation programs including CCTT, VCCT, UK CATT, CTIA, and EST 2000.  He has performed design, development, and consulting in the areas of C4I communications, interoperability (DIS and HLA), user interface, AAR, and network communications in the virtual and live domains.RICHARD R. DEAKINS is visual systems engineer for the U.S. Naval Air Warfare Center Training Systems Division supporting U.S. Army Program Executive Office for Simulation, Training, and Instrumentation on the SE Core program.  Mr. Deakins received his undergraduate degree in computer science from the University of Central Florida.  Mr. Deakins has more than eight years of system engineering experience in modeling and simulation applications, with a specific focus on image generators, terrain databases, and display devices.