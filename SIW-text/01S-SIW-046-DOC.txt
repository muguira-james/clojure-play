Experiences and Lessons Learned Using RTI-NG in a Large-Scale, Platform-Level FederationMark TorpeyDeborah WilbertBill HelfinstineWayne CivinskasLockheed Martin Information SystemsAdvanced Simulation Center37 North AvenueBurlington, MA   01803781-505-9500mtorpey@ lads.is.lmco.com, dwilbert@lads.is.lmco.com, bhelf@lads.is.lmco.com, wayne.j.civinskas@lmco.comKeywords:HLA, RTI, scalability, Joint ExperimentationABSTRACT: The capability to simulate some elements of a large-scale conflict at the platform level is an essential requirement for both the staff-level training and Joint Experimentation simulation domains. As reported in "RTI-NG Performance in Large-Scale, Platform-Level Federations" (00F-SIW-031), our work showed that RTI-NG should be able to provide adequate performance to support these kinds of simulation exercises. This paper builds upon that work, reporting on the experiences and lessons learned at U.S. Joint Forces Command (USJFCOM), using RTI-NG with the JSAF Federation within the context of an attack operations Joint Experiment.1. 	BackgroundJoint Experimentation is an iterative process of collecting, developing and exploring concepts to identify and recommend the best value-added solutions for changes in the doctrine, organization, training, material, leadership and people required to achieve significant advances in future joint operational capabilities. In 1998, the U.S. Joint Forces Command (then U.S. Atlantic Command) was appointed as the Department of Defense lead agency for Joint Experimentation. As a result, a J9 staff section was created at USJFCOM to conduct Joint Experimentation[1].Given both the large-scale nature of joint operations (i.e., theater-level conflict) and the forward-looking aspect of the Joint Experimentation process, the experiments inherently involve the simulation of many thousands of weapons systems platforms. Although some experiments are performed at an aggregated level of representation, other experiments require representation at the weapons system platform level. Two recent experiments, J9901[1,2] and Attack Operations 2000 (AO’00) required the simulation of 20,000 to 100,000 objects using over 100 federates. Future Joint Experiments, including Unified Vision 2001 (UV’01) and Millennium Challenge 2002 (MC’02), may require an even greater number of objects to be simulated.USJFCOM selected simulation federates developed by the Defense Advanced Research Projects Agency (DARPA) for the Synthetic Theater of War Advanced Concept Technology Demonstration (STOW ACTD)[3,4,5] to support the platform-level Joint Experiments. The development of the STOW federates (now known as the JSAF Federation) took place at the same time as the early development of the Defense Modeling and Simulation Office’s (DMSO’s) High Level Architecture (HLA). These federates use a non-compliant prototype version of the Runtime Infrastructure (RTI), known as RTI-s.RTI-s is an implementation that is roughly based upon a pre-draft of the HLA Interface Specification Version 1.0. It has been used by DARPA and USJFCOM for three years with great success, and has continued to evolve to support Joint Experimentation scalability requirements. In an effort to make the JSAF Federation a fully HLA compliant federation, the JSAF simulation infrastructure was modified to utilize the HLA 1.3 Interface Specification, and consequently, RTI-NG.As part of that process, the RTI-s software was also modified to use the HLA 1.3 API. Although this version of RTI-s (known as RTI-s1.3) is not HLA compliant, it does allow the JSAF federates the potential of using either RTI implementation with minimal effort (hopefully with just a recompilation of the federate). The main purpose of modifying RTI-s was to retain a baseline system that could be used to gauge the performance of RTI-NG, and also as a fallback for this year’s Joint Experiments.RTI compliance (or verification) for this version of RTI-s is not currently feasible. Although it does use the same API (i.e., the same source code header files), it does not implement two of the required services (Time Management and Ownership Management, neither of which are used by JSAF). For the services that it does implement, there are cases where the implementation of that service is not semantically correct according to the HLA 1.3 Interface Specification. For example, RTI-s does not guarantee that object names are unique upon object registration, it does not cause a federate to rediscover an object if a federate has locally deleted it, nor does it implement initial discovery but instead depends on implicit discovery when a federate receives the object's first update. RTI-s also does not implement the advisory services as defined in Sections 10.23 - 10.30 of the HLA 1.3 Interface Specification. Another significant difference is that RTI-s allows a federate to dynamically change the routing space that an object is published to. RTI-s also provides four transport protocols (reliable, minimum rate, state consistent, and best effort) instead of the two that RTI-NG provides as defined in the 1.3 interface specification. Lastly, but also very important, is that RTI-s doesn't use reliable communications for its internal administration traffic which can in certain circumstances make it non-compliant with the 1.3 specification, and further, it manages the federation using a distributed management scheme.Thus, the motivation of the work reported in this paper was to determine if RTI-NG could scale to meet the object and federate scalability requirements of Joint Experimentation.Our first paper discussed the results of a series of laboratory tests designed to evaluate the scalability of a JSAF-based real-time federation using RTI-NGv3. Given the limited number of computers available in the laboratory, the tests were focused on object scalability. In particular, we looked closely at object creation over time to determine if RTI-NG could handle the start-up time requirements (assumed to be thirty minutes at most) of a theater-wide platform-level exercise. The results of our tests showed that, given a limited number of federates, RTI-NG could easily handle the creation of 20,000-36,000 objects within the assumed start-up time requirement[6].This paper discusses experiences and lessons learned during initial testing of the JSAFv5-based JSAF Federation with RTI-NGv3.2 at USJFCOM during the week of November 13-17, 2000. The goals of the test were to identity potential problems that might prevent a successful UV’01 event. Several potential problems were identified related to the use of the verified RTI-NG vs. RTI-s. Specifics of the problems discovered and potential reasons for their causes are provided in the next sections.2.	Areas of Interest with RTI-NG for Joint ExperimentationRTI-NG is capable of providing large numbers of objects, as shown in our prior work and by the test harness developed by the RTI-NG development team. However, each federation, and in fact, different experiments conducted by those federations, can exercise the capacity of the underlying RTI in different ways. The JSAF Federation conducting attack operations Joint Experiments stresses the underlying RTI in several exceptional ways.System integration tests conducted in November of 2000 indicate that the current implementation of RTI-NG will require some modification to support some of the unique JSAF Federation requirements and operationally useful functionalities. Specifically, the following areas were identified as either required to meet JSAF Federation objectives, or as extremely useful in using the RTI in an operational setting:Federation start/restart timeObject turnoverEffects of network infrastructureFederation fault toleranceFederation development supportFederation start/restart time. Not only do platform-level Joint Experiments require many objects, they also require many federates. Exercises conducted previously involved well over one hundred federates. Despite a large number of participating federates, the RTI must support all federates joining or rejoining (and loading an initial scenario) within a reasonable time (about a half-hour). Furthermore, if a federate chooses to join an exercise after it has started, there should be no perceivable impact on the federation as a whole.Object turnover. Many of the objects that are modeled in Joint Experiments are ephemeral; in other words, they are created for a relatively short period of time and then deleted. (See Ceranowicz et al [2] for a discussion of the JSAF Federation architecture and how these ephemeral objects are used.) The RTI must support a very high turnover rate in objects. In the case of the Attack Operations 2000 scenario, about one thousand object creations and one thousand deletions per minute were necessary to meet the needs of the experiment.Effects of network infrastructure. Another potential issue for an RTI supporting the JSAF Federation is that the exercises are typically distributed across sites connected by WAN. An RTI that provides adequate performance on a single LAN may break down when faced with a configuration distributed across a WAN. WAN traffic can introduce variable delays that might affect an RTI's internal protocols.Federation fault tolerance. Another exceptional requirement imposed by the JSAF Federation on the RTI is that the federates are continually undergoing significant code development to support the evolving, forward-looking nature of Joint Experimentation. This results in potentially unstable federates. When federates fail unexpectedly, the RTI is exercised in an unusual manner. The exercise as a whole should not be compromised by the behavior of the RTI in the face of a federate failure. Federation development support. Lastly, federations under development have requirements above and beyond those of mature federates. The RTI needs to provide structural support to aid in determining where bottlenecks and weak points exist in the system as a whole: in the RTI, in the federates or their use of the RTI, and possibly even in the networking infrastructure. This support is needed so that federations can be developed with the necessary insight for determining how to fix or work around problems which inevitably crop up in state-of-the-art systems.These concerns are grouped together and discussed in the following two sections. Section 3 describes the costs incurred by providing the HLA 1.3 Interface Specification mandated reliable services in RTI-NG. Section 4 describes the special needs of federations (and their potentially unstable federates) under development.3.	Costs of Reliable ServicesThe HLA 1.3 Interface Specification was developed to support the needs of simulations from all domains of the Modeling and Simulation community. Some of these domains require high levels of reliability. This focus is reflected in the services provided, such as Time Management, and the way in which even basic Data Distribution services are specified. RTI-NG, as a fully compliant implementation, was designed and optimized to support all the 1.3 Specification required services.In order to provide reliable service, RTI-NG maintains a reliable communications mesh, by which all federates remain in contact with each other. However, as the number of federates grows large, the existing mechanism within RTI-NG appears to scale poorly. As the number of federates is increased, the time it takes for a new federate to join or rejoin is increased. This problem is exacerbated by the mechanism used when creating (or deleting) objects, such as during the loading of initial scenarios at start-up time. The HLA 1.3 Interface Specification specifies that the RTI will use mechanisms during object creation (and deletion) that require reliable notification to all federates.3.1	Object NamingObject creation is particularly costly. Part of the process of creating an object is generating a unique name for it. For application-specific reasons, JSAF federates need to provide those unique names to the RTI. The federates are capable of using a distributed algorithm to generate unique names locally.The HLA 1.3 Interface Specification allows the user of the service to provide a unique name. However, according to Section 6.2, a fully compliant implementation of the RTI must ensure each name's uniqueness. RTI-NG performs this requirement using a mechanism that involves reliable communications with a centralized name server. This in itself is enough to make object creation relatively expensive. While other implementations could be possible, the requirement that the RTI must ensure name uniqueness across the entire federation places a significant burden on this service of the RTI.Further, not only is this reliable messaging inherently expensive, but the HLA 1.3 Interface Specification requires the RTI to verify the uniqueness of each name before returning. Unfortunately, there is no way to ensure uniqueness without race conditions except for having a single serialized server, which implies that a blocking round-trip to this server is required. The fact that the 1.3 Specification essentially requires the use of blocking I/O is extremely non-scalable for a scalable real-time man-in-the-loop federation.3.2	Object Initial StateAdditionally, the HLA 1.3 Interface Specification does not provide an efficient mechanism for federates to automatically determine the initial state of remote objects. The specification provides a “pull” mechanism for object updates, which is inherently not scalable with a large number of federates, since each object creation results in a reliable object discovery to each federate, followed by a reliable query for initial state from each federate. The burden of the reliable mechanisms is particularly heavy on exercises involving large numbers of ephemeral objects or when late joiners must download the state of many objects from the network.Since the specification does not explicitly support a “push” mechanism for object discovery, an alternative strategy was implemented whereby proactive state broadcasts are used in conjunction with a technique called "Delayed Discovery" to avert most queries. Using these techniques, creating objects is generally no more expensive than updating them and late joiners contribute no significant traffic to the ongoing exercise. In JSAF, heartbeat protocols are implemented such that periodically a full update of all of an object’s attributes are sent. On the receiving side, queries are not performed since that is inherently non-scalable. Instead, latency is traded off for efficiency (e.g., if the heartbeat interval of an object is one minute, it could take up to one or two minutes for a federate to receive the full update).3.3	WAN PerformanceThe JSAF Federation has currently only been tested using RTI-NG on a single LAN. The Millennium Challenge '02 Joint Experiment, planned for 2002, needs to be broadly distributed across a WAN architecture. Communications across WANs not only incur additional delay, they incur larger variations in delay. It is expected that these delays will significantly worsen the achievable performance. The actual effect from WAN delays on RTI-NG performance for the JSAF Federation remains to be seen.The task of providing adequate performance for interactive simulations that use reliable communications over a WAN is inherently difficult. The HLA 1.3 Interface Specification should provide a way for a federation to opt out of the underlying reliability infrastructure when those services are not needed so that it becomes more feasible to conduct interactive exercises over WAN infrastructures.4.	 Federation DevelopmentAs mentioned previously, federates in the JSAF Federation are undergoing active development. During system integration, the federates need to be tested in the context of the entire federation. Both during the testing process and in the actual exercises, the immature federates are likely to be unstable.4.1 Federate Failure RecoveryAs described in the previous section, starting the JSAF Federation using RTI-NG is a time-consuming process. During system integration and iterative debugging, restarting is a common occurrence. Thus, the high cost of starting up is a recurring cost during development.As would be expected, immature federates are prone to failing. While this will presumably occur with less frequency during the actual exercises, it should be still be expected that individual federates could suddenly stop without gracefully deleting their objects (or passing off their ownership) or resigning from the federation. When such failures do occur, the RTI should continue to operate as normal. The HLA 1.3 Interface Specification should provide mechanisms whereby the failure will be transparent to the ongoing simulation exercise.Unfortunately, in our experience, when a federate fails suddenly (being unable to resign from the federation) while using RTI-NG, the exercise as a whole must usually be restarted. Software critical to the infrastructure of the RTI (either the RTI Executive process or the Federation Executive process) often no longer operates properly. Although the problem is not completely understood at this point, presumably it relates to the maintenance of the reliability mesh discussed in the previous section.However, even if RTI-NG operates properly in face of ungraceful federate failures, the 1.3 Specification leaves the federation as a whole in a “Catch 22” whenever the failed federate is the owner of any simulation objects.After the failure, no federate owns the “orphaned” objects, and ownership cannot be granted to any federate because the original owner is no longer present to grant permission for the transfer. So, the state of those “orphaned” objects can no longer be updated nor can they be deleted. New objects cannot be created to replace the old ones since objects will have names that conflict with the existing "orphans". Individual federates are not even allowed to decide to forget about the orphaned objects because the 1.3 Specification requires that all federates be continually aware of all objects in the simulation space. This implies that when a federate "locally deletes" an object, the RTI forces the federate to rediscover it (presumably for the purpose to rediscovering an object at a different level in the federate’s Simulation Object Model hierarchy, if the subscriptions has changed since the original discovery occurred).If the orphaned objects are important in the exercise, the entire federation must be restarted. This issue, along with the costly federation start-up, makes it especially difficult to use RTI-NG, or any verified RTI, with a federation under development.One possible mechanism for dealing with orphans would be to modify the 1.3 Specification to allow a privileged federate to usurp ownership of an orphaned object and forcibly remove it from the simulation space. This approach has several disadvantages, however. One is that deleting orphaned objects centrally would require the same reliability overhead currently incurred when valid objects are deleted. If the federate that fails is a server of many objects, such as a ClutterSim (which typically simulates several thousand objects representing background road traffic), the overhead of cleaning up after the failure would bring the exercise to a halt.Another disadvantage of the super-federate approach is that timing out of obsolete remote objects needs to occur without manual intervention. Again, in the case of a ClutterSim or similar server federate, it would not be acceptable for operator intervention, or even confirmation, to be required in order to delete each simulation object. While generic timeout mechanisms could be developed, currently application specific knowledge is required for accurately determining when remote objects can be safely removed.A better mechanism for dealing with orphans was previously implemented by simply refraining from forcing federates to rediscover objects that are locally deleted. This sidesteps the issue and allows federates to use application-specific information to automatically time out the orphaned objects appropriately. A preferred solution would be to extend the local delete functionality in the specification to provide for both cases (i.e., selectable rediscovery).In general, the HLA 1.3 Interface Specification should account for the fact that federates will sometimes fail, and provide mechanisms and services to make recovery from these failures as transparent and as painless as possible. Compliant RTI implementations should not only provide these services, but they should also be well tested under these circumstances.4.2	Federate Debugging DifficultiesFederates are routinely run from within a debugger, both during system integration and during actual events. Failures inevitably occur and the reasons need to be diagnosed. Stack traces need to be immediately analyzed so that possible causes, fixes, and workarounds can be suggested.Multi-threaded applications are known to be more difficult to debug than single-threaded applications. RTI-NG introduces additional threads in order to provide asynchronous I/O. Federates which had been single-threaded become multi-threaded once the RTI is linked in, and subsequently more difficult to debug. This problem is most acute with the Linux operating system, which is known by the industry to have poor debugging facilities for multi-threaded C++ applications.RTI-NG provides a single-threaded mode for I/O, presumably to address this concern. However, when operating in single-threaded mode, performance under stress is degraded. Currently, even with asynchronous I/O, the performance is not adequate, so using the single-threaded version is not an option.Debugging federates is further hampered by the fact that RTI-NG is currently only available as precompiled libraries. It would be useful to have access to full debugging information within the RTI. Sometimes the parameters used at the interface to the RTI or possibly even within the RTI would be useful in debugging a federate problem.Without source code for the RTI, other types of debugging and development tools can be hobbled, including off-the-shelf memory checkers and profilers or directly inserted instrumentation and debugging code.Finally, in the case that faults occur actually in the RTI itself, they cannot be corrected by the federate developers. This means that access to RTI development staff can become a bottleneck. Even if the resources are available to address the problem immediately, delay is necessarily incurred in obtaining a new version of the RTI. Often, military simulation system integration occurs at secure sites with restricted access, making updates even more difficult to obtain and distribute.In order to improve operational usefulness, the RTI needs to provide as much support as possible for federations under development, and this includes easing the debugging process during system integration. The need to decrease start-up time and behave gracefully in the face of failed federates, described in sections above, are part of that support. Ideally, the RTI would be able to support JSAF Federation debugging in single-threaded mode. If not, adequate tools for debugging multi-threaded processes on Linux platforms will soon be available. Federate debugging would also be considerably easier if developers had access to the source code of the RTI they are using. Access to source empowers developers to control debugging information, use third party tools, instrument critical access points, and temporarily patch any problems encountered.4.3	Federate Development DifficultiesConverting the JSAF Federation to utilize RTI-NG was rendered more difficult than necessary by decisions made in the HLA 1.3 Interface Specification, and in the design of RTI-NG in response to the specification.An example of a decision in the 1.3 Specification that impacted the JSAF Federation's adoption of RTI-NG is the focus on Time Management services. The 1.3 Specification requires that compliant RTI implementations provide sophisticated Time Management services that are appropriate for federations performing non-real-time simulations. These services are not appropriate, however, for man-in-the-loop simulations such as those conducted by the JSAF Federation. Timestamps, on the other hand, are an important service for JSAF federates. Previously, timestamp information was available to federates from RTI-s. Since the 1.3 Specification does not provide access to timestamp information unless running time managed, the FOM used by the JSAF Federation needed to be modified to include timestamping attributes and parameters. This approach is inferior to using RTI-provided timestamp information, since all federates must be modified in order to provide correct timestamps for appropriate FOM objects and interactions.A design approach in RTI-NG that impacted its adoption by the JSAF federates is the non-reentrant interface of most of its API. In other words, one cannot call an RTI service from within RTI callbacks. It is unclear if this is required by the 1.3 Specification. While on the surface this does not appear to be a major difficulty, one must remember that federates receive all simulation state information from the network in RTI callbacks. Thus, although it is natural to write code which requests initial state information for an object in the same place the object discovery is processed, this is not allowed. The RTI call for requesting the information must be queued and delayed until the callback processing the discovery is completed. Similarly, state updates that are the result of remote changes must be queued, as must responses to interactions.Although this difficulty has already been worked around by the JSAF federates, it would still make sense to lift this restriction. RTI-NG now supports a mode in which these restrictions are partially lifted. However, all difficulties related to concurrent access should be handled efficiently within the RTI and not need to be reinvented and maintained within each federate. It seems appropriate to add this requirement to the HLA Interface Specification for future compliance testing.Support that is provided within infrastructure, like the RTI, is leveraged by many federations, providing a multiplier effect on the return. Given this effect, the RTI's API should be designed to be as complete and as convenient as possible for the federates. Furthermore, when mechanisms are provided by the RTI (rather than in each federate), it is easier to bring diverse applications into each federation, since application level modifications are not necessary to support the required mechanism. Thus, the HLA 1.3 Interface Specification should specify an easy to use interface and a wider range of services to meet the requirements of disparate federations.5.	ConclusionThe adaptation of RTI-NG, a verified RTI implementation, by the JSAF Federation has been a challenging process. There are some changes to the HLA 1.3 Interface Specification and the RTI-NG design discussed in the paper which would have made this process easier (e.g., timestamping service, re-entrant single-threaded design, etc). At this time, the JSAF Federation is capable of using RTI-NG to a limited extent.The JSAF Federation has not yet been able to use RTI-NG to conduct a full blown platform-level Joint Experiment. At this point, there are still several issues outstanding, but the primary concern is whether RTI-NG can adequately scale to meet the needs of Joint Experimentation.The RTI-NG Development Team has been working with the JSAF Federation developers to gather information about problems and to understand the federation requirements in order to produce new versions of RTI-NG that may address the current concerns. Scalable performance is one of the key issues being addressed, and they are working on reducing the administrative overhead introduced by RTI-NG as required by the 1.3 Interface Specification in order to reduce the traffic load. It remains to be seen whether a version of RTI-NG will be available in the necessary timeframe to meet all the requirements of the JSAF Federation Joint Experiments in Q2 2001.It is an inherently difficult task for a communications infrastructure to provide adequate performance for Joint Experimentation. This task is made more difficult for compliant RTIs by the way the HLA 1.3 Interface Specification specifies certain services. The mechanisms currently specified for generating unique names, discovering objects' initial state, and removing obsolete simulation objects do not provide the flexibility needed for efficiently scalable implementation.Finally, changes to the HLA 1.3 Interface Specification are needed to support federations that have low-reliability, high-throughput requirements, and federations that are under active development and system integration. A final note, the authors have not investigated whether the specification problems noted within this paper are also inherent in the IEEE 1516 HLA Specification. We plan to investigate this more fully in the coming months.6.	AcknowledgementsThe authors would like to thank Roger Wuerfel and Frank Hodum of the RTI-NG Development Team for their insights and timely support during initial testing at USJFCOM, and for their help in clarifying the issues presented in this paper.Additionally, the authors would like to thank Barron Gibson of the DMSO Support Team for his invaluable assistance.7.	References[1]	R. Dehncke, C. Morgan: “Virtual Simulation and Joint Experimentation, STOW and Joint Attack Operations”, Simulation Interoperability Workshop, 99F-SIW-079, September 1999.[2]	A. Ceranowicz, M. Torpey, B. Helfinstine, D. Bakeman, J. McCarthy, L. Messerschmidt, S. McGarry, S. Moore: “J9901: Federation Development for Joint Experimentation”, Simulation Interoperability Workshop, 99F-SIW-120, September 1999.[3]	C. Kanewski, L. Budge, R. Strini, M. Salisbury: “Paving the Way for 21st Century Training, The Synthetic Theater of War,” Simulation Interoperability Workshop, 97S-SIW-133, March 1997.[4]	P. Feldmann, P. Muller: “DARPA STOW Synthetic Forces,” 19th Interservice/Industry Training Systems and Education Conference, December 1997.[5] 	G. Lukes, G. Goodman: “Synthetic Environments and Lessons Learned from the STOW 97 ACTD,” Simulation Interoperability Workshop, 98S-SIW-097, March 1998.[6]	W.Civinskas, B. Dufault, D. Wilbert: "RTI-NG Performance in Large-Scale, Platform-Level Federations", Simulation Interoperability Workshop, 00F-SIW-031, September 2000.Author BiographiesMARK TORPEY is the lead developer and lead integrator of the Joint Semi-Automated Forces (JSAF) Computer Generated Forces (CGF) simulation system for USJFCOM’s JSAF Federation Joint Experimentation team. He is a Staff Software Engineer at Lockheed Martin Information Systems Advanced Simulation Center (LMIS-ASC). DEBORAH WILBERT is a Senior Staff Software Engineer at Lockheed Martin Information Systems Advanced Simulation Center (LMIS-ASC). Deborah is currently implementing tools that support FOM Agility in HLA compliant federates. Her experience in distributed simulation includes other HLA-related design and development efforts, environmental simulation, CGF development, scalability research, protocol development, and C4I simulation. BILL HELFINSTINE is a Staff Software Engineer at Lockheed Martin Information Systems Advanced Simulation Center (LMIS-ASC). Among his many duties, Bill is currently the lead developer of the RTI-s implementation.WAYNE CIVINSKAS is a Senior Manager of Lockheed Martin Information Systems Advanced Simulation Center (LMIS-ASC). His responsibilities include advanced concept development of simulation system architectures, technologies and techniques that support distributed simulation. Wayne's current focus is on transition of distributed simulation technologies from the prototype stage to full-scale engineering development and production programs.