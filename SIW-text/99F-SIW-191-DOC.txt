Integrating STOW and the Navy’s Battle Force Tactical Training (BFTT) SystemDavid B. CavittM. Alan GibsonBoris DobrydnevDerek S. BryanJoseph J. BerkeleyBMH Associates, Inc.5425 Robin Hood Road, Suite 201Norfolk, Virginia 23513-2441. U.S.A.Keywords: STOW, BFTT, HLA Migration, ATC TrainingABSTRACT: This paper presents issues related to integrating the Defense Advanced Research Projects Agency’s (DARPA) STOW technology with the U.S. Navy’s Battle Force Tactical Trainer (BFTT) System. It presents these issues as a case study by discussing the development of the BFTT Air Management Node (AMN), a component of the BFTT system used initially to provide proficiency training for Air Traffic Control (ATC). This paper presents key design and integration issues for the BFTT AMN including: 1) the design and implementation of an HLA Interface providing interoperability between a STOW federation and the BFTT DIS environment, 2) the use of STOW technology embedded in a shipboard rack and chassis system, 3) simulation control and exercise management issues, 4) the Verification and Validation (V&V) of a new flight dynamics model suitable for close-control of aircraft during ATC training, 5) the use of, and dynamic control and scheduling of TacAir-Soar Intelligent Forces (IFOR), 6) terrain correlation and the dynamic relocation of a training “playbox”, and 7) ghosting of BFTT generated entities to meet fidelity requirements of the STOW federation. This paper provides a unique, first look at the use of STOW technology for fleet, operational training at the “deckplate” level. The lessons learned while developing the BFTT AMN should be of significant interest to persons involved in on-going efforts to improve the training effectiveness of the existing BFTT system and migrate BFTT towards HLA compliance. The integration issues discussed in this paper are equally relevant to other programs interested in the use of STOW technology for new and existing training environments. IntroductionThe U.S. Navy has developed the Battle Force Tactical Training (BFTT) system to provide shipboard training across the full spectrum of mission scenarios from unit level, small team training (Tier I), to theater level joint training exercises (Tier III). Peacetime constraints have limited the funds available for adequate mission training using live forces and to maintain an adequate level of military readiness, the U.S. Department of Defense (DoD) is exploring the increased use of simulation to support operational training. The principal technical objective of BFTT is to create a network of coordinated training using advanced distributed simulations to stimulate shipboard sensors. The BFTT system provides immediate feedback regarding trainee performance. The implementation of BFTT consists of a collection of hardware and software components used for training scenario generation, stimulation / simulation control, data collection, and performance monitoring. Shipboard and shore-based BFTT networks may be interconnected to provide a larger, WAN-based synthetic battlespace. An important BFTT training capability is Air Traffic Control (ATC). The existing implementation however, has some limitations when used for proficiency training. Specifically, the number of simulated aircraft that can effectively stimulate the on-board radar systems for ATC is limited. In the average case, for every trainee, it requires one human trainer to control one computer-generated aircraft. The Human Computer Interface (HCI) used by the BFTT trainer to provide close-control of the simulated aircraft is generally considered restrictive as is the existing simulation’s model fidelity (in the context of ATC training). To address these limitations, Naval Sea Systems Command’s (NAVSEA) Performance Monitoring, Training, and Assessment Program Office (PMS-430), initiated the BFTT Air Management Node (AMN) project.The AMN is designed as a training tool to help keep air controllers proficient with ATC terminology and control procedures. Principle goals in developing the AMN are to improve upon the ATC training capabilities of the BFTT Combat Simulation Test System (CSTS) including an improved HCI with enhanced simulation and modeling capabilities (i.e., fidelity). An additional objective is to initiate a migration path for BFTT using the Defense Modeling and Simulation Office’s (DMSO) High Level Architecture (HLA). To achieve these goals, PMS-430 proposed the use of DARPA’s Synthetic Theater of War, or STOW technology. Various technical challenges existed regarding the integration of STOW technology with the BFTT system but doing so can potentially provide a more robust and realistic synthetic environment capable of supporting U.S. Navy training requirements.STOW TechnologySTOW is an evolving Advanced Distributed Simulation (ADS) technology that has successfully demonstrated the capabilities of high resolution simulation to support military training, systems acquisition, analysis, and test and evaluation [1]. The origins of STOW technology are DARPA’s previous work in synthetic forces and the Army’s SIMNET program [2]. STOW creates a realistic, distributed simulation environment where synthetic forces are modeled at the platform level and the synthetic environment includes representations of real-world terrain, space, oceans, and environmental effects [3]. STOW has been successfully used to support U.S. Atlantic Command’s (USACOM) Joint Task Force (Tier III) training. STOW requirements included the ability to generate enough ground, air, and sea forces to simulate theater level operations. Additionally, it had to integrate real-world C4I systems to support component-level training requirements. The STOW component of this exercise consisted of 500 computers generating up to 8000 simulated objects, distributed across sites throughout the United States and United Kingdom. To achieve the large-scale, networked requirements of this exercise, the synthetic battlespace was created using the DoD High Level Architecture (HLA) and Run Time Infrastructure (RTI) [4]. The STOW program developed an advanced, high-performance networking infrastructure based on ATM and Multicast/IP technologies; the goal being to reduce bandwidth requirements and transmission latencies [5]. The U.S. Navy’s BFTT AMN program provides an excellent opportunity to support the transition of STOW technology to service-specific programs by demonstrating the feasibility of integrating state-of-the-art constructive simulations to U.S. Navy inter/intra-shipboard training systems.AMN System Architecture Figure 1 depicts the BFTT AMN system architecture. The Air Management Node is initially intended for ATC and limited AIC training. The synthetic training environment is controlled by one or more trainers who man a BFTT Operator Console(s) (BOPC). The trainer takes on the role of a pseudo-pilot when creating, deleting, and controlling simulated aircraft. As a pseudo-pilot, the trainer listens for real-world commands from air controller trainee via communications links (e.g., Improved BFTT Digital Voice, or IBDV) connecting the AIC and ATC consoles with the BOPCs. He then uses a robust HCI to generate the expected responses from the simulation environment. State information from the aircraft models executing in the AMN are passed to the BFTT DIS LAN via FDDI bridge where it is used to stimulate the shipboard sensor (e.g., radar) systems and create a realistic display on the trainee’s console. AIC training is supported by the inclusion of the Data Link Auxiliary (DLA) / Link4A processor to simulate real-world one and two-way Link 4A communications. The Link messages are received by the pseudo-pilot at the BOPC and used to make changes to the AMN simulated aircraft behaviors.The system architecture has four distinct LANs: 1) the HLA LAN used to simulate the STOW-generated aircraft, 2) the BFTT DIS LAN used to provide data to the shipboard system stimulators, 3) the BFTT Client / Server LAN used to transmit data critical for the configuration and control of the BFTT training environment, and 4) the IRIG LAN used to keep the different processing components of the BFTT system synchronized in real-world time via GPS. It is possible to link individual BFTT systems together in a WAN to create a larger training environment.The current Air Management Node consists of nine processor boards mounted in a custom built Compact PCI chassis. The chassis is ruggedized to meet military Class B shock and vibration requirements and was designed to meet the space and weight restrictions associated with different classes of Navy ships (i.e., LHD, DDG, CVN, etc.). Although the chassis was constructed to control normal shipboard conditions regarding humidity, emissions, corrosion, etc., heat dissipation posed a significant concern because of the large number of processor boards enclosed within the  chassis compartment. Additional cooling fans were installed to mitigate any risks associated with high temperatures that could affect the reliability of the hardware. Figure 2 and 3 show pictures of an AMN chassis to be installed on LHD 6 in July 1999. The cover for the extra cooling fans can be seen on the front door of the chassis. Figure 3 shows the two-slot cPCI processor boards and the cables used to connect the boards to the HLA LAN and to the external BFTT DIS and Client / Server LANs. The 100Base-TX Ethernet hub for the HLA LAN is built into the chassis. Each processor board has a 300 MHz Intel Processor, 384 Mbytes RAM, 8 Gigabytes of disk space, and dual ethernet interface cards. Additionally, one board is configured with an interface for time synchronization on the IRIG LAN.The major functional components of the AMN include an HLA Interface, an AMN Server process, an HCI, a TacAir-Soar SAF (Soar SAF) simulation used to simulate aircraft, and a PerfMETRICS daemon used to support dynamic entity creation and deletion. The BFTT AMN is an HLA Federation and is based on the Federation Object Model (FOM) discussed in the STOW references. However, to meet design requirements, the STOW FOM has been extended to include additional shared data among AMN federates. The data flow diagram depicted in Figure 4 is useful to characterize the interaction and data flow among AMN processes. The key implementation component to integrate STOW technology with the BFTT system is the HLA Interface. The interface translates between the HLA/RTI-based data packets associated with the STOW synthetic battlespace and the DIS-based data packets used by the BFTT system. Background information on the design, development, and prior use of the HLA Interface can be found in [6]. Two other federates, the HCI and the Soar SAF support basic AMN training capability. The HCI  provides a Graphical User Interface (GUI) used by the pseudo-pilot to effectively control the synthetic training environment and the Soar SAF provides the modeling and simulation capabilities required to manage the TacAir-Soar agents, sometimes referred to as Intelligent Forces (IFOR), intelligent agents, or just agents. The principal objective of using IFOR in the AMN is to reduce trainer (pseudo-pilot) workload. The agents provide intelligent, close-control of the simulated Fixed-Wing Aircraft (FWA) and Rotary-Wing Aircraft (RWA) in the AMN. The agents act as surrogate pilots for controlling the physical aircraft models. A detailed discussion of TacAir-Soar technology is presented in [7].The HCI GUI has also been designed and developed to provide an interface suitable for reducing the pseudo-pilot’s workload. AMN requirements include the capability to dynamically create, delete, and control the aircraft to elicit the desired kinematics for stimulating the onboard radar systems. This requirement resulted in significant modifications to the existing SAF baseline code and as shown in Figure 4, incorporates the use of the PerfMETRICS monitoring system to provide a communications link to dynamically manage the creation of agents and aircraft. PerfMETRICS is also used to collect run-time performance information useful for managing the simulation workload (i.e., dynamic load scheduling).The remainder of this paper provides a summary of the significant aspects of integrating BFTT and STOW technology to satisfy AMN requirements. Section 4 provides an overview of the operational training capabilities of the AMN and a summary is provided in Section 5. Further information related to the concept and operation of the BFTT AMN is found in [8].BFTT / STOW Interface IssuesHLA ( DIS InterfaceThe HLA Interface is a STOW product originally developed and successfully used to link DIS-based virtual cockpits with a STOW synthetic battlespace. The principle function of the HLA Interface in the AMN is to transmit Ownship and other BFTT-generated entities to the AMN’s HLA Federation, and to transmit the SAF-generated aircraft (IFOR) to the BFTT’s DIS LAN. The AMN project benefited greatly from the reuse of the existing interface and it has proved to be a very stable and flexible gateway between the BFTT and STOW systems. Initially, AMN development plans called for the use of the Defense Modeling and Simulation Organization’s (DMSO) RTI v1.3. However, an aggressive AMN delivery schedule resulted in the use of the STOW RTI (RTI-s). One significant benefit of this was the use of the STOW FOM as a baseline for data sharing between the two systems. To support modeling requirements and interoperability, changes were made to the FOM including the addition of TACAN and DIS ID Map objects, a BFTT Surface Ship System Status (SSSS) interaction, and a Shutdown interaction. Extensions were added to the existing Data interaction to support additional data flows. Details related to the new objects and interactions are discussed throughout the remainder of this paper and the data flow for the modifications is shown in Figure 4. Modifying the FOM was a straightforward process since the specification resides in a set of text data files in the SAF architecture. The AMN required other modifications to properly interface with the BFTT system. The existing BFTT system adheres to the DIS 1278.1-1995 standard. It was necessary to modify the AMN federates because the current implementations use the RTI-s which is based on the DIS 2.0.4 standard. DIS 1278.1-1995 compatibility was achieved in the AMN by replicating the existing DIS 2.0.4 PDU data declarations and source code. Modifications were made to accommodate the minor differences between the two standards and their implementations in BFTT and STOW. One example is changes made to the HLA Interface’s PDU bundling algorithm used to optimize traffic flow (i.e., bandwidth reduction) on the BFTT LANs / WANs The HCI – Exercise Management and Control The TacAir-Soar agents used to simulate aircraft in the AMN are controlled by the pseudo-pilot using the HCI. The HCI is an AMN federate whose code infrastructure is identical to the SAF with the addition of a GUI used to provide close-control of the aircraft. The pseudo-pilot modifies agent behavior either by typing new values in specific data entry fields of the GUI, or by using pull-down menus on the GUI to select a particular type of aircraft mission or maneuver.  Operator actions result in the HCI generating one or more ASCII text strings corresponding to a well-defined grammar for communicating with the agents. The text strings are received by special Soar communications agents (referred to as Soar Speak agents) and transformed into Command and Control  Simulation Interface Language (CCSIL) messages interpretable as agent commands. The CCSIL-formatted messages are used to control the flight regime of the simulated FWA and RWA. One significant aspect of this design is the standardized interface for communicating commands to the agents. This allows alternative agent control mechanisms such as the Soar Speak interface which provides voice actuated control over TacAir-Soar agents.Status information for each aircraft is displayed on the HCI GUI and is obtained from Entity State object, IFF interaction, and the HCI Vehicle Data (HCIVData) interaction, a new data message added to the AMN to provide aircraft state information not available in the original STOW FOM. The HCIVData information contains data such as available munitions, fuel status, and the agent’s goal status (e.g., “Commencing”, “On the Ball”, “Landed”). The HCI also functions as a control interface for managing the synthetic environment point and frequency data, as well as receiving data for Link-4A / AIC training. Raw Link-4A data is converted and passed to the AMN Server process. The AMN Server functions as a control agent, forwarding information to the HCI by way of the BFTT Client/Server LAN. Additionally, the AMN Server/HCI interface provides information regarding the status of the AMN’s multiple X Displays and handles operator requests requiring among other things correlation of simulated entities IDs on the Client/Server, DIS, and HLA LANs. Terrain, Playbox, and Entity CorrelationOne of the more difficult integration issues resolved was related to dynamic relocation of the training playbox. BFTT does not currently use terrain, although this will soon be changing with the integration of the Generic Navy Stimulator/Simulator (GNSS) system. BFTT uses a Geocentric Coordinate System (GCCS) and allows run-time relocation of the exercise center. Contrasted to BFTT, STOW uses a Global Coordinate System (GCS) based on a tiled earth representation and includes a high-resolution terrain model that is bound to a playbox during system initialization. For the current AMN implementation, the binding between the terrain model and the playbox prevents the dynamic relocation of the exercise center. Compounding the problem is the need to reinitialize the federation (i.e., the RTI) to update routing spaces and playbox extents. Additionally, the limited number of STOW terrain maps restricted the training environment. To satisfy training requirements and meet an aggressive development schedule, implementation tradeoffs were made regarding a terrain implementation and the system initialization mechanisms.The AMN uses a low-resolution ocean cell terrain database. A single ocean cell was created and then replicated to form an AMN playbox that is 600x600 nautical miles; a size determined through a Knowledge Acquisition (KA) process to be sufficient for ATC and limited AIC training. The federates are only capable of processing simulation traffic that occurs within the geographic boundaries of the playbox, so a mechanism was implemented to ensure the center of the AMN playbox is correlated with the Exercise Center generated by the BFTT system (transmitted to the AMN via the HLA Interface). BFTT-generated entities outside the AMN playbox are not passed through the HLA Interface. When an Exercise Center is received that exceeds a specified threshold, the AMN will reinitialize by restarting each federate with the new playbox extents. Another important correlation mechanism maintains DIS entity identification numbers and entity callsigns between the DIS side of the system and the HLA Federation residing in the AMN. The HLA Federation only maintains RTI object identification numbers for entities and has no notion of DIS entity identification numbers. A mechanism was needed to support operator requests made at the BOPC and Link 4A requests using the AMN Server process (requests emanating from the BFTT DIS-based LANs). The HLA Interface already maintains an HLA / DIS ID mapping since it must correlate entity state data across the interface. This DIS ID mapping is replicated on each of the HCIs and SAFs. The mapping is used primarily by the HCI since it provides communications with the BOPCs and the Link4A simulators. The DIS ID mapping also contains vehicle callsigns for each aircraft and ship. This mapping allows entity state information to be accessed via DIS ID or vehicle callsign. The BFTT-generated entities do not have callsigns, so the gateway makes callsign assignments for these vehicles.STOW / SAF ExtensionsFlight Dynamics ModelingOne of the principal SAF development tasks was to assess the capabilities (i.e., correctness and fidelity) of the existing flight dynamics models to support ATC training. To adequately stimulate the on-board radar systems, the computer-generated aircraft are required to accurately portray flight path with ±1o heading, ±1o glide path, ±10 knots airspeed, and 100 fpm rate of climb/descent. To achieve this, modifications were required to the SAF FWA and RWA flight dynamics model, and to the FWA functional interface used by the TacAir-Soar agents. Only minor modifications were needed to the RWA flight dynamics. The FWA model however, was a relatively new implementation and had not been subjected to significant testing. For the AMN project, the FWA model implementation was verified against model requirements. A simulation driver was designed and developed to test the model, isolating the simulation of the flight dynamics itself from the influence of Soar agent behaviors and other external factors. Initial testing of the FWA flight dynamics model revealed a number of problems including unstable flight, oscillations of speed and altitude, and a memoryless property that led to anomalous behavior for some streams of Soar agent commands. Additionally, errors were found in the data driven components of the model and supporting utility functions (i.e., air density calculations). The driver program was used to capture the data shown in Figure 5. This figure shows model responses to a command to change altitude. The lower time-series shows extreme oscillations in the simulated aircraft’s flight profile along with a failure to achieve the target altitude (21K ft.). Modifications were made to the model and the results are shown in the upper time-series plot in Figure 5. The simulated aircraft achieves its target altitude and maintains a level and stable flight profile. The driver program was also used to verify the correct use of the FWA functional interface in the agent behavior code. Figure 6 shows data comparing the optimal glide path, the glide path of a simulated aircraft in the driver program, and the glide path of an FWA controlled by a TacAir-Soar agent in the SAF implementation. The optimal glide path and the glide path output from the driver program show similar rates of decent, and indicates that given the appropriate command sequence  (interface calls), it is possible for the flight dynamics model to simulate a realistic approach. The figure also reveals some inaccuracy in the rate of descent induced by the Soar behaviors for this particular event (shown as a steeper rate of descent). This kind of performance information is useful to support TacAir-Soar behavior development. Using the driver program in conjunction with Subject Matter Experts (SMEs) and other reliable sources of information such as Naval Air Training and Operating Procedures Standardization (NATOPS) publications, has proven to be a useful methodology to support validation of the flight dynamics model for use in the AMN. This methodology could be useful for similar model validation efforts. TACAN ModelingSystem fidelity in the AMN has been enhanced by the simulation of a Tactical Air Navigation (TACAN) system.  The TACAN model is comprised of station/transponder/receiver components that provide properly configured TacAir-Soar aircraft with accurate distance and bearing information to a ship-board TACAN station.  While the BFTT system models TACAN-capable ships, it does not simulate TACAN directly. Thus, to meet AMN requirements, a unique implementation resulted in a TACAN model within the STOW-based AMN Federation. The approach taken was to ghost the simulated ships generated by BFTT inside the HLA Interface. The interface creates a TACAN model for every TACAN capable ship for which it is receiving entity state information and transmits a TACAN PDU correlated with the modeled  TACAN station’s (the ship) state information.   This TACAN capability provides the Soar agents sufficient information to calculate and maintain range and bearing data, and meets the basic information requirements for the Link-4A / AIC training environment. The current implementation does not support air-borne TACAN stations but can be easily extended to include this functionality if required in the future.Dynamic Agent Scheduling and ControlThe original SAF implementation required another significant enhancement for the AMN; the capability to support dynamic creation, deletion, and control of Tac-Air Soar agents. The function of dynamic agent control was discussed in Section 1. Before you can control the agent, however, you have to create it. The mechanism for doing this is implemented using three components: the Agent Scheduler, the Agent Parser, and the PerfMETRICS monitoring system. Operator control to initiate agent creation (or deletion) is via the HCI. Creation requests and acknowledgements are processed by the Agent Scheduler (a function within the HCI process). The scheduler decides which Soar SAF should simulate the aircraft by examining the current workloads of each simulation. The workload information (i.e., run-time performance data) is retrieved from the PerfMETRICS interface. Using the existing communication infrastructure provided by PerfMETRICS to manage the agents and obtain performance data, simplified the AMN design and reduced the amount of new code development required to implement dynamic agent creation and deletion. The requests are received by the Agent Parser in the Soar SAFs. The data associated with the request message is interpreted by the parser, which then invokes the appropriate action by either requesting the creation or deletion of a Tac-Air Soar agent. It sends out an acknowledgement that is received by all HCIs. There is global visibility of the agent workload among all three HCIs so that it is possible for the pseudo-pilot to maintain agent control in any operator training mode. The dynamic creation and deletion of fixed and relative points is also controlled using these scheduler and parser interfaces. Details on the parser and scheduler can be found in [9] and PerfMETRICS background in [10,11].Operational and Training CapabilitiesThe BFTT AMN has been designed to provide ATC and limited AIC training for CV and LHA/LHD ship types. Aircraft modeling includes all Navy and USMC FWA and RWA relevant for this training environment. Aircraft are capable of simulating controlled departures and approaches and provide in-flight behaviors that include auto-commencing approaches and all voice and standard reports. The AMN provides for speed / heading / altitude changes based on published approach procedures or as directed by Carrier Air Traffic Control Center (CATCC) or Helicopter Direction Center (HDC) controllers. It additionally provides for some emergency behavior training that includes failure to commence approach on time and/or out of position, inoperable IFF, divert, TACAN failure, and delta (change in approach commencement time). Additionally, the AMN supports Link4A / AIC training by providing the ability to send and receive Link-4A messages via the AMN Server which establishes communications directly with the shipboard combat systems. Functional Description Documents (FDDs) generated from the AMN’s Knowledge Acquisition process provide a basis for the training capabilities provided in the AMN. The three AMN FDDs are in a combined reference in [12].SummaryThis paper has presented a case study for the integration of DARPA’s STOW technology and the U.S. Navy’s BFTT system. We have discussed the design and development of the Air Management Node, a training system intended for Category I, proficiency training for Air Controllers. We have presented a few of the more significant issues surrounding the integration of the two technologies. Others examples include software Configuration Management (CM), system status and diagnostics, and STOW / SAF extensions to deal with relative navigation points (e.g., marshal points are relative to a moving ship).At this time, the first AMN is preparing for shipboard installation. Preliminary feedback regarding AMN capabilities is favorable and the Navy appears to be anxious for the training capabilities provided by the AMN. On-going development is focused on enhancing the reliability of the system in an operational environment, enhancing the HCI to further reduce trainer workload, and extending TacAir-Soar behaviors to fully meet training requirements. The information presented here should be useful to other programs considering the use of STOW technology to augment new or existing synthetic training environment.AcknowledgementsThis work was sponsored by the Naval Surface Warfare Center, Port Hueneme Division (NSWC-PHD) at Dam Neck, Virginia, under contract N633-94-97-D-2213. The authors would like to acknowledge the collaborative engineering and design contributions of NSWC-PHD, Lockheed Martin and Soar Technologies, Inc. Additionally, the authors would like to recognize the KA and domain expertise provided by Gary Kollmorgen (BMH), Craig Petersen (BMH), and James Brueggemann (Logicon) during AMN development.ReferencesCeranowicz, A. 1998. STOW 97-99. Presented at the ALL-STOW Conference. June 8-12, 1998. Virginia Beach, Virginia.Miller, D.C. 1991. The SIMNET Architecture For Distributed Interactive Simulation. In Proc. of the Summer Computer Simulation Conference. Baltimore, Maryland. July 1991.Lukes, G., G. Goodman. 1998. Synthetic Environments and Lessons Learned from the STOW 97 ACTD. In Proc. 1998 Spring Simulation Interoperability Workshop. 98S-SIW-097.Dahmann, J.S., R.M. Fujimoto, and R. M. Weatherly. 1997. In Proc. 1997 Winter Simulation Conference, December 1997, 142-149. Association for Computing Machinery, New York, NY.Cole, R., B. Root, L. O’Ferral, J. Tarr. (1998). STOW Network Technologies and Operational Lessons Learned. In Proc. 1998 Spring Simulation Interoperability Workshop. 98S-SIW-103.Cavitt, D.B., M.A.Gibson, E.P. Harvey. 1998. HLA/STOW Interface Development To Support Distributed Mission Training (DMT). In Proc. 1998 Fall Simulation Interoperability Workshop. 98S-SIW-204. Tambe, M., L. Johnson, R. Jones, F. Koss, J. Laird, P. Rosenbloom, K. Schwamb. 1995. Intelligent Agents for Interactive Simulation Environments. AI Magazine, 16, 15-39 (Spring 1995). Marshall, K. 1998. Battle Force Tactical Training (BFTT) Air Control Training Capability Concept Paper for the Integration of the Air Management Node Into BFTT. Draft v1.0, Nov. 1998 for Naval Surface Warfare Center-PHD, Dam Neck Detachment. Kenny, P. 1998. Design Document for Dynamic Agent Creation, Draft v1.0, Soar Technology, Inc.Cavitt, D.B., C.M. Overstreet, and K.J. Maly. 1997. A Performance Monitoring Application for Distributed Interactive Simulation (DIS). In Proc. 1997 Winter Simulation Conference, December 1997, 421-428. Association for Computing Machinery, New York, NY.Cavitt, D.B., J. Bell, M. Checchio, C.M. Overstreet, and K.J. Maly. 1998. Performance Monitoring for the Design, Configuration, and Control of DIS/HLA Exercises. In Proc. 1998 Spring Simulation Interoperability Workshop. 98S-SIW-066. Battle Force Tactical Training (BFTT) System, Air Management Node (AMN), Functional Description Documents for Approach, Departure, and Communications, Version 1.0, Prepared by BMH Associates, Inc. for Naval Sea Systems Command (NAVSEA) PMS-430, 13 Nov 1998.Authors’ BiographiesDavid B. Cavitt is a research engineer with BMH Associates, Inc., Norfolk, Virginia, and is a Ph.D. candidate at Old Dominion University, Norfolk, Virginia. He received a BS degree in Computer Science at Old Dominion University. He has 12 years of experience in the use and development of simulations for military and engineering applications. His research interests include modeling and simulation, performance analysis, and distributed systems. Mr. Cavitt is a member of ACM and IEEE CS.M. Alan Gibson is a software engineer with BMH Associates, Inc. Norfolk, Virginia. Mr. Gibson received his B.S. degree in Computer Science from Virginia Polytechnic Institute and State University in 1986. He is involved in software development for several military Advanced Distributed Simulation projects. His current task is to integrate virtual simulators into Synthetic Theater of War (STOW) battlespace utilizing HLA/RTI technology.BORIS DOBRYDNEV is a software engineer with BMH Associates, Inc. Norfolk, Virginia. Dr. Dobrydnev received his M.S. degree in physics from Moscow Institute of Physics and Technology in 1986, and his Ph.D. degrees in physics from Russian Academy of Sciences in 1992 and Old Dominion University in 1994.  He is involved in software development for several military Advanced Distributed Simulation projects. His current task is validation and verification of different JSAF modules. Derek S. Bryan received a B.S. degree in computer science from James Madison University in May 1998.  He has been involved with the BFTT AMN project as a software engineer for BMH Associates, Inc. since November 1998.JOSEPH J. BERKELEY is a Software Engineer with BMH Associates, Inc. in Norfolk, Virginia. Mr. Berkeley received his B.S. degree in Computer Science from Old Dominion University in 1996. He is currently involved in software development for the BFTT AMN project. 			Figure 5. -  Flight stability during target altitude changes before and after modificationsFigure 6. – Comparison of glide path approach; Optimal, Driver Program, TacAir-Soar agent. EMBED PowerPoint.Slide.8   EMBED Excel.Sheet.8   EMBED Excel.Sheet.8  Figure 4. BFTT AMN Data Flow Diagram  EMBED PowerPoint.Slide.8  Figure 3. – AMN hardware configurationFigure 2. – AMN ruggedized chassis (front view)Figure 1. BFTT AMN System Architecture