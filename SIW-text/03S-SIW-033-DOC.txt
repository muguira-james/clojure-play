Standards-Based Distributed Simulation Assisted LearningKatherine L. Morse, Ph.D.David L. DrakeRyan P.Z. BruntonScience Applications International Corporation10260 Campus Point DriveSan Diego, CA  92121858-826-6728HYPERLINK "mailto:kmorse@epsilonsystems.com"morsek@saic.com, HYPERLINK "mailto:drakedavid@saic.com"drakedavid@saic.com, HYPERLINK "mailto:bruntonr@saic.com"bruntonr@saic.comJack “Jake” BorahAEgis Technologies Group12565 Research Parkway, Suite 390Orlando, FL 32826407-380-5001 HYPERLINK "mailto:jborah@aegistg.com" jborah@aegistg.comVictor P. DiRienzo, Jr.IIT Research Institute, AB Tech Group, Suite 4001901 N. Beauregard StreetAlexandria, VA 22311-1705703-933-3334 HYPERLINK "mailto:vdirienzo@msiac.dmso.mil" vdirienzo@msiac.dmso.milKeywords: HLA, ADL, SCORM ABSTRACT: The DoD education and training community recognizes that the use of simulations can significantly enhance the student’s educational experience. There are many examples of curricula employing stand-alone simulations.  However, there does not exist a standard method of linking teaching and assessment strategies to simulation data.   More importantly, there is a lack of standard construction techniques that tie specific skills and competencies to assessed simulation-based learning experiences. The DoD’s High Level Architecture (HLA) allows the modeling and simulation community to connect models and simulations, and live entities (C4I devices and range interfaces), using a standard architecture.  The DoD’s Advanced Distributed Leaning (ADL) Shareable Content Object Reference Model (SCORM) defines a web-based learning content aggregation model and runtime environment for learning objects.  At its simplest, it is a model that references a set of interrelated technical specifications and guidelines designed to meet DoD’s high level requirements for web-based learning content.This paper describes a server-based architecture to connect learning content with simulation using the Simple Object Application Protocol (SOAP), a common XML-based protocol for web-based interoperability.  This architecture allows flexible distribution of the content and simulation components on multiple machines.  The goal is to work toward a reference implementation that will provide the foundation for developing community standard HLA-ADL interface processes.  This effort is a continuation of the authors’ previous work on HLA-ADL integration presented at preceding SIWs.BackgroundDuring the fall of 2000, Philomena Zimmerman, now the Associate Director of Composable Mission Space Environments for Defense Modeling & Simulation Office (DMSO), tasked members of the High Level Architecture (HLA) technical support team to build a training system to deliver HLA course content to the M&S community.  At that time, the DoD’s Advanced Distributed Learning Program was delivering the first version of the Sharable Content Object Reference Model (SCORM) [1, 2]. The prototype of the “Next Generation High Level Architecture Training System” [3] was demonstrated successfully to the Undersecretary of Defense for Personnel and Readiness during the Executive Forum for M&S in June 2001.   The system provided access to the following HLA course modules;Introduction to the HLAThe HLA RulesThe HLA Object Model TemplateThe HLA Interface SpecificationDuring the detailed design phase of the training system, the HLA development team was asked to consider the feasibility of integrating the HLA architecture with the SCORM architecture.  A study was performed to investigate the feasibility of connecting these two distinct runtime environments.  Most importantly, the study wanted to ensure that the architecture would provide a distinct operational benefit.  Several potential architectures with varying degrees of implementation complexity and differing deployment scenarios were sketched.  The study recommended that one or more prototype interfaces between HLA and a SCORM compliant architecture be built and tested.The results of the feasibility study were submitted as a white paper to the DMSO and subsequently reviewed by the Office of the Undersecretary of Defense and Mr. Philip Dodds, Chief Technical Architect of Advanced Distributed Learning.  Collaboration between DMSO’s Associate Director for Composable Mission Space Environments, the chief architect of ADL, and their respective developers began in November 2001.The study concluded that the task of building a prototype implementation has a high probability of success in a short amount of time.  At the time of the study, the SCORM standard did not support adaptive instruction, although the capability is planned for the future.  Adaptive instruction allows the Learning Management System (LMS) to select the next assignable unit based on the student’s progress to date.The developers of HLA and ADL held a technical interchange meeting in January 2002.  The team decided to attack some of the low risk technical challenges by building a “Proof-of-Principle“ interface design for connecting HLA to a SCORM compliant lesson.  To minimize cost, the development team decided to use previously developed HLA and ADL material, and readily available in-house DMSO teaching federations, the Hello World and the Restaurant Federations, for the early prototype.  The team also agreed that software written during the project’s early stages would be considered “throw away” code.  The main objective was to get the interface operational, not optimized for standard use.The First Prototype ArchitectureThe objective of the first prototype architecture was to demonstrate the basic functionality of the interface between HLA and a Shareable Content Object (SCO) [4].   A SCO is a separate piece of content capable of interacting with an LMS via the Javascript API.   An LMS may also launch assets, web-based material that does not communicate back to the LMS, e.g. HTML, Java Applets, video, etc.  The desired functionalities were:The ability of a student to launch a federation from a SCO.The ability to monitor the student’s performance of the desired task.The ability to communicate the results of the student’s performance during the simulation back to the LMS.In the event a student is unable to perform the desired simulation task, the LMS would be notified and automatically provide the student with the appropriate remedial training.  In order to achieve the desired objectives, a “Listener” federate, similar to a data logger, is launched from the LMS to track federation activity and calculate student results. Student results are based on correct operation of the federation.  The LMS provides a “Launch” protocol to start the SCOs and assets.  The LMS also provides the API and data model for SCOs to communicate with the LMS. In the first prototype, all of the components were resident on the student’s machine.  While this simplified communication between the Listener and the SCO, it introduced two challenging security issues.  Both issues are related to the fact that the Java applets are being executed from a browser while needing to link a Dynamic Link Library (DLL).Java provides a customizable “sandbox” in which Java programs execute.  The sandbox provides restricted security boundaries for Java programs.  Activities traditionally prohibited by the Java sandbox include:Reading or writing to the local disk.Making a network connection to any host, except the host from which the applet came.Creating a new process.Loading a new dynamic library and directly calling a native method.In order for the Collector applet to become a federate, it must import the RTI java bindings, which then loads the RTI Java DLL.  By default, this action is precluded by the Java security sandbox.  There are two solutions to this problem, either employing digital signed JARs or modification of the security policy.The Java Security API includes APIs for digital signatures, message digest (digital fingerprints), and key management.  JDK 1.1 also provides a tool named javakey. We chose the latter because it is easier in the near term.  However, for general deployment, the former option is a better solution because it closely controls the security policy and requires almost no configuration on the user’s part.The second issue encountered was caused by the restriction that applets being launched from the browser must both use the same Java Virtual Machine (JVM).  This single JVM loads a single copy of the RTI Java DLL.  Unfortunately for our original architecture, some of the code in this DLL is non-reentrant.  This means that two active applets could potentially call the non-reentrant code at the same time, resulting in a Concurrent Access exception from the RTI.  This is exactly what happened with the first federation design, which had both the Listener and the Collector Applets as federates.It was ascertained that launching separate browser processes would solve the problem, however a solution could not be found that would automatically launch a separate browser process, only one where it was done manually from the desktop.  The ultimate solution was to open up the security policy to allow applets to launch executables.  While this worked for the purposes of performing a demonstration, it’s an unacceptable security risk for an operational environment.The Listener federate was split into a Launcher applet and a Listener Java federate.  The duty of the Launcher applet is to just launch the Listener Java federate and then quit.  Since the Listener Java federate is a separate process, it receives a separate JVM and thereby avoids the non-reentrancy issue with the DLL.  It is important to note that this solution will work for launching any other kind of local executable.The Second Prototype ArchitectureThe first version of the architecture achieved our goal of proving that HLA-ADL integration was technically feasible.  However, as the previous section illustrates, the first prototype architecture wasn’t supportable in an operational environment.  The design of the second prototype architecture focuses on:Addressing the technical issues revealed by the first prototype,Extending the architecture to support a distributed environment, andPreparing for projected standardization efforts to be undertaken this year.Because use of standards is a key requirement of our efforts, our design uses servlets and Simple Object Access Protocol (SOAP) [5].SOAP is a lightweight, XML-based protocol for exchanging structured data and remote procedure calls.  SOAP provides a framework describing the content and processing directives for a message, a set of conventions for making remote procedure calls and encoding their responses, and an extensible encoding scheme that allows for the encoding of user-defined data types.  A typical SOAP message consists of an Envelope, which encapsulates a single SOAP packet, an optional Head, which contains processing and routing instructions, and a Body, which contains the actual message content.  The advantages of using SOAP as our protocol for remote procedure invocation are many.  First, it is a truly cross-platform and cross-language solution.  By using SOAP we have not tied any component to a particular operating system or programming language.  Second, it is a human readable data format, making development and debugging simpler.  Finally, it allows us to set and release a standard XML schema for the HLA mapping so that third parties can develop fully compatible libraries.By deploying the listener as a servlet, we allow an applet embedded in the SCO and running in the browser to get updates on the student's progress in the simulation using HTTP as the transfer protocol.  This approach allows:A broad range of deployment scenarios for architecture elementsImproved ability to deal with network architecture challenges, e.g. firewallsThe second prototype architecture is illustrated in  REF _Ref423504349 \h Figure 31.Figure  STYLEREF 1 \s 3 SEQ Figure \* ARABIC \s 1 1.  SOAP-Based HLA-ADL Integration ArchitectureAs with the first prototype, we chose to use the ADL Sample Run Time Environment (RTE) for our LMS.  The RTE implements the minimum functionality required by the ADL specifications, but has none of the extra features available in a commercial LMS.  We chose to use the Tomcat server because it was already used by the Sample RTE.  We demonstrated this architecture with a very slightly modified version of the Hello World lesson from the first prototype  [4] at I/ITSEC in December 2002.  The entire federation including the RTI exec, Hello World federate, Collector federate, and Listener federate all ran on one machine with one copy of the Tomcat server; the Sample RTE, student content, and client side servlet all ran on another machine with another copy of the Tomcat server.Although we could have launched the RTI exec from the server-side web services platform, we left this task manual because it’s part of the student’s lesson.  The student’s view of the content was almost unchanged from the first lesson except that we merged the two steps of collecting the results and directing the student to the appropriate next SCO into a single step.The major changes were how the Listener was launched and how results were communicated back to the client-side SCO for transfer to the LMS.  These processes now use HTTP and SOAP.  The Launcher is an applet on the student’s machine that makes a remote HTTP POST call with a SOAP payload to the federation server.  This SOAP message launches the Listener on the federation server.  The Listener performs most of the same functions it did before:  creating the federation, joining it, and listening for attribute updates from the Hello World federate.The Collector has an applet component on the student’s machine that makes a remote HTTP GET call to the federation server.  However, the Collector federate code that interfaces with the RTI now resides in a remote servlet, the results of which are returned to the Collector applet component as part of a SOAP payload.  Because the Listener is launched via a remote servlet, we no longer needed to worry about the non-reentrant code issues that limited our previous implementation.  The Collector’s applet component returns results to the LMS as it always has, via the JavaScript API Wrapper.   REF _Ref440186414 \h Figure 32 shows examples of the SOAP messages used in this communication.<?xml version="1.0" encoding="UTF-8"?><soap-env:Envelope xmlns:soap-env="http://schemas.xmlsoap.org/soap/envelope/">	<soap-env:Header/>	<soap-env:Body>		<StudentResultsValue="2"/>	</soap-env:Body></soap-env:Envelope>Figure  STYLEREF 1 \s 3 SEQ Figure \* ARABIC \s 1 2.  SOAP MessagesFor the Hello World lesson we were only returning a single value for the student’s result, in this example the value 2.  However, the student results returned can be arbitrarily complex, including defining additional elements in StudentResultsValue, enabling detailed feedback and remediation.This design meets all our stated requirements.  Recasting the federates as remote servlets rather than local applets eliminated the problems with the Java sandbox and the non-reentrant RTI libraries.  Clearly the design works in a distributed environment as we demonstrated at I/ITSEC.  While we ran the entire federation on a single machine for the demo, we could have run a very large federation on multiple machines. We anticipate doing so for one of the projects described in the Future Work section.  And the use of SOAP and servlets is consistent with the requirement for a standards-based solution.Future WorkThe overall objective of the project is to standardize the interface design.  Future experiments will show the design is relevant in an operational environment.  The opportunity exists to test the interface in a more realistic training environment using NAVAIR’s AWTD cockpit trainer.  This work was originally planned for the end of FY 02, but was delayed to accommodate a high priority effort.  The airframe modeled will be the F-18.  In this case, the instruction provided to the student will be  “How to operate a RADAR.”  The components that make up NAVAIR Air Warfare Training Development (AWTD) cockpit trainer are HLA compliant.    In FY 03, the DMSO and the Army Modeling and Simulation Office (AMSO) are teaming to build an HLA-ADL interface to course content and simulations used in the Army’s FA-57 course.  The design will be used as a reference implementation for broad use across the services. The design specification will be formatted and submitted to the IEEE Learning Technology Standards Committee sub-committee for consideration as a standard or best practices guide.References[1]	 HYPERLINK "http://www.adlnet.org" http://www.adlnet.org[2]	“Sharable Content Object Reference Model (SCORM) Version 1.2,” Advanced Distributed Learning Initiative, October 1, 2001.[3]	Jake “Jack” Borah, Katherine L. Morse, PhD, Victor P. DiRienzo Jr., “The Next Generation High Level Architecture Training System,” 01S-SIW-063, Proceedings of the 2001 Spring Simulation Interoperability Workshop, Orlando FL, September 2001.[4]	Katherine L. Morse, PhD, Jake “Jack” Borah, Victor P. DiRienzo Jr., “Simulation Assisted Learning Using HLA and SCORM,” 02F-SIW-010, Proceedings of the 2002 Fall Simulation Interoperability Workshop, Orlando FL, September 2002.[5]	IETF, Simple Object Access Protocol (SOAP),  HYPERLINK "http://www.ietf.org/rfc/rfc2396.txt" http://www.ietf.org/rfc/rfc2396.txtAuthor BiographiesDr. Katherine L. Morse is a Chief Scientist with SAIC.  She received her B.S. in mathematics (1982), B.A. in Russian (1983), M.S. in computer science (1986) from the University of Arizona, and M.S. (1995) and Ph.D. (2000) in Information & Computer Science from the University of California, Irvine.  Dr. Morse has worked in the computer industry for over 20 years, specializing in the areas of simulation, computer security, compilers, operating systems, neural networks, speech recognition, image processing, and engineering process development.  Her Ph.D. dissertation is on dynamic multicast grouping for Data Distribution Management, a field in which she is widely recognized as a foremost expert.Jack Borah is a Senior Systems Engineer with AEgis Technologies Group.  He is leading the learning content development team for this project due to his extensive training background, and is a retired military officer with over 25 years experience in military training and training systems.Ryan P.Z. Brunton is a Software Engineer with SAIC.  He received his B.S. in computer science (2001) from the University of California, San Diego.  Prior to completing his B.S. he worked at the MOVES Institute at the Naval Postgraduate School. Mr. Brunton’s key areas of expertise are modeling & simulation, object-oriented design and development, and the extreme programming methodology.Victor DiRienzo is a Senior Systems Engineer with the IITRI/AB Tech Group.  He has been on the HLA technical support team for the past two years.  He has over 13 years of experience in the delivery of integrated systems for the Department of Defense. David L. Drake is a Program Manager with SAIC. Mr. Drake has 23 years as a computer security professional in computer security design, implementation and evaluation at companies including SAIC, Computer Sciences Corporation, and the MITRE Corporation. At SAIC, he was a senior computer scientist and a manager for the Commercial Security Products Research and Development Division. While at the MITRE Corporation, he was lead developer for the Practical Verification System, a formal specification and automated verification.  Mr. Drake received a Bachelors degree in mathematics from State University of New York at Buffalo and did graduate studies there in artificial intelligence. Mr. Drake received additional computer science training at Stanford Research Institute in California, Northeastern University, and Wang Institute in Massachusetts. He has published articles and given speeches on security and risk assessment topics and has a patent pending on the process for enterprise-wide intrusion detection.