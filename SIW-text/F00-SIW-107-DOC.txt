GatewaysA Necessary Evil?David S. DodgeThe MITRE Corporation202 Burlington RoadBedford, MA  01730781-271-5840dodge@mitre.orgKeywords:Gateway, Translation, Forwarding, Communications, InteroperabilityABSTRACT:   This paper will describe how gateways help provide interoperability for the Department of Defense (DoD).  At the same time these gateway interoperability solutions create problems including: maintenance difficulties, certification issues, communications bottlenecks, single points of failure, negative impacts on communication network planning, network monitoring issues, and others.  However, there are some significant opportunities created by introducing gateways.  The modeling, simulation, and training communities will be able to use these gateways as a direct conduit to the real C4I systems.  Are gateways the correct approach for interoperability?  This paper discusses the pros and cons of gateways.  Since legacy DoD systems will not be removed from the field at once, a translation requirement exists. This translation requirement will remain, regardless of the future implementation of a global seamless communications infrastructure, until all systems use the future common infrastructure and a common information representation format.  Since the term gateway is overloaded, the paper recommends a definition for a communications gateway. We address the benefits and drawbacks of commonly used gateway approaches and provide a short history of translators and gateways.  The underlying goal for interoperability between heterogeneous communication systems is to decrease the translation problem space from an N-squared problem to an N problem. In addition, the issue of translation and forwarding rules is often overlooked when implementing a gateway plan.  Creation and certification of the translation and forwarding rules present the greatest challenges.      Finally we will address recommendations for future gateways that will utilize a fully layered architecture.  The intent of the layered architecture is to provide easier modification, certification, and reuse of the layered modules.  Comparisons will be made to the Transmission Control Protocol/Internet Protocol layered model.  This layered gateway approach will also be compared to the associated layered communications architecture being developed at the MITRE Corporation.IntroductionAre gateways necessary?  Are gateways evil?  Are there benefits when using gateways?  What do we mean by the term “gateway”?  This paper addresses these questions and several other related topics in the context of the significant gateway problem space.  Why do we care about gateways?  We are in the middle of an information explosion that is radically changing the way the commercial and military sectors do business.  To take full advantage of this information explosion, communications systems must be able to pass nearly all information to all destinations.  Current communications systems do not allow this near seamless connectivity. Therefore we must address potential solutions to these shortfalls.  One of the promising near term solutions is the gateway.  There are no shocking revelations provided in this analysis, however we do recommend a new layered architectural approach for future gateways. It is based on the layered communications architecture and development work underway at the MITRE Corporation.  Along the way, we hope to educate people about gateways in general.Gateway DefinitionCommunications, Computers, Simulation, Training, and other communities use the word “gateway” and it has many meanings. During our work we found that significant confusion is created in every discussion about gateways.  An example of a typical communications gateway is shown in Figure 2.1.  We provide the following communication focused definition for the term “gateway”:Gateway: (n) A network participant (part of the network) that provides automated interfaces to another network or system using different message formats and/or communications protocols.  A gateway may contain protocol translators (for message standards), and signal or medium translators, as necessary, to provide system interoperability.  Gateways require mutually acceptable administrative procedures to handle gateway functions between networks, such as information management rules, command and control rules, and reporting responsibility rules.  Data correlation may be incorporated as required by the gateway application. EMBED Word.Picture.8  Figure 2.1 Typical Communications GatewayThere is a more detailed definition for the term gateway from Federal Standard – 1037C, Telecommunications: Glossary of Telecommunications Terms, dated 7 August 1996  [1]:Gateway: 1. In a communications network, a network node equipped for interfacing with another network that uses different protocols.  (in support of Mil-Std-188 series)  Note 1: A gateway may contain devices such as protocol translators, impedance matching devices, rate converters, fault isolators, or signal translators as necessary to provide system interoperability.  It also requires that mutually acceptable administrative procedures be established between the two networks.  Note 2: A protocol translation/mapping gateway interconnects networks with different network protocol technologies by performing the required protocol conversions.   2. Loosely, a computer configured to perform the tasks of a gateway.The federal standard definition provides more technical detail, however, both definitions create another opening for misinterpretation by using the word “interoperability”.  The following definition(s) address the term interoperability:Joint Chiefs of Staff Publication 1-02 [2] has two definitions for interoperability:1.  The ability of systems, units or forces to provide services to and accept services from other systems, units, or forces and to use the services so exchanged to enable them to operate effectively together.2. The condition achieved among communications-electronics systems or items of communications-electronics equipment when information or services can be exchanged directly and satisfactorily between them and/or their users.For this gateway discussion we prefer interoperability to mean: the transfer of information that preserves the meaning and relationships of the information exchanged.  Gateways in the DoD context require aspects from both definitions 1 and 2.Functions of GatewaysThe definitions above create a solid foundation for the term gateway. Gateways interconnect at least two different systems and operate on the data and/or the communications format. They provide information transfer that preserves the meaning and relationships of the information exchanged at every destination. Simply stated, gateways provide interoperability among disparate systems.  By using a gateway, systems using different communications capabilities can communicate without requiring modifications to the existing systems.  This communications solution has led to the creation of simple gateways that can be created quickly and relatively inexpensively.  Unfortunately these simple gateways often implement point-to-point solutions and therefore are not easily maintained or reused.  However, they provide a temporary solution that may allow the required interoperability.  Many legacy systems and programs are implementing gateways or gateway functions that allow them to interoperate today.Gateways of various forms will continue to be used as part of the interoperability solution.  We believe some systems will never be connected via the common communications systems.  We also believe new systems will be developed that do not conform to the present communications standards.  If these systems must interoperate, it is likely that they will be connected via gateways.Some significant opportunities are created when gateways are introduced.  If the gateways are designed correctly, they provide a natural portal for simulation and training systems now and in the future.  Gateway development also provides a great opportunity to develop and document translation and forwarding rules.Options for Gateway FunctionsWhat are the functions that these gateways may perform?  That question cannot really be answered unless it is in the context of the specific gateway mission.  We will address many of the options for these gateway functions later in the paper, but right now we want to stress that a gateway may perform one or many functions in the potential set of all possible gateway functions.  Where are these gateway functions performed?  The gateway functions may be performed in one location or many locations.  Some gateways require all operations to occur at a single location. For example, an Army Brigade Tactical Operations Center gateway might translate between Link 16 messages and Variable Message Format for the Tactical Internet. Figure 2.2 depicts this example.  Figure 2.2 Centralized Gateway ExampleOther gateways might allow distribution of the functions throughout the communications network.  Figure 2.3 shows an example of a distributed gateway. In this case a group of “gateway” functions are used to send a telephone voice circuit through a cryptographic STU-III, into a military satellite, down to a Navy ship at sea, into another STU-III and out to the end user intercom system.  The translation and conversion functions in this example are distributed throughout the network.    Gateway functions also may be split into distinct layers as we will describe in section 6.Figure 2.3 Distributed Gateway ExampleHistory of Translators and GatewaysIt is useful to take a brief look at the history of communications and compare it to the evolution of gateways.  When humans started using vocal communications, different languages and dialects were developed based on geographic separation.  As humans traveled, the groups speaking different languages met and there was a need for a human translator.  These translators had to learn the details of the other spoken language (semantics and syntax) [3,4] and create translations between the two communications systems.  The human translators were the first gateways!   A similar set of events occurred as pictorial or written languages evolved.  Documentation of translations between written languages provided the first translation rules.  As long as people have been devising methods to communicate, there have been series of ebbs and flows where people can communicate (interoperate) and then new systems evolve and interoperation is lost.  Eventually the need to communicate brings the new and old systems together. Finally, some antiquated systems are eliminated.  An example of this cycle is communications via the Internet.  Thirty years ago the Internet provided a new medium for communications.  Various systems of communications developed on the Internet and each served a particular community (e.g., Transmission Control Protocol/Internet Protocol, Digital Equipment Corporation Network Architecture, and IBM’s Systems Network Architecture).  As the communications systems evolved, many did not interoperate.  To bridge these communications gaps, software and hardware translators were developed to allow the disparate systems to talk.  However, as the Internet became the common communications medium, a smaller number of communications formats have become the standards and translators have been minimized.  It is interesting to note that widespread interoperability on the Internet arrived after approximately twenty years when HyperText Markup Language (HTML) was created.  We believe history shows that there will always be cycles where new systems are developed that do not interoperate.  Therefore, gateways or translators will evolve to allow interoperation.  Then a smaller subset of standard communications formats will be adopted and eventually the cycle will repeat.Approaches for Data InteroperabilityThere are three major techniques used to provide data interoperability.  They are:Point-to-Point TranslationsCommon Database or Common Message Format RepresentationsData Mediation or GatewaysFigure 3.1 depicts an example where data must be passed between two unique systems. A designer must decide which of the three methods is best to “connect” the systems. The options are described in the next three subsections. [5] EMBED Word.Picture.8  Figure 3.1.  Data Interoperability Solution SpacePoint-to-Point TranslationsPoint-to-point translations perform a brute force bi-directional translation from each data element in one system to the appropriate data element(s) in the other system.  This is often called a stove-piped gateway. In the short term, they are simple and relatively cheap to implement for small data sets, but do not scale well and present significant long term maintenance and sustainment issues.  Figure 3.2 shows an example of a point-to-point translation system.Figure 3.2.  Point to Point InterfacesCommon Database RepresentationsCommon Database or Common Message Format systems require all systems to use the exact database construct or exact message formats for all communications.  This system, shown in Figure 3.3, is very efficient and provides faster data access and easier database replication than point-to-point solutions.  However, it is very intrusive for each system since it requires each to use the common data format.  Typically this approach can lead to applications that become very closely coupled with the database itself.  It also does not scale very well for large systems or enterprises.  The most significant hurdle may be the time required for the various DoD agencies to establish a common standard.  It is nearly impossible for the entire DoD to develop a comprehensive standard quickly, if at all.Figure 3. 3.  “Standard” DataThere are message standard success stories, and we believe common standards will evolve.  These evolving standards provide part of the communications solution and should not be ignored.  Unfortunately, we also believe it is very difficult for these common standards to become accepted unless the target community is small or moderate in scope.  The Open Financial Exchange standard [6] provides a good example of common message standards. It provides a unified specification for the electronic exchange of financial data between financial institutions, businesses, and consumers via the Internet. Microsoft, Intuit, and CheckFree created this standard in early 1997. It supports a wide range of financial activities including consumer and small business banking; consumer and small business bill payment; bill presentment and investments, including stocks, bonds and mutual funds.  It is evolving as a de facto standard for this industry. Data Mediation or GatewaysThe final interoperation technique is to perform data mediation via a gateway or distributed gateway functions.  This allows the existing and new systems to interoperate via the gateway without modifications to the end applications. Figure 3.4 shows the data mediation solution.  The most important benefit of this approach is that it requires significantly fewer translations. This is further described in section 4.1.   Another interesting side benefit of gateway development is that it provides a logical forum to consolidate and create forwarding and translation rules.  Creation and certification of these rules is clearly the most difficult portion of creating gateways and should never be underestimated.  People often forget that the forwarding and translation rules are also directly related to the number of translations required and therefore benefit from the reduced number of overall translations in the gateway approach.  Finally, if the gateways are implemented correctly, they can provide immediate conduits for legacy operational, training, and simulation systems to publish their internal information and to subscribe to external information.   Figure 3. 4.  Data MediationObviously there are negatives that come with the gateway approach.  Gateways can easily become vulnerable points in the communications architecture if not designed properly.  Often the point-to-point gateway implementation creates a single point of failure.  Although vulnerability is a significant problem, we do not believe there are any viable alternatives to gateways at present. Assigning backup and alternate gateways can reduce the vulnerabilities if they are designed into the communications systems. Vulnerability is also reduced if the gateway design follows a layered architecture (described later). The functionality may be distributed or even duplicated in many locations but is used only at one primary point.   Gateways can also become a communications bottleneck.  Inefficiencies may be minimized if the gateways are planned into the entire communications network from the beginning.  In all applications, the gateways must be sized appropriately to handle the required communications load.  The only alternative to the gateway bottleneck is to allow the systems to remain disconnected. This is clearly not the best choice.  Some will suggest that gateways require additional hardware, support, maintenance, and training.  It is true that there will be additional burden by fielding gateways, but this must always be weighed against the cost of modifying each system directly.  Likewise some suggest that gateways create the additional burdens of developing and testing translation and forwarding rules.  We suggest that these rules must be developed anyway if the various systems will communicate.  Translation, forwarding, and message format maintenance create significant problems. We will address these in section 4.  Each of these issues must be addressed for the systems to communicate. We believe the gateway approach will provide the most cost-effective solution for many applications. Information duplication and data looping present interesting problems for gateways. These also must be addressed in the communications system whether gateways or other translation systems are employed.  This topic is beyond the scope of this paper.Finally, gateways are almost always developed and fielded in an ad hoc fashion.  It is almost as if gateways are an afterthought, rather than an integral piece of the communications system.  To maximize the positive impact of a system, gateways must be integrated with the entire system and must be planned as part of that larger system.  Gateways must be part of the communications solution from initial planning through fielding, training, and sustainment.Detailed Problems with GatewaysThere are significant problems regarding gateways.  These span technical, political, and programmatic issues.  Actually, many of the technical issues may be easier to resolve than the political and programmatic issues. Technical IssuesThere are three major areas of technical difficulty for gateways: implementation complexity, translation and forwarding rules complexity, and scalability.  The first two are intimately related to the N-squared nature of point-to-point communications and the third is somewhat related to the same issue.N-Squared IssuesSince gateways are employed to connect disparate systems, the N-squared issue arises from one main point. How many translations are required in a complex system employing point-to-point translations?  These point-to-point translations may take the form of direct data manipulation on each end, manipulation of each specific system’s database, or batch oriented information manipulation. Re-use of these translations is rare.  Figure 4.1 shows an example of this N-Squared issue. If N represents the number of end users in a network, there are N2-N unidirectional links that connect all end users. As N gets larger, the number of unidirectional links can essentially be represented by N2.  If we use M to represent each unique message that must be translated (or forwarded), M times N2 manipulations are required.  So,	Number of manipulations = M x N2Figure 4.1.  N-squared Connection ExampleTherefore, implementation complexity increases as the square of the N systems and is also directly proportional to the number of messages handled by each system. Many military interoperability solutions have been designed with this point-to-point complexity. Implementation of these systems has been possible since the number of end-users and number of messages have been minimized. The number of required translation operations becomes even larger if there are different physical media exchange rules required at each end point.  We note that Metcalfe’s Law states: “The value of a network grows as the square of the number of users.”[7] How do the translation and forwarding operations required for point-to-point solutions effect this law?  Do these N-squared operations cancel much of the benefit of being networked?  We believe the complications of point-to-point interfaces make this a very unattractive solution except for very small and specialized implementations. Is there a better way to handle these translation or forwarding operations? As shown in the OAG White Paper, Plug and Play Business Software Integration, The Compelling Value of the Open Applications Group [8] and the SIW ATCCIS paper [9], there is a better solution. This employs a translation from each end system format to a “neutral” data format.  Figure 4.2 portrays this solution.  If N is the number of end users in a network, there are 2 times N unidirectional links to and from each system and the neutral format (for each N, except when N=1).  If we use M to represent each unique message that must be translated, M times 2 times N translations are required in this system. So in this case,Number of manipulations = M x 2NFigure 4.2.   2N Connection Example using a Neutral Data FormatThere is another significant benefit from this neutral format representation that is often overlooked.  When an intermediate data format is used, any particular system may be modified, and only the translations related to that end data system must be changed. All other translations to and from the common data format may remain unchanged and therefore do not require re-testing and re-certification. Without a common central data format, every time one data format changes, each translation link must be modified.The following example demonstrates how the number of translations grows in each system. It vividly demonstrates why message standards work! Let’s assume there are fifteen systems and each system will process fifteen messages. So, for the unique message format case,	152 – 15 = 210 unidirectional links	15 x 210 = 3150 unique manipulationsFor the neutral data format case,	2 x 15 = 30 unidirectional links	15 x 30 = 450 unique manipulations  The use of the neutral format reduces the number of required manipulations by a factor of seven in this simple example. This demonstrates why message standards work!4.1.2.  Translation and Forwarding Rules Technical IssuesStriving to reduce the implementation complexity of a gateway system from an N-squared problem is well understood and often discussed during system design.  However there is a more insidious problem relating to translation and forwarding rules that we should address.  If a common data format or neutral representation is not used, each system must define and certify translation and forwarding rules for every other system.  This creates an additional N-squared problem that often is not directly addressed during the system design.  We must eliminate this facet of the N-squared problem if we want to truly attain interoperability.Scalability ComplexityScalability must be addressed for any communications system node, and gateways will likely be placed in these nodes.  Speed of service, quality of service, throughput, timely translation, timely forwarding, and many other factors must be considered.  Most of these factors are dependent on the specific requirements for each gateway fielding and application.  Distributed functionality should be considered in each gateway application to reduce vulnerabilities and enhance throughput.  Further discussion of this topic is beyond the scope of this paper, but any gateway application should have requirements for scalability. Related test requirements should also be created during the gateway design and implementation.Summary of Technical IssuesSo in summary, the major technical problems for gateways are:N-squared issues for implementation and maintenanceN-squared issues for creation/certification of the forwarding and translation rules (often overlooked and the most difficult piece of the task)Scalability for the gateway implementation and processingPolitical and Programmatic ConsiderationsThere are many political considerations facing any system that claims to enhance interoperability.  Some believe gateways are evil, single points of failure, and nothing but bottlenecks in any communications path.  Others believe gateways are required to create the desired interoperability.  We believe that gateways present some unique challenges for the evolving communications infrastructure but are ultimately necessary.  Some people feel that development of gateways will limit development opportunities for contractors.  A large number of current efforts are modifying existing systems and creating more stovepipe solutions.  It is true that a well-coordinated gateway program would reduce the number of these efforts that are required.  To determine which projects to implement, we must look at the value of these stovepipe and gateway solutions.  Will the stovepipe systems really help solve the interoperability problem, or will they contribute to it?Who controls the development of gateways?  Today a single acquisition office does not control development of gateways.  We believe this is why many of the gateways that are fielded are point-to-point solutions.  Control and funding of the gateways are either directly held by: 1) the customer that needs two or more systems connected, or 2) by the offices that control development or fielding of the systems that need to interoperate.  These control and funding issues lead each office to take the easiest and quickest route to a solution. This often means a stovepipe solution is developed while the costs of maintenance, certification, and sustainment are ignored.Even if the political and programmatic issues are resolved, a coordinated development plan must be created that merges the competing gateway efforts that are underway.  The United States Air Force (USAF) is in the process of creating an organization that will focus on gateways for the future.  This is an unfunded effort at present, but the planning continues for this gateway office.We believe these political and programmatic issues must be addressed to adequately develop and field gateways that will serve the larger group of customers. Commercial and Economic ConsiderationsWhile researching the gateway topic, we found an organization in the commercial world that is tackling very similar translation and forwarding issues from the electronic commerce and business interoperability perspective.  The Open Applications Group (OAG) is a non-profit consortium focusing on best practices and process based Extensible Markup Language (XML) content for electronic business and application integration. [8] The OAG is building an industry consensus based framework for business software application interoperability.  Their mission is to promote fast, easy, and cost-effective eBusiness and application integration of software components for enterprise and supply chain functions.  This is very similar to the DoD goals for interoperability between the various legacy military systems.  The group leverages XML, best practices in integration technology and architecture, and provides an impartial forum for all stakeholders to work together to accomplish their common goals. The vision of the OAG is: “to drive for a solution that enables an organization to assemble their application portfolio, as they need to support the business, with a minimum of time and cost.  When customers talk to us about tying together application software, most of the time they do not care about the technical wonders associated with integrating software.  They require the ability to support their organizational needs to be fast, agile, and economical.”  This is very similar to the DoD vision where detailed information delivery requirements are fully satisfied across all military users quickly and economically. The OAG was originally comprised of eight vendors including American Software, CODA Financials, Dun&Bradstreet Software, Marcam, Oracle, PeopleSoft, SAP, and Software 2000. Since that time, the OAG has grown to over 37 members including customer organizations, systems integrators, and middleware vendors, as well as application software vendors. In September of 1995 the OAG created a proof of concept demonstration using the their architecture and content models. It demonstrated six vendors interoperating across five operating systems in four database environments.  They connected three inventory software applications (Dun & Bradstreet, MARCAM, and SAP using either Sybase or Oracle databases) to four general ledger software applications (Coda, J.D. Edwards, PeopleSoft, and SAP using Oracle, SQL, and Sybase databases) via a single gateway.   This connection demonstrated the feasibility of gateways for the commercial world. More details may be obtained at the OAG web site at:  HYPERLINK http://www.openapplications.org http://www.openapplications.org. [10] The Open Applications Group white paper, Plug and Play Business Software Integration, The Compelling Value of the Open Applications Group, provides excellent insight into interoperability issues.Many efforts like the OAG software interoperability effort and the MITRE Corporation Layered Communications Architecture use the interoperability analogy of common electric outlets and plugs in houses.  If we didn’t have standardized outlets and plugs, we might have to rewire our house for each new appliance we purchased.  Another appropriate analogy is the IBM personal computer architecture.  The hardware and software APIs are very well defined and many different vendors participate in the business area.  The DoD faces this same issue with its legacy and future systems.  The OAG and the commercial world are currently struggling with this interoperability issue integrating their business software applications.The OAG white paper included another very enlightening example regarding software maintenance.  We tailored their example for DoD applications and present it below.  Each interface in a system requires some amount of time to build, but first we will address the time required to maintain the interfaces.  OAG assumes maintenance of a single interface requires ten percent of a full time equivalent (FTE) engineer. In the point-to-point interface example shown above (15 systems that must communicate and 210 unique interfaces) maintenance requires210 interfaces x 0.10 FTE/interface = 21 FTEsSo this simple example requires twenty-one FTEs per year for interface maintenance alone.In contrast, the neutral data format example (15 systems and 30 unique interfaces) maintenance requires 30 interfaces x 0.10 FTE/interface = 3 FTEsSo the neutral format example requires only three FTEs per year for interface maintenance.This exponential growth of maintenance requirements and costs can severely impair the long-term effectiveness of point-to-point solutions. The simulation community faces similar issues regarding how to maintain (and create) a very large number of interactive behaviors. Using the assumptions made by the OAG for point-to-point solutions, if each interface requires ten or even five percent of a person’s time to maintain, the maintenance requirements quickly spiral out of control.Next, let us assume the expense of a software engineer is $100,000 per year fully loaded. Table 4.1, shown below presents the associated cost of maintenance for these interfaces with the point-to-point solution and the neutral data format solution.Table 4.1 Estimated Interface Maintenance CostsIntegration ModelAssume 0.10 FTE Cost per InterfaceAssume 0.05 FTE Cost per InterfaceTraditional Point to Point21 * 100,000 = $2.1 Million11 * 100,000 = $1.1 MillionNeutral Data Format or Gateway3 * 100,000 = $300,0002 * 100,000 = $200,000Savings per year$1.8 Million$900,000Clearly the gateway neutral data format approach provides economic maintenance and sustainment benefits.Now let us examine direct development costs.  Below, we present a notional example showing the development costs for gateways based on the point-to- point solution.  First, assume the development cost is $200 per line of code as an estimate for military systems.  This figure is often used as an estimate by economists analyzing military systems and was provided by the MITRE Economic and Analysis Center.  The estimate is fully loaded and contains all development, testing, and documentation costs for the software.How many lines of code are required for one of these translation systems?  For example, let us assume 100,000 lines of code as an estimate.  That means$200/loc x 100,000 loc/system = $20,000,000/system$20 million is required to develop a single translation system.  Clearly this is a significant investment and probably is an adequate assessment for a fairly complicated translation system.  We realize some systems will not be as complicated, but to reach the goal of near seamless communications some of the translation systems must become very complex.How many end systems must interoperate within the DoD, coalition partners, and others?  Is 1000 systems a reasonable estimate?  If 1000 systems is assumed, that means implementation of these translation systems requires:$20,000,000/system x 1000 systems = $20,000,000,000  (not including continuing maintenance)Clearly this system to system translation approach creates serious economic problems related to development and maintenance!  Assuming we need to create gateways to enhance interoperability, we believe the appropriate solution is to minimize the number of gateways required and make sure they use a common neutral data format.  Where practical, a common neutral data format will reduce the number of times the same functions are developed and maintained in software.  However, use of a common neutral data format is nearly impossible if every end program is allowed to control the design of the gateway functions.  Therefore, we recommend that a common group should control the design and development of future gateways.Commercial Interoperability ArchitecturesThe OAG has created an architecture very similar to the gateway architecture we propose for future gateways.  Basically they have created an application specification for interoperability called the Open Application Group Integration Specification.  The model contains: an application architecture, software component definitions, component integration scenario diagrams, detailed Application Programming Interface (API) definitions that are required to integrate software components, and a full data dictionary describing the individual elements of the APIs.  The Open Application Group Integration Specification is focused on business application software. We are working on an equivalent integration specification for communications gateways.  The OAG also developed a process for building this integration specification.  The members consistently use this process to design integratable business software.  We have adapted the steps below to fit a communications interoperability process as we envision it. This process requires the designer to:Identify the communications integration scenario required. (Information Exchange Requirements)Define the software and hardware components necessary to complete the integration scenario.Define the granularity of the software components involved in the integration scenario.Develop a detailed integration scenario diagram.Define the communications process, map these processes, and reconcile as necessary to define the relationships between components.Define the detailed data mapping required for communication between software components and the reconciliation needed to map data elements between components.Develop a common data dictionary to create a common ground for software components to communicate.Use of a set of guidelines that define the flow between software components.  These guidelines walk the team through the issues in defining the interoperability between software components and include:Data synchronizationValidationTransaction processing flowsInquiryReportingSecurity and authenticationWe realize these steps are not complete for gateway designs, but they provide a good reference for the general communications interoperability case.The OAG scenarios and the supporting specifications are associated with planning, managing, and executing the business functions of an enterprise, not the databases or spreadsheets that support these functions.  A similar focus must be maintained in the communications world if we plan to implement efficient interoperability.  It is this focus on content, not on technology, that is the key to understanding the OAG's efforts.  The OAG also uses Object Oriented Design and metadata concepts to implement their architecture. We believe these technologies will enhance the future communications interoperability solutions as well.  These OAG concepts are being used in the US DoD Global Combat Support System program today. The architectures described also include the concept of common and normalized semantics as espoused in previous papers presented at SIWs such as: “A SHADE Approach for Coupling C4I-Systems and Simulation Systems” 99F-SIW-004. [3]Goals for Future Communications SystemsWhat should the goal be for future communications systems?  We believe the ultimate system should provide seamless communications to all end users.  The communications should cover all types of links including wireless connections to the “last mile”.  The USAF Global Grid project is defining goals for just such a communications system.  We believe this concept will evolve much like the High Level Architecture (HLA) has in the simulation community.  All systems must communicate and a common infrastructure is required to allow this communication.  Ultimately it would be ideal if all systems used a Common Data Environment like SHADE, the JCDB, or other data reference model.We believe a layered architecture could provide significant advances toward the future seamless communication system. The MITRE Corporation is currently developing and investigating a layered communications architecture [11].  This architecture is modeled on the layering of the Internet and is being applied to hardware and software in communications systems.  Even in the ideal future communications systems, we believe there will be specific instances where gateways are required.  The goal for the ultimate system is to minimize the requirement for gateways and translations.Recommendations for the FutureSince a layered architecture like the Transmission Control Protocol/Internet Protocol (TCP/IP) stack provides well defined interfaces between each layer of the system, we believe this architecture provides significant benefits for communications systems and gateways.  Therefore we recommend this architecture as the desired foundation for future gateway systems.We should point out that a layered design is different than a modular design.  Many systems are designed in a modular fashion, where all the interfaces are well defined and modules can be interchanged as long as all the interface requirements are met.  Modular designs allow interfaces from any module to any other module.  Layered systems require strict adherence to well-defined interfaces where each layer only talks with the layer above and the layer below in the stack.  Information may still be passed between the multiple layers, even if not used by the intermediate layers, but the interfaces or APIs must account for this.  Layering allows easier substitution of functionality since the interfaces only effect the layer above and below. Many believe much of the success of the Internet is based on this layered architecture.  Layering leads to easier development (divide and conquer), easier function re-use, easier certification of functionality since it is encapsulated, and allows multiple vendors or sources for functions at each layer. Therefore, we believe this approach should be used for communications systems whenever possible.Much of the motivation for this layered approach comes from a network-centric vision of the communications world.  In this network-centric communications system, a global network provides continuous connectivity allowing information to all centers and platforms.  Each user has a unique address on the network regardless of their physical connectivity. There are three areas that must be addressed to create this seamless architecture: engineering, education, and applications.  In the engineering world, the communications system must transition through a “getting connected” phase that addresses transport and data formats, a “getting efficient” phase where use of resources is maximized, and finally a “getting automated” phase where man-in-the-loop control is eliminated.  The education area requires designers and users to think of capabilities versus requirements.  We want to design-in flexibility, not top to bottom stove-piped systems. And finally we must focus on encapsulated or layered application development.  It is these layered applications that can provide early acceptance of this new communications architecture as the applications did in the Internet.Layering is ubiquitous in networking.  Since this layering created so much success in networking, the MITRE researchers decided to investigate layering of communications systems.  The details of this research are beyond the scope of this paper, but the researchers noted that in the layered view, a radio is only one part of a complete network-centric military communication system.  Also, military specific needs are focused mostly in the link layer of the stack as shown in Figure 6.1. If layering can effectively be applied to communications systems, it clearly can be effectively applied to gateways.  In the layered view, a gateway is only a part of the complete, network-centric military communication system. Figure 6.2 shows the notional layers of a gateway application.Note that the gateway may be concerned with any or all layers in the protocol stack.  Also the gateway functions may be applied in a single or distributed locations.  The key to this concept is to divide the gateway functions into layers and adhere to the layering concept.  We believe this will allow the most efficient development, testing, certification, reuse, maintenance, and sustainment of the future gateway system.Figure 6.1. Link Layer Focus for RadiosThere are at least four distinct types of information that will typically pass through these gateway layers.  They are: data, metadata, management information, and security information.  We believe each of these types of information flows can be adequately accommodated in the layered gateway architecture by appropriately defining the APIs for the top and bottom of each layer.  Figure 6.2. Notional Gateway LayersWe hope this new gateway approach will encourage competition at each functional layer, but this may not happen automatically in the military industrial complex.  Traditional defense contractors are accustomed to designing and building modular stove-piped systems.  Some additional thought and incentives must be introduced for the contractors to compete in the new layered world.  Many commercial vendors are succeeding in this layered world, but it requires a different thought process.USAF Consolidated Gateway ProgramThe USAF is creating the foundations for a Consolidated Gateway Program that will address many of the issues addressed in this paper.  Responsibility for this effort is shared between Electronic Systems Command (ESC) at Hanscom AFB and the Aerospace Command and Control Intelligence Surveillance and Reconnaissance Center (AC2ISRC) at Langley AFB.  The primary motivation for this effort is a general realization in the USAF that: 1) information sharing across systems is limited or non-existent, and 2) that uncoordinated stove-piped translation solutions are creating significant problems.  In April of 1999, the ESC Data Links System Integration Office (SIO) and AC2ISRC briefed the interoperability problem to the Data Link Senior Level Review. The SIO and AC2ISRC were directed to find a solution to the problem.  In the Fall of 1999, AC2ISRC briefed the need for gateways to the Air Force Board senior leadership.  They were directed to establish an Air Force gateways program.The SIO and AC2ISRC have established a series of Air Force gateway meetings to plan this new consolidated gateway program.  A funding request was placed in the Fiscal Year 2002 Program Objective Memorandum, but the request did not exceed the cutoff level for funded programs.  However, the gateway initiative is high on the unfunded list and other sources of funding are being investigated. To enhance the planning for this gateway program, many of the gateway development programs met several times over the past nine months. The participants discussed options to merge the various gateway programs into one effort.  The intent is to create a consolidated gateway program that can be managed by a single entity in the Air Force.  Hopefully this will minimize the duplication of effort, guarantee certification of the gateway solutions, and provide a body of reusable tools that any future gateway might use.  This group also is addressing cooperative opportunities to demonstrate and experiment within the existing gateway programs.  The goal of these experimental efforts is to provide early lessons learned that will help the consolidated gateway program succeed. The key goal for this gateway program is to develop, test, recommend, and publish standards regarding gateways.  We currently have not been able to identify a single group that is focusing on gateway standards for the DoD and we believe this new organization will provide the right forum for this mission.SummarySo, back to the initial question: are gateways a necessary evil?  We believe the answer is yes!  Gateways are part of any solution for seamless communications interoperability, and therefore, we should deal with them as part of the communications architecture, funding, planning, and sustainment.  We recommend that the DoD should manage gateways as a consolidated product line and strive to create gateways with encapsulated functionality.  This encapsulated functionality should be developed in a layered fashion whenever possible.   Gateways should be considered as part of any interoperability solution and be employed as required.  However, the ultimate goal should be to minimize the number of gateways that are required.  In a perfect communications world, all gateways could be eliminated, but we believe this is not practical for communications architectures as they exist today or in the near future.  In conclusion, we believe gateways are and will continue to be a necessary portion of the interoperability solution.ReferencesFederal Standard – 1037C, Telecommunications: Glossary of Telecommunications Terms, dated 7 August 1996JCS Publication 1-02: DoD Dictionary of Military and Associated Terms,  HYPERLINK http://www.dtic.mil http://www.dtic.mil , 23 March 1994 (amended 6 April 1999) Krusche, S. , Tolk, A. , “A SHADE Approach for Coupling C4I-Systems and Simulation Systems” 99F-SIW-004, Fall Simulation Interoperability Workshop, September 1999Timian, D., Hieb, M., Glass, J., Staver, M. “Using Standard C4I Components to Interface Simulations” 99S-SIW-035, Spring Simulation Interoperability Workshop, September 1999Renner, Scott Ph.D.,  “Data Interoperability: Problem and Solutions”, MITRE Presentation, 10 November 1999Open Financial Exchange web site,  HYPERLINK http://www.ofx.net/ http://www.ofx.net/ June 2000Gilder, George, “The Telecosm Series” Forbes Magazine, 13 September 1993.Open Applications Group White Paper: “Plug and Play Business Software Integration, The Compelling Value of the Open Applications Group”,  HYPERLINK http://www.openapplications.org http://www.openapplications.org June 2000Tolk, Andreas Ph.D., “Using ATCCIS as an Information Layer to Couple CGF Federates and Closed Combat Simulations” 99F-SIW-008, Fall Simulation Interoperability Workshop, September 1999Open Applications Group web site,  HYPERLINK http://www.openapplications.org http://www.openapplications.org June 2000Butler, Michael, “Communications Layering” The EDGE Newsletter,  HYPERLINK http://www.mitre.org/pubs/edge/november_98/third.htm http://www.mitre.org/pubs/edge/november_98/third.htm , November 1998Author BiographyDavid S. Dodge is a Lead Engineer and Team Leader at the MITRE Corporation, in Bedford, MA.  He currently leads a team of engineers providing communications and networking technical expertise for the US Air Force and other federal agencies.  Integration of wireless legacy communications systems is the focus for the team.  David has over fifteen years of engineering and management experience designing and developing communications systems.  He is also the current Chair of the Simulation Interoperability Standards Organization C4I Forum. AcknowledgementsWe would like to acknowledge the support of the MITRE Corporation and the USAF Electronic Systems Center Data Link Systems Integration Office while this paper was being written.  In addition, we would like to thank all the reviewers and people that contributed ideas for this paper.  Particular thanks go to Frederick “Chuck” Marley and Patricia Dodge.  