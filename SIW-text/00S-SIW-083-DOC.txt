Battlespace Federation: An HLA Experiment in DisaggregationEmmet R. BeekerGRC International1900 Gallows RoadVienna, VA  22182703-506-4894 HYPERLINK mailto:ebeeker@grci.com ebeeker@grci.comKeywords:HLA, Disaggregation, ModSAF, BehaviorsABSTRACT: This paper presents preliminary results from a GRCI internally funded research & development project: Battlespace Federation.  The Battlespace Federation uses High Level Architecture (HLA) to federate a campaign level simulation with ModSAF – a vehicle/entity-level simulation, a stealth viewer, a national strategic intelligence simulation, and a virtual command center.  The campaign model, Advanced Regional Exploratory System (ARES), simulates units down to company size and uses HLA to give orders to platoons in ModSAF when disaggregation is required.  While HLA does not explicitly make available application-to-application communication, HLA provides the necessary mechanisms that make application-to-application communication possible.1.  BackgroundThe training community has need for highly realistic entity level models.  The resolution and fidelity of the models must be good enough to emulate real life sufficiently to achieve training objectives and to avoid negative learning by gaming the model.  This has led to detailed physical models that accurately portray vehicles and entities on the battlefield.  However, these models generally have problems portraying unit behaviors.  They compensate for this by using human operators to provide the decision-making faculty.  These models, the semi-automated force (SAF), are the backbone of most computer-based exercises.  They are manpower intensive when used to emulate a large exercise, as each operator has a limited span of control.The analysis community uses large-scale unit-based models to perform campaign analysis, where Armies and Corps must be represented.  While there are both human-in-the-loop and closed-form (all decisions are made in the computer code) simulations, the closed-form simulations dominate for analysis because they can be duplicated exactly up to a decision point to test alternatives and because scenarios can be easily replicated for Monte Carlo statistical analysis.  As a result, analysis simulations have focused upon representing unit-level decisions and behaviors.As computer hardware has improved, entity-level simulations have increased the fidelity of vehicle operations and increased the size of groups of vehicles that can be represented in a single SAF.  This has led to larger units being represented at the entity level, but it has also increased the complexity of controlling the units.  At the same time, analysis simulations have increased the granularity in their unit-oriented models so that smaller units are explicitly represented in the simulation.  The end result is that aggregate-level simulations can use high resolution physical models to represent entity-level combat realistically and entity-level models can use aggregate-level behaviors to reason about the battlefield and perform realistic unit operations.The Battlespace Federation (Figure 2.1) is a testbed, developed by GRCI to test simulation concepts.  The Battlespace Federation had been used previously to look at using Common Object Request Broker Architecture (CORBA) to connect command and control applications to units in a simulation.  Federating an aggregate-level simulation, a virtual command post, a national strategic intelligence simulation, an entity-level simulation, and a stealth viewer using Defense Modeling and Simulation Office (DMSO) HLA Runtime Interface (RTI), the Battlespace Federation provides the components to implement a multi-level federation with both unit-level and entity-level resolution.ARES is an aggregate level simulation that models Joint Force/Coalition ground and air combat including C2 and ISR.  Developed for the Army Land Information Warfare Activity and the Center for Army Analysis, ARES meets traditional Army force-on-force analysis needs as well as Information Warfare and Information Operations requirements.  ARES is perception-oriented: it models information flow from initial acquisition by sensors to fusion to final delivery to combatants.The Virtual Command Center (VCC) depicts the commander’s view of the battle on a sand table and provides a point-and-click interface to query information and give commands to units.  It can be set to display perception or ground truth.  It also integrates intelligence reports and can display imagery.  In the federation, it receives information from ARES and EncounterVue.EMBED PowerPoint.Slide.8FIGURE 2.1EncounterVue is an interactive tool for visualizing the operation of complex physical systems including satellites, aircraft and ground vehicles.  In the federation, EncounterVue visualizes satellite-sensing areas on the Earth’s surface.ModSAF is an entity-level simulation that allows a human operator to control individual soldiers and vehicles.  Through various editors, the operator can give missions and tasks to the simulated entities.  In the federation, ModSAF is used to disaggregate units from ARES and maintain the entity-level representation of those units.The 3D View is similar to a Stealth Viewer.  In the federation, it is attached to a helicopter to show the view from the helicopter.  The helicopter is used as the trigger to cause disaggregation of units.2.  Technical ApproachIn the Battlespace Federation, context is provided by the aggregate-level simulation, ARES.  ARES maintains unit perceptions and intentions.  Orders and situation are passed down from higher echelons and reports are passed back up the command chain.  In the federation, ARES normally simulates units down to company level.  When required, a unit from ARES is disaggregated into platoons.  ARES then causes ModSAF to create the platoon as vehicles.  ModSAF reports positions and status of vehicles and units.  ARES evaluates the unit status and position and gives orders for the platoons to execute.  When no longer required, the vehicles in ModSAF are deleted from play, and only their aggregated state in ARES is maintained.  A unique feature in this federation is that units are represented twice, once as aggregates in ARES and once at entity level in ModSAF.ScenarioEncounterVue, simulating satellite intelligence, informs ARES of the regions covered by observation.  ARES, in turn, notifies EncounterVue of the signals and assets detected in the region.  ARES updates the perception of the units, which is displayed in the Virtual Command Center (VCC).  From the VCC, the operator gives orders to a scout helicopter team to investigate.  The helicopter team consists of two OH-58 helicopters, one of which has a stealth view attached to it.  As the helicopter approaches a company, ARES detects the proximity and causes ModSAF to create platoons of vehicles.  The vehicles are displayed in the 3D-View as they come into sight.  The operator can commit artillery or maneuver forces through the VCC, or allow ARES to make the decision.  ARES causes artillery to engage the enemy forces.  The helicopter team returns to refuel, the surviving vehicles withdraw, and the scenario ends.HLA Federation Object ModelEncounterVueARESMODSAFVCC3D-ViewVehicle/EntityXXPlatoonXXCompany & aboveXXRegion descriptionXXXTABLE 2.1There are actually two levels of simulation occurring at once: vehicle level and unit level.  ARES does not care about vehicles, but does care about the platoons in ModSAF.  ModSAF maintains the individual vehicles, but does not care about units above platoon.  The 3D-View only cares about vehicles.  The VCC only cares about units – company and above for maneuver units and the helicopter team.  Level of interest is summarized in Table 2.1.The scenario is intentionally constrained to allow a minimal Federation Object Model (FOM).  The information equivalent to the Entity State Protocol Data Unit (PDU) in DIS terminology is sufficient for unit and vehicle data.  In the FOM, there is both a unit and vehicle class.  Table 2.2 gives the attributes for a Unit class.  The Vehicle class is identical except “OwningUnit” replaces “ParentID”.  There are interactions for creation of unit, deletion of unit, and one for each command that ARES can give to a unit.  For initial testing, commands were limited to “Move”, “OPFOR Move”, “RWA Fly Route”, “RWA Reconnaissance”, “Assault”, and “OPFOR Assault”.  Table 2.3 shows the parameters for CreateUnit and Move interactions.class Unit	attribute Nameattribute IDattribute ParentIDattribute Locationattribute Orientationattribute Speedattribute StatusTable 2.2  Unit Classclass CreateUnit	parameter Name	parameter UnitID	parameter ParentID	parameter Location	parameter Orientation	parameter Formation	parameter Speed	parameter Statusclass Move	parameter UnitID	parameter LocationTable 2.3  Interaction Class2.3  Creating HLA Interfaces for ARES, VCC, EncounterVue, and 3D-ViewARES and EncounterVue were developed as stand-alone, closed-form simulations.  The VCC was developed for interaction with simulations and the 3D-View was developed specifically for the Battlespace federation.  The first step in creating HLA interfaces for these four applications was to develop generalized C++ classes to provide mechanisms for initializing communications with the RTI, joining the federation, registering objects, managing object handles, and decoding classes for updates and interactions.  These four applications were then modified to use this generic C++ HLA interface, expediting the HLA implementation.  The programmers only had to implement the callback functions for interactions.ARES was the most interesting modification.  As a stand-alone model, unit behaviors were internal to the unit class.  ARES was modified to calculate when a point of interest (the helicopter team) had the potential to see a unit.  When this occurred, ARES sent a CreateUnit interaction to ModSAF.  The internal command and control code for the disaggregated unit was then turned into orders that were passed to ModSAF using HLA command interaction classes.  Instead of ARES simulating the actions of the disaggregated unit, ModSAF controlled individual vehicles and reported back to ARES platoon location and status using HLA attribute value updates.  ARES could then track progress and revise orders if necessary.2.4  Creating the ModSAF HLA InterfaceModSAF created a different problem.  ModSAF 5.0 has source code and Make files for a number of systems – most using the GNU gcc compiler.  The DMSO HLA RTI 1.3v6 also has libraries and include files for a restricted number of systems (DMSO does not release the source code).  In order to modify ModSAF, a common platform and compiler had to be found.  The Sun Solaris appeared to be the most suitable.  However, the HLA RTI uses dynamic libraries from the Sun Compiler which are incompatible with the GNU compiler required for ModSAF.  The closest match turned out to be Linux on a Pentium computer.  Because the language binding for the HLA RTI is C++, the C code for ModSAF was changed to C++ and the GNU g++ compiler was used.In order for ModSAF to transmit attribute values for vehicles and units, ModSAF must maintain a table of RTI handles (HLA Object ID) and a cross-reference to the internal ModSAF ID.  Since all of the entities in ModSAF were created by a CreateUnit interaction, the cross-reference table can be built when the vehicles are created.  After that, the ModSAF internal scheduling program will periodically update the attributes for vehicles and units it controls.  All updates are passed through a process called PDU Proc that delivers the information to the appropriate modules of ModSAF.  One of PDU Proc’s responsibilities is to format the data for the appropriate communication protocol (SIMNET, DIS 1, or DIS 2.0.3).  It is a straightforward matter to send the data using the RTI updateAttributeValues function once the RTI handles are known.The DMSO RTI 1.3v6 implementation has many of the DIS implementation features – including a scheduled Tick function.  In ModSAF, the Tick function ensures that vital service routines are called periodically.  The DMSO RTI 1.3v6 requires that the RTI Tick function be called in order to receive interactions and updates.  Essentially, the RTI Tick function passes control to the RTI to execute the code that should be called when ModSAF receives attribute data or interaction notification.  It is a simple matter for ModSAF to call the RTI Tick function from the ModSAF Tick function, some care had to be used here.  Because the RTI code is not re-entrant, the same code that receives a CreateUnit interaction cannot immediately register the new entities and try to update them.  Rather, ModSAF must set a flag or otherwise wait until the RTI returns from the Tick function.ModSAF is designed to be run in two parts, a SAF Station that contains the human-computer interface, and the SAF Simulation that actually maintains the entity data and executes the entity tasks.  Normally, a unit can be created by the SAF Station by filling in a unit data structure, and then setting the “shouldBeSimulated” field to true.  When the SAF Simulation sees an entity that is not yet simulated and it has the shouldBeSimulated field set to true, it creates the entity.  The CreateUnit interaction made use of this function and established a unit data structure, setting the shouldBeSimulated field to true.  This caused ModSAF to create the unit.  At the same time the CreateUnit interaction enters the unitID into the cross-reference table.  Initially, only the unit has a HLA handle.  The vehicles that ModSAF created in the unit are not known to the disaggregation module.  Fortunately, ModSAF maintains a unit hierarchy by keeping a parentID with each vehicle.  Whenever ModSAF would update an attribute, it would also notify the disaggregation module, which would look for its handle in the cross-reference table.  If the vehicle was not in the table, it would look for the parent ID in the table.  If the parent ID was in the table, then the vehicle ID was added to the table and the RTI updateAttributeValue function was called.  This avoided the reentrant problem with the RTI by delaying the registration until after the RTI Tick function.Behaviors in ModSAF are performed through task frames.  A task frame can have more than one task, but only one is primary.  The others are in a “stand-by” mode.  This allows a unit to be performing a “Move” task for example, with a “React to Air Attack” task in stand-by, ready for activation when a triggering condition is met.  ModSAF has a utility function to set up a task frame for any task registered in the task library.  For the Battlespace Federation, all of the tasks and subtasks for the federation interactions were registered during ModSAF initialization.  Then, the appropriate task frame was created using the utility function.  This caused units and vehicles to react the same way they would have by using the SAF Station to manually enter missions and tasks.  The result was to replace a human operator with the ARES simulation.  Rather than a human controlling entities from a SAF Station, platoon-sized units were controlled from ARES.3.  HLA IssuesUsing HLA to link an aggregate model with an entity model was surprisingly easy.  There were two issues, however, where there were pragmatic but inelegant solutions.  The inability to immediately call RTI functions during the RTI Tick causes slightly messy code.  Essentially, a flag must be set and after the RTI Tick returns, the simulation code must check the flag to see if anything is to be done.  Either the simulation has to check to see what has been changed, or it must make a queue during the RTI Tick of functions to be executed after the Tick returns.  Either method results in additional complexity.The second issue is that HLA is not designed for explicit application-to-application communication.  This exercise worked because there was only one modified ModSAF in the federation.  If there were more than one ModSAF creating units and vehicles, the ARES simulation would have to know which ModSAF should create each unit and address it separately.  This could be done by creating a separate parameter that would identify which ModSAF should react to the CreateUnit interaction.  The choice could be by side or parent organization.  Use of reliable transmission and filtering on the selection parameter in the RTI could result in more efficient delivery, if the filtering were performed at the sending application.4.  Aggregation/Disaggregation ResultsThe Battlespace Federation experiment attempted to integrate the strengths of entity-level and aggregate-level simulations.  The experiment indicated promise in the concept and also revealed issues that need to be resolved.4.1  SuccessesModSAF uses a line-of-sight calculation to determine when two entities can see each other.  When the line-of-sight is broken, the entities also lose awareness of each other.  Normally, the human operator accounts for this.  When a vehicle disappears around a hill, the human can remember and direct the vehicles to react accordingly.  The experiment with ARES controlling the units provided the persistence of the situational picture.  ARES “remembered” that there was an enemy unit and could “reason” the appropriate actions.  ARES could also “reason” about the formation to use, based upon the mission.  ARES could coordinate attacks, hold units back to prevent exposed flanks, commit reserves, and generally perform unit-level control.4.2  Issues to be ResolvedWhen under fire, some vehicles can be damaged and separated from other vehicles in a unit.  ARES presumes that the vehicles in a unit are able to provide mutual support.  ModSAF reports the unit position as the center of mass of the entities making up the unit.  When a unit becomes separated, it needs to be split into multiple sections.  Otherwise, the aggregate-level simulation can form an incorrect picture of the situation.  It may require more than location and orientation to adequately describe a unit position.ModSAF uses a “template” approach to create the vehicles in a unit.  Spacing and displacement are determined by formation parameters.  After the entities begin maneuvering, the formation gets out of shape.  If the unit is aggregated, then immediately disaggregated, it should appear in the same position as before the aggregation.  In the Battlespace Federation, this was accomplished by maintaining the disaggregated positions even after the point at which they could be aggregated.  The entities were maintained for a long enough period to allow their re-organization into a templated formation.  The vehicles were not actually placed in the templated positions – only enough time was allowed so that they could have been.  Then, if they had to be disaggregated again, it was reasonable to use the template.  In the experiment the time was fixed.  In practice, the time could vary depending upon the scattering of vehicles and operational situation.After combat, units were sometimes made up of fewer vehicles than before.  Not all combinations of vehicles are registered as units in ModSAF.  While ARES could handle arbitrary vehicle lists for units, ModSAF was not able to generate some combinations as a unit.  Either additional small units have to be added, or logic needs to be added to compose all possible units.  The primitives exist in ModSAF to do this by creating individual vehicles and assigning them to a unit, but the code to exercise this capability has not been included in the federation.Combat in ModSAF can result in firepower or mobility kills, as well as catastrophic kills.  ARES does not keep track of individual entity condition.  This information is lost when aggregating.  In order to maintain consistency, the aggregate-level model will need to maintain more data about its entity level status.There was no attempt to perform aggregate-level combat in the Battlespace Federation, as that raises another set of issues beyond the scope of this experiment.5.0  ConclusionThe Battlespace Federation shows that, in principle, an aggregate simulation can control vehicles in an entity-level model.  The aggregate-level model can provide reasoning not normally available in the entity-level model, lowering the manpower requirement for exercises.  Human operator span of control can be increased.  HLA provides a sufficient mechanism for communicating between the aggregate-level and entity-level simulations.  Finally, there are issues remaining to be solved before units can be disaggregated and then aggregated again.Author BiographyEMMET BEEKER is Chief Engineer in the Technical Support Group of GRC International, Vienna, VA.  He received a B.A. in Mathematics (1973) and an M.S. in Computer Science (1974) from Indiana University in Bloomington, Indiana.  He has been active in the application of Operations Research methods to decision making in simulations.