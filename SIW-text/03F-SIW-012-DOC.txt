An Interoperable Multi-Mission Warfare Federation for AnalysisDr. Joseph Kovalchik, Dr. James Coolahan, Randy SaundersJohns Hopkins University Applied Physics Laboratory11100 Johns Hopkins RoadLaurel, MD  20723-6099240-228-6264 HYPERLINK "mailto:joseph.kovalchik@jhuapl.edu" joseph.kovalchik@jhuapl.edu,  HYPERLINK "mailto:james.coolahan@jhuapl.edu" james.coolahan@jhuapl.edu,  HYPERLINK "mailto:randy.saunders@jhuapl.edu" randy.saunders@jhuapl.eduKeywords:HLA, FEDEP, integrated warfare analysis, multi-mission warfare, federationABSTRACT: This paper presents recommendations for developing a High Level Architecture (HLA) Federation designed for use in interoperable, multi-mission warfare analysis – analysis that crosses the domains of multiple mission areas. For the most part, because of the complexity involved, the tools to support such analyses have tended to be campaign-level simulations – good for top-level analyses, but often lacking in the level of detail desired for simulating specific operational or tactical situations.  However, analysts in individual mission areas tend to prefer to use tools which provide more detail specific to those mission areas. In using these mission-level models, multi-mission warfare analysis is usually conducted in a sequential manner by passing the output of one warfare area analysis as the input to the next warfare area. With the advent of multi-mission platforms, the ability to analyze the effectiveness of a given platform’s configuration as it simultaneously conducts multiple warfare missions while on station becomes imperative. Our federation enables cost-effective, efficient interoperable, simultaneous multi-mission warfare analysis using “out-of-the-box” or “as-is” HLA versions of mission-level models.The Johns Hopkins University Applied Physics Laboratory (JHU/APL) has recently developed an initial prototype federation which consists of several federates composed of mission-level models preferred by analysts for respective warfare areas. Using the High Level Architecture (HLA) standard developed by the Department of Defense, the federation combines the Extended Air Defense Simulation (EADSIM), the Naval Simulation System (NSS), and the JHU/APL-developed Battle Force Engagement Model (BFEM) into a single federation, the JHU/APL Interoperable Multi-Warfare Simulation (IMWS). After the capabilities for the assigned warfare area of each of these simulations is summarized, the method for developing the federation and analyzing the results from our execution of a scenario using IMWS is presented. Last, lessons learned in creating our federation are outlined.IntroductionThis paper documents the development of, and presents recommendations for, constructing a High Level Architecture (HLA) Federation designed for use in interoperable, multi-mission warfare analysis – analysis that crosses the domains of multiple mission areas. Our federation enables interoperable, simultaneous multi-mission warfare analysis using “out-of-the-box” or “as-is” HLA-compliant versions of mission-level models. After the capabilities for the assigned warfare area of each of these simulations are summarized, the method for creating, executing and analyzing the results from our execution of a scenario using the Johns Hopkins University Applied Physics Laboratory (JHU/APL) Interoperable Multi-Warfare Simulation (IMWS) is presented. Last, lessons learned in creating our federation are outlined.Background Because of the complexity involved, the tools to support interoperable, multi-mission warfare have tended to be campaign-level simulations – good for top-level analyses, but often lacking in the level of detail desired for simulating specific operational or tactical situations.  However, analysts in individual mission areas tend to prefer to use tools which provide more detail specific to those mission areas. In using these mission-level models, multi-mission warfare analysis is usually conducted in a sequential manner by passing the output of one warfare area analysis as the input to the analysis of the next warfare area. With the advent of multi-mission platforms, the ability to analyze the effectiveness of a given platform’s configuration as it simultaneously conducts multiple warfare missions while on station becomes imperative.Project OverviewThe Johns Hopkins University Applied Physics Laboratory recently developed an initial prototype federation which consists of several federates composed of mission-level models preferred by analysts for their respective warfare areas. One of the goals of the project was to use the “out of the box” HLA-compliant versions of models not owned by JHU/APL using no modifications to their existing HLA interfaces. Using the HLA standard, the federation combines the Extended Air Defense Simulation (EADSIM), the Naval Simulation System (NSS), and the JHU/APL-developed Battle Force Engagement Model (BFEM) into a single federation, the JHU/APL Interoperable Multi-Warfare Simulation (IMWS). IMWS ArchitectureThe architecture development began by examining a scenario drawn from an ongoing study that involved several mission areas. These mission areas included: air defense against cruise missiles (AD), surface warfare (SUW) against a small-boat attack, and anti-submarine warfare (ASW) in searching for a submarine conducting a port egress. After reviewing approximately 64 analysis tools resident at JHU/APL, we determined a core set of critical mission-level simulations which were preferred by our analysts for the above warfare areas. We then selected from this core set three simulations that were HLA-compliant or could be readily made so:  NSS version 3.3 [] to analyze the SUW area; EADSIM version 10.0 [] to analyze the cruise missile attack; and BFEM version 1.3 to analyze the ASW mission.  REF _Ref44936188 \h Figure 0: IMWS Architecture shows the overall structure of the federation. In order to capture the data from simulations runs, we selected hlaResults version 2.0. The data from the simulation runs is viewable using MS Access to directly view the data collected in database tables. Alternatively, one can view data through visualization software using either hlaResults in the playback mode or proprietary software that accesses the data from the database. Discussion of the Manager Federate is deferred to a later section. The federates were connected using Run-Time Infrastructure (RTI) version 1.3 Next Generation Version 4.0 (RTI1.3NGv4) because this was the version of the RTI with which several models had been integrated. As all of these tools (with the exception of BFEM) were available to run with the MS Windows operating system, we decided to build the prototype in an environment using a homogenous operating system (Windows) hosted on several PC platforms. BFEM was originally developed for  SHAPE  \* MERGEFORMAT  a UNIX operating system and did not have an HLA interface. We therefore ported BFEM to the Windows platform and constructed an HLA wrapper for it. Configuration management was conducted using Visual SourceSafe. After acquiring the HLA-compliant versions of models that covered those mission areas, we developed an HLA Federation Object Model (FOM) for the federation. Federation Development SHAPE  \* MERGEFORMAT The IMWS federation was developed using the guidance found in the Federation Development and Execution Process (FEDEP) Model []. (See  REF _Ref44998641 \h Figure 0: Six-Step FEDEP). The following sections provide details concerning each step in the process.Federation Objectives Our project goal was to develop an HLA Federation designed for use in interoperable, multi-mission warfare analysis using no code modifications to the preferred models of choice. We set out to build in the ability to conduct AD, ASW, and SUW analysis in our initial federation prototype. Based on the chosen scenario, the systems/objects of interest included surface ships, cruise missiles, submarines and small boats. Federation Conceptual Model The operational context is provided in the generic scenario depicted in  REF _Ref44998450 \h Figure 0: Prototypical Scenario. The dark regions indicate land masses. The forces of the red side will be discussed first. A red submarine is transiting from north to south (dashed line); small boats approach along the eastern land mass from the north and east; and cruise missile attacks originate from the three small squares on the eastern land mass.   SHAPE  \* MERGEFORMAT For the blue side, two surface ships will perform an ASW search using a ladder pattern starting at the middle of the southwest side of the operating area, while two other surface ships originating at the outer portions of the southwest side of the operating area will provide support against the small-boat attack. Object interactions include weapon launches and weapon detonations. Red cruise missiles will be shot at the blue surface ships. Red small boats will launch missiles toward the blue surface ships. The blue surface ships will conduct self-defense and also return fire to destroy the attackers. The blue surface ships will conduct an ASW search for the red submarine and attempt to maintain contact on it. Federation DesignThe federation design included selecting federates, allocating functionality and preparing the development plan. Federate selection was solidified only after verifying the preferred models of choice could support analyzing the selected scenario. After objects and interactions were assigned to each federate at a fairly high level, a plan was developed to build the initial prototype.The following is a brief description of each model/federate chosen. BFEM was selected to simulate the ASW warfare area. BFEM is a Monte Carlo simulation of Undersea Warfare (USW) engagements for both mine warfare (MIW) and ASW. It models the acoustic performance of submarines, surface combatants, and various ASW aircraft. Of all the preferred models, it possesses the best (most detailed) modeling of the acoustics performance, including individual sonobuoy performance. We chose EADSIM to model the cruise missile attack. EADSIM is a workstation-hosted, system-level simulation that is designed to be used by combat developers, material developers, and operational commanders to assess the effectiveness of Theater Missile Defense (TMD) and air defense systems against the full spectrum of extended air defense threats. It provides a many-on-many theater-level simulation of air and missile warfare, an integrated simulation tool to support joint and combined force operations, and a tool to augment exercises with realistic air defense training [ NOTEREF _Ref44650739 \h 2].  NSS was chosen to model the SUW mission area. NSS is a multi-sided, multi-warfare, object-oriented, Monte Carlo maritime simulation intended primarily for use by: 1) operational planners and decision makers in support of Course of Action (COA) assessment and plan evaluation; and 2) the analysis community in support of concept assessments and system effectiveness studies. NSS explicitly represents C4ISR elements across all Warfare Mission Areas (WMAs), directly supporting the modeling of Network Centric Warfare. As an analysis tool, NSS provides a comprehensive capability to simulate and evaluate current or future Naval and Joint Concepts of Operations (CONOPS) and system/platform/force level capabilities  [ NOTEREF _Ref44650704 \h 1]. We next addressed allocating to each federate the entity representation and ownership of the objects in the conceptual model as well as the interactions required to coordinate damage assessment. A high-level plan was developed to allocate the surface ship ownership to NSS, submarine and ASW helicopter ownership to BFEM, and missile ownership to EADSIM. (See  REF _Ref44998679 \h Figure 0: FOM Objects for a sampling of the object allocation.)   SHAPE  \* MERGEFORMAT Each federate was to initiate and receive weapon launch and weapon detonation interactions to support damage assessment by individual models. (See  REF _Ref44998697 \h Figure 0: FOM Interactions for a sampling of the interaction allocation.) SHAPE  \* MERGEFORMAT Having allocated the objects and interactions, we proceeded to develop the federation.Federation Development Federation development encompasses steps to develop the FOM, modify federates if necessary, and prepare the federation for integration and test. We began by providing details on each model that we used. However, it should be noted that several of the tasks that we took apply in a generic sense to the development of similar federations.The HLA-compliant version of NSS is a distinct application from the standard version of NSS. From now on, when we speak of NSS, it is in reference to the HLA-compliant version. Being distributed separately from the standard version, the HLA-compliant version is for the most part undocumented. Basic knowledge of how to run NSS was obtained by attending a two-day course. NSS is capable of supporting two FOMs, one called Pegasus and another for use with the Global Command and Control System (GCCS). There was no separate Simulation Object Model (SOM) that was available to examine. In order to determine what the NSS SOM supported we had to run NSS connected to another (separate) NSS process and examine its HLA output file. The data in this file contains the statements that explicitly tell what objects and interactions listed in the Pegasus FOM are actually published/subscribed or initiated/received by NSS. It was only then that we had an accurate idea of what was supported. NSS requires the use of two synchronization points which can be registered by NSS or another federate. The basis of our FOM was formed by the Pegasus FOM since it was more closely aligned with our needs than were the SOMs of the other models. We documented our FOM as it existed to this point as required by the Object Model Template [] using the Object Model Development Tool [].Because the BFEM HLA wrapper had not been developed yet, we adopted the object model of NSS as its basis. Therefore, no changes to the FOM were required with the addition of BFEM. We also included in BFEM the ability to support the same synchronization points and common reference coordinate system as NSS. We then added objects from the EADSIM SOM. We compared the EADSIM SOM with the IMWS FOM as the next step. EADSIM requires the use of several files that allow its HLA interfacing to the federation to be customized. There are three main reader or converter files: one to declare a subset of objects and interactions that are germane to one’s federation, one to map EADSIM internal objects/interactions and attributes/parameters to FOM counterparts, and the last to provide linear conversions for use in the second. It was our hope that we would be able to use these files to make interfacing to EADSIM fairly easy. However, it turned out that some required linear conversions were not available and some nonlinear conversions were required. The need to perform nonlinear conversions from some EADSIM objects to NSS objects led us to developing a Manager Federate (described below) to integrate these models.We used hlaResults not only to collect the information for our analysis, but also for testing and debugging purposes. It easily created a data collection plan from an existing FOM. It proved invaluable in determining the specifics of data being passed by the RTI.Each federate had some data recording features.  Like the federates, each data log was unique and based on legacy requirements.  Rather than develop another unique tool to combine them, we discarded all these logging features in favor of the single hlaResults database.  By doing this we reused the conversions that were developed to take internal parameters and standardize them.  Also we were able to use tools and queries built for prior analysis that used hlaResults databases.Federation Integration and TestingThe purpose of this step of the FEDEP is to plan the federation execution, establish all required interconnectivity between federates, and test the federation prior to execution. The first task resulted in compiling information listed in the Federation Execution Planners' Workbook (FEPW). Federate testing occurred first. The recommended iterative “test-fix-test” approach proved to be quite effective. In this activity, each federate is tested to ensure that the federate software correctly implements the federation requirements as documented in the HLA FOM. This step checks proper data transfer through the RTI independent of any conversion required to talk to any other federate. We used hlaResults to examine the data transferred. Afterward, we verified that a federate could exchange data with another federate of its own model to ensure that a basic level of interoperability existed. This testing gave us an opportunity to understand the procedures required to set up a scenario, establish necessary configuration files, and execute each chosen model in an HLA-compliant mode. Integration testing consisted of verifying that a federate could exchange data with another federate other than its own kind in pair-wise sets. This testing verified the ability of federates to interact correctly with the RTI and to exchange data with a set of non-homogenous models as described by the FOM. It was here that we discovered interconnectivity limitations and developed solutions to overcome them. The first pair tested was BFEM-NSS, because both used the same internal SOM. Experience was gained in “ghosting” ASW surface ships to BFEM and ghosting submarines and ASW helicopters to NSS. In addition, we needed to convert the value of a time stamp in BFEM from the internal units of minutes to seconds when sending time stamped information to the RTI, because that is what NSS expected. Conversely, we needed to convert the value of a time stamp when received from the RTI from seconds to minutes for use in BFEM.The most challenging pair-wise integration proved to be NSS-EADSIM. As EADSIM and NSS both participated at one time in the Pegasus FOM, we had hoped that this pair-wise integration would not entail too much effort. However, several issues arose. For instance, the converter files that allow EADSIM’s internal object and interaction mapping to the FOM objects and interaction were not capable of converting values of attributes/parameters to and from strings (the Pegasus mode of transmitting values for these items). In addition, NSS used a spherical earth coordinate system while EADSIM expected to receive oblate earth coordinates. Such nonlinear transformations were not supported in the EADSIM converter files. Another peculiar nonlinear transformation was that NSS used latitude and longitude together with next latitude and next longitude to infer platform headings, while EADSIM used heading in lieu of the next position. As a final example of the types of issues that arose, we found that the synchronization procedures of EADSIM did not exactly match those of BFEM and NSS. EADSIM is able to support zero, one or two synchronization points. However, when using two synchronization points in EADSIM, the first is never announced as achieved. While the other federates required the use of two synchronization points, we used only one synchronization point for EADSIM because in that case we were assured that EADSIM would announce achieving it. We employed federation handle sets whose membership depended upon the particular federate’s synchronization point requirements to coordinate all federates. Because of the above, the EADSIM converter file’s functionality fell short of what we needed in order to link these two models. We therefore developed a Manager Federate.The Manager Federate’s tasks included object and interaction mapping among federates, nonlinear conversion calculations, federation management, and synchronization.Object mapping was required to pass EADSIM SOM objects and attributes to the corresponding (and additional) attributes in the FOM object. To implement this functionality we used a collection of mapping objects. (See  REF _Ref44998715 \h Figure 0: Object Mapping).  SHAPE  \* MERGEFORMAT When an object was discovered, it was added to the collection. Upon receiving attribute updates, the values were stored in the map object’s structure representing the originating federate’s object, conversions were applied to construct and store values to the corresponding federate’s object, and the resulting values were passed out through the RTI to the corresponding federate. Once an object was destroyed, it was removed from the collection along with its counterpart object. This same type of mechanism was used to map interactions between federate, however, there was no need to make the interactions persist in the Map Object once they were processed because of the non-persistent nature of interactions. In addition to the mapping function, the Manager Federate paced the federation execution and handled the coordination of the federation’s synchronization points.Federation testing concluded with all federates including the Manager federate and data collection tool operating together to implement the scenario. Besides the information presented above, all objects needed to be linked across each simulation. This was accomplished by using the HLA folder in the instance archive in NSS, the System Name attribute in EADSIM, and the Class File in BFEM. By doing so, the vulnerability and performance characteristics were maintained consistently across all models. At this point, the federation was ready for execution.Federation ExecutionThe purpose of this step of the FEDEP is to execute the federation, process the output data from the federation execution, report results, and archive reusable federation products. Execution was coordinated through a combination of scripts using batch files and the use of synchronization points. Execution was monitored by software operations both for individual federates and across the full federation. Data collection focused on assembling the desired set of outputs and on collecting additional supporting data. The data collected was used to support replays of the federation execution. Essential federation data was collected via facilities in federates themselves and via specialized data collection tools (hlaResults) directly interfaced to the RTI. The processing of output data involved the application of appropriate statistical measures and other data reduction methods to transform raw data into derived results using commercial off-the-shelf (COTS) statistical analysis tools.Lessons Learned Development of the IMWS federation offered a number of lessons learned for the simulation community. Although we used specific models in this federation, many of the lessons learned can be applied to other federations in a generic sense. The first lesson learned is the reinforcement that knowledge of HLA fundamentals and the ability to run a model in standalone mode are not equivalent to the knowledge required for running models in the HLA-compliant mode.  It is a separate skill set that is acquired by using the HLA-specific features of any given model. Next, when documentation is scarce, running the models and inspecting the output files may be the only means to gather useful information about a model running in the HLA-compliant mode. In cases such as these, using a tool such as hlaResults proved invaluable. Additionally, when integrating federations using different SOMs, the use of a converter/manager federate is indispensable. For instance, these types of federates are used to synchronize the federation, translate data formats from one federate to another and pace the federation. Last, the use of execution scripts is necessary to coordinate the federation when conducting multiple-repetition runs.Future WorkOur future work will involve the addition of other models, developing a single point of scenario entry (i.e., a common database from which to extract scenario information for each model), improving 3D visualization of playback, and providing additional performance optimizations. Now that the core of the IMWS federation is complete, adding other models to this federation will take proportionally less time and effort. Which models to add is determined by the requirements of the underlying study. (See  REF _Ref44998738 \h Figure 0: Future IMWS Architecture). The single point of scenario entry will allow the analysts to enter the common components used in a scenario in one place and have a data translator parse that data into the proprietary scenario file formats. This will dramatically cut down on the time to set up a scenario run. Note that this concept is not the same as setting the details contained in the database underlying the scenario objects. Nor is it the same as ensuring that all the data for a certain aircraft is common across all models’ databases. The single point of entry is concerned with such things as the type and number of which objects are in the scenario. Although we performed visualization of scenario runs using the display maps in NSS, our future goal is to provide three-dimensional viewing using a third-party product such as Satellite Tool Kit (STK), using the playback mode of hlaResults.Summary This paper presented recommendations for developing an HLA Federation designed for use in interoperable, multi-mission warfare. Our initial prototype federation consisted of several federates composed of mission-level models preferred by analysts for respective warfare areas to provide more detail specific to mission areas of interest. With the advent of multi-mission platforms, the ability to analyze the effectiveness a given platform’s configuration as it simultaneously conducts multiple warfare missions while on station becomes imperative. We believe our federation enables cost-effective, efficient interoperable, simultaneous multi-mission warfare analysis using unmodified HLA versions of mission-level models.ReferencesApproved for public release; distribution is unlimited.[]	Naval Simulation System (NSS v3.3), Space and Naval Warfare Systems Command (SPAWARSYSCOM), PMW-153, 31 August 2002.[]	Extended Air Defense Simulation Methodology Manual, Version 10.00, May 2002.[]	High Level Architecture Federation Development and Execution Process (FEDEP) Model, Version 1.5, Defense Modeling and Simulation Office, 1999.[]	High-Level Architecture Object Model Template Specification, Version 1.3, 5 February 1998.[]	High Level Architecture (HLA) Object Model  Development Tool (OMDT) User’s Guide, Version 1.3, June 1998.Author BiographiesDR. JOSEPH G. KOVALCHIK is a Senior Professional at the Johns Hopkins University Applied Physics Laboratory. His experience spans both academia as Chairman of the Computer Science Department, U.S. Naval Academy and industry, as Director of Software Development.  While at JHU/APL, he has been involved in the development of automated reasoning systems and is currently a member of the Modeling, Simulation and Decision Support Group.  Dr. Kovalchik received a B.S. degree in Mathematics from the U.S. Naval Academy and an M.S. and Ph.D. degree in Computer Science from the Naval Postgraduate School, Monterey, CA.DR. JAMES E. COOLAHAN is the Supervisor of the Modeling, Simulation and Decision Support Group at the Johns Hopkins University Applied Physics Laboratory, where he also served as the Assistant to the Director for Modeling and Simulation from 1996 to 2001.  In his 30 years at JHU/APL, his technical activities have included modeling and simulation, test and evaluation, and the development of oceanographic data acquisition systems.   In SISO, he is currently chair of the System Acquisition and Product Development (SAPD) Forum, and has been Vice-Chair of the Test and Evaluation Forum and a member of the Research, Development and Engineering Forum Program Review Panel.  Dr. Coolahan holds B.S. and M.S. degrees in aerospace engineering from the University of Notre Dame and the Catholic University of America, respectively, and M.S. and Ph.D. degrees in computer science from the Johns Hopkins University and the University of Maryland, respectively.RANDY SAUNDERS is a Senior Staff Engineer at the Johns Hopkins University Applied Physics Laboratory.  He has over 20 years of experience in the design, implementation, and integration of high-fidelity simulations for military and business customers.  He received his M.S. degrees in Engineering from Harvey Mudd College in 1980 and in Computer Science from the University of Southern California in 1985.  Mr. Saunders has been involved in distributed simulation standardization since the first DIS Workshop, both DIS and HLA standards committees, and as the initial Technical Area Director for the Real-Time Platform Reference Federation Object Model (RPR FOM).  He joined APL in 2001.Figure  SEQ Figure \* ARABIC 0: Prototypical ScenarioFigure  SEQ Figure \* ARABIC 0: Object MappingFigure  SEQ Figure \* ARABIC 0: IMWS ArchitectureFigure  SEQ Figure \* ARABIC 0: FOM InteractionsFigure  SEQ Figure \* ARABIC 0: FOM ObjectsFigure  SEQ Figure \* ARABIC 0: Six-Step FEDEPFigure  SEQ Figure \* ARABIC 0: Future IMWS Architecture