The Application of Base Object Models (BOMs) for enabling Multi-Resolution ModelingTram ChasePaul Gustavson SimVentions11903 Bowman Drive, Suite 102Fredericksburg, VA 22408(540) 372-7727 HYPERLINK "mailto:tchase@simventions.com" tchase@simventions.com HYPERLINK "mailto:pgustavson@simventions.com" pgustavson@simventions.comLatika Eifert US Army RDECOM12423 Research ParkwayOrlando, FL 32826(407) 384-5338    HYPERLINK "mailto:Latika.Eifert@us.army.mil" Latika.Eifert@us.army.milKeywords:Multi-resolution, Simulation, Base Object Models (BOMs)ABSTRACT: A collection of Encapsulated (ECAP) BOMs can be used to define the behavior needed to carry out the pattern of activities defined by an Interface (IF) BOM or Mega-BOM. Each ECAP BOM includes behavioral information for modeling a specific class identified by the IF BOM. It also may contain additional meta-data to better support composability such as validation, level-of-resolution, and visual rendering.    The independence allows multiple ECAP BOMs of varying resolution to support a single pattern (Interface BOM). Thus federates can choose from an assortment of ECAP BOM implementations that best represent their needs and system capabilities, even though the interface assembly (defined by a Mega-BOM) that is applied and used by all players may be equivalent. The benefit of being able to swap out models of various resolutions dynamically during an exercise allows federate CPU load reduction and federation optimization.This paper explores the application of ECAP BOMs for enabling Multi-resolution Modeling. We also examine the benefits of applying Multi-resolution Models (MRMs) in regards to Load Balancing and managing simulation exercises.1. IntroductionThe complexity of simulations used within the Department of Defense (DoD), other government agencies and the commercial world has grown over the last couple of decades.  As computational devices, networks environments, and graphics engines have increased in speed and resolution, simulations have become more capable and realistic in regards to training, planning, visual rendering, engineering analysis, and prototyping.  Increased synthetic data representation, better modeling techniques and advances in modeling algorithms have all contributed to the increased accuracy and validity of simulations.  However, the increased demand for supporting large-scale joint exercises has not necessarily benefited from the technological advances.  Typically federates operate with models at the highest degrees of resolution available with the intent of taking advantage of the computational hardware that is available to it.  Unfortunately, large-scale exercises can easily overload networks with a myriad of entities that are modeled and/or reflected by the operating federates.  Despite the diversity in potential simulation models, federates within a federation, whether large or small, have not learned to scale models in a common way.  This is largely due to a lack of standards that can support a common interface for multi-resolution models (MRMs). The ability to optimize performance can often be centered upon the conservation of energy.  This has been found to be true in many industries.  For example, many computers today use Intel’s SpeedStep® technology to provide prolonged battery life for laptop computers, and yet if these computers are plugged into an A.C. power source, the processing performance is stepped up, without concern for battery impact.  Such technology allows laptops to be used longer, and the people who use them to be more productive.  The automobile industry has applied the same principle to the design of modern engines.  Honda, for example, developed the Variable Valve - Timing and Lift Electronic Control (VTEC™) engine, which allows an engine to run at a gas efficient level, until the need for more performance, which is triggered based on the driver’s heavy press of the accelerator.  This high performance is accomplished for these engines by opening up the valves to allow for greater oxygen intake, which increases the engines horsepower and torque capability. In the same way that SpeedStep® and VTEC™ provide variable performance for computers and automobiles, the Base Object Models (BOMs) are seen as enabling technology for providing variable performance for federates; specifically by supporting the exchange of MRMs for common interfaces allowing resolution to be dialed up or down depending upon the need.  2. BackgroundSimVentions began work on the A03-207 "Multi-Resolution Models Representation" Phase I SBIR on December 10, 2003.   The need within the community is to establish a collaborative framework for allowing multi-resolution models (MRMs) to interoperate in a distributed simulation. SimVentions effort on the SBIR has resulted in the Base Object Model (BOM) technology being chosen as a means for defining and enabling MRMs to be exchanged dynamically to suit the requirements of a simulation. This prototype methodology is designed to achieve the following objectives:Separate the interface and implementation of the model which enables dynamic exchange and on-the-fly resolution scalingProvide rich meta-data within BOMs for added reuse, management, storage, and manipulation of represented modelsEnsure uniformity, extensibility, scalability, flexibility, composability, adaptability, and security within the multi-resolution models.BOMs have been identified as an enabling technology for the creation and use of MRMs. [1] A BOM can be thought of as a reusable package of information representing a pattern of simulation interplay.   This pattern reflects a set of activities used to accomplish a common objective, capability or purpose.  By capturing patterns and defining components that model the needed capabilities to support these patterns, it is possible to provide the “building block” capability needed within the Modeling and Simulation community.2.1 TerminologyTermDefinitionAbstractionAn idea that concentrates on the essential properties of a common pattern of interplay rather than on concrete realizations or actual cases.AggregationThe coupling of multiple entities/models into a single inclusive group.Behavior ComponentsModel the needed behavior required of a conceptual entity to support patterns (Federate level).BOMA reusable package of information representing or supporting a pattern of interplayComponentA constituent part; an ingredient. “…designed in such a way to easily operate with other components…” – webopediaComposability“The capability to select and assemble components in various combinations into complete, validated simulation environments to satisfy specific user requirements across a variety of application domains, levels of resolution, and time scales.” [3]ECAP BOMCaptures behavior of conceptual entity participating in one or more patternsFidelityThe accuracy of the representation when compared to the real world.IF BOMA reusable representation of a pattern of interplay characterized by one or more events.Load BalancingDelegation of work responsibility among a federation to prevent overtaxing an individual federate and/or network and to ensure proper execution.Mega-BOMA composition of BOMs used to represent a higher order pattern.Pattern ComponentsRepresenting the relationship of activities among conceptual entities (FOM level). Pattern of InterplayReflects a set of activities related to one or more conceptual entities used for accomplishing a common objective, capability, or purpose.PrecisionThe accuracy of attributes and parameters in the model during input, processing, and output.A measure of how meticulously or rigorously computational process are described or performed by a model or simulation.ResolutionSeparation or reduction of something into it’s constituents parts; granularity;The degree of detail used to represent aspects of the real word or a specified standard or a referent by a model or simulation;Simulation SpaceAny part of a simulation environment, which may be represented by one or more conceptual entitles modeled and reflected by a federate, federation, or as an aggregated force within a federation execution.3. Base Object Models (BOMs) Design ArchitectureThe diagram illustrated in Figure 1 depicts four basic areas of the simulation problem space.  From the bottom up, we have the Communication Layer which includes the runtime infrastructure (RTI) or other communication mechanism used for the distribution of data messages among federates at play. Next, we have the Interface layer, which is typically represented by a High Level Architecture (HLA) FOM for identifying what type of data will be conveyed through the communication layer.   It is at the Interface layer that the Interface (IF) BOMs and Mega-BOMs can be used to represent the capabilities of the FOM in a component based manner.   SHAPE  \* MERGEFORMAT Figure  SEQ Figure \* ARABIC 1At the top, we have the Federation Layer, which includes the collection of federates supporting the Interface Layer (the FOM). Just below the Federation Layer, we have the Encapsulation Layer, which reflects the behavioral code necessary for a federate to carry out and model the identified conceptual entities of the federation as typically depicted in the FOM using Object Model Template (OMT) constructs.  At this layer, Encapsulated (ECAP) BOMs can be used to provide the necessary behavior needed for one or more federates.  At the right of the figure, a repository can be used to identify and select appropriate object models, including IF BOMs and ECAP BOMs, for fulfilling the goals and objectives of a federation.These two architectural layers described for BOMs can be applied to support composability. The compositions themselves, however, are reflected through the Mega-BOM, which, again, identifies the overarching interface.  With each of these layers we have attempted to convey the effects that the BOM standard has on the Modeling and Simulation (M&S) HLA community.  The following paragraphs provide greater detail on the effects of the Encapsulation Layer, which can be used to support multi-resolution modeling.Closer to the actual federate, the ECAP BOM can be used to provide the necessary model behavior for supporting one or more conceptual entities identified within the Interface BOM.   It should be noted that federates and simulation spaces derived from IF BOMs are not required to use ECAP BOMs.  If the capability to be modeled is already an intrinsic element of the federate’s behavior, then the usage of an ECAP BOM may not make sense.  However, if a federate lacks a specific behavior and that behavior model can be found within an ECAP BOM, then this becomes an enabler for a more complete simulation (see Figure 2).  Figure  SEQ Figure \* ARABIC 2The proposed standard for ECAP BOMs is centered upon Platform Independent Models (PIMs), which are language and platform independent, but also supports and encourages the generation and usage of Platform Specific Model (PSM) implementations, which are optimized for platform or language.  Examples of PSMs might include an ECAP BOM implementation (EBI) represented as a Windows DLL, Unix DSO, .NET assembly, or a Java Bean. Such EBIs could essentially be fetched and loaded dynamically during an exercise by a federate.  EBIs are intended to be used by a federate in helping to model an entity needed to carry out the common patterns of interplay associated for a federation, federate or aggregation.4. Load balancing via MRMsAs simulations become more complex and contain more and more models, the need for load balancing is inherent. 4.1 Local load balancingRepresentation of multiple entities on a single platform could quickly result in saturation of the computers resources. One way to facilitate proper execution is to alter the resolution at which one or more conceptual entities are modeled. If available, a lower resolution model could be used in the place of a high resolution model when the high resolution model is not of interest to the “significant” happenings in the simulation. Conversely, when extra computer resources are available and a higher resolution model is available, it only makes sense to take advantage of the “better” model to increase the simulation’s realism.4.2 Distributed load balancingThe same idea applies to a distributed simulation. A high resolution model may be flooding the network with data that is unnecessary for models in the federation. Some nodes may require only a subset of the available data. If a lower resolution model is applied globally (for the federation), it could be used to satisfy the simulation requirements while not placing a burden on the network.5. Applying BOMs to MRMs A key to being able to switch between the varying levels of resolution is the compliance to the same interface. This is where the BOM can be used. Defining an IF BOM that satisfies the simulation requirements could allow for various ECAP BOMs that comply to the IF BOM to be used.Incidentally, this application of BOMs is representative of a Bridge Pattern, which is used for representing and supporting system architectures.   The Bridge Pattern is designed to separate a class’s interface from its implementation allowing you to vary or replace the implementation without changing the client code.  It is used to “decouple an abstraction from its implementation so that the two can vary independently.” [4] Essentially, like the bridge pattern, the BOM architecture is about separating the interface from the implementation.  What it is you are trying to represent is independent from how it is to be represented.  Representation of multi-resolution models with BOMs facilitates an architecture for interoperability and exchangeability of models as needed by a simulation. Ultimately BOMs bring about the following opportunities in enabling MRM environments:The ability for repositories to store and provide models at various resolutions with specific attribution and specified formats; The ability for simulations to dynamically load and exchange models of different resolutions before or during an execution;The ability to provide methods to link real-time data, live and constructive entities and simulations together through a collaborative capability/mechanism without losing any of the necessary attributes to perform interoperable missions.Obviously, the implementation will determine how effectively the models can be dynamically exchanged but the BOM methodology provides the model description and meta-data in a defined format to enable automation of the process.6. Protoype The “pattern of interplay”, which SimVentions chose to model, was that of a simple race. The race consisted of a race manager, a competitor, a track, and the environment. The roles of each participant were defined and can be laid out in a UML sequence diagram as shown in Figure 3. Additionally the conceptual entities being modeled can be represented as classes.Figure  SEQ Figure \* ARABIC 3After the roles and sequence of the race were defined, an IF BOM was constructed which contained the classes, attributes, and events for the race sequence. The IF BOM format used is defined in the latest “BOM Template Specification Volume I – Interface BOM” which is currently at revision 0.8. A portion of the parsed XML representing the race BOM is shown in Figure 4. Figure  SEQ Figure \* ARABIC 4To support multi-resolution modeling, each participant could have multiple models to support the appropriate behavior and these models could be of varying resolution. For the Phase I demonstration, the competitor had three levels of resolution: low, medium, and high. The differences between the low, medium, and high are relatively simple. The low-res model only took track surface into account when updating its position. The medium-res model used track surface and precipitation when updating location and the high-res model updated location based on track surface, precipitation, wind speed, and wind direction. The three models also had increasingly higher update rates from low (1 Hz) to high (10 Hz). The track model consisted of two different models, one being dirt and one asphalt. The environment and race manager were simple models without multi-resolution. As long as the various resolution models complied with the IF BOM, they could be swapped in and out of the simulation.After the IF BOM was defined, the models that encapsulate the behavior carried out by each conceptual entity can be designed and developed. This is where the ECAP BOM becomes involved. As stated earlier, the ECAP BOM is the manifestation of the behavior alluded to in the IF BOM. For the purposes of the demonstration, the ECAP BOMs were .NET Assemblies developed under the Microsoft Visual Studio environment using C#.  A generic federate was created which would allow IF BOMs to be loaded and viewed. The federate would extract the classes described in the BOM and allow the user to create an “empty” (no defined behavior) model with any or all of the classes. The assemblies could now be dynamically loaded and unloaded into the generic federate and attached to the “empty” models, this would define their behavior. This approach allowed for user controlled stepping up or stepping down of model resolution as depicted in Figure 5. Figure 5Future work would allow for automatic stepping when the need is detected based on workload. The four participants in the race sequence could be running in a single federate or distributed to separate federates running on one or individual machines. Communications were handled with simple XML message packets over a local area network. The message packets consisted of object attribute updates and events. The federate displayed limited performance measurement statistics which allowed for viewing the change in workload based on the varying model resolutions. A screen capture of the demo federate is shown in Figure 6.Figure 6From the developer’s view, the steps from concept to implementation included:Identifying Patterns based on understanding and analysis of the requirements.Representing the Patterns as IF BOMsIdentifying the necessary Classes to support IF BOMs, which is captured in the Model Definition elementIf candidate federates or ECAP BOMs do not exist that support the identified classes, codification of  the classes as component models (or ECAP BOMs) is preferredAssembling into Packages for deploymentTherefore, in five steps a model can be built that will enable multi-resolution models to be handled without workarounds for the differing resolutions.7. ConclusionAs a result of these efforts, the BOM concept has shown enormous potential for solving many of the problems introduced within large scale joint simulation exercises which require multi-resolution modeling. During the Phase I effort, both IF and ECAP BOMs have been shown to contribute to the dynamic composability, interoperability, flexibility, and compatibility of federates and/or federations when varying levels of resolution are introduced.  BOMs provide an effective mechanism for separating the interface from the implementation.   The application for of this Bridge Approach can be warranted for the following conditions.“When you want to avoid a permanent binding between an abstraction and its implementation (for instance when the implementation must be selected/switched at run-time).”“When changes in the implementation of an abstraction should have no impact on [federates] (their code does not have to be recompiled)”“When you want to hide implementation details…”“When you want to improve extensibility of the abstraction and implementer hierarchies independently.”[4]8. References[1] IEEE 1516.3, IEEE Recommended Practice for High Level Architecture (HLA) Federation Development and Execution Process (FEDEP), March 2003.[2] SISO, BOM Template Specification – Volume I – Interface BOM, Version 0.8 (draft), February 2004[3] M. D. Petty and E. W. Weisel, “A Composability Lexicon”, Proceedings of the Spring 2003 Simulation Interoperability Workshop, Orlando FL, March 30-April 4 2003, 03S-SIW-023.[4] Gamma, E., Helm, R., Johson, R., Vlissides, J., Design Patterns Elements of Reusable Object-Oriented Software, Addison-Wesley, 1995.Author BiographiesTRAM CHASE is a software engineer at SimVentions, Inc. (http://www.simventions.com) and is focused on the development and integration of technology for creating innovative and engaging experiences and solutions. Tram is a graduate of Virginia Tech, with a B.S. in Mathematics (1994), and has supported a wide variety of modeling and simulation and system engineering efforts within the DoD. Tram lives in Virginia with his wife.LATIKA EIFERT is a software engineer at RDECOM. She is focused on the development and integration of technology for synthetic natural environments in the Modeling and Simulation arena. Latika is a graduate of Louisiana State University, with a B.S. in Electrical Engineering, and an M.S. in Computer Engineering.  Latika worked at Lockheed Martin and SAIC supporting a wide variety of hardware and software testing.  She has also supported various efforts in modeling and simulation and system engineering efforts within the DoD.PAUL GUSTAVSON is a co-founder and Chief Technology Officer of SimVentions, Inc. (http://www.simventions.com) and is focused on the development and integration of technology for creating innovative and engaging experiences and solutions. Paul is a graduate of Old Dominion University, with a B.S. in Computer Engineering (1989), and has supported a wide variety of modeling and simulation, system engineering, web technology and mobile computing efforts within the DoD and software development communities. He is a principal author of “C++ Builder 6 Developer’s Guide”; and contributor to other books and articles; and, has presented at numerous conferences. He is also a long-time advocate and pioneer of the Base Object Model (BOM) concept for enabling simulation composability, interoperability and reuse. Paul lives in Virginia with his wife and two boys.2004 Fall Simulation Interoperability Workshop