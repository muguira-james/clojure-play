Composable Behaviors in an Entity Based Simulation Steven D. PetersNils D. LaVineLee NapravnikMicro Analysis & Design, Inc.4949 Pearl East Circle, Suite 300Boulder, CO  80301-2477303-442-6947 HYPERLINK "mailto:speters@maad.com" speters@maad.com,  HYPERLINK "mailto:nlavine@maad.com" nlavine@maad.com,  HYPERLINK "mailto:lnapravnik@maad.com" lnapravnik@maad.comDenise M. Lyons, Ph D.Naval Air Warfare Center Tactical Systems DivisionNAWCTSD Code 4962: Training Technology12350 Research ParkwayOrlando, FL  32826-3224407-380-4819 HYPERLINK "mailto:LyonsDM@navair.navy.mil" LyonsDM@navair.navy.milKeywords:composable behaviors, client-server architecture, JSAF, human performance models. ABSTRACT: For constructive simulations to be useful for acquisition and training, the ability to rapidly develop and modify entity behaviors in a cost effective manner has become a paramount concern.  The capability to easily modify entity behaviors could be used to test technological capabilities, tactics, techniques or procedures, or force structures in which an entity operates.  A capability for addressing this need is being developed by NAWCTSD in their Composable Behaviors in JSAF program by leveraging work conducted by the Army Research Laboratory and the Air Force Research Laboratory.  For this program, the Joint Semi-Automated Forces (JointSAF/JSAF) architecture will be enhanced to provide more robust and realistic entity behavior representation by accessing models external to JSAF.  A dramatic increase in entity representation can occur without affecting the computational performance or adding to the complexity of JSAF.  In this enhanced architecture, a client-server approach provides the mechanism to connect Human Performance Models (HPM) running in an external server to JSAF entities via the High Level Architecture (HLA).  This approach will provide: rapid development and modification of entity behaviors, a much higher level of behavioral representation without degrading execution performance, and an infrastructure that will support new behaviors without modification or recompilation of JSAF.IntroductionThis paper provides details of a program titled “Composable Behaviors in JSAF” (hereafter referred to as CB in JSAF) sponsored by the Naval Air Warfare Center Training Systems Division (NAWCTSD).  In this paper we provide an overview of the CB in JSAF program and what composable behaviors provides, a discussion of current issues with Computer Generated Forces (CGF) software architectures concerning entity behavioral representation, and implementation of composable behaviors within JSAF.It will be seen that the lack of an adequate means to modify a behavior restricts semi-automated force (SAF) usefulness and validity.  The client-server approach presented here provides an alternative that allows for behavior models that can be made to be high fidelity where needed and easy to modify without an extensive coding effort.This program has focused not just on providing much needed functionality to JSAF entities, but also on developing a robust and responsive software architecture for incorporating human behaviors.  We have built a promising capability for inter-model communication via the High Level Architecture (HLA) that will allow us to leverage various behavioral representation efforts and incorporate them into JSAF as well as other CGFs.We believe that the composable behavior architecture presented here can provide incredible potential benefit to the human factors community.  It will allow for an increased focus on efforts and technologies used to represent specific behaviors and to integrate these capabilities within CGFs.  Most importantly, it will allow users to embed better human factors models quickly, efficiently, and without substantial restructuring of existing simulations (i.e., recoding SAFs).   Overview of the CB in JSAF programThe CB in JSAF effort is aimed at providing an ability to easily and rapidly compose human and system behaviors for JSAF entities.  The approach taken here is to use a client-server architecture to allow JSAF to interact with high fidelity behavior models maintained and executed external to JSAF.  The technologies developed here can be generalized to other entity-based simulation environments.As part of the CB in JSAF effort, a Composable Behavior Server (CBS) was developed to provide a means to improve and alter CGF behavior models.  Using a subscription process, the CBS can provide high fidelity representation of behavioral performance parameters to JSAF entities.  Attributes that portray human tasks involving decisions, time, accuracy, and error rates are determined through models residing in the CBS and provided to JSAF entities on a real time basis, using HLA as an enabling technology.  Entity behaviors can be composed and modified externally to JSAF avoiding extensive code modifications typically required.  In the CBS, a Micro Saint task network model of the processes and decisions exhibit the behaviors.  (See Figure 1.1.1)  (Micro Saint is a discrete event simulation package ideally suited for modeling human performance.) The result of using a CBS with behavior models external to JSAF is the ability to more accurately represent human behaviors within entity-based simulations without affecting performance and the means to easily and quickly modify the behavior models.  In using the composable behavior methodology users will be allowed to rapidly develop their own performance models.  In the CBS, these models will be simulated using Micro Saint (although other similar simulation package would work as well.)Figure 1.1.1  JSAF being served by CBSThrough this effort we also demonstrate how CGFs can be enhanced quickly and efficiently within an existing simulation environment.  As a practical matter, typically, significant modification to existing CGF software by an experienced programmer is required to provide a behavioral enhancement.  The ability to compose behaviors and have improved performance using a server technology will provide the modeling community a much more practical method to develop and use improved human performance representation.Issues with behavior representation by CGFsIt is universally agreed upon that behavior representation within CGFs in an area in need of improvement.  Modification of behaviors within CGFs has been and continues to be a difficult and time consuming problem.  Multiple factors contribute to this including the large size of the code base, the modular approach used for the code, and the learning curve needed to work within the SAF code.  (In Section 2.2 a detailed description of limitations and issues surrounding behavior representation in CGFs is given.)For any entity action, or behavior, that exists within JSAF, this composable behavior methodology could be used to easily provide alternative entity behavior models.  This composable behavior methodology provides alternative behaviors only to entity actions that are already available.   (The addition of an entirely new entity action would still require extensive software modifications within JSAF itself.)Defining composable behaviorsIn order to provide a better understanding of the CB in JSAF program, we will define what we mean by composable behaviors and provide some insight into the benefits of making behaviors easily composable.The term “composable behaviors” is a concept that has come to mean many things to users in the CGF community.  Many people consider it to be a Holy Grail for CGF entity behavior representation and as a result, behavior composability has taken on a significant focus.  For this effort, we define composable behaviors as the ability to take an existing CGF entity behavior and compose an alternate version capable of replacing it, without loss of fidelity.  As an example, within many CGF systems, tanks have the behavior of engaging a target.  This behavior is modeled within the CGF software as a time distribution that correlates to the behavior of tank crewmen firing the tank’s weapon systems.  In the CB in JSAF program, the embedded time distribution model is replaced with a human performance model executed externally to the CGF system in the CBS.  The human performance models are developed as task network based models that are composed of the behaviors that crew operators would perform and are reflected within the CGF system during runtime. Using the composable nature of the program, if we are further interested in looking at a tank that has an automatic loading, acquiring, and aiming capability, we could rapidly change the human performance characteristics in the task network model residing in the CBS.  The changes in human and system performance would be reflected in the JSAF entity during CGF runtime.  Figures 1.3.1 and 1.3.2 show what the engage target task network models might look like for the two tank systems.  Notice that the two models differ only in that the Auto Engage model in Figure 1.3.2 has exchanged the selection and loading of ammunition with an autoloader.This, as well as any other modifications to the behavior of engaging a target, could be done solely in the CBS without any changes in the CGF.  This modification of a model external to the SAF leads to a much easier, quicker, and less expensive method of behavior modification requiring a lower level of technical expertise (i.e., programming skills).Figure 1.3.1  Tank crew task model to engage target.Figure 1.3.2  Tank crew task model to engage target with autoloader.The composable behavior capability eliminates the need to rewrite software code within the CGF system.  Client-server software is added within JSAF allowing entities to subscribe to a server to obtain behavioral parameters.  This client-server architecture is the infrastructure that allows changes to behaviors without requiring software modifications with the CGF system itself.Implementation within JSAFUsing a client-server architecture provides the needed flexibility and processing power to allow further development of human behavior representation within SAFs.  It would allow development expertise to focus and be contained to areas such as CGF behaviors.  The client-server architecture will allow this composable behavior methodology to provide varied behaviors without impacting other areas within the CGF.As a user determines specific entities and behaviors that need higher fidelity models, a CBS will provide an avenue to quickly and easily develop the desired models without the need to re-program and re-validate the CGF code base.  Instead, flexible, intuitive models will be available to the user through external modeling tools (for example, Micro Saint) residing in the CBS.Representation of Behaviors within CGF SystemsWe will now look at the current state of behavior representation within JSAF in particular and CGF systems in general.  It is well understood within the CGF community that modeling of behavioral representation is inadequate.  In study after study of CGFs, the lack of credible behavioral representation has consistently been identified as a severe limiting feature in the their usefulness.  Design requirements of many CGF systems typically have not been focused on in depth modeling of human behaviors.  With the utility of these CGF simulations having gone well beyond their original intention, these effects have become key limitations in their usefulness.One issue addressed here is that CGF entities tend to behave in a rote, non-human, and predictable manner.  This issue alone can severely discredit results thereby defeating the basic intention of the CGF system.  The current effort to model behavioral aspects of CGF’s has become inadequate and is significantly reducing simulation effectiveness.  This includes how behavior influences actions such as battlefield stressors, the actual performance of humans within a system, or how decisions made by humans are modeled for CGF entities.  The inadequate representation of realistic behaviors has implications in many if not all of CGFs intended purposes (e.g., training, concept evaluation, and test and evaluation.)For example, those in the training domain report that training against CGF entities with unrealistic behaviors can actually provide a negative training effect.  This occurs when humans train to beat CGF entities performing behaviors that are not representative of how real adversaries would operate on the battlefield.CGFs used to assist in Simulation Based Acquisition (SBA) may not have the proper level of fidelity, or even contain the set of actions that actual humans would perform.  For example, a weapon system that has an automatic target detection system with which an actual human operator can interact may have no model or representation within the CGF.  By not providing the means for this entity to take these interactions into account, the CGF system will not provide accurate, and thus useful, feedback on which to base SBA decisions.Representation of behaviors within JSAFWhile it is acknowledged that behavioral representation within CGFs is an issue, the traditional focus has stayed away from evaluating the actual software architectures.  Are there aspects of the software architecture that could hinder the ability to adequately implement behaviors within a CGF system?  There are.In JSAF, the intent is to implement behavioral representation within modular software libraries.  This architecture focuses on implementing algorithms associated with reacting to a stimulus or providing a proper situational response.  These situational response libraries in turn affect entity parameters that are then acted upon by the entity. Traditionally, all additional functionality and modification to JSAF has been made directly into the software code base in these modular libraries.  This method of development has resulted in JSAF version 5.7B containing over 2.3 million lines of code in 842 software libraries.  Delving into this code base can be intimidating, time consuming, and error prone.Issues with CGF Behavior RepresentationThere are a number of areas that contribute, from a software architecture standpoint, to the difficulty of incorporating improved behavioral representation [1].  For example, it can be very difficult to find and isolate the desired behavior.  When searching amongst millions of lines of code it is difficult to determine the behaviors that exist and where exactly they are located.  Once identified and located, actually modifying the behavior can also take a significant amount of time and effort to implement and then test.  Finally, behaviors can be improved but, due to the large size of the code base and nature of current CGF software architecture, it can prove too costly to implement them.This traditional manner in which new or improved entity behaviors are incorporated has contributed to the problem of inadequate behavior representation.  This method of implementing improvements by incorporating additional software directly into the code base has resulted in a continually growing and thus very large and cumbersome piece of software that only grows in complexity and is more and more difficult to maintain.  Regardless of these drawbacks, the CGF community continues to need and desire more behavioral features with improved fidelity.  Software libraries are added to incorporate new behaviors and existing libraries are expanded to incorporate new functionality.  While this method can be used to add more features, the software quickly becomes a morass of ever changing and increasing code and eventually reaches a point where the cost to modify or maintain it becomes prohibitive.  This process has continually occurred within CGF systems and, until now, has been the primary method used to improve or implement new features.This continually expanding code base can also adversely affect runtime performance of the CGF system.  As the software expands and is required to execute more and more functionality, the performance level of simulated entities is reduced either in their ability to portray the correct behavior according to the time paradigm (e.g. real-time) or, the ability for a specific instance of a CGF system to replicate entities is reduced.  A reduction in performance occurs contrary to the fundamental purpose of the CGF system: to provide a robust population of entities on the synthetic battlefield to help test, analyze and train.  These are undesirable and often unacceptable consequences of an ever-increasing CGF software code base.We will now present CGF architectural issues pertaining to behavioral representation and provide, by example, their shortcomings.  The following are major software architecture issues related to behavioral representation within CGF systems:It is difficult and time consuming to determine if a specific behavior exists and the level of fidelity at which it is modeled. Entity behaviors are often affected (i.e., controlled) by multiple software libraries.CGF software is continually getting more and more complex, making it difficult to maintain, validate, improve, modify and execute.Due to the continually growing code base, runtime performance continues to degrade.There is limited ability to have variable fidelity for behavioral representation within CGF systems.  The onus for validation and verification of all behaviors falls upon the CGF contractor systems integrator and the sponsoring organization.  To illustrate the architectural issues mentioned above, an example of implementing an improved behavior is used.  This example relates to a project in which Micro Analysis & Design (MA&D) improved the behavior of Dismounted Infantry (DI) entities within Marine Corps SAF (MCSAF), a ModSAF derivative [2].  While MCSAF is a DIS based CGF that uses PDUs and JSAF uses HLA and data interactions, the architectural issues discussed here are the same for both.  The example used here is from an effort to add improved behavioral representation for suppression of dismounted infantry entities being subjected to indirect fire.  We are using the example of MCSAF because it does not requires extensive domain knowledge concerning the impacts of the architecture on implementing improved behavioral representation within a CGF system.  We found these exact same issues with JSAF as we encountered with MCSAF.As we undertook the implementation of improving the MCSAF fire suppression behaviors, we needed to determine DI behaviors that existed and select those that related to how dismounted infantry respond to indirect fire.  Specifically, the intent was to improve the DI’s reaction to indirect fire and have them be suppressed by incoming artillery rounds landing nearby.  The existing MCSAF behavior had the DI recognize the indirect fire, however the reactive behavior was basically binary in nature in that the DIs either continued on with their mission as if nothing had happened, or they paused.  Their performance was not dependent upon the level of incoming fire, how close the artillery rounds were landing, or how recently the suppression had occurred, factors that have a significant impact upon the suppression level of DI personnel.  Examples of behaviors within CGF systems are “Actions on Contact”, “React to Smoke”, and “Occupy Battle Position.”  In these cases, the term “behavior” is actually a misnomer; a more descriptive term might be “situational response.”  These situational responses consist of, or are composed of, a group of what can be termed as “elemental behaviors.”  An elemental behavior can be thought of as a low-level action or change in entity state that may result from a stimulus.  Examples of low-level actions or entity state changes are modifications to posture, direction or rate of movement, or weapon status.  Using “Actions on Contact” as an example, as an entity is conducting a road march it may change its direction of travel and rate of movement to attack the entity with which it has made contact.  Thus, the situational response of “Actions on Contact” is actually made up of the elemental behaviors of direction of movement and movement rate.  We will now examine each of the issues mentioned above and describe its impact on the ability to modify a behavior.  We refer to the implementation of fire suppression and while the example does deal with an older CGF application (MCSAF), these issues are still prevalent.It is difficult and time consuming to determine if a specific behavior exists and the level of fidelity it is modeled.As we inspected the MCSAF source code it became evident that there was no centralized location that described what behaviors were available and where throughout the code the behaviors could be found.  Instead, we first needed to look at the available libraries within the CGF system and discern from abbreviated library names what situational response behaviors were available.  Due to lack of documentation, many libraries selected as potential sources of appropriate situational responses required reverse engineering to determine if the library was appropriate for incorporating our changes in behavioral response.  For implementing our improved indirect fire suppression behavior, after significant searching, libureactif was the library that we felt best implemented the sought after situational response.  Within libureactif, we augmented the baseline software to include our improved behavioral representation, and then ran the new software to see if our behaviors provided the desired representation.  This effort was time consuming and required significant knowledge of the MCSAF software.While the selection of this library (libureactif) seemed to be related to the behaviors we were interested in, there was no way to insure that other libraries should also be investigated.  Thus, even if you think you have found a pertinent behavior library, there could be others that affect that behavior.Entity behaviors are often affected (i.e., controlled) by multiple software libraries.Due to the modular library architecture of the CGF software, it is a common (and accepted) practice to affect a behavior attribute in one library for one reason and affect the same behavior attribute in another library for an entirely different reason.  When we modified the libureactif library, we modified what DI entities would do once they encountered suppressive indirect fires.  Our modifications to this library changed parameters and observable behaviors of the DI entity, such as entity posture, direction and rate of movement.  Once modifications were made, we ran the software hoping to see the improved behavioral response.  However, we encountered problems with the implementation of our improved behavioral representation.  Sometimes either our behaviors were observable, were observable for only a short period, or were not observable at all.  We soon discovered that other libraries could also change these attributes.  Thus, the enhanced behavior of reacting to indirect suppressive fire by changing posture, direction of travel, and rate of movement was sometimes overridden by other software libraries changing the same entity “elemental behavior” parameters for entirely different, and most probably very valid, reasons.The result was, whichever library was the last to be executed became the deciding factor in the final behavioral response.  In reality, a soldier who encounters multiple situations, often simultaneously, that affect such things as his posture or direction or rate of movement would make a decision based upon all of the input, not just the most recent one.  Within the simulation, our focus had been on the portion of code that dealt with suppressive fire and not the other libraries that happened to also affect the same elemental behaviors of the dismount infantry entity. CGF software is continually getting more and more complex making it more difficult to maintain, validate, improve, modify and execute.Using the example of adding improved indirect suppressive fire behaviors to MCSAF, we started with the baseline software and then added new software libraries and modified existing ones.  This is the traditional manner in which new functionality for CGF behaviors is added - by embedding more code within the CGF system.  While this allows for all of the software code to exist in one location, it also creates a monolithic, complex, and difficult to maintain software system.  In the process of modifying existing software libraries to facilitate our desired behavior representation, a more complex set of software was created.In our efforts, we changed CGF software libraries that affected a DI entity’s posture, direction of movement, and rate of movement.  While this was relatively straightforward within the modified libraries, the level of software complexity went up dramatically when we wanted to add another situational response library affecting these same attributes.  To add a new situational response we not only needed to add a software library to represent it, but also modify the suppressive fire behavior libraries and each and every other library that altered it.  However, in each of the modified libraries, we needed to take into account the original situational response intent of the library (so that any software changes did not break or invalidate the original capabilities), the added suppressive fires situational response, and now the new behavior.  Each of these responses needed to be moderated in every library that could affect the elemental behavior of interest.  It quickly becomes apparent that this method is prone to error, continues to grow the size and complexity of the CGF system, and has a large probability of introducing bugs into the CGF software.Due to the continually growing software code base, runtime performance continues to be reduced.A primary factor to consider with the addition of any new feature is how it affects the CGF performance during runtime.  The purpose of the CGF system is to realistically portray entities within a synthetic environment in real time.  These simulated entities can be used for training, test & evaluation, or concept exploration.  The functional purpose of a CGF system is to eliminate, or at least greatly reduce, the need to run more expensive human-in-the-loop (HITL) systems, and to portray synthetic entities with the minimal amount of computer resources.  Thus, degrading a CGF system’s performance reduces its value.  When a CGF cannot properly represent entities within real time or more computer resources are required to simulate the same number of entities, there is an increase in the overall cost and complexity to run an exercise.As long as we continue to add functionality directly into a CGF system, we are by nature reducing the performance of the system.  In addition, because we are enhancing behaviors by executing a typically more complex algorithm, the computational requirements for determining the behavior are greater.  Some behavior calculations can be so complex that, while they may be able to run in real time on their own, when embedded within a CGF system, system performance can be reduce to an unacceptable level.  By embedding new functionality within the CGF system, performance and throughput are being reduced.There is no ability to have variable fidelity for behavioral representation within CGF systems.While variable entity behavioral fidelity may not at first seem significant, it has potential to become an important issue once we decide to participate in a distributed simulation exercise.  Within current CGF implementations, every entity is given the same level of behavioral fidelity thus limiting the type of exercise that we can run.  Having the ability to select the desired level of entity behavioral fidelity would provide a greatly enhanced capability to a manager of a distributed exercise.  When we include increasingly complex behavioral representation there may not be a need to have every entity within the exercise portray an advanced, and computationally expensive, behavior.  We may only be interested in a limited portion of the battle space within the distributed exercise.  The onus for validation and verification of all behaviors falls upon both the CGF contractor systems integrator and the sponsoring organization.  Systems integrators such as SAIC and Lockheed Martin Information Systems (LMIS) and sponsoring organizations such as U.S. Army Simulation, Training, & Instrumentation Command (STRICOM) and Joint Forces Command (JFCOM) are considered experts on the functioning of CGF systems.  However, these same organizations most likely are not the proper authorities when it comes to performing verification, validation and accreditation (VV&A) on all of the behaviors or specific functionality that a CGF system can represent.  The current state of embedded behaviors within the CGF, as well as placing high fidelity and new behaviors into the CGF, does not lend itself to a VV&A process led by these organizations.  Continuing with our example of adding enhanced behaviors for indirect suppressive fires, the CGF system sponsoring organization would need to VV&A this change.  In addition, every time this suppressive fire behavior was modified, they again would be in charge of the VV&A task.  However, in the case of indirect suppressive fire, the Artillery School at Ft. Sill would be a much more qualified organization to VV&A these behaviors, and is more likely the proper organization to be in charge of that task.An Approach:  A Client-Server ArchitectureWhile we have identified areas needing improvement within the current CGF architectures, we believe that there is a relatively simple action that could alleviate the issues identified above.  This action involves a change in the software architecture.  We believe that incorporating a client-server architecture for CGF systems could greatly improve the ability to enhance CGF system’s entity behaviors.  We will now present the client-server architecture that was used for the CB in JSAF program and how it can impact the issues associated with behavioral representation within CGF systems.Client-Server Architecture for JSAFThe client-server architecture can facilitate the inclusion of both variable fidelity entity behavior and much more complex entity behaviors than is currently possible within JSAF.  This client-server architecture (Figure 3.1.1) will allow entity behavioral representation to be off loaded from JSAF (the client) to an external behavioral representation server – the Composable Behavior Server.Figure 3.1.1  Client-Server federation.As discussed earlier, the current approach to improving behavioral representation within JSAF involves embedding additional software directly into the JSAF software code base.  Most likely, the improved behavioral representation algorithm is much more complex and computationally intensive.  By embedding more complex software into the JSAF system the software has been made more complex and the processing burden within JSAF has been increased.  This adversely affects run time performance.A concept that would alleviate these issues is to provide external processing capabilities by implementing a client-server architecture.  To incorporate a client-server architecture, three software modifications are required of JSAF.  The inclusion of software libraries that allow a subscription process to occur.Data handling libraries that send data requests to the server and then funnel the data responses to the correct location within JSAF for other libraries to access.Modifications to situational response libraries to utilize the server-provided data.We will now briefly discuss each of these software modifications.Subscription libraries are needed for connecting a JSAF entity to a server for a particular behavioral representation.  Using a Graphical User Interface (GUI), a JSAF user would select the desired entity or entities that should attempt to use a server.  The user determines which entities use a server and which services each entity should try to subscribe to.  When the exercise (or scenario) is started, a subscription process occurs in which requests to servers are sent out via HLA interactions.  Behavioral servers accepting an entity’s subscription request would then respond with HLA interactions.  This subscription process includes load balancing between servers, and allows for multiple servers.  The subscription hand-shake process between JSAF (the client) and a CBS (the server) is shown in Figure 3.1.2.Figure 3.1.2  Client-Server subscription process.The second type of software modification involves the data transferred between the client and the server.  A data handling software library is responsible for sending requests for data to the server, receiving the data responses, and then putting the server provided information in a location accessible to the appropriate software behavior library.  This request/response network communication between the client and server is conducted via HLA interactions.Lastly, the behavioral representation libraries within JSAF need to be modified to use the server provided information.  This requires that behavior libraries be aware of and utilize server provided information.  These libraries also trigger the data handler libraries to send out requests for information.MA&D has incorporated the use of the above client-server approach into JSAF.  Using this approach, we were able to include much higher fidelity behaviors into the CGF system without degrading its system performance.  If we had attempted to embed this functionality directly into JSAF, it would have resulted in a significant negative impact on performance. SummaryIn this paper we have presented the efforts of the Composable Behaviors in JSAF program.  We have defined our notion of composable behaviors, presented an overview of the program, shown the purpose of the program by documenting behavioral shortcomings of CGF systems in general, provided a recommendation to use a client-server architecture and a CBS for resolving these architectural issues, and discussed incorporating composable behavior technology into JSAF.  References[1]	N.D. LaVine, and S.D. Peters: “An Advanced Software Architecture for Behavioral Representation within Computer Generated Forces”  Final Report, Defense Modeling and Simulation Office, Alexandria, Virginia, December 2001.  [2]	M.L. Fineberg, and G.E. McClellan: “Modeling the Effects of Suppression in Synthetic Dismounted Infantry (SynDI)”  Final Report for Defense Special Weapons Agency, Alexandria, Virginia, September 1997.Author BiographiesNils LaVine is a Principal Systems Engineer with Micro Analysis & Design in Boulder, Colorado.  He is the MA&D Program Manager on four programs associated with providing improved human behavioral representation into computer generated forces using a client-server architecture.  Nils graduated from the US Military Academy at West Point with a BS in General Engineering and from Colorado State University with an MS in Civil Engineering.  He also served in the US Army and is currently in the reserves.Denise Lyons is a Senior Research Engineer in the Science and Technology Division of the Naval Air Warfare Center Training Systems Division.  Her current focus includes modeling and simulation, and training technology for programs in Improved Behavioral Representation of Computer Generated Forces (CGF), and Advanced Embedded Training Systems (AETS).  She received her Ph.D. in Optical Sciences from the University of Arizona, and has over 13 years of experience in research and development for military systems.Lee Napravnik is a Systems Engineer with Micro Analysis & Design in Boulder, Colorado.  He holds BS degrees in Computer Science and Mathematics from Missouri Western, and an MS in Computer Science from the University of Central Florida.  Lee has spent the last eight years working in the SAF world in the areas of behaviors, architecture, experimental design, and training exercises.  Projects have included Special Forces training, STOW - Architecture development / enhancements, tactical behavior development, weapon effects, and international force representation.Steven Peters is a Principal Systems Engineer with Micro Analysis & Design in Boulder, Colorado with over twenty years of modeling and simulation experience.  His recent work has included modeling human performance and behavioral representation.  Steve has integrated into semi-automated force applications the effects of NBC exposure on tank crews, how crowds respond to non-lethal weapons, suppression effects from direct and indirect fire, and nuclear blast effects on weapon systems and crews.  He has a BS in Electrical and Computer Engineering from California State University at Northridge.