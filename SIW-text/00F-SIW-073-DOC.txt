An Architecture for Composable InteroperabilityMark BiddleScience Application International Corporation12479 Research ParkwayOrlando, FL 32826biddlem@saic.comConstance PerryU.S. Army Simulation, Training and Instrumentation CommandSTRICOM12350 Research ParkwayOrlando, FL 32836Connie_Perry@stricom.army.milKeywords:Interoperability, Composable, Object-Oriented, Java, XML, HLA, Web-BasedABSTRACT:  The Army Simulation Training and Instrumentation Command (STRICOM) Modular Interoperable Synthetic Environment (ModISE) project is focused on building an architecture for composable interoperability among heterogeneous elements.  The project includes a proof-of-concept instantiation of the architectural framework through development of a prototype demonstration application.  The concept includes a graphical interface through which users can select reusable components from a web-based repository and use them to compose a distributed interoperable executable environment.  The architecture design is constructed to facilitate interoperability among and between heterogeneous representations.  These representations might include HLA federates with different Simulation Object Models (SOMs), HLA federations with different Federation Object Models (FOMs), instrumented training ranges with real-world tactical operational systems, voice data streams, relational database management systems (RDBMS), commercial web-based applications, and other distributed interactive mediums and representations.  The architecture is also designed to provide a method for augmenting existing capabilities by adding composable functionality, and to allow interoperability across diverse domain areas, such as military training, Simulation Based Acquisition (SBA), Advanced Distributed Learning (ADL), and so on.  The architecture is meant to be open, with well-defined APIs around which users can develop components to add to the repository and thereby increase the envelope of capability of the framework.   IntroductionMany current Modeling and Simulation (M&S) applications are of monolithic design, not easily de-composed, and resistant to improvement and reconfiguration.  Interoperability among these systems, which incorporate varying levels of fidelity and diverse communications protocols in the absence of a definitive and comprehensive set of standards, is also a critical issue that has yet to be fully addressed.  The Modular Interoperable Synthetic Environment (ModISE) framework development project is an attempt to research and address some of these hurdles toward the advancement of the state-of-the-art in M&S technology.  The architecture is based upon two main concepts, which  are interoperability and composability.  The initial targeted use for the framework is to function as a M&S concepts testbed for the Army Simulation Training and Instrumentation Command (STRICOM).The ModISE can be used to facilitate interoperability across heterogeneous data representations (HLA, DIS, streaming voice/video, internet, custom protocols, etc...) and also provide composable functionality to externally connected environments or clients.  Users compose an execution environment, via a GUI, from reusable components that are stored in a repository.  At runtime, the selected components are downloaded from the repository, configured and initialized inside an instance of a ModISE Interoperability Engine (IE), and used to provide augmented capability or to facilitate interoperability across one or more externally connected clients.  A particular instance of the ModISE IE can be composed as a functioning federate, a middleware interface, an inter-federation gateway, or for a variety of other purposes.  STRICOM identified the needs that must be addressed for such an architecture to meet the current technical challenges in M&S.  These include the following:A flexible, extensible architecture to optimize reuse.A consistent hardware and software interface to integrate multi-resolution and multi-fidelity simulation components.A user-friendly development environment to support rapid prototyping, testing and training.Integration of standards (HLA and Synthetic Environment Data Representation & Interchange Specification - SEDRIS) and libraries (Modeling and Simulation Resource Repository - MSRR, Master Environmental Library - MEL) to optimize interoperability.STRICOM wants a solution that can address these needs and focus more on interoperability and compatibility (see Figure 1-1).  This also means placing more focus on problems that pay the highest dividends, which albeit are hard problems to solve:Interoperability standardsTools to make M&S user friendlyA library to make it easier to share information, databases, simulations, tools…We need to move away from point-to-point solutions and toward an open, flexible, object-based, framework approach… AN ARCHITECTURE.  We need an architecture that will take us through the lifecycle and across domains.The current architecture concept could include the following:Databases for Training Exercises, Experiments, Tests, DemonstrationsTraining Exercises may include models for training objectives, terrain, weather, composable objects, and natural phenomena.Tools Standards (HLA, DIS, SEDRIS)Composable Objects for  Ground vehicles, Air vehicles, Naval vessels, Dismounted soldiers, and CiviliansTestbedProcesses for Standards/Specifications (HLA, DIS, SEDRIS), SOM/FOM development, HLA Compliance testing, Interoperability testing, Compatibility testing, Model scaling, Composable behaviors, Terrain, etc.STRICOM’s vision is that of a SMART Architecture; one that is flexible and extensible using composable objects and scaleable processes and one that optimizes reuse.  It must be a completely open architecture that offers an open multi-developer environment and again, focuses on interoperability and compatibility.  From this vision grew the ModISE Architecture.Although currently focused on the synthetic battlespace M&S domain, the architecture has potential for applicability across many domains, to serve as a generic distributed and composable framework for interoperability.ModISE Architecture2.1 OverviewFigure 2-1 provides a high level illustration of the ModISE architecture. Sets of reusable components, some of which are pre-built and some of which might be custom-designed by a user, are stored in a repository.  This repository is a distributed data storage mechanism or set of mechanisms, which is accessible by ModISE Graphical User Interface (GUI) components over the web.    The GUI is used to select and compose groups of components, or MTMs as they are called (MTM stands for Mapper/Translator/Modeler), and to combine small functional groupings of MTMs into larger composite groupings that form the specification for an execution environment.  These groupings of MTMs are called Executions Specifications, or ESpecs, and they are stored in the repository along with the MTMs.At run time, an instance of the ModISE Interoperability Engine, or IE, downloads an ESpec from the repository, parses it to determine what MTMs are required, then downloads the specified MTMs from the repository and configures them as specified by the ESpec.  The IE uses the MTMs for internal control and for providing services to one or more connected clients.Clients can exist in the form of dedicated applications, which are closely coupled to an instance of the IE, or they can be data channel interfaces to external environments, which may contain one or more elements that require services from the IE, provide services to the IE, or both.Figure 2-1: ModISE Architecture Overview2.2  RepositoryThe repository contains the MTMs and the ESpecs.  MTMs are either developed by computer programmers or generated by automation tools (no such tools exist yet), and are entered into the repository in a pre-runtime setting.  ESpecs are produced by the GUIs and are also entered into the repository in a pre-runtime setting.The repository could exist as a single database at a single location, or it could be composed of a series of distributed and potentially heterogeneous databases or elements.  The repository, or elements thereof, could be publicly available or privately managed.  The repository, or elements thereof, could be of proprietary or open architecture, or a mixture of both.  The implementation of the repository is flexible.  What is important is that the ModISE IE have a uniform interface or set of interfaces to communicate with the repository or its elements, and that there be a user-friendly way of examining the MTMs and ESpecs that are contained within the repository. 2.3 Mappers/Translators/Modelers (MTMs)MTMs provide reusable composable building blocks of functionality.  Types of MTMs might include translation functions, algorithms, data maps,  filters, objects, components, agents, etc...  MTMs can be very simplistic or very complex.  MTMs are configured and executed from within an instance of the ModISE IE. Examples of MTMs might include:Data type converter component.10 millisecond timer component.“Entity Table” component.Geographic coordinate translation component.Fahrenheit to Celsius temperature translator.Security encryption component.DIS-to-HLA translation component.SOM-to-FOM mapper component.FOM-to-FOM mapper component.Radar warning receiver model component.SAF model component.Entity dynamics component.Environment server component.Airframe Engineering model component.¾ “ bolt model component.Galvanized steel material model component.SBA life cycle phase model component.AH-64 pilot Close Air Support (CAS) mission Shareable Courseware Object (SCO) component.Learning Management System (LMS) format converter component.Cognitive behavioral decision making model component.Intelligent tutor component. Stock price monitor component.Voice recognition component.Data mining component.Radio receiver/transmitter component.Facility systems control component.Custom user-designed component.Etc…The MTMs can provide internal control mechanisms for the IE, or they can provide supplemental or augmented capability for clients that are connected to the IE.  Also, they can provide functionality that facilitates interoperability between clients that are connected to the IE.  In order for MTMs to be previewed and browsed by the GUIs, they need to contain some form of standardized metadata information that allows users to evaluate them and the IE to interface with them.  For this purpose, each MTM will include an associated XML functional description of itself.  This functional description will contain such information as the purpose and functionality of the MTM, the level of fidelity, the interoperability and connectivity requirements, identification of any additional required resources to support the MTM, and so on.  This metadata will be read by  the GUI and presented to the user in a standardized format.  The compilation of this data is called an MTM ESpec. ModISE MTMs must meet the following requirements:Executable from within an IE instance.Include an object model in the form of an HLA SOM (.omd).Adherence to the MTM Data Port API (IEEE 1516 Java API).Inclusion of an MTM ESpec (XML).Storage in a ModISE-compatible repository.2.4 Execution Specifications (ESpecs)ESpecs are XML documents that describe a unit of execution.  There are three basic levels of ESpec.  First, there is an abbreviated ESpec that is associated with each and every MTM in the repository to describe the functionality and interoperability requirements of the MTM.  This MTM ESpec must be created by the MTM developer. Secondly, there is the ESpec that compiles a set of MTMs, which are selected from the repository by the user via the GUI and composed into a specification for a unit of execution.  The GUI creates this compilation by extracting data from the ESpecs of the selected MTMs and out of their SOMs and adding it to a composed ESpec for the unit of execution.  In addition to MTM metadata, the ESpec for the unit of execution captures wiring diagram or routing information that is pre-defined by a user via the GUI to describe how MTM inputs and outputs are to be connected. Thirdly, there is a packaged environment level ESpec that combines other ESpecs into a full execution specification, based upon user selections of unit-of-execution ESpecs via the GUI.  The GUI is responsible for generating the packaged environment ESpec .ESpecs contain the following types of information:Functional descriptionVersion NumbersAuthor InformationInteroperabilty/connectivity requirementsResource requirementsResource locations (URLs)Fidelity level descriptionInput/Output specsData type informationData field lengthsData routing informationObject Model Locationetc..2.5 ClientsClients take one of two basic forms.  They can be applications that are closely coupled to an instance of the IE, or they can be interfaces to external environments or data channels.  An HLA federate could be a client, using an instance of the IE to provide an HLA middleware interface to a federation.  This is an example of a closely coupled client.  An entire federation could also be a client, using an instance of the IE to provide a gateway to another federation.  In this case, technically speaking from the IE's perspective, the client is the RTI.  This is an example of a client that is not closely coupled, since the real effective client in this case is not really the RTI, but rather all of the federates in the entire federation.  A third example of a client might be a data channel to receive streaming voice or video data.  This is another example of a non-closely coupled client, since the producers of the streaming data are external to and possibly have no knowledge of the IE.  There is a discrete distinction between closely coupled clients and data channel clients.  Closely coupled clients have knowledge of the IE and are designed to be interfaced with it in the same address space.  Data channel clients, on the other hand, are connections to one or more remote and possibly distributed applications, which may or may not have knowledge of the presence of the IE.  Even though data channel clients may have an element that is closely coupled to the IE in order to establish an interface (the RTI FederateAmbassador and RTIAmbassador, for example), these clients are not thought of as being closely coupled.  For data channel clients, the effective client address space exists, at least in part, outside the address space of the IE, possibly distributed across one or more remote platforms.There is also a distinction between clients and MTMs.  Clients are external to the IE (although perhaps closely coupled), whereas MTMs are components that are consumed by, configured by, and executed within the IE.   Examples of clients might include:HLA federation.HLA federate.DIS network.Man-in-the-loop cockpit simulator.Real aircraft cockpit.Interface to an instrumented training range.SAF application.Electronic classroom workstation.Learning Management System (LMS) interface.Radio data channel.Television data channel.Link-16 interface.DREN interface.Oracle DBMS interface.Internet connection.Palm Pilot interface.Etc…2.6 Graphical User Interface (GUI)The GUI is used to compose the MTMs into ESpecs, which are also stored in the repository with the MTMs.  The GUI is also used to edit existing ESpecs, and combine ESpecs into larger composite ESpecs.A technically oriented user uses the GUI to select MTMs from the repository and to create a list of which ones are to be included in the execution.  The GUI is also used to create a “wiring diagram” that indicates how the MTMs are to be connected when configured within an executable instance of the IE.  This wiring diagram describes routes that data elements (attributes, parameters, data fields) will take as they travel through the IE.  These routes could send the data to any number of MTMs, and possibly back out to one or more clients through dedicated data ports.   The output of this wiring diagram process is an ESpec for a unit of execution.  This process is analogous to the historical illustration of an operator plugging connectors into sockets in a switchboard to connect calls.A less technically oriented user can then use the GUI to compose ESpecs (which will be displayed in a user-friendly and functionally oriented format), into a large composite ESpec that describes the layout of a complete execution environment.  The notions here is that the non-technically oriented user can effectively drag-and-drop federates into a desired federation configuration.  The GUI packages up the specification for this configuration and uploads it to the repository so that it can be edited and reused at a later time.2.7 Interoperability Engine (IE)The IE is the main functional run time element of the ModISE framework.A so-called "Persistence Manager" component within the IE downloads and parses ESpecs from the repository over the web.  This component also downloads, MTMs from the repository and "installs" them within the IE instance.  In contrast to MTMs, external clients must be pre-configured to be integrated with an IE instance.Once configured, the IE initiates an interface for each MTM (via "MTMDataPorts"), and one for each client (via "ClientDataPorts"), and it facilitates interoperability among clients via the MTMs.   Currently, the API that provides the interface between the MTMs and the IE is a simplified version of the IEEE 1516 HLA Java API.  MTMDataPort components (one for each MTM) function as mock RTIs, with pseudo RTIAmbassadors and pseudo FederateAmbassadors that are linked into the MTMs.  MTMs then communicate with the IE through these data ports, which are components of the IE, in roughly the same way that they would with a real HLA RTI.  Again, the MTMDataPort API is a simplified version of the HLA API.  It does not support DM, DDM, Time Management, or the MOM.  In fact, it effectively only supports attribute and interaction updates.  This is not necessarily a problem, because the MTMDataPort API was not meant to facilitate an HLA environment.  It is only being used to provide a means of communicating data between MTMs and the internal components of the IE.  This does not mean that the ModISE framework is not capable of supporting HLA.  It is important to reiterate that the MTMDataPort interface described above is only for passing data around between internal framework components.  A different type of interface component (the ClientDataPort) is used to communicate with external HLA federations and the real RTI.  The HLA ClientDataPort is a FOM agile component that is produced by a factory component within the IE.  The factory component parses a FOM for the federation to be interfaced and creates an HLA ClientDataPort specifically for that federation.  By the same token, using a simplified HLA-like API for communication between MTMDataPorts and internal IE components does not mean that non-HLA data is prohibited.  Again, the IE internal API is only for passing data between internal components, and the data that is passed could be HLA attributes/parameters, or it could be completely unrelated to the HLA architecture.  A benefit of using a simplified HLA API for the MTMDataPort interface allows MTMs that are developed for integration with the ModISE to be adaptable to become stand-alone HLA federates if desired.  This approach also allows existing HLA federate applications to be adaptable to function as ModISE MTMs.Another component within the IE is the Master Dispatcher.  The Master Dispatcher handles routing of data elements to/from MTMs and to/from clients.  The Master Dispatcher also handles timing and synchronization requirements for the IE.  The IE allows multiple simultaneous routing of data elements, which makes timing and synchronization tricky.  In any particular execution environment, there may be one or more IEs active at the same time.  The ModISE architecture  will accommodate a scheme for coordinating the startup and initialization of multiple IEs.  This is also a tricky issue because, since each IE has to download an ESpec from the repository in order to know how to configure itself, something must make sure that the correct ESpecs get downloaded to the correct IEs. 2.8  Composability and InteroperabilityFigure 2-2 provides an illustrative overview of the composability concept.  Pre-built or custom built MTMs are selected from a repository and configured as desired.  Figure 2-2 focuses on the creation of an ESpec from MTM selections.  The GUI can also be used to compose ESpecs from other existing ESpecs.  These ESpecs can be reused and edited to change the composition of the execution configuration.Figure 2-3 provides an illustrative overview of the interoperability concept.  User-defined information is synthesized from multiple data channels and communicated to user-defined destinations.  In other words, information can be synthesized from one or more heterogeneous representations and transformed into one or more other representations, thus allowing interoperability across the heterogeneous forms.  EMBED PowerPoint.Slide.8  Figure 2-2: ModISE Composability EMBED PowerPoint.Slide.8  Figure 2-3: ModISE InteroperabilityProof-of-Concept DemoA demonstration application is being developed as a proof-of-concept of the ModISE.  The goal of the demonstration is to exhibit the various aspects of the architecture and how they relate to the vision of composability and interoperability upon which the architecture is founded.  The basic premise of the demo is to have an HLA voice federate, which translates streaming voice data into discrete text strings.  The voice federate passes the text strings to an instance of the IE, which is composed to contain a context recognition MTM that is designed to look for specific simulation management commands.  When a simulation management command is recognized, the MTM produces a simulation management interaction, which in turn is issued to a SAF federate to control its battlespace objects.  It should be made clear that the demo is not about the voice application.  The purpose is to demonstrate the composability and interoperability aspects of the ModISE architecture.  The composability aspect of the architecture will be demonstrated by reconfiguring the execution to replace the simulation management context recognition component with a simple display system control recognition component.  The same voice stream will then control a simple display system instead of the SAF.  The interoperability aspect will be demonstrated by the fact that the voice stream is coming from a particular HLA federation and being used to control a SAF, which has a different SOM but is in the same federate.  This will further be demonstrated when the same voice stream, coming from the same HLA federation, is used to control a display system, which will have a different SOM and be in a different HLA federation (different FOM) than the one that the SAF federate is in.  The ModISE facilitates the interoperability between the various heterogeneous representations.  Although the demonstration application will be HLA based, the ModISE architecture is applicable to non-HLA environments as well.Figure 3-1 provides an illustration of the demonstration application and how it will operate.  Each step of the demo is meant to highlight a specific element of the ModISE architecture.  These steps are as follows (refer to figure 3-1):During some period before run time, the repository is populated with a set of MTMs specifically designed to support the demo.  In this case, these MTMs will include a speech context recognition component for a simulation management context, another speech recognition component for a display system control context, and a FOM agility component or set of components to map between the SOMs of the context recognition components and the external HLA federation FOM(s).  These MTMs will be developed manually by programmers specifically for the demo.  As the ModISE technology matures, tools may be developed to either fully or partially automate the creation of certain types of MTMs.  Also, as more MTMs are developed and added to the repository, the overall capability of the ModISE framework will grow.Also before run time, the GUI will be used to examine the MTMs in the repository and to compose one or more of them into a unit of execution ESpec (XML document) that tells the ModISE IE how to auto-configure at runtime.  In this case, a unit of execution ESpec will be created to describe the context recognition federate.  The GUI will also create an environment level ESpec, which will contain a description of the entire federation.  The interface between the GUI and the repository will be web-based.The GUI will generate the ESpec as directed by input from the user, and the GUI will upload the new ESpec to the repository.  All of the ESpecs can be edited and modified via the GUIs and over the web in a pre-runtime setting.  Eventually the GUIs will  also be able to make limited modifications to the execution environment during runtime. At runtime an IE will be instantiated and will download the environment ESpec from the repository, and it will parse the ESpec to learn how it should auto-configure itself..Upon parsing the ESpec the IE will learn which MTMs it needs to download from the repository.  The IE will download these MTMs and configure them as the ESpec dictates.  In addition to MTMs which need to be downloaded from the repository, the ESpec will specify components, such as the HLA federation data channel (a ClientDataPort), that the IE must instantiate itself via an internal factory component.  The HLA interface component shown in the figure is a good example of this.  The IE will not download this component from the repository.  It will produce an HLA ClientDataPort internally from a "DataPortFactory", and this ClientDataPort will be automatically "tuned" to the client federation's FOM.After download and configuration of the MTMs is complete, the IE will initialize itself and establish a communication link with its clients.  In this case the only client is the HLA federation, which includes the voice capture federate and the DI SAF federate.  Later, the IE will bridge to a second federation (not shown in the figure) to communicate with a display system federate.  At this point the federation execution has begun.  Now assume that someone speaks into a microphone connected to the voice capture federate.  In our demonstration application, the voice capture federate will convert voice data in to text strings and provide them to the context recognition federate via HLA interactions.  These text strings will be received by the HLA interface in the IE and routed to the FOM Agility MTM.The FOM Agility MTM, which will have been configured to translate between the federation's FOM and the context recognition MTM's SOM will do any necessary FOM-to-SOM conversion and pass the translated attribute or parameter back to the IE, which will in turn route the attribute or parameter to the simulation management context recognition MTM.  The simulation management context recognition MTM will examine the digitized voice, perform pattern recognition against a preset list of commands, which represent the desired context (Simulation Management in this case), and issue an appropriate attribute update or interaction back to the IE.  The IE then routes the data back to the FOM Agility MTM for mapping from simulation management context recognition MTM SOM to external HLA federation FOM.  After running the demo with the simulation management context recognition component, the ESpec for this IE will be edited and the simulation management context component will be replaced by a display system control context recognition component.  Also, a new data port will be added.  It will be a connection to a second HLA federation that includes a display system controller federate.  Now when someone speaks into the microphone of the voice federate, their words will control a simple display instead of objects in the synthetic battlespace.  This will demonstrate both the composability potential of the ModISE and the interoperability potential.  It should be noted that the components for controlling the display system are not shown in figure 3-1, but they will be part of the demonstration.In the simulation management example, context synthesized attributes and interactions are passed through the RTI to the DI SAF federate and used to control individual combatant objects in the synthetic battlespace.  Again, when the system is recomposed (not shown in the figure) then the simulation management context MTM will be replaced with a display control context MTM, and the same exact voice data stream will now control a display system instead of a SAF object.Summary and ConclusionsThe ModISE architecture was designed to facilitate composability and interoperability in order to support an M&S testbed for STRICOM.  STRICOM’s vision is that of a SMART Architecture; one that is flexible and extensible using composable objects and scaleable processes and one that optimizes reuse.  It must be a completely open architecture that offers an open multi-developer environment and again, focuses on interoperability and compatibility.While the creation of such a complex framework involves some serious technical challenges, these challenges are being overcome, and the technology is showing a great deal of potential.The architecture is being demonstrated through a proof-of-concept instantiation of the framework to integrate an HLA voice recognition federate application.  The demo highlights the use of ModISE for composability by allowing reconfiguration of the application to control either SAF entities in a synthetic battlespace via simulation management commands, or a display system via system control commands.  The demo further highlights the use of ModISE for interoperability by providing FOM agility between the MTM SOMs and the external federation FOM, and between two different FOMS.  Though the demo is centered around HLA federates and federations, this architecture is also applicable to non-HLA environments.The composition of an execution environment is facilitated by a Graphical User Interface, which retrieves reusable components from a repository and allows them to be configured in a user-definable manner.While the architecture is initially focused on the synthetic battlespace M&S domain, there is significant potential for application across domains as a generic distributed mechanism for interoperability.The ModISE architecture is currently in a proof-of-demonstration state of completion.  Additional research is needed to mature this technology and to expand its applicability to a broader range of implementations.  Multiple additional application opportunities are currently being considered for the next phase of development.  4.1 ModISE Acronym ListModISE: Modular Interoperable Synthetic EnvironmentIE: Interoperability EngineMTM: Mapper/Translator/ModelerESpec: Execution SpecificationReferences[1] HYPERLINK "obtain_doc.cfm?record_id=REF_1001080"SISO-STD-001.1-1999 (RPR FOM 1.0) Author BiographiesMark Biddle is a Senior Simulation Systems Engineer for SAIC and has over five years experience in the Distributed Simulation industry.  He has performed requirements analysis, design, implementation, and testing in a team leader capacity on research projects for simulation and training technologies, with a special focus on interoperability and the High Level Architecture (HLA).  He also has over eight years of experience with In-Service-Engineering, Design, and Program Management of Navy mission critical shipboard systems.  Mr. Biddle received his Masters of Science degree in Engineering Management from Old Dominion University in Norfolk Virginia, and a Bachelor's degree in Electrical Engineering from the Pennsylvania State University.Constance M. Perry is a Principal Investigator for the Synthetic Environment and Technology Management Division at the U.S. Army Simulation, Training and Instrumentation Command (STRICOM).  Ms. Perry has over 11 years experience in the simulation industry.  She is the lead Principal Investigator on research and development programs in the areas of High Level Architecture (HLA) and Synthetic Environment Architecture Development.  Mrs. Perry received a Masters of Science degree in Industrial Engineering with a specialization in Modeling and Simulation Analysis from the University of Central Florida and a Bachelors of Science degree in Industrial Engineering from the University of South Florida.PAGE   EMBED PowerPoint.Slide.8   EMBED PowerPoint.Slide.8   EMBED PowerPoint.Slide.8  