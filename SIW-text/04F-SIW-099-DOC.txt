Value-Added Simulation Functionality with Layered Web ServicesRyan P.Z. BruntonScience Applications International Corporation10260 Campus Point DriveSan Diego, CA  92121858-826-6872HYPERLINK "mailto:kmorse@epsilonsystems.com"bruntonr@saic.comKatherine L. Morse, Ph.D.Science Applications International Corporation10260 Campus Point DriveSan Diego, CA  92121858-826-6728HYPERLINK "mailto:kmorse@epsilonsystems.com"morsek@saic.comDavid L. DrakeScience Applications International Corporation10260 Campus Point DriveSan Diego, CA  92121858-826-2278HYPERLINK "mailto:kmorse@epsilonsystems.com"drakedavid@saic.comKeywords: XMSF, Web ServicesABSTRACT: Composability and web services are both currently hot topics in the Modeling and Simulation (M&S) community.  The flexibility and utility of XML based web services have the potential to transform existing and future distributed simulations, making interoperability a reality rather than a theory, and allowing functionality to be added selectively rather than monolithically.  In this paper we focus on a layered web services approach for adding authentication, access control, and interest management on top of an existing High Level Architecture (HLA) simulation to enable restricted access from a remote location and reduce unwanted network traffic.  We cover the technologies and techniques devised to implement this proposed strategy for an exemplar system, the Experimental Command & Control Interface (XC2I) project, and show how the architecture exemplifies the goals of the eXtensible Modeling and Simulation Framework (XMSF).IntroductionIn the Experimentation Command and Control Interface (XC2I), US Joint Forces Command (JFCOM) J9 is seeking to build on the XMSF DCEE [1] Viewer (XDV) proof of principle to create a distributed software system that can provide both two-dimensional and three-dimensional visualization of entities, aggregates, and terrain, and scale up to large federations of distributed simulations as needed for Joint Urban Operations (JUO).  In order to realize these goals advanced features such as role-based access control (RBAC), area of interest management (AOIM) [2], and aggregation interest management (AGIM) needed to be developed and deployed alongside existing HLA simulations, in this case federated JSAF systems.In this paper we describe the layered web services architecture used to implement this functionality, and the means by which the different features were composed into a coherent system. The rest of the paper is arranged as follows. Section  REF _Ref487614895 \r \h 2 provides an overview of the XC2I concept and architecture, as well as the JUO/JSAF simulation environment to which the prototype implementation was tailored.  Section  REF _Ref487691748 \r \h 3 describes the Role Based Access Control (RBAC) subsystem designed to manage authorization and authentication of remote users.  Section  REF _Ref488215505 \r \h 4 provides a sketch of the Web Services Interest Management (WSIM) subsystems, including AOIM, AGIM, and the Command and Control Interest Management Language (C2IML).  Section  REF _Ref488215547 \r \h 5 examines directions for future work, and section  REF _Ref487754702 \r \h 6 contains our concluding remarks.XC2I Architecture OverviewXC2I has been a collaborative effort between SAIC, GMU, and VMASC with funding from JFCOM J9, the eventual goal of which is to develop a flexible 2D/3D viewer/controller for C2I distributed simulations.  The rationale for such a system is one of straightforward economics: it is often neither practical nor effective to relocate ranking officers to simulation centers in order to allow them to view and interact with systems engaged in cooperative simulation events.  A single, flexible C2I viewer/controller platform which can remotely connect to these events and be transparently tailored to different systems would allow these officers to view and interact with the simulations without the cost in time and money associated with relocation.  Toward this end, the teammates designed an architecture for such a system and began implementation of a prototype for use with an existing simulation involving distributed JSAF instances modeling JUO scenarios.  While this prototype will be used as an exemplar throughout the rest of this paper, it is important to note that it was simply a proof of concept implementation tailored to a specific application, and therefore some of the functionality and capabilities designed into the architecture do not apply directly, and in fact have in some cases yet to be implemented.The prototype implementation was designed to interact with an HLA-compliant simulation of distributed JSAF instances customized for JUO scenarios and was interconnected using RTI-s.  This meant that actual implementations were needed for the access control subsystem, AOIM, AGIM, and an HLA data feed connector built for RTI-s.  An additional data feed connector was also required to connect directly to the JSAF Persistent Object Store (POS) as not all required data could be retrieved directly via RTI-s.  Finally, a C2IML-aware control system needed to be added, with another connection directly to the POS, to allow orders to be passed from the XC2I client to entities controlled directly by JSAF.  The visualization component chosen for the front-end was a modified SOFVIZ 3D viewer, itself a customization of OpenSceneGraph for the Windows platform.   REF _Ref487514545 \h Figure 1 shows an overview of the architecture. EMBED PowerPoint.Show.8  Figure  SEQ Figure \* ARABIC 1.  Experimentation Command and Control Interface ConceptAs the figure illustrates, a common visualization front-end would be presented to the user, while simulation specific data feeds and control modules would be incorporated dynamically depending on the simulation to which the viewer is being connected.In order to maintain this level of modularity, two XML-based languages were developed.  C2IML links the semantics encapsulated by the C2IEDM specification with XML syntax, providing a well-defined vocabulary for defining AOIM and AGIM.  An Access Control Language (ACL) was then developed for the RBAC system.  As these languages define the interfaces between the client system and the simulations being viewed or controlled, the XC2I client system can be transparently customized for different back-end simulations given the connection endpoint of the C2IML and ACL aware service endpoints.  This is important as different simulations will need different levels  of AOIM, AGIM, and security requirements, yet they must all understand the same interest and access control expressions if XC2I is to be effective.RBAC ArchitectureThe chief goals in defining the architecture for the authentication and authorization subsystem for XC2I were:Defining a globally available identity management system.Associating user identities with simulation-specific roles.Transparently limiting user interaction with the client based upon the user’s available roles.As an example, a user who is authorized to only view and control blue forces should not be presented with related options reserved for the red or white forces. The sequence diagrams below show how these goals are met by the architecture. REF _Ref487681045 \h Figure 2 illustrates the process by which a user is authenticated by the access control system. The user begins by entering a username and password at the client login prompt. This information is used to access a globally unique signed certificate that the user must implicitly present to the system, either via a secure keystore on disk or a physical token like a smartcard. It is this certificate that is sent to the access control server and used for identification services. As these certificates are already provided to many DoD personnel as physical tokens and similar authentication systems, and the certificate authority infrastructure is already in place for the DoD, the validity of the certificate can be checked by ensuring that an accepted authority signed it. The identification information found within the certificate can then be used to look up the user privileges on the access control server for the requested system or simulation. While currently this lookup is done using a relational database, other, more distributed identity management systems can be used (e.g. LDAP). Once the user has been authenticated and the available roles determined, the access control server returns a list of roles to the client, where each role is associated with an encrypted, signed token.Figure  SEQ Figure \* ARABIC 2.  Authorization Sequence DiagramOnce the list of available roles is received, the client offers the user an opportunity to select the preferred role as illustrated in  REF _Ref487681048 \h Figure 3.  When the user selects a role, the client connects to the simulation via a top level Web Services Interest Management (WSIM) server, requesting that a session be started for the user with the given role. The request includes the token received earlier from the access control server. The WSIM server then verifies the authenticity of the token by verifying the validity of the signature over the token using the access control server's public key. If the access control server's key is not known the WSIM server needs to contact the access control server directly to retrieve it for verification. The token is then sent on to the access control server to be unencrypted and verified. If the token is valid, the WSIM server caches the role information in the session information associated with the requesting client and connects to the simulation.  Although these sequence diagrams do not illustrate the processes for responding to exceptions, the traditional exceptions that can be thrown by an authentication system can be incorporated.Figure  SEQ Figure \* ARABIC 3.  Interest Management Access Control Initialization Sequence DiagramACLThe following subsections demonstrate example XML exchanges illustrated in the sequence diagrams in section  REF _Ref487691748 \r \h 3.  The first is the login with the username and certificate in  REF _Ref487681045 \h Figure 2. The details of the type of authentication, in this example a user’s login, are hidden in the token passed for authentication. This is followed by the access control server’s response in the same figure.  The third example details the role request with the user’s token between the viewer access control and the WS IM server as illustrated in  REF _Ref487681048 \h Figure 3.Initial Client Request 1    <?xml version="1.0"?> 2    <SOAP:Envelope 3        xmlns:SOAP="http://www.w3.org/2003/05/soap-envelope" 4        xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 5        xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 6        xmlns:wsse="http://docs.oasis-open.org/wss/2004/ 01/oasis-200401-wsswssecurity-secext-1.0.xsd" 7        xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/ oasis-200401-wsswssecurity-utility-1.0.xsd" 8        xmlns:acl="http://www.xmsf.com/xc2i/access-control"> 9      <SOAP:Header>10        <wsse:Security>11          <wsse:BinarySecurityToken12            ValueType="...#X509v3"13              EncodingType="http://www.w3.org/2000/09/ xmldsig#base64Binary"14            wsu:Id="auth509Token">15            TdaRFggQeLVoa...16          </wsse:BinarySecurityToken>17        </wsse:Security>18      </SOAP:Header>19      <SOAP:Body>20        <acl:AuthorizationRequest>21          <acl:RequestedServices>22            <acl:RequestedService URI="xc2i://j9.mil/juo-jsaf"/>23          </acl:RequestedServices>24        </acl:AuthorizationRequest>25      </SOAP:Body>26    </SOAP:Envelope>Before describing the individual elements of the message above, it is worth clarifying a few details regarding the structure of the message itself. First, the ACL-specific tags are contained within the body of a SOAP message, thereby making the request itself syntactically compliant with current web services standards. Second, a number of different namespaces are utilized in this and the following examples. This is due to the fact that the existing web services security specification builds on a number of other technologies. Line 4 references the W3C XML Digital Signature specification, line 5 the W3C XML Encryption specification, line 6 the OASIS Web Services Security specification, and line 7 the access control language developed for this project. The abbreviations used to reference these namespaces are consistent throughout the examples. Please also note that while a number of encryption and digital signing techniques have been integrated into the language, there was an implicit design assumption that these messages would be transferred over a secure, encrypted protocol (e.g., HTTPS using SSLv3 or TLS).The request message itself is quite straightforward. Lines 10-17 denote a Web Services Security block containing the client's certificate on lines 11-16. Lines 20-24 make up the actual authorization request. Within this request, lines 21-23 list the services for which the client is requesting access, in this case an XC2I connection to the JUO version of JSAF.Access Control Server Response 1    <?xml version="1.0"?> 2    <SOAP:Envelope 3        xmlns:SOAP="http://www.w3.org/2003/05/soap-envelope" 4        xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 5        xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 6        xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/ oasis-200401-wsswssecurity-secext-1.0.xsd" 7        xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wsswssecurity-utility-1.0.xsd" 8        xmlns:acl="http://www.xmsf.com/xc2i/access-control"> 9      <SOAP:Header>10        <wsse:Security>11          <wsu:Timestamp wsu:Id="tstamp">12            <wsu:Created>2004-05-21T08:42:00Z</wsu:Created>13          </wsu:Timestamp>14          <xenc:EncryptedKey>15            <xenc:EncryptionMethod Algorithm= "http://www.w3.org/2001/04/xmlenc#rsa-1_5"/>16            <ds:KeyInfo>17              <wsse:SecurityTokenReference>18                <wsse:Reference URI="http://www.certRepository/ X509Certs/theClientCert"/>19              </wsse:SecurityTokenReference>20            </ds:KeyInfo>21            <xenc:CipherData>22              <xenc:CipherValue>asdsdkjhhj278yasdf... </xenc:CipherValue>23            </xenc:CipherData>24          </xenc:EncryptedKey>25          <ds:Signature>26            <ds:SignedInfo>27              <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>28              <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>29              <ds:Reference URI="#body">30                <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>31                <ds:DigestValue>KLSDF72365FDA...</ds:DigestValue>32              </ds:Reference>33            </ds:SignedInfo>34            <ds:SignatureValue>Adfab234asd...</ds:SignatureValue>35            <ds:KeyInfo>36              <wsse:SecurityTokenReference>37                <wsse:Reference URI="http://www.certRepository/X509Certs/authServerCert"/>38              </wsse:SecurityTokenReference>39            </ds:KeyInfo>40          </ds:Signature>41        </wsse:Security>42      </SOAP:Header>43      <SOAP:Body wsu:Id="body">44        <acl:AuthorizationResponse>45          <acl:Services>46            <acl:Service URI="xc2i://j9.mil/juo-jsaf">47              <acl:Role id="White">48                <acl:Token>49                  <enc:EncryptedData Type="http://www.w3.org/2001/04/xmlenc#Content"50                    xmlns:enc="http://www.w3.org/2001/04/xmlenc#">51                    <enc:encryptionMethod52                      Algorithm="http://www.w3.org/2001/04/ xmlenc#aes128-cbc>53    <!--Implicitly use symmetric key encrypted above.-->54                    <enc:CipherData>55                      <enc:CipherValue> AB342311CE93...</enc:CipherValue>56                    </enc:CipherData>57                  </enc:EncryptedData>58                </acl:Token>59              </acl:Role>60            </acl:Service>61          </acl:Services>62        </acl:AuthorizationResponse>63      </SOAP:Body>64    </SOAP:Envelope>This is the response to the previous query. Lines 14-24 contain an encrypted symmetric key used to encrypt the security tokens found later. This symmetric key is encrypted using the client's public key, which was extracted from the certificate provided with the request. Lines 25-40 contain a digital signature across the body of the message. The message is signed using the authenticating server's private key. Lines 35-39 reference the server's certificate, allowing a receiving client to verify the signature. Line 47 lists the role for which a token follows. Finally, lines 48-58 contain the actual encrypted token.Example Unencrypted Token 1    <!--Here's the structure of the Token element 2     which is extracted from the EncryptedData element. --> 3    <acl:Token 4      xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 5      xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 6      xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wsswssecurity-secext-1.0.xsd" 7      xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wsswssecurity-utility-1.0.xsd" 8      xmlns:acl="http://www.xmsf.com/xc2i/access-control"> 9      <acl:TokenHeader>10        <wsse:Security>11          <wsu:Timestamp wsu:Id="tok1Tstamp">12            <wsu:Created>2004-05-21T08:42:00Z</wsu:Created>13          </wsu:Timestamp>14          <wsse:BinarySecurityToken15            ValueType="...#X509v3"16            EncodingType=                "http://www.w3.org/2000/09/xmldsig#base64Binary"17            wsu:Id="auth509Token">18            KMHASDFKHasdf234jha...19          </wsse:BinarySecurityToken>20          <!--Signature for Body-->21          <ds:Signature>22            <ds:SignedInfo>23              <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>24              <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>25              <ds:Reference URI="#tok1Body">26                <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>27                <ds:DigestValue>KLSDF72365FDA...</ds:DigestValue>28              </ds:Reference>29            </ds:SignedInfo>30            <ds:SignatureValue>Adfab234asd...</ds:SignatureValue>31            <ds:KeyInfo>32              <wsse:SecurityTokenReference>33                <wsse:Reference URI="#auth509Token"/>34              </wsse:SecurityTokenReference>35            </ds:KeyInfo>36          </ds:Signature>37        </wsse:Security>38      </acl:TokenHeader>39      <acl:TokenBody wsu:Id="tok1Body">40        <!--Client Username-->41        <wsse:UsernameToken>42          <wsse:Username>Me</wsse:Username>43        </wsse:UsernameToken>44        <!--Certificate for client-->45        <wsse:BinarySecurityToken46            ValueType="...#X509v3"47             EncodingType=                "http://www.w3.org/2000/09/xmldsig#base64Binary"48            wsu:Id="client509Token">49          KMHASDFKHasdf234jha...50        </wsse:BinarySecurityToken>51        <!--Unique identifier for the service -->52        <acl:ServiceURI>xc2i://j9.mil/juo-jsaf</acl:ServiceURI>53        <!--Role-->54        <acl:Role>White</acl:Role>55      </acl:TokenBody>56    </acl:Token>This is what the token looks like unencrypted. Note that lines 14-19 contain the authentication server's certificate and lines 45-50 contain the client's certificate. This allows the service to verify the identity of both the signing authority and the connecting client. The token itself contains the client's username on lines 41-43, the aforementioned client certificate, the service to which it applies on line 52, and the authenticated role on line 54.WSIMThe need for a comprehensive approach to WSIM became apparent in the early design stages for XC2I.  In large scale simulations like JUO/JSAF, updates are potentially being sent by thousands, or even hundreds of thousands of entities spread throughout the battlespace.  These updates generate more traffic than can be accommodated by all but the highest bandwidth connections, making it difficult or impossible to forward all data over a wide area network.  The JUO/JSAF federation deals with this traffic glut through creative use of HLA Data Distribution Management (DDM) and by traffic shaping via the RTI-s simply to manage throughput on a LAN.  This solution was untenable for XC2I for several reasons.  First, the XC2I architecture was meant to provide an abstract interface to C2I simulation systems regardless of their underlying implementations.  Second, because there is not standard practice for implementing an HLA DDM scheme across simulations, we could not count on the existence of applicable region information.  Finally, the XC2I solution needed to be adaptable to non-HLA data sources, meaning that any solution that could not be applied to DIS and other simulation interoperability protocols was unacceptable.Based on the unique needs of the C2I viewer space, it was decided that two separate levels of interest management would be required.  The first, AOIM, would focus on limiting subscription to the geographically relevant subset of specific entities and types, and further filtering on visible, or otherwise relevant movement and update rates.  The second, AGIM, would focus on aggregated data, an example of which is representing a number of units as a single coherent battle grouping such as a brigade or battalion.    C2IML was developed to encapsulate these IM schemes.  Developed as an interpretation of the C2IEDM specification in XML, C2IML provides the syntax for describing subscription in terms of Interest Expressions (IE) that detail the XC2I user's AOI and AGI. AOIMAOIM is based primarily upon geographic location, object type, and object id.  However, C2IML has been designed with facilities to allow further filtering of AOI based upon update frequency and geographical deltas.In the viewer currently under development, the user subscribes to types of entities in a geographic region using a GUI.  We define this geographic region as the subscribing viewbox.  For simplicity, all IEs have at most one viewbox. All other operands are interpreted to be subscriptions within the viewbox. The current language assumes that IEs are additive, i.e. that each subscription for a given viewbox adds to any previous subscriptions for the same viewbox.  The following restrictions are enforced for the limited scope of the current viewer:A user can only subscribe to entities in the current viewbox.If an entity of interest moves out of the viewbox (“out of scope”), its updates won’t be delivered again until it’s back in scope, but the subscription will remain in effect. This is enforced by the viewer, not by C2IML.The rationale behind filtering AOI via geographical deltas was simple: within the context of the viewer, any movement too subtle to be seen at the user's current zoom level wasted bandwidth if sent.  Similarly, update frequency could be used to filter out data updated more frequently than the screen could be refreshed, or alternately could be used to arbitrarily throttle back updates to a level supported by the available bandwidth.  While a user would choose their viewbox and any specific entities and types to which they wished to subscribe, geographical deltas and update frequency parameters would likely only ever be used transparently by the XC2I system itself.  The example below is a C2IML IE illustrating many of these principles.1 <c2iml:InterestExpression xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"2 	xsi:schemaLocation="file://./c2iml.xsd"3	xmlns:c2iml="http://www.xmsf.com/xc2i/c2iml">4	<c2iml:Viewbox>5		<c2iml:CornerPosition lat="30.720" lon="-98.588"/>6		<c2iml:CornerPosition lat="31.720" lon="-97.588"/>7		<c2iml:BoxHeight baseAltitude="0" height="9000"/>8	</c2iml:Viewbox>9	<c2iml:GeodeltaFilter distance="1000"/>10	<c2iml:TemporalFilter>11		<c2iml:Time>300</c2iml:Time>12		<c2iml:Update>10</c2iml:Update>13	</c2iml:TemporalFilter>14	<c2iml:ObjectTypeList>15		<c2iml:ObjectType id="1"/>16		<c2iml:ObjectType id="2"/>17		<c2iml:ObjectType id="4"/>18	</c2iml:ObjectTypeList>19	<c2iml:ObjectItemList>20		<c2iml:ObjectItem id="356"/>21	</c2iml:ObjectItemList>22 </c2iml:InterestExpression>This example bears some explanation.  Lines 4-8 define a geographical Viewbox giving the upper left and lower right corners in terms of their latitude and longitude (5-6), the base height of the bottom of the bounding box, and the height of the box(7).  This information is sufficient to define a geographically unique volume in space.  Note that the BoxHeight element is optional.  If not included it is assumed that the area of interest includes all heights above and below sea level within the rectangle defined by the two bounding corners.Following the Viewbox is a series of general ObjectType entries (14-18).  The ObjectType element is defined on lines 37-44 of the Schema.  This describes an interest in particular classes of entities.  After the class interest statement is a separate list of individual entities of interest(19).  The GeodeltaFilter on line 9 defines a minimum geographical granularity filter, asking that updates that involve a delta less than this distance not be sent.  This filter would be used to limit traffic to a viewer to changes which could be seen at the current zoom resolution.  A TemporalFilter is used on lines 10-13.  The TemporalFilter sets a filter on the rate at which updates are to be passed to the client.  In this case, line 11 asks that updates be filtered if they are received more than once every 300 milliseconds, and line 12 asks for only every tenth update.AGIMAGIM is a new concept developed for this viewer allowing a user to see aggregated views of individual entities.  This concept is most applicable to force-on-force simulations.  AGIM has some unique challenges, including deriving the unit order of battle when it is not explicitly provided and determining the location at which to display the aggregated entity.  It also has some clear advantages in the C2I space, especially when dealing with large force-on-force simulations.  If a user is only interested in seeing and interacting with an aggregate, updates need only be sent to the XC2I client for the entire aggregate.  By placing this functionality into the WSIM architecture bandwidth is drastically reduced and processing is offloaded from the client to the machines hosting the web services, which could be clustered or load-balanced.  AGIM support is application specific and is expressed in C2IML using ObjectType and ObjectItem elements.  The actual aggregation of individual entities must be either supported by the underlying simulation or the layered web services acting as intermediaries.Future WorkWhile the ACL and architecture have been prototyped, shortcomings of the Web Services standards and work being done by the OASIS standards body indicate that the current work may be superseded by a significantly different message format, such as the eXtensible Access Control Meta Language (XACML).  However, the fundamental architecture presented in this document will continue to be appropriate to the application.  Additionally, the WSIM implementation currently has only preliminary support for an HLA 1.3 data feed.  Extending the scope to include interchangeable HLA 1.3, 1516, and DIS feeds would help prove the viability of the architecture.  Finally, exchanging the current GUI front-end for a cross-platform browser-launchable interface, perhaps written in Java, would greatly increase the flexibility of the XC2I application.ConclusionsThe current paradigm of co-locating participants in distributed simulation events has become outdated and costly. Current methods for allowing truly distributed participation require extensive configuration and end-to-end control of the networks involved. If simulation participation is to be truly distributed and flexible, remote users must be able to easily configure and run clients without extensive knowledge of the underlying systems while maintaining both security and performance.  We believe that the layered web services approach taken by XC2I is a positive step in this direction.ReferencesInformation about DCEE can be found at http://www.jfcom.mil/about/fact_dcee.htmKatherine L. Morse, J. Mark Pullen, Ryan Brunton and David L. Drake, “Web Services Interest Management,” Proceedings of the 2004 Fall Simulation Interoperability Workshop, Orlando, FL, September 2004.Author BiographiesRyan P.Z. Brunton is a Software Engineer with SAIC.  He received his B.S. in computer science (2001) from the University of California, San Diego.  Prior to completing his B.S. he worked at the MOVES Institute at the Naval Postgraduate School.  Mr. Brunton’s key areas of expertise are modeling & simulation, object-oriented design and development, and the extreme programming methodology.David L. Drake is currently a Program Manager in the C2 Modeling & Simulation Division working in the area of Modeling and Simulation development. His current duties involve the oversight of a number of projects related to web enabling the Run Time Infrastructure interface to allow distributed, legacy simulations to act as web services. Advanced distributed learning is one of the key areas where Mr. Drake's team is applying this technology. Previously, Mr. Drake was the Vice President of Software Development at Sequentis, Inc. In this role, Mr. Drake was responsible for the design, development, and deployment of all software products that Sequentis was developing, particularly a secure delivery system that employs client-server technology to allow end-users a secure way to transfer arbitrarily large files and folders. Prior to that, Mr. Drake was the Intrusion.com's Vice President of the Security Software Development Group and responsible for the technical direction, design and implementation of the Kane Secure Enterprise product line, a commercial intrusion detection system. In that role, Mr. Drake oversaw 45-person software development team, and managed a $5M annual budget. Mr. Drake was also Intrusion.com's security expert and spokesperson, providing technical details and professional opinions for the industry and Intrusion.com's customers, as well as contributing information and expertise for articles, interviews and conferences. Dr. Katherine L. Morse is a Chief Scientist with SAIC.  She received her B.S. in Mathematics (1982), B.A. in Russian (1983), M.S. in Computer Science (1986) from the University of Arizona, and M.S. (1995) and Ph.D. (2000) in Information & Computer Science from the University of California, Irvine.  Dr. Morse has worked in the computer industry for over 20 years, specializing in the areas of simulation, computer security, compilers, operating systems, neural networks, speech recognition, image processing, and engineering process development.  Her Ph.D. dissertation is on dynamic multicast grouping for Data Distribution Management, a field in which she is widely recognized as a foremost expert.  With Don Brutzman (NPS) and Mark Pullen (GMU), Dr. Morse is one of the founding XMSF partners.  She is also a key contributor in the area of HLA-Advanced Distributed Learning (ADL) integration. 