The NSS-GCCS Federation: Course of Action Analysis (COAA) Using a C4I-Simulation InterfaceDavid L. ProchnowRonald A. KingJames E. HarringtonThe MITRE Corporation7515 Colshire DriveMcLean, VA  22102prochnow@mitre.org HYPERLINK mailto:dseidel@mitre.org rak@mitre.orgjim@mitre.orgBen T. RegalaJonah W. SonnensheinMetron, Inc.512 Via De La ValleSolana Beach, CA  92075 HYPERLINK mailto:regala@ca.metsci.com regala@ca.metsci.com HYPERLINK mailto:sonnen@ca.metsci.com sonnen@ca.metsci.comJohn J. DalyJennie A. WombleITT IndustriesNaval Research LaboratoryWashington, DC  20375jjdaly@ninja.nrl.navy.milKeywords:HLA, NSS, GCCS, C4I-Simulation, COA Analysis, COAAAbstract: The integration of C4I systems and simulations has been an important topic for a number of years.  Typically, such interfaces are developed to populate C4I systems with data from simulated environments.  However, a largely unexplored benefit of interfacing C4I systems and simulations is the ability to initialize a simulation with real-world data received from a C4I system.  By doing this, a simulation can be executed to perform course-of-action analysis (COAA) based on data being fed from a real-world system.  Currently, this concept is being explored in the NSS-GCCS federation, which links the Naval Simulation System (NSS) with the Global Command and Control System (GCCS) using the Department of Defense’s High Level Architecture (HLA).  The Naval War College’s Global 2001 exercise will employ the NSS-GCCS federation to support player decisions through the use of simulation to analyze different courses of actions (COAs) using user-selected tracks from GCCS’s Common Operational Picture (COP).Although the initial use of the NSS-GCCS federation will feature a one-way flow of data from GCCS to NSS, there is a grander vision to eventually develop a two-way interface where the results of the COA runs are sent back to GCCS and displayed as part of its COP.  Furthermore, the ultimate goal is to embed a COAA capability into GCCS, so that these analytic capabilities are available to all users of GCCS.IntroductionThis paper discusses the integration of the Naval Simulation System (NSS) and the Global Command and Control System (GCCS) into a High Level Architecture (HLA) federation.  Over the past several years, many efforts such as this have interfaced simulations with C4I systems [TIM].  In the large majority of these cases, most of the data flows from the simulation to the C4I system.  This is especially true in training domains, where a simulated environment is sent to a real-world system, so that the trainee operates in a realistic environment, rather than at a station specifically developed to accommodate the simulation.  However, a largely unexplored benefit of interfacing C4I systems and simulations is to initialize a simulation with real-world data, so that analyses can be performed on current situational data.  The NSS-GCCS federation supports this capability.  This creates a dynamic environment in which Course Of Action Analysis (COAA) can be performed whenever the GCCS operator identifies a situation in which one of many different options must be selected for a particular mission.  The current NSS-GCCS work is the tip of the iceberg, as this type of analysis capability has potential use for future C4I systems, especially if the simulation and COAA capability can be embedded into the operational system.1.1 Previous NSS-GCCS FederationPrior to this year’s effort, NSS and GCCS had previously been integrated in an HLA federation.  In the previous NSS-GCCS Federation, the NSS model engine drove the GCCS terminal for training purposes. Scenarios were developed in NSS and then run with the NSS model engine federate. Options existed to output GCCS Track data for all assets in NSS with perfect accuracy (Ground Truth output), or to output a given commander’s perception of hostile tracks (Tactical Picture output.) Attribute update rates were specified for air and non-air tracks for both output options.When sending out attribute updates for NSS assets, the NSS model engine would convert the necessary data from its internal representation to the expected GCCS format. In addition to receiving data from NSS, GCCS operators could direct NSS assets to alter their motion according to specified formations. These orders were sent by GCCS to NSS as interactions over the RTI. NSS would unpack the formation order and edit the motion of the specified assets accordingly. The motion updates would in turn be visible to the GCCS operator once subsequent asset attribute updates were made.1.2 Global 2000 ExperienceThe Global Wargame is an annual wargame hosted at the Naval War College (NWC) in Newport, RI.  The purpose of the game is to explore advanced concepts and systems.  NWC used NSS to support the game umpires in Global 2000.  The umpires monitor a Common Operational picture (COP) that is synthetically generated by implementing the Blue and Red sides’ Courses of Action (COAs).  As Blue and Red forces move towards each other, the umpires must decide what interactions (e.g., detection, engagement) will occur.  A typical event is a carrier battle group crossing paths with a hostile submarine.   The umpires would ask the NSS operators to run a scenario and generate the outcome of this event (e.g. who detected whom, who shot whom).  In order to build the NSS scenario, the NSS operators would have to physically look at the COP and manually translate the COP into an NSS scenario.  This process was time consuming and was susceptible to inaccuracies in the translation.  1.3 Global 2001 RequirementsThe experience from the Global 2000 game prompted a requirement for an automated translation of the COP data into NSS.  As NSS and GCCS had already been integrated using HLA, the logical conclusion was to build upon this interface to transfer data from GCCS to NSS in order to initialize the simulation scenario for Global 2001.  Because the Global wargame involves hundreds of persons from several nations, NWC requested that we take a low-risk approach that could be enhanced in the future.NSS-GCCS Concept of OperationsThe NSS-GCCS federation purpose is to facilitate training at the Naval War College (NWC) in Newport, Rhode Island.  The federation consists of two primary federates – the Global Command and Control System (GCCS) and the Naval Simulation System (NSS).  The GCCS version used is the current Maritime version, GCCS-M, henceforth simply called GCCS.  These federates actually have supporting components, called Ambassadors, which perform the translation between the existing programs and the Runtime Infrastructure (RTI).  This federation receives the Common Operational Picture (COP) from the Joint Semi-Automated Forces (JSAF) system through a gateway connection to GCCS.  Then GCCS and NSS communicate to each other through their respective Ambassadors using the High Level Architecture (HLA) and RTI.  Once data is in the NSS Ambassador, the NSS operator can import tracks to the NSS Course-of-action Analysis Tool (CAT), which performs multiple runs for a given course of action. Figure 1 shows the logical diagram of the federation. Figure 1.  NSS-GCCS Federation SchematicThe purpose of the federation was to allow participants at the NWC to perform Course of Action (COA) analysis for their scenarios more quickly and efficiently during the Global ’01 exercise in July 2001.  Previous exercises used manual entry of the COP information into NSS for analysis.  Providing the information through the RTI is much faster and more accurate than manual means. This allows the participants to analyze more scenarios during the time allotted for the exercise, and running more replications of each scenario gives the participants more precise Measures of Effectiveness (MOEs) for each of their scenarios.  The initial federation only provides for one-way traffic – from GCCS to NSS.  Possible return communications from NSS showing the results of the COA analysis were discussed but not implemented for the first release.2.1 Selection of Tracks to be AnalyzedIn this federation, the GCCS operator selects JSAF-generated tracks from the GCCS Common Operational Picture (COP).  The operator does this using the normal GCCS method of selection, using either the “rubber band” around the desired tracks in the COP, or by selecting tracks individually.The selected tracks form a Track Group and are transmitted using the normal GCCS method: Over-the-Horizon (OTH) Gold. The GCCS operator can select multiple track groups and the same track can be in multiple groups.  The OTH Gold messages travel from GCCS to the GCCS Ambassador where it is parsed and formatted for delivery through the RTI to NSS for analysis.After a track group is selected and delivered to the NSS Ambassador, GCCS continues to send updates to the NSS Ambassador through the RTI as events occur.   These updates are stored in the NSS Ambassador.  If the analyst desires to use the newer data, the CAT operator will invoke a command to pull that information from the NSS Ambassador to the CAT terminal. It will overwrite the existing data in the CAT and form the basis for a new COA analysis.  The information will remain persistent in the CAT database until the operator explicitly requests new updates of a specified track group.  The operator should remember which track group is currently being analyzed on that particular platform.Also, the GCCS operator can manually insert new tracks into a current group.  These tracks will then be transmitted to the NSS Ambassador with the usual updates where they become available to the CAT for any subsequent COA analysis.If a track is destroyed in the GCCS COP, the GCCS operator will send a “DeleteObject” call through the RTI to NSS.  A track can also be explicitly removed from a track group if the user no longer wants it to be part of the analysis for that group.  When a track is no longer a part of any track group, GCCS removes the object from the RTI and ceases updates for the track.  At all times, the tracks will remain in the GCCS Track Data Base Manager (TDBM).2.2 Course of Action AnalysisNSS performs the COA analysis with the track groups delivered from GCCS through the RTI to the CAT terminal, via the NSS Ambassador federate.  The CAT provides the graphic user interface (GUI) through which the tracks are viewed.  The CAT also gives the NSS operator the ability to add or delete supplemental information before or during the analysis.  As track updates arrive from GCCS, they are stored in the NSS Ambassador, and the NSS operator can decide to either use or ignore them.  If used, they overwrite the older track information in the CAT and a new analysis can be run with the updated data.  In all cases, the NSS Ambassador holds the most current information on each track.The goal of this federation’s use in the Global ’01 exercise is to allow as many different scenarios to be run as time allows, with more analytical replications per scenario.  Previous experience with NSS has shown that 30 replications are ideal for precise MOE statistics and this number served as the practical maximum for Global ’01 The MOE statistics of each replication run in the CAT are stored in a PC-based Microsoft Excel spreadsheet.  These can be stored or printed for distribution and analysis.Federate OverviewsAs previously indicated, the NSS-GCCS federation contains two federates: NSS and GCCS.  When we tested this federation, we also found it useful to employ two special-purpose federates to dynamically observe the federation activities.  This section describes the two primary federates, as well as the separate federates used to support testing and integration.3.1 Naval Simulation System (NSS)NSS is currently under development as a Modeling and Simulation Tool to support mission area and multi-warfare analysis.  The NSS development program is managed by SPAWAR (PMW 153) under sponsorship of CNO (N6M) and CINCPACFLT (N64). NSS will be used to support Naval and Joint operations course of action (COA) decision-making, Fleet exercises and experiments, and C4ISR analyses/assessments. The intended user community includes CINCs, CJTFS, Naval Component Commanders, Task Force/Group Commanders, Battle Doctrine Laboratories, System Commands, and R&D Center activities  [SPA1] [SPA2] [SPA3].NSS has been under development since 1994 and has already completed a number of successful analysis support efforts for the Fleet and DOD acquisition communities. In FY00, five NSS software components achieved DII COE Level 5 Compliance as segments in the SPAWAR IT-21 C4ISR architecture initiative.  These and the remaining NSS software components are slated in FY01 for DIICOE Level 7 Compliance, with the ultimate goal of Level 7 compliant segmentation in the Global Command and Control System, Maritime (GCCS-M).The NSS software architecture as a GCCS-M aggregate segment is presented in Figure 2 using the DoD Technical Reference Model format.   As an aggregate segment in GCCS-M, NSS will have direct access to GCCS-M C4ISR applications and databases.  For the Global games, the NSS Client that is used is the Course of Action (COA Analysis Tool (CAT).  The CAT enables the user to simulate and evaluate multi-warfare scenarios.Figure 2.  NSS Architecture3.2 Global Command and Control System (GCCS) AmbassadorThe Global Command and Control System (GCCS) and the Defense Information Infrastructure, Common Operational Environment (DII COE) were developed by the Department of Defense to unify strategic command and control functions into one software suite that could be used by all Joint forces. It contains the force planning and readiness assessment applications required by battlefield commanders to plan and execute military operations. Its Common Operational Picture (COP) correlates and fuses data from multiple sensors and intelligence sources to provide warfighters the situational awareness needed to be able to act and react decisively.The GCCS Ambassador is a DII-COE software application, that when installed as part of the GCCS, provides two-way links between the embedded RTI and the DII COE Services, databases and C4I Mission Applications [LAY].  Figure 3 shows a high-level depiction.  The GCCS Ambassador interprets the FOM and manages simulated data distribution within the C4I system.  It enfranchises the C4I system, in this case GCCS, as a C4I federate of the NSS-GCCS federation.Figure 3. C4I Federate Architecture3.3 Federation Management Tool (FMT)The Federation Management Tool (FMT) controls and monitors a federation execution.  It accomplishes this with a sophisticated graphical user interface that displays time, object, and declaration information. In addition, the FMT provides commands to allow a user to stimulate or modify federate actions.  The FMT interfaces with the Runtime Infrastructure (RTI) by using the HLA’s Management Object Model (MOM) data, including extensions to the standard MOM.  This effort used a version of the FMT that is somewhat different than what is publicly available from DMSO and has enhancements for capturing and logging particular data.  For our purposes, the FMT served to verify the publication and subscription sets of our federates, examine counts of objects owned and reflected, and record the throughput of updates for individual object classes.  On occasion, we also used the FMT to turn on and capture service-logging data, which is comprised of detailed data, including names and argument values, of RTI services invoked by a federate and RTI callbacks received by a federate.3.4 Simulation Interoperability Test Harness (SITH)The Simulation Interoperability Test Harness (SITH) was initially developed by The MITRE Corporation for the Joint Simulation System (JSIMS) program and was designed to act as a surrogate federate during testing.  The SITH operates by first reading in a specified FOM and associating object attributes and interaction parameters with specific data types.  The user can also configure the SITH for different data marshalling techniques (big-endian, little-endian, XDR, etc.). Although it contains code to handle specific elements of the JSIMS Federation Object Model (FOM), we found that the SITH was very modular and easily adaptable to our needs.  If a parser does not already exist, it is relatively easy to write new methods to process other complex data types.  We were able to convert it for use with this federation through some very small modifications to configuration files.The SITH supported our integration efforts by receiving data from the RTI, converting it to a readable format, and echoing it to the screen.  In effect, it served as an objective mediator to determine exactly what data was transmitted through the RTI.  The sender could verify that the data was delivered through the RTI as intended and the recipient could verify the input.  This data collection ability is just one of many capabilities in the SITH and was invaluable during the initial testing for the NSS-GCCS federation.  It is simple to set up and use and we found it simpler to use than other federates designed for this purpose.NSS-GCCS Federation DesignThe NSS-GCCS federation design allowed significant reuse of the GCCS Ambassador and its Federation Object Model.  For NSS, a new NSS ambassador was designed along with a modification to the NSS Course-of-action Analysis Tool to allow importing track data received from the HLA federation.4.1 Federation Object ModelThe NSS-GCCS federation employed a Federation Object Model (FOM) that reused object classes from three federations in which the GCCS Ambassador has participated.  This FOM contains data elements that are based on the GCCS track attributes.  In other federations, GCCS has received data for these object classes to populate its track database, but in this case, GCCS published this data. 4.2 GCCS Ambassador DesignThe GCCS Ambassador provides the interfaces to the RTI, DII COE Kernel, Infrastructure Services and Common Support Applications. This component of the interface is common for all Ambassadors for DII COE compliant C4I systems. The GCCS Ambassador interacts specifically with the GCCS Track Database and supporting services, The GCCS Ambassador is designed to accommodate many different federations with one set of software: there is one GCCS Ambassador that runs with multiple federations utilizing the C4I FOM. It is object oriented in design, and at runtime, the user need only specify which object set to use for the current federation.Prior to the NSS-GCCS federation, the FOM contained Platform (air and sea) and Unit (land) objects to represent the tactical picture. For this federation, The FOM was extended by creating Platform and Unit Real World and Simulated objects. The GCCS Ambassador published the Real World objects and NSS subscribed to them. The simulated objects could later be used to send data back from NSS to GCCS while not modifying the real world C4I COP.The operator uses the standard GCCS User Interface capabilities to select a group of tracks, give the group a name and transmit them through a null port. This allowed the GCCS Ambassador to utilize the GCCS APIs to capture the transmitted message, parse it and transmit the necessary information over the RTI using the FOM defined objects. Using a null port prevents the message from being transmitted over the network to other GCCS machines.4.3 NSS Ambassador DesignThe NSS Ambassador effectively serves as the intermediary between the NSS CAT Client and the federation. It obtains GCCS Track information from the federation and passes it along to any CAT operator that requests it. Consequently it provides a simple yet effective method of populating an NSS scenario with existing GCCS data.The Ambassador is designed to run as a background process on an NSS Server machine. It subscribes to GCCS Track objects (published by the GCCS Ambassador) in the RTI and maintains an internal representation of the data it receives. The NSS Ambassador is designed to handle any number of NSS CAT Client connections, which are opened via a specialized dialog in the CAT. Once a connection is opened, the Ambassador will send updates of the current list of Track Groups to the CAT terminal. These updates are sent only when a Group is added or removed (as determined by updates to the Track Group attribute associated with each GCCS Track object.) This list of Groups is subsequently made available to the CAT operator.The CAT operator may at any time request an updated list of the GCCS Tracks belonging to a specified Group. The Ambassador responds to such requests by packaging up the necessary data for all specified Tracks and transmitting it to the CAT terminal. The CAT terminal will then display the data to the user for editing prior to importing it into an NSS scenario.4.4 NSS Course-of-Action Analysis Tool (CAT) DesignIn order to import the GCCS tracks into the NSS CAT, the user selects an HLA Track Importer function from the Tools menu.  This launches a window where the user sees the GCCS tracks on the left and the potential NSS objects that it will map to on the right. (Figure 4).Figure 4.  Mapping of GCCS Tracks to NSS ObjectsNSS has a mapping table that determines the default mapping from GCCS to NSS.  For example, any GCCS track with a Threat value of “FRD” will be mapped to the NSS “Blue” alliance.  The user can either accept the mapping choices or individually change any mapping target.  The mapping process involves associating a GCCS track with these NSS objects:An NSS alliance (Blue, Red, White, etc.)An NSS force commander.  The force commander objects provide the force structure for the allianceA unique asset nameAn NSS asset class.  Each GCCS track represents a platform or (land) unit.  NSS will map that track to an asset class in the NSS database.  NSS asset classes are the representation of real world platforms, units, and facilities.An NSS tactics table.  Tactics tables are the means in which assets respond to their tactical picture.The mapping function has a memory feature so that it remembers a mapping.   For example, if the analyst maps GCCS Track T to the NSS set (Alliance A, Force Commander B, Name C, Asset Class D, Tactics Table E), then that mapping will be “remembered” and will be automatically displayed as the default the next time the analyst imports GCCS Track A.Technical IssuesThrough our design and testing phases, we encountered several technical issues.  These are described in the subsections below.5.1 Data Required to Initialize NSSThe GCCS to NSS mapping automatically generates the majority of the data required to run an NSS scenario.  However the analyst must manually enter some items required by a scenario.  The categories of items required to run an NSS scenario are:Alliances (by default each scenario contains a Blue, Red, and White alliance)Commanders and commander tactics (requires user input).Assets and asset tactics (automatically generated by the mapping).Asset motion plans (automatically generated by the mapping).Communications plans (requires user input)Measures of Effectiveness (MOEs) (requires user input)The time required by the analyst to set up a scenario will depend upon the complexity of the scenario.  However, many of the small-scale scenarios that were built during the Global 00 game can now be initialized in less than a minute using the NSS-GCCS federation.5.2 Data Requirements for Testing NSS-GCCS InterfaceIn order to test the NSS-GCCS federation, data must reside in the GCCS Track Data Base Manager (TDBM).  Because we had limited JSAF expertise and limited access to the JSAF developers, we were unable to get JSAF and its C4I Gateway to send data to GCCS at our early test events.  However, GCCS contains a reconstruction tool, or Recon, which replays data from a previous execution.  We found that this served as a useful means for stimulating GCCS with track data.Of course, using JSAF to stimulate GCCS was still preferred and was used at our last test prior to the exercise.  It was critical to know what data JSAF was sending in order to set up the CAT to make appropriate mappings between the GCCS objects and the NSS objects.5.3 Crash RecoveryDuring our testing, in order to support the Global exercise with a high degree of confidence, we examined what steps would be necessary should any of the federate components suffer a fatal error. The only recourse from a total failure is to restart all the components, reselect the track groups, and redo any COA analyses that were in progress at the time of the failure.  Other less severe failures are more easily accommodated.If the connection from JSAF to the GCCS is lost, the GCCS retains the most recent current COP in its internal Track Database Manager (TDBM).  These tracks may continue to be selected and analyzed until the connection is restored and a new COP is generated from JSAF.In all cases, the smoothest method of reinitializing a federate is for it to resign and rejoin. If the GCCS Ambassador resigns from the federation, the updates to the current track groups will no longer be sent through the RTI to NSS.  However, the last update remains at the NSS Ambassador and can still be selected for analysis at any of the CAT terminals.  The GCCS also has the capability to remember which groups have been selected and will send updates after the GCCS Ambassador rejoins the federation. If the NSS Ambassador resigns, the information already sent to the CAT terminals is not affected and can still be analyzed.  As soon as any track group is delivered to a CAT terminal, it can be stored into (and retrieved from) the NSS database without further interaction with the NSS Ambassador.  Obviously, the NSS Ambassador will not receive any updates to current track groups, nor will it be able to receive any new track groups until it rejoins the federation.Of course, in some cases, a federate is unable to resign gracefully and simply crashes.  If the NSS Ambassador, FMT, or SITH crashes, the federate simply has to be removed from the federation through the RTI Console program before rejoining the federation.  We did this many times during our testing without any adverse affect to the federation.  However, if the GCCS Ambassador crashes, the RTI becomes corrupted because the objects owned by the GCCS Ambassador do not get deleted properly.  This forces the federation to be restarted.  Track groups previously extracted from the NSS Ambassador may continue to be analyzed, but no updates or new groups will be delivered until the federation is restarted.Future PlansAs previously stated, this fiscal year’s NSS-GCCS effort purposely invoked a low-risk approach in order to ensure success at the Global 2001 exercise.  For the future, the authors believe that this federation should evolve into a rich two-way interface between NSS and GCCS, ultimately leading to an embedded simulation capability in GCCS.  For 2002, a logical next step is to develop a powerful two-way interface between GCCS and NSS.  The current system produces COAA results at the NSS workstation and exports data to Excel spreadsheets for subsequent analysis.  The federation can be enhanced to send the results of the COAA runs back to GCCS.  The mechanics of sending data from NSS to GCCS are simple, but there are some very challenging aspects to this next step.  We must determine what data is sent back to GCCS and how GCCS will display the data.  As NSS is a stochastic simulation, it is executed multiple times for each COA.  It is unlikely that an operator would want to view the results of each iteration associated with a single COA.  Instead, the analyst may want to view the average results, or perhaps results from the iteration that is deemed to be the most representative run for the COA.  However, to analyze risk, the user may also want to know the variability associated with a COA and therefore also want to view the best and worst cases.  At the GCCS Common Operational Picture (COP), the simulated results could be displayed graphically, but some mechanism is needed to ensure that the simulated entities are distinguished from the real-world entities.  There may be some Measures of Effectiveness (MOEs) produced by NSS that are not conducive for graphic display at GCCS, so we must determine how to best make that data available to the user.As GCCS is a component of the Defense Information Infrastructure Common Operating Environment (DII COE) and NSS is also becoming a segment of DII COE, the evolution of this system can eventually lead to a simulation capability embedded into GCCS for course-of-action analysis by operators of the C4I system.  For such a capability to exist, it becomes critical that the GCCS COP user distinguishes real entities from simulated entities.In his fall 1999 paper, Tolk proposes requirements for a simulation to be used in a decision support system [TOLK].  According to Tolk, four conditions must be met. One of these conditions, that the simulation state be initialized by the C4I system, is met in the current state of the NSS-GCCS federation.  Another condition, that all relevant operational and physical processes be modeled adequately for the problem domain, is probably true for the Navy’s usage of GCCS though not necessarily for all GCCS users.  Other conditions specified by Tolk are that simulated entities exhibit intelligent behavior through automatic order generation, and that adequate and validated data exists for the simulation.  We believe that all these conditions could be met as NSS-GCCS federation matures.  However, there will probably always be arguments about the validity of simulation algorithms and data, especially if users of C4I systems use embedded simulation capabilities in ways not anticipated.Similar WorkIt should be noted that others are also developing C4I-simulation linkages to support COAA.  For instance, the Defense Modeling and Simulation Office (DMSO) is sponsoring a similar effort that links the Integrated Theater Engagement Model (ITEM) with GCCS, for planned usage in Korean exercises in 2002.  ITEM supports joint warfare campaign analysis.  The ITEM-GCCS federation is still at the preliminary stages at the time of this writing.Also, in Fort Leavenworth, Kansas, US Army TRAC is developing prototype interfaces for initializing modeling and simulation systems with the Army Battle Command System (ABCS) [PITT]. ConclusionsBased on our NSS-GCCS federation work, we can make some general conclusions:Initialization of a simulation from a C4I system through an automated interface provides an effective basis for course-of-action analysis.   COAA can be conducted in a timely and accurate manner on the most current set of data in the C4I system.This work may be the first step in placing a COAA capability into C4I systems themselves.  If a C4I system could directly invoke a simulation or embed a simulation capability, then users of these systems could perform COAA to support real-world operations.To embed simulations into C4I systems, some difficult technical challenges must still be met.  Simulations require a significant amount of data, and it is difficult to input all required data from a C4I system.  Also, if a C4I system invokes a simulation, there must be some means of getting data back from the simulation and displayed to the user in a format that is understandable and usable by the C4I operator.  This is especially true for a stochastic simulation that is executing a set of runs rather than a single run.Other federations that do not have direct access to the GCCS track database could access this data by reusing elements from this federation.  The GCCS Ambassador has now been used with three separate federations, but only minimal changes have been made to its FOM.  It would be relatively simple for a federation to access GCCS track data by reusing the GCCS Ambassador from this effort.AcknowledgementsThe authors would like to acknowledge several organizations whose support made this work possible.  First of all, DMSO realized that the lessons learned from this effort could have wide-ranging applicability and consequently funded the project.  The Naval War College served as our customer and provided the operational expertise needed to develop a system to support the Global exercise.  In addition, both the Space and Naval Warfare Systems Command (SPAWAR) and the Naval Modeling and Simulation Management Office (NAVMSMO) supported our use of NSS in this federation and provided help where needed.AcronymsABCSArmy Battle Command SystemCATCourse of Action Analysis ToolCOACourse of ActionCOAACourse of Action AnalysisCOPCommon Operational PictureDII COEDefense Information Infrastructure Common Operating EnvironmentDMSODefense Modeling and Simulation OfficeFMTFederation Management ToolFOMFederation Object ModelGCCSGlobal Command and Control SystemHLAHigh Level ArchitectureITEMIntegrated Theater Engagement ModelJSAFJoint Semi-Automated ForcesJSIMSJoint Simulation SystemMOEMeasure of EffectivenessMOMManagement Object ModelNRLNaval Research LaboratoryNSSNaval Simulation SystemNWCNaval War CollegeRTIRuntime InfrastructureNAVMSMONaval Modeling and Simulation Management OfficeSITHSimulation Interoperability Test HarnessSPAWARSpace and Naval Warfare Systems CommandTDBMTrack Data Base ManagerBibliography[LAY]  Layman, G., Daly, J., Furness, Z., Womble, J., “C4I-Simulation Interoperability Using the DII COE and HLA,” Proceedings of the Spring 2001Simulation Interoperability Workshop, March 25-30, 2001. [PITT] Pittman, J., “Army Program Area ReviewFort Leavenworth Site,” Internal MITRE Briefing, February 26, 2001.[SPA1] SPAWAR Systems Center, “NSS Operational Requirements Document,” Technical Document Draft, December 2000.[SPA2] SPAWAR Systems Center, “NSS Concept of Operations (Draft),” Technical Document Draft, February 2001.[SPA3] SPAWAR Systems Center, “NSS System Requirements Specification,” Technical Document Draft, February 2001[TIM] Timian, D., Hieb, M., Lacetera, J., Tolk, A., Wertman, C., Brandt, K., “Report Out of the C4I Study Group,” Proceedings of the Fall 2000 Simulation Interoperability Workshop, September 17-22, 2000.[TOLK] Tolk, A., “Requirements for Simulation Systems When Being Used as Decision Support Systems,” Proceedings of the Fall 1999 Simulation Interoperability Workshop, September 12-17, 1999.Author BiographiesDAVID L. PROCHNOW is a Lead Software Engineer in the Information Systems and Technology Division at the MITRE Corporation and is currently the technical lead on several High Level Architecture programs.  At MITRE, Mr. Prochnow previously contributed to the ALSP project and to logistics simulation efforts. While at BDM International and Control Data Systems, Mr. Prochnow developed software for various corps-level and theater-level wargames.  He received a B.S. in Computer Science from the University of Virginia in 1983.RONALD A. KING is a Lead Software Systems Engineer in the Information Systems and Technology Division at the MITRE Corporation and currently supports development and testing for several HLA projects.  Previously at Hughes and Raytheon, Mr. King served as Quality Manager and Acceptance Test Manager for several NASA and Department of Defense projects. At McCabe and Associates, he provided consultation to numerous commercial and defense clients regarding software testing and quality assurance methodology. He received a B.A. in Communications from American University in Washington, D.C. and an M.E.S. in Computer Science from Loyola College in Baltimore.JAMES E. HARRINGTON is a Senior Software Engineer with the MITRE Corporation and currently works for MITRE’s Advanced Information Technology Center in the area of computer modeling and simulation.  Since 1996, he has worked specifically in the area of Simulation-to-C4I mediation as the lead developer of the SCG tool. He received his Bachelor of Science in Computer Science from Virginia Polytechnic Institute and State University in 1991 and his Master of Science in Computer Science from the Johns Hopkins University in 1995.JOHN J. DALY is a Research Engineer with ITT AES at the Naval Research Laboratory, and works in the Command and Control Development Team with responsibilities for C4I/Simulation Interoperability, the development of an Electronic Warfare Mission Application for the GCCS-Maritime, and Embedded Training Technologies for C4I. A retired Navy Officer, John previously worked on the staff of the Director, Defense Information Systems Agency, as well as in the Modeling and Simulation Directorate on C4I and simulation interoperability.JENNIE A. WOMBLE is a Senior Software Engineer with ITT AES at the Naval Research Laboratory, and works in the Command and Control Development Team in GCCS and GCCS-Maritime software developments. She has over 15 years experience in developing leading edge technology for the Navy and is the principal software developer of the GCCS Ambassador. She received a B.S. in Natural Resource Management in 1985 and a M.S. in Geographic Information Systems and Remote Sensing in 1987 from Virginia Polytechnic Institute and State University.BEN T. REGALA is a Senior Analyst at Metron, Inc. where he supports operations analysis activities using the Naval Simulation System.  He received his Bachelors degree in Mathematics and Physics from Northwestern University in 1984 and his Doctorate of Philosophy in Applied Mathematics from Brown University in 1989.JONAH W. SONNENSHEIN is a Software Analyst at the Simulation Sciences Division of Metron, Inc., where he works on the development of the Naval Simulation System. He has been involved in several previous HLA efforts in which NSS has participated, including the Pegasus and GCCS-Pegasus federations. He received his Bachelor's degree in Computer Science from Brown University in 1998.	 EMBED PowerPoint.Show.8  GCCS