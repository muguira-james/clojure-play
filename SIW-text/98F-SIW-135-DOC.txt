LESSONS LEARNED FROM HUMAN-IN-THE-LOOP TRAINER HLA IMPLEMENTATIONGlenn GrossPatricia DevineLockheed Martin Federal Systems – Manassas9500 Godwin DriveManassas, VA 20110703-367-4885, 703-367-4967 HYPERLINK mailto:g.gross@lmco.com g.gross@lmco.com,  HYPERLINK mailto:patricia.devine@lmco.com patricia.devine@lmco.com Keywords:ABSTRACT: Distributed simulation research using the High Level Architecture (HLA), the Runtime Infrastructure (RTI) and an acoustics simulation object model was performed by Lockheed Martin Federal Systems in Manassas, VA.  This research connected two high fidelity acoustics trainers using our defined HLA object models and the DMSO provided RTI.  The scenarios selected included the following entity types: US fast attack submarines, opposing force (OPFOR) submarines, surface ships and aircraft.  As additional entities were added to the scenario, timing, CPU and network bandwidth measurements were made.  This paper describes the lessons learned from using the HLA for real-time high fidelity human-in-the-loop simulations.  Specific problem areas are detailed and corrective actions are suggested when developing/building HLA simulations. IntroductionThis paper describes research to test the HLA Government-off-the-Shelf software and defined processes while achieving HLA interoperability for the legacy Submarine Multi-Mission Team Trainer (SMMTT), Acoustics trainer.  SMMTT Acoustics, is a high fidelity acoustic trainer currently deployed at shore-based trainer schoolhouses that supports the AN/BQQ-5 and AN/BSY-1 submarines with the Acoustics Rapid COTS Insertion (A-RCI) upgrade.  This legacy system does not have Distributed Interactive Simulation (DIS) support.  This paper chronicles the process to convert a legacy system without DIS support to HLA compliance.In our research, the addition of the HLA Network Interface Unit (NIU) did not adversely affect the fidelity or operation of the SMMTT trainer.  The HLA NIU is a non-intrusive intelligent gateway solution that added very little CPU, network bandwidth and latency.  The additional latency was transparent to the user and within acceptable tolerances.  However, minor problems were found during the implementation of the HLA processes and RTI support was consulted.    IR&D ObjectivesThis research was funded using IR&D funding with the following objectives:Prepare the acoustics segment of this trainer for HLA based research with other trainers including the SMMTT, Combat Control segmentProvide HLA compliance, a requirement of the SMMTT trainer Establish a basis for HLA inclusion in other  trainer programsOne basic tenet of this research was to minimize the changes needed in the SMMTT trainer to support HLA.  Expensive software development, testing efforts and operating system incompatibilities were avoided by isolating the RTI and HLA compliance issues in another computer separated from the SMMTT trainer architecture; we called this computer the HLA Network Interface Unit (NIU).  The NIU software was built for reuse and extensibility and contained all of the Simulation Object Model/Federation Object Model (SOM/FOM) implementation code needed to interface with the RTI.HLA Process Lessons LearnedHLA RulesThere are 10 HLA rules as documented in DMSO’s ‘Annotated Briefing on the DoD High Level Architecture for Simulations’, dated April 1997, that must be satisfied for HLA compliance.  After each rule is defined, our compliance rationale is stated.1. ‘Federations shall have an HLA Federation Object Model (FOM), documented in accordance with the HLA Object Model Template (OMT)’.We used the Real-time Platform Reference Federation Object Model (RPR-FOM) as the initial basis of our SMMTT Simulation Object Model (SOM) and FOM.  This approach is consistent with leveraging the RPR-FOM as a reference FOM to start the process of building a SOM and FOM.    The object model currently supports OMT version 1.3.  We modified the RPR-FOM to add explicit object types representing our acoustic contact types and some acoustics emissions interactions.  We also deleted extraneous objects and interactions.2. ‘In a federation, all representations of objects in the FOM shall be in federates, not in the runtime infrastructure (RTI)’.The Government-off-the-Shelf (GOTS) RTI (version 1.0.2) was used for this research without change.  There is no representation of objects in this RTI.  3. ‘During a federation execution, all exchange of FOM data interchanged among federates occurs via the RTI’.  The RTI is the only data transport mechanism between the trainers in our research.  All objects and interactions for our federates used the RTI for communications.4. ‘During a federation execution, federates shall interact with the runtime infrastructure (RTI) in accordance with the HLA interface specification’.We have ensured that RTI service functions are handled.  HLA compliance will be tested and certified in a future task using the official compliance testing method.5. ‘During a federation execution, an attribute of an instance of an object shall be owned by only one federate at any given time’.  We maintained ownership for all objects and their associated attributes.  All objects are owned by only one federate at a time.  We did not transfer ownership of attributes in this research.    6. ‘Federates shall have an HLA Simulation Object Model (SOM), documented in accordance with the HLA Object Model Template (OMT)’.We used a modified RPR-FOM, which is compliant with the OMT.  We used a Windows based Object Model Development Tool (OMDT), (version 1.39), from AEgis to document our SOM.  7. ‘Federates shall be able to update and/or reflect any attributes of objects in their SOM and send and/or receive SOM object interactions externally, as specified in their SOM’.The design of our research ensured that all remote and local objects’ attributes in our SOM could be sent and received.  The trainer’s internal models of these objects were updated with each attribute update.    8. ‘Federates shall be able to transfer and/or accept ownership of attributes dynamically during a federation execution, as specified in their SOM’.  This rule was not tested since our SMMTT SOM did not specify a transfer of ownership.  Our future plans include ownership management testing.9. ‘Federates shall be able to vary the conditions (e.g. threshold) under which they provide updates of attributes of objects, as specified in their SOM’.This rule was not tested since our SMMTT SOM did not specify a variance in conditions.10. ‘Federates shall be able to manage local time in a way which will allow them to coordinate data exchange with other members of a federation’.Timing in the SMMTT trainer is best wall clock approximation.  In this research, all federates used the same timing algorithm.  With non-timing-regulating and non-time constrained set, these federates implement their own timing mechanisms independent of the RTI.  Other advanced HLA federation implementations could be implemented in the future.   HLA Interface SpecificationThe HLA Interface Specification must be satisfied for HLA compliance.The HLA Interface Specification, version 1.1, provided by DMSO, was used to understand the RTI.  We used the RTI Application Programmer’s Interface (API) and the DMSO provided RTI (version 1.0.2) in our research.The RTI functions from each of the six RTI management categories and RTI Support Services that we used in our research are listed below.  Federation ManagementThe following methods were used in our research:CreateFederationExecutionDestroyFederationExecutionJoinFederatonExecutionResignFederationExecutionDeclaration ManagementThe following methods were used in our research:PublishObjectClassPublishInteractionClassSubscribeObjectClassSubscribeInteractionClass ControlUpdatesControlInteractionsObject ManagementThe following methods were used in our research:RequestIDRegisterObjectUpdateAttributeValuesReflectAttributeValuesDiscoverObjectSendInteractionReceiveInteractionDeleteObjectRemoveObjectOwnership ManagementThis group of methods is not currently supported.Time ManagementThe following methods were used in our research:RequestFederationTimeRequestFederateTimeTimeAdvanceRequestTimeAdvanceGrantSMMTT is a best wall clock approximation based trainer. Advanced HLA time management functions were not implemented in this research and are planned for the future.Data Distribution ManagementData Distribution Management (DDM) has not been incorporated into RTI version 1.0.2.  The RTI, version 1.3, for the Hewlett Packard UNIX variant, HPUX, that supports DDM has not been released by DMSO.  DDM incorporation is planned in the future.RTI Support ServicesThe following support services were used in our research:GetObjectClassHandleGetAttributeHandleGetInteractionClassHandleGetParameterClassHandleSetTimeRegulatingSetTimeConstrainedTickInterface Specification Lessons LearnedThere were integration issues with the DMSO RTI for our GFE Hewlett Packard (HP) computers (model J210) running HPUX.  Our initial design planned to use the RTI as a middleware product in the SMMTT ICS to minimize latency.  To accomplish this, the RTI would need to be integrated into the ICS software.  The operating system, HPUX 9.07, selected for our research because of availability of assets was a huge stumbling block.  The RTI only supported HPUX 10.20 while our Instructor Console Subsystem (ICS) ran under HPUX 9.07 because the GOTS Joint Maritime Command Information System (JMCIS) product required HPUX 9.07.  JMCIS is a key requirement in our ICS and could not be replaced.  We tried various approached to work around this integration issue.  First, we contacted the RTI Help Desk who advised us to upgrade the HPUX operating system.  This could not be done.  Next, we attempted to get the source code from the RTI Help Desk and DMSO to recompile and test it under HPUX 9.07.  We offered to return the new 9.07 product to them, at no charge for distribution to other RTI users with the same problems.  This recompilation and test activity would have been at no cost to the government.   The source code for the RTI could not be released.  Our final approach was to re-architect the research to add a HP computer running HPUX 10.20 to the system as the HLA NIUs.   These additional computers increased our expected data latency but not significantly (total latency was between 2 and 5%). The CreateEntity and DestroyEntity interactions from the RPR-FOM were not necessary since the RTI provides DiscoverObject, RemoveObject and DeleteObject calls.The developer should ensure that all attributes have a default constructor value assigned even if initialized.  Core dumps in the RTI were found when this undocumented RTI rule was not followed.The RTI example program, ‘helloWorld’ was a good example to use to understand the RTI application programmer’s interface.The ‘helloWorld’ software, that is distributed with the RTI, had errors in the find() and destructor methods for the Country object.  An array index problem exists when the requested object is not found in the “extent” array.  This bug causes the ‘helloWorld’ software to return a pointer to the last object in the “extent” array instead of a NULL pointer. HLA OMTObject Models must be used to satisfy HLA compliance.The RPR-FOM was used as the basis of our SOM and FOM.  In our research, we implemented a minimum number of objects and interactions to demonstrate a realistic submarine warfare scenario with acoustics emissions.  The objects used were based on the RPR-FOM implementation of the DIS Entity State PDU and interactions were based on the Fire, Detonate, Collision and Emission PDUs.  Object Models Lessons LearnedSince HLA FOM development was relatively new at the time of this research, the RPR FOM was in a constant state of flux.  Every time the RPR FOM changed data representations, which occurred with every released version, it adversely affected the SMMTT, Acoustics FOM and SOM.   After several RPR updates, further updates were no longer accepted and the SMMTT and RPR FOMs diverged. The OMT was also an immature product. Every time the table format was changed by the HLA community, it adversely affected our SOM.Our approach started with a single level (flat) object class table due to the complexity of the RTI’s API, as seen in the size and complexity of the ‘helloWorld’ example.  We moved to a multi-level implementation after we understood the API.  A single level object class is recommended initially.ResearchThis research has been implemented in multiple phases.  The first phase, completed in 1997, familiarized us with the RTI and got something working as quickly as possible.  The second phase, completed in 1998, upgraded this research to the latest released tools and completed the initial SMMTT, Acoustics integration and testing.HLA NIU ArchitectureThe internal HLA NIU architecture is defined in Figure 1.  The NIU, an object oriented implementation, is considered an intelligent gateway because it translates messages from TCP/IP, stores remote and local entity data, initiates RTI updates, processes HLA requests and sends/receives interaction updates.  The NIU is designed to be reusable and acts as an API between the federate and the HLA environment.  The main processing or event loop, for the NIU consists of the following: A Time Advance Grant is requested of the RTI. The RTIambassador::tick() function is called until the TimeAdvanceRequest is granted.Once the Time Advance is granted, the SMMTT Input Data Handler (IDH) routine is called.  The IDH process messages that are received over TCP/IP from the ICS.   The messages that are supported are:Create EntityDestroy Entity FireCollisionDetonateUpdate AttributesThese messages are used to update the local representations of all objects and also converted to Attribute Updates and Interactions that are sent out using the RTI with calls to the RTI Ambassador.The NIU also receives Attribute Updates and Interactions from the Federate Ambassador of the RTI.  These messages are used to update the local representations of remote objects and are converted to messages that are sent via TCP/IP to the ICS that is connected to the NIU.The instructor console subsystem was the logical connection point to the SMMTT, Acoustics trainer.  Remote and local entities appear as local entities to the rest of the trainer modules.  Also, the ICS interface to the rest of the trainer contains most of the data required to characterize the simulation objects and interactions and a dynamic position algorithm supporting contact and ownship kinematics and maneuvers.  This HLA NIU implementation is generic and applies to many HLA applications.  HLA NIU Integration and Testing The objective of this research was to test if the HLA NIU adversely affected acoustics training in this trainer.  If the operator display is not disrupted, accurate acoustic modeling is maintained and the resource measurements were adequate, the HLA NIU could be used without further trainer modifications for similar training scenarios.  A series of stress tests were performed to determine if the additional HLA interface degraded performance noticeably within the 20 contact requirements of the Acoustics trainer.The test bed used for the HLA NIU testing is shown in Figure 2.  The SMMTT, Acoustics trainer LAN includes the ICS.  Trainer communication is accomplished using TCP/IP.  The trainer ICS is connected to NIU1 for trainer to HLA message translation.  NIU1 is connected to NIU2 to simulate two disparate federates in our lab.   The second NIU is connected to another ICS where remote contacts are introduced into this test.Testing ResultsThe CPU processing load, network bandwidth and latency of RTI messages were measured in the acoustic trainer under varied conditions. We gradually increased the number of contacts while still measuring performance.  The number of federates were varied from one to eleven, a representative federate load. The number of acoustic contacts in the trainer cannot exceed 21 including ownship.  This is a limitation of the trainer requirements and signal processing capacity. The CPU measurements of the NIUs were made using an operating system utility.  The percentage of the HP J210s used to complete the processing defined in the NIU was between 2 and 5%.  This additional processing load is considered as acceptable.  This NIU code may be ported into the ICS in the future since the CPU requirements are minimal.The bandwidth measurements were made using the 10baseT Ethernet hub network utilization display.  The percentage of the Ethernet used between the NIUs was between 1% and 6%.  This measurement is expected to increase when two or more dissimilar federates are connected.  At this point, the bandwidth utilization is considered insignificant.The latency measurements were made adding system time calls to capture time when the message was created, capture time when the message reached its destination and calculate the difference.  Several messages were timed, but the Entity Delete message was selected as the representative message because it travels through the whole processor string (originated at one ICS and traveled through two NIUs to the other ICS).  The latencies ranged from 200 to 640ms. The average delay for 10 contacts was approximately 330ms.  The average delay for 20 contacts was approximately 550ms.  Figure 3 illustrates the testing results of the HLA NIU tests with 10 contacts. Figure 4 illustrates the testing results of the HLA NIU tests with 20 contacts.  As expected, increasing contacts increased the latency.   Figure 3 HLA NIU Performance with 10 ContactsFigure 4 HLA NIU Performance with 20 ContactsThe engineers that staffed the sonar operator stations did not notice any degradation to the sonar displays when HLA was incorporated.  Accurate sonar training was maintained in the research.  The resource measurements were better than expected, adding a small additional load to the CPU, bandwidth and latency resources.Lessons LearnedWe were not able to capture the RTI latency between federates on different hosts.  The RTI message content is not documented in the supporting documentation.  If the message formats were known performance of the RTI over a network could be quantified and trapped for evaluation.  HLA Community SupportThe following resources were used to support this research.  All of these information resources were helpful.  ‘HLA Hands-on Practicum’ class, sponsored by DMSO, was excellentRTI help desk answered both email and phone questionsAutomated tools such as OMDTWeb pages for DMSO documentationReflectors to ask questions of other HLA developersSUMMARYThe following recommendations are made to the new HLA developer for a legacy or non-legacy simulation.  Understand the HLA compliance rules, process and interfaces as documented on the DMSO web page.Select a computer platform for the RTI that is supported by DMSO, preferably one of its most popular platforms like Windows or Solaris.To develop an object model, start with the RPR-FOM as your basis.  This seems to be the most widely used reference FOM and as such is the most current and supported FOM available today.  It also satisfies all applicable HLA Rules.Start with a single level object model due to the complexity of the RTI’s API.  Move to a multi-level implementation after you understand the API.  To develop software to interface with the RTI, use a COTS product such as MAK Technologies VR-Link product or start with the ‘helloWorld’ example bundled with the RTI.Enroll in the HLA Hands-On Practicum class, sponsored by DMSO.  Use the HLA community support network to answer questions and test hypotheses.The process to perform HLA federation execution worked well and supported the application developer. The SMMTT, Acoustics segment is prepared for HLA based exercises with other trainers including the SMMTT, Combat Control segment after completing this research.  HLA compliance will be tested and certified in a future task using the official compliance testing method.This research proved that HLA compliance is possible at a very low cost (< 1 man-year).  This research provides a basis for HLA inclusion in other trainer programs.    REFERENCESArchitecture Issues for DIS-to-HLA Conversion, Technical Report 97-014, Daniel J. Paterson, Eric Anschuetz, Mark Biddle, Dave Kotick, Thai Nguyen, Naval Air Warfare Center Training Systems Division, December 1997Department of Defense High Level Architecture Federation Development and Execution Process (FEDEP) Model, Version 1.1, 9 December 1997High-Level Architecture Object Model Template DRAFT, Version 1.3, 5 February 1998Department of Defense High Level Architecture OMT Extensions, Version 1.0, 20 August 1996U.S. Department of Defense High-Level Architecture Rules DRAFT 2, Version 1.3, 5 February 1998U.S. Department of Defense High Level Architecture Interface Specification DRAFT 9, Version 1.3, 5 February 1998HLA Hands-On Practicum Programming with the Run Time Infrastructure 1.0 class notes, SAIC and Virtual Technology CorporationHigh Level Architecture (HLA) Object Model Development Tool (OMDT) User’s Guide, Version 1.3 Beta, AEgis Research, March 1998AUTHOR BIOGRAPHIESPatricia Devine is Maritime and International Systems System Architect and Chief Engineer for the Submarine Multi-Mission Team Trainer (SMMTT) for Lockheed Martin Federal Systems, Manassas, VA.  She was also published in the 13th DIS Workshop and the 1997 Fall Simulation Interoperability Workshop.Glenn Gross is a Staff Software Engineer for the SMMTT and LAMPS trainer programs for Lockheed Martin Federal Systems, Manassas, VA.  He is the principal developer on the High Level Architecture Network Interface Unit IR&D task.  He was also published in the 1997 Simulation Interoperability Workshop. EMBED Excel.Sheet.8   EMBED MS_ClipArt_Gallery  Figure 2 HLA NIU Test BedRTIInterface EMBED MS_ClipArt_Gallery   EMBED MS_ClipArt_Gallery  SMMTT, AcousticsTrainer LANNIU2IR&DICSDisplay Work-stationNIU1SendTrainerICS EMBED MS_ClipArt_Gallery  ReceiveTCP/IPRTIIIFederation ExecutionRTI ExecutionAirSurfaceSubsurfaceMunitionPlatformPhysical EntityEntityInput Data HandlerFigure 1 HLA NIU ArchitectureRTIAmbassadorAmbassadorFederateUser ApplicationHLA NIUTo OtherFederatesSMMTTICS EMBED Excel.Sheet.8   EMBED MS_ClipArt_Gallery  