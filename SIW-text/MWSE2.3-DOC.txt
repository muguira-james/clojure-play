A Composite HWIL/Event Driven Federation forMine Warfare AnalysisRussell D. MaceLawrence R. HowellTracor Aerospace, Inc.700 W. 23rd Street, Suite 22Panama City, FL  32405850-769-2428 HYPERLINK mailto:mace@galileo.tracor.com mace@galileo.tracor.com,  HYPERLINK mailto:lhowell@galileo.tracor.com lhowell@galileo.tracor.comGeorge H. Gilman Jr.Coastal Systems Station, Code E11Naval Surface Warfare Center/Dahlgren Division6703 W. Highway 98Panama City, FL  32407850-235-5955 HYPERLINK mailto:gilman_george@ccmail.ncsc.navy.mil gilman_george@ccmail.ncsc.navy.milKeywords:Naval Mine Warfare Simulation, NMWS, Multi-Warfare System Evaluator, MWSE, hardware-in-loop, HLA interface design, federation development, legacy simulation, object modelABSTRACT:  The Naval Mine Warfare Simulation (NMWS) at the Coastal Systems Station (CSS) Naval Surface Warfare Center/Dahlgren Division (NSWC/DD), is a platform-level, engagement simulation used in Naval Mine Warfare (MIW) tactical and analysis applications.  The faster-than-real-time NMWS employs parametric mine-platform interaction models that require off-line generation of the interaction parameters prior to simulation analysis.  Under certain conditions, it is desirable to conduct engagement analyses with high-fidelity mine-platform (or mine-sweep) interaction models.  CSS has a high fidelity, hardware-in-loop (HWIL) mine simulation within its Multi-Warfare Systems Evaluator (MWSE).  To provide this high-fidelity capability to the NMWS a High Level Architecture (HLA) interface has been developed for the real-time HWIL MWSE and the constructive, event-driven NMWS to allow interoperation in a MIW federation.This paper presents an overview of the federation design, and provides details of the MWSE HLA interface design and some of the associated issues.  Emphasis is placed on overcoming issues in time management and transfer of object ownership.  Design strategy and lessons-learned in developing a real-time, HWIL simulation HLA interface are discussed.IntroductionIn recent years, MIW has changed dramatically on several different fronts.  For example, since the Persian Gulf War, the number of mine producers and mine exporters has grown significantly, and the widespread availability of advanced electronics and sensors has made the mines they are producing and selling significantly more sophisticated.  Combating this growing threat has lead to a shift in MIW emphasis from the deep water arena to the littoral arena, which has generated new tactical/operational requirements and the need for a wider variety and larger number of MIW systems.  Perhaps the most significant change in MIW, however, is the U.S. Navy’s move to evolve its MIW capability from an “on-demand” function to an in-stride, organic capability for expeditionary force power projection [1].All these changes have made the issues surrounding MIW analyses, system development, and testing and evaluation (T&E) increasingly complex.  This complexity has given rise to the need for simulation tools to help effectively develop robust MIW systems, analyze system deployment and effectiveness problems, and test prototypes to fleet-issue items.  MIW planning and coordinating documents recognize and support this need for simulation tools as supporting infrastructure components [2].As in many defense applications, historically stand-alone tools have been employed to support MIW analysis, development, and T&E application.  However, due to the growing number of platforms and systems, the changing complexity of the interactions, and the increasing warfighter interface in MIW as it evolves, stand-alone tools must be replaced with distributed simulations which employ the best combination of simulation tools. This paper discusses some of the issues encountered in the design of one such distributed simulation, a MIW federation of two existing MIW simulations, the NMWS and the MWSE.  The NMWS/MWSE federation, which is currently being designed by the CSS, uses a real-time, HWIL simulation HLA interface design.  The development version of the federation is currently undergoing testing and exercise.2.	FederatesNaval Mine Warfare Simulation (NMWS)The NMWS is an event-driven, object-oriented simulation that can model a wide variety of naval forces, platforms, and scenarios.  It is a platform level simulation with a large and growing library of available platform and system models.  NMWS is a derivative of the NSWC Multi-Warfare Analysis and Research Simulation (MARS) simulation and is implemented in CACI’s MODSIM II simulation language.  One of its key features is its methodology for handling interactions between platforms of mine countermeasure (MCM) gear and mines.  These interactions are modeled as classic “cookie-cutter” interaction models.  Such a mine interaction is a probabilistic model characterized by two parameters – the mine’s A and B parameters.  The A parameter is the mine’s actuation range and the B parameter is its probability of actuation.  In this simple model, interaction events always occur at platform/MCM closest point of approach (CPA) to the mine.  A slightly more complex model is available which allows non-CPA actuations by queuing up multiple interaction events for ranges less than A based on the availability of a range-dependent B vector.  In this model, the multiple actuation opportunities are assumed to be independent events.These probabilistic models frequently require the generation of large tables of A and B values, especially in problems involving expeditionary operations in shallow and very shallow water.  The A, B values are generally dependent on many platform, MCM, and environmental parameters.  If one considers that future MCM concepts may consist of networked “swarms” of free-swimming and/or bottom crawling robotic vehicles operating in highly dynamic shallow water to surf zone conditions for clearance of large numbers of moored and bottom mines, then the A, B data generation and handling requirements could be quite large.  One alternative approach is to interface the NMWS to a high fidelity, physics-based simulation of one or more of the threat mines for on-demand evaluation of those platform/MCM interactions with the subject mines.  The MWSE is a real-time, HWIL simulation complex which provides this capacity.2.2	Multi-Warfare Systems Evaluator (MWSE)The MWSE is a real-time, HWIL simulation and stimulation facility used in support of Littoral Warfare systems development.  The facility is capable of providing systems under test (SUT) with the acoustic stimulation required to duplicate the actual operating environment.  SUTs may include sonar systems, torpedoes, mines, minehunting systems, countermeasures, ships, and submarines.  By using a wide variety of models, acoustic signal interactions with complex acoustic environments and targets are computed in real-time.  These computed signals, scaled to represent the electrical output of transducers, are input in real-time to the actual SUT electronic hardware that is specially interfaced to the MWSE.  The SUT then performs its own signal detection, signal processing, and guidance/control functions to determine a response to the received signal.  An interactive human-in-the-loop (HIL) capability exists to allow "on-the-fly" changes to simulation parameters.The MWSE facility has many uses in the Littoral Warfare areas, including concept assessment and development; virtual prototyping; prototype testing; firmware (algorithm) development; error sensitivity studies; performance/supportability tradeoffs; system integration; and foreign system exploitation.  The area of application that has provided the most direct savings is in the area of T&E.  The MWSE is used to evaluate test plans through pre-testing of test scenarios.  It is used to focus the testing plans by eliminating inappropriate or "low payback" testing.  In addition, the facility is used to augment testing when certain conditions are either unavailable, unsafe, or too expensive using conventional at-sea tests.Many of the simulations and stimulations developed on the MWSE have been accredited and validated by the Operational Test and Evaluation Force (OPTEVFOR).  The MWSE has served as a trusted agent for OPTEVFOR many times in its participation in the Technical Evaluation/Operational Evaluation ( TECHEVAL/ OPEVAL) testing of systems.In addition to the real-time and HWIL acoustic aspects of the facility, the MWSE has capabilities in the area of non-real-time, all-digital modeling and simulation.  Electro-optic (EO) simulations have been developed to provide support to developing minehunting and killing systems.  These simulations provide the EO modeling, platform motion, targeting, fire control, and projectile flight simulations necessary to provide an end-to-end simulation.  Other Monte Carlo type simulations have been developed in support of MCM systems operating in the surf zone and very shallow water environments.3.	A Distributed MIW SimulationThe first step in creating a distributed MIW simulation for research development evaluation (RDE) applications is to build the federation of the NMWS with the MWSE mine simulation.  This involves developing HLA interfaces for each simulation, as well as designing a structured federation development process.  This paper addresses the HLA interface design for the MWSE and the federation development.  The HLA interface for the NMWS applies the Shlaer-Mellor methodology.  This has interesting potential as the basis for an agile federation object model/simulation object model (FOM/SOM) approach, but a discussion of this is beyond the scope of this paper.The federation concept described below is based on the premise that interactions with one mine type in a subject analysis will be handled by the MWSE as a real-time HWIL federate, and all other object state transitions and interactions will be handled by the NMWS as a faster-than-real-time, event-driven federate.  This is accomplished by transferring appropriate platform/MCM and mine ownership to the MWSE when interactions occur, as well as transferring time management responsibilities.The NMWS/MWSE FederationThe NMWS/MWSE federation consists of a tactical scenario executed on the NMWS, with the MWSE providing support by simulating specific encounters between mines and their targets.  The NMWS operates as the simulation controller, and is responsible for distributing mines in minefields, maneuvering ships within the operating region, and performing minesweeping and minehunting tactics during the course of the simulation.  The MWSE operates as a simulation for a mine-target encounter.The NMWS initiates the MWSE simulation when it detects a target approaching within some threshold encounter range from a mine.  Figure 1.1 depicts the federate roles in the encounter process.  When the target penetrates the mine’s sphere of influence, the NMWS initiates an “Encounter Detected” interaction, and requests that the MWSE assume ownership of the mine and the target.  The MWSE simulation then assumes ownership of the mine and all targets within the threshold range of the mine.  This transition of control from the faster-than-real-time, event-driven NMWS to the real-time, HWIL MWSE gives rise to several issues which the HLA protocol is uniquely equipped to address.  These issues, which are discussed in section 5, could not have been addressed with the Distributed Interactive Simulation (DIS) protocol.  Figure 1.1:  Federate Roles in Mine/TargetThe NMWS/MWSE FOM was designed to remain as simple as possible to accomplish the federation operation described.  Table 1.1 presents the Object Class Structure table of the FOM. Table 1.2 presents the FOM Attribute/Parameter table, and Table 1.3 presents the Object Interaction Table.Class 1Class 2Platform (PS)Dynamic_Platform (PS)Mine (PS)Table 1.1: Object_Class Structure TableObject/InteractionAttribute/ParameterTransferable/AcceptableUpdateable/ReflectablePlatformObject_Typex_positiony_positionz_positionTATATATAURURURURDynamic_PlatformspeedheadingTATAURURMineship_countencounter_rangeTATAURURChange_HeadingNew_HeadingN/AN/AChange_SpeedNew_SpeedN/AN/ATable 1.2: Attribute/Parameter DefinitionInteractionInitiating ObjectReceiving ObjectInteraction ParametersClassAttributesClassAttributesChange_HeadingDynamic_PlatformNoneDynamic_PlatformheadingNew_HeadingChange_SpeedDynamic_PlatformNoneDynamic_PlatformspeedNew_SpeedEncounter_DetectedDynamic_PlatformNoneMineNoneNoneEncounter_CompleteDynamic_PlatformNoneMineNoneNoneShip_Count_FiredMineship_countMineship_countNoneDetonation_OccurredMineNoneMineNoneNoneTable 1.3: Object Interaction Table3.2	HLA Interface ProgramOne primary consideration of interfacing any legacy simulation via HLA to other distributed simulations is the desirability of making few or no changes to the legacy simulation.  The design of the HLA Interface Program was successful in that it did not modify any software and/or hardware in the MWSE.  The MWSE is a complicated system with significant maintenance costs associated with software and/or hardware changes.  These maintenance costs made it cost-prohibitive to integrate the HLA Interface Program within the existing MWSE software.The HLA Interface Program operates as a stand-alone program running on a personal computer (PC) and interfacing to the MWSE via a shared memory interface.  The MWSE's shared memory interface provides control mechanisms to allow the HLA Interface Program to control the operation of the MWSE, and monitor its operating states.  During the execution of this federation, the MWSE simulation operates in four states.  Figure 1.2 depicts a diagram of the MWSE operation states during a federation execution.Figure 1.2: MWSE Operating StatesThe MWSE simulation begins in the “Not Running” state.  In this state, the MWSE has not been initialized by the operator, and the HLA Interface Program has not joined the federation.  The federation has no knowledge of the MWSE simulation in this state.  When the operator initializes the MWSE, it will enter the “Idle” state.  In the idle state, the HLA Interface Program joins the federation and informs the federation of all objects and interactions that it may subscribe to or publish.  The MWSE simulation remains in this state until an “Encounter Detected” interaction is published by another federate.  The HLA Interface Program commands the MWSE to enter the “Activating Object” state when an “Encounter Detected” event occurs.  If the MWSE is in the idle state, or the detected encounter involves the mine that is currently under simulation, then the HLA interface accepts ownership of the mine and target, initializes the positions and other information concerning those objects, and activates those objects in the MWSE scenario.  After those objects have been activated, the MWSE simulation enters the “Simulating Encounter” state.  In this state, the MWSE executes the simulation scenario and updates values for all objects that have been activated.  The HLA Interface Program reflects attribute values and mine-target interactions to others in the federation.  The MWSE continues simulating the encounter until it detects that there are no active targets potentially detectable by the mine, or until the NMWS issues a “Detonation Occurred” interaction.  When either of these events occurs, the MWSE returns to the idle state.4.	HLA Interface Program Design4.1	System ArchitectureThe HLA Interface Program runs on a dedicated PC that communicates to the MWSE via a shared memory interface, and communicates to the NMWS via the HLA Run-Time Infrastructure (RTI).  The NMWS is connected to the Ethernet Local Area Network at the CSS, as is the PC running the HLA Interface Program.  The RTI supports the Ethernet standard, as well as the Visual C++ development environment on the PC.  Figure 1.3 presents the HLA Interface System Architecture.Software Architecture4.2.1	Shlaer-Mellor MethodologyThe HLA Interface Program design was conducted using the Shlaer-Mellor object-oriented design methodology.  The Shlaer-Mellor methodology is supported by theObjectBench CASE tool available at the CSS.  The figures and designs presented in the following paragraphs use the nomenclature detailed in the references.  The Shlaer-Mellor methodology is completely detailed in reference [3] and [4].  Information concerning the ObjectBench CASE tool may be found on the Internet at  HYPERLINK http://www.ses.com/objectbench http://www.ses.com/objectbench.Figure 1.3: HLA Interface System Architecture4.2.2	HLA Interface Program Object ModelThe HLA Interface Program design consists of 14 object classes grouped into 4 categories.  These classes are shown in Figure 1.4. The Federate Control classes perform functions for itinializing and managing the HLA Interface Program.  The Interaction Communication classes perform functions for transferring and interpreting HLA interactions.  The MWSE Objects classes perform functions for reflecting and updating distributed objects in the federation to the MWSE.  The Object Communication classes perform functions for configuring and communicating of HLA object attributes.Figure 1.4: HLA Interface Program Object ClassesFigure 1.5 shows the HLA Interface Program Information Model.  This model describes the relationships between each of the HLA Interface Program objects, and details the attributes that describe each object.  The Time_Negotiator and MWSE/HLA_Object_Communi-cator classes (presented in Figures 1.6 and 1.7) are described in more detail in subsequent paragraphs.HLA Interfaces ChallengesAdding HLA Support to Existing SimulationsMany Department of Defense organizations are faced with the task of upgrading legacy simulation systems to provide HLA compliance.  The MWSE simulation system is typical of these legacy systems.  It is written with methodologies, computer programming languages, and computer systems that were state of the art during their development, but which are now considered outdated technology.  The MWSE is written in FORTRAN and assembly language, running on a combination of parallel computers and minicomputers.  It was deemed uneconomical to change the existing MWSE software to integrate an HLA capability. The HLA Interface Program design was specifically chosen to achieve HLA compliance while minimizing the requirements for rewriting MWSE software or changing MWSE hardware.  The design principles are described in the following paragraphs.The HLA interface design keeps the SOM simple, with a small number of limited interactions, and a small number of limited attributes.  The SOM for the MWSE includes five interactions, with no more than one parameter each. The SOM includes three object classes with a total of eight attributes.  Rather than expand or change the functionality of the MWSE to achieve HLA compliance, the design concentrates on a simplified model of the MWSE capabilities to be presented to the federation.The MWSE provides a limited interface to its control functions and the attributes of its simulated objects via a shared memory interface.  The HLA Interface Program was developed on a separate PC-based system interfaced with the shared memory.  This design allowed the HLA Interface Program to be written as a stand-alone program with well-defined interfaces to the MWSE and to the federation.  This design isolates the HLA functionality from the existing functionality of the MWSE, simplifying the testing of the system.The HLA interface is designed such that it has no knowledge of the attributes of the objects that it is updating or reflecting.  The HLA interface simply transfers attribute values using the HLA and does not process those values.  The HLA interface has been designed as a controller for the MWSE system, but all of the operating state changes that the MWSE undergoes are due to events that are published by other federates in the federation.  The MWSE operates as a slave to other federates, meaning that all objects are created by other federates, and the interface subscribes only, until ownership is passed to it.  Once ownership is passed, then it activates objects in the MWSE and publishes their attributes.5.2  Dynamic Changes in Time ManagementThe HLA protocol provides sufficient mechanisms for handling the distributed simulation’s time management.  The HLA time management mechanisms allow a federate to switch from an externally time synchronized state to a logical time aggressive state.  The externally time synchronized state is one in which the federate passively follows the federation time, and the federation time is regulated by other federates.  The logical time aggressive state is one in which the federate regulates the federation time, not allowing a time advance until it has issued all events and object updates for the current time step. The NMWS/MWSE federation requires the MWSE to operate as an externally time synchronized federate when no mine-target encounter is being simulated.  During this time, the MWSE is in an idle state operating in a non-time regulating fashion, and the NMWS is operating at its usual faster-than-real-time state.  A transition of time management occurs when a mine-target encounter is detected.  At this point, MWSE transitions to a logical time aggressive state.  It begins regulating the time of the federation and slows the federation time advances down to its real-time rate.The HLA Interface Program has been designed with a Time Negotiator class that performs this switch between the externally time synchronized state and the logical time aggressive state.  Figure 1.6 presents the Shlaer-Mellor lifecycle diagram for the Time Negotiator class.  When switching from the time synchronized state to the logical time aggressive state, the Time Negotiator object uses the setLookahead method and the turnRegulationOnNow method of the RTI ambassador.  While in this state, the Time Negotiator issues timeAdvanceRequest calls to the RTI ambassador.  When returning to the time synchronized state, the Time Negotiator object uses the turnRegulationOff method of the RTI ambassador.5.3  Transfer of Object OwnershipThe HLA protocol is also instrumental in providing mechanisms for transferring ownership of objects from one federate to another.  The HLA ownership management functions allow an object defined by one federate to be transferred and published by another federate.  In the NMWS/MWSE federation, all objects are defined by the NMWS, while the MWSE simulates only a small portion of the overall scenario, specifically the encounter between a single mine and targets within its sphere of influence.  The MWSE federate acquires and releases the ownership of the mines and targets upon request.Figure 1.6: Time Negotiator LifecycleThe HLA Interface Program design includes an Object Communicator class that acquires and divests ownership of objects from other federates.  Figure 1.7 presents the Shlaer-Mellor lifecycles diagram for the Object Communicator class.  The HLA Interface Program is designed so that it does not initiate ownership transfers for any attributes, but only responds to requests for attribute ownership from other federates.  The HLA Interface Program issues a call to the requestAttributeOwnershipAcquisition method of the RTI ambassador in response to a request for attribute ownership assumption.  The HLA Interface Program issues a call to the requestAttributeOwnershipRelease method of the RTI ambassador in response to a request for attribute ownership divestiture.6.  ResultsTesting and exercise of the NMWS/MWSE federation are underway.  The results will be presented at the next workshop.Future PlansThe NMWS HLA interface development is ongoing.  Detailed testing of the NMWS/MWSE federation is planned for FY 99 following completion of this interface component.  This interface development effort sets the stage for federation expansion to include live entity participation in fleet tactics development, platform development such as in the SC 21 program, and advanced development of MCM technology in the Very Shallow Water/Surf Zone (VSW/SZ) MCM Program.In the VSW/SZ MCM Program, the addition of a live entity capability will allow guidance and control (G&C) algorithm development, evaluation of interdependencies in robotic system performance, and frequent integration tests of various subsystem design created by geographically distributed researchers.  As sensor, algorithm, and platform prototype hardware appears, it can participate in the federation as HWIL components or live-entities on test ranges thus decreasing the functionality assigned to the NMWS and increasing the federation development.References[1]	“The Future of Mine Countermeasures,” by D. W. Shepherd, MCOG Special Publication (September, 1996), Coastal Systems Station, Naval Surface Warfare Center/Dahlgren Division, Panama City, FL.[2]	“A Top-Level, Concept of Operations for Mine Countermeasures,” MCOG Special Publication, Coastal Systems Station, Naval Surface Warfare Center/Dahlgren Division, Panama City, FL.[3]	Sally Shlaer, Stephen J. Mellor: Object Oriented Systems Analysis: Modeling the World in Data, Prentice Hall, New Jersey 1998[4]	Sally Shlaer, Stephen J. Mellor: Object Oriented Systems Analysis: Modeling the World in States, Prentice Hall, New Jersey 1991Figure 1.7: Object Communicator Lifecycle EMBED Word.Picture.8  Figure  SEQ Figure \* ARABIC 1.5: HLA Interface Program Information Model